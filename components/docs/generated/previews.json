{
  "colors/color-swatch/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <ColorSwatchPicker\n            aria-label='Pick color'\n            value={value}\n            onChange={setValue}\n            className='grid grid-cols-3 lg:grid-cols-6 gap-2'\n        >\n            <ColorSwatchPicker.Item color='#f59e0b' />\n            <ColorSwatchPicker.Item color='#84cc16' />\n            <ColorSwatchPicker.Item color='#0d6efd' />\n            <ColorSwatchPicker.Item color='#ec4899' />\n            <ColorSwatchPicker.Item color='#f43f5e' />\n        </ColorSwatchPicker>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-demo",
    "raw": "'use client'\n\nimport { ColorSwatch } from '@/components/ui'\n\nexport default function ColorSwatchDemo() {\n    return <ColorSwatch aria-label='Current color' color='#0d6efd' />\n}\n"
  },
  "colors/color-swatch/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-item-disabled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker, Description } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                value={value}\n                onChange={setValue}\n                className='flex justify-center gap-2'\n            >\n                <ColorSwatchPicker.Item isDisabled color='#f59e0b' />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item isDisabled color='#ec4899' />\n                <ColorSwatchPicker.Item isDisabled color='#f43f5e' />\n            </ColorSwatchPicker>\n\n            <Description>{value.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-controlled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker, Description } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [color, setColor] = React.useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                value={color}\n                onChange={setColor}\n                className='flex justify-center gap-2'\n            >\n                <ColorSwatchPicker.Item color='#f59e0b' />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item color='#ec4899' />\n                <ColorSwatchPicker.Item color='#f43f5e' />\n            </ColorSwatchPicker>\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-wheel/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorWheel, Description } from '@/components/ui'\n\nexport default function ColorWheelControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n    return (\n        <div className='grid gap-4 justify-center items-center sm:grid-cols-2'>\n            <div className='shrink-0 grid place-content-center'>\n                <ColorWheel aria-label='Background color' value={color} onChange={setColor} />\n            </div>\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-wheel/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-demo",
    "raw": "'use client'\n\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelDemo() {\n    return <ColorWheel aria-label='Background color' />\n}\n"
  },
  "colors/color-wheel/color-wheel-disabled-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-disabled-demo",
    "raw": "'use client'\n\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelDisabledDemo() {\n    return <ColorWheel aria-label='Background color is disabled' isDisabled />\n}\n"
  },
  "colors/color-slider/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-with-label-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderWithLabelDemo() {\n    return <ColorSlider label='Color Customizer' channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n"
  },
  "colors/color-slider/color-slider-disabled-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-disabled-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDisabledDemo() {\n    return <ColorSlider isDisabled channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n"
  },
  "colors/color-slider/color-slider-vertical-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-vertical-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderVerticalDemo() {\n    return (\n        <div className='flex items-center justify-center'>\n            <ColorSlider\n                orientation='vertical'\n                label='Fill Color'\n                channel='hue'\n                defaultValue='hsl(0, 100%, 50%)'\n            />\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-controlled-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorSlider, defaultColor, Description } from '@/components/ui'\n\nexport default function ColorSliderControlledDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <div className='flex flex-col gap-2'>\n            <ColorSlider channel='hue' value={color} onChange={setColor} />\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDemo() {\n    return <ColorSlider channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n"
  },
  "colors/color-picker/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-label-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker label='Theme Color' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-swatch-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Color } from 'react-aria-components'\n\nimport {\n    ColorArea,\n    ColorField,\n    ColorPicker,\n    ColorSlider,\n    ColorSwatchPicker,\n    defaultColor\n} from '@/components/ui'\n\nexport default function ColorPickerEnableSwatchDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const colorChangeHandler = (v: Color) => {\n        setColor(v)\n    }\n    return (\n        <ColorPicker value={color} onChange={(v) => colorChangeHandler(v)}>\n            <ColorArea colorSpace='hsb' xChannel='saturation' yChannel='brightness' />\n            <ColorSlider colorSpace='hsb' channel='hue' />\n            <ColorField aria-label='Hex color' />\n            <ColorSwatchPicker\n                aria-label='Color swatch picker'\n                layout='grid'\n                className='flex flex-wrap gap-2'\n            >\n                {colors.map((color) => (\n                    <ColorSwatchPicker.Item key={color} color={color} />\n                ))}\n            </ColorSwatchPicker>\n        </ColorPicker>\n    )\n}\n\nconst colors = [\n    '#f59e0b',\n    '#84cc16',\n    '#0d6efd',\n    '#ec4899',\n    '#f43f5e',\n    '#d4b990',\n    '#b19f73',\n    '#9370db',\n    '#7d60df'\n]\n"
  },
  "colors/color-picker/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-description-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithDescriptionDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <ColorPicker\n            label='Theme Color'\n            description='Snag a color for the app theme'\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n"
  },
  "colors/color-picker/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDemo() {\n    const [color, setColor] = React.useState(parseColor('#0d6efd'))\n    return <ColorPicker label='Color Picker' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDisabledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n    return <ColorPicker isDisabled label='Color Picker' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor, Description } from '@/components/ui'\n\nexport default function ColorPickerControlledDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n\n    return (\n        <div className='flex flex-col lg:flex-row gap-2 lg:gap-4'>\n            <ColorPicker value={color} onChange={setColor} />\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-selection-format-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorPicker, defaultColor, Select } from '@/components/ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const [isHexFormat, setIsHexFormat] = React.useState(false)\n    const [space, setSpace] = React.useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker label={color.toString(space)} value={color} onChange={setColor}>\n            <>\n                <ColorArea />\n                <Select\n                    aria-label='Color Space'\n                    selectedKey={space}\n                    defaultSelectedKey={space}\n                    onSelectionChange={(s) => {\n                        setSpace(s as ColorSpace)\n                        setIsHexFormat(s === 'hex')\n                    }}\n                >\n                    {['rgb', 'hex', 'hsl', 'hsb'].map((s) => (\n                        <Select.Item key={s} id={s} textValue={s}>\n                            {s}\n                        </Select.Item>\n                    ))}\n                </Select>\n                {isHexFormat ? (\n                    <ColorField aria-label='Hex color' colorSpace={space} />\n                ) : getColorChannels(space).length > 0 ? (\n                    <div className='flex sm:max-w-56 gap-2'>\n                        {getColorChannels(space).map((channel) => (\n                            <ColorField colorSpace={space} channel={channel} key={channel} />\n                        ))}\n                    </div>\n                ) : null}\n            </>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-combination-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorPicker, ColorSlider, Select } from '@/components/ui'\n\nexport default function ColorPickerCombinationDemo() {\n    const [space, setSpace] = React.useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker label='Color picker' defaultValue='#0d6efd'>\n            <ColorArea colorSpace={space} />\n            {getColorChannels(space).map((channel) => (\n                <ColorSlider\n                    showOutput={false}\n                    key={channel}\n                    colorSpace={space}\n                    channel={channel}\n                />\n            ))}\n            <Select\n                aria-label='Color space'\n                selectedKey={space}\n                onSelectionChange={(s) => setSpace(s as ColorSpace)}\n            >\n                {['rgb', 'hsb', 'hsl'].map((s) => (\n                    <Select.Item key={s} id={s} textValue={s}>\n                        {s}\n                    </Select.Item>\n                ))}\n            </Select>\n            <div className='flex gap-2 sm:max-w-56'>\n                {getColorChannels(space).map((channel) => (\n                    <ColorField\n                        key={channel}\n                        colorSpace={space}\n                        channel={channel}\n                        className='w-full'\n                    />\n                ))}\n            </div>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-area/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area/color-area-channel-demo",
    "raw": "'use client'\n\nimport { ColorArea } from '@/components/ui'\n\nexport default function ColorAreaChannelDemo() {\n    return <ColorArea xChannel='alpha' yChannel='blue' />\n}\n"
  },
  "colors/color-area/color-area-demo": {
    "component": "@/components/docs/colors/color-area/color-area-demo",
    "raw": "'use client'\n\nimport { ColorArea } from '@/components/ui'\n\nexport default function ColorAreaDemo() {\n    return <ColorArea />\n}\n"
  },
  "colors/color-area/color-area-with-slider-demo": {
    "component": "@/components/docs/colors/color-area/color-area-with-slider-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorSlider } from '@/components/ui'\n\nexport default function ColorAreaWithSliderDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(50, 100%, 50%)'))\n    return (\n        <div className='flex max-w-60 flex-col gap-y-2'>\n            <ColorArea\n                className='w-full shrink-0'\n                value={color}\n                onChange={setColor}\n                xChannel='saturation'\n                yChannel='lightness'\n            />\n            <ColorSlider\n                label='Fill Color'\n                className='orientation-horizontal:w-full'\n                channel='hue'\n                value={color}\n                onChange={setColor}\n            />\n\n            <ColorField\n                label='Current Color'\n                enableColorPicker={false}\n                value={color.toString('hex')}\n            />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area/color-area-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorArea, ColorThumb, Description } from '@/components/ui'\n\nexport default function ColorAreaControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n\n    return (\n        <div className='flex flex-col lg:flex-row gap-2 lg:gap-4'>\n            <ColorArea value={color} onChange={setColor}>\n                <ColorThumb />\n            </ColorArea>\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area/color-area-space-demo",
    "raw": "'use client'\n\nimport { ColorArea, ColorThumb } from '@/components/ui'\n\nexport default function ColorAreaSpaceDemo() {\n    return (\n        <ColorArea colorSpace='rgb'>\n            <ColorThumb />\n        </ColorArea>\n    )\n}\n"
  },
  "colors/color-area/color-area-disabled-demo": {
    "component": "@/components/docs/colors/color-area/color-area-disabled-demo",
    "raw": "'use client'\n\nimport { ColorArea, ColorThumb as Thumb } from '@/components/ui'\n\nexport default function ColorAreaDisabledDemo() {\n    return (\n        <ColorArea isDisabled>\n            <Thumb />\n        </ColorArea>\n    )\n}\n"
  },
  "colors/color-field/color-field-demo": {
    "component": "@/components/docs/colors/color-field/color-field-demo",
    "raw": "'use client'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDemo() {\n    return <ColorField label='Color' placeholder='#FAFAFA' />\n}\n"
  },
  "colors/color-field/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field/color-field-with-prefix-demo",
    "raw": "'use client'\n\nimport { IconSwatchBook } from 'hq-icons'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldWithPrefixDemo() {\n    return <ColorField label='Color' prefix={<IconSwatchBook />} placeholder='#FAFAFA' />\n}\n"
  },
  "colors/color-field/color-field-with-suffix-demo": {
    "component": "@/components/docs/colors/color-field/color-field-with-suffix-demo",
    "raw": "'use client'\n\nimport { IconSwatchBook } from 'hq-icons'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldWithSuffixDemo() {\n    return <ColorField label='Color' suffix={<IconSwatchBook />} placeholder='#FAFAFA' />\n}\n"
  },
  "colors/color-field/color-field-disabled-demo": {
    "component": "@/components/docs/colors/color-field/color-field-disabled-demo",
    "raw": "'use client'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDisabledDemo() {\n    return <ColorField isDisabled label='Color' placeholder='#FAFAFA' />\n}\n"
  },
  "colors/color-field/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field/color-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Color, parseColor } from 'react-aria-components'\n\nimport { ColorField, Description } from '@/components/ui'\n\nexport default function ColorFieldControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('#FAFAFA'))\n    return (\n        <div className='flex flex-col lg:flex-row gap-2 lg:gap-4'>\n            <ColorField\n                className='min-w-56'\n                value={color}\n                aria-label='Pick a color'\n                onChange={(newColor: Color | null) => newColor && setColor(newColor)}\n                placeholder='#FAFAFA'\n            />\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from '@/components/ui'\n\nexport default function DropZoneDemo() {\n    const [dropped, setDropped] = React.useState(false)\n\n    return (\n        <DropZone onDrop={() => setDropped(true)}>\n            <Label>{dropped ? 'Drop nailed' : 'Toss your stuff here'}</Label>\n        </DropZone>\n    )\n}\n"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconImage } from 'hq-icons'\nimport Image from 'next/image'\nimport { isFileDropItem } from 'react-aria-components'\n\nimport { Description, DropZone, FileTrigger } from '@/components/ui'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function DropZoneAndFileTriggerDemo() {\n    const [droppedImage, setDroppedImage] = React.useState<string | undefined>(undefined)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    const onSelectHandler = async (e: FileList | null) => {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n    return (\n        <DropZone\n            getDropOperation={(types) =>\n                types.has('image/jpeg') || types.has('image/png') ? 'copy' : 'cancel'\n            }\n            onDrop={onDropHandler}\n        >\n            {droppedImage ? (\n                <Image\n                    width={400}\n                    height={300}\n                    alt=''\n                    src={droppedImage}\n                    className='aspect-square size-full object-contain'\n                />\n            ) : (\n                <div className='grid space-y-3'>\n                    <div className='size-12 mx-auto grid place-content-center rounded-full border bg-muted/70 group-data-[drop-target]:bg-primary/20 group-data-[drop-target]:border-primary/70'>\n                        <IconImage className='size-5' />\n                    </div>\n                    <div className='justify-center flex'>\n                        <FileTrigger\n                            acceptedFileTypes={['image/png', 'image/jpeg']}\n                            allowsMultiple={false}\n                            onSelect={onSelectHandler}\n                        >\n                            Upload a file\n                        </FileTrigger>\n                    </div>\n                    <Description>Or drag and drop PNG, JPG, GIF up to 10MB</Description>\n                </div>\n            )}\n            <input type='hidden' name='image' value={droppedImage} />\n        </DropZone>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateField, Form } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateField isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDemo() {\n    return <DateField label='Event date' />\n}\n"
  },
  "date-and-time/date-field/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today, type CalendarDate } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateFieldControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState<CalendarDate>(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DateField\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-disabled-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return <DateField isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/date-field/date-time-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-time-field-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateTimeFieldDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = React.useState(today)\n    return (\n        <DateField\n            hideTimeZone\n            hourCycle={24}\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            label='Event date'\n        />\n    )\n}\n"
  },
  "date-and-time/time-field/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field/date-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateField, Form } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateField isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/time-field/date-field-demo": {
    "component": "@/components/docs/date-and-time/time-field/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDemo() {\n    return <DateField label='Event date' />\n}\n"
  },
  "date-and-time/time-field/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TimeField } from '@/components/ui'\n\nexport default function TimeFieldValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <TimeField label='Event time' isRequired className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-disabled-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldDisabledDemo() {\n    return <TimeField isDisabled label='Event time' />\n}\n"
  },
  "date-and-time/time-field/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldDemo() {\n    return <TimeField defaultValue={new Time()} label='Event time' />\n}\n"
  },
  "date-and-time/time-field/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-hc-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Switch, TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldHcDemo() {\n    const [hc, setHc] = React.useState<12 | 24>(24)\n    const [value, setValue] = React.useState(new Time(13, 45))\n    return (\n        <>\n            <div className='absolute left-4 top-4 inline-flex min-w-32 flex-col gap-1'>\n                <Switch\n                    isSelected={hc === 24}\n                    onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}\n                >\n                    {hc} hour\n                </Switch>\n            </div>\n            <TimeField\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                hourCycle={hc}\n                label='Event time'\n            />\n        </>\n    )\n}\n"
  },
  "date-and-time/time-field/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field/date-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateFieldDisabledDemo() {\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DateField\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/time-field/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field/date-field-disabled-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return <DateField isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/time-field/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = React.useState(new Time(11, 45))\n    return (\n        <div className='space-y-3'>\n            <div className='[&_p]:py-2'>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <TimeField\n                label='Event time'\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/calendar/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from '@/components/ui'\n\nexport default function CalendarDemo() {\n    return <Calendar aria-label='Event date' />\n}\n"
  },
  "date-and-time/calendar/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/range-calendar-demo",
    "raw": "'use client'\n\nimport { RangeCalendar } from '@/components/ui'\n\nexport default function RangeCalendarDemo() {\n    return <RangeCalendar aria-label='Range Calendar' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\n\nexport default function DateRangePickerValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateRangePicker isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDemo() {\n    return <DateRangePicker label='Event date' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\n\nexport default function DateRangePickerCustomValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateRangePicker\n                label='Room Booking Dates'\n                validate={(range) =>\n                    range?.end.compare(range.start) > 7\n                        ? 'Maximum booking duration is 1 week.'\n                        : null\n                }\n                defaultValue={{\n                    start: today(getLocalTimeZone()),\n                    end: today(getLocalTimeZone()).add({ weeks: 2 })\n                }}\n                className='mb-2'\n            />\n            <Button type='submit'>Book Room</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-time-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-time-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateRangePickerTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const tomorrowWeek = today.add({ days: 12 })\n\n    const [value, setValue] = React.useState({\n        start: today,\n        end: tomorrowWeek\n    })\n    return (\n        <DateRangePicker\n            hideTimeZone\n            label='Date time range'\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            hourCycle={24}\n        />\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDisabledDemo() {\n    return <DateRangePicker isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateRangePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    const [value, setValue] = React.useState({\n        start: now,\n        end: tomorrowWeek\n    })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>\n                    {value\n                        ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n                        : '-- to --'}\n                </p>\n                <p>{value ? `${value.start.toString()} to ${value.end.toString()}` : '-- to --'}</p>\n            </div>\n            <DateRangePicker\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DatePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n\n    const [value, setValue] = React.useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DatePicker\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-required-demo",
    "raw": "'use client'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\n\nexport default function DatePickerRequiredDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DatePicker label='Delivery date' name='deliveryDate' isRequired className='mb-2' />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-time-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-time-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = React.useState(today)\n\n    return (\n        <DatePicker\n            hideTimeZone\n            hourCycle={24}\n            className='max-w-xs'\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            label='Event date'\n        />\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDemo() {\n    return <DatePicker label='Event date' />\n}\n"
  },
  "date-and-time/date-picker/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, startOfYear, today } from '@internationalized/date'\n\nexport default function DatePickerInvalidDemo() {\n    const ly = startOfYear(today(getLocalTimeZone()))\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState(parseDate(ly.toString()))\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DatePicker\n                validate={(date) => (date < now ? 'Select a future date, please.' : null)}\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Delivery date'\n                className='mb-2'\n            />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDisabledDemo() {\n    return <DatePicker isDisabled label='Event date' />\n}\n"
  },
  "overlays/tooltip/tooltip-placement-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-placement-demo",
    "raw": "'use client'\n\nimport { type TooltipProps } from 'react-aria-components'\n\nimport { Button, Tooltip } from '@/components/ui'\n\ntype Placement = Pick<TooltipProps, 'placement'>['placement']\nconst placements: Placement[] = ['bottom', 'top', 'left', 'start', 'right', 'end']\nexport default function TooltipPlacementDemo() {\n    return (\n        <div className='grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 [&_.kbt32x]:w-full'>\n            {placements.map((placement, idx) => (\n                <Tooltip key={idx}>\n                    <Button className='mx-auto' size='sm' variant='outline'>\n                        {placement}\n                    </Button>\n                    <Tooltip.Content placement={placement}>\n                        Tooltip shown at <strong>{placement}</strong>.\n                    </Tooltip.Content>\n                </Tooltip>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-delay-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-delay-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub } from 'hq-icons'\n\nimport { buttonVariants, Tooltip } from '@/components/ui'\n\nexport default function TooltipDelayDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Tooltip delay={0}>\n                <Tooltip.Trigger\n                    aria-label='Check My Github'\n                    className={buttonVariants({\n                        variant: 'outline',\n                        size: 'icon'\n                    })}\n                >\n                    <IconBrandGithub />\n                </Tooltip.Trigger>\n                <Tooltip.Content>Follow me on Github @dq-alhq</Tooltip.Content>\n            </Tooltip>\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-demo",
    "raw": "'use client'\n\nimport { IconBrandX } from 'hq-icons'\n\nimport { buttonVariants, Tooltip } from '@/components/ui'\n\nexport default function TooltipDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger\n                aria-label='Follow My Twitter'\n                className={buttonVariants({\n                    variant: 'outline',\n                    size: 'icon'\n                })}\n            >\n                <IconBrandX />\n            </Tooltip.Trigger>\n            <Tooltip.Content>Follow me on X @dqalhq</Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-without-arrow-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-without-arrow-demo",
    "raw": "'use client'\n\nimport { Badge, Description, Tooltip } from '@/components/ui'\n\nexport default function TooltipWithoutArrowDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger aria-label='Fresh drop alert'>\n                <Badge shape='circle'>New</Badge>\n            </Tooltip.Trigger>\n            <Tooltip.Content showArrow={false}>\n                <strong className='font-semibold'>Fresh drop alert</strong> <br />\n                <Description>Scope the newest addition to our stash.</Description>\n            </Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-variant-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-variant-demo",
    "raw": "'use client'\n\nimport { IconInfo } from 'hq-icons'\n\nimport { buttonVariants, Tooltip } from '@/components/ui'\n\nexport default function TooltipVariantDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger\n                aria-label='Attention Message'\n                className={buttonVariants({\n                    variant: 'outline',\n                    size: 'icon'\n                })}\n            >\n                <IconInfo />\n            </Tooltip.Trigger>\n            <Tooltip.Content variant='inverse'>\n                <div className='relative'>\n                    <strong className='font-semibold'>Attention</strong>\n                    <p>This is a warning message.</p>\n                </div>\n            </Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/popover/popover-arrow-demo": {
    "component": "@/components/docs/overlays/popover/popover-arrow-demo",
    "raw": "'use client'\n\nimport { IconBell } from 'hq-icons'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverArrowDemo() {\n    return (\n        <Popover>\n            <Button variant='outline' size='icon'>\n                <IconBell />\n            </Button>\n            <Popover.Content aria-label='Notifications' showArrow={false} className='min-w-72'>\n                You have 3 new notifications.\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-controlled-demo": {
    "component": "@/components/docs/overlays/popover/popover-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\n\nimport { Button, Loader, Popover } from '@/components/ui'\nimport { wait } from '@/lib/utils'\n\nexport default function PopoverControlledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [loading, setLoading] = React.useState<'idle' | 'loading' | 'success'>('idle')\n    const triggerRef = React.useRef(null)\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await wait(3000)\n        setLoading('success')\n\n        await wait(2000)\n        setLoading('idle')\n        setIsOpen(false)\n    }\n    return (\n        <>\n            <Button ref={triggerRef} onPress={() => setIsOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Popover.Content\n                aria-label='Delete Account'\n                triggerRef={triggerRef}\n                isOpen={isOpen}\n                onOpenChange={setIsOpen}\n                className='sm:max-w-sm'\n            >\n                <Popover.Header>\n                    <Popover.Title>Confirm Deletion</Popover.Title>\n                    <Popover.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)} className='mr-2'>\n                        Cancel\n                    </Button>\n                    <Button\n                        isDisabled={loading === 'loading'}\n                        onPress={deleteAccount}\n                        variant={['loading', 'idle'].includes(loading) ? 'danger' : 'primary'}\n                    >\n                        {loading === 'loading' ? (\n                            <>\n                                <Loader variant='spin' />\n                                Deleting...\n                            </>\n                        ) : loading === 'success' ? (\n                            <>\n                                <IconCircleCheck />\n                                Deleted\n                            </>\n                        ) : (\n                            <>\n                                <IconTrash />\n                                Delete\n                            </>\n                        )}\n                    </Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </>\n    )\n}\n"
  },
  "overlays/popover/popover-trigger-demo": {
    "component": "@/components/docs/overlays/popover/popover-trigger-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, Popover } from '@/components/ui'\n\nexport default function PopoverTriggerDemo() {\n    return (\n        <Popover>\n            <Popover.Trigger aria-label='Open Popover'>\n                <Avatar alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n            </Popover.Trigger>\n            <Popover.Content aria-label='Login' className='min-w-72'>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>\n                        We&apos;ll send you an email to log in.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-placement-demo": {
    "component": "@/components/docs/overlays/popover/popover-placement-demo",
    "raw": "'use client'\n\nimport { type TooltipProps } from 'react-aria-components'\n\nimport { Button, Popover } from '@/components/ui'\n\ntype Placement = Pick<TooltipProps, 'placement'>['placement']\nconst placements: Placement[] = ['bottom', 'top', 'left', 'start', 'right', 'end']\nexport default function PopoverPlacementDemo() {\n    return (\n        <div className='grid grid-cols-2 sm:grid-cols-3 gap-2 [&_.kbt32x]:w-full'>\n            {placements.map((placement, idx) => (\n                <Popover key={idx}>\n                    <Button className='mx-auto' size='sm' variant='outline'>\n                        {placement}\n                    </Button>\n                    <Popover.Content aria-label='Placement' placement={placement}>\n                        Popover shown at <strong>{placement}</strong>.\n                    </Popover.Content>\n                </Popover>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/popover/popover-custom-close": {
    "component": "@/components/docs/overlays/popover/popover-custom-close",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Popover, TextField } from '@/components/ui'\n\nexport default function PopoverCustomClose() {\n    return (\n        <Popover>\n            <Button>Login</Button>\n            <Popover.Content aria-label='Login' className='sm:min-w-96'>\n                <Popover.Header className='mb-4'>\n                    <Popover.Title>Login</Popover.Title>\n                    <Popover.Description>Enter your credentials to sign in.</Popover.Description>\n                </Popover.Header>\n                <Form onSubmit={() => {}}>\n                    <Popover.Body>\n                        <div className='space-y-4'>\n                            <TextField\n                                isRequired\n                                type='email'\n                                label='Email'\n                                placeholder='Enter your email'\n                            />\n                            <TextField\n                                isRequired\n                                label='Password'\n                                type='password'\n                                placeholder='Enter your password'\n                            />\n                            <div className='flex justify-between items-center'>\n                                <Checkbox name='remember-me'>Remember me</Checkbox>\n                                <Link variant='primary' href='#'>\n                                    Forgot password?\n                                </Link>\n                            </div>\n                        </div>\n                    </Popover.Body>\n                    <Popover.Footer>\n                        <Popover.Close>Cancel</Popover.Close>\n                        <Button type='submit'>Login</Button>\n                    </Popover.Footer>\n                </Form>\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-demo": {
    "component": "@/components/docs/overlays/popover/popover-demo",
    "raw": "'use client'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverDemo() {\n    return (\n        <Popover>\n            <Button variant='danger'>Forgot Password</Button>\n            <Popover.Content aria-label='Forgot Password' className='min-w-72'>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>\n                        We&apos;ll send you an email to log in.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/sheet/sheet-controlled-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Sheet, Textarea } from '@/components/ui'\n\nexport default function SheetControlledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button onPress={() => setIsOpen(true)}>Feedback</Button>\n            <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Sheet.Header>\n                    <Sheet.Title>Submit Feedback</Sheet.Title>\n                    <Sheet.Description>\n                        Please let us know your thoughts and how we can improve our service.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <Textarea label='Your Feedback' placeholder='Type your feedback here...' />\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)}>\n                        Close\n                    </Button>\n                    <Button onPress={() => setIsOpen(false)}>Submit Feedback</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-position-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-position-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { titleCase } from 'usemods'\n\nimport { Button, Sheet } from '@/components/ui'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetPositionDemo() {\n    const [sheetSide, setSheetSide] = React.useState<Side>('left')\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const sides: Side[] = ['left', 'right', 'top', 'bottom']\n\n    const pressHandler = (side: Side, open: boolean) => {\n        setSheetSide(side)\n        setIsOpen(open)\n    }\n\n    return (\n        <>\n            <div className='grid grid-cols-2 gap-2'>\n                {sides.map((side, idx) => (\n                    <Button variant='outline' onPress={() => pressHandler(side, true)} key={idx}>\n                        {titleCase(side)}\n                    </Button>\n                ))}\n            </div>\n            <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen} side={sheetSide}>\n                <Sheet.Header>\n                    <Sheet.Title>{titleCase(sheetSide)}</Sheet.Title>\n                    <Sheet.Description>The sheet will go from {sheetSide} side.</Sheet.Description>\n                </Sheet.Header>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-demo",
    "raw": "'use client'\n\nimport { Button, Sheet, Switch, TextField } from '@/components/ui'\n\nexport default function SheetDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Edit Settings</Button>\n            <Sheet.Content>\n                <Sheet.Header>\n                    <Sheet.Title>Update User Settings</Sheet.Title>\n                    <Sheet.Description>\n                        Adjust your preferences and configurations here.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body className='space-y-4'>\n                    <TextField label='Username' type='text' placeholder='Enter your username' />\n                    <TextField label='Email' type='email' placeholder='Enter your email address' />\n                    <Switch>Enable Notifications</Switch>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Sheet.Close>Cancel</Sheet.Close>\n                    <Button type='submit'>Save Changes</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-classnames-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-classnames-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetClassnamesDemo() {\n    return (\n        <Sheet>\n            <Button>Open</Button>\n            <Sheet.Content\n                classNames={{\n                    overlay: 'bg-white/50 dark:bg-black/50 backdrop-blur',\n                    content: 'min-w-80'\n                }}\n            >\n                <Sheet.Header\n                    title='Custom Classnames'\n                    description='This sheet has custom class names.'\n                />\n                <Sheet.Footer>\n                    <Sheet.Close>Close</Sheet.Close>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-sticky-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetStickyDemo() {\n    return (\n        <Sheet>\n            <Button>Read</Button>\n            <Sheet.Content>\n                <Sheet.Header>\n                    <Sheet.Title>Terms of Use</Sheet.Title>\n                    <Sheet.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our services, you\n                            agree to be bound by these terms. If you do not agree to these terms,\n                            please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for maintaining\n                            the confidentiality of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that occur under\n                            your account. You must notify us immediately of any breach of security\n                            or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and policies\n                            in connection with your use of our services. This includes adhering to\n                            intellectual property laws and refraining from any unlawful behavior\n                            while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of our services\n                            by any means other than through the interface provided by us. Any form\n                            of hacking, bypassing, or circumventing our security protocols is\n                            strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any content\n                            from our services unless explicitly authorized by us. This includes\n                            engaging in activities such as scraping, data mining, or using automated\n                            systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse, or harm\n                            other users. This includes sending unsolicited messages, stalking, or\n                            engaging in any form of cyberbullying. We reserve the right to terminate\n                            accounts found in violation of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other intellectual\n                            property displayed on our services are the property of their respective\n                            owners. You may not use, copy, or distribute any content without prior\n                            written permission from the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a worldwide,\n                            royalty-free, non-exclusive license to use, distribute, modify, and\n                            display that content for the purpose of providing our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to allow us to\n                            use it in accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our services at\n                        any time, without notice, for any reason, including but not limited to a\n                        breach of these terms. Upon termination, your right to use our services will\n                        immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms that, by\n                        their nature, should survive termination shall remain in effect. This\n                        includes, but is not limited to, ownership provisions, warranty disclaimers,\n                        and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all times or\n                        without interruption. We are not liable for any downtime or technical issues\n                        that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided &quot;as is&quot; and &quot;as available&quot;\n                        without any warranties of any kind, whether express or implied. We do not\n                        warrant that our services will meet your requirements or that they will be\n                        error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental, special,\n                        consequential, or punitive damages arising out of or related to your use of\n                        our services. This includes, but is not limited to, damages for loss of\n                        profits, data, or other intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time. If a\n                        revision is material, we will provide at least 30 days&apos; notice prior to\n                        any new terms taking effect. What constitutes a material change will be\n                        determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the laws of\n                        [Your Jurisdiction], without regard to its conflict of law provisions. Any\n                        disputes arising from or relating to these terms shall be resolved in the\n                        courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at [Your\n                        Contact Information].\n                    </div>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Sheet.Close>Close</Sheet.Close>\n                    <Button>Accept</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBook,\n    IconBookOpen,\n    IconBrandGithub,\n    IconBrandGithubCopilot,\n    IconBuilding,\n    IconChartBar,\n    IconFileCode,\n    IconFilter,\n    IconGlobe,\n    IconHeart,\n    IconLogOut,\n    IconMessage,\n    IconSettings,\n    IconStar,\n    IconUser,\n    IconUsers\n} from 'hq-icons'\nimport { Group, Menu as MenuPrimitive } from 'react-aria-components'\n\nimport {\n    Avatar,\n    Button,\n    Checkbox,\n    Description,\n    Menu,\n    Modal,\n    Select,\n    Sheet,\n    TextField\n} from '@/components/ui'\n\nexport default function SheetMenuDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    return (\n        <>\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Modal.Header>\n                    <Modal.Title>Edit status</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='space-y-4'>\n                        <TextField\n                            prefix={<IconBrandGithub />}\n                            label='Status'\n                            placeholder=\"What's your status?\"\n                        />\n                        <Group>\n                            <Checkbox>Busy</Checkbox>\n                            <Description>\n                                When others mention you, assign you, or request your review, GitHub\n                                will let them know that you have limited availability.\n                            </Description>\n                        </Group>\n                        <Select label='Clear Status'>\n                            <Select.Item>Never</Select.Item>\n                            <Select.Item>in 30 Minutes</Select.Item>\n                            <Select.Item>in 1 Hour</Select.Item>\n                            <Select.Item>in 8 Hours</Select.Item>\n                            <Select.Item>after Today</Select.Item>\n                            <Select.Item>after a Week</Select.Item>\n                            <Select.Item>after a Month</Select.Item>\n                        </Select>\n                        <Select label='Visible to'>\n                            <Select.Item>Everyone</Select.Item>\n                            <Select.Item>Organization</Select.Item>\n                            <Select.Item>Public</Select.Item>\n                        </Select>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Modal.Close>Clear Status</Modal.Close>\n                    <Button onPress={closeModal}>Set Status</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <Sheet>\n                <Sheet.Trigger aria-label='Open menu'>\n                    <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' />\n                </Sheet.Trigger>\n                <Sheet.Content closeButton={false}>\n                    <Sheet.Header className='flex border-b p-4 sticky top-0 bg-overlay flex-row items-center gap-x-3 mb-2'>\n                        <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' />\n                        <div>\n                            <Sheet.Title>dq-alhq</Sheet.Title>\n                            <Sheet.Description>DQ Al-Haqqi</Sheet.Description>\n                        </div>\n                    </Sheet.Header>\n                    <Sheet.Body className='px-0 sm:px-0'>\n                        <MenuPrimitive className='divide-y [&_.xss3]:p-2'>\n                            <Menu.Section>\n                                <Menu.Item onAction={openModal}>\n                                    <IconBrandGithub />\n                                    Edit Status\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconUser />\n                                    Your profile\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBook /> Your repositories\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBrandGithubCopilot /> Your Copilot\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconChartBar /> Your projects\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconStar /> Your stars\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconFileCode /> Your gists\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBuilding /> Your organizations\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconGlobe /> Your enterprises\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconHeart />\n                                    Your sponsors\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconFilter /> Feature preview\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconSettings />\n                                    Settings\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconBookOpen /> GitHub Docs\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconUsers /> GitHub Support\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconMessage /> GitHub Community\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconLogOut /> Sign out\n                                </Menu.Item>\n                            </Menu.Section>\n                        </MenuPrimitive>\n                    </Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-custom-close-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-custom-close-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, CheckboxGroup, Sheet } from '@/components/ui'\n\nexport default function SheetControlledDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Notifications</Button>\n            <Sheet.Content aria-label='Notifications'>\n                <Sheet.Header>\n                    <Sheet.Title>Manage Notifications</Sheet.Title>\n                    <Sheet.Description>Adjust your notification settings below.</Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <CheckboxGroup aria-label='Notification Settings'>\n                        <Checkbox\n                            value='n1'\n                            label='Email Notifications'\n                            description='Receive updates via email.'\n                        />\n                        <Checkbox\n                            value='n2'\n                            label='SMS Notifications'\n                            description='Receive updates via SMS messages.'\n                        />\n                        <Checkbox\n                            value='n3'\n                            label='Push Notifications'\n                            description='Receive real-time notifications on your device.'\n                        />\n                    </CheckboxGroup>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Sheet.Close>Cancel</Sheet.Close>\n                    <Button>Save Settings</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-custom-style-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-custom-style-demo",
    "raw": "'use client'\n\nimport { Button, Form, Note, Sheet, TextField } from '@/components/ui'\n\nexport default function SheetCustomStyleDemo() {\n    return (\n        <Sheet>\n            <Button variant='warning'>Archive Project</Button>\n            <Sheet.Content role='dialog'>\n                <Sheet.Header\n                    className='bg-background border-b mb-4'\n                    title='Archive Project'\n                    description='Archiving this project will disable access and hide it from active projects.'\n                >\n                    <Note variant='warning'>\n                        You can restore the project anytime from the archive!\n                    </Note>\n                </Sheet.Header>\n                <Form className='overflow-y-auto flex-1' onSubmit={() => {}}>\n                    <Sheet.Body className='space-y-4'>\n                        <TextField\n                            isRequired\n                            autoFocus\n                            label='Confirm by typing the project name'\n                            type='text'\n                            placeholder='team/project-name'\n                        />\n                        <TextField\n                            isRequired\n                            label='To verify, type \"archive my project\" below'\n                            type='text'\n                        />\n                    </Sheet.Body>\n                    <Sheet.Footer>\n                        <Sheet.Close>Cancel</Sheet.Close>\n                        <Button variant='warning' type='submit'>\n                            Archive Project\n                        </Button>\n                    </Sheet.Footer>\n                </Form>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-stack-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-stack-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetStackDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Stack</Button>\n            <Sheet.Content isStack={false}>\n                <Sheet.Header>\n                    <Sheet.Title>Not Stacked</Sheet.Title>\n                    <Sheet.Description>This sheet is not stacked.</Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Footer>\n                    <Sheet.Close>Cancel</Sheet.Close>\n                    <Button>Save Changes</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/modal/modal-size-demo": {
    "component": "@/components/docs/overlays/modal/modal-size-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button, Modal } from '@/components/ui'\n\ntype Size = Pick<React.ComponentProps<typeof Modal.Content>, 'size'>['size']\nconst sizes: Size[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl']\nexport default function ModalSizeDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [modalSize, setModalSize] = React.useState<Size>('md')\n\n    const handlePress = (size: Size, open: boolean) => {\n        setModalSize(size)\n        setIsOpen(open)\n    }\n    return (\n        <>\n            <div className='grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2'>\n                {sizes.map((size, idx) => (\n                    <Button variant='outline' key={idx} onPress={() => handlePress(size, true)}>\n                        Open {size}\n                    </Button>\n                ))}\n            </div>\n\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen} size={modalSize}>\n                <Modal.Header>\n                    <Modal.Title>Project Update</Modal.Title>\n                    <Modal.Description>\n                        Dive deep into our project’s latest updates where we&apos;ve streamlined\n                        workflow and improved user interfaces.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)}>\n                        Close\n                    </Button>\n                    <Button onPress={() => setIsOpen(false)}>Confirm</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-custom-style-demo": {
    "component": "@/components/docs/overlays/modal/modal-custom-style-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, Note, TextField } from '@/components/ui'\n\nexport default function ModalCustomStyleDemo() {\n    return (\n        <Modal>\n            <Button variant='danger'>Delete Project</Button>\n            <Modal.Content role='alertdialog'>\n                <Modal.Header\n                    className='bg-background border-b mb-4'\n                    title='Delete Project'\n                    description='This project’s gonna get wiped, including all its Deployments, Domains, Env Variables, Serverless Functions, and Settings.'\n                >\n                    <Note variant='danger'>No undo button here, so be sure!</Note>\n                </Modal.Header>\n                <Form onSubmit={() => {}}>\n                    <Modal.Body className='space-y-4'>\n                        <TextField\n                            isRequired\n                            autoFocus\n                            label='Enter the project name'\n                            type='text'\n                            placeholder='team/project-name'\n                        />\n                        <TextField\n                            isRequired\n                            label='To verify, type \"delete my project\" below'\n                            type='text'\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Modal.Close>Cancel</Modal.Close>\n                        <Button variant='danger' type='submit'>\n                            Delete Project\n                        </Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-sticky-demo": {
    "component": "@/components/docs/overlays/modal/modal-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalStickyDemo() {\n    return (\n        <Modal>\n            <Button>Read</Button>\n            <Modal.Content size='xl'>\n                <Modal.Header>\n                    <Modal.Title>Terms of Use</Modal.Title>\n                    <Modal.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our services, you\n                            agree to be bound by these terms. If you do not agree to these terms,\n                            please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for maintaining\n                            the confidentiality of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that occur under\n                            your account. You must notify us immediately of any breach of security\n                            or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and policies\n                            in connection with your use of our services. This includes adhering to\n                            intellectual property laws and refraining from any unlawful behavior\n                            while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of our services\n                            by any means other than through the interface provided by us. Any form\n                            of hacking, bypassing, or circumventing our security protocols is\n                            strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any content\n                            from our services unless explicitly authorized by us. This includes\n                            engaging in activities such as scraping, data mining, or using automated\n                            systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse, or harm\n                            other users. This includes sending unsolicited messages, stalking, or\n                            engaging in any form of cyberbullying. We reserve the right to terminate\n                            accounts found in violation of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other intellectual\n                            property displayed on our services are the property of their respective\n                            owners. You may not use, copy, or distribute any content without prior\n                            written permission from the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a worldwide,\n                            royalty-free, non-exclusive license to use, distribute, modify, and\n                            display that content for the purpose of providing our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to allow us to\n                            use it in accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our services at\n                        any time, without notice, for any reason, including but not limited to a\n                        breach of these terms. Upon termination, your right to use our services will\n                        immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms that, by\n                        their nature, should survive termination shall remain in effect. This\n                        includes, but is not limited to, ownership provisions, warranty disclaimers,\n                        and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all times or\n                        without interruption. We are not liable for any downtime or technical issues\n                        that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided &quot;as is&quot; and &quot;as available&quot;\n                        without any warranties of any kind, whether express or implied. We do not\n                        warrant that our services will meet your requirements or that they will be\n                        error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental, special,\n                        consequential, or punitive damages arising out of or related to your use of\n                        our services. This includes, but is not limited to, damages for loss of\n                        profits, data, or other intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time. If a\n                        revision is material, we will provide at least 30 days&apos; notice prior to\n                        any new terms taking effect. What constitutes a material change will be\n                        determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the laws of\n                        [Your Jurisdiction], without regard to its conflict of law provisions. Any\n                        disputes arising from or relating to these terms shall be resolved in the\n                        courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at [Your\n                        Contact Information].\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Modal.Close>Close</Modal.Close>\n                    <Button>Accept</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-nested-demo": {
    "component": "@/components/docs/overlays/modal/modal-nested-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { toast } from 'sonner'\n\nimport { Button, Form, Modal, Textarea } from '@/components/ui'\n\nexport default function ModalNestedDemo() {\n    const [isRegistrationModalOpen, setIsRegistrationModalOpen] = React.useState(false)\n    const [isProfileSetupModalOpen, setIsProfileSetupModalOpen] = React.useState(false)\n    const [isTyping, setIsTyping] = React.useState(false)\n\n    return (\n        <>\n            <Button onPress={() => setIsRegistrationModalOpen(true)}>Register</Button>\n\n            <Modal.Content\n                isOpen={isRegistrationModalOpen}\n                onOpenChange={() => setIsRegistrationModalOpen(false)}\n                aria-label='Confirm Registration'\n            >\n                <Modal.Header>\n                    <Modal.Title>Confirm Registration</Modal.Title>\n                    <Modal.Description>Please confirm your registration details.</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close>Cancel</Modal.Close>\n                    <Button\n                        onPress={() => {\n                            setIsProfileSetupModalOpen(true)\n                        }}\n                    >\n                        Confirm\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n\n            <Modal.Content\n                isOpen={isProfileSetupModalOpen}\n                onOpenChange={(isOpen) => {\n                    if (!isOpen && isTyping) {\n                        toast('Profile setup incomplete')\n                    }\n                    setIsProfileSetupModalOpen(isOpen)\n                }}\n                aria-label='Profile Setup'\n            >\n                <Modal.Header>\n                    <Modal.Title>Set Up Your Profile</Modal.Title>\n                    <Modal.Description>\n                        We need a bit more information before you can get started.\n                    </Modal.Description>\n                </Modal.Header>\n                <Form\n                    onSubmit={(e) => {\n                        e.preventDefault()\n                        toast.success('Profile setup complete')\n                        setIsProfileSetupModalOpen(false)\n                        setIsRegistrationModalOpen(false)\n                    }}\n                >\n                    <Modal.Body className='space-y-4'>\n                        <Textarea\n                            isRequired\n                            label='Bio'\n                            placeholder='Tell us something about yourself'\n                            onInput={() => setIsTyping(true)}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Modal.Close>Skip for now</Modal.Close>\n                        <Button type='submit'>Complete Setup</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal/modal-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalControlledDemo() {\n    const [open, setOpen] = useState(false)\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='primary'>\n                Subscribe\n            </Button>\n            <Modal.Content isOpen={open} onOpenChange={setOpen}>\n                <Modal.Header>\n                    <Modal.Title>Subscribe to Our Newsletter</Modal.Title>\n                    <Modal.Description>\n                        Get the latest news and updates right to your inbox.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button onPress={() => setOpen(false)}>Sign Up</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-demo": {
    "component": "@/components/docs/overlays/modal/modal-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, TextField } from '@/components/ui'\n\nexport default function ModalDemo() {\n    return (\n        <Modal>\n            <Button>Turn on 2FA</Button>\n            <Modal.Content>\n                <Modal.Header>\n                    <Modal.Title>Nice! Let&apos;s beef up your account.</Modal.Title>\n                    <Modal.Description>\n                        2FA beefs up your account&apos;s defense. Pop in your password to keep\n                        going.\n                    </Modal.Description>\n                </Modal.Header>\n                <Form onSubmit={() => {}}>\n                    <TextField\n                        isRequired\n                        autoFocus\n                        label='Password'\n                        type='password'\n                        placeholder='Enter your password'\n                    />\n                    <Modal.Footer>\n                        <Modal.Close>Cancel</Modal.Close>\n                        <Button type='submit'>Turn on 2FA</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconEllipsisVertical } from 'hq-icons'\n\nimport { Button, buttonVariants, Loader, Menu, Modal } from '@/components/ui'\nimport { wait } from '@/lib/utils'\n\nexport default function ModalTriggeredByMenuDemo() {\n    const [state, setState] = React.useState<string | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const closeModal = () => setState(null)\n    const executeAction = (action: string) => {\n        console.log(`${action} is executing`)\n        setLoading(true)\n        wait(2000).then(() => {\n            setLoading(false)\n            closeModal()\n        })\n    }\n\n    const actionType = (t: string | null) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this item?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Menu.Trigger className={buttonVariants({ variant: 'outline' })}>\n                    <IconEllipsisVertical />\n                </Menu.Trigger>\n                <Menu.Content placement='bottom'>\n                    <Menu.Item onAction={() => setState('delete')}>Delete</Menu.Item>\n                    <Menu.Item isDanger onAction={() => setState('ban')}>\n                        Ban\n                    </Menu.Item>\n                    <Menu.Item onAction={() => setState('restore')}>Restore</Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Modal.Content isOpen={state !== null} onOpenChange={closeModal}>\n                <Modal.Header>\n                    <Modal.Title>{actionType(state)?.title}</Modal.Title>\n                    <Modal.Description>{actionType(state)?.description}</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close>Cancel</Modal.Close>\n                    <Button\n                        variant={state === 'ban' ? 'danger' : 'primary'}\n                        className='min-w-24'\n                        isDisabled={loading}\n                        onPress={actionType(state)?.action}\n                    >\n                        {loading ? <Loader variant='spin' /> : actionType(state)?.confirmText}\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-blur-demo": {
    "component": "@/components/docs/overlays/modal/modal-blur-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, TextField } from '@/components/ui'\n\nexport default function ModalBlurDemo() {\n    return (\n        <Modal>\n            <Button>Turn on 2FA</Button>\n            <Modal.Content isBlurred>\n                <Modal.Header>\n                    <Modal.Title>Nice! Let&apos;s beef up your account.</Modal.Title>\n                    <Modal.Description>\n                        2FA beefs up your account&apos;s defense. Pop in your password to keep\n                        going.\n                    </Modal.Description>\n                </Modal.Header>\n                <Form onSubmit={() => {}}>\n                    <TextField\n                        isRequired\n                        autoFocus\n                        label='Password'\n                        type='password'\n                        placeholder='Enter your password'\n                    />\n                    <Modal.Footer>\n                        <Modal.Close>Cancel</Modal.Close>\n                        <Button type='submit'>Turn on 2FA</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/alert-dialog-demo": {
    "component": "@/components/docs/overlays/modal/alert-dialog-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Modal } from '@/components/ui'\n\nexport default function AlertDialogDemo() {\n    return (\n        <Modal>\n            <Modal.Trigger className={buttonVariants({ variant: 'danger' })}>Delete</Modal.Trigger>\n            <Modal.Content role='alertdialog'>\n                <Modal.Header>\n                    <Modal.Title>Delete file</Modal.Title>\n                    <Modal.Description>\n                        This will permanently delete the selected file. Continue?\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close variant='outline'>Cancel</Modal.Close>\n                    <Modal.Close variant='danger'>Continue</Modal.Close>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-custom-classnames-demo": {
    "component": "@/components/docs/overlays/modal/modal-custom-classnames-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalCustomClassnamesDemo() {\n    return (\n        <Modal>\n            <Button>Open</Button>\n            <Modal.Content\n                classNames={{\n                    overlay: 'bg-white/40 dark:bg-black/40 backdrop-blur',\n                    content: 'bg-background'\n                }}\n            >\n                <Modal.Header\n                    title='Custom Classnames'\n                    description='This modal has custom class names.'\n                />\n                <Modal.Footer>\n                    <Modal.Close>Close</Modal.Close>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "block/components/user-profile/posts": {
    "component": "@/components/docs/block/components/user-profile/posts",
    "raw": "import Image from 'next/image'\n\nimport { Card, Grid } from '@/components/ui'\n\nexport default function Posts() {\n    return (\n        <Grid columns={{ initial: 1, sm: 2, '2xl': 3 }} gap={2} items={posts}>\n            {(item) => (\n                <Grid.Item key={item.id}>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>{item.title}</Card.Title>\n                            <Card.Description>{item.date}</Card.Description>\n                        </Card.Header>\n                        <Card.Content className='space-y-2 text-justify'>\n                            <Image alt={item.title} src={item.image} width={400} height={300} />\n                            <p>{item.content}</p>\n                        </Card.Content>\n                    </Card>\n                </Grid.Item>\n            )}\n        </Grid>\n    )\n}\n\nconst posts = [\n    {\n        id: 1,\n        title: 'First Post',\n        date: '2021-01-01 - 12:00',\n        image: 'https://picsum.photos/400/300?random=1',\n        content:\n            'Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolorum tempore nulla libero laborum officia aliquam voluptas quod porro quis accusamus.'\n    },\n    {\n        id: 2,\n        title: 'Second Post',\n        date: '2021-01-02 - 08:00',\n        image: 'https://picsum.photos/400/300?random=2',\n        content:\n            'Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas totam ad nostrum earum provident natus tempora! Accusamus iure sunt quam!'\n    },\n    {\n        id: 3,\n        title: 'Third Post',\n        date: '2021-01-03 - 14:00',\n        image: 'https://picsum.photos/400/300?random=3',\n        content:\n            'Lorem ipsum dolor sit amet. Veritatis dicta aliquid, voluptatibus sapiente repellendus fugit saepe voluptate eum praesentium facilis?'\n    }\n]\n"
  },
  "block/components/user-profile/media": {
    "component": "@/components/docs/block/components/user-profile/media",
    "raw": "import Image from 'next/image'\n\nimport { Card, Grid } from '@/components/ui'\n\nexport default function Media() {\n    const items = Array.from({ length: 17 }, (_, id) => ({\n        id: id + 1,\n        title: 'Image ' + id\n    }))\n    return (\n        <Grid columns={{ initial: 2, '2xl': 4 }} gap={2} items={items}>\n            {(item) => (\n                <Grid.Item key={item.id} colSpan={item.id % 5 === 0 ? 2 : 1}>\n                    <Card>\n                        <Image\n                            width={item.id % 5 === 0 ? 800 : 400}\n                            height={300}\n                            src={`https://picsum.photos/${item.id % 5 === 0 ? 800 : 400}/300?random=${item.id}`}\n                            alt={item.title}\n                        />\n                    </Card>\n                </Grid.Item>\n            )}\n        </Grid>\n    )\n}\n"
  },
  "block/components/user-profile/about": {
    "component": "@/components/docs/block/components/user-profile/about",
    "raw": "import { Card, DescriptionList } from '@/components/ui'\n\nexport default function About() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>About Me</Card.Title>\n                <Card.Description>My profile information</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <DescriptionList>\n                    <DescriptionList.Term>Full Name</DescriptionList.Term>\n                    <DescriptionList.Details>Diqi Al-Haqqi</DescriptionList.Details>\n                    <DescriptionList.Term>Address</DescriptionList.Term>\n                    <DescriptionList.Details>East Java, Indonesia</DescriptionList.Details>\n                    <DescriptionList.Term>Age</DescriptionList.Term>\n                    <DescriptionList.Details>25 years</DescriptionList.Details>\n                    <DescriptionList.Term>Company</DescriptionList.Term>\n                    <DescriptionList.Details>Qomaruddin University Gresik</DescriptionList.Details>\n                </DescriptionList>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "block/components/chatting-app/message-form": {
    "component": "@/components/docs/block/components/chatting-app/message-form",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCamera, IconMic, IconPaperclip, IconSend } from 'hq-icons'\n\nimport { Button, Form } from '@/components/ui'\n\ninterface MessageFormProps {\n    value: string\n    onChange: (value: string) => void\n    onSend: (e: React.FormEvent<HTMLFormElement>) => void\n}\nexport default function MessageForm({ value, onChange, onSend }: MessageFormProps) {\n    const editorRef = React.useRef<HTMLDivElement>(null)\n    React.useEffect(() => {\n        const editor = editorRef.current\n\n        const handleInput = () => {\n            if (editor) {\n                const text = editor.innerText\n                onChange(text)\n                editor.innerHTML = formatText(text)\n                placeCaretAtEnd(editor)\n            }\n        }\n\n        const placeCaretAtEnd = (el: HTMLElement) => {\n            el.focus()\n            const range = document.createRange()\n            range.selectNodeContents(el)\n            range.collapse(false)\n            const sel = window.getSelection()\n            sel?.removeAllRanges()\n            sel?.addRange(range)\n        }\n\n        editor?.addEventListener('input', handleInput)\n\n        return () => {\n            editor?.removeEventListener('input', handleInput)\n        }\n    }, [onChange])\n\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        onSend(e)\n        if (editorRef.current) {\n            editorRef.current.innerHTML = ''\n        }\n    }\n    return (\n        <Form\n            onSubmit={onSubmit}\n            className='relative overflow-hidden rounded-lg border-t md:border bg-background'\n        >\n            <div\n                contentEditable\n                ref={editorRef}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter' && !e.shiftKey && value.trim() !== '') {\n                        onSubmit(e as unknown as React.FormEvent<HTMLFormElement>)\n                    }\n                }}\n                aria-label='Message'\n                id='message'\n                className='min-h-32 w-full no-scrollbar resize-none border-0 outline-none p-3'\n            />\n            <div className='flex items-center p-2'>\n                <Button variant='ghost' size='icon' type='button'>\n                    <IconCamera className='size-4' />\n                    <span className='sr-only'>Upload Image</span>\n                </Button>\n                <Button variant='ghost' size='icon' type='button'>\n                    <IconMic className='size-4' />\n                    <span className='sr-only'>Use Microphone</span>\n                </Button>\n                <Button variant='ghost' size='icon' type='button'>\n                    <IconPaperclip className='size-4' />\n                    <span className='sr-only'>Attach File</span>\n                </Button>\n                <Button\n                    isDisabled={value.trim() === ''}\n                    type='submit'\n                    size='sm'\n                    className='ml-auto gap-1.5'\n                >\n                    Send Message\n                    <IconSend />\n                </Button>\n            </div>\n        </Form>\n    )\n}\n\nconst formatText = (text: string) => {\n    return text\n        .replace(/_(.*?)_/g, '<em>_$1_</em>')\n        .replace(/_/g, '<span class=\"text-muted-foreground\">_</span>')\n        .replace(/\\*(.*?)\\*/g, '<strong>*$1*</strong>')\n        .replace(/\\*/g, '<span class=\"text-muted-foreground\">*</span>')\n        .replace(/~(.*?)~/g, '<del>~$1~</del>')\n        .replace(/~/g, '<span class=\"text-muted-foreground\">~</span>')\n        .replace(/\\^(.*?)\\^/g, '<sup>^$1^</sup>')\n        .replace(/\\^/g, '<span class=\"text-muted-foreground\">^</span>')\n        .replace(\n            /(https?:\\/\\/[^\\s]+)/g,\n            '<a href=\"$1\" class=\"text-primary underline\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\n        )\n        .replace(/\\n/g, '<br />')\n}\n"
  },
  "block/components/chatting-app/contact-list": {
    "component": "@/components/docs/block/components/chatting-app/contact-list",
    "raw": "import React from 'react'\n\nimport { Avatar, cn } from '@/components/ui'\n\ninterface ContactProps {\n    id: number\n    name: string\n    avatar: string\n    status: 'online' | 'offline'\n    lastSeen: string\n    active: boolean\n}\nexport default function ContactList() {\n    return (\n        <div className='grid w-full gap-2'>\n            {contacts.map((contact) => (\n                <Contact key={contact.id} {...contact} />\n            ))}\n        </div>\n    )\n}\nconst Contact = ({ name, avatar, status, lastSeen, active }: ContactProps) => {\n    return (\n        <div\n            className={cn(\n                'p-2 md:px-4 rounded-lg flex flex-row gap-3 items-center cursor-pointer border',\n                active ? 'bg-primary/20' : ''\n            )}\n        >\n            {status === 'online' ? (\n                <Avatar src={avatar} status='success' />\n            ) : (\n                <Avatar src={avatar} />\n            )}\n            <div className='grid'>\n                <span className='text-sm'>{name}</span>\n                {status === 'online' ? (\n                    <small className='text-success text-xs'>Online</small>\n                ) : (\n                    <small className='text-muted-foreground text-xs'>Last seen {lastSeen}</small>\n                )}\n            </div>\n        </div>\n    )\n}\n\nconst contacts: ContactProps[] = [\n    {\n        id: 1,\n        avatar: 'https://i.pravatar.cc/77',\n        name: 'Hebert',\n        status: 'online',\n        lastSeen: '20:32',\n        active: true\n    },\n    {\n        id: 2,\n        avatar: 'https://i.pravatar.cc/78',\n        name: 'Schroeder',\n        status: 'offline',\n        lastSeen: '02:10',\n        active: false\n    },\n    {\n        id: 3,\n        avatar: 'https://i.pravatar.cc/79',\n        name: 'Donna',\n        status: 'online',\n        lastSeen: '06:14',\n        active: false\n    },\n    {\n        id: 4,\n        avatar: 'https://i.pravatar.cc/80',\n        name: 'Olivia',\n        status: 'offline',\n        lastSeen: '06:47',\n        active: false\n    },\n    {\n        id: 5,\n        avatar: 'https://i.pravatar.cc/81',\n        name: 'Aisha',\n        status: 'offline',\n        lastSeen: '02:32',\n        active: false\n    },\n    {\n        id: 6,\n        avatar: 'https://i.pravatar.cc/82',\n        name: 'Bruce',\n        status: 'online',\n        lastSeen: '01:34',\n        active: false\n    },\n    {\n        id: 7,\n        avatar: 'https://i.pravatar.cc/83',\n        name: 'Harmon',\n        status: 'offline',\n        lastSeen: '00:15',\n        active: false\n    }\n]\n"
  },
  "block/components/chatting-app/bubble-chat": {
    "component": "@/components/docs/block/components/chatting-app/bubble-chat",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconCheck,\n    IconCheckDouble,\n    IconChevronRight,\n    IconClock,\n    IconForward,\n    IconInfo,\n    IconReply,\n    IconTrash\n} from 'hq-icons'\n\nimport { Button, cn, Menu } from '@/components/ui'\n\nexport interface BubbleChatProps {\n    message: string\n    time: string\n    role: 'send' | 'recieve'\n    status?: 'pending' | 'sent' | 'delivered' | 'read'\n    onDelete?: () => void\n}\n\nexport default function BubbleChat({ message, time, role, status, onDelete }: BubbleChatProps) {\n    const statusIcon: Record<string, React.ReactNode> = {\n        pending: <IconClock className='size-5 text-foreground' />,\n        sent: <IconCheck className='size-5 text-foreground' />,\n        delivered: <IconCheckDouble className='size-5 text-foreground' />,\n        read: <IconCheckDouble className='size-5 text-success' />\n    }\n    return (\n        <div\n            className={cn(\n                'flex items-start group',\n                role === 'send' ? 'flex-row-reverse' : 'flex-row'\n            )}\n        >\n            <div>\n                <div\n                    className={cn(\n                        'rounded-lg text-right [&_strong]:font-medium px-2 py-1.5 text-sm border',\n                        role === 'send' ? 'rounded-br-none' : 'rounded-bl-none'\n                    )}\n                >\n                    <div\n                        className='text-left text-foreground text-sm'\n                        dangerouslySetInnerHTML={{ __html: convertToHtml(message) }}\n                    />\n                </div>\n                <small\n                    className={cn(\n                        'flex gap-1 mt-0.5 text-muted-foreground items-center',\n                        role === 'send' ? 'justify-end' : 'justify-start'\n                    )}\n                >\n                    {time}\n                    {role === 'send' && status && statusIcon[status]}\n                </small>\n            </div>\n            <Menu>\n                <Button\n                    variant='outline'\n                    size='icon'\n                    className='mx-2 size-7 opacity-0 pressed:opacity-100 group-hover:opacity-100 transition p-1'\n                >\n                    <IconChevronRight\n                        className={cn('size-3', role === 'send' ? 'rotate-180' : '')}\n                    />\n                </Button>\n                <Menu.Content placement={role === 'send' ? 'left' : 'right'} aria-label='Actions'>\n                    <Menu.Item>\n                        <IconReply />\n                        Reply\n                    </Menu.Item>\n                    <Menu.Item>\n                        <IconForward />\n                        Forward\n                    </Menu.Item>\n                    <Menu.Item>\n                        <IconInfo />\n                        Message Info\n                    </Menu.Item>\n                    <Menu.Item onAction={onDelete} isDanger>\n                        <IconTrash /> Delete\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </div>\n    )\n}\n\nconst convertToHtml = (text: string) => {\n    let html = text\n    html = html.replace(\n        /(https?:\\/\\/[^\\s]+)/g,\n        '<a href=\"$1\" target=\"_blank\" class=\"text-primary underline\" rel=\"noopener noreferrer\">$1</a>'\n    )\n    html = html.replace(/`([^`]+)`/g, '<code class=\"font-mono\">$1</code>')\n    html = html.replace(/\\*(.*?)\\*/g, '<strong class=\"text-bold\">$1</strong>')\n    html = html.replace(/_(.*?)_/g, '<em>$1</em>')\n    html = html.replace(/~(.*?)~/g, '<del>$1</del>')\n    html = html.replace(/^(.*?)^/g, '<sup>$1</sup>')\n    html = html.replace(/\\n/g, '<br />')\n    return html\n}\n"
  },
  "block/components/user-setting/account-setting": {
    "component": "@/components/docs/block/components/user-setting/account-setting",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBrandFacebook, IconBrandGithub, IconBrandInstagram, IconBrandX } from 'hq-icons'\nimport { isFileDropItem } from 'react-aria-components'\n\nimport {\n    Avatar,\n    Button,\n    Card,\n    cn,\n    DropZone,\n    FileTrigger,\n    Form,\n    Textarea,\n    TextField\n} from '@/components/ui'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function AccountSetting() {\n    const [droppedImage, setDroppedImage] = React.useState<string>('')\n    async function onDropHandler(e: DropEvent) {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n    async function onSelectHandler(e: FileList | null) {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n    return (\n        <section className='space-y-4'>\n            <Card>\n                <Card.Header>\n                    <Card.Title>Account</Card.Title>\n                    <Card.Description>Your account details.</Card.Description>\n                </Card.Header>\n                <Form>\n                    <Card.Content className='space-y-4'>\n                        <div className='flex items-center gap-2'>\n                            <DropZone\n                                getDropOperation={() => 'copy'}\n                                onDrop={onDropHandler}\n                                className={cn(\n                                    '[&_[data-slot=avatar]]:bg-transparent [&_[data-slot=avatar]]:outline-none rounded-full p-0 overflow-hidden size-10'\n                                )}\n                            >\n                                {droppedImage ? (\n                                    <Avatar src={droppedImage} size='lg' />\n                                ) : (\n                                    <Avatar initials='DQ' size='lg' />\n                                )}\n                                <input type='hidden' name='image' value={droppedImage} />\n                            </DropZone>\n                            <FileTrigger\n                                size='sm'\n                                acceptedFileTypes={['image/png', 'image/jpeg']}\n                                onSelect={onSelectHandler}\n                            >\n                                Upload avatar\n                            </FileTrigger>\n                        </div>\n                        <TextField\n                            autoFocus\n                            label='Name'\n                            placeholder='Enter your name'\n                            id='name'\n                            name='name'\n                            isRequired\n                        />\n                        <TextField\n                            type='email'\n                            isRequired\n                            label='Email'\n                            placeholder='Enter your email'\n                            id='email'\n                            name='email'\n                        />\n                        <Textarea label='Bio' placeholder='Enter your bio' id='bio' name='bio' />\n                    </Card.Content>\n                    <Card.Footer>\n                        <Button>Save</Button>\n                    </Card.Footer>\n                </Form>\n            </Card>\n            <Card>\n                <Card.Header>\n                    <Card.Title>Social Accounts</Card.Title>\n                    <Card.Description>Your social accounts.</Card.Description>\n                </Card.Header>\n                <Form>\n                    <Card.Content className='grid lg:grid-cols-2 gap-4'>\n                        <TextField\n                            label='Github Username'\n                            prefix={<IconBrandGithub />}\n                            id='github'\n                            name='github'\n                        />\n                        <TextField\n                            label='X Username'\n                            prefix={<IconBrandX />}\n                            id='twitter'\n                            name='twitter'\n                        />\n                        <TextField\n                            label='Facebook'\n                            prefix={<IconBrandFacebook />}\n                            id='facebook'\n                            name='facebook'\n                        />\n                        <TextField\n                            label='Instagram'\n                            prefix={<IconBrandInstagram />}\n                            id='ig'\n                            name='ig'\n                        />\n                    </Card.Content>\n                    <Card.Footer>\n                        <Button>Save</Button>\n                    </Card.Footer>\n                </Form>\n            </Card>\n        </section>\n    )\n}\n"
  },
  "block/components/user-setting/plan-billing-setting": {
    "component": "@/components/docs/block/components/user-setting/plan-billing-setting",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleUser, IconCreditCard, IconHash, IconLock, IconMap } from 'hq-icons'\n\nimport {\n    Button,\n    Card,\n    Choicebox,\n    DatePicker,\n    Form,\n    Heading,\n    Note,\n    TextField\n} from '@/components/ui'\n\nexport default function PlanBillingSetting() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Manage Your Plan</Card.Title>\n                <Card.Description>Upgrade or downgrade your current plan.</Card.Description>\n            </Card.Header>\n            <Form>\n                <Card.Content className='grid gap-4'>\n                    <Note variant='warning'>\n                        Changing the plan will take effect immediately. You will be charged for the\n                        rest of the current month.\n                    </Note>\n                    <Choicebox aria-label='Select items' selectionMode='single'>\n                        <Choicebox.Item\n                            title='Basic'\n                            description='Just the essentials to get started.'\n                        />\n                        <Choicebox.Item\n                            title='Standard'\n                            description='A step up with more features and support.'\n                        />\n                        <Choicebox.Item\n                            title='Deluxe'\n                            description='Top-tier features for maximum performance.'\n                        />\n                        <Choicebox.Item\n                            title='Ultimate'\n                            description='All-inclusive plan with every feature available.'\n                        />\n                    </Choicebox>\n                    <Heading level={4}>Payment Details</Heading>\n                    <TextField\n                        autoFocus\n                        prefix={<IconCircleUser />}\n                        label='Card Holder'\n                        name='card_holder'\n                        id='card_holder'\n                    />\n                    <div className='grid md:grid-cols-4 gap-4'>\n                        <TextField\n                            className='md:col-span-2'\n                            prefix={<IconCreditCard />}\n                            label='Card Number'\n                            name='card_number'\n                            id='card_number'\n                        />\n                        <DatePicker\n                            label='Expiration Date'\n                            name='expiration_date'\n                            id='expiration_date'\n                        />\n                        <TextField prefix={<IconLock />} label='CVC / CVC2' name='cvc' id='cvc' />\n                    </div>\n                    <div className='grid lg:grid-cols-2 gap-4'>\n                        <TextField\n                            prefix={<IconMap />}\n                            label='Country'\n                            name='country'\n                            id='country'\n                        />\n                        <TextField\n                            prefix={<IconHash />}\n                            label='Zip / Postal Code'\n                            name='zip'\n                            id='zip'\n                        />\n                    </div>\n                </Card.Content>\n                <Card.Footer>\n                    <Button>Save</Button>\n                </Card.Footer>\n            </Form>\n        </Card>\n    )\n}\n"
  },
  "block/components/user-setting/security-setting": {
    "component": "@/components/docs/block/components/user-setting/security-setting",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconKey } from 'hq-icons'\n\nimport { Button, Card, Form, Switch, TextField } from '@/components/ui'\n\nexport default function SecuritySetting() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Security</Card.Title>\n                <Card.Description>Secure your account.</Card.Description>\n            </Card.Header>\n            <Form>\n                <Card.Content className='grid gap-4'>\n                    <TextField\n                        prefix={<IconKey />}\n                        isRevealable\n                        autoFocus\n                        type='password'\n                        label='Current Password'\n                        id='current_password'\n                        name='current_password'\n                        isRequired\n                    />\n                    <TextField\n                        prefix={<IconKey />}\n                        isRevealable\n                        type='password'\n                        label='New Password'\n                        id='new_password'\n                        name='new_password'\n                        isRequired\n                    />\n                    <TextField\n                        prefix={<IconKey />}\n                        isRevealable\n                        type='password'\n                        label='Confirm New Password'\n                        id='new_password_confirm'\n                        name='new_password_confirm'\n                        isRequired\n                    />\n                    <div className='text-muted-foreground'>Account Preferences</div>\n                    <Switch>Enable 2FA</Switch>\n                    <Switch>Auto Logout</Switch>\n                </Card.Content>\n                <Card.Footer>\n                    <Button>Save</Button>\n                </Card.Footer>\n            </Form>\n        </Card>\n    )\n}\n"
  },
  "block/components/user-setting/danger-area": {
    "component": "@/components/docs/block/components/user-setting/danger-area",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconUserX } from 'hq-icons'\n\nimport { Button, Card, Form, Modal, Note, TextField } from '@/components/ui'\n\nexport default function SecuritySetting() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Danger Area</Card.Title>\n                <Card.Description>Delete your account.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Modal>\n                    <Button variant='danger'>\n                        <IconUserX />\n                        Delete Account\n                    </Button>\n                    <Modal.Content role='alertdialog'>\n                        <Modal.Header\n                            title='Delete Account'\n                            description='This will permanently delete your account and all your data'\n                        >\n                            <Note variant='danger'>No undo button here, so be sure!</Note>\n                        </Modal.Header>\n                        <Form onSubmit={() => {}}>\n                            <Modal.Body>\n                                <TextField\n                                    isRequired\n                                    autoFocus\n                                    label='Password'\n                                    type='password'\n                                    isRevealable\n                                />\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Modal.Close>Cancel</Modal.Close>\n                                <Button variant='danger'>Confirm</Button>\n                            </Modal.Footer>\n                        </Form>\n                    </Modal.Content>\n                </Modal>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "block/components/file-manager/folder": {
    "component": "@/components/docs/block/components/file-manager/folder",
    "raw": "'use client'\n\nimport { GridListItemProps } from 'react-aria-components'\n\nimport { GridList } from '@/components/ui'\n\nexport default function Folder(props: GridListItemProps) {\n    return <GridList.Item {...props} />\n}\n"
  },
  "block/components/file-manager/file-list": {
    "component": "@/components/docs/block/components/file-manager/file-list",
    "raw": "import * as React from 'react'\n\nimport {\n    IconArchive,\n    IconDisc,\n    IconFileImage,\n    IconFileMusic,\n    IconFileText,\n    IconFileVideo,\n    IconFolder\n} from 'hq-icons'\nimport { Collection } from 'react-aria-components'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport type FileNode = {\n    file: string\n    children?: FileNode[]\n}\n\nconst filesInDownloads: FileNode[] = [\n    {\n        file: 'Compressed',\n        children: [\n            { file: 'laravel.zip' },\n            { file: 'react.zip' },\n            { file: 'nextjs.rar' },\n            { file: 'ubuntu.iso' }\n        ]\n    },\n    {\n        file: 'Docs',\n        children: [{ file: 'resume.pdf' }, { file: 'cv.pdf' }]\n    },\n    {\n        file: 'Programs',\n        children: [{ file: 'chrome.exe' }, { file: 'vscode.deb' }]\n    }\n]\n\nconst filesInDocuments: FileNode[] = [\n    {\n        file: 'Thesis',\n        children: [\n            { file: 'Bab 1.docx' },\n            { file: 'Bab 2.docx' },\n            { file: 'Bab 3.docx' },\n            { file: 'Cover.docx' }\n        ]\n    },\n    { file: 'Secret.txt' },\n    { file: 'Project.jpg' }\n]\n\nconst filesInMusic: FileNode[] = [\n    { file: 'The Beatles.mp3' },\n    { file: 'Led Zeppelin.mp3' },\n    { file: 'Pink Floyd.mp3' },\n    { file: 'Queen.wav' },\n    { file: 'The Rolling Stones.mp3' },\n    { file: 'The Who.wav' }\n]\n\nconst filesInVideos: FileNode[] = [\n    {\n        file: 'Mission Impossible',\n        children: [\n            { file: 'Mission Impossible 1.mp4' },\n            { file: 'Mission Impossible 2.mp4' },\n            { file: 'Mission Impossible 3.mp4' }\n        ]\n    },\n    { file: 'Star Wars.mp4' },\n    { file: 'Avengers - Endgame.mkv' }\n]\n\nexport const rootFolders: FileNode[] = [\n    {\n        file: 'Downloads',\n        children: filesInDownloads\n    },\n    {\n        file: 'Documents',\n        children: filesInDocuments\n    },\n    {\n        file: 'Music',\n        children: filesInMusic\n    },\n    {\n        file: 'Videos',\n        children: filesInVideos\n    }\n]\n\nexport function mapFilePaths(nodes: FileNode[], parentPath: string = ''): string[] {\n    let paths: string[] = []\n    for (const node of nodes) {\n        const currentPath = parentPath ? `${parentPath}/${node.file}` : node.file\n        if (node.children) {\n            paths = paths.concat(mapFilePaths(node.children, currentPath))\n        } else {\n            paths.push(currentPath)\n        }\n    }\n    return paths\n}\n\nexport const getFileIcon = (ext: string) => {\n    let Icon = IconFolder\n    switch (ext) {\n        case 'jpg':\n        case 'png':\n            Icon = IconFileImage\n            break\n        case 'txt':\n        case 'docx':\n        case 'pdf':\n            Icon = IconFileText\n            break\n        case 'mp3':\n        case 'wav':\n            Icon = IconFileMusic\n            break\n        case 'mp4':\n        case 'mkv':\n            Icon = IconFileVideo\n            break\n        case 'zip':\n        case 'rar':\n            Icon = IconArchive\n            break\n        case 'iso':\n            Icon = IconDisc\n            break\n        default:\n        case 'folder':\n            Icon = IconFolder\n            break\n    }\n    return <Icon />\n}\n\nexport function FileList() {\n    const renderItem = (item: FileNode): React.ReactNode => {\n        return (\n            <TreeItem key={item.file} textValue={item.file}>\n                <TreeItem.Content>\n                    {item.children && <TreeItem.Indicator />}\n                    <TreeItem.Checkbox />\n                    <TreeItem.Label>{item.file}</TreeItem.Label>\n                </TreeItem.Content>\n                {item.children && <Collection items={item.children}>{renderItem}</Collection>}\n            </TreeItem>\n        )\n    }\n    return (\n        <Tree aria-label='Files' selectionMode='multiple' items={rootFolders}>\n            {rootFolders.map(renderItem)}\n        </Tree>\n    )\n}\n"
  },
  "block/sidebar/sidebar-inset-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-inset-demo",
    "raw": "'use client'\n\nimport AppSidebar from 'layouts/app-sidebar'\nimport {\n    IconChevronDown,\n    IconCircleUser,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShield\n} from 'hq-icons'\n\nimport { Avatar, Breadcrumbs, Button, Menu, Separator, Sidebar } from '@/components/ui'\n\nexport default function SidebarInsetDemo() {\n    return (\n        <>\n            <Sidebar.Provider>\n                <AppSidebar variant='inset' />\n                <Sidebar.Inset>\n                    <header className='sticky justify-between sm:justify-start top-0 h-[3.57rem] px-4 flex items-center gap-x-2'>\n                        <span className='flex items-center gap-x-4'>\n                            <Sidebar.Trigger className='-mx-2' />\n                            <Separator className='h-6 md:block hidden' orientation='vertical' />\n\n                            <Breadcrumbs className='md:flex hidden'>\n                                <Breadcrumbs.Item href='/blocks/sidebar/sidebar-01'>\n                                    Dashboard\n                                </Breadcrumbs.Item>\n\n                                <Breadcrumbs.Item>Settings</Breadcrumbs.Item>\n                            </Breadcrumbs>\n                        </span>\n                        <div className='flex sm:hidden items-center gap-x-2'>\n                            <Button variant='ghost' aria-label='Search...' size='icon'>\n                                <IconSearch />\n                            </Button>\n                            <Menu>\n                                <Menu.Trigger\n                                    aria-label='Profile'\n                                    className='flex items-center gap-x-2 group'\n                                >\n                                    <Avatar\n                                        size='sm'\n                                        shape='circle'\n                                        src='https://github.com/dq-alhq.png'\n                                    />\n                                    <IconChevronDown className='size-4 group-pressed:rotate-180 transition-transform' />\n                                </Menu.Trigger>\n                                <Menu.Content className='min-w-[--trigger-width]'>\n                                    <Menu.Item href='#'>\n                                        <IconCircleUser />\n                                        Profile\n                                    </Menu.Item>\n                                    <Menu.Item href='#'>\n                                        <IconSettings />\n                                        Settings\n                                    </Menu.Item>\n                                    <Menu.Item href='#'>\n                                        <IconShield />\n                                        Security\n                                    </Menu.Item>\n                                    <Menu.Item href='#'>\n                                        <IconLogOut />\n                                        Log out\n                                    </Menu.Item>\n                                </Menu.Content>\n                            </Menu>\n                        </div>\n                    </header>\n                    <div className='p-4 lg:p-6'>YOUR CONTENT</div>\n                </Sidebar.Inset>\n            </Sidebar.Provider>\n        </>\n    )\n}\n"
  },
  "block/sidebar/sidebar-floating-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-floating-demo",
    "raw": "'use client'\n\nimport AppSidebar from 'layouts/app-sidebar'\nimport {\n    IconChevronDown,\n    IconCircleUser,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShield\n} from 'hq-icons'\n\nimport { Avatar, Breadcrumbs, Button, Menu, Separator, Sidebar } from '@/components/ui'\n\nexport default function SidebarFloatingDemo() {\n    return (\n        <Sidebar.Provider>\n            <AppSidebar variant='floating' />\n            <Sidebar.Inset>\n                <header className='sticky justify-between sm:justify-start top-0 h-[3.57rem] px-4 flex items-center gap-x-2'>\n                    <span className='flex items-center gap-x-4'>\n                        <Sidebar.Trigger className='-mx-2' />\n                        <Separator className='h-6 sm:block hidden' orientation='vertical' />\n                        <Breadcrumbs className='md:flex hidden'>\n                            <Breadcrumbs.Item href='/blocks/sidebar/sidebar-01'>\n                                Dashboard\n                            </Breadcrumbs.Item>\n\n                            <Breadcrumbs.Item>Billing</Breadcrumbs.Item>\n                        </Breadcrumbs>\n                    </span>\n\n                    <div className='flex sm:hidden items-center gap-x-2'>\n                        <Button variant='ghost' aria-label='Search...' size='icon'>\n                            <IconSearch />\n                        </Button>\n                        <Menu>\n                            <Menu.Trigger\n                                aria-label='Profile'\n                                className='flex items-center gap-x-2 group'\n                            >\n                                <Avatar\n                                    size='sm'\n                                    shape='circle'\n                                    src='https://github.com/dq-alhq.png'\n                                />\n                                <IconChevronDown className='size-4 group-pressed:rotate-180 transition-transform' />\n                            </Menu.Trigger>\n                            <Menu.Content className='min-w-[--trigger-width]'>\n                                <Menu.Item href='#'>\n                                    <IconCircleUser />\n                                    Profile\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconSettings />\n                                    Settings\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconShield />\n                                    Security\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconLogOut />\n                                    Log out\n                                </Menu.Item>\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                </header>\n                <div className='p-4 lg:p-6'>YOUR CONTENT</div>\n            </Sidebar.Inset>\n        </Sidebar.Provider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-fixed-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-fixed-demo",
    "raw": "'use client'\n\nimport AppSidebar from 'layouts/app-sidebar'\nimport {\n    IconChevronDown,\n    IconCircleUser,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShield\n} from 'hq-icons'\n\nimport { Avatar, Breadcrumbs, Button, Menu, Sidebar } from '@/components/ui'\n\nexport default function SidebarFixedDemo() {\n    return (\n        <Sidebar.Provider defaultOpen={true}>\n            <AppSidebar collapsible='fixed' />\n            <Sidebar.Inset>\n                <header className='sticky justify-between sm:justify-start top-0 h-[3.57rem] px-4 flex items-center gap-x-2'>\n                    <span className='flex items-center gap-x-4'>\n                        <Breadcrumbs className='md:flex hidden'>\n                            <Breadcrumbs.Item href='/blocks/sidebar/sidebar-01'>\n                                Dashboard\n                            </Breadcrumbs.Item>\n\n                            <Breadcrumbs.Item>Newsletter</Breadcrumbs.Item>\n                        </Breadcrumbs>\n                    </span>\n\n                    <div className='flex sm:hidden items-center gap-x-2'>\n                        <Button variant='ghost' aria-label='Search...' size='icon'>\n                            <IconSearch />\n                        </Button>\n                        <Menu>\n                            <Menu.Trigger\n                                aria-label='Profile'\n                                className='flex items-center gap-x-2 group'\n                            >\n                                <Avatar\n                                    size='sm'\n                                    shape='circle'\n                                    src='https://github.com/dq-alhq.png'\n                                />\n                                <IconChevronDown className='size-4 group-pressed:rotate-180 transition-transform' />\n                            </Menu.Trigger>\n                            <Menu.Content className='min-w-[--trigger-width]'>\n                                <Menu.Item href='#'>\n                                    <IconCircleUser />\n                                    Profile\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconSettings />\n                                    Settings\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconShield />\n                                    Security\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconLogOut />\n                                    Log out\n                                </Menu.Item>\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                </header>\n                <div className='p-4 lg:p-6'>YOUR CONTENT</div>\n            </Sidebar.Inset>\n        </Sidebar.Provider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-default-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-default-demo",
    "raw": "'use client'\n\nimport AppSidebar from 'layouts/app-sidebar'\nimport {\n    IconChevronDown,\n    IconCircleUser,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShield\n} from 'hq-icons'\n\nimport { Avatar, Button, Menu, SearchField, Separator, Sidebar } from '@/components/ui'\n\nexport default function SidebarDefaultDemo() {\n    return (\n        <Sidebar.Provider>\n            <AppSidebar variant='default' />\n            <Sidebar.Inset>\n                <header className='sticky justify-between sm:justify-start top-0 bg-bg h-[3.57rem] px-4 border-b flex items-center gap-x-2'>\n                    <span className='flex items-center gap-x-3'>\n                        <Sidebar.Trigger className='-mx-2' />\n                        <Separator className='h-6 sm:block hidden' orientation='vertical' />\n                    </span>\n                    <SearchField className='sm:inline hidden sm:ml-1.5' />\n                    <div className='flex sm:hidden items-center gap-x-2'>\n                        <Button variant='ghost' aria-label='Search...' size='icon'>\n                            <IconSearch />\n                        </Button>\n                        <Menu>\n                            <Menu.Trigger\n                                aria-label='Profile'\n                                className='flex items-center gap-x-2 group'\n                            >\n                                <Avatar\n                                    size='sm'\n                                    shape='circle'\n                                    src='https://github.com/dq-alhq.png'\n                                />\n                                <IconChevronDown className='size-4 group-pressed:rotate-180 transition-transform' />\n                            </Menu.Trigger>\n                            <Menu.Content className='min-w-[--trigger-width]'>\n                                <Menu.Item href='#'>\n                                    <IconCircleUser />\n                                    Profile\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconSettings />\n                                    Settings\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconShield />\n                                    Security\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconLogOut />\n                                    Log out\n                                </Menu.Item>\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                </header>\n                <div className='p-4 lg:p-6'>YOUT CONTENT</div>\n            </Sidebar.Inset>\n        </Sidebar.Provider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-basic-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-basic-demo",
    "raw": "'use client'\n\nimport {\n    IconChevronDown,\n    IconCircleUser,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShield\n} from 'hq-icons'\nimport AppSidebar from 'layouts/app-sidebar'\n\nimport { Avatar, Button, Menu, SearchField, Separator, Sidebar } from '@/components/ui'\n\nexport default function SidebarBasicDemo() {\n    return (\n        <Sidebar.Provider>\n            <AppSidebar />\n            <Sidebar.Inset>\n                <header className='sticky justify-between sm:justify-start top-0 bg-bg h-[3.57rem] px-4 border-b flex items-center gap-x-2'>\n                    <span className='flex items-center gap-x-3'>\n                        <Sidebar.Trigger className='-mx-2' />\n                        <Separator className='h-6 sm:block hidden' orientation='vertical' />\n                    </span>\n                    <SearchField className='sm:inline hidden sm:ml-1.5' />\n                    <div className='flex sm:hidden items-center gap-x-2'>\n                        <Button variant='ghost' aria-label='Search...' size='icon'>\n                            <IconSearch />\n                        </Button>\n                        <Menu>\n                            <Menu.Trigger\n                                aria-label='Profile'\n                                className='flex items-center gap-x-2 group'\n                            >\n                                <Avatar\n                                    size='sm'\n                                    shape='circle'\n                                    src='https://github.com/dq-alhq.png'\n                                />\n                                <IconChevronDown className='size-4 group-pressed:rotate-180 transition-transform' />\n                            </Menu.Trigger>\n                            <Menu.Content className='min-w-[--trigger-width]'>\n                                <Menu.Item href='#'>\n                                    <IconCircleUser />\n                                    Profile\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconSettings />\n                                    Settings\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconShield />\n                                    Security\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconLogOut />\n                                    Log out\n                                </Menu.Item>\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                </header>\n                <div className='p-4 lg:p-6'>YOUR CONTENT</div>\n            </Sidebar.Inset>\n        </Sidebar.Provider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-dock-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-dock-demo",
    "raw": "'use client'\n\nimport AppSidebar from 'layouts/app-sidebar'\nimport {\n    IconChevronDown,\n    IconCircleUser,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShield\n} from 'hq-icons'\n\nimport { Avatar, Breadcrumbs, Button, Menu, Separator, Sidebar } from '@/components/ui'\n\nexport default function SidebarDockDemo() {\n    return (\n        <Sidebar.Provider defaultOpen={false}>\n            <AppSidebar collapsible='dock' />\n            <Sidebar.Inset>\n                <header className='sticky justify-between sm:justify-start top-0 h-[3.57rem] px-4 flex items-center gap-x-2'>\n                    <span className='flex items-center gap-x-4'>\n                        <Sidebar.Trigger className='-mx-2' />\n                        <Separator className='h-6 md:block hidden' orientation='vertical' />\n                        <Breadcrumbs className='md:flex hidden'>\n                            <Breadcrumbs.Item href='/blocks/sidebar/sidebar-01'>\n                                Dashboard\n                            </Breadcrumbs.Item>\n\n                            <Breadcrumbs.Item>Newsletter</Breadcrumbs.Item>\n                        </Breadcrumbs>\n                    </span>\n\n                    <div className='flex sm:hidden items-center gap-x-2'>\n                        <Button variant='ghost' aria-label='Search...' size='icon'>\n                            <IconSearch />\n                        </Button>\n                        <Menu>\n                            <Menu.Trigger\n                                aria-label='Profile'\n                                className='flex items-center gap-x-2 group'\n                            >\n                                <Avatar\n                                    size='sm'\n                                    shape='circle'\n                                    src='https://github.com/dq-alhq.png'\n                                />\n                                <IconChevronDown className='size-4 group-pressed:rotate-180 transition-transform' />\n                            </Menu.Trigger>\n                            <Menu.Content className='min-w-[--trigger-width]'>\n                                <Menu.Item href='#'>\n                                    <IconCircleUser />\n                                    Profile\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconSettings />\n                                    Settings\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconShield />\n                                    Security\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconLogOut />\n                                    Log out\n                                </Menu.Item>\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                </header>\n                <div className='p-4 lg:p-6'>YOUR CONTENT</div>\n            </Sidebar.Inset>\n        </Sidebar.Provider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-off-canvas-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-off-canvas-demo",
    "raw": "'use client'\n\nimport {\n    IconChevronDown,\n    IconCircleUser,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShield\n} from 'hq-icons'\nimport AppSidebar from 'layouts/app-sidebar'\n\nimport { Avatar, Button, Menu, SearchField, Separator, Sidebar } from '@/components/ui'\n\nexport default function SidebarOffCanvasDemo() {\n    return (\n        <Sidebar.Provider>\n            <AppSidebar collapsible='offcanvas' />\n            <Sidebar.Inset>\n                <header className='sticky justify-between sm:justify-start top-0 bg-bg h-[3.57rem] px-4 border-b flex items-center gap-x-2'>\n                    <span className='flex items-center gap-x-3'>\n                        <Sidebar.Trigger className='-mx-2' />\n                        <Separator className='h-6 sm:block hidden' orientation='vertical' />\n                    </span>\n                    <SearchField className='sm:inline hidden sm:ml-1.5' />\n                    <div className='flex sm:hidden items-center gap-x-2'>\n                        <Button variant='ghost' aria-label='Search...' size='icon'>\n                            <IconSearch />\n                        </Button>\n                        <Menu>\n                            <Menu.Trigger\n                                aria-label='Profile'\n                                className='flex items-center gap-x-2 group'\n                            >\n                                <Avatar\n                                    size='sm'\n                                    shape='circle'\n                                    src='https://github.com/dq-alhq.png'\n                                />\n                                <IconChevronDown className='size-4 group-pressed:rotate-180 transition-transform' />\n                            </Menu.Trigger>\n                            <Menu.Content className='min-w-[--trigger-width]'>\n                                <Menu.Item href='#'>\n                                    <IconCircleUser />\n                                    Profile\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconSettings />\n                                    Settings\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconShield />\n                                    Security\n                                </Menu.Item>\n                                <Menu.Item href='#'>\n                                    <IconLogOut />\n                                    Log out\n                                </Menu.Item>\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                </header>\n                <div className='p-4 lg:p-6'>YOUT CONTENT</div>\n            </Sidebar.Inset>\n        </Sidebar.Provider>\n    )\n}\n"
  },
  "block/examples/auth-form-classic": {
    "component": "@/components/docs/block/examples/auth-form-classic",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutClassic from 'layouts/auth-layout-classic'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutClassic title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutClassic>\n    )\n}\n"
  },
  "block/examples/product-management": {
    "component": "@/components/docs/block/examples/product-management",
    "raw": "import NavbarLayout from 'layouts/navbar-layout'\n\nexport default function ProductManagement() {\n    return <NavbarLayout variant='navbar'>Products</NavbarLayout>\n}\n"
  },
  "block/examples/chatting-app": {
    "component": "@/components/docs/block/examples/chatting-app",
    "raw": "'use client'\n\nimport React, { FormEvent } from 'react'\n\nimport BubbleChat, { type BubbleChatProps } from 'components/chatting-app/bubble-chat'\nimport ContactList from 'components/chatting-app/contact-list'\nimport MessageForm from 'components/chatting-app/message-form'\nimport {\n    IconCircleX,\n    IconContact,\n    IconEllipsisVertical,\n    IconLogOut,\n    IconMessageDashed,\n    IconMessageMore,\n    IconMessagePlus,\n    IconTrash,\n    IconUser\n} from 'hq-icons'\nimport ChattingAppLayout from 'layouts/chatting-app-layout'\n\nimport { Avatar, Button, buttonVariants, cn, Menu, Popover, Sidebar } from '@/components/ui'\nimport { formatTime } from '@/lib/utils'\n\nexport default function ChatApp() {\n    const [chats, setChats] = React.useState<BubbleChatProps[]>([\n        {\n            message: \"Assalamu'alaikum, Hello Bro!\",\n            time: '10:00',\n            role: 'recieve'\n        },\n        {\n            message: \"Wa'alaikumsalam, Yes Bro... What's up?\",\n            time: '10:01',\n            role: 'send',\n            status: 'read'\n        },\n        {\n            message: `I Have a good news, There is new Component at this site. I hope you will like it.\n                Check it out. https://cleon-ui.vercel.app\n                `,\n            time: '10:03',\n            role: 'recieve'\n        }\n    ])\n\n    const [message, setMessage] = React.useState<string>('')\n\n    function sendMessage(e: FormEvent) {\n        e.preventDefault()\n        setChats([\n            ...chats,\n            {\n                message,\n                time: formatTime(new Date()),\n                role: 'send'\n            }\n        ])\n        setMessage('')\n    }\n\n    function deleteChat(index: number) {\n        setChats([...chats.slice(0, index), ...chats.slice(index + 1)])\n    }\n\n    return (\n        <Sidebar.Provider isOpen={false}>\n            <ChattingAppLayout />\n            <main className='grid flex-1 gap-3 overflow-auto md:p-2 md:grid-cols-2 lg:grid-cols-4'>\n                <div className='relative hidden flex-col gap-4 items-start md:flex border rounded-lg'>\n                    <div className='flex w-full rounded-lg justify-between items-center sticky top-0 z-20 bg-background p-4'>\n                        <h1 className='text-2xl font-bold'>Chats</h1>\n                        <div className='flex justify-between items-center gap-2'>\n                            <Button variant='ghost' size='icon'>\n                                <IconMessageMore className='!size-6' />\n                            </Button>\n                            <Menu>\n                                <Menu.Trigger\n                                    className={buttonVariants({\n                                        variant: 'ghost',\n                                        size: 'icon'\n                                    })}\n                                >\n                                    <IconEllipsisVertical />\n                                </Menu.Trigger>\n                                <Menu.Content placement='bottom end'>\n                                    <Menu.Item>\n                                        <IconMessagePlus />\n                                        New Group\n                                    </Menu.Item>\n                                    <Menu.Item isDanger>\n                                        <IconLogOut />\n                                        Logout\n                                    </Menu.Item>\n                                </Menu.Content>\n                            </Menu>\n                        </div>\n                    </div>\n                    <div className='px-4 w-full'>\n                        <ContactList />\n                    </div>\n                </div>\n                <div className='relative flex h-full min-h-[50vh] flex-col rounded-lg bg-background lg:col-span-3'>\n                    <div className='p-2 md:px-4 rounded-lg flex flex-row gap-3 items-center border-b md:border'>\n                        <Popover>\n                            <Button variant='ghost' size='icon' className='md:hidden'>\n                                <IconContact />\n                            </Button>\n                            <Popover.Content aria-label='Contact List'>\n                                <Popover.Body>\n                                    <ContactList />\n                                </Popover.Body>\n                            </Popover.Content>\n                        </Popover>\n                        <Avatar initials='HB' status='success' src='https://i.pravatar.cc/77' />\n                        <div className='grid'>\n                            <span className='text-sm'>Hebert</span>\n                            <small className='text-muted-foreground text-xs'>Online</small>\n                        </div>\n                        <Menu>\n                            <Menu.Trigger\n                                className={cn(\n                                    buttonVariants({\n                                        variant: 'ghost',\n                                        size: 'icon'\n                                    }),\n                                    'ml-auto'\n                                )}\n                            >\n                                <IconEllipsisVertical />\n                            </Menu.Trigger>\n                            <Menu.Content placement='bottom end'>\n                                <Menu.Item>\n                                    <IconUser />\n                                    Contact Info\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconTrash />\n                                    Clear Chat\n                                </Menu.Item>\n                                <Menu.Item isDanger>\n                                    <IconCircleX />\n                                    Block\n                                </Menu.Item>\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                    <div className='flex-1 flex-col space-y-2 text-muted-foreground p-4  overflow-y-scroll overflow-x-hidden'>\n                        {chats.length > 0 ? (\n                            chats?.map((chat: BubbleChatProps, i: number) => (\n                                <BubbleChat key={i} {...chat} onDelete={() => deleteChat(i)} />\n                            ))\n                        ) : (\n                            <div className='flex flex-col items-center justify-center h-full'>\n                                <IconMessageDashed className='!size-6' />\n                                <p className='text-center font-bold text-xl'>\n                                    Start a conversation\n                                </p>\n                            </div>\n                        )}\n                    </div>\n                    <MessageForm value={message} onChange={setMessage} onSend={sendMessage} />\n                </div>\n            </main>\n        </Sidebar.Provider>\n    )\n}\n"
  },
  "block/examples/user-profile": {
    "component": "@/components/docs/block/examples/user-profile",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport About from 'components/user-profile/about'\nimport Media from 'components/user-profile/media'\nimport Posts from 'components/user-profile/posts'\nimport NavbarLayout from 'layouts/navbar-layout'\nimport Image from 'next/image'\nimport { Key } from 'react-aria-components'\n\nimport { Avatar, Card, Description, Heading, Tabs } from '@/components/ui'\n\nexport default function UserProfile() {\n    const [panel, setPanel] = React.useState<Key>(1)\n    return (\n        <NavbarLayout variant='inset'>\n            <div className='relative w-full'>\n                <Card className='w-full overflow-hidden'>\n                    <Card.Content className='p-0 lg:h-96'>\n                        <Image\n                            width={1920}\n                            height={1080}\n                            src='https://picsum.photos/id/1/1920/1080'\n                            alt='profil'\n                            className='object-contain'\n                        />\n                    </Card.Content>\n                </Card>\n                <div className='flex flex-col lg:flex-row relative items-center gap-4 mt-12 lg:mt-4'>\n                    <Avatar\n                        alt='logo'\n                        src='https://github.com/dq-alhq.png'\n                        className='absolute p-1 -translate-x-1/2 border rounded-full lg:translate-x-0 left-1/2 lg:left-20 size-24 lg:size-44 bottom-32 lg:-bottom-4 bg-background'\n                    />\n                    <div className='flex flex-col w-full gap-1 lg:ml-72'>\n                        <Heading className='text-lg font-bold text-center lg:text-left lg:text-4xl'>\n                            Diqi Al-Haqqi\n                        </Heading>\n                        <Description className='text-sm text-center uppercase lg:text-lg lg:text-left'>\n                            East Java, Indonesia\n                        </Description>\n                    </div>\n                    <Tabs\n                        className='lg:ml-auto mx-20'\n                        selectedKey={panel}\n                        onSelectionChange={setPanel}\n                    >\n                        <Tabs.List>\n                            <Tabs.Label className='lg:text-xl' id={1}>\n                                Posts\n                            </Tabs.Label>\n                            <Tabs.Label className='lg:text-xl' id={2}>\n                                About\n                            </Tabs.Label>\n                            <Tabs.Label className='lg:text-xl' id={3}>\n                                Media\n                            </Tabs.Label>\n                        </Tabs.List>\n                    </Tabs>\n                </div>\n            </div>\n            <div className='flex flex-col gap-6 mt-2 lg:mt-12 lg:flex-row'>\n                {panel === 1 && <Posts />}\n                {panel === 2 && <About />}\n                {panel === 3 && <Media />}\n            </div>\n        </NavbarLayout>\n    )\n}\n"
  },
  "block/examples/file-manager": {
    "component": "@/components/docs/block/examples/file-manager",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getFileIcon, mapFilePaths, rootFolders } from 'components/file-manager/file-list'\nimport {\n    IconLayoutGrid,\n    IconLayoutList,\n    IconSearch,\n    IconSquare,\n    IconSquareCheckBig\n} from 'hq-icons'\nimport FileManagerLayout from 'layouts/file-manager-layout'\n\nimport {\n    Breadcrumbs,\n    Button,\n    GridList,\n    SearchField,\n    Separator,\n    Sidebar,\n    Toggle\n} from '@/components/ui'\n\nexport default function FileManager() {\n    const [view, setView] = React.useState<'grid' | 'stack'>('grid')\n    const [selectionMode, setSelectionMode] = React.useState<'single' | 'multiple'>('single')\n    const [dir, setDir] = React.useState('')\n    const paths = mapFilePaths(rootFolders)\n\n    const [files, setFiles] = React.useState(paths)\n\n    React.useEffect(() => {\n        setFiles(paths.filter((path) => path.startsWith(dir)))\n    }, [dir])\n\n    return (\n        <FileManagerLayout rootDir={dir} setRootDir={setDir}>\n            <header className='sticky justify-between top-0 h-[3.57rem] px-4 flex items-center gap-x-2'>\n                <span className='flex items-center gap-x-4'>\n                    <Sidebar.Trigger className='-mx-2' />\n                    <Separator className='h-6 md:block hidden' orientation='vertical' />\n                    <Breadcrumbs\n                        className='md:flex hidden'\n                        items={dir\n                            .split('/')\n                            .filter((item) => item !== '')\n                            .map((item) => ({ id: item }))}\n                    >\n                        {(item) => (\n                            <Breadcrumbs.Item onPress={() => setDir(item.id + '/')} id={item.id}>\n                                {item.id}\n                            </Breadcrumbs.Item>\n                        )}\n                    </Breadcrumbs>\n                </span>\n                <div className='flex items-center gap-x-2'>\n                    <Button\n                        variant='ghost'\n                        className='md:hidden'\n                        aria-label='Search...'\n                        size='icon'\n                    >\n                        <IconSearch />\n                    </Button>\n                    <SearchField aria-label='Search' className='hidden md:inline-flex' />\n                    <Button\n                        size='icon'\n                        variant='ghost'\n                        aria-label='View'\n                        onPress={() => setView(view === 'stack' ? 'grid' : 'stack')}\n                    >\n                        {view === 'stack' ? (\n                            <IconLayoutList />\n                        ) : (\n                            <IconLayoutGrid className='size-5' />\n                        )}\n                    </Button>\n                    <Toggle\n                        size='icon'\n                        variant='ghost'\n                        aria-label='Selection Mode'\n                        isSelected={selectionMode === 'multiple'}\n                        onChange={() =>\n                            setSelectionMode(selectionMode === 'multiple' ? 'single' : 'multiple')\n                        }\n                    >\n                        {({ isSelected }) => (isSelected ? <IconSquareCheckBig /> : <IconSquare />)}\n                    </Toggle>\n                </div>\n            </header>\n            <div className='p-4 lg:p-6'>\n                <GridList\n                    aria-label='Files'\n                    selectionBehavior='toggle'\n                    layout={view}\n                    selectionMode={selectionMode}\n                    items={[\n                        ...new Map(\n                            files.map((item) => [\n                                item.replace(dir, '').split('/')[0],\n                                { id: item.replace(dir, '').split('/')[0] }\n                            ])\n                        ).values()\n                    ]}\n                >\n                    {(item) => (\n                        <GridList.Item\n                            textValue={item.id}\n                            id={item.id}\n                            onAction={() =>\n                                !item.id.includes('.') && setDir(dir + item.id.split('/')[0] + '/')\n                            }\n                        >\n                            {getFileIcon(item.id.split('.').pop() || 'folder')}\n                            {item.id}\n                        </GridList.Item>\n                    )}\n                </GridList>\n            </div>\n        </FileManagerLayout>\n    )\n}\n"
  },
  "block/examples/auth-form-modern": {
    "component": "@/components/docs/block/examples/auth-form-modern",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutModern from 'layouts/auth-layout-modern'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutModern title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutModern>\n    )\n}\n"
  },
  "block/examples/auth-form-overlay": {
    "component": "@/components/docs/block/examples/auth-form-overlay",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutOverlay from 'layouts/auth-layout-overlay'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutOverlay title='Register' description='Create your account'>\n            <Form className='grid gap-y-4 pb-6' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutOverlay>\n    )\n}\n"
  },
  "block/examples/dashboard": {
    "component": "@/components/docs/block/examples/dashboard",
    "raw": "'use client'\n\nimport {\n    IconActivity,\n    IconChartColumn,\n    IconRupiah,\n    IconSquareArrowUpRight,\n    IconUsers\n} from 'hq-icons'\nimport NavbarLayout from 'layouts/navbar-layout'\n\nimport { Avatar, buttonVariants, Card, Link, Table } from '@/components/ui'\nimport { getInitials } from '@/lib/utils'\n\nexport default function Dashboard() {\n    return (\n        <NavbarLayout variant='inset'>\n            <main className='flex flex-1 flex-col gap-4 md:gap-8'>\n                <div className='grid gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-4'>\n                    <Card>\n                        <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                            <Card.Title className='text-sm font-medium'>Total Revenue</Card.Title>\n                            <IconRupiah className='size-4 text-muted-foreground' />\n                        </Card.Header>\n                        <Card.Content>\n                            <div className='text-2xl font-bold'>Rp 45,231.89</div>\n                            <p className='text-xs text-muted-foreground'>+20.1% from last month</p>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                            <Card.Title className='text-sm font-medium'>Subscriptions</Card.Title>\n                            <IconUsers className='size-4 text-muted-foreground' />\n                        </Card.Header>\n                        <Card.Content>\n                            <div className='text-2xl font-bold'>+2350</div>\n                            <p className='text-xs text-muted-foreground'>+180.1% from last month</p>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                            <Card.Title className='text-sm font-medium'>Sales</Card.Title>\n                            <IconChartColumn className='size-4 text-muted-foreground' />\n                        </Card.Header>\n                        <Card.Content>\n                            <div className='text-2xl font-bold'>+12,234</div>\n                            <p className='text-xs text-muted-foreground'>+19% from last month</p>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                            <Card.Title className='text-sm font-medium'>Active Now</Card.Title>\n                            <IconActivity className='size-4 text-muted-foreground' />\n                        </Card.Header>\n                        <Card.Content>\n                            <div className='text-2xl font-bold'>+573</div>\n                            <p className='text-xs text-muted-foreground'>+201 since last hour</p>\n                        </Card.Content>\n                    </Card>\n                </div>\n                <div className='grid gap-4 md:gap-8 lg:grid-cols-2 xl:grid-cols-3'>\n                    <Card className='xl:col-span-2'>\n                        <Card.Header className='flex flex-row justify-between'>\n                            <div className='grid gap-1'>\n                                <Card.Title>Transactions</Card.Title>\n                                <Card.Description>Recent transactions.</Card.Description>\n                            </div>\n                            <Link\n                                variant='unstyled'\n                                className={buttonVariants({ variant: 'outline' })}\n                                href='#'\n                            >\n                                All\n                                <IconSquareArrowUpRight />\n                            </Link>\n                        </Card.Header>\n                        <Card.Content>\n                            <Table>\n                                <Table.Header>\n                                    <Table.Column isRowHeader>Customer</Table.Column>\n                                    <Table.Column className='[&_div]:justify-end'>\n                                        Amount\n                                    </Table.Column>\n                                </Table.Header>\n                                <Table.Body>\n                                    {transactions.map((transaction) => (\n                                        <Table.Row key={transaction.id}>\n                                            <Table.Cell>\n                                                <div className='font-medium'>\n                                                    {transaction.name}\n                                                </div>\n                                                <div className='hidden text-sm text-muted-foreground md:inline'>\n                                                    {transaction.email}\n                                                </div>\n                                            </Table.Cell>\n                                            <Table.Cell className='text-right'>\n                                                Rp {transaction.amount}\n                                            </Table.Cell>\n                                        </Table.Row>\n                                    ))}\n                                </Table.Body>\n                            </Table>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>Recent Sales</Card.Title>\n                        </Card.Header>\n                        <Card.Content className='grid gap-8'>\n                            {transactions.map((transaction) => (\n                                <div key={transaction.id} className='flex items-center gap-4'>\n                                    <Avatar\n                                        className='hidden size-9 sm:flex'\n                                        src={`https://i.pravatar.cc/150?img=${transaction.id}`}\n                                        initials={getInitials(transaction.name)}\n                                    />\n                                    <div className='grid gap-1'>\n                                        <p className='text-sm font-medium leading-none'>\n                                            {transaction.name}\n                                        </p>\n                                        <p className='text-sm text-muted-foreground'>\n                                            {transaction.email}\n                                        </p>\n                                    </div>\n                                    <div className='ml-auto font-medium'>\n                                        +Rp {transaction.amount}\n                                    </div>\n                                </div>\n                            ))}\n                        </Card.Content>\n                    </Card>\n                </div>\n            </main>\n        </NavbarLayout>\n    )\n}\n\nconst transactions = [\n    {\n        id: 1,\n        name: 'Berger',\n        email: 'bergersavage@senmao.com',\n        amount: 17135\n    },\n    {\n        id: 2,\n        name: 'Horn',\n        email: 'hornsavage@senmao.com',\n        amount: 25866\n    },\n    {\n        id: 3,\n        name: 'Frieda',\n        email: 'friedasavage@senmao.com',\n        amount: 54584\n    },\n    {\n        id: 4,\n        name: 'Noble',\n        email: 'noblesavage@senmao.com',\n        amount: 27562\n    },\n    {\n        id: 5,\n        name: 'Hewitt',\n        email: 'hewittsavage@senmao.com',\n        amount: 77237\n    }\n]\n"
  },
  "block/examples/user-setting": {
    "component": "@/components/docs/block/examples/user-setting",
    "raw": "'use client'\n\nimport AccountSetting from 'components/user-setting/account-setting'\nimport DangerArea from 'components/user-setting/danger-area'\nimport PlanBillingSetting from 'components/user-setting/plan-billing-setting'\nimport SecuritySetting from 'components/user-setting/security-setting'\nimport NavbarLayout from 'layouts/navbar-layout'\n\nimport { Card, Tabs } from '@/components/ui'\n\nexport default function UserSetting() {\n    return (\n        <NavbarLayout variant='floating'>\n            <Card borderless>\n                <Card.Header withoutPadding>\n                    <Card.Title>User Setting</Card.Title>\n                    <Card.Description>\n                        Manage your account settings and preferences.\n                    </Card.Description>\n                </Card.Header>\n            </Card>\n            <Tabs className='w-full gap-x-24' isResponsive aria-label='E-Learning Platform'>\n                <Tabs.List className='h-fit'>\n                    <Tabs.Label id='account'>Account</Tabs.Label>\n                    <Tabs.Label id='security'>Security</Tabs.Label>\n                    <Tabs.Label id='plan'>Plan & Billing</Tabs.Label>\n                    <Tabs.Label id='danger'>Danger Area</Tabs.Label>\n                </Tabs.List>\n                <Tabs.Content id='account'>\n                    <AccountSetting />\n                </Tabs.Content>\n                <Tabs.Content id='security'>\n                    <SecuritySetting />\n                </Tabs.Content>\n                <Tabs.Content id='plan'>\n                    <PlanBillingSetting />\n                </Tabs.Content>\n                <Tabs.Content id='danger'>\n                    <DangerArea />\n                </Tabs.Content>\n            </Tabs>\n        </NavbarLayout>\n    )\n}\n"
  },
  "block/examples/auth-form-split": {
    "component": "@/components/docs/block/examples/auth-form-split",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutSplit from 'layouts/auth-layout-split'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutSplit title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutSplit>\n    )\n}\n"
  },
  "block/examples/auth-form-full": {
    "component": "@/components/docs/block/examples/auth-form-full",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutFull from 'layouts/auth-layout-full'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutFull title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutFull>\n    )\n}\n"
  },
  "block/layouts/file-manager-layout": {
    "component": "@/components/docs/block/layouts/file-manager-layout",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBrandCleon,\n    IconDownload,\n    IconFilm,\n    IconFolders,\n    IconHome,\n    IconImages,\n    IconTrash\n} from 'hq-icons'\n\nimport { Link, Sidebar } from '@/components/ui'\n\ninterface Props {\n    rootDir: string\n    setRootDir: (rootDir: string) => void\n    children: React.ReactNode\n}\n\nexport default function FileManagerLayout({ children, rootDir, setRootDir }: Props) {\n    return (\n        <Sidebar.Provider>\n            <Sidebar collapsible='dock' variant='inset'>\n                <Sidebar.Header>\n                    <Link\n                        className='flex items-center group-data-[collapsible=dock]:size-10 group-data-[collapsible=dock]:justify-center gap-x-2'\n                        href='#'\n                    >\n                        <IconBrandCleon className='size-5' />\n                        <strong className='font-medium group-data-[collapsible=dock]:hidden'>\n                            FILE MANAGER\n                        </strong>\n                    </Link>\n                </Sidebar.Header>\n                <Sidebar.Content>\n                    <Sidebar.Section>\n                        <SidebarItem\n                            onPress={() => setRootDir('')}\n                            isCurrent={rootDir === ''}\n                            icon={IconHome}\n                            href='#'\n                        >\n                            Home\n                        </SidebarItem>\n                        <SidebarItem\n                            onPress={() => setRootDir('Downloads/')}\n                            isCurrent={rootDir.startsWith('Downloads/')}\n                            icon={IconDownload}\n                            href='#'\n                        >\n                            Downloads\n                        </SidebarItem>\n                        <SidebarItem\n                            onPress={() => setRootDir('Documents/')}\n                            isCurrent={rootDir.startsWith('Documents/')}\n                            icon={IconFolders}\n                            href='#'\n                        >\n                            Documents\n                        </SidebarItem>\n                        <SidebarItem\n                            onPress={() => setRootDir('Music/')}\n                            isCurrent={rootDir.startsWith('Music/')}\n                            icon={IconImages}\n                            href='#'\n                        >\n                            Music\n                        </SidebarItem>\n                        <SidebarItem\n                            onPress={() => setRootDir('Videos/')}\n                            isCurrent={rootDir.startsWith('Videos/')}\n                            icon={IconFilm}\n                            href='#'\n                        >\n                            Videos\n                        </SidebarItem>\n                    </Sidebar.Section>\n                    <Sidebar.Section>\n                        <SidebarItem\n                            onPress={() => setRootDir('Trash/')}\n                            isCurrent={rootDir === 'Trash/'}\n                            icon={IconTrash}\n                            href='#'\n                        >\n                            Trash\n                        </SidebarItem>\n                    </Sidebar.Section>\n                </Sidebar.Content>\n                <Sidebar.Rail />\n            </Sidebar>\n            <Sidebar.Inset>{children}</Sidebar.Inset>\n        </Sidebar.Provider>\n    )\n}\n\nfunction SidebarItem({ icon: Icon, ...props }: React.ComponentProps<typeof Sidebar.Item>) {\n    return <Sidebar.Item isCurrent={props.isCurrent} icon={Icon} {...props} />\n}\n"
  },
  "block/layouts/auth-layout-modern": {
    "component": "@/components/docs/block/layouts/auth-layout-modern",
    "raw": "import Image from 'next/image'\n\nimport { Card } from '@/components/ui'\n\nexport default function AuthLayoutModern({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='w-full justify-center items-center flex min-h-screen'>\n            <div className='lg:border rounded-lg lg:shadow-sm flex justify-center w-full lg:max-w-screen-xl'>\n                <div className='flex w-full max-w-xl px-4 lg:px-8 items-center justify-center py-12'>\n                    <Card className='w-full mx-auto lg:border-none lg:shadow-none'>\n                        <Card.Header>\n                            <Card.Title>{title}</Card.Title>\n                            <Card.Description>{description}</Card.Description>\n                        </Card.Header>\n                        <Card.Content>{children}</Card.Content>\n                    </Card>\n                </div>\n                <div className='hidden bg-muted lg:block'>\n                    <Image\n                        src='https://picsum.photos/1920/1080'\n                        alt='Image'\n                        priority\n                        width='1920'\n                        height='1080'\n                        className='size-full object-cover dark:brightness-[0.2] dark:grayscale'\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n"
  },
  "block/layouts/auth-layout-classic": {
    "component": "@/components/docs/block/layouts/auth-layout-classic",
    "raw": "import { Card } from '@/components/ui'\n\nexport default function AuthLayoutClassic({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='w-full min-h-screen flex items-center justify-center p-4 lg:p-8'>\n            <Card className='w-full max-w-lg'>\n                <Card.Header>\n                    <Card.Title>{title}</Card.Title>\n                    <Card.Description>{description}</Card.Description>\n                </Card.Header>\n                <Card.Content>{children}</Card.Content>\n            </Card>\n        </div>\n    )\n}\n"
  },
  "block/layouts/auth-layout-full": {
    "component": "@/components/docs/block/layouts/auth-layout-full",
    "raw": "import Image from 'next/image'\n\nimport { Card } from '@/components/ui'\n\nexport default function AuthLayoutSplit({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='w-full justify-center items-center flex min-h-screen'>\n            <div className='flex w-full max-w-xl px-4 lg:px-8 items-center justify-center py-12'>\n                <Card className='w-full mx-auto lg:border-none lg:shadow-none'>\n                    <Card.Header>\n                        <Card.Title>{title}</Card.Title>\n                        <Card.Description>{description}</Card.Description>\n                    </Card.Header>\n                    <Card.Content>{children}</Card.Content>\n                </Card>\n            </div>\n            <div className='hidden bg-muted lg:w-full lg:block lg:h-screen'>\n                <Image\n                    src='https://picsum.photos/1920/1080'\n                    alt='Image'\n                    priority\n                    width='1920'\n                    height='1080'\n                    className='size-full object-cover dark:brightness-[0.2] dark:grayscale'\n                />\n            </div>\n        </div>\n    )\n}\n"
  },
  "block/layouts/app-sidebar": {
    "component": "@/components/docs/block/layouts/app-sidebar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconAppWindowMac,\n    IconBrandLinux,\n    IconChevronDown,\n    IconCircleUser,\n    IconGauge,\n    IconLogOut,\n    IconMoon,\n    IconPanelLeft,\n    IconPanelLeftClose,\n    IconPanelLeftDashed,\n    IconPanelRight,\n    IconPanelRightOpen,\n    IconSun\n} from 'hq-icons'\nimport { usePathname } from 'next/navigation'\n\nimport { useTheme } from '@/components/providers'\nimport { Avatar, Button, Link, Menu, Sidebar, useSidebar } from '@/components/ui'\n\nexport default function AppSidebar({ ...props }) {\n    const { theme, setTheme } = useTheme()\n    const { state } = useSidebar()\n    const collapsed = state === 'collapsed'\n    return (\n        <Sidebar {...props}>\n            <Sidebar.Header>\n                <Link\n                    className='flex items-center group-data-[collapsible=dock]:size-10 group-data-[collapsible=dock]:justify-center gap-x-2'\n                    href='/docs/components/layouts/sidebar'\n                >\n                    <IconBrandLinux className='size-5' />\n                    <strong className='font-medium group-data-[collapsible=dock]:hidden'>\n                        Linux\n                    </strong>\n                </Link>\n            </Sidebar.Header>\n            <Sidebar.Content>\n                <Sidebar.Section>\n                    <SidebarItem icon={IconGauge} href='/block/sidebar/sidebar-basic-demo'>\n                        Sidebar\n                    </SidebarItem>\n                </Sidebar.Section>\n                <Sidebar.Section collapsible title='Variant'>\n                    <SidebarItem icon={IconPanelRight} href='/block/sidebar/sidebar-default-demo'>\n                        Default\n                    </SidebarItem>\n                    <SidebarItem\n                        icon={IconPanelLeftDashed}\n                        href='/block/sidebar/sidebar-floating-demo'\n                    >\n                        Floating\n                    </SidebarItem>\n                    <SidebarItem icon={IconAppWindowMac} href='/block/sidebar/sidebar-inset-demo'>\n                        Inset\n                    </SidebarItem>\n                </Sidebar.Section>\n                <Sidebar.Section collapsible title='Collapsible'>\n                    <SidebarItem icon={IconPanelLeftClose} href='/block/sidebar/sidebar-dock-demo'>\n                        Dock\n                    </SidebarItem>\n                    <Sidebar.Item\n                        icon={IconPanelRightOpen}\n                        href='/block/sidebar/sidebar-off-canvas-demo'\n                    >\n                        Off Canvas\n                    </Sidebar.Item>\n                    <Sidebar.Item icon={IconPanelLeft} href='/block/sidebar/sidebar-fixed-demo'>\n                        Fixed\n                    </Sidebar.Item>\n                </Sidebar.Section>\n            </Sidebar.Content>\n            <Sidebar.Footer className='lg:flex lg:flex-row hidden items-center'>\n                <Menu>\n                    <Button\n                        variant='ghost'\n                        aria-label='Profile'\n                        slot='close'\n                        className='group w-full justify-start group-data-[collapsible=dock]:justify-center'\n                    >\n                        <Avatar size='sm' shape='square' src='https://github.com/dq-alhq.png' />\n                        <span className='group-data-[collapsible=dock]:hidden flex items-center justify-center'>\n                            DQ Al-Haqqi\n                            <IconChevronDown className='right-3 size-4 absolute group-pressed:rotate-180 transition-transform' />\n                        </span>\n                    </Button>\n                    <Menu.Content\n                        placement={collapsed ? 'right' : 'top'}\n                        className={collapsed ? 'sm:min-w-56' : 'min-w-[--trigger-width]'}\n                    >\n                        <Menu.Item href='#'>\n                            <IconCircleUser />\n                            Profile\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Item onAction={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n                            {theme === 'light' ? <IconMoon /> : <IconSun />}\n                            Dark Mode\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Item isDanger href='#'>\n                            <IconLogOut />\n                            Log out\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Sidebar.Footer>\n            <Sidebar.Rail />\n        </Sidebar>\n    )\n}\n\nfunction SidebarItem({ icon: Icon, ...props }: React.ComponentProps<typeof Sidebar.Item>) {\n    const pathname = usePathname()\n    return <Sidebar.Item isCurrent={pathname === props.href} icon={Icon} {...props} />\n}\n"
  },
  "block/layouts/navbar-layout": {
    "component": "@/components/docs/block/layouts/navbar-layout",
    "raw": "'use client'\n\nimport { IconBrandCleon, IconSearch, IconShoppingBag } from 'hq-icons'\nimport { usePathname } from 'next/navigation'\n\nimport { Button, Navbar } from '@/components/ui'\n\nexport default function NavbarLayout({\n    variant,\n    children\n}: {\n    variant: 'inset' | 'navbar' | 'floating'\n    children: React.ReactNode\n}) {\n    const pathname = usePathname()\n    return (\n        <Navbar variant={variant}>\n            <Navbar.Nav className='container'>\n                <Navbar.Logo href='#'>\n                    <IconBrandCleon className='size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item isCurrent={pathname.includes('dashboard')} href='#'>\n                        Dashboard\n                    </Navbar.Item>\n                    <Navbar.Item isCurrent={pathname.includes('setting')} href='#'>\n                        Setting\n                    </Navbar.Item>\n                    <Navbar.Item isCurrent={pathname.includes('orders')} href='#'>\n                        Orders\n                    </Navbar.Item>\n                    <Navbar.Item isCurrent={pathname.includes('products')} href='#'>\n                        Products\n                    </Navbar.Item>\n                    <Navbar.Item isCurrent={pathname.includes('profile')} href='#'>\n                        Profile\n                    </Navbar.Item>\n                </Navbar.Section>\n            </Navbar.Nav>\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                    </Navbar.Flex>\n                </Navbar.Flex>\n            </Navbar.Compact>\n            <Navbar.Inset>{children}</Navbar.Inset>\n        </Navbar>\n    )\n}\n"
  },
  "block/layouts/auth-layout-split": {
    "component": "@/components/docs/block/layouts/auth-layout-split",
    "raw": "import Image from 'next/image'\n\nimport { Card } from '@/components/ui'\n\nexport default function AuthLayoutSplit({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='w-full grid lg:min-h-screen lg:max-h-screen lg:grid-cols-2'>\n            <div className='flex items-center justify-center py-12 px-4 lg:px-8 '>\n                <Card className='w-full max-w-lg mx-auto' borderless>\n                    <Card.Header>\n                        <Card.Title>{title}</Card.Title>\n                        <Card.Description>{description}</Card.Description>\n                    </Card.Header>\n                    <Card.Content>{children}</Card.Content>\n                </Card>\n            </div>\n            <div className='hidden bg-muted lg:block'>\n                <Image\n                    src='https://picsum.photos/1920/1080'\n                    alt='Image'\n                    priority\n                    width='1920'\n                    height='1080'\n                    className='size-full object-cover dark:brightness-[0.2] dark:grayscale'\n                />\n            </div>\n        </div>\n    )\n}\n"
  },
  "block/layouts/auth-layout-overlay": {
    "component": "@/components/docs/block/layouts/auth-layout-overlay",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function AuthLayoutOverlay({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='flex w-full items-center justify-center h-screen'>\n            <Modal>\n                <Button>Register</Button>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>{title}</Modal.Title>\n                        <Modal.Description>{description}</Modal.Description>\n                    </Modal.Header>\n                    <Modal.Body>{children}</Modal.Body>\n                </Modal.Content>\n            </Modal>\n        </div>\n    )\n}\n"
  },
  "block/layouts/chatting-app-layout": {
    "component": "@/components/docs/block/layouts/chatting-app-layout",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBrandCleon,\n    IconChevronDown,\n    IconCircleUser,\n    IconFilm,\n    IconGroup,\n    IconLogOut,\n    IconMessage,\n    IconMoon,\n    IconRss,\n    IconSun\n} from 'hq-icons'\n\nimport { useTheme } from '@/components/providers'\nimport { Avatar, Button, Link, Menu, Sidebar, useSidebar } from '@/components/ui'\n\nexport default function ChattingAppLayout() {\n    const { theme, setTheme } = useTheme()\n    const { state } = useSidebar()\n    const collapsed = state === 'collapsed'\n    return (\n        <Sidebar collapsible='dock' variant='floating'>\n            <Sidebar.Header>\n                <Link\n                    className='flex items-center group-data-[collapsible=dock]:size-10 group-data-[collapsible=dock]:justify-center gap-x-2'\n                    href='#'\n                >\n                    <IconBrandCleon className='size-5' />\n                    <strong className='font-medium group-data-[collapsible=dock]:hidden'>\n                        CHATTING APP\n                    </strong>\n                </Link>\n            </Sidebar.Header>\n            <Sidebar.Content>\n                <Sidebar.Section>\n                    <SidebarItem isCurrent icon={IconMessage} href='#'>\n                        Chats\n                    </SidebarItem>\n                    <SidebarItem icon={IconRss} href='#'>\n                        Broadcast\n                    </SidebarItem>\n                    <SidebarItem icon={IconFilm} href='#'>\n                        Stories\n                    </SidebarItem>\n                    <SidebarItem icon={IconGroup} href='#'>\n                        Communities\n                    </SidebarItem>\n                </Sidebar.Section>\n            </Sidebar.Content>\n            <Sidebar.Footer className='lg:flex lg:flex-row hidden items-center'>\n                <Menu>\n                    <Button\n                        variant='ghost'\n                        aria-label='Profile'\n                        slot='close'\n                        className='group w-full justify-start group-data-[collapsible=dock]:justify-center'\n                    >\n                        <Avatar size='sm' shape='square' src='https://github.com/dq-alhq.png' />\n                        <span className='group-data-[collapsible=dock]:hidden flex items-center justify-center'>\n                            DQ Al-Haqqi\n                            <IconChevronDown className='right-3 size-4 absolute group-pressed:rotate-180 transition-transform' />\n                        </span>\n                    </Button>\n                    <Menu.Content\n                        placement={collapsed ? 'right' : 'top'}\n                        className={collapsed ? 'sm:min-w-56' : 'min-w-[--trigger-width]'}\n                    >\n                        <Menu.Item href='#'>\n                            <IconCircleUser />\n                            Profile\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n                            {theme === 'light' ? <IconMoon /> : <IconSun />}\n                            Dark Mode\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Item isDanger href='#'>\n                            <IconLogOut />\n                            Log out\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Sidebar.Footer>\n        </Sidebar>\n    )\n}\n\nfunction SidebarItem({ icon: Icon, ...props }: React.ComponentProps<typeof Sidebar.Item>) {\n    return <Sidebar.Item isCurrent={props.isCurrent} icon={Icon} {...props} />\n}\n"
  },
  "block/navbar/navbar-creating-demo": {
    "component": "@/components/docs/block/navbar/navbar-creating-demo",
    "raw": "'use client'\n\nimport { IconBrandLinux, IconSearch, IconShoppingBag } from 'hq-icons'\n\nimport { Button, Navbar } from '@/components/ui'\n\nexport default function AppNavbar() {\n    return (\n        <Navbar>\n            <Navbar.Nav>\n                <Navbar.Logo href='#'>\n                    <IconBrandLinux className='size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='/docs/components/layouts/navbar'>Documentation</Navbar.Item>\n                    <Navbar.Item href='#'>Features</Navbar.Item>\n                    <Navbar.Item href='#'>Support</Navbar.Item>\n                    <Navbar.Item href='#'>Pricing</Navbar.Item>\n                </Navbar.Section>\n            </Navbar.Nav>\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                    </Navbar.Flex>\n                </Navbar.Flex>\n            </Navbar.Compact>\n            {/*<Navbar.Inset>*/}\n            {/*  <Heading>Home</Heading>*/}\n            {/*</Navbar.Inset>*/}\n        </Navbar>\n    )\n}\n"
  },
  "block/navbar/navbar-icon-demo": {
    "component": "@/components/docs/block/navbar/navbar-icon-demo",
    "raw": "'use client'\n\nimport {\n    IconBrandCleon,\n    IconBrandGithub,\n    IconBrandLinux,\n    IconChevronDown,\n    IconCommand,\n    IconGauge,\n    IconHeadphones,\n    IconLogOut,\n    IconNotebook,\n    IconPanelLeftOpen,\n    IconSearch,\n    IconSettings,\n    IconShoppingBag,\n    IconSwatchBook\n} from 'hq-icons'\n\nimport { Avatar, Button, Menu, Navbar, Separator } from '@/components/ui'\n\nexport default function NavbarIconDemo() {\n    return (\n        <Navbar>\n            <Navbar.Nav>\n                <Navbar.Logo href='/docs/components/layouts/navbar'>\n                    <IconBrandCleon className='size-5' />\n                    <strong className='font-semibold'>Cleon</strong>\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='/docs/components/layouts/navbar'>\n                        <IconNotebook />\n                        Documentation\n                    </Navbar.Item>\n                    <Navbar.Item href='/docs/components/layouts/sidebar'>\n                        <IconPanelLeftOpen /> Sidebar\n                    </Navbar.Item>\n                    <Navbar.Item href='/themes'>\n                        <IconSwatchBook /> Themes\n                    </Navbar.Item>\n                    <Navbar.Item href='https://github.com/dq-alhq/cleon-ui'>\n                        <IconBrandGithub /> Github\n                    </Navbar.Item>\n                </Navbar.Section>\n            </Navbar.Nav>\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                    <Separator orientation='vertical' className='h-6 mx-2' />\n                    <Navbar.Logo href='/docs/components/layouts/navbar'>\n                        <IconBrandLinux className='size-5' />\n                    </Navbar.Logo>\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                    </Navbar.Flex>\n                    <Separator orientation='vertical' className='h-6 ml-1 mr-3' />\n                    <Menu>\n                        <Menu.Trigger\n                            aria-label='Open Menu'\n                            className='group gap-x-2 flex items-center'\n                        >\n                            <Avatar\n                                alt='slash'\n                                size='sm'\n                                shape='square'\n                                src='https://github.com/dq-alhq.png'\n                            />\n                            <IconChevronDown className='size-4 group-pressed:rotate-180 transition-transform' />\n                        </Menu.Trigger>\n                        <Menu.Content placement='bottom' showArrow className='sm:min-w-56'>\n                            <Menu.Section>\n                                <Menu.Header separator>\n                                    <span className='block'>DQ Al-Haqqi</span>\n                                    <span className='font-normal text-muted-foreground'>\n                                        @dq-alhq\n                                    </span>\n                                </Menu.Header>\n                            </Menu.Section>\n\n                            <Menu.Item href='#dashboard'>\n                                <IconGauge />\n                                Dashboard\n                            </Menu.Item>\n                            <Menu.Item href='#settings'>\n                                <IconSettings />\n                                Settings\n                            </Menu.Item>\n                            <Menu.Separator />\n                            <Menu.Item>\n                                <IconCommand />\n                                Command Menu\n                            </Menu.Item>\n                            <Menu.Separator />\n                            <Menu.Item href='#contact-support'>\n                                <IconHeadphones />\n                                Contact Support\n                            </Menu.Item>\n                            <Menu.Separator />\n                            <Menu.Item href='#logout'>\n                                <IconLogOut />\n                                Log out\n                            </Menu.Item>\n                        </Menu.Content>\n                    </Menu>\n                </Navbar.Flex>\n            </Navbar.Compact>\n        </Navbar>\n    )\n}\n"
  },
  "block/navbar/navbar-floating-demo": {
    "component": "@/components/docs/block/navbar/navbar-floating-demo",
    "raw": "'use client'\n\nimport { IconBrandLinux, IconSearch, IconShoppingBag } from 'hq-icons'\n\nimport { Button, Navbar } from '@/components/ui'\n\nexport default function NavbarFloatingDemo() {\n    return (\n        <Navbar variant='floating'>\n            <Navbar.Nav>\n                <Navbar.Logo href='#'>\n                    <IconBrandLinux className='size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#'>Store</Navbar.Item>\n                    <Navbar.Item isCurrent href='#'>\n                        Mac\n                    </Navbar.Item>\n                    <Navbar.Item href='#'>iPad</Navbar.Item>\n                    <Navbar.Item href='#'>iPhone</Navbar.Item>\n                </Navbar.Section>\n            </Navbar.Nav>\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                    </Navbar.Flex>\n                </Navbar.Flex>\n            </Navbar.Compact>\n            {/*<Navbar.Inset>*/}\n            {/*  <Heading>Home</Heading>*/}\n            {/*</Navbar.Inset>*/}\n        </Navbar>\n    )\n}\n"
  },
  "block/navbar/navbar-logo-demo": {
    "component": "@/components/docs/block/navbar/navbar-logo-demo",
    "raw": "'use client'\n\nimport { IconBrandLinux, IconSearch, IconShoppingBag } from 'hq-icons'\n\nimport { Button, Navbar } from '@/components/ui'\n\nexport default function NavbarLogoDemo() {\n    return (\n        <Navbar>\n            <Navbar.Nav>\n                <Navbar.Logo href='#'>\n                    <IconBrandLinux className='size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#'>Store</Navbar.Item>\n                    <Navbar.Item href='#'>Mac</Navbar.Item>\n                </Navbar.Section>\n            </Navbar.Nav>\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                    </Navbar.Flex>\n                </Navbar.Flex>\n            </Navbar.Compact>\n            {/*<Navbar.Inset>*/}\n            {/*  <Heading>Home</Heading>*/}\n            {/*</Navbar.Inset>*/}\n        </Navbar>\n    )\n}\n"
  },
  "block/navbar/navbar-basic-demo": {
    "component": "@/components/docs/block/navbar/navbar-basic-demo",
    "raw": "'use client'\n\nimport {\n    IconBrandLinux,\n    IconChevronDown,\n    IconCommand,\n    IconGauge,\n    IconHeadphones,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShoppingBag\n} from 'hq-icons'\n\nimport { Avatar, Button, Menu, Navbar, Separator } from '@/components/ui'\n\nexport default function NavbarBasicDemo() {\n    return (\n        <Navbar>\n            <Navbar.Nav>\n                <Navbar.Logo href='#'>\n                    <IconBrandLinux className='size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#'>Store</Navbar.Item>\n                    <Navbar.Item href='#'>Mac</Navbar.Item>\n                    <Navbar.Item href='#'>iPad</Navbar.Item>\n                    <Navbar.Item href='#'>iPhone</Navbar.Item>\n                </Navbar.Section>\n                <Navbar.Section className='ml-auto hidden lg:flex'>\n                    <div className='flex items-center gap-x-2'>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                    </div>\n                    <Separator orientation='vertical' className='h-6 ml-1 mr-3' />\n                    <Menu>\n                        <Menu.Trigger\n                            aria-label='Open Menu'\n                            className='group gap-x-2 flex items-center'\n                        >\n                            <Avatar\n                                alt='slash'\n                                size='sm'\n                                shape='square'\n                                src='https://github.com/dq-alhq.png'\n                            />\n                            <IconChevronDown className='size-4 group-pressed:rotate-180 transition-transform' />\n                        </Menu.Trigger>\n                        <Menu.Content placement='bottom' showArrow className='sm:min-w-56'>\n                            <Menu.Section>\n                                <Menu.Header separator>\n                                    <span className='block'>DQ Al-Haqqi</span>\n                                    <span className='font-normal text-muted-foreground'>\n                                        @dq-alhq\n                                    </span>\n                                </Menu.Header>\n                            </Menu.Section>\n\n                            <Menu.Item href='#dashboard'>\n                                <IconGauge />\n                                Dashboard\n                            </Menu.Item>\n                            <Menu.Item href='#settings'>\n                                <IconSettings />\n                                Settings\n                            </Menu.Item>\n                            <Menu.Separator />\n                            <Menu.Item>\n                                <IconCommand />\n                                Command Menu\n                            </Menu.Item>\n                            <Menu.Separator />\n                            <Menu.Item href='#contact-s'>\n                                <IconHeadphones />\n                                Contact Support\n                            </Menu.Item>\n                            <Menu.Separator />\n                            <Menu.Item href='#logout'>\n                                <IconLogOut />\n                                Log out\n                            </Menu.Item>\n                        </Menu.Content>\n                    </Menu>\n                </Navbar.Section>\n            </Navbar.Nav>\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                    </Navbar.Flex>\n                </Navbar.Flex>\n            </Navbar.Compact>\n\n            {/*<Navbar.Inset>*/}\n            {/*  <Heading>Home</Heading>*/}\n            {/*</Navbar.Inset>*/}\n        </Navbar>\n    )\n}\n"
  },
  "block/navbar/navbar-disabled-demo": {
    "component": "@/components/docs/block/navbar/navbar-disabled-demo",
    "raw": "'use client'\n\nimport { IconBrandLinux } from 'hq-icons'\n\nimport { Navbar } from '@/components/ui'\n\nexport default function NavbarDisabledDemo() {\n    return (\n        <Navbar>\n            <Navbar.Nav>\n                <Navbar.Logo href='#'>\n                    <IconBrandLinux className='size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#'>Store</Navbar.Item>\n                    <Navbar.Item isDisabled href='#'>\n                        Mac\n                    </Navbar.Item>\n                    <Navbar.Item href='#'>iPad</Navbar.Item>\n                    <Navbar.Item href='#'>iPhone</Navbar.Item>\n                </Navbar.Section>\n            </Navbar.Nav>\n        </Navbar>\n    )\n}\n"
  },
  "block/navbar/navbar-current-demo": {
    "component": "@/components/docs/block/navbar/navbar-current-demo",
    "raw": "'use client'\n\nimport { IconBrandLinux, IconSearch, IconShoppingBag } from 'hq-icons'\n\nimport { Button, Navbar } from '@/components/ui'\n\nexport default function NavbarCurrentDemo() {\n    return (\n        <Navbar>\n            <Navbar.Nav>\n                <Navbar.Logo href='#'>\n                    <IconBrandLinux className='size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#'>Store</Navbar.Item>\n                    <Navbar.Item isCurrent href='#'>\n                        Mac\n                    </Navbar.Item>\n                    <Navbar.Item href='#'>iPad</Navbar.Item>\n                    <Navbar.Item href='#'>iPhone</Navbar.Item>\n                </Navbar.Section>\n            </Navbar.Nav>\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                    </Navbar.Flex>\n                </Navbar.Flex>\n            </Navbar.Compact>\n        </Navbar>\n    )\n}\n"
  },
  "block/navbar/navbar-inset-demo": {
    "component": "@/components/docs/block/navbar/navbar-inset-demo",
    "raw": "'use client'\n\nimport { IconBrandLinux, IconSearch, IconShoppingBag } from 'hq-icons'\n\nimport { Button, Heading, Navbar } from '@/components/ui'\n\nexport default function NavbarInsetDemo() {\n    return (\n        <Navbar variant='inset'>\n            <Navbar.Nav>\n                <Navbar.Logo href='#'>\n                    <IconBrandLinux className='size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#'>Store</Navbar.Item>\n                    <Navbar.Item isCurrent href='#'>\n                        Mac\n                    </Navbar.Item>\n                    <Navbar.Item href='#'>iPad</Navbar.Item>\n                    <Navbar.Item href='#'>iPhone</Navbar.Item>\n                </Navbar.Section>\n            </Navbar.Nav>\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                    </Navbar.Flex>\n                </Navbar.Flex>\n            </Navbar.Compact>\n            <Navbar.Inset>\n                <Heading>Home</Heading>\n            </Navbar.Inset>\n        </Navbar>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDemo() {\n    return (\n        <RadioGroup label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-orientation-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-orientation-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupOrientationDemo() {\n    return (\n        <RadioGroup orientation='horizontal' label='Payment Method'>\n            <Radio value='credit-card'>Credit Card</Radio>\n            <Radio value='paypal'>PayPal</Radio>\n            <Radio value='apple-pay'>Apple Pay</Radio>\n            <Radio value='google-pay'>Google Pay</Radio>\n            <Radio value='bank-transfer'>Bank Transfer</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-disabled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-disabled-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDisabledDemo() {\n    return (\n        <RadioGroup isDisabled label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-children-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-children-description-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupChildrenDescriptionDemo() {\n    return (\n        <RadioGroup>\n            <Radio value='basic' description='Basic plan with limited features'>\n                Basic\n            </Radio>\n            <Radio value='standard' description='Standard plan with more features'>\n                Standard\n            </Radio>\n            <Radio value='premium' description='Premium plan with all features'>\n                Premium\n            </Radio>\n            <Radio value='family' description='Family plan for multiple users'>\n                Family\n            </Radio>\n            <Radio value='student' description='Discounted plan for students'>\n                Student\n            </Radio>\n            <Radio value='custom'>Custom</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-description-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDescriptionDemo() {\n    return (\n        <RadioGroup\n            description='Select your preferred shipping method for the delivery of your items.'\n            label='Shipping Method'\n        >\n            <Radio value='standard'>Standard</Radio>\n            <Radio value='express'>Express</Radio>\n            <Radio value='overnight'>Overnight</Radio>\n            <Radio value='international'>International</Radio>\n            <Radio value='pickup'>Pickup</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-invalid-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-invalid-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupInvalidDemo() {\n    return (\n        <RadioGroup isInvalid label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = React.useState('')\n    return (\n        <>\n            <RadioGroup label='Features' value={selected} onChange={setSelected}>\n                <Radio value='theme'>Theme</Radio>\n                <Radio value='language'>Language</Radio>\n                <Radio value='timezone'>Timezone</Radio>\n                <Radio value='notifications'>Notifications</Radio>\n                <Radio value='privacy'>Privacy</Radio>\n            </RadioGroup>\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have selected: <strong>{selected ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/form-demo": {
    "component": "@/components/docs/forms/form-demo",
    "raw": "'use client'\n\nimport { Button, Form, Heading, TextField } from '@/components/ui'\n\nexport default function FormDemo() {\n    return (\n        <div className='mx-auto max-w-md py-10'>\n            <Heading level={2} className='mb-4'>\n                Register\n            </Heading>\n            <Form onSubmit={() => {}} className='space-y-4'>\n                <TextField isRequired label='Name' placeholder='Enter your name' />\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <div className='grid grid-cols-2 gap-4'>\n                    <TextField\n                        isRequired\n                        label='Password'\n                        placeholder='Enter your password'\n                        type='password'\n                    />\n                    <TextField\n                        isRequired\n                        label='Confirm Password'\n                        placeholder='Enter your password again'\n                        type='password'\n                    />\n                </div>\n                <Button type='submit'>Submit</Button>\n            </Form>\n        </div>\n    )\n}\n"
  },
  "forms/otp/otp-separator-demo": {
    "component": "@/components/docs/forms/otp/otp-separator-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpSeparatorDemo() {\n    return (\n        <OTP maxLength={6}>\n            <OTP.Group>\n                <OTP.Slot index={0} />\n                <OTP.Slot index={1} />\n                <OTP.Slot index={2} />\n            </OTP.Group>\n            <OTP.Separator />\n            <OTP.Group>\n                <OTP.Slot index={3} />\n                <OTP.Slot index={4} />\n                <OTP.Slot index={5} />\n            </OTP.Group>\n        </OTP>\n    )\n}\n"
  },
  "forms/otp/otp-controlled-demo": {
    "component": "@/components/docs/forms/otp/otp-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <div className='space-y-2'>\n            <OTP maxLength={6} value={value} onChange={setValue}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot key={index} index={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n\n            <div className='text-center text-sm'>\n                {value === '' ? <>Enter your one-time password.</> : <>You entered: {value}</>}\n            </div>\n        </div>\n    )\n}\n"
  },
  "forms/otp/otp-demo": {
    "component": "@/components/docs/forms/otp/otp-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpDemo() {\n    return (\n        <div>\n            <OTP maxLength={6}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot key={index} index={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n        </div>\n    )\n}\n"
  },
  "forms/tag-field/tag-field-shape-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-shape-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldShapeDemo() {\n    const selectedItems = useListData({\n        initialItems: [\n            {\n                id: 1,\n                name: 'Laravel'\n            },\n            {\n                id: 2,\n                name: 'Inertia.js'\n            }\n        ]\n    })\n\n    return <TagField shape='circle' className='max-w-xs' label='Add tag' list={selectedItems} />\n}\n"
  },
  "forms/tag-field/tag-field-disabled-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-disabled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldDisabledDemo() {\n    const selectedItems = useListData({\n        initialItems: []\n    })\n\n    return <TagField isDisabled label='Add tag' list={selectedItems} />\n}\n"
  },
  "forms/tag-field/tag-field-max-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-max-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldMaxDemo() {\n    const selectedItems = useListData({\n        initialItems: []\n    })\n\n    return (\n        <TagField\n            className='max-w-sm'\n            max={3}\n            label='Add tag'\n            description='You can only add 3 tags'\n            list={selectedItems}\n        />\n    )\n}\n"
  },
  "forms/tag-field/tag-field-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldDemo() {\n    const selectedItems = useListData({\n        initialItems: [\n            {\n                id: 1,\n                name: 'Laravel'\n            }\n        ]\n    })\n\n    return <TagField className='max-w-xs' label='Add tag' list={selectedItems} />\n}\n"
  },
  "forms/tag-field/tag-field-variant-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-variant-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldVariantDemo() {\n    const selectedItems = useListData({\n        initialItems: [\n            {\n                id: 1,\n                name: 'Laravel'\n            },\n            {\n                id: 2,\n                name: 'Inertia.js'\n            },\n            {\n                id: 3,\n                name: 'React'\n            },\n            {\n                id: 4,\n                name: 'Tailwind CSS'\n            }\n        ]\n    })\n\n    return (\n        <TagField\n            variant='secondary'\n            className='max-w-xs'\n            aria-label='Add tag'\n            list={selectedItems}\n        />\n    )\n}\n"
  },
  "forms/tag-field/tag-field-controlled-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-controlled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Description, TagField } from '@/components/ui'\n\nexport default function TagFieldControlledDemo() {\n    const selectedItems = useListData({\n        initialItems: [{ id: 1, name: 'Ferrari' }]\n    })\n\n    return (\n        <div className='max-w-xs'>\n            <TagField\n                variant='primary'\n                label='Add tag'\n                onItemInserted={(key) => console.log('on item inserted', key)}\n                onItemCleared={(key) => console.log('on item cleared', key)}\n                description='You can add multiple tags'\n                list={selectedItems}\n            />\n            <Description className='max-w-xs block [&>strong]:text-foreground [&>strong]:text-medium mt-4'>\n                {JSON.stringify(selectedItems.items)}\n            </Description>\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-readonly-demo": {
    "component": "@/components/docs/forms/textarea/textarea-readonly-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaReadonlyDemo() {\n    return <Textarea isReadOnly label='Address' />\n}\n"
  },
  "forms/textarea/textarea-demo": {
    "component": "@/components/docs/forms/textarea/textarea-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaDemo() {\n    return <Textarea label='Address' />\n}\n"
  },
  "forms/textarea/textarea-disabled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-disabled-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaDisabledDemo() {\n    return <Textarea isDisabled label='Address' />\n}\n"
  },
  "forms/textarea/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <Textarea value={value} onChange={setValue} label='Address' className='mb-2' />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/textarea/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea/textarea-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, Textarea } from '@/components/ui'\n\nexport default function TextareaValidationDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <Textarea\n                value={value}\n                onChange={setValue}\n                label='Address'\n                isRequired\n                className='mb-2'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/rich-text-field/rich-text-field-disabled-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-disabled-demo",
    "raw": "'use client'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldDemo() {\n    return <RichTextField isDisabled label='Content (Disabled)' />\n}\n"
  },
  "forms/rich-text-field/rich-text-field-controlled-markdown-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-controlled-markdown-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldControlledMarkdownDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <RichTextField\n                returnType='markdown'\n                value={value}\n                onChange={setValue}\n                label='Content'\n                className='mb-2'\n            />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/rich-text-field/rich-text-field-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-demo",
    "raw": "'use client'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldDemo() {\n    return <RichTextField label='Content' />\n}\n"
  },
  "forms/rich-text-field/rich-text-field-controlled-html-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-controlled-html-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldControlledMarkdownDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <RichTextField\n                returnType='html'\n                value={value}\n                onChange={setValue}\n                label='Content'\n                className='mb-2'\n            />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/number-field/number-field-demo": {
    "component": "@/components/docs/forms/number-field/number-field-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDemo() {\n    return <NumberField label='Cookies' />\n}\n"
  },
  "forms/number-field/number-field-controlled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, NumberField } from '@/components/ui'\n\nexport default function NumberFieldControlledDemo() {\n    const [number, setNumber] = React.useState(1280)\n    return (\n        <div>\n            <NumberField label='Width' value={number} onChange={setNumber} />\n\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have typed: <strong>{number ?? '-'}</strong>\n            </Description>\n        </div>\n    )\n}\n"
  },
  "forms/number-field/number-field-invalid-demo": {
    "component": "@/components/docs/forms/number-field/number-field-invalid-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldInvalidDemo() {\n    return <NumberField isInvalid label='Cookies' />\n}\n"
  },
  "forms/number-field/number-field-disabled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-disabled-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDisabledDemo() {\n    return <NumberField isDisabled label='Cookies' />\n}\n"
  },
  "forms/checkbox/checkbox-indeterminate-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-indeterminate-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxIndeterminateDemo() {\n    return (\n        <Checkbox value='read' isIndeterminate>\n            Read\n        </Checkbox>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-group-indeterminate-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-indeterminate-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupIndeterminateDemo() {\n    return (\n        <CheckboxGroup defaultValue={['encryption']} className='ml-6'>\n            <Checkbox\n                isIndeterminate\n                value='encryption'\n                description='Enable encryption.'\n                isReadOnly\n            >\n                Encryption\n            </Checkbox>\n            <Checkbox value='firewall' description='Enable firewall protection.'>\n                Firewall\n            </Checkbox>\n            <Checkbox value='backup' description='Enable automatic backups.'>\n                Backup\n            </Checkbox>\n            <Checkbox\n                isIndeterminate\n                value='anomalyDetection'\n                description='Enable anomaly detection.'\n            >\n                Anomaly Detection\n            </Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-disabled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-disabled-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDisabledDemo() {\n    return <Checkbox isDisabled>Enable notifications</Checkbox>\n}\n"
  },
  "forms/checkbox/checkbox-group-controlled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, CheckboxGroup, Description } from '@/components/ui'\n\nexport default function CheckboxGroupControlledDemo() {\n    const [values, setValues] = React.useState<string[]>([])\n    return (\n        <>\n            <CheckboxGroup value={values} onChange={setValues} label='Options'>\n                <Checkbox value='sound'>Sound</Checkbox>\n                <Checkbox value='wifi'>Wi-Fi</Checkbox>\n                <Checkbox value='sync'>Sync</Checkbox>\n            </CheckboxGroup>\n\n            <Description className='flex flex-col gap-y-1 h-10 mt-2 [&>strong]:text-foreground [&>strong]:font-medium'>\n                {values.length > 0 ? (\n                    <>\n                        Selected values <strong className='font-medium'>{values.join(', ')}</strong>\n                    </>\n                ) : (\n                    'No values selected'\n                )}\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDemo() {\n    return <Checkbox>Enable notifications</Checkbox>\n}\n"
  },
  "forms/checkbox/checkbox-invalid-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-invalid-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxInvalidDemo() {\n    return <Checkbox isInvalid>Enable notifications</Checkbox>\n}\n"
  },
  "forms/checkbox/checkbox-group-disabled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-disabled-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxDisabledDemo() {\n    return (\n        <CheckboxGroup isDisabled label='Settings'>\n            <Checkbox value='notifications'>Enable notifications</Checkbox>\n            <Checkbox value='auto_update'>Auto-update applications</Checkbox>\n            <Checkbox value='dark_mode'>Enable dark mode</Checkbox>\n            <Checkbox value='location_access'>Allow location access</Checkbox>\n            <Checkbox value='two_factor_auth'>Enable two-factor authentication</Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-description-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-description-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDescriptionDemo() {\n    return <Checkbox label='Postal Mail' description='Receive notifications via postal mail' />\n}\n"
  },
  "forms/checkbox/checkbox-group-description-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-description-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDescriptionDemo() {\n    return (\n        <CheckboxGroup\n            label='User Permissions'\n            description='Select the permissions you want to grant to the user.'\n        >\n            <Checkbox value='read'>Read</Checkbox>\n            <Checkbox value='write'>Write</Checkbox>\n            <Checkbox value='delete'>Delete</Checkbox>\n            <Checkbox value='admin'>Admin</Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-group-validation-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-validation-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, CheckboxGroup, Form } from '@/components/ui'\n\nexport default function CheckboxValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <CheckboxGroup className='mb-4' label='Settings' isRequired>\n                <Checkbox value='notifications'>Enable notifications</Checkbox>\n                <Checkbox value='auto_update'>Auto-update applications</Checkbox>\n                <Checkbox value='dark_mode'>Enable dark mode</Checkbox>\n                <Checkbox value='location_access'>Allow location access</Checkbox>\n                <Checkbox value='two_factor_auth'>Enable two-factor authentication</Checkbox>\n            </CheckboxGroup>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDemo() {\n    return (\n        <CheckboxGroup label='Settings'>\n            <Checkbox value='notifications'>Enable notifications</Checkbox>\n            <Checkbox value='auto_update'>Auto-update applications</Checkbox>\n            <Checkbox value='dark_mode'>Enable dark mode</Checkbox>\n            <Checkbox value='location_access'>Allow location access</Checkbox>\n            <Checkbox value='two_factor_auth'>Enable two-factor authentication</Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, Description } from '@/components/ui'\n\nexport default function CheckboxControlledDemo() {\n    const [selected, setSelection] = React.useState(false)\n    return (\n        <>\n            <Checkbox isSelected={selected} onChange={setSelection} value='updates'>\n                Receive Updates\n            </Checkbox>\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have <strong>{selected ? 'enabled' : 'disabled'}</strong> the option.\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/search-field/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, SearchField } from '@/components/ui'\n\nexport default function SearchFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <SearchField value={value} onChange={setValue} className='mb-2' />\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have typed: <strong>{value ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/search-field/search-field-with-label-demo": {
    "component": "@/components/docs/forms/search-field/search-field-with-label-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldWithLabelDemo() {\n    return <SearchField label='Search' />\n}\n"
  },
  "forms/search-field/search-field-demo": {
    "component": "@/components/docs/forms/search-field/search-field-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDemo() {\n    return <SearchField aria-label='Search' placeholder='Search' />\n}\n"
  },
  "forms/search-field/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field/search-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, SearchField } from '@/components/ui'\n\nexport default function SearchFieldValidationDemo() {\n    return (\n        <Form>\n            <SearchField isRequired label='Name' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/search-field/search-field-disabled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-disabled-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDisabledDemo() {\n    return <SearchField isDisabled />\n}\n"
  },
  "forms/search-field/search-field-pending-demo": {
    "component": "@/components/docs/forms/search-field/search-field-pending-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDemo() {\n    return <SearchField isPending aria-label='Search' placeholder='Search' />\n}\n"
  },
  "forms/form-validation-demo": {
    "component": "@/components/docs/forms/form-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function FormValidationDemo() {\n    return (\n        <Form onSubmit={() => {}}>\n            <TextField label='Name' isRequired className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/text-field/text-field-pending-demo": {
    "component": "@/components/docs/forms/text-field/text-field-pending-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldPendingDemo() {\n    return <TextField isPending label='Name' />\n}\n"
  },
  "forms/text-field/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, TextField } from '@/components/ui'\n\nexport default function TextFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <TextField value={value} onChange={setValue} label='Name' className='mb-2' />\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have typed: <strong>{value ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/text-field/text-field-revealable-demo": {
    "component": "@/components/docs/forms/text-field/text-field-revealable-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldRevealableDemo() {\n    return <TextField type='password' isRevealable label='Password' />\n}\n"
  },
  "forms/text-field/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field/text-field-prefix-suffix-demo",
    "raw": "'use client'\n\nimport { IconBrandX } from 'hq-icons'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldPrefixSuffixDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <TextField label='Twitter' suffix={<IconBrandX />} />\n            <TextField label='Sites' prefix='https://' suffix='.com' />\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-demo": {
    "component": "@/components/docs/forms/text-field/text-field-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDemo() {\n    return <TextField label='Name' />\n}\n"
  },
  "forms/text-field/text-field-suffix-button-demo": {
    "component": "@/components/docs/forms/text-field/text-field-suffix-button-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconPlus } from 'hq-icons'\n\nimport { Button, Modal, TextField } from '@/components/ui'\n\nexport default function TextFieldSuffixButtonDemo() {\n    const [open, setOpen] = React.useState(false)\n    const close = () => setOpen(false)\n    return (\n        <>\n            <Modal.Content isOpen={open} onOpenChange={close}>\n                <Modal.Header>\n                    <Modal.Title>New User</Modal.Title>\n                    <Modal.Description>Create a new user account</Modal.Description>\n                </Modal.Header>\n                <Modal.Body className='flex flex-col gap-4'>\n                    <TextField label='Username' placeholder='Username' />\n                    <TextField label='Email' placeholder='Email' type='email' />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Modal.Close variant='outline'>Cancel</Modal.Close>\n                    <Button onPress={close}>Continue</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <TextField\n                label='Username'\n                suffix={\n                    <Button aria-label='New user' onPress={() => setOpen(true)} variant='outline'>\n                        <IconPlus />\n                    </Button>\n                }\n            />\n        </>\n    )\n}\n"
  },
  "forms/text-field/text-field-readonly-demo": {
    "component": "@/components/docs/forms/text-field/text-field-readonly-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldReadonlyDemo() {\n    return <TextField isReadOnly label='Name' />\n}\n"
  },
  "forms/text-field/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field/text-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function TextFieldValidationDemo() {\n    return (\n        <Form>\n            <TextField isRequired label='Name' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/text-field/text-field-disabled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-disabled-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDisabledDemo() {\n    return <TextField isDisabled label='Name' />\n}\n"
  },
  "navigation/link/link-variant-demo": {
    "component": "@/components/docs/navigation/link/link-variant-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkVariantDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Link variant='default' href='#variant-3'>\n                Default\n            </Link>\n            <Link variant='unstyled' href='#variant-5'>\n                Unstyled\n            </Link>\n            <Link variant='primary' href='#variant-1'>\n                Primary\n            </Link>\n            <Link variant='danger' href='#variant-4'>\n                Danger\n            </Link>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-disabled-demo": {
    "component": "@/components/docs/navigation/link/link-disabled-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDisabledDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Link isDisabled variant='default' href='#variant-3'>\n                Default\n            </Link>\n            <Link isDisabled variant='unstyled' href='#variant-5'>\n                Unstyled\n            </Link>\n            <Link isDisabled variant='primary' href='#variant-1'>\n                Primary\n            </Link>\n            <Link isDisabled variant='danger' href='#variant-4'>\n                Danger\n            </Link>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-demo": {
    "component": "@/components/docs/navigation/link/link-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDemo() {\n    return <Link href='#basic'>This is Link</Link>\n}\n"
  },
  "navigation/link/link-unstyled-demo": {
    "component": "@/components/docs/navigation/link/link-unstyled-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkUnstyledDemo() {\n    return (\n        <Link variant='unstyled' href='#unstyled'>\n            Unstyled Link\n        </Link>\n    )\n}\n"
  },
  "navigation/link/link-button-demo": {
    "component": "@/components/docs/navigation/link/link-button-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Link } from '@/components/ui'\n\nexport default function LinkButtonDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Link variant='unstyled' className={buttonVariants()} href='#use-as-button'>\n                Link\n            </Link>\n            <Link\n                variant='unstyled'\n                className={buttonVariants({ variant: 'outline' })}\n                href='#use-as-button'\n            >\n                Link\n            </Link>\n            <Link\n                variant='unstyled'\n                className={buttonVariants({ variant: 'ghost', shape: 'circle' })}\n                href='#use-as-button'\n            >\n                Link\n            </Link>\n        </div>\n    )\n}\n"
  },
  "navigation/tabs/tabs-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDemo() {\n    return (\n        <Tabs aria-label='Recipe App'>\n            <Tabs.List>\n                <Tabs.Label id='r'>Recipes</Tabs.Label>\n                <Tabs.Label id='i'>Ingredients</Tabs.Label>\n                <Tabs.Label id='m'>Meal Plans</Tabs.Label>\n                <Tabs.Label id='v'>Videos</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='r'>\n                Browse through a wide selection of recipes for all occasions and dietary\n                preferences.\n            </Tabs.Content>\n            <Tabs.Content id='i'>\n                Check the list of ingredients needed for your chosen recipes.\n            </Tabs.Content>\n            <Tabs.Content id='m'>\n                Discover curated meal plans to simplify your weekly cooking.\n            </Tabs.Content>\n            <Tabs.Content id='v'>\n                Watch cooking videos to learn new techniques and recipes.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-responsive-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-responsive-demo",
    "raw": "'use client'\n\nimport { IconMenu } from 'hq-icons'\nimport { Collection } from 'react-aria-components'\n\nimport { Select, Tabs, useMediaQuery } from '@/components/ui'\n\nconst tabs = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' },\n    { id: 5, title: 'Support', content: 'Contact our support team on this tab.' },\n    { id: 6, title: 'Guarantee', content: 'Our satisfaction guarantee details are here.' },\n    { id: 7, title: 'FAQ', content: 'Frequently asked questions are answered here.' }\n]\n\nexport default function TabsResponsiveDemo() {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n    return isMobile ? (\n        <Select className='sm:hidden flex' prefix={<IconMenu />} items={tabs}>\n            {(item) => <Select.Item textValue={item.title}>{item.title}</Select.Item>}\n        </Select>\n    ) : (\n        <Tabs className='sm:flex hidden' aria-label='Project Management'>\n            <Tabs.List aria-label='Dynamic tabs' items={tabs}>\n                {(item) => <Tabs.Label>{item.title}</Tabs.Label>}\n            </Tabs.List>\n            <Collection items={tabs}>\n                {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n            </Collection>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-collections-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-collections-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst tabs = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsCollectionsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List aria-label='Dynamic tabs' items={tabs}>\n                {(item) => <Tabs.Label>{item.title}</Tabs.Label>}\n            </Tabs.List>\n\n            <Collection items={tabs}>\n                {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n            </Collection>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-link-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-link-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nconst navs = [\n    { url: '/', label: 'Home' },\n    { url: '/docs/getting-started/introduction', label: 'Docs' },\n    { url: '/components', label: 'Components' },\n    { url: 'https://hq-ui.vercel.app/icons', label: 'Icons' }\n]\n\nexport default function TabsLinkDemo() {\n    return (\n        <Tabs aria-label='Navbar'>\n            <Tabs.List items={navs}>\n                {(item) => (\n                    <Tabs.Label id={item.label} href={item.url}>\n                        {item.label}\n                    </Tabs.Label>\n                )}\n            </Tabs.List>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-icons-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-icons-demo",
    "raw": "'use client'\n\nimport { IconApple, IconClock, IconScissors } from 'hq-icons'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsIconsDemo() {\n    return (\n        <Tabs aria-label='Fitness App'>\n            <Tabs.List>\n                <Tabs.Label id='w'>\n                    <IconScissors /> Workouts\n                </Tabs.Label>\n                <Tabs.Label id='n'>\n                    <IconApple /> Nutrition\n                </Tabs.Label>\n                <Tabs.Label id='t'>\n                    <IconClock /> Tracker\n                </Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='w'>\n                Find a variety of workout plans tailored to your fitness level and goals.\n            </Tabs.Content>\n            <Tabs.Content id='n'>\n                Get nutrition tips and meal plans to complement your fitness journey.\n            </Tabs.Content>\n            <Tabs.Content id='t'>\n                Track your progress with detailed statistics and analytics.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsOrientationDemo() {\n    return (\n        <Tabs orientation='vertical' aria-label='E-Learning Platform'>\n            <Tabs.List>\n                <Tabs.Label id='c'>Courses</Tabs.Label>\n                <Tabs.Label id='e'>Exams</Tabs.Label>\n                <Tabs.Label id='g'>Grades</Tabs.Label>\n                <Tabs.Label id='f'>Forums</Tabs.Label>\n                <Tabs.Label id='p'>Profile</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='c'>\n                Enroll in courses and access learning materials on various subjects.\n            </Tabs.Content>\n            <Tabs.Content id='e'>\n                Take practice exams and quizzes to test your knowledge.\n            </Tabs.Content>\n            <Tabs.Content id='g'>View your grades and track your academic progress.</Tabs.Content>\n            <Tabs.Content id='f'>\n                Participate in discussion forums with other students and instructors.\n            </Tabs.Content>\n            <Tabs.Content id='p'>\n                Update your profile and customize your learning preferences.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-disabled-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-disabled-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDisabledDemo() {\n    return (\n        <Tabs disabledKeys={['c', 'a']} aria-label='Services'>\n            <Tabs.List>\n                <Tabs.Label id='o'>Overview</Tabs.Label>\n                <Tabs.Label id='c'>Contact</Tabs.Label>\n                <Tabs.Label id='a'>About Us</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='o'>\n                Welcome to our service! Here, you’ll find a brief overview of what we offer, our\n                mission, and how we strive to provide value to our customers.\n            </Tabs.Content>\n            <Tabs.Content id='c'>\n                Get in touch with us through our contact page. We are here to help you with any\n                inquiries, support requests, or feedback you may have.\n            </Tabs.Content>\n            <Tabs.Content id='a'>\n                Learn more about our company, our history, and the team behind our success. We are\n                dedicated to delivering the best service to our customers.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/pagination/simple-pagination-demo": {
    "component": "@/components/docs/navigation/pagination/simple-pagination-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nexport default function SimplePaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.List>\n                <Pagination.Item role='first' href='#' />\n                <Pagination.Item role='previous' href='#' />\n                <Pagination.Section aria-label='Pagination Segment' className='rounded-lg border'>\n                    <Pagination.Item role='label'>1</Pagination.Item>\n                    <Pagination.Item role='separator' />\n                    <Pagination.Item className='text-muted-foreground' role='label'>\n                        10\n                    </Pagination.Item>\n                </Pagination.Section>\n                <Pagination.Item role='next' href='#' />\n                <Pagination.Item role='last' href='#' />\n            </Pagination.List>\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-dynamic-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nconst pages = Array.from({ length: 6 }, (_, i) => ({ value: i + 1 }))\nexport default function PaginationDynamicDemo() {\n    return (\n        <Pagination>\n            <Pagination.List>\n                <Pagination.Item role='first' href='#' />\n                <Pagination.Item role='previous' href='#' />\n                <Pagination.Section\n                    aria-label='Pagination Segment'\n                    className='rounded-lg lg:hidden border'\n                >\n                    <Pagination.Item role='label'>1</Pagination.Item>\n                    <Pagination.Item role='separator' />\n                    <Pagination.Item className='text-muted-foreground' role='label'>\n                        10\n                    </Pagination.Item>\n                </Pagination.Section>\n                <Pagination.Section\n                    aria-label='Pagination Segment'\n                    className='hidden lg:flex'\n                    items={pages}\n                >\n                    {(item) => (\n                        <Pagination.Item\n                            id={item.value.toString()}\n                            isCurrent={item.value === 4}\n                            href='#'\n                        >\n                            {item.value}\n                        </Pagination.Item>\n                    )}\n                </Pagination.Section>\n                <Pagination.Item role='next' href='#' />\n                <Pagination.Item role='last' href='#' />\n            </Pagination.List>\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nexport default function PaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.List>\n                <Pagination.Item role='first' href='#' />\n                <Pagination.Item role='previous' href='#' />\n                <Pagination.Item href='#'>1</Pagination.Item>\n                <Pagination.Item href='#' isCurrent>\n                    2\n                </Pagination.Item>\n                <Pagination.Item role='ellipsis' />\n                <Pagination.Item role='next' href='#' />\n                <Pagination.Item role='last' href='#' />\n            </Pagination.List>\n        </Pagination>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-current-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-current-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsCurrentDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Components</Breadcrumbs.Item>\n            <Breadcrumbs.Item\n                className={({ isCurrent }) => (isCurrent ? 'text-primary' : 'text-secondary')}\n            >\n                Navbar\n            </Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-separator-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-separator-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsSeparatorDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item separator='slash' href='#'>\n                Home\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item separator='slash' href='#'>\n                Design System\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item>Collections</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-menu-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-menu-demo",
    "raw": "'use client'\n\nimport { IconEllipsis } from 'hq-icons'\n\nimport { Breadcrumbs, Menu } from '@/components/ui'\n\nexport default function BreadcrumbsMenuDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n\n            <Breadcrumbs.Item separator>\n                <Menu>\n                    <Menu.Trigger>\n                        <IconEllipsis />\n                    </Menu.Trigger>\n                    <Menu.Content placement='bottom'>\n                        <Menu.Item href='/docs/components/layouts/sidebar'>Sidebar</Menu.Item>\n                        <Menu.Item href='/docs/components/controls/toolbar'>Toolbar</Menu.Item>\n                        <Menu.Item href='/docs/components/collections/menu'>Menu</Menu.Item>\n                        <Menu.Item href='/docs/components/layouts/container'>Container</Menu.Item>\n                        <Menu.Item href='/docs/components/surfaces/chart'>Chart</Menu.Item>\n                        <Menu.Item href='/docs/components/collections/table'>Table</Menu.Item>\n                        <Menu.Item href='/docs/components/overlays/modal'>Modal</Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Breadcrumbs.Item>\n\n            <Breadcrumbs.Item>Navbar</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsDemo() {\n    return (\n        <Breadcrumbs onAction={() => {}}>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Design System</Breadcrumbs.Item>\n            <Breadcrumbs.Item>Collections</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-collections-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-collections-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsCollectionsDemo() {\n    const [breadcrumbs, setBreadcrumbs] = React.useState([\n        { id: 1, label: 'Dashboard', href: '#' },\n        { id: 2, label: 'Reports', href: '#' },\n        { id: 3, label: '2024 Quarterly Review' }\n    ])\n\n    const navigate = (id: Key) => {\n        const i = breadcrumbs.findIndex((item) => item.id === id)\n        setBreadcrumbs(breadcrumbs.slice(0, i + 1))\n    }\n    return (\n        <Breadcrumbs items={breadcrumbs} onAction={navigate}>\n            {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n        </Breadcrumbs>\n    )\n}\n"
  },
  "collections/tree/tree-demo": {
    "component": "@/components/docs/collections/tree/tree-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeDemo() {\n    const renderItem = (item: FileNode): React.ReactNode => {\n        return (\n            <TreeItem key={item.id} textValue={item.title}>\n                <TreeItem.Content>\n                    {item.children.length > 0 && <TreeItem.Indicator />}\n                    <TreeItem.Checkbox />\n                    <TreeItem.Label>{item.title}</TreeItem.Label>\n                </TreeItem.Content>\n                {item.children.length > 0 && (\n                    <Collection items={item.children}>{renderItem}</Collection>\n                )}\n            </TreeItem>\n        )\n    }\n    return (\n        <Tree className='w-full max-w-xl' aria-label='Files' selectionMode='multiple' items={files}>\n            {files.map(renderItem)}\n        </Tree>\n    )\n}\n\ntype FileNode = {\n    id: number\n    title: string\n    children: FileNode[]\n}\n\nconst files: FileNode[] = [\n    {\n        id: 1,\n        title: 'Work',\n        children: [\n            {\n                id: 2,\n                title: 'Reports',\n                children: [\n                    {\n                        id: 3,\n                        title: '2023',\n                        children: [\n                            {\n                                id: 4,\n                                title: 'Q1 Report',\n                                children: [\n                                    { id: 5, title: 'Summary', children: [] },\n                                    { id: 6, title: 'Details', children: [] }\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                id: 7,\n                title: 'Presentations',\n                children: [\n                    {\n                        id: 8,\n                        title: '2023 Projects',\n                        children: [\n                            {\n                                id: 9,\n                                title: 'Project A',\n                                children: [\n                                    { id: 10, title: 'Draft', children: [] },\n                                    { id: 11, title: 'Final', children: [] }\n                                ]\n                            },\n                            {\n                                id: 12,\n                                title: 'Project B',\n                                children: [{ id: 13, title: 'Research', children: [] }]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        id: 14,\n        title: 'Personal',\n        children: [\n            {\n                id: 15,\n                title: 'Hobbies',\n                children: [\n                    {\n                        id: 16,\n                        title: 'Photography',\n                        children: [\n                            { id: 17, title: 'Travel', children: [] },\n                            { id: 18, title: 'Portraits', children: [] }\n                        ]\n                    },\n                    {\n                        id: 19,\n                        title: 'Cooking',\n                        children: [{ id: 20, title: 'Recipes', children: [] }]\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        id: 21,\n        title: 'Projects',\n        children: [\n            {\n                id: 22,\n                title: 'Web Development',\n                children: [\n                    {\n                        id: 23,\n                        title: 'Portfolio',\n                        children: [\n                            { id: 24, title: 'Images', children: [] },\n                            { id: 25, title: 'CSS', children: [] }\n                        ]\n                    },\n                    { id: 26, title: 'Landing Page', children: [] }\n                ]\n            },\n            {\n                id: 27,\n                title: 'Mobile Apps',\n                children: [{ id: 28, title: 'Weather App', children: [] }]\n            }\n        ]\n    },\n    {\n        id: 29,\n        title: 'Finance',\n        children: [\n            {\n                id: 30,\n                title: 'Budget',\n                children: [\n                    {\n                        id: 31,\n                        title: '2023',\n                        children: [\n                            { id: 32, title: 'January', children: [] },\n                            { id: 33, title: 'February', children: [] }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        id: 34,\n        title: 'Health',\n        children: [\n            {\n                id: 35,\n                title: 'Fitness',\n                children: [\n                    { id: 36, title: 'Workouts', children: [] },\n                    { id: 37, title: 'Nutrition', children: [] }\n                ]\n            },\n            { id: 38, title: 'Wellness', children: [] }\n        ]\n    }\n]\n"
  },
  "collections/list-box/list-box-controlled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, ListBox } from '@/components/ui'\n\nexport default function ListBoxControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([1]))\n    return (\n        <>\n            <ListBox\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={fruits}\n                aria-label='Fruits'\n                selectionMode='single'\n            >\n                {(fruit) => (\n                    <ListBox.Item id={fruit.id} textValue={fruit.name}>\n                        {fruit.name}\n                    </ListBox.Item>\n                )}\n            </ListBox>\n\n            {selected && (\n                <Description className='mt-4 block [&>strong]:font-medium [&>strong]:text-foreground'>\n                    Selected: <strong>{selected}</strong>\n                </Description>\n            )}\n        </>\n    )\n}\n\nconst fruits = [\n    {\n        id: 1,\n        name: 'Apple'\n    },\n    {\n        id: 2,\n        name: 'Banana'\n    },\n    {\n        id: 3,\n        name: 'Orange'\n    },\n    {\n        id: 4,\n        name: 'Strawberry'\n    },\n    {\n        id: 5,\n        name: 'Grapes'\n    },\n    {\n        id: 6,\n        name: 'Mango'\n    },\n    {\n        id: 7,\n        name: 'Pineapple'\n    }\n]\n"
  },
  "collections/list-box/list-box-demo": {
    "component": "@/components/docs/collections/list-box/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxDemo() {\n    return (\n        <ListBox items={rockPopBands} selectionMode='single' aria-label='Bands'>\n            {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n\nconst rockPopBands = [\n    { id: '1', name: 'Nirvana' },\n    { id: '2', name: 'Radiohead' },\n    { id: '3', name: 'Foo Fighters' },\n    { id: '4', name: 'Arctic Monkeys' },\n    { id: '5', name: 'The Strokes' }\n]\n"
  },
  "collections/list-box/list-box-multiple-demo": {
    "component": "@/components/docs/collections/list-box/list-box-multiple-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, ListBox } from '@/components/ui'\n\nexport default function ListBoxMultipleDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([3]))\n    return (\n        <>\n            <ListBox\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={fruits}\n                aria-label='Fruits'\n                selectionMode='multiple'\n            >\n                {(fruit) => (\n                    <ListBox.Item id={fruit.id} textValue={fruit.name}>\n                        {fruit.name}\n                    </ListBox.Item>\n                )}\n            </ListBox>\n\n            {[...selected].length > 0 && (\n                <Description className='mt-4 block'>\n                    Selected: {selected === 'all' ? 'All selected' : [...selected].join(', ')}\n                </Description>\n            )}\n        </>\n    )\n}\n\nconst fruits = [\n    {\n        id: 1,\n        name: 'Apple'\n    },\n    {\n        id: 2,\n        name: 'Banana'\n    },\n    {\n        id: 3,\n        name: 'Orange'\n    },\n    {\n        id: 4,\n        name: 'Strawberry'\n    },\n    {\n        id: 5,\n        name: 'Grapes'\n    },\n    {\n        id: 6,\n        name: 'Mango'\n    },\n    {\n        id: 7,\n        name: 'Pineapple'\n    }\n]\n"
  },
  "collections/list-box/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxRearrangeDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: '1', name: 'Nirvana' },\n            { id: '2', name: 'Radiohead' },\n            { id: '3', name: 'Foo Fighters' },\n            { id: '4', name: 'Arctic Monkeys' },\n            { id: '5', name: 'The Strokes' }\n        ]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys) =>\n            [...keys].map((key) => ({ 'text/plain': list.getItem(key)?.name ?? '' })),\n        onReorder(e) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n\n    return (\n        <ListBox\n            items={list.items}\n            aria-label='Bands'\n            selectionMode='multiple'\n            dragAndDropHooks={dragAndDropHooks}\n        >\n            {(item) => <ListBox.Item key={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-disabled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-disabled-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxDisabledDemo() {\n    return (\n        <>\n            <ListBox\n                disabledKeys={[2, 3, 4, 5]}\n                items={fruits}\n                aria-label='Fruits'\n                selectionMode='multiple'\n            >\n                {(fruit) => <ListBox.Item id={fruit.id}>{fruit.name}</ListBox.Item>}\n            </ListBox>\n        </>\n    )\n}\n\nconst fruits = [\n    {\n        id: 1,\n        name: 'Apple'\n    },\n    {\n        id: 2,\n        name: 'Banana'\n    },\n    {\n        id: 3,\n        name: 'Orange'\n    },\n    {\n        id: 4,\n        name: 'Strawberry'\n    },\n    {\n        id: 5,\n        name: 'Grapes'\n    },\n    {\n        id: 6,\n        name: 'Mango'\n    },\n    {\n        id: 7,\n        name: 'Pineapple'\n    }\n]\n"
  },
  "collections/list-box/list-box-item-details-demo": {
    "component": "@/components/docs/collections/list-box/list-box-item-details-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxItemDetailsDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([1]))\n    return (\n        <ListBox\n            selectedKeys={selected}\n            onSelectionChange={setSelected}\n            items={roles}\n            aria-label='Bands'\n        >\n            {(item) => (\n                <ListBox.Item id={item.id}>\n                    <ListBox.ItemDetails label={item.name} description={item.description} />\n                </ListBox.Item>\n            )}\n        </ListBox>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n"
  },
  "collections/list-box/list-box-section-demo": {
    "component": "@/components/docs/collections/list-box/list-box-section-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxSectionDemo() {\n    return (\n        <ListBox items={bands} aria-label='Bands' selectionMode='multiple'>\n            {(item) => (\n                <ListBox.Section items={item.albums} title={item.name} id={item.id}>\n                    {/*@ts-expect-error: ts ^5.5.4*/}\n                    {(album) => <ListBox.Item id={album.id}>{album.name}</ListBox.Item>}\n                </ListBox.Section>\n            )}\n        </ListBox>\n    )\n}\n\ntype Band = {\n    id: number\n    name: string\n    albums: { id: number; name: string }[]\n}\n\nconst bands: Band[] = [\n    {\n        id: 1,\n        name: 'The Beatles',\n        albums: [\n            {\n                id: 101,\n                name: 'Abbey Road'\n            },\n            {\n                id: 102,\n                name: \"Sgt. Pepper's Lonely Hearts Club Band\"\n            },\n            {\n                id: 103,\n                name: 'Revolver'\n            }\n        ]\n    },\n    {\n        id: 2,\n        name: 'Led Zeppelin',\n        albums: [\n            {\n                id: 201,\n                name: 'Led Zeppelin IV'\n            },\n            {\n                id: 202,\n                name: 'Physical Graffiti'\n            },\n            {\n                id: 203,\n                name: 'Houses of the Holy'\n            },\n            {\n                id: 204,\n                name: 'Led Zeppelin II'\n            }\n        ]\n    },\n    {\n        id: 3,\n        name: 'Pink Floyd',\n        albums: [\n            {\n                id: 301,\n                name: 'The Dark Side of the Moon'\n            },\n            {\n                id: 302,\n                name: 'The Wall'\n            },\n            {\n                id: 303,\n                name: 'Wish You Were Here'\n            },\n            {\n                id: 304,\n                name: 'Animals'\n            },\n            {\n                id: 305,\n                name: 'Meddle'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Queen',\n        albums: [\n            {\n                id: 401,\n                name: 'A Night at the Opera'\n            },\n            {\n                id: 402,\n                name: 'News of the World'\n            },\n            {\n                id: 403,\n                name: 'Sheer Heart Attack'\n            },\n            {\n                id: 404,\n                name: 'The Game'\n            },\n            {\n                id: 405,\n                name: 'Jazz'\n            },\n            {\n                id: 406,\n                name: 'Queen II'\n            }\n        ]\n    },\n    {\n        id: 5,\n        name: 'The Rolling Stones',\n        albums: [\n            {\n                id: 501,\n                name: 'Let It Bleed'\n            },\n            {\n                id: 502,\n                name: 'Sticky Fingers'\n            },\n            {\n                id: 503,\n                name: 'Exile on Main St.'\n            },\n            {\n                id: 504,\n                name: 'Beggars Banquet'\n            },\n            {\n                id: 505,\n                name: 'Some Girls'\n            },\n            {\n                id: 506,\n                name: 'Tattoo You'\n            }\n        ]\n    },\n    {\n        id: 6,\n        name: 'Nirvana',\n        albums: [\n            {\n                id: 601,\n                name: 'Nevermind'\n            },\n            {\n                id: 602,\n                name: 'In Utero'\n            },\n            {\n                id: 603,\n                name: 'Bleach'\n            }\n        ]\n    },\n    {\n        id: 7,\n        name: 'The Doors',\n        albums: [\n            {\n                id: 701,\n                name: 'The Doors'\n            },\n            {\n                id: 702,\n                name: 'L.A. Woman'\n            },\n            {\n                id: 703,\n                name: 'Strange Days'\n            },\n            {\n                id: 704,\n                name: 'Morrison Hotel'\n            }\n        ]\n    },\n    {\n        id: 8,\n        name: 'Radiohead',\n        albums: [\n            {\n                id: 801,\n                name: 'OK Computer'\n            },\n            {\n                id: 802,\n                name: 'Kid A'\n            },\n            {\n                id: 803,\n                name: 'The Bends'\n            },\n            {\n                id: 804,\n                name: 'In Rainbows'\n            }\n        ]\n    },\n    {\n        id: 9,\n        name: 'AC/DC',\n        albums: [\n            {\n                id: 901,\n                name: 'Back in Black'\n            },\n            {\n                id: 902,\n                name: 'Highway to Hell'\n            },\n            {\n                id: 903,\n                name: 'Let There Be Rock'\n            }\n        ]\n    },\n    {\n        id: 10,\n        name: 'The Who',\n        albums: [\n            {\n                id: 1001,\n                name: \"Who's Next\"\n            },\n            {\n                id: 1002,\n                name: 'Tommy'\n            },\n            {\n                id: 1003,\n                name: 'Quadrophenia'\n            },\n            {\n                id: 1004,\n                name: 'My Generation'\n            },\n            {\n                id: 1005,\n                name: 'The Who Sell Out'\n            }\n        ]\n    }\n]\n"
  },
  "collections/menu/menu-danger-demo": {
    "component": "@/components/docs/collections/menu/menu-danger-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDangerDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content className='min-w-48' placement='bottom'>\n                <Menu.Item>View</Menu.Item>\n                <Menu.Item>Edit</Menu.Item>\n                <Menu.Separator />\n                <Menu.Item isDanger>Delete</Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu/menu-with-icon-demo",
    "raw": "'use client'\n\nimport {\n    IconCommand,\n    IconGauge,\n    IconHeadphones,\n    IconLogOut,\n    IconMonitor,\n    IconMoon,\n    IconSettings,\n    IconSun\n} from 'hq-icons'\nimport { useTheme } from 'next-themes'\n\nimport { Avatar, Menu } from '@/components/ui'\n\nexport default function MenuWithIconDemo() {\n    const { resolvedTheme, setTheme } = useTheme()\n    return (\n        <Menu>\n            <Menu.Trigger>\n                <Avatar alt='dq-alhq' className='size-10' src='https://github.com/dq-alhq.png' />\n            </Menu.Trigger>\n            <Menu.Content placement='bottom' showArrow className='sm:min-w-64'>\n                <Menu.Section>\n                    <Menu.Header separator>\n                        <span className='block'>DQ Al-Haqqi</span>\n                        <span className='font-normal text-muted-foreground'>@dq-alhq</span>\n                    </Menu.Header>\n                </Menu.Section>\n\n                <Menu.Item href='#dashboard'>\n                    <IconGauge />\n                    Dashboard\n                </Menu.Item>\n                <Menu.Item href='#settings'>\n                    <IconSettings />\n                    Settings\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item>\n                    <IconCommand />\n                    Command Menu\n                </Menu.Item>\n                <Menu.Submenu>\n                    <Menu.Item>\n                        {resolvedTheme === 'light' ? (\n                            <IconSun />\n                        ) : resolvedTheme === 'dark' ? (\n                            <IconMoon />\n                        ) : (\n                            <IconMonitor />\n                        )}\n                        Switch theme\n                    </Menu.Item>\n                    <Menu.Content>\n                        <Menu.Item onAction={() => setTheme('system')}>\n                            <IconMonitor /> System\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme('dark')}>\n                            <IconMoon /> Dark\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme('light')}>\n                            <IconSun /> Light\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu.Submenu>\n                <Menu.Separator />\n                <Menu.Item href='#contact-s'>\n                    <IconHeadphones />\n                    Contact Support\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item href='#logout'>\n                    <IconLogOut />\n                    Log out\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/single-menu-demo": {
    "component": "@/components/docs/collections/menu/single-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Button, Menu } from '@/components/ui'\nimport type { Placement } from '@react-types/overlays'\n\nexport const placements = [\n    'bottom',\n    'bottom left',\n    'bottom right',\n    'bottom start',\n    'bottom end',\n    'top',\n    'top left',\n    'top right',\n    'top start',\n    'top end',\n    'left',\n    'left top',\n    'left bottom',\n    'start',\n    'start top',\n    'start bottom',\n    'right',\n    'right top',\n    'right bottom',\n    'end',\n    'end top',\n    'end bottom'\n].map((item, i) => ({ id: i, name: item }))\n\nexport default function SingleMenuDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set(['bottom']))\n    return (\n        <Menu>\n            <Button variant='outline'>Placement</Button>\n            <Menu.Content\n                placement={Array.from(selected)[0] as Placement}\n                selectionMode='single'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={placements}\n                className='max-h-72 min-w-52'\n            >\n                {(item) => <Menu.Radio id={item.name}>{item.name}</Menu.Radio>}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-disabled-demo": {
    "component": "@/components/docs/collections/menu/menu-disabled-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDisabledDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content className='min-w-48' placement='bottom'>\n                <Menu.Item id='view'>View</Menu.Item>\n                <Menu.Item id='edit'>Edit</Menu.Item>\n                <Menu.Item id='gsu' isDisabled>\n                    Generate Short URL\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-collection-demo": {
    "component": "@/components/docs/collections/menu/menu-collection-demo",
    "raw": "'use client'\n\nimport { Button, Menu } from '@/components/ui'\n\nexport default function MenuCollectionDemo() {\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content className='min-w-64' placement='bottom' items={categories}>\n                {(item) => <Menu.Item id={item.slug}>{item.name}</Menu.Item>}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst categories = [\n    {\n        name: 'Technology',\n        slug: 'technology'\n    },\n    {\n        name: 'Health',\n        slug: 'health'\n    },\n    {\n        name: 'Business',\n        slug: 'business'\n    },\n    {\n        name: 'Travel',\n        slug: 'travel'\n    },\n    {\n        name: 'Education',\n        slug: 'education'\n    },\n    {\n        name: 'Entertainment',\n        slug: 'entertainment'\n    },\n    {\n        name: 'Sports',\n        slug: 'sports'\n    },\n    {\n        name: 'Fashion',\n        slug: 'fashion'\n    },\n    {\n        name: 'Food',\n        slug: 'food'\n    },\n    {\n        name: 'Science',\n        slug: 'science'\n    }\n]\n"
  },
  "collections/menu/menu-respect-screen-demo": {
    "component": "@/components/docs/collections/menu/menu-respect-screen-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Menu } from '@/components/ui'\n\nexport default function MenuRespectScreenDemo() {\n    return (\n        <Menu respectScreen={false}>\n            <Menu.Trigger className={buttonVariants({ variant: 'outline' })}>Open</Menu.Trigger>\n            <Menu.Content placement='bottom' className='min-w-48'>\n                <Menu.Item>Dashboard</Menu.Item>\n                <Menu.Item>Reports</Menu.Item>\n                <Menu.Item>Settings</Menu.Item>\n                <Menu.Item>Security</Menu.Item>\n                <Menu.Item>Privacy</Menu.Item>\n                <Menu.Item>Help</Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-basic-demo": {
    "component": "@/components/docs/collections/menu/menu-basic-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuBasicDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content placement='bottom'>\n                <Menu.Item>Inbox</Menu.Item>\n                <Menu.Item>Sent</Menu.Item>\n                <Menu.Item>New Message</Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-sub-demo": {
    "component": "@/components/docs/collections/menu/menu-sub-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Menu } from '@/components/ui'\n\nexport default function MenuSubDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger className={buttonVariants({ variant: 'outline' })}>Open</Menu.Trigger>\n            <Menu.Content placement='bottom' className='sm:min-w-48'>\n                <Menu.Item>Dashboard</Menu.Item>\n                <Menu.Item>Reports</Menu.Item>\n                <Menu.Separator />\n                <Menu.Submenu>\n                    <Menu.Item>Settings</Menu.Item>\n                    <Menu.Content>\n                        <Menu.Item>General</Menu.Item>\n                        <Menu.Item>Security</Menu.Item>\n                        <Menu.Item>Privacy</Menu.Item>\n                        <Menu.Item>Data Sharing</Menu.Item>\n                    </Menu.Content>\n                </Menu.Submenu>\n                <Menu.Item>Help</Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-section-demo": {
    "component": "@/components/docs/collections/menu/menu-section-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSectionDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content className='min-w-64' items={cities} placement='bottom'>\n                {(city) => (\n                    <Menu.Section title={city.name} items={city.landmarks}>\n                        {(landmark) => (\n                            <Menu.Item textValue={landmark.name}>{landmark.name}</Menu.Item>\n                        )}\n                    </Menu.Section>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst cities = [\n    {\n        id: 1,\n        name: 'New York City',\n        landmarks: [\n            {\n                id: 101,\n                name: 'Statue of Liberty'\n            },\n            {\n                id: 102,\n                name: 'Central Park'\n            },\n            {\n                id: 103,\n                name: 'Empire State Building'\n            },\n            {\n                id: 104,\n                name: 'Times Square'\n            }\n        ]\n    },\n    {\n        id: 2,\n        name: 'Paris',\n        landmarks: [\n            {\n                id: 201,\n                name: 'Eiffel Tower'\n            },\n            {\n                id: 202,\n                name: 'Louvre Museum'\n            },\n            {\n                id: 203,\n                name: 'Notre-Dame Cathedral'\n            },\n            {\n                id: 204,\n                name: 'Champs-Élysées'\n            }\n        ]\n    },\n    {\n        id: 3,\n        name: 'Tokyo',\n        landmarks: [\n            {\n                id: 301,\n                name: 'Tokyo Tower'\n            },\n            {\n                id: 302,\n                name: 'Shibuya Crossing'\n            },\n            {\n                id: 303,\n                name: 'Senso-ji Temple'\n            },\n            {\n                id: 304,\n                name: 'Meiji Shrine'\n            },\n            {\n                id: 305,\n                name: 'Tokyo Skytree'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'London',\n        landmarks: [\n            {\n                id: 401,\n                name: 'Big Ben'\n            },\n            {\n                id: 402,\n                name: 'Tower of London'\n            },\n            {\n                id: 403,\n                name: 'Buckingham Palace'\n            },\n            {\n                id: 404,\n                name: 'London Eye'\n            },\n            {\n                id: 405,\n                name: 'Westminster Abbey'\n            }\n        ]\n    },\n    {\n        id: 5,\n        name: 'Rome',\n        landmarks: [\n            {\n                id: 501,\n                name: 'Colosseum'\n            },\n            {\n                id: 502,\n                name: 'Vatican City'\n            },\n            {\n                id: 503,\n                name: 'Trevi Fountain'\n            },\n            {\n                id: 504,\n                name: 'Pantheon'\n            }\n        ]\n    },\n    {\n        id: 6,\n        name: 'Sydney',\n        landmarks: [\n            {\n                id: 601,\n                name: 'Sydney Opera House'\n            },\n            {\n                id: 602,\n                name: 'Sydney Harbour Bridge'\n            },\n            {\n                id: 603,\n                name: 'Bondi Beach'\n            },\n            {\n                id: 604,\n                name: 'Royal Botanic Garden'\n            }\n        ]\n    },\n    {\n        id: 7,\n        name: 'Dubai',\n        landmarks: [\n            {\n                id: 701,\n                name: 'Burj Khalifa'\n            },\n            {\n                id: 702,\n                name: 'Palm Jumeirah'\n            },\n            {\n                id: 703,\n                name: 'Dubai Mall'\n            },\n            {\n                id: 704,\n                name: 'Burj Al Arab'\n            }\n        ]\n    },\n    {\n        id: 8,\n        name: 'Moscow',\n        landmarks: [\n            {\n                id: 801,\n                name: 'Red Square'\n            },\n            {\n                id: 802,\n                name: 'Kremlin'\n            },\n            {\n                id: 803,\n                name: \"St. Basil's Cathedral\"\n            },\n            {\n                id: 804,\n                name: 'Bolshoi Theatre'\n            }\n        ]\n    },\n    {\n        id: 9,\n        name: 'Cairo',\n        landmarks: [\n            {\n                id: 901,\n                name: 'Pyramids of Giza'\n            },\n            {\n                id: 902,\n                name: 'Great Sphinx of Giza'\n            },\n            {\n                id: 903,\n                name: 'Egyptian Museum'\n            }\n        ]\n    },\n    {\n        id: 10,\n        name: 'Rio de Janeiro',\n        landmarks: [\n            {\n                id: 1001,\n                name: 'Christ the Redeemer'\n            },\n            {\n                id: 1002,\n                name: 'Sugarloaf Mountain'\n            },\n            {\n                id: 1003,\n                name: 'Copacabana Beach'\n            },\n            {\n                id: 1004,\n                name: 'Maracanã Stadium'\n            }\n        ]\n    }\n]\n"
  },
  "collections/menu/menu-with-arrow-demo": {
    "component": "@/components/docs/collections/menu/menu-with-arrow-demo",
    "raw": "'use client'\n\nimport { IconHash, IconHeadphones, IconLogOut, IconPlus, IconSettings } from 'hq-icons'\n\nimport { Avatar, Menu } from '@/components/ui'\n\nexport default function MenuWithArrowDemo() {\n    return (\n        <>\n            <Menu>\n                <Menu.Trigger aria-label='Open Menu'>\n                    <Avatar className='size-10' src='https://github.com/dq-alhq.png' />\n                </Menu.Trigger>\n                <Menu.Content placement='bottom' showArrow className='min-w-64'>\n                    <Menu.Header separator>\n                        <span className='block'>DQ Al-Haqqi</span>\n                        <span className='font-normal text-muted-foreground'>@dq-alhq</span>\n                    </Menu.Header>\n                    <Menu.Item>\n                        <IconSettings />\n                        Pengaturan\n                    </Menu.Item>\n                    <Menu.Item href='#'>\n                        <IconPlus />\n                        Create Team\n                    </Menu.Item>\n                    <Menu.Item href='#'>\n                        <IconHash />\n                        Command Menu\n                        <Menu.Keyboard keys='⌘K' />\n                    </Menu.Item>\n                    <Menu.Separator />\n                    <Menu.Item href='#'>\n                        <IconHeadphones />\n                        Contact Support\n                    </Menu.Item>\n                    <Menu.Separator />\n                    <Menu.Item>\n                        <IconLogOut />\n                        Log out\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </>\n    )\n}\n"
  },
  "collections/menu/menu-item-details-demo": {
    "component": "@/components/docs/collections/menu/menu-item-details-demo",
    "raw": "'use client'\n\nimport { Button, Menu } from '@/components/ui'\n\nexport default function MenuItemDetailsDemo() {\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content placement='bottom' items={roles}>\n                {(item) => (\n                    <Menu.Item id={item.id} textValue={item.name}>\n                        <Menu.ItemDetails label={item.name} description={item.description} />\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n"
  },
  "collections/menu/multiple-menu-demo": {
    "component": "@/components/docs/collections/menu/multiple-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Menu } from '@/components/ui'\nimport { type Selection } from '@react-types/shared'\n\nexport default function MultipleMenuDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set(['autoPlay']))\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content\n                placement='bottom'\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => (\n                    <Menu.Checkbox id={item.slug} textValue={item.name}>\n                        {item.name}\n                    </Menu.Checkbox>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst items = [\n    {\n        name: 'Auto-Play Videos',\n        slug: 'autoPlay'\n    },\n    {\n        name: 'High-Quality Streaming',\n        slug: 'highQuality'\n    },\n    {\n        name: 'Exclusive Releases',\n        slug: 'exclusiveContent'\n    },\n    {\n        name: 'Default Subtitles',\n        slug: 'subtitles'\n    },\n    {\n        name: 'Personalized Recommendations',\n        slug: 'recommendations'\n    },\n    {\n        name: 'Background Play',\n        slug: 'backgroundPlay'\n    },\n    {\n        name: 'Allow Downloads',\n        slug: 'download'\n    }\n]\n"
  },
  "collections/collapsible/collapsible-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDemo() {\n    return (\n        <Collapsible>\n            <Collapsible.Trigger>What are the benefits of regular exercise?</Collapsible.Trigger>\n            <Collapsible.Content>\n                <p>\n                    Regular exercise can improve your overall health, boost your mood, increase\n                    energy levels, and help you maintain a healthy weight.\n                </p>\n            </Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-disabled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-disabled-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDisabledDemo() {\n    return (\n        <Collapsible isDisabled>\n            <Collapsible.Trigger>What is your return policy?</Collapsible.Trigger>\n            <Collapsible.Content>\n                <p>\n                    You can return any item within 30 days of purchase, provided it is in its\n                    original condition with proof of purchase.\n                </p>\n            </Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-controlled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleControlledDemo() {\n    const [expanded, setExpanded] = React.useState(false)\n\n    return (\n        <div>\n            The Collapsible is{' '}\n            <strong className='text-info'>{expanded ? 'expanded' : 'collapsed'}</strong>.\n            <Collapsible isExpanded={expanded} onExpandedChange={setExpanded}>\n                <Collapsible.Trigger>What is your return policy?</Collapsible.Trigger>\n                <Collapsible.Content>\n                    <p>\n                        You can return any item within 30 days of purchase, provided it is in its\n                        original condition with proof of purchase.\n                    </p>\n                </Collapsible.Content>\n            </Collapsible>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-multiple-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-multiple-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListMultipleDemo() {\n    return (\n        <div>\n            <GridList\n                items={items}\n                aria-label='Select items'\n                selectionMode='multiple'\n                className='min-w-64'\n            >\n                {(item) => <GridList.Item>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n"
  },
  "collections/grid-list/grid-list-render-empty-state-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-render-empty-state-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListRenderEmptyStateDemo() {\n    return (\n        <GridList\n            items={[]}\n            aria-label='Select items'\n            selectionMode='multiple'\n            className='min-w-64'\n            renderEmptyState={() => <GridList.EmptyState>No items selected</GridList.EmptyState>}\n        />\n    )\n}\n"
  },
  "collections/grid-list/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-disabled-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDisabledDemo() {\n    return (\n        <GridList\n            items={items}\n            aria-label='Select your favorite bands'\n            selectionMode='multiple'\n            className='min-w-64'\n        >\n            {(item) => (\n                <GridList.Item isDisabled={[2, 5].includes(Number(item.id))} id={item.id}>\n                    {item.name}\n                </GridList.Item>\n            )}\n        </GridList>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n"
  },
  "collections/grid-list/grid-list-drag-between-item-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-drag-between-item-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport GridListDragDemo from '@/components/docs/collections/grid-list/grid-list-drag-demo'\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDragBetweenItemDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: 6, name: 'The Byrds' },\n            { id: 7, name: 'The Yardbirds' }\n        ]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        async onInsert(e) {\n            const items = await Promise.all(\n                e.items.map(async (item) => {\n                    const name = item.kind === 'text' ? await item.getText('text/plain') : item.name\n                    return { id: Math.random(), name }\n                })\n            )\n\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...items)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...items)\n            }\n        }\n    })\n\n    return (\n        <div className='grid gap-4 lg:grid-cols-3'>\n            <GridListDragDemo />\n            <GridList\n                aria-label='Droppable list'\n                items={list.items}\n                dragAndDropHooks={dragAndDropHooks}\n            >\n                {(item) => <GridList.Item>{item.name}</GridList.Item>}\n            </GridList>\n            <OtherEmptyList />\n        </div>\n    )\n}\n\nexport function OtherEmptyList() {\n    const list = useListData({\n        initialItems: [{ id: 7, name: 'The Who' }]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        async onInsert(e) {\n            const items = await Promise.all(\n                e.items.map(async (item) => {\n                    const name = item.kind === 'text' ? await item.getText('text/plain') : item.name\n                    return { id: Math.random(), name }\n                })\n            )\n\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...items)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...items)\n            }\n        }\n    })\n\n    return (\n        <GridList\n            aria-label='Droppable list'\n            items={list.items}\n            dragAndDropHooks={dragAndDropHooks}\n            renderEmptyState={() => <GridList.EmptyState>No bands selected</GridList.EmptyState>}\n        >\n            {(item) => <GridList.Item>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-drag-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-drag-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDragDemo() {\n    const list = useListData({\n        initialItems: items\n    })\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys) =>\n            [...keys].map((key) => ({ 'text/plain': list.getItem(key)?.name ?? '' })),\n        onReorder(e) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n\n    return (\n        <>\n            <GridList\n                items={list.items}\n                aria-label='Droppable list'\n                selectionMode='multiple'\n                dragAndDropHooks={dragAndDropHooks}\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </>\n    )\n}\n\nconst items = [\n    { id: 1, name: 'The Beatles' },\n    { id: 2, name: 'Led Zeppelin' },\n    { id: 3, name: 'Pink Floyd' },\n    { id: 4, name: 'Queen' },\n    { id: 5, name: 'The Rolling Stones' },\n    { id: 6, name: 'The Beach Boys' },\n    { id: 7, name: 'The Kinks' },\n    { id: 8, name: 'The Who' }\n]\n"
  },
  "collections/grid-list/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDemo() {\n    return (\n        <GridList\n            selectionMode='single'\n            items={items}\n            aria-label='Select your favorite bands'\n            className='min-w-64'\n        >\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' },\n    { id: '6', name: 'The Who' }\n]\n"
  },
  "collections/grid-list/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, GridList } from '@/components/ui'\n\nexport default function GridListControlledDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]))\n    return (\n        <div>\n            <GridList\n                selectedKeys={selectedKeys}\n                onSelectionChange={setSelectedKeys}\n                items={items}\n                aria-label='Select items'\n                selectionMode='multiple'\n                className='min-w-64'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n            </Description>\n        </div>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n"
  },
  "collections/table/table-bulk-demo": {
    "component": "@/components/docs/collections/table/table-bulk-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Card, Description, Table } from '@/components/ui'\n\nexport default function TableBulkDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set())\n    return (\n        <>\n            <Card>\n                <Table\n                    aria-label='Books'\n                    selectionMode='multiple'\n                    selectedKeys={selectedKeys}\n                    onSelectionChange={setSelectedKeys}\n                >\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column isRowHeader>Title</Table.Column>\n                        <Table.Column>Author</Table.Column>\n                        <Table.Column>Genre</Table.Column>\n                        <Table.Column>Published</Table.Column>\n                    </Table.Header>\n                    <Table.Body items={books}>\n                        {(item) => (\n                            <Table.Row>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.title}</Table.Cell>\n                                <Table.Cell>{item.author}</Table.Cell>\n                                <Table.Cell>{item.genre}</Table.Cell>\n                                <Table.Cell>{item.publishedYear}</Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card>\n            <Description className='block mt-2 [&>strong]:text-foreground text-muted-foreground'>\n                {Array.from(selectedKeys).length > 0 ? (\n                    <>\n                        You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n                    </>\n                ) : (\n                    'You have not selected anything.'\n                )}\n            </Description>\n        </>\n    )\n}\n\nexport const books = [\n    {\n        id: '1',\n        title: 'To Kill a Mockingbird',\n        author: 'Harper Lee',\n        genre: 'Fiction',\n        publishedYear: 1960\n    },\n    { id: '2', title: '1984', author: 'George Orwell', genre: 'Dystopian', publishedYear: 1949 },\n    {\n        id: '3',\n        title: 'The Great Gatsby',\n        author: 'F. Scott Fitzgerald',\n        genre: 'Fiction',\n        publishedYear: 1925\n    },\n    {\n        id: '4',\n        title: 'The Catcher in the Rye',\n        author: 'J.D. Salinger',\n        genre: 'Fiction',\n        publishedYear: 1951\n    },\n    {\n        id: '5',\n        title: 'Pride and Prejudice',\n        author: 'Jane Austen',\n        genre: 'Romance',\n        publishedYear: 1813\n    },\n    {\n        id: '6',\n        title: 'The Lord of the Rings',\n        author: 'J.R.R. Tolkien',\n        genre: 'Fantasy',\n        publishedYear: 1954\n    },\n    {\n        id: '7',\n        title: \"Harry Potter and the Sorcerer's Stone\",\n        author: 'J.K. Rowling',\n        genre: 'Fantasy',\n        publishedYear: 1997\n    }\n]\n"
  },
  "collections/table/table-sorting-demo": {
    "component": "@/components/docs/collections/table/table-sorting-demo",
    "raw": "'use client'\n\nimport { IconLoader } from 'hq-icons'\n\nimport { Card, Table } from '@/components/ui'\nimport { useAsyncList } from '@react-stately/data'\n\ninterface Character {\n    title: string\n    director: number\n    producer: number\n    release_date: number\n}\n\nexport default function TableSortingDemo() {\n    const list = useAsyncList<Character>({\n        async load({ signal }) {\n            const res = await fetch(`https://swapi.py4e.com/api/films`, {\n                signal\n            })\n            const json = await res.json()\n            return {\n                items: json.results\n            }\n        },\n        async sort({ items, sortDescriptor }) {\n            return {\n                items: items.sort((a, b) => {\n                    // @ts-expect-error unknown-type\n                    const first = a[sortDescriptor.column]\n                    // @ts-expect-error unknown-type\n                    const second = b[sortDescriptor.column]\n                    let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1\n                    if (sortDescriptor.direction === 'descending') {\n                        cmp *= -1\n                    }\n                    return cmp\n                })\n            }\n        }\n    })\n    return (\n        <Card>\n            <Table\n                aria-label='Movies'\n                selectionMode='multiple'\n                sortDescriptor={list.sortDescriptor}\n                onSortChange={list.sort}\n            >\n                <Table.Header>\n                    <Table.Column id='title' isRowHeader>\n                        Title\n                    </Table.Column>\n                    <Table.Column id='director' allowsSorting>\n                        Director\n                    </Table.Column>\n                    <Table.Column id='producer'>Producer</Table.Column>\n                    <Table.Column id='release_date' allowsSorting>\n                        Release Date\n                    </Table.Column>\n                </Table.Header>\n                <Table.Body\n                    items={list.items}\n                    renderEmptyState={() => (\n                        <div className='grid place-content-center p-10'>\n                            <IconLoader className='animate-spin' />\n                        </div>\n                    )}\n                >\n                    {(item) => (\n                        <Table.Row id={item.title}>\n                            <Table.Cell>{item.title}</Table.Cell>\n                            <Table.Cell>{item.director}</Table.Cell>\n                            <Table.Cell>{item.producer}</Table.Cell>\n                            <Table.Cell>{item.release_date}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n"
  },
  "collections/table/table-demo": {
    "component": "@/components/docs/collections/table/table-demo",
    "raw": "'use client'\n\nimport { IconEllipsisVertical } from 'hq-icons'\n\nimport { Card, Menu, Table } from '@/components/ui'\nimport { NumberFormatter } from '@internationalized/number'\n\nexport default function TableDemo() {\n    const formatter = new NumberFormatter('en-US', { style: 'currency', currency: 'USD' })\n\n    const priceFormat = (price: number) => formatter.format(price)\n    return (\n        <Card>\n            <Table aria-label='Products'>\n                <Table.Header>\n                    <Table.Column className='w-0'>#</Table.Column>\n                    <Table.Column isRowHeader>Name</Table.Column>\n                    <Table.Column>Category</Table.Column>\n                    <Table.Column>Price</Table.Column>\n                    <Table.Column>Stock</Table.Column>\n                    <Table.Column />\n                </Table.Header>\n                <Table.Body items={products}>\n                    {(item) => (\n                        <Table.Row id={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.category}</Table.Cell>\n                            <Table.Cell>{priceFormat(item.price)}</Table.Cell>\n                            <Table.Cell>{item.stock}</Table.Cell>\n                            <Table.Cell>\n                                <div className='flex justify-end'>\n                                    <Menu>\n                                        <Menu.Trigger>\n                                            <IconEllipsisVertical />\n                                        </Menu.Trigger>\n                                        <Menu.Content\n                                            aria-label='Actions'\n                                            showArrow\n                                            placement='left'\n                                        >\n                                            <Menu.Item>View</Menu.Item>\n                                            <Menu.Item>Edit</Menu.Item>\n                                            <Menu.Separator />\n                                            <Menu.Item isDanger>Delete</Menu.Item>\n                                        </Menu.Content>\n                                    </Menu>\n                                </div>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n\nexport const products = [\n    { id: '1', name: 'iPhone 13', category: 'Electronics', price: 799, brand: 'Apple', stock: 150 },\n    {\n        id: '2',\n        name: 'Galaxy S21',\n        category: 'Electronics',\n        price: 699,\n        brand: 'Samsung',\n        stock: 200\n    },\n    { id: '3', name: 'MacBook Pro', category: 'Computers', price: 1299, brand: 'Apple', stock: 80 },\n    { id: '4', name: 'Dell XPS 13', category: 'Computers', price: 999, brand: 'Dell', stock: 50 },\n    {\n        id: '5',\n        name: 'Sony WH-1000XM4',\n        category: 'Headphones',\n        price: 349,\n        brand: 'Sony',\n        stock: 120\n    },\n    {\n        id: '6',\n        name: 'AirPods Pro',\n        category: 'Headphones',\n        price: 249,\n        brand: 'Apple',\n        stock: 180\n    },\n    {\n        id: '7',\n        name: 'Fitbit Charge 5',\n        category: 'Wearables',\n        price: 179,\n        brand: 'Fitbit',\n        stock: 75\n    }\n]\n"
  },
  "collections/table/table-drag-demo": {
    "component": "@/components/docs/collections/table/table-drag-demo",
    "raw": "'use client'\n\nimport { IconStar } from 'hq-icons'\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport { Card, Table } from '@/components/ui'\n\nexport default function TableDragDemo() {\n    const list = useListData({\n        initialItems: movies\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys) =>\n            [...keys].map((key) => ({\n                'text/plain': list.getItem(key)?.name ?? ''\n            })),\n        onReorder(e) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n    return (\n        <Card>\n            <Table aria-label='Movies' selectionMode='multiple' dragAndDropHooks={dragAndDropHooks}>\n                <Table.Header>\n                    <Table.Column>#</Table.Column>\n                    <Table.Column isRowHeader>Name</Table.Column>\n                    <Table.Column>Genre</Table.Column>\n                    <Table.Column>Release</Table.Column>\n                    <Table.Column>Rating</Table.Column>\n                </Table.Header>\n                <Table.Body items={list.items}>\n                    {(item) => (\n                        <Table.Row>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.genre}</Table.Cell>\n                            <Table.Cell>{item.releaseYear}</Table.Cell>\n                            <Table.Cell>\n                                <div className='flex items-center gap-x-2'>\n                                    <IconStar className='text-warning size-3.5' />{' '}\n                                    <span>{item.rating}</span>\n                                </div>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n\nconst movies = [\n    {\n        id: '1',\n        name: 'The Matrix',\n        genre: 'Sci-Fi',\n        releaseYear: 1999,\n        director: 'Wachowskis',\n        rating: 8.7\n    },\n    {\n        id: '2',\n        name: 'Inception',\n        genre: 'Sci-Fi',\n        releaseYear: 2010,\n        director: 'Christopher Nolan',\n        rating: 8.8\n    },\n    {\n        id: '3',\n        name: 'The Godfather',\n        genre: 'Crime',\n        releaseYear: 1972,\n        director: 'Francis Ford Coppola',\n        rating: 9.2\n    },\n    {\n        id: '4',\n        name: 'Pulp Fiction',\n        genre: 'Crime',\n        releaseYear: 1994,\n        director: 'Quentin Tarantino',\n        rating: 8.9\n    },\n    {\n        id: '5',\n        name: 'The Dark Knight',\n        genre: 'Action',\n        releaseYear: 2008,\n        director: 'Christopher Nolan',\n        rating: 9.0\n    },\n    {\n        id: '6',\n        name: 'Fight Club',\n        genre: 'Drama',\n        releaseYear: 1999,\n        director: 'David Fincher',\n        rating: 8.8\n    },\n    {\n        id: '7',\n        name: 'Forrest Gump',\n        genre: 'Drama',\n        releaseYear: 1994,\n        director: 'Robert Zemeckis',\n        rating: 8.8\n    }\n]\n"
  },
  "collections/table/table-resize-demo": {
    "component": "@/components/docs/collections/table/table-resize-demo",
    "raw": "'use client'\n\nimport { Card, Table } from '@/components/ui'\n\nexport default function TableResizeDemo() {\n    return (\n        <Card>\n            <Table allowResize aria-label='Vocalists'>\n                <Table.Header>\n                    <Table.Column className='max-w-0'>ID</Table.Column>\n                    <Table.Column isRowHeader isResizable>\n                        Name\n                    </Table.Column>\n                    <Table.Column isResizable>Email</Table.Column>\n                    <Table.Column>Age</Table.Column>\n                    <Table.Column>Role</Table.Column>\n                    <Table.Column isResizable>Band</Table.Column>\n                    <Table.Column>Status</Table.Column>\n                </Table.Header>\n                <Table.Body items={items}>\n                    {(item) => (\n                        <Table.Row id={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.email}</Table.Cell>\n                            <Table.Cell>{item.age}</Table.Cell>\n                            <Table.Cell>{item.role}</Table.Cell>\n                            <Table.Cell>{item.band}</Table.Cell>\n                            <Table.Cell>{item.status}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        name: 'Randy Blythe',\n        email: 'randy.blythe@example.com',\n        age: 52,\n        role: 'Vocalist',\n        band: 'Lamb of God',\n        status: 'Active'\n    },\n    {\n        id: 2,\n        name: 'Phil Anselmo',\n        email: 'phil.anselmo@example.com',\n        age: 55,\n        role: 'Vocalist',\n        band: 'Pantera',\n        status: 'Active'\n    },\n    {\n        id: 3,\n        name: 'George Fisher',\n        email: 'george.fisher@example.com',\n        age: 53,\n        role: 'Vocalist',\n        band: 'Cannibal Corpse',\n        status: 'Active'\n    },\n    {\n        id: 4,\n        name: 'Corey Taylor',\n        email: 'corey.taylor@example.com',\n        age: 50,\n        role: 'Vocalist',\n        band: 'Slipknot',\n        status: 'Active'\n    },\n    {\n        id: 5,\n        name: 'Trevor Strnad',\n        email: 'trevor.strnad@example.com',\n        age: 41,\n        role: 'Vocalist',\n        band: 'The Black Dahlia Murder',\n        status: 'Inactive'\n    },\n    {\n        id: 6,\n        name: 'Chuck Schuldiner',\n        email: 'chuck.schuldiner@example.com',\n        age: 34,\n        role: 'Vocalist',\n        band: 'Death',\n        status: 'Deceased'\n    },\n    {\n        id: 7,\n        name: 'Mitch Lucker',\n        email: 'mitch.lucker@example.com',\n        age: 28,\n        role: 'Vocalist',\n        band: 'Suicide Silence',\n        status: 'Deceased'\n    }\n]\n"
  },
  "collections/choicebox/choicebox-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxDemo() {\n    return (\n        <Choicebox aria-label='Select items' selectionMode='multiple'>\n            <Choicebox.Item title='Basic' description='Just the essentials to get started.' />\n            <Choicebox.Item\n                title='Standard'\n                description='A step up with more features and support.'\n            />\n            <Choicebox.Item title='Premium' description='Advanced options for growing needs.' />\n            <Choicebox.Item\n                title='Deluxe'\n                description='Top-tier features for maximum performance.'\n            />\n            <Choicebox.Item\n                title='Ultimate'\n                description='All-inclusive plan with every feature available.'\n            />\n            <Choicebox.Item\n                title='Enterprise'\n                description='Custom solutions for large-scale operations.'\n            />\n        </Choicebox>\n    )\n}\n"
  },
  "collections/choicebox/choicebox-controlled-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Choicebox, Description } from '@/components/ui'\n\nexport default function ChoiceboxControlledDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([packages[0].id]))\n    return (\n        <>\n            <Choicebox\n                aria-label='Select packages'\n                selectionMode='multiple'\n                selectedKeys={selectedKeys}\n                onSelectionChange={setSelectedKeys}\n                items={packages}\n            >\n                {(item) => <Choicebox.Item {...item} />}\n            </Choicebox>\n\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n            </Description>\n        </>\n    )\n}\n\nconst packages = [\n    {\n        id: 'sm',\n        title: 'Small',\n        description: 'Perfect for beginners. Basic resources for light projects.'\n    },\n    {\n        id: 'md',\n        title: 'Medium',\n        description: 'Great for growing sites. More power and storage.'\n    },\n    {\n        id: 'lg',\n        title: 'Large',\n        description: 'Ideal for busy sites. Lots of resources and support.'\n    },\n    {\n        id: 'xl',\n        title: 'Extra Large',\n        description: 'Max power for demanding applications. Top-tier performance.'\n    }\n]\n"
  },
  "collections/choicebox/choicebox-single-selection-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-single-selection-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxSingleSelectionDemo() {\n    return (\n        <Choicebox aria-label='Select packages' selectionMode='single' items={packages}>\n            {(item) => <Choicebox.Item {...item} />}\n        </Choicebox>\n    )\n}\n\nconst packages = [\n    {\n        id: 'sm',\n        title: 'Small',\n        description: 'Perfect for beginners. Basic resources for light projects.'\n    },\n    {\n        id: 'md',\n        title: 'Medium',\n        description: 'Great for growing sites. More power and storage.'\n    },\n    {\n        id: 'lg',\n        title: 'Large',\n        description: 'Ideal for busy sites. Lots of resources and support.'\n    },\n    {\n        id: 'xl',\n        title: 'Extra Large',\n        description: 'Max power for demanding applications. Top-tier performance.'\n    }\n]\n"
  },
  "collections/choicebox/choicebox-disabled-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-disabled-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxDisabledDemo() {\n    return (\n        <div className='p-1'>\n            <Choicebox aria-label='Select packages' selectionMode='multiple' items={packages}>\n                {(item) => <Choicebox.Item isDisabled={['sm', 'lg'].includes(item.id)} {...item} />}\n            </Choicebox>\n        </div>\n    )\n}\n\nconst packages = [\n    {\n        id: 'sm',\n        title: 'Small',\n        description: 'Perfect for beginners. Basic resources for light projects.'\n    },\n    {\n        id: 'md',\n        title: 'Medium',\n        description: 'Great for growing sites. More power and storage.'\n    },\n    {\n        id: 'lg',\n        title: 'Large',\n        description: 'Ideal for busy sites. Lots of resources and support.'\n    },\n    {\n        id: 'xl',\n        title: 'Extra Large',\n        description: 'Max power for demanding applications. Top-tier performance.'\n    }\n]\n"
  },
  "collections/choicebox/choicebox-columns-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-columns-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxColumnsDemo() {\n    return (\n        <div className='p-1'>\n            <Choicebox\n                aria-label='Select prices'\n                gap={2}\n                columns={3}\n                selectionMode='multiple'\n                items={prices}\n            >\n                {(item) => <Choicebox.Item {...item} />}\n            </Choicebox>\n        </div>\n    )\n}\n\nconst prices = [\n    { id: 1, title: 'Basic', description: 'Essentials, get started' },\n    { id: 2, title: 'Standard', description: 'More features, support' },\n    { id: 3, title: 'Premium', description: 'Advanced, growing needs' },\n    { id: 4, title: 'Deluxe', description: 'Top-tier, maximum performance' },\n    { id: 5, title: 'Ultimate', description: 'All-inclusive, every feature' },\n    { id: 6, title: 'Enterprise', description: 'Custom, large-scale operations' }\n]\n"
  },
  "collections/tag-group/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-disabled-demo",
    "raw": "'use client'\n\nimport { androidBrands } from '@/components/docs/collections/tag-group/tag-group-demo'\nimport { Tag } from '@/components/ui'\n\nexport default function TagGroupDisabledDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tag.Group\n                disabledKeys={androidBrands\n                    .filter((brand) => !brand.available)\n                    .map((brand) => brand.id)}\n                label='Disabled Key'\n                selectionMode='multiple'\n            >\n                <Tag.List items={androidBrands}>\n                    {(item) => <Tag.Item>{item.name}</Tag.Item>}\n                </Tag.List>\n            </Tag.Group>\n\n            <Tag.Group label='Disabled by Tag' selectionMode='multiple'>\n                <Tag.List items={androidBrands}>\n                    {(item) => <Tag.Item isDisabled={item.available}>{item.name}</Tag.Item>}\n                </Tag.List>\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, Tag } from '@/components/ui'\n\nconst fruitList = [\n    { id: '1', name: 'Apple', available: false },\n    { id: '2', name: 'Banana', available: true },\n    { id: '3', name: 'Cherry', available: true },\n    { id: '4', name: 'Date', available: false }\n]\n\nexport default function TagGroupControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([]))\n    return (\n        <div>\n            <Tag.Group\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n            >\n                <Tag.List items={fruitList}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n            </Tag.Group>\n\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{Array.from(selected).join(', ')}</strong>\n            </Description>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-shape-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-shape-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst carModels = [\n    { id: '1', name: 'Tesla Model S', available: true },\n    { id: '2', name: 'Ford Mustang', available: false },\n    { id: '3', name: 'Chevrolet Camaro', available: true },\n    { id: '4', name: 'BMW M3', available: false },\n    { id: '5', name: 'Audi R8', available: true }\n]\n\nexport default function TagGroupShapeDemo() {\n    return (\n        <div className='space-y-6 max-w-sm'>\n            <Tag.Group shape='square' variant='danger' label='Car Models' selectionMode='multiple'>\n                <Tag.List items={carModels}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n            </Tag.Group>\n            <Tag.Group shape='circle' variant='warning' label='Car Models' selectionMode='multiple'>\n                <Tag.List items={carModels}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Tag } from '@/components/ui'\n\nexport default function TagGroupWithRemoveDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: '1', name: 'Ferrari', available: true },\n            { id: '2', name: 'Lamborghini', available: false },\n            { id: '3', name: 'Porsche', available: true },\n            { id: '4', name: 'Bugatti', available: false },\n            { id: '5', name: 'McLaren', available: true },\n            { id: '6', name: 'Aston Martin', available: true },\n            { id: '7', name: 'Bentley', available: false },\n            { id: '8', name: 'Rolls-Royce', available: true },\n            { id: '9', name: 'Maserati', available: false },\n            { id: '10', name: 'Jaguar', available: true }\n        ]\n    })\n\n    return (\n        <Tag.Group\n            selectionMode='multiple'\n            className='max-w-sm'\n            onRemove={(keys) => list.remove(...keys)}\n        >\n            <Tag.List items={list.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-href-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst articles = [\n    { name: 'React Tutorial', url: '#' },\n    { name: 'TypeScript Handbook', url: '#' },\n    { name: 'JavaScript Guide', url: '#' }\n]\n\nexport default function TagGroupControlledDemo() {\n    return (\n        <Tag.Group>\n            <Tag.List items={articles}>\n                {(item) => (\n                    <Tag.Item id={item.name} href={item.url}>\n                        {item.name}\n                    </Tag.Item>\n                )}\n            </Tag.List>\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nexport const androidBrands = [\n    { id: '1', name: 'Samsung', available: false },\n    { id: '2', name: 'OnePlus', available: true },\n    { id: '3', name: 'Google', available: true },\n    { id: '4', name: 'Xiaomi', available: false }\n]\n\nexport default function TagGroupDemo() {\n    return (\n        <Tag.Group label='Android Brands' selectionMode='multiple'>\n            <Tag.List items={androidBrands}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-variant-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-variant-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Tag } from '@/components/ui'\n\nconst shoes = [\n    { id: '1', name: 'Nike', available: true },\n    { id: '2', name: 'Adidas', available: false },\n    { id: '3', name: 'Puma', available: true },\n    { id: '4', name: 'Reebok', available: true }\n]\n\nexport default function TagGroupVariantDemo() {\n    const shoesList = useListData({\n        initialItems: shoes\n    })\n    return (\n        <div className='space-y-2 max-w-sm'>\n            <Tag.Group\n                variant='primary'\n                aria-label='Primary Variant'\n                selectionMode='multiple'\n                onRemove={(keys) => shoesList.remove(...keys)}\n            >\n                <Tag.List items={shoesList.items}>\n                    {(item) => <Tag.Item>{item.name}</Tag.Item>}\n                </Tag.List>\n            </Tag.Group>\n            <Tag.Group\n                variant='secondary'\n                aria-label='Secondary Variant'\n                selectionMode='multiple'\n                onRemove={(keys) => shoesList.remove(...keys)}\n            >\n                <Tag.List items={shoesList.items}>\n                    {(item) => <Tag.Item>{item.name}</Tag.Item>}\n                </Tag.List>\n            </Tag.Group>\n            <Tag.Group\n                variant='success'\n                aria-label='Success Variant'\n                selectionMode='multiple'\n                onRemove={(keys) => shoesList.remove(...keys)}\n            >\n                <Tag.List items={shoesList.items}>\n                    {(item) => <Tag.Item>{item.name}</Tag.Item>}\n                </Tag.List>\n            </Tag.Group>\n            <Tag.Group\n                variant='warning'\n                aria-label='Warning Variant'\n                selectionMode='multiple'\n                onRemove={(keys) => shoesList.remove(...keys)}\n            >\n                <Tag.List items={shoesList.items}>\n                    {(item) => <Tag.Item>{item.name}</Tag.Item>}\n                </Tag.List>\n            </Tag.Group>\n            <Tag.Group\n                variant='danger'\n                aria-label='Danger Variant'\n                selectionMode='multiple'\n                onRemove={(keys) => shoesList.remove(...keys)}\n            >\n                <Tag.List items={shoesList.items}>\n                    {(item) => <Tag.Item>{item.name}</Tag.Item>}\n                </Tag.List>\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/accordion/accordion-border-hidden-demo": {
    "component": "@/components/docs/collections/accordion/accordion-border-hidden-demo",
    "raw": "'use client'\n\nimport {\n    IconBell,\n    IconCreditCard,\n    IconDownload,\n    IconLifeBuoy,\n    IconSettings,\n    IconShield\n} from 'hq-icons'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionBorderHiddenDemo() {\n    return (\n        <Accordion hideBorder>\n            {items.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.title}</Accordion.Trigger>\n                    <Accordion.Content>{item.description}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst items = [\n    {\n        icon: <IconSettings />,\n        title: 'Personal Settings',\n        description:\n            'You can update your profile, change your password, and manage your account settings here.'\n    },\n    {\n        icon: <IconBell />,\n        title: 'Notifications',\n        description:\n            'Manage your notifications preferences, including alerts, emails, and push notifications.'\n    },\n    {\n        icon: <IconShield />,\n        title: 'Privacy Options',\n        description:\n            'Adjust your privacy settings to control who can see your information and contact you.'\n    },\n    {\n        icon: <IconCreditCard />,\n        title: 'Payment Methods',\n        description:\n            'Add, remove, or update your payment methods including credit cards and digital wallets.'\n    },\n    {\n        icon: <IconLifeBuoy />,\n        title: 'Support Center',\n        description: 'Find help with common issues, or contact support for further assistance.'\n    },\n    {\n        icon: <IconDownload />,\n        title: 'Download Data',\n        description:\n            'Request a download of all your data we have stored, including account activity and user data.'\n    }\n]\n"
  },
  "collections/accordion/accordion-default-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-default-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionGroupDefaultExpandDemo() {\n    return (\n        <Accordion defaultExpandedKeys={[1]}>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'How do I reset my password?',\n        a: \"You can reset your password by going to the settings page and clicking on 'Reset Password'.\"\n    },\n    {\n        q: 'Can I change my subscription plan?',\n        a: 'Yes, you can upgrade or downgrade your subscription plan at any time from your account settings.'\n    },\n    {\n        q: 'Where can I view my past orders?',\n        a: \"Your past orders can be viewed in the 'Orders' section of your account dashboard.\"\n    },\n    {\n        q: 'What is the return policy?',\n        a: 'Our return policy allows you to return products within 30 days of purchase for a full refund or exchange.'\n    },\n    {\n        q: 'How do I contact customer support?',\n        a: 'You can contact customer support via email at support@example.com or through our online chat system.'\n    }\n]\n"
  },
  "collections/accordion/accordion-hide-indicator-demo": {
    "component": "@/components/docs/collections/accordion/accordion-hide-indicator-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionHideIndicatorDemo() {\n    return (\n        <Accordion hideIndicator>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'What payment methods are accepted?',\n        a: 'We accept all major credit cards, PayPal, and Apple Pay.'\n    },\n    {\n        q: 'How long does shipping take?',\n        a: 'Shipping times vary by location but typically take between 3-7 business days.'\n    },\n    {\n        q: 'Can I track my order?',\n        a: 'Yes, you can track your order using the tracking link provided in your shipping confirmation email.'\n    }\n]\n"
  },
  "collections/accordion/accordion-demo": {
    "component": "@/components/docs/collections/accordion/accordion-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>What is a VPS?</Accordion.Trigger>\n                <Accordion.Content>\n                    A VPS is a Virtual Private Server, which provides dedicated resources on a\n                    server shared with other users, offering more control and customization than\n                    shared hosting.\n                </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>What is cloud hosting?</Accordion.Trigger>\n                <Accordion.Content>\n                    Cloud hosting utilizes multiple servers to balance load and maximize uptime.\n                    Instead of being hosted on a single server, your data and resources are spread\n                    across multiple servers.\n                </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item id={3}>\n                <Accordion.Trigger>What is shared hosting?</Accordion.Trigger>\n                <Accordion.Content>\n                    Shared hosting is a type of web hosting where multiple websites share the same\n                    server and its resources. It&apos;s an affordable option, but may have\n                    limitations on performance and customization.\n                </Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={4}>\n                <Accordion.Trigger>What is dedicated hosting?</Accordion.Trigger>\n                <Accordion.Content>\n                    Dedicated hosting means your website is hosted on a single server exclusively\n                    reserved for your site. This provides maximum performance and customization, but\n                    at a higher cost.\n                </Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/accordion/accordion-allow-multiple-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-allow-multiple-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionAllowMultipleExpandDemo() {\n    return (\n        <Accordion allowsMultipleExpanded defaultExpandedKeys={[1, 2]}>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'How do I reset my password?',\n        a: \"You can reset your password by going to the settings page and clicking on 'Reset Password'.\"\n    },\n    {\n        q: 'Can I change my subscription plan?',\n        a: 'Yes, you can upgrade or downgrade your subscription plan at any time from your account settings.'\n    },\n    {\n        q: 'Where can I view my past orders?',\n        a: \"Your past orders can be viewed in the 'Orders' section of your account dashboard.\"\n    },\n    {\n        q: 'What is the return policy?',\n        a: 'Our return policy allows you to return products within 30 days of purchase for a full refund or exchange.'\n    },\n    {\n        q: 'How do I contact customer support?',\n        a: 'You can contact customer support via email at support@example.com or through our online chat system.'\n    }\n]\n"
  },
  "collections/accordion/accordion-disabled-demo": {
    "component": "@/components/docs/collections/accordion/accordion-disabled-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDisabledDemo() {\n    return (\n        <Accordion>\n            {faqs.map((item, index) => (\n                <Accordion.Item isDisabled={index === 2} key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'Do you offer gift wrapping options?',\n        a: 'Yes, we provide gift wrapping services for a small additional charge at checkout.'\n    },\n    {\n        q: 'Can I return a gift card?',\n        a: 'Sorry, gift cards are non-refundable and cannot be returned.'\n    },\n    {\n        q: 'What are your store hours?',\n        a: 'Our store is open from 9 AM to 9 PM on weekdays and 10 AM to 6 PM on weekends.'\n    },\n    {\n        q: 'Do you have a loyalty program?',\n        a: 'Yes, we have a loyalty program where you can earn points for every purchase and redeem them for discounts.'\n    },\n    {\n        q: 'How do I update my billing information?',\n        a: 'You can update your billing information through your account settings on our website.'\n    },\n    {\n        q: 'Are there any discounts for bulk orders?',\n        a: 'Yes, we offer discounts on bulk orders. Please contact our sales team for more details.'\n    }\n]\n"
  },
  "collections/accordion/accordion-hide-everything-demo": {
    "component": "@/components/docs/collections/accordion/accordion-hide-everything-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionHideEverythingDemo() {\n    return (\n        <Accordion hideIndicator hideBorder>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'What payment methods are accepted?',\n        a: 'We accept all major credit cards, PayPal, and Apple Pay.'\n    },\n    {\n        q: 'How long does shipping take?',\n        a: 'Shipping times vary by location but typically take between 3-7 business days.'\n    },\n    {\n        q: 'Can I track my order?',\n        a: 'Yes, you can track your order using the tracking link provided in your shipping confirmation email.'\n    }\n]\n"
  },
  "surfaces/show-more/show-more-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-demo",
    "raw": "'use client'\n\nimport { IconChevronDown } from 'hq-icons'\n\nimport { ShowMore, cn } from '@/components/ui'\n\nexport default function ShowMoreDemo() {\n    return (\n        <div className='py-6'>\n            <ShowMore>\n                {({ isSelected }) => (\n                    <>\n                        Show {isSelected ? 'less' : 'more'}\n                        <IconChevronDown\n                            className={cn(\n                                isSelected ? 'rotate-180' : '',\n                                'size-4 transition-transform'\n                            )}\n                        />\n                    </>\n                )}\n            </ShowMore>\n        </div>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-content-reveal-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-content-reveal-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { ContentReveal } from '@/components/ui'\n\nexport default function ShowMoreContentRevealDemo() {\n    return (\n        <ContentReveal>\n            <Image\n                className='rounded-lg'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </ContentReveal>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-content-reveal-initial-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-content-reveal-initial-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { ContentReveal } from '@/components/ui'\n\nexport default function ShowMoreContentRevealDemo() {\n    return (\n        <ContentReveal\n            initialHeight={0}\n            initialOpacity={0}\n            showMoreText='Reveal'\n            showLessText='Hide'\n        >\n            <Image\n                className='rounded-lg'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </ContentReveal>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-as-text-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-as-text-demo",
    "raw": "'use client'\n\nimport { ShowMore } from '@/components/ui'\n\nexport default function ShowMoreAsTextDemo() {\n    return (\n        <div className='py-6'>\n            <ShowMore as='text' text='Or continue with' />\n        </div>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-controlled-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-controlled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronDown } from 'hq-icons'\n\nimport { ShowMore } from '@/components/ui'\n\nexport default function ShowMoreControlledDemo() {\n    const [isExpanded, setIsExpanded] = React.useState(false)\n    return (\n        <div className='py-6'>\n            <ShowMore onChange={setIsExpanded} isSelected={isExpanded}>\n                {isExpanded ? 'Expand' : 'Collapse'}\n                <IconChevronDown\n                    className={`${isExpanded ? 'rotate-180' : ''} size-4 transition-transform`}\n                />\n            </ShowMore>\n        </div>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-orientation-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-orientation-demo",
    "raw": "'use client'\n\nimport { ShowMore } from '@/components/ui'\n\nexport default function ShowMoreOrientationDemo() {\n    return <ShowMore orientation='vertical' as='text' text='Or' className='h-56' />\n}\n"
  },
  "surfaces/card/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card/card-login-form-demo",
    "raw": "'use client'\n\nimport { Button, Card, Checkbox, Link, TextField } from '@/components/ui'\n\nexport default function CardLoginFormDemo() {\n    return (\n        <Card className='max-w-md mx-auto'>\n            <Card.Header>\n                <Card.Title>Login</Card.Title>\n                <Card.Description>Don&apos;t loose the level, just keep on going.</Card.Description>\n            </Card.Header>\n            <Card.Content className='space-y-6'>\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <TextField\n                    isRequired\n                    label='Password'\n                    isRevealable\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <div className='flex justify-between items-center'>\n                    <Checkbox>Remember me</Checkbox>\n                    <Link variant='primary' href='#'>\n                        Forgot password?\n                    </Link>\n                </div>\n            </Card.Content>\n            <Card.Footer>\n                <Button className='w-full'>Login</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/card/card-table-demo": {
    "component": "@/components/docs/surfaces/card/card-table-demo",
    "raw": "'use client'\n\nimport { IconEllipsisVertical, IconEye, IconHighlighter, IconTrash } from 'hq-icons'\n\nimport { Card, Menu, Pagination, Table } from '@/components/ui'\n\nexport default function CardTableDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Table aria-label='Users'>\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column isRowHeader>Name</Table.Column>\n                        <Table.Column>Gender</Table.Column>\n                        <Table.Column>Age</Table.Column>\n                        <Table.Column>Occupation</Table.Column>\n                        <Table.Column />\n                    </Table.Header>\n                    <Table.Body items={users}>\n                        {(item) => (\n                            <Table.Row id={item.id}>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.name}</Table.Cell>\n                                <Table.Cell>{item.gender}</Table.Cell>\n                                <Table.Cell>{item.age}</Table.Cell>\n                                <Table.Cell>{item.occupation}</Table.Cell>\n                                <Table.Cell className='flex justify-end'>\n                                    <Menu>\n                                        <Menu.Trigger>\n                                            <IconEllipsisVertical />\n                                        </Menu.Trigger>\n                                        <Menu.Content showArrow placement='left top'>\n                                            <Menu.Item>\n                                                <IconEye /> View\n                                            </Menu.Item>\n                                            <Menu.Item>\n                                                <IconHighlighter /> Edit\n                                            </Menu.Item>\n                                            <Menu.Separator />\n                                            <Menu.Item isDanger>\n                                                <IconTrash /> Delete\n                                            </Menu.Item>\n                                        </Menu.Content>\n                                    </Menu>\n                                </Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n            <Card.Footer>\n                <Pagination>\n                    <Pagination.List>\n                        <Pagination.Item role='first' />\n                        <Pagination.Item role='previous' />\n                        <Pagination.Section className='lg:hidden rounded-lg border'>\n                            <Pagination.Item role='label'>1</Pagination.Item>\n                            <Pagination.Item role='separator' />\n                            <Pagination.Item className='text-muted-foreground' role='label'>\n                                {users.length}\n                            </Pagination.Item>\n                        </Pagination.Section>\n                        <Pagination.Section className='lg:flex hidden' items={pages}>\n                            {(item) => (\n                                <Pagination.Item\n                                    id={item.value.toString()}\n                                    isCurrent={item.value === 4}\n                                    href='#'\n                                >\n                                    {item.value}\n                                </Pagination.Item>\n                            )}\n                        </Pagination.Section>\n                        <Pagination.Item role='next' />\n                        <Pagination.Item role='last' />\n                    </Pagination.List>\n                </Pagination>\n            </Card.Footer>\n        </Card>\n    )\n}\n\nconst users = [\n    {\n        id: 1,\n        name: 'John Doe',\n        gender: 'Male',\n        age: 30,\n        occupation: 'Software Engineer'\n    },\n    {\n        id: 2,\n        name: 'Jane Smith',\n        gender: 'Female',\n        age: 25,\n        occupation: 'Marketing Manager'\n    },\n    {\n        id: 3,\n        name: 'Bob Johnson',\n        gender: 'Male',\n        age: 40,\n        occupation: 'Doctor'\n    },\n    {\n        id: 4,\n        name: 'Emily Chen',\n        gender: 'Female',\n        age: 28,\n        occupation: 'Teacher'\n    },\n    {\n        id: 5,\n        name: 'Michael Brown',\n        gender: 'Male',\n        age: 35,\n        occupation: 'Lawyer'\n    },\n    {\n        id: 6,\n        name: 'Sarah Lee',\n        gender: 'Female',\n        age: 32,\n        occupation: 'Designer'\n    },\n    {\n        id: 7,\n        name: 'Kevin White',\n        gender: 'Male',\n        age: 45,\n        occupation: 'CEO'\n    },\n    {\n        id: 8,\n        name: 'Lisa Nguyen',\n        gender: 'Female',\n        age: 29,\n        occupation: 'Engineer'\n    },\n    {\n        id: 9,\n        name: 'David Kim',\n        gender: 'Male',\n        age: 38,\n        occupation: 'Consultant'\n    },\n    {\n        id: 10,\n        name: 'Hannah Patel',\n        gender: 'Female',\n        age: 26,\n        occupation: 'Writer'\n    }\n]\nconst pages = Array.from({ length: users.length / 2 }, (_, i) => ({ value: i + 1 }))\n"
  },
  "surfaces/card/card-demo": {
    "component": "@/components/docs/surfaces/card/card-demo",
    "raw": "'use client'\n\nimport { Button, Card } from '@/components/ui'\n\nexport default function CardDemo() {\n    return (\n        <Card className='max-w-lg'>\n            <Card.Header>\n                <Card.Title>Monthly Report</Card.Title>\n                <Card.Description>Financial summary for June</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                The monthly financial report shows a 15% increase in revenue compared to last month.\n            </Card.Content>\n            <Card.Footer>\n                <Button>View Details</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/grid/grid-collections-demo": {
    "component": "@/components/docs/surfaces/grid/grid-collections-demo",
    "raw": "'use client'\n\nimport { Card, Grid } from '@/components/ui'\n\nexport default function GridCollectionsDemo() {\n    return (\n        <Grid\n            aria-label='List articles'\n            columns={{ initial: 1, sm: 2, '2xl': 3 }}\n            gap={2}\n            items={articles}\n        >\n            {(item) => (\n                <Grid.Item>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>{item.title}</Card.Title>\n                            <Card.Description>{item.description}</Card.Description>\n                        </Card.Header>\n                    </Card>\n                </Grid.Item>\n            )}\n        </Grid>\n    )\n}\n\nconst articles = [\n    {\n        id: 1,\n        title: 'Understanding React Hooks',\n        description:\n            \"Get the lowdown on React Hooks, how to use 'em, and best practices for those sleek functional components.\"\n    },\n    {\n        id: 2,\n        title: 'Mastering TypeScript',\n        description:\n            'Dive deep into TypeScript, from basic stuff to pro features, for building rock-solid apps.'\n    },\n    {\n        id: 3,\n        title: 'Laravel Eloquent Tips',\n        description:\n            'Check out advanced tricks for using Laravel Eloquent ORM to make your database game strong.'\n    },\n    {\n        id: 4,\n        title: 'Building with Next.js',\n        description:\n            'A full-on tutorial on creating server-rendered React apps with the Next.js framework.'\n    },\n    {\n        id: 5,\n        title: 'Inertia.js for Full-Stack Devs',\n        description:\n            'Learn how Inertia.js smooths out the gap between client-side frameworks and server-side apps.'\n    },\n    {\n        id: 6,\n        title: 'Optimizing Web Performance',\n        description: 'Tips and tricks to boost the performance and speed of your web apps.'\n    }\n]\n"
  },
  "surfaces/grid/grid-gap-demo": {
    "component": "@/components/docs/surfaces/grid/grid-gap-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridGapDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 4,\n                sm: 5,\n                md: 6\n            }}\n            gap={{\n                initial: 2,\n                sm: 4\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-gap-x-y-demo": {
    "component": "@/components/docs/surfaces/grid/grid-gap-x-y-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridGapXYDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 3,\n                sm: 4,\n                md: 6\n            }}\n            gapX={{\n                initial: 2,\n                sm: 4\n            }}\n            gapY={{\n                initial: 4,\n                sm: 6\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-debug-demo": {
    "component": "@/components/docs/surfaces/grid/grid-debug-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridDebugDemo() {\n    return (\n        <Grid debug columns={3} gap={4}>\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-basic-demo": {
    "component": "@/components/docs/surfaces/grid/grid-basic-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridBasicDemo() {\n    return (\n        <Grid columns={6}>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32 border-r' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-item-demo": {
    "component": "@/components/docs/surfaces/grid/grid-item-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridItemDemo() {\n    return (\n        <Grid debug columns={3} gap={4}>\n            <Grid.Item\n                colSpan={{\n                    initial: 1,\n                    sm: 2\n                }}\n                className='w-full h-24 grid place-content-center'\n            >\n                1\n            </Grid.Item>\n            <Grid.Item className='w-full h-24 grid place-content-center'>2</Grid.Item>\n            <Grid.Item\n                colSpan={{\n                    initial: 1,\n                    sm: 3\n                }}\n                className='w-full h-24 grid place-content-center'\n            >\n                3\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-responsive-demo": {
    "component": "@/components/docs/surfaces/grid/grid-responsive-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridResponsiveDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 3,\n                sm: 4,\n                md: 5,\n                xl: 6\n            }}\n            gap={{\n                initial: 2,\n                sm: 3,\n                lg: 4\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "surfaces/separator/separator-orientation-demo": {
    "component": "@/components/docs/surfaces/separator/separator-orientation-demo",
    "raw": "'use client'\n\nimport { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return <Separator orientation='vertical' className='h-32' />\n}\n"
  },
  "surfaces/separator/separator-demo": {
    "component": "@/components/docs/surfaces/separator/separator-demo",
    "raw": "'use client'\n\nimport { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return <Separator />\n}\n"
  },
  "surfaces/description-list/description-list-card-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-card-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Card, DescriptionList, Link } from '@/components/ui'\n\nexport default function DescriptionListCardDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Product Details</Card.Title>\n                <Card.Description>\n                    The product details card is a great way to display information about a product.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <DescriptionList>\n                    <DescriptionList.Term>Product Name</DescriptionList.Term>\n                    <DescriptionList.Details>Wireless Headphones</DescriptionList.Details>\n                    <DescriptionList.Term>Battery Life</DescriptionList.Term>\n                    <DescriptionList.Details>20 hours</DescriptionList.Details>\n                    <DescriptionList.Term>Weight</DescriptionList.Term>\n                    <DescriptionList.Details>250 grams</DescriptionList.Details>\n                    <DescriptionList.Term>Color</DescriptionList.Term>\n                    <DescriptionList.Details>Black</DescriptionList.Details>\n                    <DescriptionList.Term>Warranty</DescriptionList.Term>\n                    <DescriptionList.Details>2 years</DescriptionList.Details>\n                </DescriptionList>\n            </Card.Content>\n            <Card.Footer>\n                <Link className={buttonVariants()} href='#'>\n                    Edit\n                </Link>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-demo",
    "raw": "import { DescriptionList } from '@/components/ui/description-list'\n\nexport default function DescriptionListDemo() {\n    return (\n        <DescriptionList>\n            <DescriptionList.Term>Invoice Number</DescriptionList.Term>\n            <DescriptionList.Details>INV-12345</DescriptionList.Details>\n            <DescriptionList.Term>Invoice Date</DescriptionList.Term>\n            <DescriptionList.Details>September 21, 2024</DescriptionList.Details>\n            <DescriptionList.Term>Due Date</DescriptionList.Term>\n            <DescriptionList.Details>October 21, 2024</DescriptionList.Details>\n            <DescriptionList.Term>Customer Name</DescriptionList.Term>\n            <DescriptionList.Details>John Doe</DescriptionList.Details>\n            <DescriptionList.Term>Total Amount</DescriptionList.Term>\n            <DescriptionList.Details>$1,250.00</DescriptionList.Details>\n            <DescriptionList.Term>Status</DescriptionList.Term>\n            <DescriptionList.Details>Pending</DescriptionList.Details>\n        </DescriptionList>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-heading-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-heading-demo",
    "raw": "'use client'\n\nimport { DescriptionList, Heading } from '@/components/ui'\n\nexport default function DescriptionListHeadingDemo() {\n    return (\n        <div>\n            <Heading className='sm:text-lg'>Product Details</Heading>\n            <DescriptionList>\n                <DescriptionList.Term>Product Name</DescriptionList.Term>\n                <DescriptionList.Details>Wireless Headphones</DescriptionList.Details>\n                <DescriptionList.Term>Battery Life</DescriptionList.Term>\n                <DescriptionList.Details>20 hours</DescriptionList.Details>\n                <DescriptionList.Term>Weight</DescriptionList.Term>\n                <DescriptionList.Details>250 grams</DescriptionList.Details>\n                <DescriptionList.Term>Color</DescriptionList.Term>\n                <DescriptionList.Details>Black</DescriptionList.Details>\n                <DescriptionList.Term>Warranty</DescriptionList.Term>\n                <DescriptionList.Details>2 years</DescriptionList.Details>\n            </DescriptionList>\n        </div>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-controlled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ComboBox, Description } from '@/components/ui'\n\nconst sports = [\n    { id: 1, name: 'Football' },\n    { id: 2, name: 'Basketball' },\n    { id: 3, name: 'Baseball' },\n    { id: 4, name: 'Soccer' },\n    { id: 5, name: 'Tennis' },\n    { id: 6, name: 'Cricket' },\n    { id: 7, name: 'Hockey' },\n    { id: 8, name: 'Rugby' },\n    { id: 9, name: 'Golf' }\n]\n\nexport default function ComboBoxControlledDemo() {\n    const [sport, setSport] = React.useState('')\n    return (\n        <>\n            <ComboBox\n                onInputChange={setSport}\n                inputValue={sport}\n                placeholder='Select a sports'\n                label='Sports'\n                items={sports}\n            >\n                {(item) => (\n                    <ComboBox.Item id={item.id} textValue={item.name}>\n                        {item.name}\n                    </ComboBox.Item>\n                )}\n            </ComboBox>\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{sport}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-demo",
    "raw": "'use client'\n\nimport { ComboBox } from '@/components/ui'\n\nexport default function ComboBoxDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users}>\n            {(item) => (\n                <ComboBox.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/combo-box/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-avatar-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nexport default function ComboBoxAvatarDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users} isRequired>\n            {(item) => (\n                <ComboBox.Item id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/combo-box/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-disabled-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nexport default function ComboBoxDisabledDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users} isDisabled>\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\n"
  },
  "pickers/combo-box/combo-box-section-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-section-demo",
    "raw": "'use client'\n\nimport { ComboBox } from '@/components/ui'\n\nexport default function ComboBoxSectionDemo() {\n    return (\n        <ComboBox placeholder='Select a author' label='Authors' selectedKey={1} items={movies}>\n            {(movie) => (\n                <ComboBox.Section title={movie.title} items={movie.genres}>\n                    {(genre) => <ComboBox.Item textValue={genre.name}>{genre.name}</ComboBox.Item>}\n                </ComboBox.Section>\n            )}\n        </ComboBox>\n    )\n}\n\nconst movies = [\n    {\n        id: 1,\n        title: 'Inception',\n        genres: [\n            {\n                id: 101,\n                name: 'Sci-Fi'\n            },\n            {\n                id: 102,\n                name: 'Thriller'\n            }\n        ]\n    },\n    {\n        id: 2,\n        title: 'Titanic',\n        genres: [\n            {\n                id: 201,\n                name: 'Romance'\n            },\n            {\n                id: 202,\n                name: 'Drama'\n            }\n        ]\n    },\n    {\n        id: 3,\n        title: 'The Matrix',\n        genres: [\n            {\n                id: 301,\n                name: 'Action'\n            },\n            {\n                id: 302,\n                name: 'Sci-Fi'\n            }\n        ]\n    },\n    {\n        id: 4,\n        title: 'Gladiator',\n        genres: [\n            {\n                id: 401,\n                name: 'Action'\n            },\n            {\n                id: 402,\n                name: 'Drama'\n            }\n        ]\n    },\n    {\n        id: 5,\n        title: 'Casablanca',\n        genres: [\n            {\n                id: 501,\n                name: 'Romance'\n            },\n            {\n                id: 502,\n                name: 'Drama'\n            }\n        ]\n    }\n]\n"
  },
  "pickers/combo-box/combo-box-readonly-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-readonly-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxReadonlyDemo() {\n    return (\n        <ComboBox\n            defaultSelectedKey={1}\n            placeholder='Select a user'\n            label='Users'\n            items={users}\n            isReadOnly\n        >\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-controlled-selection-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-controlled-selection-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { ComboBox, Description } from '@/components/ui'\n\nexport default function ComboBoxControlledSelectionDemo() {\n    const [country, setCountry] = React.useState<Key | null>(null)\n    return (\n        <>\n            <ComboBox\n                label='Country'\n                placeholder='Country'\n                onSelectionChange={setCountry}\n                selectedKey={country}\n                items={countries}\n            >\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{country}</strong>\n            </Description>\n        </>\n    )\n}\n\nconst countries = [\n    { id: 1, name: 'Argentina' },\n    { id: 2, name: 'Australia' },\n    { id: 3, name: 'Austria' },\n    { id: 4, name: 'Belgium' },\n    { id: 5, name: 'Brazil' },\n    { id: 6, name: 'Canada' },\n    { id: 7, name: 'China' },\n    { id: 8, name: 'Denmark' },\n    { id: 9, name: 'France' },\n    { id: 10, name: 'Germany' },\n    { id: 11, name: 'India' },\n    { id: 12, name: 'Italy' },\n    { id: 13, name: 'Japan' },\n    { id: 14, name: 'Mexico' },\n    { id: 15, name: 'Netherlands' },\n    { id: 16, name: 'New Zealand' },\n    { id: 17, name: 'Norway' },\n    { id: 18, name: 'South Korea' },\n    { id: 19, name: 'Sweden' },\n    { id: 20, name: 'United Kingdom' },\n    { id: 21, name: 'United States' }\n]\n"
  },
  "pickers/combo-box/combo-box-invalid-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-invalid-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxInvalidDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users} isInvalid>\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-validation-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-validation-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, ComboBox, Form } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()} className='space-y-2'>\n            <ComboBox placeholder='Select a user' label='Users' items={users} isRequired>\n                {(item) => (\n                    <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                        <Avatar src={item.image_url} />\n                        {item.name}\n                    </ComboBox.Item>\n                )}\n            </ComboBox>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/select/select-item-details-demo": {
    "component": "@/components/docs/pickers/select/select-item-details-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectItemDetailsDemo() {\n    return (\n        <Select label='Roles' placeholder='Select a role' items={roles}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <Select.ItemDetails label={item.name} description={item.description} />\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n"
  },
  "pickers/select/select-with-icon-demo": {
    "component": "@/components/docs/pickers/select/select-with-icon-demo",
    "raw": "'use client'\n\nimport { IconLaptop, IconMonitor, IconPhone } from 'hq-icons'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectWithIconDemo() {\n    return (\n        <Select aria-label='Devices' defaultSelectedKey='desktop' placeholder='Select a device'>\n            <Select.Item id='desktop' textValue='Desktop'>\n                <IconMonitor />\n                Desktop\n            </Select.Item>\n            <Select.Item id='laptop' textValue='Laptop'>\n                <IconLaptop />\n                Laptop\n            </Select.Item>\n            <Select.Item id='smartphone' textValue='Smartphone'>\n                <IconPhone />\n                Smartphone\n            </Select.Item>\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-section-demo": {
    "component": "@/components/docs/pickers/select/select-section-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectSectionDemo() {\n    return (\n        <Select\n            defaultSelectedKey={1}\n            aria-label='Countries'\n            placeholder='Select a country'\n            items={countries}\n        >\n            {(country) => (\n                <Select.Section title={country.name} items={country.cities}>\n                    {(city) => <Select.Item textValue={city.name}>{city.name}</Select.Item>}\n                </Select.Section>\n            )}\n        </Select>\n    )\n}\n\nconst countries = [\n    {\n        id: 1,\n        name: 'Egypt',\n        cities: [\n            {\n                id: 101,\n                name: 'Cairo'\n            },\n            {\n                id: 102,\n                name: 'Alexandria'\n            },\n            {\n                id: 103,\n                name: 'Giza'\n            },\n            {\n                id: 104,\n                name: 'Luxor'\n            }\n        ]\n    },\n    {\n        id: 2,\n        name: 'Indonesia',\n        cities: [\n            {\n                id: 201,\n                name: 'Jakarta'\n            },\n            {\n                id: 202,\n                name: 'Bali'\n            },\n            {\n                id: 203,\n                name: 'Surabaya'\n            },\n            {\n                id: 204,\n                name: 'Bandung'\n            },\n            {\n                id: 205,\n                name: 'Medan'\n            }\n        ]\n    },\n    {\n        id: 3,\n        name: 'United States',\n        cities: [\n            {\n                id: 301,\n                name: 'New York City'\n            },\n            {\n                id: 302,\n                name: 'Los Angeles'\n            },\n            {\n                id: 303,\n                name: 'Chicago'\n            },\n            {\n                id: 304,\n                name: 'Houston'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Canada',\n        cities: [\n            {\n                id: 401,\n                name: 'Toronto'\n            },\n            {\n                id: 402,\n                name: 'Vancouver'\n            },\n            {\n                id: 403,\n                name: 'Montreal'\n            }\n        ]\n    },\n    {\n        id: 5,\n        name: 'Australia',\n        cities: [\n            {\n                id: 501,\n                name: 'Sydney'\n            },\n            {\n                id: 502,\n                name: 'Melbourne'\n            },\n            {\n                id: 503,\n                name: 'Brisbane'\n            }\n        ]\n    },\n    {\n        id: 6,\n        name: 'Germany',\n        cities: [\n            {\n                id: 601,\n                name: 'Berlin'\n            },\n            {\n                id: 602,\n                name: 'Munich'\n            },\n            {\n                id: 603,\n                name: 'Frankfurt'\n            },\n            {\n                id: 604,\n                name: 'Hamburg'\n            }\n        ]\n    },\n    {\n        id: 7,\n        name: 'Japan',\n        cities: [\n            {\n                id: 701,\n                name: 'Tokyo'\n            },\n            {\n                id: 702,\n                name: 'Osaka'\n            },\n            {\n                id: 703,\n                name: 'Kyoto'\n            }\n        ]\n    }\n]\n"
  },
  "pickers/select/select-validation-demo": {
    "component": "@/components/docs/pickers/select/select-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, Select } from '@/components/ui'\n\nconst software = [\n    { id: 1, name: 'Adobe Photoshop' }\n    //...\n]\n\nexport default function SelectValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()} className='space-y-2'>\n            <Select\n                label='Design software'\n                placeholder='Select a software'\n                items={software}\n                isRequired\n            >\n                {(item) => (\n                    <Select.Item id={item.id} textValue={item.name}>\n                        {item.name}\n                    </Select.Item>\n                )}\n            </Select>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/select/select-demo": {
    "component": "@/components/docs/pickers/select/select-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport const software = [\n    { id: 1, name: 'Adobe Photoshop' },\n    { id: 2, name: 'Sketch' },\n    { id: 3, name: 'Figma' },\n    { id: 4, name: 'Adobe XD' },\n    { id: 5, name: 'InVision' }\n]\nexport default function SelectDemo() {\n    return (\n        <Select label='Design software' placeholder='Select a software' items={software}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-controlled-demo": {
    "component": "@/components/docs/pickers/select/select-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Description, Select } from '@/components/ui'\n\nexport const movies = [\n    { id: 1, title: 'Inception' },\n    { id: 2, title: 'The Dark Knight' },\n    { id: 3, title: 'Interstellar' },\n    { id: 4, title: 'The Matrix' },\n    { id: 5, title: 'Pulp Fiction' }\n]\n\nexport default function SelectControlledDemo() {\n    const [movie, setMovie] = React.useState<Key>('')\n    return (\n        <>\n            <Select\n                selectedKey={movie}\n                onSelectionChange={setMovie}\n                label='Movies'\n                placeholder='Select a movie'\n                items={movies}\n            >\n                {(item) => (\n                    <Select.Item id={item.id} textValue={item.title}>\n                        {item.title}\n                    </Select.Item>\n                )}\n            </Select>\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{movie}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "pickers/select/select-disabled-demo": {
    "component": "@/components/docs/pickers/select/select-disabled-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nconst software = [\n    { id: 1, name: 'Adobe Photoshop' }\n    //...\n]\n\nexport default function SelectDisabledDemo() {\n    return (\n        <Select label='Design software' isDisabled placeholder='Select a software' items={software}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/multiple-select/multiple-select-variant-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-variant-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { MultiSelect, type SelectedKey } from '@/components/ui'\n\nexport default function MultiSelectVariantDemo() {\n    const selectedItems = useListData<SelectedKey>({\n        initialItems: [fruits[0]]\n    })\n    return (\n        <MultiSelect\n            className='max-w-xs'\n            variant='secondary'\n            label='Fruits'\n            selectedList={selectedItems}\n            items={fruits}\n            tag={(item) => (\n                <MultiSelect.Tag textValue={item.textValue}>{item.textValue}</MultiSelect.Tag>\n            )}\n        >\n            {(item) => {\n                return (\n                    <MultiSelect.Item textValue={item.textValue}>{item.textValue}</MultiSelect.Item>\n                )\n            }}\n        </MultiSelect>\n    )\n}\n\nconst fruits: SelectedKey[] = [\n    { id: 1, textValue: 'Apple' },\n    { id: 2, textValue: 'Banana' },\n    { id: 3, textValue: 'Cherry' },\n    { id: 7, textValue: 'Grape' },\n    { id: 8, textValue: 'Honeydew' },\n    { id: 9, textValue: 'Kiwi' },\n    { id: 10, textValue: 'Lemon' },\n    { id: 11, textValue: 'Mango' },\n    { id: 12, textValue: 'Nectarine' },\n    { id: 13, textValue: 'Orange' },\n    { id: 14, textValue: 'Papaya' },\n    { id: 15, textValue: 'Quince' },\n    { id: 16, textValue: 'Raspberry' },\n    { id: 17, textValue: 'Strawberry' },\n    { id: 18, textValue: 'Tangerine' },\n    { id: 19, textValue: 'Ugli Fruit' },\n    { id: 20, textValue: 'Watermelon' }\n]\n"
  },
  "pickers/multiple-select/multiple-select-min-max-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-min-max-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { MultiSelect, type SelectedKey } from '@/components/ui'\n\nconst tags = [\n    { id: 1, textValue: 'Cooking' },\n    { id: 2, textValue: 'Gardening' },\n    { id: 3, textValue: 'Meditation' },\n    { id: 4, textValue: 'Parenting' },\n    { id: 5, textValue: 'DIY Projects' },\n    { id: 6, textValue: 'Mindfulness' },\n    { id: 7, textValue: 'Travel Tips' },\n    { id: 8, textValue: 'Pet Care' },\n    { id: 9, textValue: 'Home Decor' },\n    { id: 10, textValue: 'Sustainable Living' }\n]\n\nexport default function MultiSelectMinMaxDemo() {\n    const selectedItems = useListData<SelectedKey>({\n        initialItems: [tags[0]]\n    })\n    return (\n        <MultiSelect\n            className='max-w-xs'\n            label='Select tags'\n            description='You can select up to 4 tags'\n            max={4}\n            selectedList={selectedItems}\n            items={tags}\n            tag={(item) => (\n                <MultiSelect.Tag textValue={item.textValue}>{item.textValue}</MultiSelect.Tag>\n            )}\n        >\n            {(item) => {\n                return (\n                    <MultiSelect.Item textValue={item.textValue}>{item.textValue}</MultiSelect.Item>\n                )\n            }}\n        </MultiSelect>\n    )\n}\n"
  },
  "pickers/multiple-select/multiple-select-controlled-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-controlled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Description, MultiSelect, type SelectedKey } from '@/components/ui'\n\nconst tags = [\n    { id: 1, textValue: 'Travel' },\n    { id: 2, textValue: 'Food' },\n    { id: 3, textValue: 'Fashion' },\n    { id: 4, textValue: 'Music' },\n    { id: 5, textValue: 'Photography' }\n]\n\nexport default function MultiSelectControlledDemo() {\n    const selectedList = useListData<SelectedKey>({\n        initialItems: []\n    })\n\n    return (\n        <>\n            <MultiSelect\n                className='max-w-xs'\n                onItemAdd={(key) => console.log('onItemAdd', key)}\n                onItemRemove={(key) => console.log('onItemRemove', key)}\n                label='Select tags'\n                selectedList={selectedList}\n                items={tags}\n                tag={(item) => (\n                    <MultiSelect.Tag textValue={item.textValue}>{item.textValue}</MultiSelect.Tag>\n                )}\n            >\n                {(item) => {\n                    return (\n                        <MultiSelect.Item id={item.id} textValue={item.textValue}>\n                            {item.textValue}\n                        </MultiSelect.Item>\n                    )\n                }}\n            </MultiSelect>\n            {selectedList.items.length > 0 && (\n                <Description className='mt-2 max-w-xs block [&>strong]:text-foreground text-muted-foreground'>\n                    You have selected:{' '}\n                    <strong>{selectedList.items.map((item) => item.textValue).join(', ')}</strong>\n                </Description>\n            )}\n        </>\n    )\n}\n"
  },
  "pickers/multiple-select/multiple-select-disabled-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-disabled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { MultiSelect, type SelectedKey } from '@/components/ui'\n\nexport default function MultiSelectDisabledDemo() {\n    const selectedItems = useListData<SelectedKey>({\n        initialItems: []\n    })\n    return (\n        <MultiSelect\n            isDisabled\n            className='max-w-xs'\n            label='Fruits'\n            selectedList={selectedItems}\n            items={fruits}\n            tag={(item) => (\n                <MultiSelect.Tag textValue={item.textValue}>{item.textValue}</MultiSelect.Tag>\n            )}\n        >\n            {(item) => {\n                return (\n                    <MultiSelect.Item textValue={item.textValue}>{item.textValue}</MultiSelect.Item>\n                )\n            }}\n        </MultiSelect>\n    )\n}\n\nconst fruits: SelectedKey[] = [{ id: 1, textValue: 'Apple' }]\n"
  },
  "pickers/multiple-select/multiple-select-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { MultiSelect, type SelectedKey } from '@/components/ui'\n\nexport default function MultiSelectDemo() {\n    const selectedItems = useListData<SelectedKey>({\n        initialItems: [fruits[0]]\n    })\n    return (\n        <MultiSelect\n            className='max-w-xs'\n            label='Fruits'\n            selectedList={selectedItems}\n            items={fruits}\n            tag={(item) => (\n                <MultiSelect.Tag textValue={item.textValue}>{item.textValue}</MultiSelect.Tag>\n            )}\n        >\n            {(item) => {\n                return (\n                    <MultiSelect.Item textValue={item.textValue}>{item.textValue}</MultiSelect.Item>\n                )\n            }}\n        </MultiSelect>\n    )\n}\n\nconst fruits: SelectedKey[] = [\n    { id: 1, textValue: 'Apple' },\n    { id: 2, textValue: 'Banana' },\n    { id: 3, textValue: 'Cherry' },\n    { id: 4, textValue: 'Date' },\n    { id: 5, textValue: 'Elderberry' },\n    { id: 6, textValue: 'Fig' },\n    { id: 7, textValue: 'Grape' },\n    { id: 8, textValue: 'Honeydew' },\n    { id: 9, textValue: 'Kiwi' },\n    { id: 10, textValue: 'Lemon' },\n    { id: 11, textValue: 'Mango' },\n    { id: 12, textValue: 'Nectarine' },\n    { id: 13, textValue: 'Orange' },\n    { id: 14, textValue: 'Papaya' },\n    { id: 15, textValue: 'Quince' },\n    { id: 16, textValue: 'Raspberry' },\n    { id: 17, textValue: 'Strawberry' },\n    { id: 18, textValue: 'Tangerine' },\n    { id: 19, textValue: 'Ugli Fruit' },\n    { id: 20, textValue: 'Watermelon' }\n]\n"
  },
  "controls/switch/switch-disabled-demo": {
    "component": "@/components/docs/controls/switch/switch-disabled-demo",
    "raw": "'use client'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    return <Switch isDisabled>Dark Mode</Switch>\n}\n"
  },
  "controls/switch/switch-variant-demo": {
    "component": "@/components/docs/controls/switch/switch-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Select, Switch } from '@/components/ui'\n\nconst items = ['primary', 'secondary', 'success', 'danger', 'warning', 'muted']\nexport default function SwitchVariantDemo() {\n    const [variant, setVariant] = React.useState<string>('primary')\n\n    return (\n        <>\n            <div className='absolute left-4 top-4 inline-flex min-w-32 flex-col gap-1'>\n                <Select\n                    selectedKey={variant}\n                    onSelectionChange={(v) => setVariant(v as string)}\n                    items={items.map((item) => ({ value: item, label: item }))}\n                >\n                    {(item) => (\n                        <Select.Item id={item.value} textValue={item.value}>\n                            {item.label}\n                        </Select.Item>\n                    )}\n                </Select>\n            </div>\n            <Switch defaultSelected variant={variant as keyof typeof Switch}>\n                Label\n            </Switch>\n        </>\n    )\n}\n"
  },
  "controls/switch/switch-demo": {
    "component": "@/components/docs/controls/switch/switch-demo",
    "raw": "'use client'\n\nimport { useTheme } from 'next-themes'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    const { resolvedTheme, setTheme } = useTheme()\n    return (\n        <Switch onChange={() => setTheme(resolvedTheme === 'light' ? 'dark' : 'light')}>\n            Switch Theme\n        </Switch>\n    )\n}\n"
  },
  "controls/switch/switch-controlled-demo": {
    "component": "@/components/docs/controls/switch/switch-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Switch } from '@/components/ui'\n\nexport default function SwitchControlledDemo() {\n    const [darkMode, setDarkMode] = React.useState(false)\n    return (\n        <>\n            <Switch isSelected={darkMode} onChange={setDarkMode} value='dark_mode'>\n                Enable Dark Mode\n            </Switch>\n\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                Dark Mode is <strong>{darkMode ? 'enabled' : 'disabled'}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "controls/slider/slider-controlled-demo": {
    "component": "@/components/docs/controls/slider/slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderControlledDemo() {\n    const [temperature, setTemperature] = React.useState<number>(31)\n    const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n    return (\n        <div className='space-y-6'>\n            <div>\n                <Slider\n                    value={temperature}\n                    onChange={(v) => setTemperature(v as number)}\n                    label='Temperature'\n                    description={`Current temperature: ${temperature ?? '-'}`}\n                />\n            </div>\n            <div>\n                <Slider\n                    value={saturation}\n                    onChange={(v) => setSaturation(v as number[])}\n                    label='Saturation'\n                    description={`Current saturation: ${saturation ?? '-'}`}\n                />\n            </div>\n        </div>\n    )\n}\n"
  },
  "controls/slider/slider-range-demo": {
    "component": "@/components/docs/controls/slider/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderRangeDemo() {\n    return <Slider defaultValue={[25, 75]} label='Distance Range' />\n}\n"
  },
  "controls/slider/slider-prefix-suffix-demo": {
    "component": "@/components/docs/controls/slider/slider-prefix-suffix-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconVolume } from 'hq-icons'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderPrefixSuffixDemo() {\n    const [volume, setVolume] = React.useState<number>(0.5)\n    return (\n        <div className='items-center flex gap-4 [&>[data-slot=icon]]:translate-y-3.5 [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0'>\n            <Slider value={volume} onChange={(v) => setVolume(v as number)} label='Volume' />\n            <IconVolume />\n        </div>\n    )\n}\n"
  },
  "controls/slider/slider-demo": {
    "component": "@/components/docs/controls/slider/slider-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDemo() {\n    return <Slider label='Volume' />\n}\n"
  },
  "controls/slider/slider-orientation-demo": {
    "component": "@/components/docs/controls/slider/slider-orientation-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Card, Description, Slider } from '@/components/ui'\n\nexport default function SliderOrientationDemo() {\n    const [equalizer, setEqualizer] = useState({\n        subBass: 40,\n        bass: 50,\n        lowMid: 60,\n        mid: 70,\n        highMid: 65,\n        presence: 75,\n        brilliance: 80\n    })\n\n    const handleSliderChange = (name: string, value: number) => {\n        setEqualizer((prev) => ({ ...prev, [name]: value }))\n    }\n\n    return (\n        <Card className='p-4'>\n            <div className='flex justify-center [&>*]:w-6 gap-4'>\n                <Slider\n                    aria-label='Sub Bass'\n                    value={equalizer.subBass}\n                    onChange={(newValue) => handleSliderChange('subBass', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Bass'\n                    value={equalizer.bass}\n                    onChange={(newValue) => handleSliderChange('bass', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Low Mid'\n                    value={equalizer.lowMid}\n                    onChange={(newValue) => handleSliderChange('lowMid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Mid'\n                    value={equalizer.mid}\n                    onChange={(newValue) => handleSliderChange('mid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='High Mid'\n                    value={equalizer.highMid}\n                    onChange={(newValue) => handleSliderChange('highMid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Presence'\n                    value={equalizer.presence}\n                    onChange={(newValue) => handleSliderChange('presence', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Brilliance'\n                    value={equalizer.brilliance}\n                    onChange={(newValue) => handleSliderChange('brilliance', newValue as number)}\n                    orientation='vertical'\n                />\n            </div>\n            <Description className='mt-6 block text-center'>Equilizer</Description>\n        </Card>\n    )\n}\n"
  },
  "controls/slider/slider-disabled-demo": {
    "component": "@/components/docs/controls/slider/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDisabledDemo() {\n    return <Slider isDisabled label='Volume' />\n}\n"
  },
  "controls/slider/slider-step-demo": {
    "component": "@/components/docs/controls/slider/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderStepDemo() {\n    return <Slider step={10} description='Step in 10' label='Progress tracking' />\n}\n"
  },
  "controls/command-menu/command-menu-disabled-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandDisabledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section heading='Suggestions'>\n                        <Command.Item>\n                            PhpStorm\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            WebStorm\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item disabled>\n                            Warp\n                            <Command.Description>Need to enable</Command.Description>\n                        </Command.Item>\n                        <Command.Item disabled>\n                            Sublime Text\n                            <Command.Description>Need to enable</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            VS Code\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item disabled>\n                            Atom\n                            <Command.Description>Killed</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-danger-item-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-danger-item-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandDangerItemDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section>\n                        <Command.Item>System Shutdown</Command.Item>\n                        <Command.Item isDanger>Format Disk</Command.Item>\n                        <Command.Item>Restart Service</Command.Item>\n                        <Command.Item>Empty Trash</Command.Item>\n                        <Command.Item>Overwrite File</Command.Item>\n                        <Command.Item isDanger>Reset Factory Settings</Command.Item>\n                        <Command.Item>Disconnect Network</Command.Item>\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-keyboard-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-keyboard-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandKeyboardDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Item>\n                        Account Settings\n                        <Command.Keyboard keys='⌘A' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Profile\n                        <Command.Keyboard keys='⌘P' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Notifications\n                        <Command.Keyboard keys='⌘N' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Privacy Settings\n                        <Command.Keyboard keys='⌘S' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Billing Information\n                        <Command.Keyboard keys='⌘B' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Logout\n                        <Command.Keyboard keys='⌘L' />\n                    </Command.Item>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-blur-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-blur-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBox, IconDollar, IconHome, IconNotebook, IconSettings, IconShield } from 'hq-icons'\nimport Link from 'next/link'\n\n// Replace with your router link component\nimport { Avatar, Button, Command } from '@/components/ui'\n\nexport default function CommandBlurDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isBlurred isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section separator heading='Pages'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconHome /> Home\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconNotebook /> Docs\n                                <Command.Keyboard keys='⌘k' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconBox /> Components\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section separator heading='Dashboard'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconDollar /> Billing\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconSettings /> Settings\n                                <Command.Keyboard keys='⌘s' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconShield /> Security\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section heading='Team'>\n                        {users.map((user) => (\n                            <Command.Item key={user.id}>\n                                <Avatar src={user.image_url} />\n                                {user.name}\n                            </Command.Item>\n                        ))}\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' }\n]\n"
  },
  "controls/command-menu/command-menu-controlled-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Avatar, Button, Command } from '@/components/ui'\n\nexport default function CommandControlledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command\n                onValueChange={setValue}\n                value={value}\n                isOpen={isOpen}\n                onOpenChange={setIsOpen}\n            >\n                <Command.Input defaultValue={value} placeholder='Quick search...' />\n                <Command.List>\n                    {users.map((user) => (\n                        <Command.Item key={user.id} value={user.name}>\n                            <Avatar src={user.image_url} />\n                            {user.name}{' '}\n                            {user.name === value && (\n                                <Command.Description>Selected: {value}</Command.Description>\n                            )}\n                        </Command.Item>\n                    ))}\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "controls/command-menu/command-menu-separator-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-separator-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandSeparatorDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Item asChild>\n                        <a href='#'>Profile Overview</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Profile Settings</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Security Settings</a>\n                    </Command.Item>\n                    <Command.Separator />\n                    <Command.Item asChild>\n                        <a href='#'>Notification Preferences</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Privacy Settings</a>\n                    </Command.Item>\n                    <Command.Separator />\n                    <Command.Item asChild>\n                        <a href='#'>Billing Information</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Subscription Plans</a>\n                    </Command.Item>\n                    <Command.Separator />\n                    <Command.Item asChild>\n                        <a href='#'>Connected Apps</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Logout</a>\n                    </Command.Item>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBox, IconDollar, IconHome, IconNotebook, IconSettings, IconShield } from 'hq-icons'\nimport Link from 'next/link'\n\n// Replace with your router link component\nimport { Avatar, Button, Command } from '@/components/ui'\n\nexport default function CommandDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section separator heading='Pages'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconHome /> Home\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconNotebook /> Docs\n                                <Command.Keyboard keys='⌘k' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconBox /> Components\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section separator heading='Dashboard'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconDollar /> Billing\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconSettings /> Settings\n                                <Command.Keyboard keys='⌘s' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconShield /> Security\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section heading='Team'>\n                        {users.map((user) => (\n                            <Command.Item key={user.id}>\n                                <Avatar src={user.image_url} />\n                                {user.name}\n                            </Command.Item>\n                        ))}\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' }\n]\n"
  },
  "controls/command-menu/command-menu-description-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-description-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBox } from 'hq-icons'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandDescriptionDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command\n                messageOnEmpty={false}\n                hideCloseButton\n                hideSearchIndicator\n                isOpen={isOpen}\n                onOpenChange={setIsOpen}\n            >\n                <Command.Input placeholder='Search for apps and commands...' />\n                <Command.Empty className='grid place-content-center'>\n                    <div className='text-center'>\n                        <IconBox className='inline' />\n                        <p className='mt-2'>No results found.</p>\n                    </div>\n                </Command.Empty>\n\n                <Command.List>\n                    <Command.Section separator heading='Suggestions'>\n                        <Command.Item>\n                            PhpStorm\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            WebStorm\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            Warp\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n\n                    <Command.Section separator heading='Applications'>\n                        <Command.Item>\n                            Terminal\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            Docker\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n\n                    <Command.Section separator heading='Commands'>\n                        <Command.Item>\n                            git status\n                            <Command.Description>Command</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            bun add\n                            <Command.Description>Command</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            composer require\n                            <Command.Description>Command</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n\n                    <Command.Section heading='System Settings'>\n                        <Command.Item>\n                            Display Brightness\n                            <Command.Description>System Settings</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            Sound Output\n                            <Command.Description>System Settings</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-trigger-by-keyboard-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-trigger-by-keyboard-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBox, IconCreditCard, IconHome, IconNotebook, IconSettings, IconShield } from 'hq-icons'\nimport Link from 'next/link'\n\nimport { Command } from '@/components/ui'\n\nexport default function CommandTriggerByKeyboardDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    React.useEffect(() => {\n        const down = (e: KeyboardEvent) => {\n            if (e.key === '/' && (e.metaKey || e.ctrlKey)) {\n                e.preventDefault()\n                setIsOpen((open: boolean) => !open)\n            }\n        }\n\n        document.addEventListener('keydown', down)\n\n        return () => document.removeEventListener('keydown', down)\n    }, [setIsOpen])\n    return (\n        <>\n            ⌘ /\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section separator heading='Pages'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconHome /> Home\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconNotebook /> Docs\n                                <Command.Keyboard keys='⌘k' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconBox /> Components\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section heading='Dashboard'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconCreditCard /> Billing\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconSettings /> Settings\n                                <Command.Keyboard keys='⌘s' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconShield /> Security\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-section-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-section-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandSectionDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section heading='Pages'>\n                        <Command.Item asChild>\n                            <a href='/public'>Home</a>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <a href='/components'>Components</a>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Separator />\n                    <Command.Section heading='Users'>\n                        {users.map((user) => (\n                            <Command.Item key={user.id}>{user.name}</Command.Item>\n                        ))}\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "controls/context-menu/context-menu-disabled-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-disabled-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDisabledDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item id='view'>View</ContextMenu.Item>\n                <ContextMenu.Item id='edit'>Edit</ContextMenu.Item>\n                <ContextMenu.Item id='gsu' isDisabled>\n                    Generate Short URL\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-separator-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-separator-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuSeparatorDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item id='view'>View</ContextMenu.Item>\n                <ContextMenu.Item id='edit'>Edit</ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item id='gsu'>Generate Short URL</ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content className='sm:min-w-56'>\n                <ContextMenu.Item>Back</ContextMenu.Item>\n                <ContextMenu.Item isDisabled>Forward</ContextMenu.Item>\n                <ContextMenu.Item>Reload</ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>Bookmark</ContextMenu.Item>\n                <ContextMenu.Item>Save as</ContextMenu.Item>\n                <ContextMenu.Item>\n                    Select all\n                    <ContextMenu.Keyboard keys='⌘A' />\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>View source</ContextMenu.Item>\n                <ContextMenu.Item>Inspect Accessibility</ContextMenu.Item>\n                <ContextMenu.Item>Inspect</ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-item-details-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-item-details-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuItemDetailsDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content items={roles}>\n                {(item) => (\n                    <ContextMenu.Item id={item.id} textValue={item.name}>\n                        <ContextMenu.ItemDetails label={item.name} description={item.description} />\n                    </ContextMenu.Item>\n                )}\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n"
  },
  "controls/context-menu/context-menu-danger-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-danger-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDangerDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item>Open</ContextMenu.Item>\n                <ContextMenu.Item>Rename</ContextMenu.Item>\n                <ContextMenu.Item>Duplicate</ContextMenu.Item>\n                <ContextMenu.Item>Share</ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>Delete</ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-with-icon-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-with-icon-demo",
    "raw": "'use client'\n\nimport { IconCopy, IconFolder, IconHighlighter, IconTrash, IconUpload } from 'hq-icons'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuWithIconDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item>\n                    <IconFolder />\n                    Open\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconHighlighter />\n                    Rename\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconCopy />\n                    Duplicate\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconUpload />\n                    Share\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>\n                    <IconTrash />\n                    Delete\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustify,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconChevronDown,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconImage,\n    IconItalic,\n    IconLayoutGrid,\n    IconLink,\n    IconStrikethrough,\n    IconUnderline\n} from 'hq-icons'\n\nimport { Button, Checkbox, Menu, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDemo() {\n    return (\n        <Toolbar aria-label='Toolbars'>\n            <Toolbar.Group aria-label='Text Formatting Options'>\n                <Toolbar.Item aria-label='Bold' size='icon' variant='outline'>\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Italic' size='icon' variant='outline'>\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Underline' size='icon' variant='outline'>\n                    <IconUnderline />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Strikethrough' size='icon' variant='outline'>\n                    <IconStrikethrough />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment'>\n                <Toolbar.Item aria-label='Align Left' size='icon' variant='outline'>\n                    <IconAlignLeft />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Center' size='icon' variant='outline'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Right' size='icon' variant='outline'>\n                    <IconAlignRight />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify' size='icon' variant='outline'>\n                    <IconAlignJustify />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group className='ml-auto'>\n                <Menu>\n                    <Button aria-label='Other options' variant='outline' size='sm'>\n                        Options...\n                        <IconChevronDown />\n                    </Button>\n                    <Menu.Content showArrow placement='bottom right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconImage />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n            <Checkbox>Spell Check</Checkbox>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-orientation-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-orientation-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustify,\n    IconAlignLeft,\n    IconCamera,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconEllipsisVertical,\n    IconImage,\n    IconLayoutGrid,\n    IconLink,\n    IconPencil,\n    IconPencilRuler,\n    IconPointer\n} from 'hq-icons'\n\nimport { Button, Menu, Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarOrientationDemo() {\n    return (\n        <Toolbar aria-label='Toolbox' orientation='vertical'>\n            <Toolbar.Group aria-label='Toolbox'>\n                <Toolbar.Item aria-label='Cursor' size='icon' variant='outline'>\n                    <IconPointer />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencil />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencilRuler />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Gallery'>\n                <Toolbar.Item aria-label='Camera' size='icon' variant='outline'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery' size='icon' variant='outline'>\n                    <IconImage />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment'>\n                <Toggle aria-label='Align Left' size='icon' variant='outline'>\n                    <IconAlignLeft />\n                </Toggle>\n                <Toolbar.Item aria-label='Align Center' size='icon' variant='outline'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify' size='icon' variant='outline'>\n                    <IconAlignJustify />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group>\n                <Menu>\n                    <Button aria-label='Other options' variant='outline' size='icon'>\n                        <IconEllipsisVertical />\n                    </Button>\n                    <Menu.Content showArrow placement='right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconImage />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-disabled-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-disabled-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignJustify,\n    IconAlignRight,\n    IconCamera,\n    IconImage,\n    IconPencil,\n    IconPencilRuler,\n    IconPointer\n} from 'hq-icons'\n\nimport { Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDisabledDemo() {\n    return (\n        <Toolbar aria-label='Toolbox'>\n            <Toolbar.Group aria-label='Toolbox'>\n                <Toggle isDisabled aria-label='Cursor' size='icon' variant='outline'>\n                    <IconPointer />\n                </Toggle>\n                <Toggle aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencil />\n                </Toggle>\n                <Toggle aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencilRuler />\n                </Toggle>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group isDisabled aria-label='Gallery'>\n                <Toolbar.Item aria-label='Camera' size='icon' variant='outline'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery' size='icon' variant='outline'>\n                    <IconImage />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment'>\n                <Toggle aria-label='Align Right' size='icon' variant='outline'>\n                    <IconAlignRight />\n                </Toggle>\n                <Toggle aria-label='Align Justify' size='icon' variant='outline'>\n                    <IconAlignJustify />\n                </Toggle>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "chart/line/line-chart-demo": {
    "component": "@/components/docs/chart/line/line-chart-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 186 },\n    { month: 'February', sales: 305 },\n    { month: 'March', sales: 237 },\n    { month: 'April', sales: 73 },\n    { month: 'May', sales: 209 },\n    { month: 'June', sales: 214 },\n    { month: 'July', sales: 186 },\n    { month: 'August', sales: 305 },\n    { month: 'September', sales: 237 },\n    { month: 'October', sales: 73 },\n    { month: 'November', sales: 209 },\n    { month: 'December', sales: 214 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart</Card.Title>\n                <Card.Description>January - December 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <LineChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='sales'\n                            type='natural'\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Sales increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for one year\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/line/line-chart-dots-color-demo": {
    "component": "@/components/docs/chart/line/line-chart-dots-color-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { CartesianGrid, Dot, Line, LineChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors',\n        color: 'hsl(var(--primary-chart))'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--primary-chart))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--tertiary-chart))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--highlight-chart))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--accent-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsColorDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Dots Colors</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <LineChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            top: 24,\n                            left: 24,\n                            right: 24\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={\n                                <Chart.TooltipContent\n                                    indicator='line'\n                                    nameKey='visitors'\n                                    hideLabel\n                                />\n                            }\n                        />\n                        <Line\n                            dataKey='visitors'\n                            type='natural'\n                            stroke='var(--color-visitors)'\n                            strokeWidth={2}\n                            dot={({ payload, ...props }) => {\n                                return (\n                                    <Dot\n                                        key={payload.browser}\n                                        r={5}\n                                        cx={props.cx}\n                                        cy={props.cy}\n                                        fill={payload.fill}\n                                        stroke={payload.fill}\n                                    />\n                                )\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 10 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/line/line-chart-multiple-demo": {
    "component": "@/components/docs/chart/line/line-chart-multiple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 186, profit: 80 },\n    { month: 'February', sales: 305, profit: 200 },\n    { month: 'March', sales: 237, profit: 120 },\n    { month: 'April', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'June', sales: 214, profit: 140 },\n    { month: 'July', sales: 186, profit: 80 },\n    { month: 'August', sales: 305, profit: 200 },\n    { month: 'September', sales: 237, profit: 120 },\n    { month: 'October', sales: 73, profit: 190 },\n    { month: 'November', sales: 209, profit: 130 },\n    { month: 'December', sales: 214, profit: 140 },\n    { month: 'January', sales: 186, profit: 80 },\n    { month: 'February', sales: 305, profit: 200 },\n    { month: 'March', sales: 237, profit: 120 },\n    { month: 'April', sales: 73, profit: 190 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Multiple</Card.Title>\n                <Card.Description>\n                    Today&apos;s sales and profit for the last 16 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <LineChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <Line\n                            dataKey='sales'\n                            type='monotone'\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                        <Line\n                            dataKey='profit'\n                            type='monotone'\n                            stroke='var(--color-profit)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Profit and sales increased by 12.5% this year <IconTrendingUp />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January 2023 - April 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/line/line-chart-dots-demo": {
    "component": "@/components/docs/chart/line/line-chart-dots-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 186, profit: 80 },\n    { month: 'February', sales: 305, profit: 200 },\n    { month: 'March', sales: 237, profit: 120 },\n    { month: 'April', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'June', sales: 214, profit: 140 },\n    { month: 'July', sales: 186, profit: 80 },\n    { month: 'August', sales: 305, profit: 200 },\n    { month: 'September', sales: 237, profit: 120 },\n    { month: 'October', sales: 73, profit: 190 },\n    { month: 'November', sales: 209, profit: 130 },\n    { month: 'December', sales: 214, profit: 140 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Dots</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <LineChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='sales'\n                            type='natural'\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-sales)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Profit increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total profit for the last 10 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/line/line-chart-linear-demo": {
    "component": "@/components/docs/chart/line/line-chart-linear-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 186 },\n    { month: 'February', sales: 305 },\n    { month: 'March', sales: 237 },\n    { month: 'April', sales: 73 },\n    { month: 'May', sales: 209 },\n    { month: 'June', sales: 214 },\n    { month: 'July', sales: 186 },\n    { month: 'August', sales: 305 },\n    { month: 'September', sales: 237 },\n    { month: 'October', sales: 73 },\n    { month: 'November', sales: 209 },\n    { month: 'December', sales: 214 },\n    { month: 'January', sales: 186 },\n    { month: 'February', sales: 305 },\n    { month: 'March', sales: 237 },\n    { month: 'April', sales: 73 },\n    { month: 'May', sales: 209 },\n    { month: 'June', sales: 214 },\n    { month: 'July', sales: 186 },\n    { month: 'August', sales: 305 },\n    { month: 'September', sales: 237 },\n    { month: 'October', sales: 373 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Linear</Card.Title>\n                <Card.Description>January - December 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <LineChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='sales'\n                            type='linear'\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Sales increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing sales for january 2023 to october 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/line/line-chart-label-demo": {
    "component": "@/components/docs/chart/line/line-chart-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { CartesianGrid, LabelList, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', revenue: 400 },\n    { month: 'February', revenue: 700 },\n    { month: 'March', revenue: 500 },\n    { month: 'April', revenue: 850 },\n    { month: 'May', revenue: 200 },\n    { month: 'June', revenue: 500 },\n    { month: 'July', revenue: 600 },\n    { month: 'August', revenue: 500 },\n    { month: 'September', revenue: 800 },\n    { month: 'October', revenue: 900 }\n]\n\nconst config = {\n    revenue: {\n        label: 'Revenue',\n        color: 'hsl(var(--primary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Label</Card.Title>\n                <Card.Description>January - October 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <LineChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            top: 20,\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-revenue)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-foreground'\n                                fontSize={12}\n                            />\n                        </Line>\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Revenue increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total revenue for the last 10 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/area/area-chart-demo": {
    "component": "@/components/docs/chart/area/area-chart-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 900 },\n    { month: 'February', sales: 1200 },\n    { month: 'March', sales: 700 },\n    { month: 'April', sales: 900 },\n    { month: 'May', sales: 2100 },\n    { month: 'June', sales: 800 },\n    { month: 'July', sales: 1000 },\n    { month: 'August', sales: 2400 },\n    { month: 'September', sales: 1237 },\n    { month: 'October', sales: 2173 },\n    { month: 'November', sales: 1209 },\n    { month: 'December', sales: 2214 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart</Card.Title>\n                <Card.Description>Showing total sales for last year</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='sales'\n                            type='natural'\n                            fill='var(--color-sales)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-sales)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Sales increased by 8.4% this year <IconTrendingUp />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - December 2023\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/area/area-chart-linear-demo": {
    "component": "@/components/docs/chart/area/area-chart-linear-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', revenue: 5000 },\n    { month: 'February', revenue: 2000 },\n    { month: 'March', revenue: 3500 },\n    { month: 'April', revenue: 4000 },\n    { month: 'May', revenue: 3300 },\n    { month: 'June', revenue: 5000 },\n    { month: 'July', revenue: 1900 },\n    { month: 'August', revenue: 4000 },\n    { month: 'September', revenue: 2000 },\n    { month: 'October', revenue: 7000 },\n    { month: 'November', revenue: 3000 },\n    { month: 'December', revenue: 9500 }\n]\n\nconst config = {\n    revenue: {\n        label: 'Revenue',\n        color: 'hsl(var(--primary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Linear</Card.Title>\n                <Card.Description>Showing total revenue for this year</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dot' hideLabel />}\n                        />\n                        <Area\n                            dataKey='revenue'\n                            type='linear'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-revenue)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Revenue increased by 12.5% this year <IconTrendingUp />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - December 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/area/area-chart-stacked-demo": {
    "component": "@/components/docs/chart/area/area-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', organic: 50, paid: 20, referral: 10 },\n    { month: 'February', organic: 100, paid: 50, referral: 100 },\n    { month: 'March', organic: 60, paid: 20, referral: 30 },\n    { month: 'April', organic: 200, paid: 30, referral: 140 },\n    { month: 'May', organic: 160, paid: 90, referral: 100 },\n    { month: 'June', organic: 100, paid: 100, referral: 170 },\n    { month: 'July', organic: 80, paid: 20, referral: 160 },\n    { month: 'August', organic: 120, paid: 140, referral: 180 },\n    { month: 'September', organic: 60, paid: 60, referral: 100 },\n    { month: 'October', organic: 100, paid: 120, referral: 220 },\n    { month: 'November', organic: 120, paid: 60, referral: 40 },\n    { month: 'December', organic: 240, paid: 120, referral: 160 }\n]\n\nconst config = {\n    organic: {\n        label: 'Organic Traffic',\n        color: 'hsl(var(--primary-chart))'\n    },\n    paid: {\n        label: 'Paid Traffic',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    referral: {\n        label: 'Referral Traffic',\n        color: 'hsl(var(--tertiary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedTrafficSources() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Stacked</Card.Title>\n                <Card.Description>\n                    Traffic data from various sources over the last 10 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            left: 10,\n                            right: 10\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dot' />}\n                        />\n                        <Area\n                            dataKey='referral'\n                            type='natural'\n                            fill='var(--color-referral)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-referral)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='paid'\n                            type='natural'\n                            fill='var(--color-paid)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-paid)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='organic'\n                            type='natural'\n                            fill='var(--color-organic)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-organic)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Overall traffic increased by 15.5% this month\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - October 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/area/area-chart-gradient-demo": {
    "component": "@/components/docs/chart/area/area-chart-gradient-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 186, profit: 80 },\n    { month: 'February', sales: 305, profit: 200 },\n    { month: 'March', sales: 237, profit: 120 },\n    { month: 'April', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'June', sales: 214, profit: 140 },\n    { month: 'July', sales: 186, profit: 80 },\n    { month: 'August', sales: 305, profit: 200 },\n    { month: 'September', sales: 237, profit: 120 },\n    { month: 'October', sales: 73, profit: 190 },\n    { month: 'November', sales: 209, profit: 130 },\n    { month: 'December', sales: 314, profit: 240 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartGradientDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Gradient</Card.Title>\n                <Card.Description>Showing total visitors for the this year</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <defs>\n                            <linearGradient id='fillSales' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-sales)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-sales)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                            <linearGradient id='fillProfit' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-profit)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-profit)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                        </defs>\n                        <Area\n                            dataKey='profit'\n                            type='natural'\n                            fill='url(#fillProfit)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-profit)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='sales'\n                            type='natural'\n                            fill='url(#fillSales)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-sales)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Profit increased by 10.2% this year <IconTrendingUp />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - December 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/pie/pie-chart-stacked-demo": {
    "component": "@/components/docs/chart/pie/pie-chart-stacked-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'january', sales: 186, fill: 'var(--color-january)' },\n    { month: 'february', sales: 305, fill: 'var(--color-february)' },\n    { month: 'march', sales: 237, fill: 'var(--color-march)' },\n    { month: 'april', sales: 173, fill: 'var(--color-april)' },\n    { month: 'may', sales: 209, fill: 'var(--color-may)' }\n]\n\nconst profitData = [\n    { month: 'january', profit: 80, fill: 'var(--color-january)' },\n    { month: 'february', profit: 200, fill: 'var(--color-february)' },\n    { month: 'march', profit: 120, fill: 'var(--color-march)' },\n    { month: 'april', profit: 190, fill: 'var(--color-april)' },\n    { month: 'may', profit: 130, fill: 'var(--color-may)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    sales: {\n        label: 'Sales'\n    },\n    profit: {\n        label: 'Profit'\n    },\n    january: {\n        label: 'January',\n        color: 'hsl(var(--primary-chart))'\n    },\n    february: {\n        label: 'February',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    march: {\n        label: 'March',\n        color: 'hsl(var(--tertiary-chart))'\n    },\n    april: {\n        label: 'April',\n        color: 'hsl(var(--highlight-chart))'\n    },\n    may: {\n        label: 'May',\n        color: 'hsl(var(--accent-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartStackedDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Stacked</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    className='mx-auto aspect-square max-h-[250px] pb-0 [&_.recharts-pie-label-text]:fill-foreground'\n                    config={config}\n                >\n                    <PieChart>\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    labelKey='visitors'\n                                    nameKey='month'\n                                    indicator='line'\n                                    labelFormatter={(_, payload) => {\n                                        return config[payload?.[0].dataKey as keyof typeof config]\n                                            .label\n                                    }}\n                                />\n                            }\n                        />\n                        <Pie data={data} dataKey='sales' outerRadius={60} />\n                        <Pie data={profitData} dataKey='profit' innerRadius={70} outerRadius={90} />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/pie/pie-chart-label-demo": {
    "component": "@/components/docs/chart/pie/pie-chart-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { brand: 'apple', visitors: 175, fill: 'var(--color-apple)' },\n    { brand: 'samsung', visitors: 100, fill: 'var(--color-samsung)' },\n    { brand: 'huawei', visitors: 187, fill: 'var(--color-huawei)' },\n    { brand: 'xiaomi', visitors: 173, fill: 'var(--color-xiaomi)' },\n    { brand: 'google', visitors: 90, fill: 'var(--color-google)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    apple: {\n        label: 'Apple',\n        color: 'hsl(var(--primary-chart))'\n    },\n    samsung: {\n        label: 'Samsung',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    huawei: {\n        label: 'Huawei',\n        color: 'hsl(var(--tertiary-chart))'\n    },\n    xiaomi: {\n        label: 'Xiaomi',\n        color: 'hsl(var(--highlight-chart))'\n    },\n    google: {\n        label: 'Google',\n        color: 'hsl(var(--accent-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLabelDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Label</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    config={config}\n                    className='mx-auto aspect-square max-h-[250px] pb-0 [&_.recharts-pie-label-text]:fill-foreground'\n                >\n                    <PieChart>\n                        <Chart.Tooltip content={<Chart.TooltipContent hideLabel />} />\n                        <Pie data={data} dataKey='visitors' label nameKey='brand' />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/pie/pie-chart-legend-demo": {
    "component": "@/components/docs/chart/pie/pie-chart-legend-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--primary-chart))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--tertiary-chart))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--highlight-chart))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--accent-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLegendDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Legend</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    className='min-h-[300px] mx-auto aspect-square max-h-[300px] w-full'\n                    config={config}\n                >\n                    <PieChart>\n                        <Pie data={data} dataKey='visitors' />\n                        <Chart.Legend\n                            content={<Chart.LegendContent nameKey='browser' />}\n                            className='-translate-y-2 gap-2 [&>*]:basis-1/4 [&>*]:justify-center'\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "chart/pie/pie-chart-interactive-demo": {
    "component": "@/components/docs/chart/pie/pie-chart-interactive-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Label, Pie, PieChart, Sector } from 'recharts'\nimport type { PieSectorDataItem } from 'recharts/types/polar/Pie'\n\nimport { Card, Chart, type ChartConfig, Select } from '@/components/ui'\n\nconst data = [\n    { month: 'january', sales: 186, fill: 'var(--color-january)' },\n    { month: 'february', sales: 305, fill: 'var(--color-february)' },\n    { month: 'march', sales: 237, fill: 'var(--color-march)' },\n    { month: 'april', sales: 173, fill: 'var(--color-april)' },\n    { month: 'may', sales: 209, fill: 'var(--color-may)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    sales: {\n        label: 'Sales'\n    },\n    profit: {\n        label: 'Profit'\n    },\n    january: {\n        label: 'January',\n        color: 'hsl(var(--primary-chart))'\n    },\n    february: {\n        label: 'February',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    march: {\n        label: 'March',\n        color: 'hsl(var(--tertiary-chart))'\n    },\n    april: {\n        label: 'April',\n        color: 'hsl(var(--highlight-chart))'\n    },\n    may: {\n        label: 'May',\n        color: 'hsl(var(--accent-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartInteractiveDemo() {\n    const id = 'pie-interactive'\n    const [activeMonth, setActiveMonth] = React.useState<Key>(data[0].month)\n\n    const activeIndex = React.useMemo(\n        () => data.findIndex((item) => item.month === activeMonth),\n        [activeMonth]\n    )\n    const months = React.useMemo(() => data.map((item) => item.month), [])\n\n    return (\n        <Card data-chart={id} className='flex flex-col'>\n            <Chart.Style id={id} config={config} />\n            <Card.Header className='flex-row items-start space-y-0 pb-0'>\n                <div className='grid w-full gap-1'>\n                    <Card.Title>Pie Chart - Interactive</Card.Title>\n                    <Card.Description>January - June 2024</Card.Description>\n                </div>\n                <Select selectedKey={activeMonth} onSelectionChange={setActiveMonth}>\n                    {months.map((key) => {\n                        const _config = config[key as keyof typeof config]\n                        if (!_config) {\n                            return null\n                        }\n                        return (\n                            <Select.Item key={key} id={key}>\n                                <div className='flex items-center gap-2 text-xs'>\n                                    {_config?.label}\n                                </div>\n                            </Select.Item>\n                        )\n                    })}\n                </Select>\n            </Card.Header>\n            <Card.Content className='flex flex-1 justify-center pb-0'>\n                <Chart\n                    id={id}\n                    config={config}\n                    className='mx-auto aspect-square w-full max-w-[315px]'\n                >\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={data}\n                            dataKey='sales'\n                            nameKey='month'\n                            innerRadius={60}\n                            strokeWidth={5}\n                            activeIndex={activeIndex}\n                            activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                                <g>\n                                    <Sector {...props} outerRadius={outerRadius + 10} />\n                                    <Sector\n                                        {...props}\n                                        outerRadius={outerRadius + 25}\n                                        innerRadius={outerRadius + 12}\n                                    />\n                                </g>\n                            )}\n                        >\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-foreground text-3xl font-bold'\n                                                >\n                                                    {data[activeIndex].sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "chart/pie/pie-chart-demo": {
    "component": "@/components/docs/chart/pie/pie-chart-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Label, Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { plan: 'Basic', subscribers: 450, fill: 'var(--color-basic)' },\n    { plan: 'Standard', subscribers: 400, fill: 'var(--color-standard)' },\n    { plan: 'Premium', subscribers: 400, fill: 'var(--color-premium)' },\n    { plan: 'Pro', subscribers: 250, fill: 'var(--color-pro)' },\n    { plan: 'Enterprise', subscribers: 800, fill: 'var(--color-enterprise)' }\n]\n\nconst config = {\n    subscribers: {\n        label: 'Subscribers'\n    },\n    basic: {\n        label: 'Basic',\n        color: 'hsl(var(--primary-chart))'\n    },\n    standard: {\n        label: 'Standard',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    premium: {\n        label: 'Premium',\n        color: 'hsl(var(--tertiary-chart))'\n    },\n    pro: {\n        label: 'Pro',\n        color: 'hsl(var(--highlight-chart))'\n    },\n    enterprise: {\n        label: 'Enterprise',\n        color: 'hsl(var(--accent-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDemo() {\n    const totalSubscribers = React.useMemo(() => {\n        return data.reduce((acc, curr) => acc + curr.subscribers, 0)\n    }, [])\n\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart</Card.Title>\n                <Card.Description>January - September 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    className='min-h-[250px] max-h-[250px] mx-auto aspect-square w-full'\n                    config={config}\n                >\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={data}\n                            dataKey='subscribers'\n                            nameKey='plan'\n                            innerRadius={60}\n                            strokeWidth={5}\n                        >\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-foreground text-3xl font-bold'\n                                                >\n                                                    {totalSubscribers.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Subscribers\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Subscribers increased by 8.5% this year <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total subscribers for the last 3 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/basic-chart-demo": {
    "component": "@/components/docs/chart/basic-chart-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 186, profit: 80 },\n    { month: 'February', sales: 305, profit: 200 },\n    { month: 'March', sales: 237, profit: 120 },\n    { month: 'April', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'June', sales: 214, profit: 140 },\n    { month: 'July', sales: 186, profit: 80 },\n    { month: 'August', sales: 305, profit: 200 },\n    { month: 'September', sales: 237, profit: 120 },\n    { month: 'October', sales: 73, profit: 190 },\n    { month: 'November', sales: 209, profit: 130 },\n    { month: 'December', sales: 214, profit: 140 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function BasicChartDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Sales</Card.Title>\n                <Card.Description>Showing sales for the last year</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={data}\n                        margin={{\n                            left: 10,\n                            right: 10\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <defs>\n                            <linearGradient id='fillSales' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-sales)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-sales)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                            <linearGradient id='fillProfit' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-profit)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-profit)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                        </defs>\n                        <Area\n                            dataKey='profit'\n                            type='natural'\n                            fill='url(#fillProfit)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-profit)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='sales'\n                            type='natural'\n                            fill='url(#fillSales)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-sales)'\n                            stackId='a'\n                        />\n                        <Chart.Legend content={<Chart.LegendContent />} className='mt-6' />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Profit increased by 10.2% this year <IconTrendingUp />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - December 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/bar/bar-chart-mixed-demo": {
    "component": "@/components/docs/chart/bar/bar-chart-mixed-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Bar, BarChart, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { brand: 'apple', visitors: 175, fill: 'var(--color-apple)' },\n    { brand: 'samsung', visitors: 100, fill: 'var(--color-samsung)' },\n    { brand: 'huawei', visitors: 187, fill: 'var(--color-huawei)' },\n    { brand: 'xiaomi', visitors: 173, fill: 'var(--color-xiaomi)' },\n    { brand: 'google', visitors: 90, fill: 'var(--color-google)' },\n    { brand: 'motorola', visitors: 120, fill: 'var(--color-motorola)' },\n    { brand: 'nokia', visitors: 150, fill: 'var(--color-nokia)' },\n    { brand: 'oppo', visitors: 130, fill: 'var(--color-oppo)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    apple: {\n        label: 'Apple',\n        color: 'hsl(var(--primary-chart))'\n    },\n    samsung: {\n        label: 'Samsung',\n        color: 'hsl(var(--primary-chart))'\n    },\n    huawei: {\n        label: 'Huawei',\n        color: 'hsl(var(--primary-chart))'\n    },\n    xiaomi: {\n        label: 'Xiaomi',\n        color: 'hsl(var(--primary-chart))'\n    },\n    google: {\n        label: 'Google',\n        color: 'hsl(var(--primary-chart))'\n    },\n    motorola: {\n        label: 'Motorola',\n        color: 'hsl(var(--primary-chart))'\n    },\n    nokia: {\n        label: 'Nokia',\n        color: 'hsl(var(--primary-chart))'\n    },\n    oppo: {\n        label: 'Oppo',\n        color: 'hsl(var(--primary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartMixedDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Mixed</Card.Title>\n                <Card.Description>January - September 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <BarChart\n                        accessibilityLayer\n                        data={data}\n                        layout='vertical'\n                        margin={{\n                            left: 0\n                        }}\n                    >\n                        <YAxis\n                            dataKey='brand'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => config[value as keyof typeof config]?.label}\n                        />\n                        <XAxis dataKey='visitors' type='number' hide />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='visitors' layout='vertical' radius={5} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 9 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/bar/bar-chart-horizontal-demo": {
    "component": "@/components/docs/chart/bar/bar-chart-horizontal-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 186, profit: 80 },\n    { month: 'February', sales: 305, profit: 200 },\n    { month: 'March', sales: 237, profit: 120 },\n    { month: 'April', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'June', sales: 214, profit: 140 },\n    { month: 'July', sales: 186, profit: 80 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    label: {\n        color: 'hsl(var(--background))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartHorizontalDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Horizontal</Card.Title>\n                <Card.Description>January - July 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <BarChart\n                        accessibilityLayer\n                        data={data}\n                        layout='vertical'\n                        margin={{\n                            right: 16\n                        }}\n                    >\n                        <CartesianGrid horizontal={false} />\n                        <YAxis\n                            dataKey='month'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                            hide\n                        />\n                        <XAxis dataKey='sales' type='number' hide />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Bar dataKey='sales' layout='vertical' fill='var(--color-sales)' radius={4}>\n                            <LabelList\n                                dataKey='month'\n                                position='insideLeft'\n                                offset={8}\n                                className='fill-background'\n                                fontSize={12}\n                            />\n                            <LabelList\n                                dataKey='sales'\n                                position='right'\n                                offset={8}\n                                className='fill-foreground'\n                                fontSize={12}\n                            />\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Sales increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 7 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/bar/bar-chart-demo": {
    "component": "@/components/docs/chart/bar/bar-chart-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 186, profit: 80 },\n    { month: 'February', sales: 305, profit: 200 },\n    { month: 'March', sales: 237, profit: 120 },\n    { month: 'April', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'June', sales: 214, profit: 140 },\n    { month: 'July', sales: 186, profit: 80 },\n    { month: 'August', sales: 305, profit: 200 },\n    { month: 'September', sales: 237, profit: 120 },\n    { month: 'October', sales: 73, profit: 190 },\n    { month: 'November', sales: 209, profit: 130 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart</Card.Title>\n                <Card.Description>January - November 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <BarChart accessibilityLayer data={data}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='sales' fill='var(--color-sales)' radius={4} />\n                        <Bar dataKey='profit' fill='var(--color-profit)' radius={4} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 10.5% this month <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total sales for the last 11 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/bar/bar-chart-multiple-demo": {
    "component": "@/components/docs/chart/bar/bar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', onlineCourses: 1200, webinars: 800 },\n    { month: 'February', onlineCourses: 800, webinars: 950 },\n    { month: 'March', onlineCourses: 1200, webinars: 1200 },\n    { month: 'April', onlineCourses: 1000, webinars: 1500 },\n    { month: 'May', onlineCourses: 1200, webinars: 1300 },\n    { month: 'June', onlineCourses: 1200, webinars: 1700 },\n    { month: 'July', onlineCourses: 1500, webinars: 1400 },\n    { month: 'August', onlineCourses: 1400, webinars: 2100 },\n    { month: 'September', onlineCourses: 2300, webinars: 1600 },\n    { month: 'October', onlineCourses: 1173, webinars: 2190 },\n    { month: 'November', onlineCourses: 1200, webinars: 1600 },\n    { month: 'December', onlineCourses: 1200, webinars: 1600 },\n    { month: 'January', onlineCourses: 1200, webinars: 800 },\n    { month: 'February', onlineCourses: 800, webinars: 950 },\n    { month: 'March', onlineCourses: 1200, webinars: 1200 },\n    { month: 'April', onlineCourses: 1000, webinars: 1500 },\n    { month: 'May', onlineCourses: 1200, webinars: 1300 },\n    { month: 'June', onlineCourses: 1200, webinars: 1700 },\n    { month: 'July', onlineCourses: 1500, webinars: 1400 },\n    { month: 'August', onlineCourses: 1400, webinars: 2100 }\n]\n\nconst config = {\n    onlineCourses: {\n        label: 'Online Courses',\n        color: 'hsl(var(--primary-chart))'\n    },\n    webinars: {\n        label: 'Webinars',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Multiple</Card.Title>\n                <Card.Description>January - October 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <BarChart accessibilityLayer data={data}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dashed' />}\n                        />\n                        <Bar dataKey='onlineCourses' fill='var(--color-onlineCourses)' radius={0} />\n                        <Bar dataKey='webinars' fill='var(--color-webinars)' radius={0} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Online courses increased by 15.2% this year <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total revenue for january 2023 to august 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/bar/bar-chart-analytic-demo": {
    "component": "@/components/docs/chart/bar/bar-chart-analytic-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Bar, BarChart, Rectangle, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    {\n        country: 'Canada',\n        count: 4276,\n        percentage: 22.0\n    },\n    {\n        country: 'Germany',\n        count: 3689,\n        percentage: 16.6\n    },\n    {\n        country: 'France',\n        count: 2134,\n        percentage: 9.6\n    },\n    {\n        country: 'Indonesia',\n        count: 3567,\n        percentage: 16.2\n    },\n    {\n        country: 'United Kingdom',\n        count: 2234,\n        percentage: 4.5\n    },\n    {\n        country: 'Brazil',\n        count: 1967,\n        percentage: 4.2\n    },\n    {\n        country: 'Canada',\n        count: 4276,\n        percentage: 22.0\n    }\n]\n\nconst config = {\n    count: {\n        label: 'Count',\n        color: 'hsl(var(--primary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartAnalyticDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Custom Label</Card.Title>\n                <Card.Description>\n                    The number of visitors to the website has increased by 15.5% this year\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <BarChart\n                        accessibilityLayer\n                        data={data}\n                        layout='vertical'\n                        barSize={30}\n                        margin={{ left: 0, right: 0 }}\n                    >\n                        <YAxis dataKey='name' type='category' hide />\n                        <XAxis dataKey='count' type='number' hide />\n                        <Bar\n                            dataKey='count'\n                            layout='vertical'\n                            fill='var(--color-count)'\n                            background={{ radius: 6, fill: 'hsl(var(--primary-chart)/20%)' }}\n                            radius={6}\n                            // @ts-expect-error unknown-type\n                            shape={(props) => (\n                                <>\n                                    <Rectangle {...props} />\n                                    <text\n                                        x={props.x + 10}\n                                        y={props.y + 20}\n                                        fill='hsl(var(--background))'\n                                    >\n                                        {props.country}\n                                    </text>\n                                    <text\n                                        x={props.background.width - 10}\n                                        y={props.y + 20}\n                                        textAnchor='end'\n                                        fill='hsl(var(--foreground))'\n                                    >\n                                        {props.count.toLocaleString()} (\n                                        {props.percentage.toFixed(1)}%)\n                                    </text>\n                                </>\n                            )}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dot' />}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Visitors increased by 5.2% this year <IconTrendingUp />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            Showing total visitors for last year\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radial/radial-chart-stacked-demo": {
    "component": "@/components/docs/chart/radial/radial-chart-stacked-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Label, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [{ month: 'january', sales: 1260, profit: 570 }]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartStackedDemo() {\n    const totalVisitors = data[0].sales + data[0].profit\n\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart - Stacked</Card.Title>\n                <Card.Description>August - December 2023</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex flex-1 items-center pb-0'>\n                <Chart\n                    className='min-h-[250px] max-h-[250px] w-full mx-auto aspect-square'\n                    config={config}\n                >\n                    <RadialBarChart data={data} endAngle={180} innerRadius={80} outerRadius={130}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text x={viewBox.cx} y={viewBox.cy} textAnchor='middle'>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) - 16}\n                                                    className='fill-foreground text-2xl font-bold'\n                                                >\n                                                    {totalVisitors.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 4}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                        <RadialBar\n                            dataKey='sales'\n                            stackId='a'\n                            cornerRadius={5}\n                            fill='var(--color-sales)'\n                            className='stroke-transparent stroke-2'\n                        />\n                        <RadialBar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            stackId='a'\n                            cornerRadius={5}\n                            className='stroke-transparent stroke-2'\n                        />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Profit increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total profit and sales for the last 3 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radial/radial-chart-demo": {
    "component": "@/components/docs/chart/radial/radial-chart-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { RadialBar, RadialBarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--primary-chart))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--tertiary-chart))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--highlight-chart))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--accent-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    className='min-h-[250px] max-h-[250px] mx-auto aspect-square w-full'\n                    config={config}\n                >\n                    <RadialBarChart data={data} innerRadius={30} outerRadius={110}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel nameKey='browser' />}\n                        />\n                        <RadialBar dataKey='visitors' background />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radial/radial-chart-shape-demo": {
    "component": "@/components/docs/chart/radial/radial-chart-shape-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [{ browser: 'safari', visitors: 1260, fill: 'var(--color-safari)' }]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartShapeDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart - Shape</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    className='min-h-[250px] max-h-[250px] mx-auto aspect-square w-full'\n                    config={config}\n                >\n                    <RadialBarChart\n                        data={chartData}\n                        endAngle={100}\n                        innerRadius={80}\n                        outerRadius={140}\n                    >\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-background'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='visitors' background />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-foreground text-4xl font-bold'\n                                                >\n                                                    {chartData[0].visitors.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radial/radial-chart-grid-demo": {
    "component": "@/components/docs/chart/radial/radial-chart-grid-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { PolarGrid, RadialBar, RadialBarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--primary-chart))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--secondary-chart))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--tertiary-chart))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--highlight-chart))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--accent-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartGridDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart - Grid</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    className='min-h-[250px] max-h-[250px] w-full mx-auto aspect-square'\n                    config={config}\n                >\n                    <RadialBarChart data={data} innerRadius={30} outerRadius={100}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel nameKey='browser' />}\n                        />\n                        <PolarGrid gridType='circle' />\n                        <RadialBar dataKey='visitors' />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radial/radial-chart-text-demo": {
    "component": "@/components/docs/chart/radial/radial-chart-text-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [{ browser: 'safari', visitors: 200, fill: 'var(--color-safari)' }]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartTextDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart - Text</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    className='min-h-[250px] max-h-[250px] mx-auto aspect-square w-full'\n                    config={config}\n                >\n                    <RadialBarChart\n                        data={data}\n                        startAngle={0}\n                        endAngle={250}\n                        innerRadius={80}\n                        outerRadius={110}\n                    >\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-background'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='visitors' background cornerRadius={10} />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-foreground text-4xl font-bold'\n                                                >\n                                                    {data[0].visitors.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Visitors increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 3 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radar/radar-chart-dots-demo": {
    "component": "@/components/docs/chart/radar/radar-chart-dots-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'Jan', sales: 186 },\n    { month: 'Feb', sales: 305 },\n    { month: 'Mar', sales: 237 },\n    { month: 'Apr', sales: 273 },\n    { month: 'May', sales: 209 },\n    { month: 'Jun', sales: 214 },\n    { month: 'Jul', sales: 186 },\n    { month: 'Aug', sales: 305 },\n    { month: 'Sep', sales: 237 },\n    { month: 'Oct', sales: 73 },\n    { month: 'Nov', sales: 209 },\n    { month: 'Dec', sales: 214 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center'>\n                <Card.Title>Radar Chart - Dots</Card.Title>\n                <Card.Description>Showing total visitors for last year</Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <RadarChart data={data}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='sales'\n                            fill='var(--color-sales)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Sales increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - December 2023\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radar/radar-chart-multiple-demo": {
    "component": "@/components/docs/chart/radar/radar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 186, profit: 80 },\n    { month: 'Aug', sales: 305, profit: 200 },\n    { month: 'Sep', sales: 237, profit: 120 },\n    { month: 'Oct', sales: 73, profit: 190 },\n    { month: 'Nov', sales: 209, profit: 130 },\n    { month: 'Dec', sales: 214, profit: 140 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Multiple</Card.Title>\n                <Card.Description>Showing total visitors for last year</Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <RadarChart data={data}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Profit increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - December 2023\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radar/radar-chart-icon-demo": {
    "component": "@/components/docs/chart/radar/radar-chart-icon-demo",
    "raw": "'use client'\n\nimport { IconArrowDownToLine, IconArrowUpToLine, IconTrendingUp } from 'hq-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'January', sales: 186, profit: 80 },\n    { month: 'February', sales: 305, profit: 200 },\n    { month: 'March', sales: 237, profit: 120 },\n    { month: 'April', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'June', sales: 214, profit: 140 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))',\n        icon: IconArrowUpToLine\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))',\n        icon: IconArrowDownToLine\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartIconDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Icons</Card.Title>\n                <Card.Description>Showing total visitors for the last 6 months</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <RadarChart\n                        data={data}\n                        margin={{\n                            top: -40,\n                            bottom: -10\n                        }}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                        <Chart.Legend className='mt-8' content={<Chart.LegendContent />} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 pt-4 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radar/radar-chart-demo": {
    "component": "@/components/docs/chart/radar/radar-chart-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'Jan', sales: 186 },\n    { month: 'Feb', sales: 305 },\n    { month: 'Mar', sales: 237 },\n    { month: 'Apr', sales: 273 },\n    { month: 'May', sales: 209 },\n    { month: 'Jun', sales: 214 },\n    { month: 'Jul', sales: 186 },\n    { month: 'Aug', sales: 305 },\n    { month: 'Sep', sales: 237 },\n    { month: 'Oct', sales: 73 },\n    { month: 'Nov', sales: 209 },\n    { month: 'Dec', sales: 214 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart</Card.Title>\n                <Card.Description>Showing total visitors for last year</Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <Chart className='min-h-[250px] max-h-[250px] w-full' config={config}>\n                    <RadarChart data={data}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Sales increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - December 2023\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "chart/radar/radar-chart-line-only-demo": {
    "component": "@/components/docs/chart/radar/radar-chart-line-only-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'hq-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = [\n    { month: 'Jan', sales: 186, profit: 160 },\n    { month: 'Feb', sales: 185, profit: 170 },\n    { month: 'Mar', sales: 207, profit: 180 },\n    { month: 'Apr', sales: 173, profit: 160 },\n    { month: 'May', sales: 160, profit: 190 },\n    { month: 'Jun', sales: 174, profit: 204 },\n    { month: 'Jul', sales: 186, profit: 80 },\n    { month: 'Aug', sales: 305, profit: 200 },\n    { month: 'Sep', sales: 237, profit: 120 },\n    { month: 'Oct', sales: 73, profit: 190 },\n    { month: 'Nov', sales: 209, profit: 130 },\n    { month: 'Dec', sales: 214, profit: 140 }\n]\n\nconst config = {\n    sales: {\n        label: 'Sales',\n        color: 'hsl(var(--primary-chart))'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'hsl(var(--secondary-chart))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartLineOnlyDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Lines Only</Card.Title>\n                <Card.Description>Showing total visitors for last year</Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <Chart\n                    className='min-h-[250px] max-h-[250px] w-full mx-auto aspect-square'\n                    config={config}\n                >\n                    <RadarChart data={data}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid radialLines={false} />\n                        <Radar\n                            dataKey='sales'\n                            fill='var(--color-sales)'\n                            fillOpacity={0}\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                        />\n                        <Radar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            fillOpacity={0}\n                            stroke='var(--color-profit)'\n                            strokeWidth={2}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Profit increased by 5.2% this year <IconTrendingUp />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - December 2023\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "buttons/button/button-loader-demo": {
    "component": "@/components/docs/buttons/button/button-loader-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconCircleCheck, IconKey } from 'hq-icons'\n\nimport { Button, Loader } from '@/components/ui'\n\nexport default function ButtonLoaderDemo() {\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const pressHandler = () => {\n        setLoading('loading')\n\n        setTimeout(() => setLoading('success'), 3000)\n\n        setTimeout(() => setLoading('idle'), 6000)\n    }\n\n    return (\n        <Button\n            isPending={loading === 'loading'}\n            className='w-52 justify-between'\n            onPress={pressHandler}\n        >\n            {loading === 'success' ? (\n                <IconCircleCheck />\n            ) : loading === 'loading' ? (\n                <Loader variant='spin' />\n            ) : (\n                <IconKey />\n            )}\n            {loading === 'loading'\n                ? 'Generating Key...'\n                : loading === 'success'\n                  ? 'Key Generated!'\n                  : 'Generate API Key'}\n        </Button>\n    )\n}\n"
  },
  "buttons/button/button-variant-demo": {
    "component": "@/components/docs/buttons/button/button-variant-demo",
    "raw": "'use client'\n\nimport { titleCase } from 'usemods'\n\nimport { Button, buttonVariants } from '@/components/ui'\n\ntype Appearance = keyof typeof buttonVariants.variants.variant\n\nexport default function ButtonVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(buttonVariants.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Button variant={variant as Appearance}>{titleCase(variant)}</Button>\n                </div>\n            ))}\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-icon-demo": {
    "component": "@/components/docs/buttons/button/button-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconDemo() {\n    return (\n        <Button variant='danger'>\n            <IconBrandGithub />\n            Github\n        </Button>\n    )\n}\n"
  },
  "buttons/button/button-pending-demo": {
    "component": "@/components/docs/buttons/button/button-pending-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconPlus } from 'hq-icons'\n\nimport { Button, ProgressCircle } from '@/components/ui'\n\nexport default function ButtonPendingDemo() {\n    const [isLoading, setLoading] = React.useState(false)\n\n    const handlePress = () => {\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n        }, 4500)\n    }\n    return (\n        <Button onPress={handlePress} isPending={isLoading}>\n            {({ isPending }) => (\n                <>\n                    {isPending ? (\n                        <ProgressCircle isIndeterminate aria-label='Creating...' />\n                    ) : (\n                        <IconPlus />\n                    )}\n                    {isLoading ? 'Creating...' : 'Create'}\n                </>\n            )}\n        </Button>\n    )\n}\n"
  },
  "buttons/button/button-link-demo": {
    "component": "@/components/docs/buttons/button/button-link-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Link } from '@/components/ui'\n\nexport default function ButtonLinkDemo() {\n    return (\n        <Link variant='unstyled' className={buttonVariants({ variant: 'success' })} href='#'>\n            Choicebox\n        </Link>\n    )\n}\n"
  },
  "buttons/button/button-shape-demo": {
    "component": "@/components/docs/buttons/button/button-shape-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonShapeDemo() {\n    return <Button shape='circle'>Label</Button>\n}\n"
  },
  "buttons/button/button-disabled-demo": {
    "component": "@/components/docs/buttons/button/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonDisabledDemo() {\n    return <Button isDisabled>Label</Button>\n}\n"
  },
  "buttons/button/button-size-demo": {
    "component": "@/components/docs/buttons/button/button-size-demo",
    "raw": "'use client'\n\nimport { IconBrandCleon } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonSizeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Button size='xs'>xs</Button>\n            <Button size='sm'>sm</Button>\n            <Button>md (default)</Button>\n            <Button size='icon'>\n                <IconBrandCleon />\n            </Button>\n            <Button size='lg'>lg</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-basic-demo": {
    "component": "@/components/docs/buttons/button/button-basic-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonBasicDemo() {\n    return <Button onPress={() => alert('You pressed me')}>Button</Button>\n}\n"
  },
  "buttons/toggle/toggle-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-variant-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleVariantDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Toggle>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle variant='outline'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n            <Toggle variant='ghost'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconLink, IconUnlink } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleControlledDemo() {\n    const [isSelected, setSelected] = React.useState(false)\n    return (\n        <Toggle size='icon' isSelected={isSelected} onChange={setSelected}>\n            {({ isSelected }) => <>{isSelected ? <IconUnlink /> : <IconLink />}</>}\n        </Toggle>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-orientation-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-orientation-demo",
    "raw": "import { IconCloud, IconCloudOff, IconLock, IconLockOpen, IconMoon, IconSun } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function App() {\n    return (\n        <div>\n            <Toggle.Group orientation='vertical' variant='ghost'>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconMoon /> : <IconSun />}\n                            {isSelected ? 'Dark' : 'Light'} Mode\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconLock /> : <IconLockOpen />}\n                            Secure Access {isSelected ? 'On' : 'Off'}\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconCloud /> : <IconCloudOff />}\n                            Always Sync\n                        </>\n                    )}\n                </Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-variant-demo",
    "raw": "'use client'\n\nimport { Separator, Toggle } from '@/components/ui'\n\nexport default function ToggleGroupVariantDemo() {\n    return (\n        <div className='flex flex-col gap-y-6'>\n            <Toggle.Group variant='solid' defaultSelectedKeys={['left']} selectionMode='single'>\n                <Toggle id='left'>Left</Toggle>\n                <Toggle id='center'>Center</Toggle>\n                <Toggle id='right'>Right</Toggle>\n            </Toggle.Group>\n            <Separator />\n            <Toggle.Group variant='outline' defaultSelectedKeys={['center']} selectionMode='single'>\n                <Toggle id='left'>Left</Toggle>\n                <Toggle id='center'>Center</Toggle>\n                <Toggle id='right'>Right</Toggle>\n            </Toggle.Group>\n            <Separator />\n            <Toggle.Group variant='ghost' defaultSelectedKeys={['right']} selectionMode='single'>\n                <Toggle id='left'>Left</Toggle>\n                <Toggle id='center'>Center</Toggle>\n                <Toggle id='right'>Right</Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-selection-mode-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-selection-mode-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupSelectionModeDemo() {\n    return (\n        <Toggle.Group defaultSelectedKeys={['center']} selectionMode='single'>\n            <Toggle id='left'>Left</Toggle>\n            <Toggle id='center'>Center</Toggle>\n            <Toggle id='right'>Right</Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-disabled-demo",
    "raw": "'use client'\n\nimport { IconPower } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDisabledDemo() {\n    return (\n        <Toggle size='icon' isDisabled>\n            <IconPower />\n        </Toggle>\n    )\n}\n"
  },
  "buttons/toggle/toggle-size-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-size-demo",
    "raw": "'use client'\n\nimport { IconLink, IconUnlink } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleSizeDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <Toggle variant='outline' size='icon'>\n                {({ isSelected }) => <>{isSelected ? <IconUnlink /> : <IconLink />}</>}\n            </Toggle>\n            <Toggle variant='outline' size='sm'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n            <Toggle variant='outline' size='md'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n            <Toggle variant='outline' size='lg'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-disabled-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDisabledDemo() {\n    return (\n        <Toggle.Group isDisabled>\n            <Toggle id='left'>Left</Toggle>\n            <Toggle id='center'>Center</Toggle>\n            <Toggle id='right'>Right</Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupControlledDemo() {\n    const [selected, setSelected] = React.useState(new Set<Key>(['bold']))\n\n    return (\n        <>\n            <Toggle.Group\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n            >\n                <Toggle id='bold'>Bold</Toggle>\n                <Toggle id='italic'>Italic</Toggle>\n                <Toggle id='underline'>Underline</Toggle>\n            </Toggle.Group>\n            {[...selected].length > 0 && (\n                <p className='text-muted-foreground mt-4'>\n                    Selected:{' '}\n                    <strong className='text-foreground font-semibold'>\n                        {[...selected].join(', ')}\n                    </strong>\n                </p>\n            )}\n        </>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-demo",
    "raw": "'use client'\n\nimport { IconHeading, IconParagraph } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDemo() {\n    return (\n        <Toggle.Group>\n            <Toggle>\n                <IconParagraph />\n                Paragraph\n            </Toggle>\n            <Toggle>\n                <IconHeading />\n                Heading\n            </Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDemo() {\n    return <Toggle>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n}\n"
  },
  "buttons/toggle/toggle-shape-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-shape-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleShapeDemo() {\n    return (\n        <Toggle variant='outline' shape='circle'>\n            {({ isSelected }) => <>{isSelected ? 'Disabled' : 'Enabled'}</>}\n        </Toggle>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    return <FileTrigger />\n}\n"
  },
  "buttons/file-trigger/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerMultipleDemo() {\n    return <FileTrigger allowsMultiple />\n}\n"
  },
  "buttons/file-trigger/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = React.useState<string[] | null>(null)\n    return (\n        <>\n            <FileTrigger\n                isDisabled\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            />\n            {file && <Description>{file}</Description>}\n        </>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-avatar-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-avatar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { isFileDropItem } from 'react-aria-components'\n\nimport { Avatar, DropZone, FileTrigger, cn } from '@/components/ui'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function FileTriggerAvatarDemo() {\n    const [droppedImage, setDroppedImage] = React.useState<string | undefined>(undefined)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    async function onSelectHandler(e: FileList | null) {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n\n    return (\n        <div className='flex items-center gap-2'>\n            <DropZone\n                getDropOperation={() => 'copy'}\n                onDrop={onDropHandler}\n                className={cn(\n                    '[&_[data-slot=avatar]]:bg-transparent [&_[data-slot=avatar]]:outline-none rounded-full p-0 overflow-hidden size-10'\n                )}\n            >\n                {droppedImage ? (\n                    <Avatar src={droppedImage} size='lg' />\n                ) : (\n                    <Avatar initials='DQ' size='lg' />\n                )}\n                <input type='hidden' name='image' value={droppedImage} />\n            </DropZone>\n            <FileTrigger\n                size='sm'\n                withIcon={false}\n                acceptedFileTypes={['image/png', 'image/jpeg']}\n                onSelect={onSelectHandler}\n            >\n                Upload avatar\n            </FileTrigger>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-controlled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = React.useState<string[] | null>(null)\n    return (\n        <>\n            <FileTrigger\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            />\n            {file && (\n                <Description className='truncate max-w-60 [&>strong]:font-medium block [&>strong]:text-foreground mt-2'>\n                    Your file: <strong>{file}</strong>\n                </Description>\n            )}\n        </>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerFolderDemo() {\n    return <FileTrigger acceptDirectory />\n}\n"
  },
  "buttons/file-trigger/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerCameraDemo() {\n    return <FileTrigger defaultCamera='environment'>Open a camera</FileTrigger>\n}\n"
  },
  "media/avatar/avatar-status-demo": {
    "component": "@/components/docs/media/avatar/avatar-status-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\nexport default function AvatarStatusDemo() {\n    return (\n        <div className='flex flex-col gap-6'>\n            <div className='flex justify-center gap-2'>\n                <Avatar status='success' initials='DQ' src='https://i.pravatar.cc/150?img=58' />\n                <Avatar\n                    shape='square'\n                    status='success'\n                    initials='DQ'\n                    src='https://i.pravatar.cc/150?img=57'\n                />\n            </div>\n            <div className='flex justify-center gap-2'>\n                <Avatar status='primary' initials='DQ' src='https://i.pravatar.cc/150?img=63' />\n                <Avatar status='success' initials='DQ' src='https://i.pravatar.cc/150?img=59' />\n                <Avatar status='danger' initials='DQ' src='https://i.pravatar.cc/150?img=64' />\n                <Avatar status='muted' initials='DQ' src='https://i.pravatar.cc/150?img=62' />\n                <Avatar status='warning' initials='DQ' src='https://i.pravatar.cc/150?img=60' />\n            </div>\n        </div>\n    )\n}\n"
  },
  "media/avatar/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar/avatar-shape-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\nexport default function AvatarShapeDemo() {\n    return (\n        <Avatar shape='square' initials='DQ' alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n    )\n}\n"
  },
  "media/avatar/avatar-size-demo": {
    "component": "@/components/docs/media/avatar/avatar-size-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\nexport default function AvatarSizeDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Avatar alt='avatar-sm' size='xs' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-sm' size='sm' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-md' size='md' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-lg' size='lg' src='https://github.com/dq-alhq.png' />\n        </div>\n    )\n}\n"
  },
  "media/avatar/avatar-group-demo": {
    "component": "@/components/docs/media/avatar/avatar-group-demo",
    "raw": "'use client'\n\nimport { Avatar, AvatarGroup } from '@/components/ui'\n\nexport default function AvatarGroupDemo() {\n    return (\n        <AvatarGroup aria-label='avatar-group'>\n            <Avatar\n                tooltip='Image 1'\n                alt='image 1'\n                initials='DQ'\n                src='https://i.pravatar.cc/150?img=61'\n            />\n            <Avatar\n                tooltip='Image 2'\n                alt='image 2'\n                initials='DQ'\n                src='https://i.pravatar.cc/150?img=62'\n            />\n            <Avatar\n                tooltip='Image 3'\n                alt='image 3'\n                initials='DQ'\n                src='https://i.pravatar.cc/150?img=63'\n            />\n            <Avatar\n                tooltip='Image 4'\n                alt='image 4'\n                initials='DQ'\n                src='https://i.pravatar.cc/150?img=64'\n            />\n            <Avatar\n                tooltip='Image 5'\n                alt='image 5'\n                initials='DQ'\n                src='https://i.pravatar.cc/150?img=65'\n            />\n        </AvatarGroup>\n    )\n}\n"
  },
  "media/avatar/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar/avatar-initials-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\nexport default function AvatarInitialsDemo() {\n    return <Avatar tooltip='DQ' alt='DQ' initials='DQ' />\n}\n"
  },
  "media/avatar/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar/avatar-fallback-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\nexport default function AvatarFallbackDemo() {\n    return <Avatar initials='DQ' src='https://github.com/dq-alhq.png' />\n}\n"
  },
  "media/carousel/carousel-options-demo": {
    "component": "@/components/docs/media/carousel/carousel-options-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOptionsDemo() {\n    return (\n        <Carousel\n            opts={{\n                align: 'center',\n                loop: true\n            }}\n            className='w-full max-w-2xl'\n        >\n            <Carousel.Content items={Array.from({ length: 16 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item id={id} className='basis-1/2 lg:basis-1/3'>\n                        <Card className='flex aspect-square items-center justify-center'>\n                            <Card.Title>{id}</Card.Title>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-with-collection-demo": {
    "component": "@/components/docs/media/carousel/carousel-with-collection-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselWithCollectionDemo() {\n    return (\n        <Carousel className='w-full [&_.card]:overflow-hidden [&_.card]:flex [&_.card]:flex-col max-w-xs'>\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <Card className='p-1'>\n                            <Image\n                                className='rounded-lg h-40 object-center object-cover'\n                                src={`https://picsum.photos/id/${item.id}/400/300`}\n                                alt={`image ${item.id}`}\n                                width={400}\n                                height={300}\n                            />\n                            <Card.Header className='p-3'>\n                                <Card.Title className='line-clamp-1 sm:text-lg'>\n                                    {item.title}\n                                </Card.Title>\n                                <Card.Description className='line-clamp-2'>\n                                    {item.description}\n                                </Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    }\n]\n"
  },
  "media/carousel/carousel-autoplay-demo": {
    "component": "@/components/docs/media/carousel/carousel-autoplay-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport Autoplay from 'embla-carousel-autoplay'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselAutoplayDemo() {\n    const plugin = React.useRef(Autoplay({ delay: 1000, stopOnInteraction: true }))\n\n    return (\n        <Carousel\n            onMouseEnter={plugin.current.stop}\n            onMouseLeave={plugin.current.reset}\n            plugins={[plugin.current]}\n            opts={{\n                loop: true,\n                align: 'center'\n            }}\n            className='w-full [&_.card]:h-56 [&_.card]:overflow-hidden [&_.card]:flex [&_.card]:flex-col max-w-xs'\n        >\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <div className='p-1'>\n                            <Card>\n                                <div className='bg-foreground/5 border-b flex-1 relative' />\n                                <Card.Header>\n                                    <Card.Title className='line-clamp-1 sm:text-lg'>\n                                        {item.title}\n                                    </Card.Title>\n                                    <Card.Description className='line-clamp-2'>\n                                        {item.description}\n                                    </Card.Description>\n                                </Card.Header>\n                            </Card>\n                        </div>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "media/carousel/carousel-demo": {
    "component": "@/components/docs/media/carousel/carousel-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Carousel } from '@/components/ui'\n\nexport default function CarouselDemo() {\n    return (\n        <Carousel className='w-full [&_.card]:h-56 [&_.card]:overflow-hidden [&_.card]:flex [&_.card]:flex-col max-w-xs'>\n            <Carousel.Content>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/61/400/300'\n                        alt='image 1'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/62/400/300'\n                        alt='image 2'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/63/400/300'\n                        alt='image 3'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/64/400/300'\n                        alt='image 4'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/65/400/300'\n                        alt='image 5'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/66/400/300'\n                        alt='image 6'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/61/400/300'\n                        alt='image 7'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-api-demo": {
    "component": "@/components/docs/media/carousel/carousel-api-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button } from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\n\nimport { Card, Carousel, type CarouselApi } from '@/components/ui'\n\nexport default function CarouselDApiDemo() {\n    const [api, setApi] = React.useState<CarouselApi>()\n    const [current, setCurrent] = React.useState(0)\n    const [count, setCount] = React.useState(0)\n\n    React.useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        setCount(api.scrollSnapList().length)\n        setCurrent(api.selectedScrollSnap() + 1)\n        api.on('select', () => {\n            setCurrent(api.selectedScrollSnap() + 1)\n        })\n    }, [api])\n\n    const handleSelect = (index: number) => {\n        if (api) {\n            api.scrollTo(index)\n            setCurrent(index + 1)\n        }\n    }\n\n    return (\n        <Carousel setApi={setApi} className='w-full max-w-sm'>\n            <Carousel.Content items={Array.from({ length: 10 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item id={id}>\n                        <Card>\n                            <Card.Content className='flex aspect-square items-center justify-center p-6'>\n                                <span className='text-4xl font-semibold'>{id}</span>\n                            </Card.Content>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n            <div className='flex justify-between mt-4 items-center'>\n                <div className='py-2 gap-1 flex text-center text-sm text-muted-foreground'>\n                    {Array.from({ length: 10 }).map((_, index) => (\n                        <Button\n                            className={twJoin(\n                                'focus:outline-none transition rounded-xl',\n                                current === index + 1\n                                    ? 'w-5 h-3 transition-all bg-primary hover:bg-primary/80'\n                                    : 'bg-foreground/10 hover:bg-foreground/15 w-3 h-3'\n                            )}\n                            aria-label={`Slide ${current} of ${count}`}\n                            onPress={() => handleSelect(index)}\n                            key={index}\n                        />\n                    ))}\n                </div>\n\n                <div className='space-x-2'>\n                    <Carousel.Button slot='previous' />\n                    <Carousel.Button slot='next' />\n                </div>\n            </div>\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-orientation-demo": {
    "component": "@/components/docs/media/carousel/carousel-orientation-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOrientationDemo() {\n    return (\n        <Carousel orientation='vertical' className='w-full relative max-w-xs'>\n            <Carousel.Content items={items} className='h-64 py-4 snap-y'>\n                {(item) => (\n                    <Carousel.Item className='pt-1 basis-1/2 md:basis-1/3 snap-center'>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title>{item.title}</Card.Title>\n                                <Card.Description>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "statuses/toast-status-demo": {
    "component": "@/components/docs/statuses/toast-status-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToastStatusDemo() {\n    return (\n        <div className='flex flex-wrap gap-3'>\n            <Button variant='outline' onPress={() => toast.error('The registration failed')}>\n                Error\n            </Button>\n            <Button\n                variant='outline'\n                onPress={() => toast.success('The registration was successful.')}\n            >\n                Success\n            </Button>\n            <Button\n                variant='outline'\n                onPress={() => toast.warning('There was an issue during registration')}\n            >\n                Warning\n            </Button>\n            <Button variant='outline' onPress={() => toast.info('Email is already registered.')}>\n                Info\n            </Button>\n            <Button\n                variant='outline'\n                onPress={() => {\n                    toast.promise(wait(2000), {\n                        loading: 'Deleting database...',\n                        success: 'Database deleted.',\n                        error: 'Failed to delete database.'\n                    })\n                }}\n            >\n                Promise / Loading\n            </Button>\n        </div>\n    )\n}\n\nfunction wait(number: number) {\n    return new Promise((resolve) => setTimeout(resolve, number))\n}\n"
  },
  "statuses/toast-description-demo": {
    "component": "@/components/docs/statuses/toast-description-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToastDescriptionDemo() {\n    return (\n        <Button\n            onPress={() =>\n                toast('Cart Updated', {\n                    description: 'Your item’s in the cart. Tap here to check it out.'\n                })\n            }\n        >\n            Add to Cart\n        </Button>\n    )\n}\n"
  },
  "statuses/indeterminate-progress-bar-demo": {
    "component": "@/components/docs/statuses/indeterminate-progress-bar-demo",
    "raw": "'use client'\n\nimport { ProgressBar } from '@/components/ui'\n\nexport default function ProgressBarDemo() {\n    return <ProgressBar label='Loading…' isIndeterminate />\n}\n"
  },
  "statuses/loader-demo": {
    "component": "@/components/docs/statuses/loader-demo",
    "raw": "'use client'\n\nimport { Loader } from '@/components/ui'\n\nexport default function LoaderDemo() {\n    return <Loader />\n}\n"
  },
  "statuses/progress-circle-demo": {
    "component": "@/components/docs/statuses/progress-circle-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressCircle } from '@/components/ui'\n\nexport default function ProgressCircleDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <ProgressCircle aria-label='Loading…' value={value} />\n}\n"
  },
  "statuses/meter-currency-format-demo": {
    "component": "@/components/docs/statuses/meter-currency-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterCurrencyFormatDemo() {\n    return (\n        <Meter label='Revenue' formatOptions={{ style: 'currency', currency: 'USD' }} value={15} />\n    )\n}\n"
  },
  "statuses/note-hide-indicator-demo": {
    "component": "@/components/docs/statuses/note-hide-indicator-demo",
    "raw": "'use client'\n\nimport { Note } from '@/components/ui'\n\nexport default function NoteHideIndicatorDemo() {\n    return (\n        <>\n            <Note hideIndicator>\n                You need to be careful with this note. This is a note without indicator.\n            </Note>\n        </>\n    )\n}\n"
  },
  "statuses/progress-circle-controlled-demo": {
    "component": "@/components/docs/statuses/progress-circle-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressCircle, Slider } from '@/components/ui'\n\nexport default function ProgressCircleControlledDemo() {\n    const [value, setValue] = React.useState(10)\n\n    return (\n        <div className='flex flex-col items-center gap-y-6 min-w-56'>\n            <ProgressCircle className='size-10' value={value} />\n            <Slider label='Track' value={value} onChange={(v) => setValue(v as number)} />\n        </div>\n    )\n}\n"
  },
  "statuses/badge-demo": {
    "component": "@/components/docs/statuses/badge-demo",
    "raw": "'use client'\n\nimport { Badge } from '@/components/ui'\n\nexport default function BadgeDemo() {\n    return <Badge>Label</Badge>\n}\n"
  },
  "statuses/badge-variant-demo": {
    "component": "@/components/docs/statuses/badge-variant-demo",
    "raw": "'use client'\n\nimport { Badge } from '@/components/ui'\n\nexport default function BadgeVariantDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            {[\n                'primary',\n                'secondary',\n                'success',\n                'info',\n                'warning',\n                'danger',\n                'dark',\n                'outline'\n            ].map((variant, index) => (\n                <Badge key={index} variant={variant as keyof typeof Badge}>\n                    {variant}\n                </Badge>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/note-demo": {
    "component": "@/components/docs/statuses/note-demo",
    "raw": "'use client'\n\nimport { Note } from '@/components/ui'\n\nexport default function NoteDemo() {\n    return (\n        <Note>\n            We hook you up with top-tier migration services in our startup plan. Wanna roll with it?\n            Hit us up here.\n        </Note>\n    )\n}\n"
  },
  "statuses/toast-demo": {
    "component": "@/components/docs/statuses/toast-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToastDemo() {\n    return (\n        <Button onPress={() => toast('The registration is successful, click here to continue.')}>\n            Show Toast\n        </Button>\n    )\n}\n"
  },
  "statuses/skeleton-demo": {
    "component": "@/components/docs/statuses/skeleton-demo",
    "raw": "'use client'\n\nimport { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton shape='circle' className='size-6' />\n                <div className='space-y-1'>\n                    <Skeleton className='h-3 w-56' />\n                    <Skeleton className='h-3 w-10' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/toast-action-demo": {
    "component": "@/components/docs/statuses/toast-action-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToastActionDemo() {\n    return (\n        <div className='flex gap-3'>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        action: {\n                            label: 'View',\n                            onClick: () => alert('Viewed')\n                        }\n                    })\n                }\n            >\n                Action\n            </Button>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        action: {\n                            label: 'View',\n                            onClick: () => alert('Viewed')\n                        },\n                        cancel: {\n                            label: 'Cancel',\n                            onClick: () => alert('Cancelled')\n                        }\n                    })\n                }\n            >\n                Do or Not\n            </Button>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        cancel: {\n                            label: 'Cancel',\n                            onClick: () => alert('Cancelled')\n                        }\n                    })\n                }\n            >\n                Cancel\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/badge-shape-demo": {
    "component": "@/components/docs/statuses/badge-shape-demo",
    "raw": "'use client'\n\nimport { Badge } from '@/components/ui'\n\nexport default function BadgeShapeDemo() {\n    return <Badge shape='circle'>Label</Badge>\n}\n"
  },
  "statuses/meter-decimal-format-demo": {
    "component": "@/components/docs/statuses/meter-decimal-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDecimalFormatDemo() {\n    return (\n        <Meter\n            formatOptions={{\n                style: 'decimal',\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }}\n            label='Progress'\n            value={75.25}\n        />\n    )\n}\n"
  },
  "statuses/note-variant-demo": {
    "component": "@/components/docs/statuses/note-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Key } from 'react-aria-components'\n\nimport { Note, NoteProps, Select } from '@/components/ui'\n\nconst notes = ['info', 'primary', 'secondary', 'warning', 'danger', 'success'].map((n) => ({\n    name: n,\n    value: n\n}))\n\nexport default function NoteIntentDemo() {\n    const [selected, setSelected] = React.useState<Key>('primary')\n    return (\n        <>\n            <div className='absolute left-4 top-4 inline-flex min-w-32 flex-col gap-1'>\n                <Select\n                    className='[&_button]:h-9'\n                    selectedKey={selected}\n                    onSelectionChange={setSelected}\n                    placeholder='Choose an intent'\n                    items={notes}\n                >\n                    {(item) => (\n                        <Select.Item id={item.name} textValue={item.name}>\n                            {item.name}\n                        </Select.Item>\n                    )}\n                </Select>\n            </div>\n            <div className='max-w-md'>\n                <Note variant={selected as NoteProps['variant']}>\n                    We hook you up with top-tier migration services in our startup plan. Wanna roll\n                    with it? Hit us up here.\n                </Note>\n            </div>\n        </>\n    )\n}\n"
  },
  "statuses/loader-color-demo": {
    "component": "@/components/docs/statuses/loader-color-demo",
    "raw": "'use client'\n\nimport { Loader } from '@/components/ui'\n\nexport default function LoaderColorDemo() {\n    return (\n        <div className='flex gap-6'>\n            <Loader variant='spin' size='md' color='current' />\n            <Loader variant='spin' size='md' color='primary' />\n            <Loader variant='spin' size='md' color='secondary' />\n            <Loader variant='spin' size='md' color='success' />\n            <Loader variant='spin' size='md' color='warning' />\n            <Loader variant='spin' size='md' color='danger' />\n        </div>\n    )\n}\n"
  },
  "statuses/toast-positions-demo": {
    "component": "@/components/docs/statuses/toast-positions-demo",
    "raw": "'use client'\n\nimport { toast, type ToastT } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nconst positions: ToastT['position'][] = [\n    'top-left',\n    'top-right',\n    'bottom-left',\n    'bottom-right',\n    'top-center',\n    'bottom-center'\n]\n\nexport default function ToastPositionsDemo() {\n    return (\n        <div className='grid grid-cols-2 sm:grid-cols-3 gap-4'>\n            {positions.map((position) => (\n                <Button\n                    variant='outline'\n                    size='sm'\n                    key={position}\n                    onPress={() =>\n                        toast('The registration is successful, click here to continue.', {\n                            position\n                        })\n                    }\n                >\n                    {position}\n                </Button>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/skeleton-intent-demo": {
    "component": "@/components/docs/statuses/skeleton-intent-demo",
    "raw": "'use client'\n\nimport { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonIntentDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton variant='lighter' className='size-8' />\n                <div className='space-y-1'>\n                    <Skeleton variant='muted' className='h-3.5 w-20' />\n                    <Skeleton variant='muted' className='h-3.5 w-48' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/skeleton-shape-demo": {
    "component": "@/components/docs/statuses/skeleton-shape-demo",
    "raw": "'use client'\n\nimport { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonShapeDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton variant='lighter' shape='circle' className='size-8' />\n                <div className='space-y-1'>\n                    <Skeleton variant='muted' shape='circle' className='h-4 w-56' />\n                    <Skeleton variant='muted' shape='circle' className='h-4 w-10' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/meter-demo": {
    "component": "@/components/docs/statuses/meter-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDemo() {\n    const [value, setValue] = React.useState(0)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return <Meter label='Storage space' value={value} />\n}\n"
  },
  "statuses/progress-circle-color-demo": {
    "component": "@/components/docs/statuses/progress-circle-color-demo",
    "raw": "'use client'\n\nimport { ProgressCircle } from '@/components/ui'\n\nexport default function ProgressCircleColorDemo() {\n    return (\n        <div className='flex gap-2'>\n            <ProgressCircle isIndeterminate className='text-danger' />\n            <ProgressCircle isIndeterminate className='text-primary' />\n            <ProgressCircle isIndeterminate className='text-warning' />\n        </div>\n    )\n}\n"
  },
  "statuses/progress-circle-custom-size-demo": {
    "component": "@/components/docs/statuses/progress-circle-custom-size-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressCircle } from '@/components/ui'\n\nexport default function ProgressCircleCustomSizeDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 100)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return (\n        <ProgressCircle className='size-10' aria-label='Loading…' isIndeterminate value={value} />\n    )\n}\n"
  },
  "statuses/progress-circle-indeterminate-demo": {
    "component": "@/components/docs/statuses/progress-circle-indeterminate-demo",
    "raw": "'use client'\n\nimport { ProgressCircle } from '@/components/ui'\n\nexport default function ProgressCircleIndeterminateDemo() {\n    return <ProgressCircle aria-label='Loading…' isIndeterminate />\n}\n"
  },
  "statuses/loader-size-demo": {
    "component": "@/components/docs/statuses/loader-size-demo",
    "raw": "'use client'\n\nimport { Loader } from '@/components/ui'\n\nexport default function LoaderSizeDemo() {\n    return (\n        <div className='flex gap-6'>\n            <Loader size='sm' />\n            <Loader size='md' />\n            <Loader size='lg' />\n            <Loader size='xl' />\n        </div>\n    )\n}\n"
  },
  "statuses/loader-variant-demo": {
    "component": "@/components/docs/statuses/loader-variant-demo",
    "raw": "'use client'\n\nimport { Loader } from '@/components/ui'\n\nexport default function LoaderVariantDemo() {\n    return (\n        <div className='flex gap-6'>\n            <Loader variant='ring' />\n            <Loader variant='spin' />\n            <Loader variant='bars' />\n        </div>\n    )\n}\n"
  },
  "statuses/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressBar } from '@/components/ui'\n\nexport default function ProgressBarDemo() {\n    const [value, setValue] = React.useState(0)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <ProgressBar label='Loading…' value={value} />\n}\n"
  },
  "progress-circle": {
    "component": "@/components/ui/progress-circle",
    "raw": "'use client'\n\nimport { ProgressBar, type ProgressBarProps } from 'react-aria-components'\n\nimport { cn } from './utils'\n\ninterface ProgressCircleProps extends Omit<ProgressBarProps, 'className'> {\n    className?: string\n}\n\nconst ProgressCircle = ({ className, ...props }: ProgressCircleProps) => {\n    const c = '50%'\n    const r = 'calc(50% - 2px)'\n    return (\n        <ProgressBar {...props}>\n            {({ percentage, isIndeterminate }) => (\n                <svg\n                    className={cn('size-4 shrink-0', className)}\n                    viewBox='0 0 24 24'\n                    fill='none'\n                    data-slot='icon'\n                >\n                    <circle\n                        cx={c}\n                        cy={c}\n                        r={r}\n                        strokeWidth={3}\n                        stroke='currentColor'\n                        strokeOpacity={0.25}\n                    />\n                    {!isIndeterminate ? (\n                        <circle\n                            cx={c}\n                            cy={c}\n                            r={r}\n                            strokeWidth={3}\n                            stroke='currentColor'\n                            pathLength={100}\n                            strokeDasharray='100 200'\n                            strokeDashoffset={100 - (percentage ?? 0)}\n                            strokeLinecap='round'\n                            transform='rotate(-90)'\n                            className='origin-center'\n                        />\n                    ) : (\n                        <circle\n                            cx={c}\n                            cy={c}\n                            r={r}\n                            strokeWidth={3}\n                            stroke='currentColor'\n                            pathLength={100}\n                            strokeDasharray='100 200'\n                            strokeDashoffset={100 - 30}\n                            strokeLinecap='round'\n                            className='animate-[spin_1s_cubic-bezier(0.4,_0,_0.2,_1)_infinite] origin-center'\n                        />\n                    )}\n                </svg>\n            )}\n        </ProgressBar>\n    )\n}\n\nexport { ProgressCircle }\n"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown } from 'hq-icons'\nimport {\n    type SelectProps as SelectPrimitiveProps,\n    type ValidationResult,\n    Button,\n    Group,\n    Select as SelectPrimitive,\n    SelectValue\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport type { Placement } from '@react-types/overlays'\n\nimport { DropdownItem, DropdownItemDetails, DropdownSection } from './dropdown'\nimport { Description, FieldError, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport { cn, cr } from './utils'\n\nconst selectTriggerStyles = tv({\n    base: [\n        'outline-none group-disabled:bg-muted group-disabled:opacity-50 focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-primary/20 group-open:border-primary group-open:ring-4 group-open:ring-primary/20 flex h-10 w-full cursor-default items-center gap-4 rounded-lg border border-muted bg-background py-2 pl-3 pr-2 text-start shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] transition dark:shadow-none'\n    ],\n    variants: {\n        isDisabled: {\n            false: 'text-foreground group-invalid:border-danger group-invalid:ring-danger/20',\n            true: 'bg-muted text-muted-foreground'\n        }\n    }\n})\n\ninterface SelectProps<T extends object> extends Omit<SelectPrimitiveProps<T>, 'children'> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    items?: Iterable<T>\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    placement?: Placement\n    prefix?: React.ReactNode\n    className?: string\n    portal?: Element\n}\n\nconst Select = <T extends object>({\n    label,\n    description,\n    placement,\n    errorMessage,\n    children,\n    items,\n    className,\n    ...props\n}: SelectProps<T>) => {\n    return (\n        <SelectPrimitive {...props} className={cn('group flex w-full flex-col gap-1', className)}>\n            {label && <Label>{label}</Label>}\n            <Group className='relative'>\n                <Button\n                    className={cr(className, (className, renderProps) =>\n                        selectTriggerStyles({\n                            ...renderProps,\n                            className\n                        })\n                    )}\n                >\n                    {props.prefix && <span className='-mr-1'>{props.prefix}</span>}\n                    <SelectValue className='flex-1 [&_[slot=description]]:hidden text-base placeholder-shown:text-muted-foreground lg:text-sm' />\n\n                    <IconChevronDown\n                        aria-hidden\n                        className='size-4 text-muted-foreground group-open:rotate-180 group-open:text-foreground group-disabled:opacity-50'\n                    />\n                </Button>\n            </Group>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Picker\n                UNSTABLE_portalContainer={props.portal}\n                trigger='Select'\n                placement={placement}\n            >\n                <ListBox.Picker aria-label='items' items={items}>\n                    {children}\n                </ListBox.Picker>\n            </Popover.Picker>\n        </SelectPrimitive>\n    )\n}\n\nSelect.Item = DropdownItem\nSelect.ItemDetails = DropdownItemDetails\nSelect.Section = DropdownSection\n\nexport { Select }\n"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    Button,\n    ColorPicker as ColorPickerPrimitive,\n    type ColorPickerProps as ColorPickerPrimitiveProps,\n    Dialog\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport type { Placement } from '@react-types/overlays'\n\nimport { ColorArea } from './color-area'\nimport { ColorField } from './color-field'\nimport { ColorSlider } from './color-slider'\nimport { ColorSwatch } from './color-swatch'\nimport { Description } from './field'\nimport { Popover } from './popover'\nimport { focusButtonStyles } from './utils'\n\nconst buttonStyles = tv({\n    extend: focusButtonStyles,\n    base: 'flex btn-trigger cursor-pointer disabled:cursor-default disabled:opacity-50 items-center rounded-lg text-sm'\n})\n\nexport interface ColorPickerProps extends ColorPickerPrimitiveProps {\n    label?: string\n    children?: React.ReactNode\n    showArrow?: boolean\n    isDisabled?: boolean\n    placement?: Placement\n    description?: string\n}\n\nconst ColorPicker = ({\n    showArrow = false,\n    placement = 'bottom start',\n    label,\n    isDisabled,\n    children,\n    description,\n    ...props\n}: ColorPickerProps) => {\n    return (\n        <div className='flex gap-y-2 flex-col'>\n            <ColorPickerPrimitive {...props}>\n                <Popover>\n                    <Button isDisabled={isDisabled} className={buttonStyles}>\n                        <ColorSwatch className='size-6' />\n                        {label && <span className='ml-2'>{label}</span>}\n                    </Button>\n                    <Popover.Content\n                        className='overflow-y-auto outline-none focus:outline-none [&_[data-slot=color-slider]]:w-full [&_[data-slot=color-area]]:w-full sm:[&_[data-slot=color-area]]:size-56 sm:max-w-56 sm:min-w-min px-0 pt-4 pb-3 sm:p-3'\n                        showArrow={showArrow}\n                        placement={placement}\n                    >\n                        <Dialog className='flex flex-col gap-2 focus:outline-none outline-none'>\n                            {children || (\n                                <>\n                                    <ColorArea\n                                        colorSpace='hsb'\n                                        xChannel='saturation'\n                                        yChannel='brightness'\n                                    />\n                                    <ColorSlider\n                                        showOutput={false}\n                                        colorSpace='hsb'\n                                        channel='hue'\n                                    />\n                                    <ColorField aria-label='Hex' />\n                                </>\n                            )}\n                        </Dialog>\n                    </Popover.Content>\n                </Popover>\n            </ColorPickerPrimitive>\n            {description && <Description>{description}</Description>}\n        </div>\n    )\n}\n\nexport { ColorPicker }\n"
  },
  "color-wheel": {
    "component": "@/components/ui/color-wheel",
    "raw": "'use client'\n\nimport {\n    ColorWheel as ColorWheelPrimitive,\n    type ColorWheelProps as ColorWheelPrimitiveProps,\n    ColorWheelTrack\n} from 'react-aria-components'\n\nimport { ColorThumb } from './color-thumb'\n\nexport type ColorWheelProps = Omit<ColorWheelPrimitiveProps, 'outerRadius' | 'innerRadius'>\n\nconst ColorWheel = (props: ColorWheelProps) => {\n    return (\n        <ColorWheelPrimitive {...props} outerRadius={100} innerRadius={74}>\n            <ColorWheelTrack\n                className='disabled:bg-muted/75 disabled:forced-colors:bg-[GrayText]'\n                style={({ defaultStyle, isDisabled }) => ({\n                    ...defaultStyle,\n                    background: isDisabled\n                        ? undefined\n                        : `${defaultStyle.background}, repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n                })}\n            />\n            <ColorThumb />\n        </ColorWheelPrimitive>\n    )\n}\n\nexport { ColorWheel }\n"
  },
  "color-area": {
    "component": "@/components/ui/color-area",
    "raw": "'use client'\n\nimport {\n    ColorArea as ColorAreaPrimitive,\n    type ColorAreaProps as ColorAreaPropsPrimitive\n} from 'react-aria-components'\n\nimport { ColorThumb } from './color-thumb'\nimport { ctr } from './utils'\n\ntype ColorAreaProps = ColorAreaPropsPrimitive\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n    return (\n        <ColorAreaPrimitive\n            {...props}\n            data-slot='color-area'\n            className={ctr(\n                className,\n                'size-56 shrink-0 rounded-lg bg-muted forced-colors:bg-[GrayText]'\n            )}\n            style={({ defaultStyle, isDisabled }) => ({\n                ...defaultStyle,\n                background: isDisabled ? undefined : defaultStyle.background\n            })}\n        >\n            <ColorThumb />\n        </ColorAreaPrimitive>\n    )\n}\n\nexport { ColorArea }\n"
  },
  "color-thumb": {
    "component": "@/components/ui/color-thumb",
    "raw": "'use client'\n\nimport { ColorThumb as ColorThumbPrimitive, type ColorThumbProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst thumbStyles = tv({\n    base: 'size-6 top-[50%] left-[50%] rounded-full border-2 border-white [box-shadow:0_0_0_1px_black,_inset_0_0_0_1px_black]',\n    variants: {\n        isFocusVisible: {\n            true: 'size-8'\n        },\n        isDragging: {\n            true: 'bg-gray-700 dark:bg-gray-300 forced-colors:bg-[ButtonBorder]'\n        },\n        isDisabled: {\n            true: 'opacity-50 forced-colors:border-[GrayText] forced-colors:bg-[GrayText]'\n        }\n    }\n})\n\nconst ColorThumb = (props: ColorThumbProps) => {\n    return (\n        <ColorThumbPrimitive\n            {...props}\n            style={({ defaultStyle, isDisabled }) => ({\n                ...defaultStyle,\n                backgroundColor: isDisabled ? undefined : defaultStyle.backgroundColor\n            })}\n            className={thumbStyles}\n        />\n    )\n}\n\nexport { ColorThumb }\n"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleAlert, IconCircleCheck, IconTriangleAlert } from 'hq-icons'\nimport { Text } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst noteStyles = tv({\n    base: [\n        'my-4 px-4 [&_.nd]:block [&_.nd]:text-sm py-4 leading-4 overflow-hidden rounded-lg border [&_strong]:font-medium',\n        '[&_svg]:size-5 [&_svg]:shrink-0 [&_a]:underline [&_a]:hover:underline'\n    ],\n    variants: {\n        variant: {\n            primary: ['border-primary/35 [&_a]:text-primary text-primary bg-primary/10 leading-4'],\n            secondary: [\n                'border-border [&_a]:text-secondary-foreground text-secondary-foreground bg-secondary/50 [&_svg]:text-secondary-foreground',\n                'dark:[&_a]:text-secondary-foreground dark:[&_svg]:text-secondary-foreground'\n            ],\n            info: ['border-info/20 text-info bg-info/5 dark:bg-info/10 leading-4'],\n            warning:\n                'border-warning/50 dark:border-warning/25 bg-warning/5 text-warning dark:text-warning',\n            danger: 'border-danger/30 bg-danger/5 dark:bg-danger/10 text-danger',\n            success: [\n                'border-success/20 [&_a]:text-success text-success bg-success/10 [&_svg]:text-success leading-4'\n            ]\n        }\n    },\n    defaultVariants: {\n        variant: 'primary'\n    }\n})\n\ninterface NoteProps\n    extends React.HtmlHTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof noteStyles> {\n    hideIndicator?: boolean\n}\n\nconst Note = ({ hideIndicator = false, variant = 'primary', className, ...props }: NoteProps) => {\n    return (\n        <div className={noteStyles({ variant, className })} {...props}>\n            <div className='flex items-start gap-x-2.5'>\n                {!hideIndicator && (\n                    <div className='w-5 shrink-0 mt-px'>\n                        {['info', 'primary', 'secondary'].includes(variant) ? (\n                            <IconCircleAlert />\n                        ) : variant === 'success' ? (\n                            <IconCircleCheck />\n                        ) : (\n                            <IconTriangleAlert />\n                        )}\n                    </div>\n                )}\n                <Text slot='description' {...props} className='nd'>\n                    {props.children}\n                </Text>\n            </div>\n        </div>\n    )\n}\n\nexport { Note, type NoteProps }\n"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport {\n    Switch as SwitchPrimitive,\n    type SwitchProps as SwitchPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst trackStyles = tv({\n    base: [\n        'mr-2 h-5 w-8 bg-muted cursor-pointer rounded-[calc(var(--radius)+2px)] border-2 border-transparent transition',\n        'group-focus:ring-4',\n        'group-focus:ring-4 group-invalid:ring-danger/20',\n        'group-disabled:cursor-default group-disabled:opacity-50'\n    ],\n    variants: {\n        variant: {\n            primary: 'group-selected:bg-primary group-focus:ring-primary/20',\n            secondary: 'group-selected:bg-secondary group-focus:ring-secondary/20',\n            success: 'group-selected:bg-success group-focus:ring-success/20',\n            danger: 'group-selected:bg-danger group-focus:ring-danger/20',\n            warning: 'group-selected:bg-warning group-focus:ring-warning/20',\n            muted: 'group-selected:bg-muted-foreground group-focus:ring-foreground/20'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary'\n    }\n})\n\nconst switchStyles = tv({\n    slots: {\n        base: 'group inline-flex touch-none lg:text-sm items-center',\n        ball: 'group-selected:ml-3 group-selected:group-data-[pressed]:ml-2 group-pressed:w-5 block size-4 origin-right rounded-[calc(var(--radius)+2px)] bg-primary-foreground shadow transition-all'\n    }\n})\n\nconst { base, ball } = switchStyles()\n\ninterface SwitchProps extends SwitchPrimitiveProps, VariantProps<typeof trackStyles> {}\n\nconst Switch = ({ children, variant, className, ...props }: SwitchProps) => {\n    return (\n        <SwitchPrimitive\n            {...props}\n            className={(values) =>\n                base({ className: typeof className === 'function' ? className(values) : className })\n            }\n            style={{ WebkitTapHighlightColor: 'transparent' }}\n        >\n            {(values) => (\n                <>\n                    <span className={trackStyles({ variant })}>\n                        <span className={ball()} />\n                    </span>\n                    {typeof children === 'function' ? children(values) : children}\n                </>\n            )}\n        </SwitchPrimitive>\n    )\n}\n\nexport { Switch }\n"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconChevronLeft,\n    IconChevronRight,\n    IconChevronsLeft,\n    IconChevronsRight,\n    IconEllipsis\n} from 'hq-icons'\nimport {\n    ListBox,\n    ListBoxItem,\n    ListBoxSection,\n    Separator,\n    type ListBoxItemProps,\n    type ListBoxProps,\n    type ListBoxSectionProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { buttonVariants } from './button'\nimport { cn } from './utils'\nimport { cr } from './utils'\n\nconst paginationStyles = tv({\n    slots: {\n        pagination: 'mx-auto flex w-full justify-center gap-[5px]',\n        section: 'flex h-9 gap-[5px]',\n        list: 'flex flex-row items-center gap-[5px]',\n        itemButton:\n            'focus-visible:border-primary text-foreground font-normal cursor-pointer focus:outline-none focus-visible:bg-primary/10 focus-visible:ring-4 focus-visible:ring-primary/20',\n        itemLabel: 'h-9 px-3.5 tabular-nums grid place-content-center',\n        itemSeparator: 'h-9 grid place-content-center',\n        itemEllipsis:\n            'flex items-center justify-center focus-visible:border-primary rounded-lg border border-transparent focus:outline-none size-9 focus-visible:bg-primary/10 focus-visible:ring-4 focus-visible:ring-primary/20',\n        itemEllipsisIcon: 'flex size-9 items-center justify-center',\n        defaultItem:\n            'focus-visible:border-primary focus:outline-none size-9 tabular-nums font-normal cursor-pointer disabled:cursor-default focus-visible:bg-primary/10 focus-visible:ring-4 focus-visible:ring-primary/20 disabled:opacity-100',\n        itemSeparatorLine: 'h-5 w-[1.5px] bg-secondary-foreground/40 rotate-[14deg] shrink-0'\n    }\n})\n\nconst {\n    pagination,\n    section,\n    list,\n    itemButton,\n    itemLabel,\n    itemSeparator,\n    itemEllipsis,\n    itemEllipsisIcon,\n    defaultItem,\n    itemSeparatorLine\n} = paginationStyles()\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (\n    <nav\n        role='navigation'\n        aria-label='pagination'\n        className={pagination({ className })}\n        {...props}\n    />\n)\n\nconst PaginationSection = <T extends object>({ className, ...props }: ListBoxSectionProps<T>) => (\n    <ListBoxSection {...props} className={section({ className })} />\n)\n\nconst List = <T extends object>({ className, ...props }: ListBoxProps<T>) => {\n    return (\n        <ListBox\n            orientation='horizontal'\n            aria-label={props['aria-label'] || 'Pagination'}\n            layout='grid'\n            className={cr(className, (className) => list({ className }))}\n            {...props}\n        />\n    )\n}\n\nconst renderListItem = (\n    props: ListBoxItemProps & {\n        textValue?: string\n        'aria-current'?: string | undefined\n        isDisabled?: boolean\n        className?: string\n    },\n    children: React.ReactNode\n) => <ListBoxItem {...props}>{children}</ListBoxItem>\n\ninterface PaginationItemProps extends ListBoxItemProps, VariantProps<typeof buttonVariants> {\n    children?: React.ReactNode\n    className?: string\n    isCurrent?: boolean\n    role?: 'label' | 'separator' | 'ellipsis' | 'default' | 'last' | 'first' | 'previous' | 'next'\n}\n\nconst Item = ({\n    role = 'default',\n    size = 'sm',\n    variant = 'outline',\n    className,\n    isCurrent,\n    children,\n    ...props\n}: PaginationItemProps) => {\n    const textValue =\n        typeof children === 'string'\n            ? children\n            : typeof children === 'number'\n              ? children.toString()\n              : undefined\n\n    const renderPaginationIndicator = (indicator: React.ReactNode) =>\n        renderListItem(\n            {\n                textValue: variant,\n                'aria-current': isCurrent ? 'page' : undefined,\n                isDisabled: isCurrent,\n                className: cn(\n                    buttonVariants({\n                        variant: 'outline',\n                        size: 'sm',\n                        className: itemButton()\n                    }),\n                    className\n                ),\n                ...props\n            },\n            indicator\n        )\n\n    switch (role) {\n        case 'label':\n            return renderListItem(\n                {\n                    textValue: textValue,\n                    className: itemLabel({ className }),\n                    ...props\n                },\n                children\n            )\n        case 'separator':\n            return renderListItem(\n                {\n                    textValue: 'Separator',\n                    className: itemSeparator({ className }),\n                    ...props\n                },\n                <Separator orientation='vertical' className={itemSeparatorLine()} />\n            )\n        case 'ellipsis':\n            return renderListItem(\n                {\n                    textValue: 'More pages',\n                    className: itemEllipsis({ className }),\n                    ...props\n                },\n                <span aria-hidden className={itemEllipsisIcon({ className })}>\n                    <IconEllipsis />\n                </span>\n            )\n        case 'previous':\n            return renderPaginationIndicator(<IconChevronLeft />)\n        case 'next':\n            return renderPaginationIndicator(<IconChevronRight />)\n        case 'first':\n            return renderPaginationIndicator(<IconChevronsLeft />)\n        case 'last':\n            return renderPaginationIndicator(<IconChevronsRight />)\n        default:\n            return renderListItem(\n                {\n                    textValue: textValue,\n                    'aria-current': isCurrent ? 'page' : undefined,\n                    isDisabled: isCurrent,\n                    className: cn(\n                        buttonVariants({\n                            variant: isCurrent ? 'primary' : variant,\n                            size,\n                            className: defaultItem({ className })\n                        }),\n                        className\n                    ),\n                    ...props\n                },\n                children\n            )\n    }\n}\n\nPagination.Item = Item\nPagination.List = List\nPagination.Section = PaginationSection\n\nexport { Pagination }\n"
  },
  "navbar": {
    "component": "@/components/ui/navbar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { LayoutGroup, motion } from 'framer-motion'\nimport { IconMenu } from 'hq-icons'\nimport { Link, type LinkProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Sheet } from './sheet'\nimport { cn, cr, useMediaQuery } from './utils'\n\ntype NavbarOptions = {\n    side?: 'left' | 'right'\n    isSticky?: boolean\n    variant?: 'navbar' | 'floating' | 'inset'\n}\n\ntype NavbarContextProps = {\n    open: boolean\n    setOpen: (open: boolean) => void\n    isCompact: boolean\n    toggleNavbar: () => void\n} & NavbarOptions\n\nconst NavbarContext = React.createContext<NavbarContextProps | null>(null)\n\nfunction useNavbar() {\n    const context = React.useContext(NavbarContext)\n    if (!context) {\n        throw new Error('useNavbar must be used within a Navbar.')\n    }\n\n    return context\n}\n\ninterface NavbarProviderProps extends React.ComponentProps<'header'>, NavbarOptions {\n    defaultOpen?: boolean\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n}\n\nconst navbarStyles = tv({\n    base: 'relative isolate flex w-full min-h-svh flex-col',\n    variants: {\n        variant: {\n            floating: 'pt-2 px-2.5',\n            navbar: '',\n            inset: 'bg-muted dark:bg-background'\n        }\n    }\n})\n\nconst Navbar = ({\n    children,\n    isOpen: openProp,\n    onOpenChange: setOpenProp,\n    defaultOpen = false,\n    className,\n    side = 'left',\n    isSticky = false,\n    variant = 'navbar',\n    ...props\n}: NavbarProviderProps) => {\n    const isCompact = useMediaQuery('(max-width: 1023px)')\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n\n    const setOpen = React.useCallback(\n        (value: boolean | ((value: boolean) => boolean)) => {\n            if (setOpenProp) {\n                return setOpenProp?.(typeof value === 'function' ? value(open) : value)\n            }\n\n            _setOpen(value)\n        },\n        [setOpenProp, open]\n    )\n\n    const toggleNavbar = React.useCallback(() => {\n        setOpen((open) => !open)\n    }, [setOpen])\n\n    const contextValue = React.useMemo<NavbarContextProps>(\n        () => ({\n            open,\n            setOpen,\n            isCompact,\n            toggleNavbar,\n            variant,\n            isSticky,\n            side\n        }),\n        [open, setOpen, isCompact, toggleNavbar, variant, isSticky, side]\n    )\n    return (\n        <NavbarContext.Provider value={contextValue}>\n            <header\n                data-variant={variant}\n                className={navbarStyles({ variant, className })}\n                {...props}\n            >\n                {children}\n            </header>\n        </NavbarContext.Provider>\n    )\n}\n\nconst navStyles = tv({\n    base: [\n        'hidden h-[--navbar-height] [--navbar-height:3.5rem] px-4 group peer lg:flex items-center w-full',\n        '[&>div]:max-w-[1680px] lg:[&>div]:flex [&>div]:items-center [&>div]:w-full [&>div]:mx-auto'\n    ],\n    variants: {\n        isSticky: {\n            true: 'sticky z-20 top-0'\n        },\n        variant: {\n            floating: 'bg-background max-w-[1680px] mx-auto shadow-sm border rounded-lg sm:px-4',\n            navbar: 'bg-background shadow-sm border-b sm:px-6',\n            inset: [\n                'bg-muted mx-auto dark:bg-background sm:px-6',\n                '[&>div]:max-w-[1680px] lg:[&>div]:flex [&>div]:items-center [&>div]:w-full [&>div]:mx-auto'\n            ]\n        }\n    }\n})\n\ninterface NavbarProps extends React.ComponentProps<'div'> {\n    variant?: 'navbar' | 'floating' | 'inset'\n    isSticky?: boolean\n    side?: 'left' | 'right'\n}\n\nconst Nav = ({ className, ...props }: NavbarProps) => {\n    const { isCompact, side, variant, isSticky, open, setOpen } = useNavbar()\n\n    if (isCompact) {\n        return (\n            <Sheet isOpen={open} onOpenChange={setOpen} {...props}>\n                <Sheet.Content\n                    side={side}\n                    aria-label='Compact Navbar'\n                    data-navbar='compact'\n                    classNames={{\n                        content: 'text-foreground [&>button]:hidden'\n                    }}\n                    isStack={variant === 'floating'}\n                >\n                    <Sheet.Body className='sm:px-4 px-2'>{props.children}</Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        )\n    }\n\n    return (\n        <div className={navStyles({ isSticky, variant, className })} {...props}>\n            <div>{props.children}</div>\n        </div>\n    )\n}\n\nconst Trigger = ({ className, onPress, ...props }: React.ComponentProps<typeof Button>) => {\n    const { toggleNavbar } = useNavbar()\n    return (\n        <Button\n            data-sidebar='trigger'\n            variant='ghost'\n            aria-label={props['aria-label'] || 'Toggle Navbar'}\n            size='icon'\n            className={className}\n            onPress={(event) => {\n                onPress?.(event)\n                toggleNavbar()\n            }}\n            {...props}\n        >\n            <IconMenu />\n            <span className='sr-only'>Toggle Navbar</span>\n        </Button>\n    )\n}\n\nconst Section = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    const { isCompact } = useNavbar()\n    const id = React.useId()\n    return (\n        <LayoutGroup id={id}>\n            <div\n                data-slot='navbar-section'\n                className={cn(\n                    'flex',\n                    isCompact ? 'flex-col gap-y-4' : 'flex-row gap-x-3 items-center',\n                    className\n                )}\n                {...props}\n            >\n                {props.children}\n            </div>\n        </LayoutGroup>\n    )\n}\n\nconst navItemStyles = tv({\n    base: [\n        'relative rounded-lg lg:text-sm px-2 flex items-center gap-x-2 [&>[data-slot=icon]]:-mx-0.5 text-muted-foreground outline-none transition-colors',\n        'hover:text-foreground focus:text-foreground pressed:text-foreground focus-visible:outline-1 focus-visible:outline-primary',\n        'disabled:opacity-60 disabled:cursor-default',\n        '[&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0'\n    ],\n    variants: {\n        isCurrent: {\n            true: 'text-foreground'\n        }\n    }\n})\n\ninterface ItemProps extends LinkProps {\n    isCurrent?: boolean\n}\n\nconst Item = ({ className, isCurrent, ...props }: ItemProps) => {\n    const { variant, isCompact } = useNavbar()\n    return (\n        <Link\n            slot='navbar-item'\n            aria-current={isCurrent ? 'page' : undefined}\n            className={cr(className, (className, ...renderProps) =>\n                navItemStyles({ ...renderProps, isCurrent, className })\n            )}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof props.children === 'function' ? props.children(values) : props.children}\n\n                    {(isCurrent || values.isCurrent) && !isCompact && variant !== 'floating' && (\n                        <motion.span\n                            layoutId='current-indicator'\n                            className='absolute inset-x-2 bottom-[calc(var(--navbar-height)*-0.33)] h-0.5 rounded-full bg-foreground'\n                        />\n                    )}\n                </>\n            )}\n        </Link>\n    )\n}\n\nconst Logo = ({ className, ...props }: LinkProps) => {\n    return (\n        <Link\n            className={cn(\n                'lg:mr-4 rounded-lg focus:outline-none flex items-center gap-x-2 focus-visible:outline-1 focus-visible:outline-primary px-2 py-4 lg:px-0 lg:py-0 text-foreground',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst Flex = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    return <div className={cn('flex items-center gap-2 sm:gap-3', className)} {...props} />\n}\n\nconst compactStyles = tv({\n    base: 'lg:hidden flex peer-has-[[data-variant=floating]]:border bg-background justify-between',\n    variants: {\n        variant: {\n            floating: 'border h-12 rounded-lg px-3.5',\n            inset: 'h-14 px-4',\n            navbar: 'h-14 border-b px-4'\n        }\n    }\n})\n\nconst Compact = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    const { variant } = useNavbar()\n    return <div className={compactStyles({ variant, className })} {...props} />\n}\n\nconst insetStyles = tv({\n    base: 'grow px-0 py-4 lg:px-4 lg:py-10',\n    variants: {\n        variant: {\n            floating: '',\n            inset: 'bg-background dark:brightness-150 lg:rounded-lg lg:shadow-sm lg:ring-1 lg:ring-dark/5',\n            navbar: ''\n        }\n    }\n})\n\nconst Inset = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    const { variant } = useNavbar()\n    return (\n        <main\n            data-variant={variant}\n            className={cn('flex flex-1 flex-col', variant === 'inset' && 'pb-2 lg:px-2', className)}\n        >\n            <div className={insetStyles({ variant, className })}>\n                <div className='container'>{props.children}</div>\n            </div>\n        </main>\n    )\n}\n\nNavbar.Nav = Nav\nNavbar.Inset = Inset\nNavbar.Compact = Compact\nNavbar.Flex = Flex\nNavbar.Trigger = Trigger\nNavbar.Logo = Logo\nNavbar.Item = Item\nNavbar.Section = Section\n\nexport { Navbar }\n"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    Button as ButtonPrimitive,\n    ButtonProps as ButtonPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from './utils'\n\nconst buttonVariants = tv({\n    base: [\n        'relative btn border before:absolute after:absolute box-border whitespace-nowrap transition-colors no-underline isolate inline-flex items-center justify-center gap-x-2 font-medium',\n        'pressed:brightness-95',\n        '[&>svg]:-mx-0.5 [&>svg]:my-1 [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-[--btn-icon]',\n        'disabled:cursor-default disabled:opacity-50 disabled:pointer-events-none',\n        'border-transparent bg-[--btn-border]',\n        'before:inset-0 before:-z-10 before:bg-[--btn-bg] before:shadow before:data-[disabled]:shadow-none',\n        'after:shadow-[shadow:inset_0_1px_theme(colors.white/15%)] after:active:bg-[--btn-hover-overlay] after:hover:bg-[--btn-hover-overlay] after:data-[disabled]:shadow-none after:inset-0 after:-z-10',\n        'dark:after:-inset-px dark:before:hidden dark:border-white/5 dark:bg-[--btn-bg]',\n        'outline outline-0 focus-visible:outline-2 outline-primary outline-offset-2'\n    ],\n    variants: {\n        variant: {\n            primary: [\n                'text-primary-foreground [--btn-bg:theme(colors.primary.DEFAULT)] [--btn-border:theme(colors.primary.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n                '[--btn-icon:theme(colors.primary.foreground/90%)] active:[--btn-icon:theme(colors.primary.foreground)] hover:[--btn-icon:theme(colors.primary.foreground)]'\n            ],\n            secondary: [\n                'text-secondary-foreground [--btn-bg:theme(colors.secondary.DEFAULT)] [--btn-border:theme(colors.secondary.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n                '[--btn-icon:theme(colors.secondary.foreground/90%)] active:[--btn-icon:theme(colors.secondary.foreground)] hover:[--btn-icon:theme(colors.secondary.foreground)]'\n            ],\n            danger: [\n                'text-danger-foreground [--btn-bg:theme(colors.danger.DEFAULT)] [--btn-border:theme(colors.danger.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n                '[--btn-icon:theme(colors.danger.foreground/90%)] active:[--btn-icon:theme(colors.danger.foreground)] hover:[--btn-icon:theme(colors.danger.foreground)]'\n            ],\n            success: [\n                'text-success-foreground [--btn-bg:theme(colors.success.DEFAULT)] [--btn-border:theme(colors.success.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n                '[--btn-icon:theme(colors.success.foreground/90%)] active:[--btn-icon:theme(colors.success.foreground)] hover:[--btn-icon:theme(colors.success.foreground)]'\n            ],\n            info: [\n                'text-info-foreground [--btn-bg:theme(colors.info.DEFAULT)] [--btn-border:theme(colors.info.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n                '[--btn-icon:theme(colors.info.foreground/90%)] active:[--btn-icon:theme(colors.info.foreground)] hover:[--btn-icon:theme(colors.info.foreground)]'\n            ],\n            warning: [\n                'text-warning-foreground [--btn-bg:theme(colors.warning.DEFAULT)] [--btn-border:theme(colors.warning.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n                '[--btn-icon:theme(colors.warning.foreground/90%)] active:[--btn-icon:theme(colors.warning.foreground)] hover:[--btn-icon:theme(colors.warning.foreground)]'\n            ],\n            dark: [\n                'text-dark-foreground [--btn-bg:theme(colors.dark.DEFAULT)] [--btn-border:theme(colors.dark.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n                '[--btn-icon:theme(colors.dark.foreground/90%)] active:[--btn-icon:theme(colors.dark.foreground)] hover:[--btn-icon:theme(colors.dark.foreground)]'\n            ],\n            muted: [\n                'text-muted-foreground [--btn-bg:theme(colors.muted.DEFAULT)] [--btn-border:theme(colors.muted.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n                '[--btn-icon:theme(colors.muted.foreground/90%)] active:[--btn-icon:theme(colors.muted.foreground)] hover:[--btn-icon:theme(colors.muted.foreground)]'\n            ],\n            outline: [\n                'text-foreground bg-background/80 backdrop-blur-lg border-border dark:border-border [--btn-hover-overlay:theme(colors.muted.DEFAULT)]',\n                '[--btn-icon:theme(colors.foreground)] shadow-none',\n                'dark:after:shadow-none dark:before:shadow-none before:shadow-none after:shadow-none'\n            ],\n            ghost: 'text-foreground bg-transparent hover:bg-muted dark:hover:bg-muted shadow-none border-none after:shadow-none before:shadow-none'\n        },\n        size: {\n            xs: 'h-8 px-2 text-xs',\n            sm: 'h-9 px-3 text-sm',\n            md: 'h-10 px-4 py-2 text-sm',\n            lg: 'h-10 sm:h-11 px-6 sm:px-8 text-base',\n            icon: 'size-10 shrink-0'\n        },\n        shape: {\n            square: 'rounded-lg before:rounded-[calc(theme(borderRadius.lg)-1px)] after:rounded-[calc(theme(borderRadius.lg)-1px)] dark:after:rounded-lg',\n            circle: 'rounded-[9999px] before:rounded-[9998px] after:rounded-[9998px] dark:after:rounded-[9999px]'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        size: 'md',\n        shape: 'square'\n    }\n})\n\nexport interface ButtonProps extends ButtonPrimitiveProps, VariantProps<typeof buttonVariants> {}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, shape, ...props }, ref) => {\n        return (\n            <ButtonPrimitive\n                className={(values) =>\n                    cn(\n                        buttonVariants({\n                            variant,\n                            size,\n                            shape,\n                            className:\n                                typeof className === 'function' ? className(values) : className\n                        })\n                    )\n                }\n                ref={ref}\n                {...props}\n            />\n        )\n    }\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }\n"
  },
  "toolbar": {
    "component": "@/components/ui/toolbar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    Group,\n    Toolbar as ToolbarPrimitive,\n    type GroupProps,\n    type SeparatorProps,\n    type ToolbarProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Separator } from './separator'\nimport { Toggle } from './toggle'\nimport { cn, cr } from './utils'\n\nconst toolbarStyles = tv({\n    base: 'flex gap-2 group',\n    variants: {\n        orientation: {\n            horizontal:\n                'flex-row [&::-webkit-scrollbar]:hidden [scrollbar-width:none] [-ms-overflow-style:none]',\n            vertical: 'flex-col items-start'\n        }\n    }\n})\n\nconst ToolbarSeparator = ({ className, ...props }: SeparatorProps) => {\n    const { orientation } = React.useContext(ToolbarContext)\n    const effectiveOrientation = orientation === 'vertical' ? 'horizontal' : 'vertical'\n    return (\n        <Separator\n            orientation={effectiveOrientation}\n            className={cn(effectiveOrientation === 'vertical' ? 'mx-1.5' : 'my-1.5 w-9', className)}\n            {...props}\n        />\n    )\n}\n\nconst ToolbarContext = React.createContext<{ orientation?: ToolbarProps['orientation'] }>({\n    orientation: 'horizontal'\n})\n\nconst Toolbar = ({ orientation = 'horizontal', ...props }: ToolbarProps) => {\n    return (\n        <ToolbarContext.Provider value={{ orientation }}>\n            <ToolbarPrimitive\n                orientation={orientation}\n                {...props}\n                className={cr(props.className, (className, renderProps) =>\n                    toolbarStyles({ ...renderProps, className })\n                )}\n            />\n        </ToolbarContext.Provider>\n    )\n}\n\nconst toolbarGroupStyles = tv({\n    base: [\n        'flex gap-2',\n        'group-orientation-vertical:flex-col group-orientation-vertical:items-start'\n    ]\n})\n\nconst ToolbarGroupContext = React.createContext<{ isDisabled?: boolean }>({})\n\nconst ToolbarGroup = ({ isDisabled, ...props }: GroupProps) => {\n    return (\n        <ToolbarGroupContext.Provider value={{ isDisabled }}>\n            <Group className={toolbarGroupStyles()} {...props}>\n                {props.children}\n            </Group>\n        </ToolbarGroupContext.Provider>\n    )\n}\n\nconst Item = ({ isDisabled, ...props }: React.ComponentProps<typeof Toggle>) => {\n    const context = React.useContext(ToolbarGroupContext)\n    const effectiveIsDisabled = isDisabled || context.isDisabled\n\n    return <Toggle isDisabled={effectiveIsDisabled} {...props} />\n}\n\nToolbar.Group = ToolbarGroup\nToolbar.Separator = ToolbarSeparator\nToolbar.Item = Item\n\nexport { Toolbar }\n"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "import * as React from 'react'\n\nimport { clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Heading } from './heading'\n\nconst card = tv({\n    slots: {\n        root: [\n            'bg-background w-full card rounded-lg [&:has(table)_.footer]:border-t [&:has(table)]:overflow-hidden text-foreground [&_table]:overflow-hidden',\n            '[&_img]:rounded-lg'\n        ],\n        header: 'flex flex-col space-y-1.5 px-6 py-5',\n        title: 'sm:leading-6 leading-none font-semibold tracking-tight',\n        description: 'text-base text-muted-foreground sm:text-sm',\n        content:\n            'px-6 pb-6 [&:has(table)_thead]:bg-muted/40 has-[table]:p-0 [&:has(table)+.footer]:py-5 [&:has(table)]:border-t',\n        footer: 'footer flex items-center p-6 pt-0'\n    }\n})\n\nconst { root, header, title, description, content, footer } = card()\n\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n    borderless?: boolean\n}\n\nconst Card = ({ className, borderless = false, ...props }: CardProps) => {\n    return (\n        <div\n            className={root({\n                className: twMerge(clsx(className, !borderless && 'border shadow-sm'))\n            })}\n            {...props}\n        />\n    )\n}\n\ninterface HeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n    title?: string\n    description?: string\n    withoutPadding?: boolean\n}\n\nconst Header = ({\n    withoutPadding = false,\n    className,\n    title,\n    description,\n    children,\n    ...props\n}: HeaderProps) => (\n    <div\n        className={header({ className: twMerge(clsx(className, withoutPadding && 'px-0 pt-0')) })}\n        {...props}\n    >\n        {title && <Title>{title}</Title>}\n        {description && <Description>{description}</Description>}\n        {!title && typeof children === 'string' ? <Title>{children}</Title> : children}\n    </div>\n)\n\nconst Title = ({ className, level = 3, ...props }: React.ComponentProps<typeof Heading>) => {\n    return <Heading level={level} className={title({ className })} {...props} />\n}\n\nconst Description = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return <div {...props} slot='description' className={description({ className })} {...props} />\n}\n\nconst Content = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return <div className={content({ className })} {...props} />\n}\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return <div className={footer({ className })} {...props} />\n}\n\nCard.Content = Content\nCard.Description = Description\nCard.Footer = Footer\nCard.Header = Header\nCard.Title = Title\n\nexport { Card }\n"
  },
  "toast": {
    "component": "@/components/ui/toast",
    "raw": "'use client'\n\nimport { IconCheck, IconCircleAlert, IconLoaderCircle, IconTriangleAlert } from 'hq-icons'\nimport { Toaster, type ToasterProps } from 'sonner'\nimport { twJoin } from 'tailwind-merge'\n\nimport { useTheme } from '@/components/providers'\n\nimport { buttonVariants } from './button'\n\nconst Toast = ({ ...props }: ToasterProps) => {\n    const { theme = 'system' } = useTheme()\n    return (\n        <Toaster\n            theme={theme as ToasterProps['theme']}\n            className='toaster group'\n            icons={{\n                info: <IconCircleAlert />,\n                success: <IconCheck />,\n                warning: <IconTriangleAlert />,\n                error: <IconTriangleAlert />,\n                loading: <IconLoaderCircle className='animate-spin' />\n            }}\n            toastOptions={{\n                unstyled: true,\n                closeButton: true,\n                classNames: {\n                    toast: twJoin(\n                        'bg-background ring-1 ring-foreground/10 dark:ring-inset sm:min-w-[22rem] rounded-lg text-foreground overflow-hidden text-[0.925rem] backdrop-blur-xl px-4 py-3 font-normal sm:px-5 sm:py-5',\n                        '[&:has([data-icon])_[data-content]]:ml-5',\n                        '[&:has([data-button])_[data-close-button=\"true\"]]:hidden',\n                        '[&:not([data-description])_[data-title]]:font-normal',\n                        '[&:has([data-description])_[data-title]]:!font-medium [&:has([data-description])_[data-title]]:!text-lg',\n                        '[&>[data-button]]:absolute [&>[data-button=true]]:bottom-4',\n                        '[&>[data-action=true]]:right-4',\n                        '[&>[data-cancel=true]]:left-4'\n                    ),\n                    icon: 'absolute top-[1rem] sm:top-[1.50rem]',\n                    content:\n                        '[&:not(:has(+button))]:pr-10 [&:has(+button)]:pb-11 md:[&:has(+button)]:pb-9',\n                    error: 'bg-danger ring-danger-foreground/10 text-white ring-inset [&>[data-close-button=true]>svg]:text-white',\n                    info: 'bg-info ring-info-foreground/10 text-info-foreground ring-inset [&>[data-close-button=true]>svg]:text-info-foreground',\n                    warning:\n                        'bg-warning text-warning-foreground ring-warning-foreground/10 ring-inset [&>[data-close-button=true]>svg]:text-warning-foreground',\n                    success:\n                        'bg-primary ring-primary/50 text-primary-foreground ring-inset [&>[data-close-button=true]>svg]:text-primary-foreground',\n                    cancelButton: buttonVariants({\n                        className: '',\n                        size: 'xs',\n                        variant: 'outline'\n                    }),\n                    actionButton: buttonVariants({\n                        className: 'self-end justify-self-end',\n                        size: 'xs'\n                    }),\n                    closeButton: twJoin([\n                        '[&_svg]:size-5 size-8 absolute top-1/2 transform -translate-y-1/2 right-2 lg:right-3 left-auto grid place-content-center rounded-lg !bg-transparent hover:!bg-dark/20 dark:hover:!bg-white/20 border-0 [&_svg]:text-foreground'\n                    ])\n                }\n            }}\n            {...props}\n        />\n    )\n}\n\nexport { Toast }\n"
  },
  "color-swatch": {
    "component": "@/components/ui/color-swatch",
    "raw": "'use client'\n\nimport {\n    ColorSwatch as ColorSwatchPrimitive,\n    parseColor,\n    type ColorSwatchProps\n} from 'react-aria-components'\n\nimport { cn } from './utils'\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    return result\n        ? {\n              r: parseInt(result[1], 16),\n              g: parseInt(result[2], 16),\n              b: parseInt(result[3], 16)\n          }\n        : null\n}\n\nconst hsbToRgb = (h: number, s: number, b: number): { r: number; g: number; b: number } => {\n    s /= 100\n    b /= 100\n    const k = (n: number) => (n + h / 60) % 6\n    const f = (n: number) => b * (1 - s * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n    return {\n        r: Math.round(255 * f(5)),\n        g: Math.round(255 * f(3)),\n        b: Math.round(255 * f(1))\n    }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n    const a = [r, g, b].map((v) => {\n        v /= 255\n        return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)\n    })\n    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722\n}\n\ntype HSBColor = {\n    hue: number\n    saturation: number\n    brightness: number\n}\n\nconst isBrightColor = (color: string | HSBColor): boolean => {\n    let r, g, b\n\n    if (typeof color === 'string') {\n        if (color.startsWith('#')) {\n            const rgb = hexToRgb(color)\n            if (rgb) {\n                r = rgb.r\n                g = rgb.g\n                b = rgb.b\n            } else {\n                return false\n            }\n        } else if (color.startsWith('rgb')) {\n            const rgbValues = color.match(/\\d+/g)\n            if (rgbValues) {\n                r = parseInt(rgbValues[0], 10)\n                g = parseInt(rgbValues[1], 10)\n                b = parseInt(rgbValues[2], 10)\n            } else {\n                return false\n            }\n        } else {\n            const namedColors: Record<string, string> = {\n                white: '#ffffff',\n                black: '#000000'\n            }\n            const hex = namedColors[color.toLowerCase()]\n            if (hex) {\n                const rgb = hexToRgb(hex)\n                if (rgb) {\n                    r = rgb.r\n                    g = rgb.g\n                    b = rgb.b\n                } else {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n    } else if (\n        typeof color === 'object' &&\n        'hue' in color &&\n        'saturation' in color &&\n        'brightness' in color\n    ) {\n        const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n    } else {\n        return false\n    }\n\n    const lum = luminance(r, g, b)\n    return lum > 0.75\n}\n\nconst defaultColor = parseColor('hsl(216, 98%, 52%)')\n\nconst ColorSwatch = ({ className, ...props }: ColorSwatchProps) => {\n    const color = props.color?.toString() ?? ''\n    const needRing = color ? isBrightColor(color) : false\n    return (\n        <ColorSwatchPrimitive\n            data-slot='color-swatch'\n            aria-label={props['aria-label'] ?? 'Color swatch'}\n            className={cn(\n                'size-8 cs rounded-lg shrink-0',\n                needRing && 'ring-1 ring-inset ring-foreground/10',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nexport { ColorSwatch, defaultColor, isBrightColor }\n"
  },
  "description-list": {
    "component": "@/components/ui/description-list",
    "raw": "import React from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nconst descriptionListStyles = tv({\n    slots: {\n        dl: 'grid grid-cols-1 text-base/6 sm:grid-cols-[min(50%,theme(spacing.80))_auto] sm:text-sm/6',\n        dt: 'col-start-1 border-t pt-3 text-muted-foreground first:border-none sm:py-3',\n        dd: 'pb-3 pt-1 text-foreground sm:border-t sm:py-3 sm:[&:nth-child(2)]:border-none'\n    }\n})\n\nconst { dl, dt, dd } = descriptionListStyles()\n\nconst DescriptionList = ({ className, ...props }: React.ComponentPropsWithoutRef<'dl'>) => {\n    return <dl {...props} className={dl({ className })} />\n}\n\nconst DescriptionTerm = ({ className, ...props }: React.ComponentPropsWithoutRef<'dt'>) => {\n    return <dt {...props} className={dt({ className })} />\n}\n\nconst DescriptionDetails = ({ className, ...props }: React.ComponentPropsWithoutRef<'dd'>) => {\n    return <dd {...props} className={dd({ className })} />\n}\n\nDescriptionList.Term = DescriptionTerm\nDescriptionList.Details = DescriptionDetails\nexport { DescriptionList }\n"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport { IconCamera, IconFolder, IconPaperclip } from 'hq-icons'\nimport {\n    FileTrigger as FileTriggerPrimitive,\n    type FileTriggerProps as FileTriggerPrimitiveProps\n} from 'react-aria-components'\n\nimport { Button, type ButtonProps } from './button'\n\ninterface FileTriggerProps extends FileTriggerPrimitiveProps, Omit<ButtonProps, 'children'> {\n    withIcon?: boolean\n}\n\nconst FileTrigger = ({\n    variant = 'primary',\n    size = 'md',\n    shape = 'square',\n    withIcon = true,\n    ...props\n}: FileTriggerProps) => {\n    return (\n        <>\n            <FileTriggerPrimitive {...props}>\n                <Button isDisabled={props.isDisabled} variant={variant} size={size} shape={shape}>\n                    {withIcon && (\n                        <>\n                            {props.defaultCamera ? (\n                                <IconCamera />\n                            ) : props.acceptDirectory ? (\n                                <IconFolder />\n                            ) : (\n                                <IconPaperclip className='rotate-45' />\n                            )}\n                        </>\n                    )}\n                    {props.children ? (\n                        props.children\n                    ) : (\n                        <>\n                            {props.allowsMultiple\n                                ? 'Browse a files'\n                                : props.acceptDirectory\n                                  ? 'Browse'\n                                  : 'Browse a file'}\n                            ...\n                        </>\n                    )}\n                </Button>\n            </FileTriggerPrimitive>\n        </>\n    )\n}\n\nexport { FileTrigger }\n"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\n\nimport { IconChevronLeft, IconChevronRight } from 'hq-icons'\nimport {\n    CalendarCell,\n    CalendarGrid,\n    CalendarGridBody,\n    CalendarGridHeader as CalendarGridHeaderPrimitive,\n    CalendarHeaderCell,\n    Calendar as CalendarPrimitive,\n    type CalendarProps as CalendarPrimitiveProps,\n    type DateValue,\n    Heading,\n    Text,\n    useLocale\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { cr, ctr, focusRing } from './utils'\n\nconst cellStyles = tv({\n    extend: focusRing,\n    base: 'flex size-10 sm:size-9 cursor-default tabular-nums items-center justify-center rounded-lg lg:text-sm forced-colors:outline-0',\n    variants: {\n        isSelected: {\n            false: 'text-foreground forced-colors:text-[ButtonText] hover:bg-secondary-foreground/15 pressed:bg-secondary-foreground/20',\n            true: 'bg-primary text-primary-foreground invalid:bg-danger invalid:text-danger-foreground forced-colors:bg-[Highlight] forced-colors:text-[Highlight] forced-colors:invalid:bg-[Mark]'\n        },\n        isDisabled: {\n            true: 'text-muted-foreground/70 forced-colors:text-[GrayText]'\n        }\n    }\n})\n\ninterface CalendarProps<T extends DateValue>\n    extends Omit<CalendarPrimitiveProps<T>, 'visibleDuration'> {\n    errorMessage?: string\n    className?: string\n}\n\nconst Calendar = <T extends DateValue>({ errorMessage, className, ...props }: CalendarProps<T>) => {\n    return (\n        <CalendarPrimitive\n            className={ctr(className, 'max-w-[17.5rem] sm:max-w-[15.8rem]')}\n            {...props}\n        >\n            <CalendarHeader />\n            <CalendarGrid className='[&_td]:border-collapse [&_td]:px-0'>\n                <CalendarGridHeader />\n                <CalendarGridBody>\n                    {(date) => (\n                        <CalendarCell\n                            date={date}\n                            className={cr(className, (className, renderProps) =>\n                                cellStyles({\n                                    ...renderProps,\n                                    className\n                                })\n                            )}\n                        />\n                    )}\n                </CalendarGridBody>\n            </CalendarGrid>\n            {errorMessage && (\n                <Text slot='errorMessage' className='text-sm text-red-600'>\n                    {errorMessage}\n                </Text>\n            )}\n        </CalendarPrimitive>\n    )\n}\n\nconst calendarHeaderStyles = tv({\n    slots: {\n        header: 'flex w-full justify-center gap-1 px-1 pb-5 sm:pb-4',\n        heading: 'mr-2 text-muted-foreground tracking-tight flex-1 text-left font-medium',\n        calendarGridHeaderCell: 'text-sm lg:text-xs font-semibold text-muted-foreground'\n    }\n})\n\nconst { header, heading, calendarGridHeaderCell } = calendarHeaderStyles()\n\nconst CalendarHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    const { direction } = useLocale()\n\n    return (\n        <header className={header({ className })} {...props}>\n            <Heading className={heading()} />\n            <div className='flex items-center gap-1'>\n                <Button\n                    size='icon'\n                    className='[&_[data-slot=icon]]:text-foreground size-8 sm:size-7'\n                    shape='circle'\n                    variant='ghost'\n                    slot='previous'\n                >\n                    {direction === 'rtl' ? <IconChevronRight /> : <IconChevronLeft aria-hidden />}\n                </Button>\n                <Button\n                    size='icon'\n                    className='[&_[data-slot=icon]]:text-foreground size-8 sm:size-7'\n                    shape='circle'\n                    variant='ghost'\n                    slot='next'\n                >\n                    {direction === 'rtl' ? <IconChevronLeft /> : <IconChevronRight />}\n                </Button>\n            </div>\n        </header>\n    )\n}\n\nconst CalendarGridHeader = () => {\n    return (\n        <CalendarGridHeaderPrimitive>\n            {(day) => (\n                <CalendarHeaderCell className={calendarGridHeaderCell()}>{day}</CalendarHeaderCell>\n            )}\n        </CalendarGridHeaderPrimitive>\n    )\n}\n\nCalendar.Header = CalendarHeader\nCalendar.GridHeader = CalendarGridHeader\nexport { Calendar }\n"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    DateField as DateFieldPrimitive,\n    type DateFieldProps as DateFieldPrimitiveProps,\n    DateInput as DateInputPrimitive,\n    type DateInputProps,\n    DateSegment,\n    type DateValue,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { cn, ctr } from './utils'\n\ninterface DateFieldProps<T extends DateValue> extends DateFieldPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n}\n\nconst DateField = <T extends DateValue>({\n    prefix,\n    suffix,\n    label,\n    description,\n    errorMessage,\n    ...props\n}: DateFieldProps<T>) => {\n    return (\n        <DateFieldPrimitive\n            {...props}\n            className={ctr(props.className, 'flex group flex-col gap-y-1.5')}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                {prefix ? <span data-slot='prefix'>{prefix}</span> : null}\n                <DateInput />\n                {suffix ? <span data-slot='suffix'>{suffix}</span> : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </DateFieldPrimitive>\n    )\n}\n\nconst segmentStyles = tv({\n    base: 'inline shrink-0 sm:uppercase tabular-nums rounded-lg p-0.5 tracking-wider text-foreground caret-transparent outline outline-0 forced-color-adjust-none type-literal:px-0 lg:text-sm forced-colors:text-[ButtonText]',\n    variants: {\n        isPlaceholder: {\n            true: 'text-muted-foreground'\n        },\n        isDisabled: {\n            true: 'text-foreground/50 forced-colors:text-[GrayText]'\n        },\n        isFocused: {\n            true: [\n                'bg-primary text-primary-foreground forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]',\n                'invalid:bg-danger invalid:text-danger-foreground'\n            ]\n        }\n    }\n})\n\nconst DateInput = ({ className, ...props }: Omit<DateInputProps, 'children'>) => {\n    return (\n        <DateInputPrimitive\n            className={cn(\n                'bg-transparent p-2 text-base text-foreground placeholder-muted-foreground lg:text-sm',\n                className\n            )}\n            {...props}\n        >\n            {(segment) => <DateSegment segment={segment} className={segmentStyles} />}\n        </DateInputPrimitive>\n    )\n}\n\nexport { DateField, DateInput, segmentStyles, type DateFieldProps }\n"
  },
  "keyboard": {
    "component": "@/components/ui/keyboard",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Keyboard as KeyboardPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst keyboardStyles = tv({\n    slots: {\n        base: '-mr-1 ml-auto hidden items-center gap-[0.25rem] px-1 lg:inline-flex',\n        kbd: [\n            'text-center font-sans capitalize text-muted-foreground group-focus:text-foreground',\n            'inline-grid min-h-5 min-w-5 place-content-center rounded-lg bg-background font-sans text-[.75rem] uppercase text-foreground ring-1 ring-foreground/10 group-focus:opacity-60'\n        ]\n    }\n})\n\nconst { base, kbd } = keyboardStyles()\n\ninterface KeyboardProps extends React.HTMLAttributes<HTMLElement> {\n    keys: string | string[]\n    classNames?: {\n        base?: string\n        kbd?: string\n    }\n}\n\nconst Keyboard = ({ keys, classNames, className, ...props }: KeyboardProps) => {\n    return (\n        <KeyboardPrimitive\n            className={base({ className: classNames?.base ?? className })}\n            {...props}\n        >\n            {(Array.isArray(keys) ? keys : keys.split('')).map((char, index) => (\n                <kbd\n                    key={index}\n                    className={kbd({\n                        className: index > 0 && char.length > 1 ? 'pl-1' : classNames?.kbd\n                    })}\n                >\n                    {char}\n                </kbd>\n            ))}\n        </KeyboardPrimitive>\n    )\n}\n\nexport { Keyboard, type KeyboardProps }\n"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCheck, IconMenu } from 'hq-icons'\nimport {\n    ListBoxItem as ListBoxItemPrimitive,\n    ListBox as ListBoxPrimitive,\n    type ListBoxItemProps as ListBoxItemPrimitiveProps,\n    type ListBoxProps as ListBoxPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DropdownItemDetails, DropdownSection } from './dropdown'\nimport { cn, cr } from './utils'\n\nconst listBoxStyles = tv({\n    base: 'flex max-h-96 w-full gap-y-1 min-w-72 flex-col overflow-y-auto rounded-lg border p-1 shadow-lg outline-none'\n})\n\ninterface ListBoxProps<T> extends ListBoxPrimitiveProps<T> {\n    className?: string\n}\n\nconst ListBox = <T extends object>({ children, className, ...props }: ListBoxProps<T>) => (\n    <ListBoxPrimitive {...props} className={listBoxStyles({ className })}>\n        {children}\n    </ListBoxPrimitive>\n)\nconst listBoxItemStyles = tv({\n    base: 'lbi cursor-pointer relative rounded-[calc(var(--radius)-1px)] p-2 text-base outline-none lg:text-sm',\n    variants: {\n        isFocusVisible: {\n            true: 'bg-secondary [&:focus-visible_[slot=label]]:text-primary-foreground [&:focus-visible_[slot=description]]:text-primary-foreground/70 text-secondary-foreground'\n        },\n        isHovered: {\n            true: 'bg-primary [&:hover_[slot=label]]:text-primary-foreground [&:hover_[slot=description]]:text-primary-foreground/70 text-primary-foreground [&_.text-muted-foreground]:text-primary-foreground/80'\n        },\n        isFocused: {\n            true: '[&_svg]:text-primary-foreground [&_[data-slot=label]]:text-primary-foreground [&_.text-muted-foreground]:text-primary-foreground/80 bg-primary text-primary-foreground'\n        },\n        isSelected: {\n            true: '[&_svg]:text-primary-foreground [&_[data-slot=label]]:text-primary-foreground [&_.text-muted-foreground]:text-primary-foreground/80 bg-primary text-primary-foreground'\n        },\n        isDragging: { true: 'cursor-grabbing bg-secondary text-secondary-foreground' },\n        isDisabled: {\n            true: 'opacity-70 cursor-default text-muted-foreground'\n        }\n    }\n})\ninterface ListBoxItemProps<T extends object> extends ListBoxItemPrimitiveProps<T> {\n    className?: string\n}\n\nconst ListBoxItem = <T extends object>({ children, className, ...props }: ListBoxItemProps<T>) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <ListBoxItemPrimitive\n            textValue={textValue}\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                listBoxItemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        >\n            {(values) => (\n                <div className='flex items-center gap-2'>\n                    <>\n                        {values.allowsDragging && (\n                            <IconMenu\n                                className={cn(\n                                    'size-4 shrink-0 text-muted-foreground transition',\n                                    values.isFocused && 'text-foreground',\n                                    values.isDragging && 'text-foreground',\n                                    values.isSelected && 'text-primary-foreground/70'\n                                )}\n                            />\n                        )}\n                        <div className='flex flex-col'>\n                            {typeof children === 'function' ? children(values) : children}\n\n                            {values.isSelected && (\n                                <span className='animate-in absolute right-2 top-3 lg:top-2.5'>\n                                    <IconCheck />\n                                </span>\n                            )}\n                        </div>\n                    </>\n                </div>\n            )}\n        </ListBoxItemPrimitive>\n    )\n}\n\ntype ListBoxPickerProps<T> = ListBoxProps<T>\n\nconst ListBoxPicker = <T extends object>({ className, ...props }: ListBoxPickerProps<T>) => {\n    return (\n        <ListBoxPrimitive\n            className={cn('max-h-72 overflow-auto p-1 outline-none', className)}\n            {...props}\n        />\n    )\n}\n\nconst Section = ({ className, ...props }: React.ComponentProps<typeof DropdownSection>) => {\n    return (\n        <DropdownSection\n            className={cn(className, '[&_.lbi:last-child]:-mb-1.5 gap-y-1')}\n            {...props}\n        />\n    )\n}\n\nListBox.Section = Section\nListBox.ItemDetails = DropdownItemDetails\nListBox.Item = ListBoxItem\nListBox.Picker = ListBoxPicker\n\nexport { ListBox, listBoxStyles, type ListBoxPickerProps }\n"
  },
  "sidebar": {
    "component": "@/components/ui/sidebar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconMenu, IconMinus, IconPanelLeftClose, IconPanelLeftOpen } from 'hq-icons'\nimport {\n    Button as ButtonPrimitive,\n    Disclosure,\n    DisclosurePanel,\n    type DisclosureProps,\n    Link,\n    type LinkProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Sheet } from './sheet'\nimport { Tooltip } from './tooltip'\nimport { cn, cr, useMediaQuery } from './utils'\n\ntype SidebarContextProps = {\n    state: 'expanded' | 'collapsed'\n    open: boolean\n    setOpen: (open: boolean) => void\n    openMobile: boolean\n    setOpenMobile: (open: boolean) => void\n    isMobile: boolean\n    toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n    const context = React.useContext(SidebarContext)\n    if (!context) {\n        throw new Error('useSidebar must be used within a Sidebar.')\n    }\n\n    return context\n}\n\nconst Provider = React.forwardRef<\n    HTMLDivElement,\n    React.ComponentProps<'div'> & {\n        defaultOpen?: boolean\n        isOpen?: boolean\n        onOpenChange?: (open: boolean) => void\n    }\n>(\n    (\n        {\n            defaultOpen = true,\n            isOpen: openProp,\n            onOpenChange: setOpenProp,\n            className,\n            children,\n            ...props\n        },\n        ref\n    ) => {\n        const isMobile = useMediaQuery('(max-width: 768px)')\n        const [openMobile, setOpenMobile] = React.useState(false)\n\n        const [_open, _setOpen] = React.useState(defaultOpen)\n        const open = openProp ?? _open\n        const setOpen = React.useCallback(\n            (value: boolean | ((value: boolean) => boolean)) => {\n                if (setOpenProp) {\n                    return setOpenProp?.(typeof value === 'function' ? value(open) : value)\n                }\n                _setOpen(value)\n                document.cookie = `sidebar:state=${open}; path=/; max-age=${60 * 60 * 24 * 7}`\n            },\n            [setOpenProp, open]\n        )\n\n        const toggleSidebar = React.useCallback(() => {\n            return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n        }, [isMobile, setOpen, setOpenMobile])\n\n        React.useEffect(() => {\n            const handleKeyDown = (e: KeyboardEvent) => {\n                if (e.key === 'b' && (e.metaKey || e.ctrlKey)) {\n                    e.preventDefault()\n                    toggleSidebar()\n                }\n            }\n\n            window.addEventListener('keydown', handleKeyDown)\n            return () => window.removeEventListener('keydown', handleKeyDown)\n        }, [toggleSidebar])\n\n        const state = open ? 'expanded' : 'collapsed'\n\n        const contextValue = React.useMemo<SidebarContextProps>(\n            () => ({\n                state,\n                open,\n                setOpen,\n                isMobile,\n                openMobile,\n                setOpenMobile,\n                toggleSidebar\n            }),\n            [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n        )\n\n        return (\n            <SidebarContext.Provider value={contextValue}>\n                <div\n                    className={cn(\n                        'group/sidebar-wrapper [--sidebar-width:16.5rem] [--sidebar-width-icon:3rem] flex min-h-svh w-full text-foreground dark:has-[[data-variant=inset]]:bg-background has-[[data-variant=inset]]:bg-muted/50',\n                        className\n                    )}\n                    ref={ref}\n                    {...props}\n                >\n                    {children}\n                </div>\n            </SidebarContext.Provider>\n        )\n    }\n)\nProvider.displayName = 'Provider'\n\nconst Inset = ({ className, ...props }: React.ComponentProps<'main'>) => {\n    return (\n        <main\n            className={cn([\n                [\n                    'relative overflow-hidden flex min-h-svh flex-1 flex-col bg-background',\n                    'md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:bg-background md:peer-data-[variant=inset]:rounded-lg',\n                    'peer-data-[variant=inset]:overflow-hidden peer-data-[variant=inset]:border peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:my-2 md:peer-data-[variant=inset]:mr-2',\n                    'md:peer-data-[variant=sidebar]:overflow-visible'\n                ],\n                className\n            ])}\n            {...props}\n        />\n    )\n}\n\nconst Sidebar = ({\n    side = 'left',\n    variant = 'default',\n    collapsible = 'offcanvas',\n    className,\n    children,\n    ...props\n}: React.ComponentProps<'div'> & {\n    side?: 'left' | 'right'\n    variant?: 'default' | 'floating' | 'inset'\n    collapsible?: 'offcanvas' | 'dock' | 'fixed'\n}) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === 'fixed') {\n        return (\n            <div\n                data-state={state}\n                data-collapsible={state === 'collapsed' ? collapsible : ''}\n                className={cn(\n                    'flex min-h-screen h-full w-[--sidebar-width] flex-col bg-background text-foreground',\n                    'data-[state=collapsed]:hidden',\n                    className\n                )}\n                {...props}\n            >\n                {children}\n            </div>\n        )\n    }\n\n    if (isMobile) {\n        return (\n            <Sheet isOpen={openMobile} onOpenChange={setOpenMobile} {...props}>\n                <Sheet.Trigger className='sr-only' />\n                <Sheet.Content\n                    aria-label='Sidebar'\n                    data-sidebar='sidebar'\n                    data-mobile='true'\n                    classNames={{\n                        content: 'bg-background text-foreground [&>button]:hidden'\n                    }}\n                    isStack={variant === 'floating'}\n                    side={side}\n                >\n                    <Sheet.Body className='p-0 sm:p-0'>{children}</Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        )\n    }\n    return (\n        <div\n            className='group peer hidden md:block'\n            data-state={state}\n            data-collapsible={state === 'collapsed' ? collapsible : ''}\n            data-variant={variant}\n            data-side={side}\n        >\n            <div\n                className={cn(\n                    'relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear',\n                    'group-data-[collapsible=offcanvas]:w-0',\n                    'group-data-[side=right]:rotate-180',\n                    variant === 'floating' || variant === 'inset'\n                        ? 'group-data-[collapsible=dock]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]'\n                        : 'group-data-[collapsible=dock]:w-[--sidebar-width-icon]'\n                )}\n            />\n            <div\n                className={cn(\n                    'fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex',\n                    side === 'left'\n                        ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\n                        : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\n                    variant === 'floating' || variant === 'inset'\n                        ? 'p-2 group-data-[collapsible=dock]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'\n                        : 'group-data-[collapsible=dock]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',\n                    className\n                )}\n                {...props}\n            >\n                <div\n                    data-sidebar='sidebar'\n                    className={cn(\n                        'flex h-full w-full flex-col bg-background group-data-[variant=inset]:bg-transparent group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-border group-data-[variant=floating]:bg-muted/50',\n                        variant === 'inset' || state === 'collapsed'\n                            ? '[&_[data-sidebar=header]]:border-transparent [&_[data-sidebar=footer]]:border-transparent'\n                            : '[&_[data-sidebar=header]]:border-b [&_[data-sidebar=footer]]:border-t'\n                    )}\n                >\n                    {children}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst itemStyles = tv({\n    base: 'group/menu-item grid [&>[data-slot=icon]]:size-4 col-span-full [&>[data-slot=icon]]:shrink-0 items-center [&>[data-slot=icon]]:text-muted-foreground relative rounded-lg lg:text-sm leading-6',\n    variants: {\n        collapsed: {\n            true: [\n                'justify-start px-3 [&>[data-slot=icon]]:mr-2 py-2 col-span-full',\n                'md:place-content-center md:grid-cols-[auto] md:[&>[data-slot=icon]]:mr-0 md:px-0 md:py-0 md:size-9'\n            ],\n            false: 'grid-cols-subgrid [&>[data-slot=icon]]:mr-2 px-3 py-2'\n        },\n        isFocused: {\n            true: 'outline-none'\n        },\n        isFocusVisible: {\n            true: 'bg-muted [&:focus-visible_[slot=label]]:text-primary-foreground [&:focus-visible_[slot=description]]:text-primary-foreground/70 text-muted-foreground'\n        },\n        isHovered: {\n            true: [\n                'bg-muted [&:focus-visible_[slot=label]]:text-primary-foreground [&:focus-visible_[slot=description]]:text-primary-foreground/70 text-muted-foreground [&_.text-muted-foreground]:text-muted-foreground/80'\n            ]\n        },\n        isCurrent: {\n            true: [\n                '[&_[data-slot=icon]]:text-primary-foreground [&_[data-slot=label]]:text-primary-foreground [&_.text-muted-foreground]:text-primary-foreground/80 bg-primary text-primary-foreground',\n                '[&_.side-item]:bg-primary-foreground/20 [&_.side-item]:ring-primary-foreground/30'\n            ]\n        },\n        isDisabled: {\n            true: 'opacity-70 cursor-default text-muted-foreground'\n        }\n    }\n})\n\ninterface ItemProps extends LinkProps {\n    icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>\n    badge?: string | number | undefined\n    isCurrent?: boolean\n}\n\nconst Item = ({ isCurrent, children, className, icon: Icon, ...props }: ItemProps) => {\n    const { state, isMobile } = React.useContext(SidebarContext)!\n    return (\n        <Link\n            data-sidebar='menu-item'\n            aria-current={isCurrent ? 'page' : undefined}\n            className={cr(className, (className, renderProps) =>\n                itemStyles({\n                    ...renderProps,\n                    collapsed: state === 'collapsed',\n                    isCurrent,\n                    className\n                })\n            )}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {Icon && (\n                        <>\n                            {state === 'collapsed' && !isMobile ? (\n                                <Tooltip closeDelay={0} delay={0}>\n                                    <Tooltip.Trigger className='focus:outline-none size-full absolute inset-0 grid place-content-center'>\n                                        {<Icon data-slot='icon' />}\n                                        <span className='sr-only'>{children as string}</span>\n                                    </Tooltip.Trigger>\n                                    <Tooltip.Content\n                                        variant='inverse'\n                                        showArrow={false}\n                                        placement='right'\n                                    >\n                                        {children as string}\n                                    </Tooltip.Content>\n                                </Tooltip>\n                            ) : (\n                                <Icon data-slot='icon' />\n                            )}\n                        </>\n                    )}\n                    <span className='col-start-2 group-data-[collapsible=dock]:hidden'>\n                        {typeof children === 'function' ? children(values) : children}\n                        {props.badge && (\n                            <div className='side-item h-[1.30rem] px-1 rounded-lg text-muted-foreground text-xs font-medium ring-1 ring-foreground/20 grid place-content-center w-auto inset-y-1/2 -translate-y-1/2 absolute right-1.5 bg-foreground/[0.02] dark:bg-foreground/10'>\n                                {props.badge}\n                            </div>\n                        )}\n                    </span>\n                </>\n            )}\n        </Link>\n    )\n}\n\nconst Content = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    return (\n        <div\n            data-sidebar='content'\n            className={cn([\n                'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=dock]:items-center group-data-[collapsible=dock]:overflow-hidden [&>section+section]:mt-4',\n                className\n            ])}\n            {...props}\n        />\n    )\n}\n\nconst Trigger = ({ className, onPress, ...props }: React.ComponentProps<typeof Button>) => {\n    const { toggleSidebar, state } = useSidebar()\n    return (\n        <Button\n            aria-label={props['aria-label'] || 'Toggle Sidebar'}\n            data-sidebar='trigger'\n            variant='ghost'\n            size='icon'\n            className={className}\n            onPress={(e) => {\n                onPress?.(e)\n                toggleSidebar()\n            }}\n            {...props}\n        >\n            {state === 'expanded' ? (\n                <IconPanelLeftClose className='md:inline hidden' />\n            ) : (\n                <IconPanelLeftOpen className='md:inline hidden' />\n            )}\n            {props.children ? (\n                <span className='md:hidden inline'>{props?.children as React.ReactNode}</span>\n            ) : (\n                <IconMenu className='md:hidden inline' />\n            )}\n            <span className='sr-only'>Toggle Sidebar</span>\n        </Button>\n    )\n}\n\nconst header = tv({\n    base: 'flex flex-col [&>section+section]:mt-2.5',\n    variants: {\n        collapsed: {\n            false: 'px-5 py-4',\n            true: 'px-5 py-4 md:p-0 md:size-9 mt-1 group-data-[variant=floating]:mt-2 md:rounded-lg md:hover:bg-muted md:mx-auto md:justify-center md:items-center'\n        }\n    }\n})\n\nconst Header = ({ className, ...props }: React.HtmlHTMLAttributes<HTMLDivElement>) => {\n    const { state } = React.useContext(SidebarContext)!\n    return (\n        <div\n            data-sidebar='header'\n            {...props}\n            className={header({ collapsed: state === 'collapsed', className })}\n            {...props}\n        />\n    )\n}\n\nconst footer = tv({\n    base: 'flex flex-col mt-auto [&>section+section]:mt-2.5',\n    variants: {\n        collapsed: {\n            false: [\n                'p-2 [&_[slot=menu-trigger]>[data-slot=avatar]]:-ml-1.5 [&_[slot=menu-trigger]]:w-full [&_[slot=menu-trigger]]:hover:bg-muted [&_[slot=menu-trigger]]:justify-start [&_[slot=menu-trigger]]:flex [&_[slot=menu-trigger]]:items-center'\n            ],\n            true: 'size-12 p-1 [&_[slot=menu-trigger]]:size-9 justify-center items-center'\n        }\n    }\n})\n\nconst Footer = ({ className, ...props }: React.HtmlHTMLAttributes<HTMLDivElement>) => {\n    const { state } = React.useContext(SidebarContext)!\n    return (\n        <div\n            {...props}\n            data-sidebar='footer'\n            className={footer({ collapsed: state === 'collapsed', className })}\n            {...props}\n        />\n    )\n}\n\ninterface CollapsibleProps extends DisclosureProps {\n    children: React.ReactNode\n    title?: string\n    collapsible?: boolean\n    defaultExpanded?: boolean\n}\n\nconst Section = ({\n    title,\n    className,\n    collapsible,\n    defaultExpanded,\n    ...props\n}: CollapsibleProps) => {\n    const isExpanded = title ? (collapsible ? (defaultExpanded ?? true) : true) : true\n\n    const { state } = React.useContext(SidebarContext)!\n    return (\n        <Disclosure className={cn('p-2', className)} defaultExpanded={isExpanded} {...props}>\n            {({ isExpanded }) => (\n                <>\n                    {typeof title === 'string' && (\n                        <span className='group-data-[collapsible=dock]:opacity-0 group-data-[collapsible=dock]:hidden'>\n                            {collapsible ? (\n                                <ButtonPrimitive\n                                    slot='trigger'\n                                    className='w-full focus:outline-none flex items-center justify-between text-sm text-muted-foreground px-3 py-2 has-[.indicator]:pr-2'\n                                >\n                                    {title}\n                                    <div\n                                        className={cn(\n                                            'relative flex items-center transition pr-0 justify-center size-3 indicator',\n                                            !isExpanded ? '-rotate-90' : 'rotate-0'\n                                        )}\n                                    >\n                                        <IconMinus className={cn('transition absolute size-3')} />\n                                        <IconMinus\n                                            className={cn(\n                                                'transition absolute size-3',\n                                                !isExpanded ? '-rotate-90' : 'rotate-0'\n                                            )}\n                                        />\n                                    </div>\n                                </ButtonPrimitive>\n                            ) : (\n                                <h4 className='text-sm text-muted-foreground px-3 py-2'>{title}</h4>\n                            )}\n                        </span>\n                    )}\n                    <DisclosurePanel>\n                        <div\n                            className={cn(\n                                'grid gap-y-0.5 group-data-[collapsible=dock]:place-content-center',\n                                state === 'collapsed'\n                                    ? 'group-data-[collapsible=dock]:place-content-center'\n                                    : 'grid-cols-[auto_1fr]'\n                            )}\n                        >\n                            {props.children}\n                        </div>\n                    </DisclosurePanel>\n                </>\n            )}\n        </Disclosure>\n    )\n}\n\nconst Rail = ({ className, ...props }: React.ComponentProps<'button'>) => {\n    const { toggleSidebar } = useSidebar()\n\n    return (\n        <button\n            data-sidebar='rail'\n            aria-label='Toggle Sidebar'\n            tabIndex={-1}\n            onClick={toggleSidebar}\n            title='Toggle Sidebar'\n            className={cn(\n                'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-primary/40 group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',\n                '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',\n                '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\n                'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-background',\n                '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\n                '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nSidebar.Provider = Provider\nSidebar.Inset = Inset\nSidebar.Header = Header\nSidebar.Content = Content\nSidebar.Footer = Footer\nSidebar.Item = Item\nSidebar.Section = Section\nSidebar.Rail = Rail\nSidebar.Trigger = Trigger\n\nexport { Sidebar, useSidebar }\n"
  },
  "utils": {
    "component": "@/components/ui/utils",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type ClassValue, clsx } from 'clsx'\nimport { useVisuallyHidden } from 'react-aria'\nimport { composeRenderProps } from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nconst cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs))\n\nfunction composeTailwindRenderProps<T>(\n    className: string | ((v: T) => string) | undefined,\n    tw: string | Array<string | undefined>\n): string | ((v: T) => string) {\n    return composeRenderProps(className, (className) => twMerge(tw, className))\n}\n\nconst focusRing = tv({\n    base: 'outline-none focus:outline-none forced-colors:outline-1 forced-colors:outline-[Highlight]',\n    variants: {\n        isFocused: { true: 'ring-4 ring-primary/20' },\n        isInvalid: { true: 'ring-4 ring-danger/20' }\n    }\n})\n\nconst focusStyles = tv({\n    extend: focusRing,\n    variants: {\n        isFocused: { true: 'border-primary/85' },\n        isInvalid: { true: 'border-danger' }\n    }\n})\n\nconst focusButtonStyles = tv({\n    base: 'outline outline-primary forced-colors:outline-[Highlight] outline-offset-2',\n    variants: {\n        isFocusVisible: {\n            false: 'outline-0',\n            true: 'outline-2'\n        }\n    }\n})\n\nconst useMediaQuery = (query: string) => {\n    const [value, setValue] = React.useState(false)\n\n    React.useEffect(() => {\n        const onChange = (event: MediaQueryListEvent) => {\n            setValue(event.matches)\n        }\n\n        const result = matchMedia(query)\n        result.addEventListener('change', onChange)\n        setValue(result.matches)\n\n        return () => result.removeEventListener('change', onChange)\n    }, [query])\n\n    return value\n}\n\nconst VisuallyHidden = ({ children }: { children: React.ReactNode }) => {\n    const { visuallyHiddenProps } = useVisuallyHidden()\n    return <span {...visuallyHiddenProps}>{children}</span>\n}\n\nexport {\n    cn,\n    composeRenderProps as cr,\n    composeTailwindRenderProps as ctr,\n    focusButtonStyles,\n    focusRing,\n    focusStyles,\n    useMediaQuery,\n    VisuallyHidden\n}\n"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCheck, IconChevronRight, IconCircleCheck } from 'hq-icons'\nimport {\n    Button,\n    Collection,\n    Header,\n    MenuItem,\n    Menu as MenuPrimitive,\n    MenuSection,\n    MenuTrigger as MenuTriggerPrimitive,\n    Separator,\n    SubmenuTrigger as SubmenuTriggerPrimitive,\n    type ButtonProps,\n    type MenuItemProps as MenuItemPrimitiveProps,\n    type MenuProps as MenuPrimitiveProps,\n    type MenuSectionProps,\n    type MenuTriggerProps as MenuTriggerPrimitiveProps,\n    type PopoverProps,\n    type SeparatorProps\n} from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { DropdownItemDetails, dropdownItemStyles, dropdownSectionStyles } from './dropdown'\nimport { Keyboard } from './keyboard'\nimport { Popover } from './popover'\nimport { cn, cr } from './utils'\n\ninterface MenuContextProps {\n    respectScreen: boolean\n}\n\nconst MenuContext = React.createContext<MenuContextProps>({ respectScreen: true })\n\ninterface MenuProps extends MenuTriggerPrimitiveProps {\n    respectScreen?: boolean\n}\n\nconst Menu = ({ respectScreen = true, ...props }: MenuProps) => {\n    return (\n        <MenuContext.Provider value={{ respectScreen }}>\n            <MenuTriggerPrimitive {...props}>{props.children}</MenuTriggerPrimitive>\n        </MenuContext.Provider>\n    )\n}\n\nconst SubMenu = ({ delay = 0, ...props }) => (\n    <SubmenuTriggerPrimitive {...props} delay={delay}>\n        {props.children}\n    </SubmenuTriggerPrimitive>\n)\n\nconst menuStyles = tv({\n    slots: {\n        menu: 'max-h-[calc(var(--visual-viewport-height)-10rem)] sm:max-h-[inherit] overflow-auto rounded-lg p-1 outline outline-0 [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]',\n        popover: 'z-50 min-w-40 p-0 outline-none shadow-sm',\n        trigger: [\n            'inline relative text-left focus:outline-none focus-visible:ring-1 focus-visible:ring-primary pressed:outline-none'\n        ]\n    }\n})\n\nconst { menu, popover, trigger } = menuStyles()\n\ninterface MenuTriggerProps extends ButtonProps {\n    className?: string\n}\n\nconst Trigger = ({ className, ...props }: MenuTriggerProps) => (\n    <Button className={trigger({ className })} {...props}>\n        {(values) => (\n            <>{typeof props.children === 'function' ? props.children(values) : props.children}</>\n        )}\n    </Button>\n)\n\ninterface MenuContentProps<T>\n    extends Omit<PopoverProps, 'children' | 'style'>,\n        MenuPrimitiveProps<T> {\n    className?: string\n    popoverClassName?: string\n    showArrow?: boolean\n    respectScreen?: boolean\n    portal?: Element\n}\n\nconst Content = <T extends object>({\n    className,\n    showArrow = false,\n    popoverClassName,\n    ...props\n}: MenuContentProps<T>) => {\n    const { respectScreen } = React.useContext(MenuContext)\n    return (\n        <Popover.Content\n            UNSTABLE_portalContainer={props.portal}\n            respectScreen={respectScreen}\n            showArrow={showArrow}\n            className={popover({\n                className: cn([\n                    showArrow && 'placement-left:mt-[-0.38rem] placement-right:mt-[-0.38rem]',\n                    popoverClassName\n                ])\n            })}\n            {...props}\n        >\n            <MenuPrimitive className={menu({ className })} {...props} />\n        </Popover.Content>\n    )\n}\n\ninterface MenuItemProps\n    extends Omit<MenuItemPrimitiveProps, 'isDanger'>,\n        VariantProps<typeof dropdownItemStyles> {\n    isDanger?: boolean\n}\n\nconst Item = ({ className, isDanger = false, children, ...props }: MenuItemProps) => {\n    const textValue = props.textValue || (typeof children === 'string' ? children : undefined)\n    return (\n        <MenuItem\n            className={cr(className, (className, renderProps) =>\n                dropdownItemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            textValue={textValue}\n            data-danger={isDanger ? 'true' : undefined}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof children === 'function' ? children(values) : children}\n                    {values.hasSubmenu && <IconChevronRight className='gpfw ml-auto size-3.5' />}\n                </>\n            )}\n        </MenuItem>\n    )\n}\n\nexport interface MenuHeaderProps extends React.ComponentProps<typeof Header> {\n    separator?: boolean\n}\n\nconst MenuHeader = ({ className, separator = false, ...props }: MenuHeaderProps) => (\n    <Header\n        className={cn(\n            'p-2 text-base font-semibold sm:text-sm',\n            separator && '-mx-1 border-b px-3 pb-2 mb-1',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst MenuSeparator = ({ className, ...props }: SeparatorProps) => (\n    <Separator className={cn('-mx-1 my-1 h-px bg-muted', className)} {...props} />\n)\n\nconst Checkbox = ({ className, children, ...props }: MenuItemProps) => (\n    <Item className={cn('relative pr-8', className)} {...props}>\n        {(values) => (\n            <>\n                {typeof children === 'function' ? children(values) : children}\n                {values.isSelected && (\n                    <span className='absolute right-2 flex size-4 shrink-0 items-center animate-in justify-center'>\n                        <IconCheck />\n                    </span>\n                )}\n            </>\n        )}\n    </Item>\n)\n\nconst Radio = ({ className, children, ...props }: MenuItemProps) => (\n    <Item className={cn('relative', className)} {...props}>\n        {(values) => (\n            <>\n                {typeof children === 'function' ? children(values) : children}\n\n                {values.isSelected && (\n                    <span\n                        data-slot='menu-radio'\n                        className='absolute right-3 flex items-center animate-in justify-center'\n                    >\n                        <IconCircleCheck />\n                    </span>\n                )}\n            </>\n        )}\n    </Item>\n)\n\nconst { section, header } = dropdownSectionStyles()\n\ninterface SectionProps<T> extends MenuSectionProps<T> {\n    title?: string\n}\n\nconst Section = <T extends object>({ className, ...props }: SectionProps<T>) => {\n    return (\n        <MenuSection className={section({ className })} {...props}>\n            {'title' in props && <Header className={header()}>{props.title}</Header>}\n            <Collection items={props.items}>{props.children}</Collection>\n        </MenuSection>\n    )\n}\n\nMenu.Primitive = MenuPrimitive\nMenu.Content = Content\nMenu.Header = MenuHeader\nMenu.Item = Item\nMenu.Content = Content\nMenu.Keyboard = Keyboard\nMenu.Checkbox = Checkbox\nMenu.Radio = Radio\nMenu.Section = Section\nMenu.Separator = MenuSeparator\nMenu.Trigger = Trigger\nMenu.ItemDetails = DropdownItemDetails\nMenu.Submenu = SubMenu\n\nexport { Menu, type MenuContentProps }\n"
  },
  "grid": {
    "component": "@/components/ui/grid",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Collection } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { CollectionProps } from '@react-aria/collections'\n\nimport { cn } from './utils'\n\nconst gridStyles = tv(\n    {\n        base: 'grid',\n        variants: {\n            // Columns\n            columns: {\n                1: 'grid-cols-1',\n                2: 'grid-cols-2',\n                3: 'grid-cols-3',\n                4: 'grid-cols-4',\n                5: 'grid-cols-5',\n                6: 'grid-cols-6',\n                7: 'grid-cols-7',\n                8: 'grid-cols-8',\n                9: 'grid-cols-9',\n                10: 'grid-cols-10',\n                11: 'grid-cols-11',\n                12: 'grid-cols-12'\n            },\n\n            // Rows\n            rows: {\n                1: 'grid-rows-1',\n                2: 'grid-rows-2',\n                3: 'grid-rows-3',\n                4: 'grid-rows-4',\n                5: 'grid-rows-5',\n                6: 'grid-rows-6',\n                7: 'grid-rows-7',\n                8: 'grid-rows-8',\n                9: 'grid-rows-9',\n                10: 'grid-rows-10',\n                11: 'grid-rows-11',\n                12: 'grid-rows-12'\n            },\n\n            // Flow\n            flow: {\n                row: 'grid-flow-row',\n                col: 'grid-flow-col',\n                rowDense: 'grid-flow-row-dense',\n                colDense: 'grid-flow-col-dense',\n                dense: 'grid-flow-dense'\n            },\n\n            // Gap\n            gap: {\n                0: 'gap-0',\n                0.5: 'gap-0.5',\n                1: 'gap-1',\n                1.5: 'gap-1.5',\n                2: 'gap-2',\n                2.5: 'gap-2.5',\n                3: 'gap-3',\n                3.5: 'gap-3.5',\n                4: 'gap-4',\n                5: 'gap-5',\n                6: 'gap-6',\n                7: 'gap-7',\n                8: 'gap-8',\n                9: 'gap-9',\n                10: 'gap-10',\n                11: 'gap-11',\n                12: 'gap-12',\n                14: 'gap-14',\n                16: 'gap-16',\n                20: 'gap-20',\n                24: 'gap-24'\n            },\n            gapX: {\n                0: 'gap-x-0',\n                0.5: 'gap-x-0.5',\n                1: 'gap-x-1',\n                1.5: 'gap-x-1.5',\n                2: 'gap-x-2',\n                2.5: 'gap-x-2.5',\n                3: 'gap-x-3',\n                3.5: 'gap-x-3.5',\n                4: 'gap-x-4',\n                5: 'gap-x-5',\n                6: 'gap-x-6',\n                7: 'gap-x-7',\n                8: 'gap-x-8',\n                9: 'gap-x-9',\n                10: 'gap-x-10',\n                11: 'gap-x-11',\n                12: 'gap-x-12',\n                14: 'gap-x-14',\n                16: 'gap-x-16',\n                20: 'gap-x-20',\n                24: 'gap-x-24'\n            },\n            gapY: {\n                0: 'gap-y-0',\n                0.5: 'gap-y-0.5',\n                1: 'gap-y-1',\n                1.5: 'gap-y-1.5',\n                2: 'gap-y-2',\n                2.5: 'gap-y-2.5',\n                3: 'gap-y-3',\n                3.5: 'gap-y-3.5',\n                4: 'gap-y-4',\n                5: 'gap-y-5',\n                6: 'gap-y-6',\n                7: 'gap-y-7',\n                8: 'gap-y-8',\n                9: 'gap-y-9',\n                10: 'gap-y-10',\n                11: 'gap-y-11',\n                12: 'gap-y-12',\n                14: 'gap-y-14',\n                16: 'gap-y-16',\n                20: 'gap-y-20',\n                24: 'gap-y-24'\n            }\n        },\n        defaultVariants: {\n            columns: 1\n        }\n    },\n    {\n        responsiveVariants: true\n    }\n)\n\ninterface GridProps<T extends object> extends CollectionProps<T>, VariantProps<typeof gridStyles> {\n    className?: string\n    debug?: boolean\n}\n\nconst Grid = <T extends object>({\n    className,\n    gap,\n    gapX,\n    gapY,\n    flow,\n    columns,\n    rows,\n    ...props\n}: GridProps<T>) => {\n    return (\n        <div\n            className={gridStyles({\n                gap: gap ?? gapX ?? gapY,\n                gapX: gapX ?? gap,\n                gapY: gapY ?? gap,\n                flow: flow ?? 'row',\n                columns: columns ?? 1,\n                rows: rows ?? 1,\n                className:\n                    'debug' in props\n                        ? cn('[&>.grid-cell]:border [&>.grid-cell]:border-warning', className)\n                        : className\n            })}\n        >\n            <Collection {...props} />\n        </div>\n    )\n}\n\nconst gridItemStyles = tv(\n    {\n        base: 'grid-cell focus:outline-none',\n        variants: {\n            colSpan: {\n                auto: 'col-auto',\n                1: 'col-span-1',\n                2: 'col-span-2',\n                3: 'col-span-3',\n                4: 'col-span-4',\n                5: 'col-span-5',\n                6: 'col-span-6',\n                7: 'col-span-7',\n                8: 'col-span-8',\n                9: 'col-span-9',\n                10: 'col-span-10',\n                11: 'col-span-11',\n                12: 'col-span-12',\n                full: 'col-span-full'\n            },\n            colStart: {\n                1: 'col-start-1',\n                2: 'col-start-2',\n                3: 'col-start-3',\n                4: 'col-start-4',\n                5: 'col-start-5',\n                6: 'col-start-6',\n                7: 'col-start-7',\n                8: 'col-start-8',\n                9: 'col-start-9',\n                10: 'col-start-10',\n                11: 'col-start-11',\n                12: 'col-start-12',\n                13: 'col-start-13',\n                auto: 'col-start-auto'\n            },\n            colEnd: {\n                1: 'col-end-1',\n                2: 'col-end-2',\n                3: 'col-end-3',\n                4: 'col-end-4',\n                5: 'col-end-5',\n                6: 'col-end-6',\n                7: 'col-end-7',\n                8: 'col-end-8',\n                9: 'col-end-9',\n                10: 'col-end-10',\n                11: 'col-end-11',\n                12: 'col-end-12',\n                13: 'col-end-13',\n                auto: 'col-end-auto'\n            },\n            rowSpan: {\n                auto: 'row-auto',\n                1: 'row-span-1',\n                2: 'row-span-2',\n                3: 'row-span-3',\n                4: 'row-span-4',\n                5: 'row-span-5',\n                6: 'row-span-6',\n                7: 'row-span-7',\n                8: 'row-span-8',\n                9: 'row-span-9',\n                10: 'row-span-10',\n                11: 'row-span-11',\n                12: 'row-span-12',\n                full: 'row-span-full'\n            },\n            rowStart: {\n                1: 'row-start-1',\n                2: 'row-start-2',\n                3: 'row-start-3',\n                4: 'row-start-4',\n                5: 'row-start-5',\n                6: 'row-start-6',\n                7: 'row-start-7',\n                8: 'row-start-8',\n                9: 'row-start-9',\n                10: 'row-start-10',\n                11: 'row-start-11',\n                12: 'row-start-12',\n                13: 'row-start-13',\n                auto: 'row-start-auto'\n            },\n            rowEnd: {\n                1: 'row-end-1',\n                2: 'row-end-2',\n                3: 'row-end-3',\n                4: 'row-end-4',\n                5: 'row-end-5',\n                6: 'row-end-6',\n                7: 'row-end-7',\n                8: 'row-end-8',\n                9: 'row-end-9',\n                10: 'row-end-10',\n                11: 'row-end-11',\n                12: 'row-end-12',\n                13: 'row-end-13',\n                auto: 'row-end-auto'\n            }\n        }\n    },\n    {\n        responsiveVariants: ['sm', 'md', 'lg', 'xl', '2xl']\n    }\n)\n\ninterface GridItemProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof gridItemStyles> {\n    className?: string\n}\n\nconst GridItem = ({\n    children,\n    className,\n    colSpan,\n    rowSpan,\n    colStart,\n    colEnd,\n    rowStart,\n    rowEnd,\n    ...props\n}: GridItemProps) => {\n    return (\n        <div\n            className={gridItemStyles({\n                colSpan,\n                rowSpan,\n                colStart,\n                colEnd,\n                rowStart,\n                rowEnd,\n                className\n            })}\n            {...props}\n        >\n            {children}\n        </div>\n    )\n}\n\nGrid.Item = GridItem\n\nexport { Grid, gridStyles, gridItemStyles }\n"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\n\nimport { IconCheck, IconMinus } from 'hq-icons'\nimport {\n    Checkbox as CheckboxPrimitive,\n    CheckboxGroup as CheckboxGroupPrimitive,\n    type CheckboxGroupProps as CheckboxGroupPrimitiveProps,\n    type CheckboxProps as CheckboxPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { cn, cr } from './utils'\n\ninterface CheckboxGroupProps extends Omit<CheckboxGroupPrimitiveProps, 'children'> {\n    label?: string\n    children?: React.ReactNode\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst CheckboxGroup = (props: CheckboxGroupProps) => {\n    return (\n        <CheckboxGroupPrimitive\n            {...props}\n            className={cn('group flex flex-col gap-y-2', props.className)}\n        >\n            <Label>{props.label}</Label>\n            <>{props.children}</>\n            {props.description && <Description className='block'>{props.description}</Description>}\n            <FieldError>{props.errorMessage}</FieldError>\n        </CheckboxGroupPrimitive>\n    )\n}\n\nconst checkboxStyles = tv({\n    base: 'racc group flex items-center gap-2 text-sm transition',\n    variants: {\n        isDisabled: {\n            false: 'opacity-100',\n            true: 'opacity-50'\n        }\n    }\n})\n\nconst boxStyles = tv({\n    base: 'flex size-4 [&>svg]:size-3 flex-shrink-0 items-center justify-center rounded-[calc(var(--radius)*0.5)] border text-background transition',\n    variants: {\n        isSelected: {\n            false: 'border-muted',\n            true: [\n                'border-primary/70 bg-primary text-primary-foreground',\n                'group-invalid:border-danger/70 group-invalid:bg-danger group-invalid:text-danger-foreground'\n            ]\n        },\n        isFocused: {\n            true: [\n                'border-primary/70 ring-4 ring-primary/20',\n                'group-invalid:border-danger/70 group-invalid:text-danger-foreground group-invalid:ring-danger/20'\n            ]\n        },\n        isInvalid: {\n            true: 'border-danger/70 bg-danger/20 text-danger-foreground ring-danger/20'\n        }\n    }\n})\n\ninterface CheckboxProps extends CheckboxPrimitiveProps {\n    description?: string\n    label?: string\n    children?: React.ReactNode\n}\n\nconst Checkbox = ({ className, description, label, children, ...props }: CheckboxProps) => {\n    return (\n        <CheckboxPrimitive\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                checkboxStyles({ ...renderProps, className })\n            )}\n        >\n            {({ isSelected, isIndeterminate, ...renderProps }) => (\n                <div className={cn('flex gap-x-2', description ? 'items-start' : 'items-center')}>\n                    <div\n                        className={boxStyles({\n                            ...renderProps,\n                            isSelected: isSelected || isIndeterminate,\n                            className: description ? 'mt-1' : 'mt-px'\n                        })}\n                    >\n                        {isIndeterminate ? <IconMinus /> : isSelected ? <IconCheck /> : null}\n                    </div>\n\n                    <div className='flex flex-col gap-1'>\n                        {label ? <Label>{label}</Label> : children}\n                        {description && <Description>{description}</Description>}\n                    </div>\n                </div>\n            )}\n        </CheckboxPrimitive>\n    )\n}\n\nexport { Checkbox, CheckboxGroup }\n"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type {\n    RadioGroupProps as RadioGroupPrimitiveProps,\n    RadioProps as RadioPrimitiveProps,\n    ValidationResult\n} from 'react-aria-components'\nimport { RadioGroup as RadioGroupPrimitive, Radio as RadioPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { ctr } from './utils'\n\ninterface RadioGroupProps extends Omit<RadioGroupPrimitiveProps, 'children'> {\n    label?: string\n    children?: React.ReactNode\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst RadioGroup = ({ label, description, errorMessage, children, ...props }: RadioGroupProps) => {\n    return (\n        <RadioGroupPrimitive\n            {...props}\n            className={ctr(props.className, 'group flex flex-col gap-2')}\n        >\n            {label && <Label>{label}</Label>}\n            <div className='flex select-none gap-2 group-orientation-horizontal:flex-wrap group-orientation-horizontal:gap-2 sm:group-orientation-horizontal:gap-4 group-orientation-vertical:flex-col'>\n                {children}\n            </div>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </RadioGroupPrimitive>\n    )\n}\n\nconst radioStyles = tv({\n    base: 'size-4 shrink-0 rounded-full border transition',\n    variants: {\n        isSelected: {\n            false: 'border-muted',\n            true: 'border-[4.5px] border-primary'\n        },\n        isFocused: {\n            true: [\n                'border-primary bg-primary/20 ring-4 ring-primary/20',\n                'group-invalid:border-danger/70 group-invalid:bg-danger/20 group-invalid:ring-danger/20'\n            ]\n        },\n        isInvalid: {\n            true: 'border-danger/70 bg-danger/20'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\ninterface RadioProps extends RadioPrimitiveProps {\n    description?: string\n}\n\nconst Radio = ({ description, ...props }: RadioProps) => {\n    return (\n        <>\n            <RadioPrimitive\n                {...props}\n                className={ctr(\n                    props.className,\n                    'group flex items-center gap-2 text-sm text-foreground transition disabled:text-foreground/50 forced-colors:disabled:text-[GrayText]'\n                )}\n            >\n                {(renderProps) => (\n                    <div className='flex gap-2'>\n                        <div\n                            className={radioStyles({\n                                ...renderProps,\n                                className: 'description' in props ? 'mt-1' : 'mt-0.5'\n                            })}\n                        />\n                        <div className='flex flex-col gap-1'>\n                            {props.children as React.ReactNode}\n                            {description && (\n                                <Description className='block'>{description}</Description>\n                            )}\n                        </div>\n                    </div>\n                )}\n            </RadioPrimitive>\n        </>\n    )\n}\n\nexport { Radio, RadioGroup, radioStyles }\n"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconX } from 'hq-icons'\nimport {\n    Button as ButtonPrimitive,\n    Dialog as DialogPrimitive,\n    Heading,\n    OverlayTriggerStateContext,\n    type ButtonProps as ButtonPrimitiveProps,\n    type DialogProps,\n    type HeadingProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button, type ButtonProps } from './button'\nimport { useMediaQuery } from './utils'\n\nconst dialogStyles = tv({\n    slots: {\n        root: [\n            'dialog relative flex max-h-[inherit] [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] flex-col overflow-hidden outline-none',\n            'sm:[&:not(:has([data-slot=dialog-body]))]:px-6 sm:[&:has([data-slot=dialog-body])_[data-slot=dialog-header]]:px-6 sm:[&:has([data-slot=dialog-body])_[data-slot=dialog-footer]]:px-6',\n            '[&:not(:has([data-slot=dialog-body]))]:px-4 [&:has([data-slot=dialog-body])_[data-slot=dialog-header]]:px-4 [&:has([data-slot=dialog-body])_[data-slot=dialog-footer]]:px-4'\n        ],\n        header: 'relative flex flex-col pb-3 pt-4 sm:pt-6',\n        description: 'text-sm block text-muted-foreground mt-0.5 sm:mt-1',\n        body: [\n            'flex flex-1 flex-col gap-2 overflow-auto px-4 sm:px-6 py-1',\n            'max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding)-var(--dialog-header-height,0px)-var(--dialog-footer-height,0px))]'\n        ],\n        footer: 'mt-auto flex flex-col-reverse justify-between gap-3 pb-4 sm:pb-6 pt-4 sm:flex-row',\n        closeIndicator:\n            'close absolute right-1 top-1 sm:right-2 sm:top-2 focus:outline-none focus:bg-muted hover:bg-muted grid place-content-center rounded-lg focus-visible:ring-1 focus-visible:ring-primary size-8 sm:size-7 z-50'\n    }\n})\n\nconst { root, header, description, body, footer, closeIndicator } = dialogStyles()\n\nconst Dialog = ({ role, className, ...props }: DialogProps) => {\n    return <DialogPrimitive role={role ?? 'dialog'} className={root({ className })} {...props} />\n}\n\nconst Trigger = (props: ButtonPrimitiveProps) => (\n    <ButtonPrimitive {...props}>\n        {(values) => (\n            <>{typeof props.children === 'function' ? props.children(values) : props.children}</>\n        )}\n    </ButtonPrimitive>\n)\n\ntype DialogHeaderProps = React.HTMLAttributes<HTMLDivElement> & {\n    title?: string\n    description?: string\n}\n\nconst Header = ({ className, ...props }: DialogHeaderProps) => {\n    const headerRef = React.useRef<HTMLHeadingElement>(null)\n\n    React.useEffect(() => {\n        const header = headerRef.current\n        if (!header) {\n            return\n        }\n\n        const observer = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                header.parentElement?.style.setProperty(\n                    '--dialog-header-height',\n                    `${entry.target.clientHeight}px`\n                )\n            }\n        })\n\n        observer.observe(header)\n        return () => observer.unobserve(header)\n    }, [])\n\n    return (\n        <div data-slot='dialog-header' ref={headerRef} className={header({ className })}>\n            {props.title && <Title>{props.title}</Title>}\n            {props.description && <Description>{props.description}</Description>}\n            {!props.title && typeof props.children === 'string' ? (\n                <Title {...props} />\n            ) : (\n                props.children\n            )}\n        </div>\n    )\n}\n\nconst titleStyles = tv({\n    base: 'flex flex-1 items-center text-foreground',\n    variants: {\n        level: {\n            1: 'font-semibold text-lg sm:text-xl',\n            2: 'font-semibold text-lg sm:text-xl',\n            3: 'font-semibold text-base sm:text-lg',\n            4: 'font-semibold text-base'\n        }\n    }\n})\n\ninterface TitleProps extends Omit<HeadingProps, 'level'> {\n    level?: 1 | 2 | 3 | 4\n}\n\nconst Title = ({ level = 2, className, ...props }: TitleProps) => (\n    <Heading slot='title' level={level} className={titleStyles({ level, className })} {...props} />\n)\n\nconst Description = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div className={description({ className })} {...props} />\n)\n\nconst Body = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div data-slot='dialog-body' className={body({ className })} {...props} />\n)\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    const footerRef = React.useRef<HTMLDivElement>(null)\n\n    React.useEffect(() => {\n        const footer = footerRef.current\n\n        if (!footer) {\n            return\n        }\n\n        const observer = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                footer.parentElement?.style.setProperty(\n                    '--dialog-footer-height',\n                    `${entry.target.clientHeight}px`\n                )\n            }\n        })\n\n        observer.observe(footer)\n        return () => {\n            observer.unobserve(footer)\n        }\n    }, [])\n    return (\n        <div\n            ref={footerRef}\n            data-slot='dialog-footer'\n            className={footer({ className })}\n            {...props}\n        />\n    )\n}\n\nconst Close = ({ className, variant = 'outline', ...props }: ButtonProps) => {\n    const state = React.useContext(OverlayTriggerStateContext)!\n    return (\n        <Button className={className} variant={variant} onPress={() => state.close()} {...props} />\n    )\n}\n\ninterface CloseButtonIndicatorProps {\n    className?: string\n    close: () => void\n    isDismissable?: boolean | undefined\n}\n\nconst CloseIndicator = ({ className, ...props }: CloseButtonIndicatorProps) => {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    React.useEffect(() => {\n        if (isMobile && buttonRef.current) {\n            buttonRef.current.focus()\n        }\n    }, [isMobile])\n    return props.isDismissable ? (\n        <ButtonPrimitive\n            ref={buttonRef}\n            {...(isMobile ? { autoFocus: true } : {})}\n            aria-label='Close'\n            onPress={props.close}\n            className={closeIndicator({ className })}\n        >\n            <IconX className='size-4' />\n        </ButtonPrimitive>\n    ) : null\n}\n\nDialog.Trigger = Trigger\nDialog.Header = Header\nDialog.Title = Title\nDialog.Description = Description\nDialog.Body = Body\nDialog.Footer = Footer\nDialog.Close = Close\nDialog.CloseIndicator = CloseIndicator\n\nexport { Dialog }\n"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    SliderOutput,\n    Slider as SliderPrimitive,\n    SliderStateContext,\n    SliderThumb,\n    SliderTrack,\n    TextContext,\n    type LabelProps,\n    type SliderOutputProps,\n    type SliderProps as SliderPrimitiveProps,\n    type SliderThumbProps,\n    type SliderTrackProps,\n    type TextProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { useSlotId } from '@react-aria/utils'\n\nimport { Description, Label } from './field'\nimport { cr } from './utils'\n\nconst sliderStyles = tv({\n    slots: {\n        root: 'flex disabled:opacity-50 flex-col gap-2 orientation-horizontal:w-full orientation-vertical:h-56 orientation-vertical:items-center',\n        track: [\n            'relative group/track rounded-lg bg-zinc-200 dark:bg-zinc-800 cursor-pointer disabled:cursor-default disabled:bg-background-disabled',\n            'grow orientation-vertical:flex-1 orientation-vertical:w-1.5 orientation-horizontal:w-full orientation-horizontal:h-1.5'\n        ],\n        filler: [\n            'rounded-lg bg-primary group-disabled/track:bg-background-disabled',\n            'pointer-events-none absolute group-orientation-horizontal/top-0 group-orientation-vertical/track:w-full group-orientation-vertical/track:bottom-0 group-orientation-horizontal/track:h-full'\n        ],\n        thumb: [\n            'outline-none dragging:cursor-grabbing focus:ring-4 border border-zinc-200 focus:ring-primary/20 focus:border-primary focus:outline-none forced-colors:outline-[Highlight]',\n            'rounded-full bg-white transition-[width,height]',\n            'absolute left-[50%] top-[50%] block !-translate-x-1/2 !-translate-y-1/2',\n            'disabled:bg-background-disabled disabled:border disabled:border-background',\n            'orientation-vertical:w-2 orientation-horizontal:h-2',\n            'size-[1.15rem] dragging:size-[1.30rem] dragging:border-primary'\n        ],\n        valueLabel: 'text-muted-foreground tabular-nums text-sm'\n    }\n})\n\nconst { track, filler, thumb, root, valueLabel } = sliderStyles()\n\ntype SliderRootProps = SliderPrimitiveProps\n\nconst Root = (props: SliderPrimitiveProps) => {\n    const descriptionId = useSlotId()\n    return (\n        <TextContext.Provider value={{ slots: { description: { id: descriptionId } } }}>\n            <SliderPrimitive\n                data-slot='root'\n                aria-describedby={descriptionId}\n                {...props}\n                className={cr(props.className, (className) => root({ className }))}\n            />\n        </TextContext.Provider>\n    )\n}\n\ninterface SliderProps extends SliderRootProps, VariantProps<typeof sliderStyles> {\n    label?: LabelProps['children']\n    description?: TextProps['children']\n    showValue?: boolean | ((value: number[]) => string)\n}\n\nconst Slider = ({ label, description, showValue = true, ...props }: SliderProps) => (\n    <Root {...props}>\n        <div className='flex items-center justify-between gap-2'>\n            {label && <Label>{label}</Label>}\n            {(showValue || typeof showValue === 'function') && (\n                <Output>\n                    {({ state }) =>\n                        typeof showValue === 'function' ? showValue(state.values) : undefined\n                    }\n                </Output>\n            )}\n        </div>\n        <Controls />\n        {description && <Description>{description}</Description>}\n    </Root>\n)\n\nconst Controls = (props: SliderTrackProps) => {\n    const state = React.useContext(SliderStateContext)\n    return (\n        <Track {...props}>\n            <Filler />\n            {state?.values.map((_, i) => <Thumb key={i} index={i} />)}\n        </Track>\n    )\n}\n\nconst Track = (props: SliderTrackProps) => {\n    return (\n        <SliderTrack\n            {...props}\n            className={cr(props.className, (className) => track({ className }))}\n        />\n    )\n}\n\nconst Filler = (props: React.HTMLAttributes<HTMLDivElement>) => {\n    const state = React.useContext(SliderStateContext)\n    const { orientation, getThumbPercent, values } = state || {}\n\n    const getStyle = () => {\n        const percent0 = getThumbPercent ? getThumbPercent(0) * 100 : 0\n        const percent1 = getThumbPercent ? getThumbPercent(1) * 100 : 0\n\n        if (values?.length === 1) {\n            return orientation === 'horizontal'\n                ? { width: `${percent0}%` }\n                : { height: `${percent0}%` }\n        }\n\n        return orientation === 'horizontal'\n            ? { left: `${percent0}%`, width: `${Math.abs(percent0 - percent1)}%` }\n            : { bottom: `${percent0}%`, height: `${Math.abs(percent0 - percent1)}%` }\n    }\n\n    return <div {...props} style={getStyle()} className={filler({ className: props.className })} />\n}\n\nconst Thumb = ({ className, ...props }: SliderThumbProps) => {\n    return <SliderThumb {...props} className={cr(className, (className) => thumb({ className }))} />\n}\n\nconst Output = ({ className, ...props }: SliderOutputProps) => {\n    return (\n        <SliderOutput\n            {...props}\n            className={cr(className, (className) => valueLabel({ className }))}\n        >\n            {cr(\n                props.children,\n                (children, { state }) =>\n                    children ?? state.values.map((_, i) => state.getThumbValueLabel(i)).join(' - ')\n            )}\n        </SliderOutput>\n    )\n}\n\nSlider.Controls = Controls\nSlider.Filler = Filler\nSlider.Root = Root\nSlider.Thumb = Thumb\nSlider.Track = Track\nSlider.Output = Output\nexport { Slider }\n"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst badgeVariants = tv({\n    base: 'inline-flex items-center outline-none transition-colors gap-x-1.5 py-0.5 text-xs/5 font-medium [&_svg]:size-3',\n    variants: {\n        variant: {\n            primary:\n                'ring-primary/30 bg-primary/10 dark:bg-primary/15 text-primary hover:bg-primary/15 dark:hover:bg-primary/10',\n            secondary: 'bg-secondary/50 ring-secondary-foreground/20 text-secondary-foreground',\n            success:\n                'dark:ring-success/30 ring-success/40 bg-success/10 dark:bg-success/15 text-success hover:bg-success/15 dark:hover:bg-success/10',\n            info: 'dark:ring-info/30 ring-info/80 bg-info/20 dark:bg-info/15 text-info hover:bg-info/15 dark:hover:bg-info/10',\n            warning:\n                'dark:ring-warning/40 ring-warning/50 bg-warning/10 dark:bg-warning/15 text-warning hover:bg-warning/15 dark:hover:bg-warning/10',\n            danger: 'dark:ring-danger/30 ring-danger/40 bg-danger/10 dark:bg-danger/15 text-danger hover:bg-danger/15 dark:hover:bg-danger/10',\n            dark: 'bg-dark hover:bg-dark/90 ring-inset ring-dark/50 text-dark-foreground',\n            outline: 'bg-transparent ring-inset ring-foreground/50 text-foreground'\n        },\n        shape: {\n            square: 'rounded-lg px-1.5',\n            circle: 'px-2 rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        shape: 'square'\n    }\n})\n\ninterface BadgeProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof badgeVariants> {\n    className?: string\n    children: React.ReactNode\n}\n\nconst Badge = ({ children, variant, shape, className, ...props }: BadgeProps) => {\n    return (\n        <span {...props} className={badgeVariants({ variant, shape, className })}>\n            {children}\n        </span>\n    )\n}\n\nexport { Badge, badgeVariants }\n"
  },
  "multi-select": {
    "component": "@/components/ui/multi-select",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown } from 'hq-icons'\nimport { useFilter } from 'react-aria'\nimport {\n    ComboBox,\n    Group,\n    type ComboBoxProps,\n    type Key,\n    type ValidationResult\n} from 'react-aria-components'\nimport { useListData, type ListData } from 'react-stately'\n\nimport { Button } from './button'\nimport { Description, FieldError, Input, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport { Tag, type RestrictedVariant } from './tag-group'\nimport { VisuallyHidden, cn } from './utils'\n\ninterface FieldState {\n    selectedKey: Key | null\n    inputValue: string\n}\n\ninterface SelectedKey {\n    id: Key\n    textValue: string\n}\n\ninterface MultipleSelectProps<T extends object>\n    extends Omit<\n        ComboBoxProps<T>,\n        | 'children'\n        | 'validate'\n        | 'allowsEmptyCollection'\n        | 'selectedKey'\n        | 'inputValue'\n        | 'className'\n        | 'value'\n        | 'onSelectionChange'\n        | 'onInputChange'\n    > {\n    label?: string\n    description?: string\n    variant?: RestrictedVariant\n    items: Array<T>\n    selectedList: ListData<T>\n    className?: string\n    onItemAdd?: (key: Key) => void\n    onItemRemove?: (key: Key) => void\n    renderEmptyState?: (inputValue: string) => React.ReactNode\n    tag: (item: T) => React.ReactNode\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    max?: number\n    min?: number\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    portal?: Element\n}\n\nconst MultiSelect = <T extends SelectedKey>({\n    children,\n    variant = 'primary',\n    items,\n    selectedList,\n    onItemRemove,\n    onItemAdd,\n    className,\n    name,\n    renderEmptyState,\n    max,\n    min,\n    errorMessage,\n    ...props\n}: MultipleSelectProps<T>) => {\n    const tagGroupId = React.useId()\n    const triggerRef = React.useRef<HTMLDivElement | null>(null)\n    const [width, setWidth] = React.useState(0)\n\n    const { contains } = useFilter({ sensitivity: 'base' })\n    const selectedKeys = selectedList.items.map((i) => i.id)\n\n    const filter = React.useCallback(\n        (item: T, filterText: string) =>\n            !selectedKeys.includes(item.id) && contains(item.textValue, filterText),\n        [contains, selectedKeys]\n    )\n\n    const accessibleList = useListData({\n        initialItems: items,\n        filter\n    })\n\n    const [fieldState, setFieldState] = React.useState<FieldState>({\n        selectedKey: null,\n        inputValue: ''\n    })\n\n    const onRemove = React.useCallback(\n        (keys: Set<Key>) => {\n            if (min !== undefined && selectedList.items.length <= min) return\n\n            const key = keys.values().next().value\n            selectedList.remove(key as Key)\n            setFieldState({\n                inputValue: '',\n                selectedKey: null\n            })\n            onItemRemove?.(key as Key)\n        },\n        [selectedList, onItemRemove, min]\n    )\n\n    const onSelectionChange = (id: Key | null) => {\n        if (!id) return\n\n        const item = accessibleList.getItem(id)\n\n        if (!item) return\n\n        if (!selectedKeys.includes(id) && (max === undefined || selectedList.items.length < max)) {\n            selectedList.append(item)\n            setFieldState({\n                inputValue: '',\n                selectedKey: id\n            })\n            onItemAdd?.(id)\n        }\n\n        accessibleList.setFilterText('')\n    }\n\n    const onInputChange = (v: string) => {\n        setFieldState((prevState) => ({\n            inputValue: v,\n            selectedKey: v === '' ? null : prevState.selectedKey\n        }))\n\n        accessibleList.setFilterText(v)\n    }\n\n    const deleteLast = React.useCallback(() => {\n        if (\n            selectedList.items.length == 0 ||\n            (min !== undefined && selectedList.items.length <= min)\n        ) {\n            return\n        }\n\n        const lastKey = selectedList.items[selectedList.items.length - 1]\n\n        if (lastKey !== null) {\n            selectedList.remove(lastKey.id)\n            onItemRemove?.(lastKey.id)\n        }\n\n        setFieldState({\n            inputValue: '',\n            selectedKey: null\n        })\n    }, [selectedList, onItemRemove, min])\n\n    const onKeyDownCapture = React.useCallback(\n        (e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (e.key === 'Backspace' && fieldState.inputValue === '') {\n                deleteLast()\n            }\n        },\n        [deleteLast, fieldState.inputValue]\n    )\n\n    React.useEffect(() => {\n        const trigger = triggerRef.current\n        if (!trigger) return\n\n        const observer = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                setWidth(entry.target.clientWidth)\n            }\n        })\n\n        observer.observe(trigger)\n        return () => {\n            observer.unobserve(trigger)\n        }\n    }, [triggerRef])\n\n    const triggerButtonRef = React.useRef<HTMLButtonElement | null>(null)\n\n    return (\n        <Group className={cn('group flex w-full min-w-fit flex-col gap-1', className)}>\n            {props.label && <Label>{props.label}</Label>}\n            <div\n                ref={triggerRef}\n                className={cn(\n                    'relative px-1 flex min-h-10 flex-row flex-wrap items-center rounded-lg shadow-sm border transition',\n                    'has-[input[data-focused=true]]:border-primary',\n                    'has-[input[data-invalid=true][data-focused=true]]:border-danger has-[input[data-invalid=true]]:border-danger',\n                    'has-[input[data-focused=true]]:ring-4 has-[input[data-focused=true]]:ring-primary/20',\n                    className\n                )}\n            >\n                <Tag.Group\n                    aria-label='Selected items'\n                    variant={variant}\n                    id={tagGroupId}\n                    onRemove={onRemove}\n                >\n                    <Tag.List\n                        items={selectedList.items}\n                        className={cn(\n                            selectedList.items.length !== 0 && 'px-1 py-1.5',\n                            '[&_.tag]:rounded-[calc(var(--radius)-2.5px)] last:[&_.tag]:-mr-1 outline-none gap-1.5'\n                        )}\n                    >\n                        {props.tag}\n                    </Tag.List>\n                </Tag.Group>\n                <ComboBox\n                    {...props}\n                    aria-label='Available items'\n                    allowsEmptyCollection\n                    className={cn('group peer flex flex-1', className)}\n                    items={accessibleList.items}\n                    selectedKey={fieldState.selectedKey}\n                    inputValue={fieldState.inputValue}\n                    onSelectionChange={onSelectionChange}\n                    onInputChange={onInputChange}\n                >\n                    <div\n                        className={cn('inline-flex flex-1 flex-wrap items-center px-0', className)}\n                    >\n                        <FieldError>{errorMessage}</FieldError>\n                        <Input\n                            className='flex-1 py-1 px-0.5 ml-1 shadow-none ring-0'\n                            onBlur={() => {\n                                setFieldState({\n                                    inputValue: '',\n                                    selectedKey: null\n                                })\n                                accessibleList.setFilterText('')\n                            }}\n                            onKeyDownCapture={onKeyDownCapture}\n                        />\n\n                        <VisuallyHidden>\n                            <Button\n                                slot='remove'\n                                aria-label='Remove'\n                                variant='ghost'\n                                size='icon'\n                                ref={triggerButtonRef}\n                            >\n                                <IconChevronDown />\n                            </Button>\n                        </VisuallyHidden>\n                    </div>\n                    <Popover.Picker\n                        UNSTABLE_portalContainer={props.portal}\n                        className='max-w-none'\n                        style={{ width: `${width}px` }}\n                        triggerRef={triggerRef}\n                        trigger='ComboBox'\n                    >\n                        <ListBox.Picker\n                            renderEmptyState={() =>\n                                renderEmptyState ? (\n                                    renderEmptyState(fieldState.inputValue)\n                                ) : (\n                                    <Description className='p-3 block'>\n                                        {fieldState.inputValue ? (\n                                            <>\n                                                No results found for:{' '}\n                                                <strong className='font-semibold'>\n                                                    {fieldState.inputValue}\n                                                </strong>\n                                            </>\n                                        ) : (\n                                            `No options`\n                                        )}\n                                    </Description>\n                                )\n                            }\n                            selectionMode='multiple'\n                        >\n                            {children}\n                        </ListBox.Picker>\n                    </Popover.Picker>\n                </ComboBox>\n                <div className='relative px-1 ml-auto flex items-center justify-center peer-data-[open]:[&_button>svg]:rotate-180 [&_button>svg]:transition'>\n                    <button\n                        type='button'\n                        className='size-8 -mr-2 grid place-content-center rounded-lg hover:text-foreground focus:text-foreground text-muted-foreground'\n                        onClick={() => triggerButtonRef.current?.click()}\n                        tabIndex={-1}\n                    >\n                        <IconChevronDown className='size-4' />\n                    </button>\n                </div>\n            </div>\n\n            {name && <input hidden name={name} value={selectedKeys.join(',')} readOnly />}\n\n            {props.description && <Description>{props.description}</Description>}\n        </Group>\n    )\n}\n\nconst MultiSelectItem = ListBox.Item\n\nMultiSelect.Item = MultiSelectItem\nMultiSelect.Tag = Tag.Item\n\nexport { MultiSelect, type SelectedKey }\n"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport { IconChevronLeft, IconChevronRight } from 'hq-icons'\nimport {\n    ListBox,\n    ListBoxItem,\n    ListBoxSection,\n    type ListBoxItemProps,\n    type ListBoxSectionProps\n} from 'react-aria-components'\n\nimport { Button, type ButtonProps } from './button'\nimport { cn } from './utils'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselContextProps = {\n    carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n    api: ReturnType<typeof useEmblaCarousel>[1]\n    scrollPrev: () => void\n    scrollNext: () => void\n    canScrollPrev: boolean\n    canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nconst useCarousel = () => {\n    const context = React.useContext(CarouselContext)\n\n    if (!context) {\n        throw new Error('useCarousel must be used within a <Carousel />')\n    }\n\n    return context\n}\n\ninterface CarouselRootProps {\n    CarouselContent?: typeof CarouselContent\n    CarouselHandler?: typeof CarouselHandler\n    CarouselItem?: typeof CarouselItem\n    CarouselButton?: typeof CarouselButton\n}\n\ninterface CarouselProps extends React.HTMLAttributes<HTMLDivElement>, CarouselRootProps {\n    opts?: CarouselOptions\n    plugins?: CarouselPlugin\n    orientation?: 'horizontal' | 'vertical'\n    setApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = ({\n    orientation = 'horizontal',\n    opts,\n    setApi,\n    plugins,\n    className,\n    children,\n    ...props\n}: CarouselProps) => {\n    const [carouselRef, api] = useEmblaCarousel(\n        {\n            ...opts,\n            axis: orientation === 'horizontal' ? 'x' : 'y'\n        },\n        plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n        if (!api) {\n            return\n        }\n\n        setCanScrollPrev(api.canScrollPrev())\n        setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n        api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n        api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n        (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (event.key === 'ArrowLeft') {\n                event.preventDefault()\n                scrollPrev()\n            } else if (event.key === 'ArrowRight') {\n                event.preventDefault()\n                scrollNext()\n            }\n        },\n        [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n        if (!api || !setApi) {\n            return\n        }\n\n        setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        onSelect(api)\n        api.on('reInit', onSelect)\n        api.on('select', onSelect)\n\n        return () => {\n            api?.off('select', onSelect)\n        }\n    }, [api, onSelect])\n\n    return (\n        <CarouselContext.Provider\n            value={{\n                carouselRef,\n                api: api,\n                opts,\n                orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n                scrollPrev,\n                scrollNext,\n                canScrollPrev,\n                canScrollNext\n            }}\n        >\n            <div\n                onKeyDownCapture={handleKeyDown}\n                className={cn('relative', className)}\n                role='region'\n                aria-roledescription='carousel'\n                {...props}\n            >\n                {children}\n            </div>\n        </CarouselContext.Provider>\n    )\n}\n\nconst CarouselContent = <T extends object>({ className, ...props }: ListBoxSectionProps<T>) => {\n    const { carouselRef, orientation } = useCarousel()\n\n    return (\n        <ListBox\n            layout={orientation === 'vertical' ? 'stack' : 'grid'}\n            aria-label='Slides'\n            orientation={orientation}\n            ref={carouselRef}\n            className='overflow-hidden'\n        >\n            <ListBoxSection\n                className={cn(\n                    'flex',\n                    orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n                    className\n                )}\n                {...props}\n            />\n        </ListBox>\n    )\n}\n\nconst CarouselItem = ({ className, ...props }: ListBoxItemProps) => {\n    const { orientation } = useCarousel()\n\n    return (\n        <ListBoxItem\n            aria-label={`Slide ${props.id}`}\n            aria-roledescription='slide'\n            className={cn(\n                'min-w-0 shrink-0 focus:outline-none grow-0 basis-full focus-visible:outline-none',\n                orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CarouselHandler = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n    ({ className, ...props }, ref) => {\n        const { orientation } = useCarousel()\n        return (\n            <div\n                ref={ref}\n                className={cn(\n                    'mt-6 z-10 relative flex items-center gap-x-2',\n                    orientation === 'horizontal' ? 'justify-end' : 'justify-center',\n                    className\n                )}\n                {...props}\n            />\n        )\n    }\n)\nCarouselHandler.displayName = 'CarouselHandler'\n\nconst CarouselButton = ({\n    slot,\n    className,\n    variant = 'outline',\n    shape = 'square',\n    size = 'icon',\n    ...props\n}: ButtonProps & { slot: 'previous' | 'next' }) => {\n    const { orientation, scrollPrev, canScrollPrev, scrollNext, canScrollNext } = useCarousel()\n    const isNext = slot === 'next'\n    const canScroll = isNext ? canScrollNext : canScrollPrev\n    const scroll = isNext ? scrollNext : scrollPrev\n    const Icon = isNext ? IconChevronRight : IconChevronLeft\n\n    return (\n        <Button\n            aria-label={isNext ? 'Next slide' : 'Previous slide'}\n            slot={slot}\n            variant={variant}\n            size={size}\n            shape={shape}\n            className={cn(orientation === 'vertical' ? 'rotate-90' : '', className)}\n            isDisabled={!canScroll}\n            onPress={scroll}\n            {...props}\n        >\n            <Icon className='size-4' />\n        </Button>\n    )\n}\n\nCarousel.Content = CarouselContent\nCarousel.Handler = CarouselHandler\nCarousel.Item = CarouselItem\nCarousel.Button = CarouselButton\n\nexport { Carousel, type CarouselApi }\n"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCalendarDays } from 'hq-icons'\nimport {\n    DatePicker as DatePickerPrimitive,\n    type DatePickerProps as DatePickerPrimitiveProps,\n    type DateValue,\n    type DialogProps,\n    type PopoverProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Calendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { Popover } from './popover'\nimport { RangeCalendar } from './range-calendar'\nimport { ctr } from './utils'\n\nconst datePickerStyles = tv({\n    slots: {\n        base: 'group flex flex-col gap-y-1.5',\n        datePickerIcon:\n            'group mr-1 h-7 [&_[data-slot=icon]]:text-muted-foreground w-8 rounded-lg outline-offset-0 hover:bg-transparent pressed:bg-transparent',\n        calendarIcon: 'group-open:text-foreground',\n        datePickerInput: 'w-full px-2 text-base lg:text-sm',\n        dateRangePickerInputStart: 'px-2 lg:text-sm text-base',\n        dateRangePickerInputEnd: 'flex-1 px-2 py-1.5 lg:text-sm text-base',\n        dateRangePickerDash:\n            'text-foreground group-disabled:opacity-50 forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]'\n    }\n})\n\nconst { base, datePickerIcon, calendarIcon, datePickerInput } = datePickerStyles()\n\ninterface DatePickerOverlayProps\n    extends Omit<DialogProps, 'children' | 'className' | 'style'>,\n        Omit<PopoverProps, 'children' | 'className' | 'style'> {\n    className?: string | ((values: { defaultClassName?: string }) => string)\n    children?: React.ReactNode\n    closeButton?: boolean\n    range?: boolean\n}\n\nconst DatePickerOverlay = ({ closeButton = true, range, ...props }: DatePickerOverlayProps) => {\n    return (\n        <Popover.Content\n            showArrow={false}\n            className='flex justify-center p-4 sm:p-2 sm:pt-3 sm:max-w-[17.2rem] sm:min-w-[17rem]'\n            {...props}\n        >\n            {range ? <RangeCalendar /> : <Calendar />}\n            {closeButton && (\n                <div className='sm:hidden py-2.5 flex justify-center mx-auto w-full max-w-[inherit]'>\n                    <Popover.Close shape='circle' className='w-full'>\n                        Close\n                    </Popover.Close>\n                </div>\n            )}\n        </Popover.Content>\n    )\n}\n\nconst DatePickerIcon = () => (\n    <Button size='icon' variant='ghost' className={datePickerIcon()}>\n        <IconCalendarDays aria-hidden className={calendarIcon()} />\n    </Button>\n)\n\ninterface DatePickerProps<T extends DateValue> extends DatePickerPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    portal?: Element\n}\n\nconst DatePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DatePickerProps<T>) => {\n    return (\n        <DatePickerPrimitive {...props} className={ctr(className, base())}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='min-w-40'>\n                <DateInput className={datePickerInput()} />\n                <DatePickerIcon />\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <DatePickerOverlay UNSTABLE_portalContainer={props.portal} />\n        </DatePickerPrimitive>\n    )\n}\n\nexport {\n    DatePicker,\n    DatePickerIcon,\n    DatePickerOverlay,\n    type DatePickerProps,\n    type DateValue,\n    type ValidationResult\n}\n"
  },
  "tag-field": {
    "component": "@/components/ui/tag-field",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Group, TextField, type Key } from 'react-aria-components'\nimport { type ListData } from 'react-stately'\n\nimport { Description, Input, Label, type FieldProps } from './field'\nimport { Tag, type RestrictedVariant, type TagGroupProps } from './tag-group'\nimport { cn } from './utils'\n\ninterface TagItemProps {\n    id: number\n    name: string\n}\n\ninterface TagFieldProps extends Pick<TagGroupProps, 'shape'>, FieldProps {\n    variant?: RestrictedVariant\n    isDisabled?: boolean\n    max?: number\n    className?: string\n    children?: React.ReactNode\n    name?: string\n    list: ListData<TagItemProps>\n    onItemInserted?: (tag: TagItemProps) => void\n    onItemCleared?: (tag: TagItemProps | undefined) => void\n}\n\nconst TagField = ({\n    variant = 'primary',\n    name,\n    className,\n    list,\n    onItemCleared,\n    onItemInserted,\n    ...props\n}: TagFieldProps) => {\n    const [isInvalid, setIsInvalid] = React.useState(false)\n    const [inputValue, setInputValue] = React.useState('')\n\n    const existingTagCount = list.items.length\n    const maxTags = props.max !== undefined ? props.max : Infinity\n    const maxTagsToAdd = maxTags - existingTagCount\n\n    const insertTag = () => {\n        const tagNames = inputValue.split(/,/)\n        if (maxTagsToAdd <= 0) {\n            setIsInvalid(true)\n            setInputValue('')\n            const timeoutId = setTimeout(() => {\n                setIsInvalid(false)\n            }, 2000)\n\n            return () => clearTimeout(timeoutId)\n        }\n\n        tagNames.slice(0, maxTagsToAdd).forEach((tagName) => {\n            const formattedName = tagName\n                .trim()\n                .replace(/\\s+/g, ' ')\n                .replace(/[\\t\\r\\n]/g, '')\n\n            if (\n                formattedName &&\n                !list.items.some(({ name }) => name.toLowerCase() === formattedName.toLowerCase())\n            ) {\n                const tag = {\n                    id: (list.items.at(-1)?.id ?? 0) + 1,\n                    name: formattedName\n                }\n\n                list.append(tag)\n                onItemInserted?.(tag)\n            }\n        })\n\n        setInputValue('')\n    }\n\n    const clearInvalidFeedback = () => {\n        if (maxTags - list.items.length <= maxTagsToAdd) {\n            setIsInvalid(false)\n        }\n    }\n\n    const onRemove = (keys: Set<Key>) => {\n        list.remove(...keys)\n        onItemCleared?.(list.getItem([...keys][0]))\n        clearInvalidFeedback()\n    }\n\n    const onKeyDown = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter' || e.key === ',') {\n            e.preventDefault()\n            insertTag()\n        }\n\n        if (e.key === 'Backspace' && inputValue === '') {\n            popLast()\n            clearInvalidFeedback()\n        }\n    }\n\n    const popLast = React.useCallback(() => {\n        if (list.items.length == 0) {\n            return\n        }\n\n        const endKey = list.items[list.items.length - 1]\n\n        if (endKey !== null) {\n            list.remove(endKey.id)\n            onItemCleared?.(list.getItem(endKey.id))\n        }\n    }, [list, onItemCleared])\n\n    return (\n        <div className={cn('flex flex-col gap-1 w-full', className)}>\n            {props.label && <Label>{props.label}</Label>}\n            <Group className={cn('flex flex-col', props.isDisabled && 'opacity-50')}>\n                <Tag.Group\n                    variant={variant}\n                    shape={props.shape}\n                    aria-label='List item inserted'\n                    onRemove={onRemove}\n                >\n                    <div\n                        className={cn(\n                            'relative flex min-h-10 bg-background flex-row flex-wrap items-center transition',\n                            'px-1 rounded-lg shadow-sm border',\n                            'has-[input[data-focused=true]]:border-primary',\n                            'has-[input[data-invalid=true][data-focused=true]]:border-danger has-[input[data-invalid=true]]:border-danger has-[input[data-invalid=true]]:ring-danger/20',\n                            'has-[input[data-focused=true]]:ring-4 has-[input[data-focused=true]]:ring-primary/20'\n                        )}\n                    >\n                        <div className='flex flex-1 flex-wrap items-center'>\n                            <Tag.List\n                                items={list.items}\n                                className={cn(\n                                    list.items.length !== 0 ? 'py-1.5 px-0.5 gap-1.5' : 'gap-0',\n                                    props.shape === 'square' &&\n                                        '[&_.tag]:rounded-[calc(var(--radius)-4px)]',\n                                    '[&_.tag]:cursor-default last:[&_.tag]:-mr-1 outline-none'\n                                )}\n                            >\n                                {(item) => <Tag.Item>{item.name}</Tag.Item>}\n                            </Tag.List>\n                            <TextField\n                                isDisabled={props.isDisabled}\n                                aria-label={\n                                    props?.label ?? (props['aria-label'] || props.placeholder)\n                                }\n                                isInvalid={isInvalid}\n                                onKeyDown={onKeyDown}\n                                onChange={setInputValue}\n                                value={inputValue}\n                                {...props}\n                            >\n                                <Input\n                                    className='w-auto inline'\n                                    placeholder={\n                                        maxTagsToAdd <= 0\n                                            ? 'Remove one to add more'\n                                            : props.placeholder\n                                    }\n                                />\n                            </TextField>\n                        </div>\n                    </div>\n                </Tag.Group>\n                {name && (\n                    <input\n                        hidden\n                        name={name}\n                        value={list.items.map((i) => i.name).join(',')}\n                        readOnly\n                    />\n                )}\n            </Group>\n            {props.description && <Description>{props.description}</Description>}\n        </div>\n    )\n}\n\nexport { TagField, type TagItemProps }\n"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    TimeField as TimeFieldPrimitive,\n    type TimeFieldProps as TimeFieldPrimitiveProps,\n    type TimeValue,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { ctr } from './utils'\n\nexport interface TimeFieldProps<T extends TimeValue> extends TimeFieldPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n}\n\nconst timeFieldStyles = tv({\n    base: 'flex w-fit min-w-28 justify-around whitespace-nowrap p-2 lg:text-sm'\n})\n\nconst TimeField = <T extends TimeValue>({\n    prefix,\n    suffix,\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: TimeFieldProps<T>) => {\n    return (\n        <TimeFieldPrimitive {...props} className={ctr(className, 'group flex flex-col gap-y-1.5')}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                {prefix ? <span data-slot='prefix'>{prefix}</span> : null}\n                <DateInput className={timeFieldStyles} />\n                {suffix ? <span data-slot='suffix'>{suffix}</span> : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </TimeFieldPrimitive>\n    )\n}\n\nexport { TimeField }\n"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    Button,\n    OverlayArrow,\n    Tooltip as TooltipPrimitive,\n    type TooltipProps as TooltipPrimitiveProps,\n    TooltipTrigger\n} from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { cr } from './utils'\n\nexport const tooltipStyles = tv({\n    base: [\n        'group rounded-lg [&_strong]:font-medium border text-background px-3 py-1.5 text-sm will-change-transform dark:shadow-none',\n        'placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n    ],\n    variants: {\n        variant: {\n            default:\n                'bg-background text-foreground [&_.tarrow]:fill-background [&_.tarrow]:stroke-muted',\n            inverse:\n                'border-transparent bg-foreground text-background [&_.tarrow]:fill-foreground [&_.tarrow]:stroke-transparent'\n        },\n        isEntering: {\n            true: 'animate-in fade-in'\n        },\n        isExiting: {\n            true: 'animate-in fade-in direction-reverse'\n        }\n    }\n})\n\nconst Tooltip = (props: React.ComponentProps<typeof TooltipTrigger>) => (\n    <TooltipTrigger {...props}>{props.children}</TooltipTrigger>\n)\n\ninterface ContentProps\n    extends Omit<TooltipPrimitiveProps, 'children'>,\n        VariantProps<typeof tooltipStyles> {\n    showArrow?: boolean\n    children: React.ReactNode\n}\n\nconst Content = ({ showArrow = true, variant = 'default', children, ...props }: ContentProps) => {\n    return (\n        <TooltipPrimitive\n            {...props}\n            offset={10}\n            className={cr(props.className, (className, renderProps) =>\n                tooltipStyles({\n                    ...renderProps,\n                    variant,\n                    className\n                })\n            )}\n        >\n            {showArrow && (\n                <OverlayArrow>\n                    <svg\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className='tarrow group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]'\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            {children}\n        </TooltipPrimitive>\n    )\n}\n\nTooltip.Trigger = Button\nTooltip.Content = Content\n\nexport { Tooltip }\n"
  },
  "container": {
    "component": "@/components/ui/container",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nconst containerStyles = tv({\n    base: 'mx-auto max-w-7xl',\n    variants: {\n        variant: {\n            constrained: 'container sm:px-6 lg:px-8',\n            'padded-content': 'px-4 sm:px-6 lg:px-8'\n        }\n    },\n    defaultVariants: {\n        variant: 'padded-content'\n    }\n})\n\ninterface ContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n    variant?: 'constrained' | 'padded-content'\n}\n\nconst Container = React.forwardRef<HTMLDivElement, ContainerProps>(\n    ({ className, variant, ...props }, ref) => (\n        <div className={containerStyles({ variant, className })} {...props} ref={ref} />\n    )\n)\n\nContainer.displayName = 'Container'\n\nexport { Container }\n"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import React from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nconst skeletonStyles = tv({\n    base: 'animate-pulse shrink-0',\n    variants: {\n        variant: {\n            muted: 'bg-muted-foreground',\n            lighter: 'bg-muted'\n        },\n        shape: {\n            circle: 'rounded-full',\n            square: 'rounded-lg'\n        }\n    },\n    defaultVariants: {\n        variant: 'muted',\n        shape: 'square'\n    }\n})\n\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n    variant?: 'muted' | 'lighter'\n    shape?: 'circle' | 'square'\n}\nconst Skeleton = ({ shape, variant, className, ...props }: SkeletonProps) => {\n    return <div className={skeletonStyles({ shape, variant, className })} {...props} />\n}\n\nexport { Skeleton }\n"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    type DialogProps,\n    DialogTrigger as DialogTriggerPrimitive,\n    type DialogTriggerProps,\n    type Modal,\n    ModalOverlay,\n    type ModalOverlayProps as ModalOverlayPrimitiveProps,\n    Modal as ModalPrimitive\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\nimport { cr } from './utils'\n\nconst sheetOverlayStyles = tv({\n    base: [\n        'fixed top-0 left-0 w-full h-[--visual-viewport-height] isolate z-50 flex items-center justify-center p-4'\n    ],\n    variants: {\n        isBlurred: {\n            true: 'backdrop-blur',\n            false: 'bg-dark/15 dark:bg-dark/40'\n        },\n        isEntering: {\n            true: 'animate-in fade-in duration-200 ease-out'\n        },\n        isExiting: {\n            true: 'animate-out fade-out duration-200 ease-in'\n        }\n    }\n})\n\ntype Sides = 'top' | 'bottom' | 'left' | 'right'\nconst generateCompoundVariants = (sides: Array<Sides>) => {\n    return sides.map((side) => ({\n        side,\n        isStack: true,\n        className:\n            side === 'top'\n                ? 'top-2 inset-x-2 rounded-lg ring-1 border-b-0 ring-dark/5 dark:ring-muted'\n                : side === 'bottom'\n                  ? 'bottom-2 inset-x-2 rounded-lg ring-1 border-t-0 ring-dark/5 dark:ring-muted'\n                  : side === 'left'\n                    ? 'left-2 inset-y-2 rounded-lg ring-1 border-r-0 ring-dark/5 dark:ring-muted'\n                    : 'right-2 inset-y-2 rounded-lg ring-1 border-l-0 ring-dark/5 dark:ring-muted'\n    }))\n}\n\nconst sheetContentStyles = tv({\n    base: 'fixed z-50 grid gap-4 bg-background border-dark/5 dark:border-muted text-foreground shadow-lg transition ease-in-out',\n    variants: {\n        isEntering: {\n            true: 'duration-300 animate-in '\n        },\n        isExiting: {\n            true: 'duration-200 animate-out'\n        },\n        side: {\n            top: 'inset-x-0 top-0 rounded-b-lg border-b entering:slide-in-from-top exiting:slide-out-to-top',\n            bottom: 'inset-x-0 bottom-0 rounded-t-lg border-t entering:slide-in-from-bottom exiting:slide-out-to-bottom',\n            left: 'inset-y-0 left-0 h-auto w-[19rem] sm:w-3/4 overflow-y-auto border-r entering:slide-in-from-left exiting:slide-out-to-left sm:max-w-xs',\n            right: 'inset-y-0 right-0 h-auto w-[19rem] sm:w-3/4 overflow-y-auto border-l entering:slide-in-from-right exiting:slide-out-to-right sm:max-w-xs'\n        },\n        isStack: {\n            true: '',\n            false: ''\n        }\n    },\n    compoundVariants: generateCompoundVariants(['top', 'bottom', 'left', 'right'])\n})\n\nconst Sheet = ({ children, ...props }: DialogTriggerProps) => {\n    return <DialogTriggerPrimitive {...props}>{children}</DialogTriggerPrimitive>\n}\n\ninterface SheetContentProps\n    extends Omit<React.ComponentProps<typeof Modal>, 'children' | 'className'>,\n        Omit<ModalOverlayPrimitiveProps, 'className'>,\n        VariantProps<typeof sheetOverlayStyles> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    closeButton?: boolean\n    isBlurred?: boolean\n    isStack?: boolean\n    side?: Sides\n    classNames?: {\n        overlay?: ModalOverlayPrimitiveProps['className']\n        content?: ModalOverlayPrimitiveProps['className']\n    }\n}\n\nconst SheetContent = ({\n    classNames,\n    isBlurred = false,\n    isDismissable = true,\n    side = 'right',\n    role = 'dialog',\n    closeButton = true,\n    isStack = true,\n    ...props\n}: SheetContentProps) => {\n    const _isDismissable = role === 'alertdialog' ? false : isDismissable\n    return (\n        <ModalOverlay\n            isDismissable={_isDismissable}\n            className={cr(classNames?.overlay, (className, renderProps) => {\n                return sheetOverlayStyles({\n                    ...renderProps,\n                    isBlurred,\n                    className\n                })\n            })}\n            {...props}\n        >\n            <ModalPrimitive\n                className={cr(classNames?.content, (className, renderProps) =>\n                    sheetContentStyles({\n                        ...renderProps,\n                        side,\n                        isStack,\n                        className\n                    })\n                )}\n                {...props}\n            >\n                <Dialog\n                    role={role}\n                    aria-label={props['aria-label'] ?? undefined}\n                    className='h-full'\n                >\n                    {(values) => (\n                        <>\n                            {props.children as React.ReactNode}\n                            {closeButton && (\n                                <Dialog.CloseIndicator\n                                    className='top-2.5 right-2.5'\n                                    close={values.close}\n                                    isDismissable={_isDismissable}\n                                />\n                            )}\n                        </>\n                    )}\n                </Dialog>\n            </ModalPrimitive>\n        </ModalOverlay>\n    )\n}\n\nSheet.Trigger = Dialog.Trigger\nSheet.Footer = Dialog.Footer\nSheet.Content = SheetContent\nSheet.Header = Dialog.Header\nSheet.Title = Dialog.Title\nSheet.Description = Dialog.Description\nSheet.Body = Dialog.Body\nSheet.Close = Dialog.Close\n\nexport { Sheet }\n"
  },
  "choicebox": {
    "component": "@/components/ui/choicebox",
    "raw": "'use client'\n\nimport type { GridListItemProps, GridListProps } from 'react-aria-components'\nimport { GridList, GridListItem } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { Description, Label } from './field'\nimport { cr } from './utils'\n\nconst choiceboxStyles = tv({\n    base: 'grid',\n    variants: {\n        columns: {\n            1: 'sm:grid-cols-1',\n            2: 'sm:grid-cols-2',\n            3: 'sm:grid-cols-3',\n            4: 'sm:grid-cols-4',\n            5: 'sm:grid-cols-5',\n            6: 'sm:grid-cols-6'\n        },\n        gap: {\n            2: 'gap-2',\n            4: 'gap-4',\n            6: 'gap-6'\n        }\n    },\n    defaultVariants: {\n        columns: 2,\n        gap: 6\n    }\n})\n\ninterface ChoiceboxProps<T extends object>\n    extends GridListProps<T>,\n        VariantProps<typeof choiceboxStyles> {\n    className?: string\n}\n\nconst Choicebox = <T extends object>({\n    columns,\n    gap,\n    className,\n    selectionMode = 'multiple',\n    ...props\n}: ChoiceboxProps<T>) => {\n    return (\n        <GridList\n            layout={columns === 1 ? 'stack' : 'grid'}\n            selectionMode={selectionMode}\n            className={choiceboxStyles({\n                columns,\n                gap,\n                className\n            })}\n            {...props}\n        />\n    )\n}\nconst choiceboxItemStyles = tv({\n    base: 'rounded-lg cursor-pointer border p-4 [&_[slot=title]]:font-medium transition outline-none focus:outline-none',\n    variants: {\n        isSelected: {\n            true: [\n                'z-20 bg-primary/10 hover:border-primary border-primary/75',\n                '[&_[slot=title]]:text-primary',\n                '[&_[slot=description]]:text-primary/70'\n            ]\n        },\n        isInvalid: { true: 'border-danger' },\n        isFocused: {\n            true: 'border-primary/80 ring-4 ring-primary/20'\n        },\n        isHovered: {\n            true: 'bg-primary/10'\n        },\n        isDisabled: {\n            true: 'z-10 cursor-default opacity-80 [&_[slot=title]]:text-muted-foreground'\n        }\n    }\n})\n\ninterface ChoiceboxItemProps extends GridListItemProps, VariantProps<typeof choiceboxItemStyles> {\n    title: string\n    description?: string\n}\n\nconst ChoiceboxItem = ({ children, className, ...props }: ChoiceboxItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n    return (\n        <GridListItem\n            textValue={textValue}\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                choiceboxItemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        >\n            {(values) => (\n                <div className='flex items-center w-full justify-between gap-2'>\n                    <div className='pr-8 flex flex-col'>\n                        <Label slot='title' htmlFor={textValue}>\n                            {props.title}\n                        </Label>\n                        {props.description && <Description>{props.description}</Description>}\n                    </div>\n                    <>\n                        {values.selectionMode === 'multiple' &&\n                            values.selectionBehavior === 'toggle' && <Checkbox slot='selection' />}\n                    </>\n                </div>\n            )}\n        </GridListItem>\n    )\n}\n\nChoicebox.Item = ChoiceboxItem\nexport { Choicebox }\n"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from 'hq-icons'\nimport {\n    Button,\n    type ButtonProps,\n    NumberField as NumberFieldPrimitive,\n    type NumberFieldProps as NumberFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ctr, useMediaQuery } from './utils'\n\nconst fieldBorderStyles = tv({\n    base: 'group-focus:border-primary/70 forced-colors:border-[Highlight]',\n    variants: {\n        isInvalid: {\n            true: 'group-focus:border-danger/70 forced-colors:border-[Mark]'\n        },\n        isDisabled: {\n            true: 'group-focus:border-muted/70'\n        }\n    }\n})\n\nconst numberFieldStyles = tv({\n    slots: {\n        base: 'group flex flex-col gap-y-1.5',\n        stepperButton:\n            'h-10 cursor-default px-3 text-muted-foreground pressed:bg-primary pressed:text-primary-foreground group-disabled:bg-muted/70 forced-colors:group-disabled:text-[GrayText]'\n    }\n})\n\nconst { base, stepperButton } = numberFieldStyles()\n\ninterface NumberFieldProps extends NumberFieldPrimitiveProps {\n    label?: string\n    description?: string\n    placeholder?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst NumberField = ({\n    label,\n    placeholder,\n    description,\n    className,\n    errorMessage,\n    ...props\n}: NumberFieldProps) => {\n    const isMobile = useMediaQuery('(max-width: 768px)')\n    return (\n        <NumberFieldPrimitive {...props} className={ctr(className, base())}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='overflow-hidden'>\n                {(renderProps) => (\n                    <>\n                        {isMobile ? <StepperButton slot='decrement' className='border-r' /> : null}\n                        <Input className='tabular-nums' placeholder={placeholder} />\n                        <div\n                            className={fieldBorderStyles({\n                                ...renderProps,\n                                className: 'grid h-10 place-content-center border-s'\n                            })}\n                        >\n                            {isMobile ? (\n                                <StepperButton slot='increment' />\n                            ) : (\n                                <div className='flex h-full flex-col'>\n                                    <StepperButton\n                                        slot='increment'\n                                        emblemType='chevron'\n                                        className='h-5 px-1'\n                                    />\n                                    <div\n                                        className={fieldBorderStyles({\n                                            ...renderProps,\n                                            className: 'border-b border-muted'\n                                        })}\n                                    />\n                                    <StepperButton\n                                        slot='decrement'\n                                        emblemType='chevron'\n                                        className='h-5 px-1'\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </>\n                )}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </NumberFieldPrimitive>\n    )\n}\n\ninterface StepperButtonProps extends ButtonProps {\n    slot: 'increment' | 'decrement'\n    emblemType?: 'chevron' | 'default'\n    className?: string\n}\n\nconst StepperButton = ({\n    slot,\n    className,\n    emblemType = 'default',\n    ...props\n}: StepperButtonProps) => {\n    const icon =\n        emblemType === 'chevron' ? (\n            slot === 'increment' ? (\n                <IconChevronUp className='size-5' />\n            ) : (\n                <IconChevronDown className='size-5' />\n            )\n        ) : slot === 'increment' ? (\n            <IconPlus />\n        ) : (\n            <IconMinus />\n        )\n    return (\n        <Button className={stepperButton({ className })} slot={slot} {...props}>\n            {icon}\n        </Button>\n    )\n}\n\nexport { NumberField }\n"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconEye, IconEyeClosed } from 'hq-icons'\nimport {\n    Button as ButtonPrimitive,\n    TextField as TextFieldPrimitive,\n    type TextFieldProps as TextFieldPrimitiveProps\n} from 'react-aria-components'\n\nimport type { TextInputDOMProps } from '@react-types/shared'\n\nimport { Description, FieldError, FieldGroup, type FieldProps, Input, Label } from './field'\nimport { Loader } from './loader'\nimport { cn, ctr } from './utils'\n\ntype InputType = Exclude<TextInputDOMProps['type'], 'password'>\n\ninterface BaseTextFieldProps extends TextFieldPrimitiveProps, FieldProps {\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isPending?: boolean\n    className?: string\n}\n\ninterface RevealableTextFieldProps extends BaseTextFieldProps {\n    isRevealable: true\n    type: 'password'\n}\n\ninterface NonRevealableTextFieldProps extends BaseTextFieldProps {\n    isRevealable?: never\n    type?: InputType\n}\n\ntype TextFieldProps = RevealableTextFieldProps | NonRevealableTextFieldProps\n\nconst TextField = ({\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    prefix,\n    suffix,\n    isPending,\n    className,\n    isRevealable,\n    type,\n    ...props\n}: TextFieldProps) => {\n    const [isPasswordVisible, setIsPasswordVisible] = React.useState(false)\n    const inputType = isRevealable ? (isPasswordVisible ? 'text' : 'password') : type\n\n    const handleTogglePasswordVisibility = () => {\n        setIsPasswordVisible((prev) => !prev)\n    }\n    return (\n        <TextFieldPrimitive\n            type={inputType}\n            {...props}\n            className={ctr(className, 'group flex flex-col gap-y-1.5')}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup data-loading={isPending ? 'true' : undefined}>\n                {prefix ? (\n                    <span data-slot='prefix' className='atrs x2e2'>\n                        {prefix}\n                    </span>\n                ) : null}\n                <Input placeholder={placeholder} />\n                {isRevealable ? (\n                    <ButtonPrimitive\n                        type='button'\n                        aria-label='Toggle password visibility'\n                        onPress={handleTogglePasswordVisibility}\n                        className='mr-2.5 relative flex items-center justify-center [&>[data-slot=icon]]:text-muted-foreground focus:outline-none focus-visible:ring-1 focus-visible:ring-primary rounded-lg'\n                    >\n                        <IconEyeClosed\n                            className={cn(\n                                'scale-100 transition-all',\n                                isPasswordVisible && 'scale-0'\n                            )}\n                        />\n                        <IconEye\n                            className={cn(\n                                'absolute scale-0 transition-all',\n                                isPasswordVisible && 'scale-100'\n                            )}\n                        />\n                    </ButtonPrimitive>\n                ) : isPending ? (\n                    <Loader variant='spin' data-slot='suffix' />\n                ) : suffix ? (\n                    <span data-slot='suffix'>{suffix}</span>\n                ) : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </TextFieldPrimitive>\n    )\n}\n\nexport { TextField, TextFieldPrimitive, type TextFieldProps }\n"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { LayoutGroup, motion } from 'framer-motion'\nimport {\n    TabList,\n    type TabListProps,\n    TabPanel,\n    type TabPanelProps,\n    Tab as TabPrimitive,\n    type TabProps,\n    Tabs as TabsPrimitive,\n    type TabsProps as TabsPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn, cr, useMediaQuery } from './utils'\n\nconst tabsStyles = tv({\n    base: 'group/tabs flex gap-4 forced-color-adjust-none',\n    variants: {\n        orientation: {\n            horizontal: 'flex-col',\n            vertical: 'w-[800px] flex-row'\n        }\n    }\n})\n\ninterface TabsProps extends TabsPrimitiveProps {\n    isResponsive?: boolean\n}\n\nconst Tabs = (props: TabsProps) => {\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n    const orientation = isDesktop ? 'vertical' : 'horizontal'\n    return (\n        <TabsPrimitive\n            orientation={props.isResponsive ? orientation : props.orientation}\n            {...props}\n            className={cr(props.className, (className, renderProps) =>\n                tabsStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        />\n    )\n}\n\nconst tabListStyles = tv({\n    base: 'flex forced-color-adjust-none',\n    variants: {\n        orientation: {\n            horizontal:\n                'flex-row items-center gap-x-5 border-b overflow-x-auto overflow-y-hidden no-scrollbar',\n            vertical: 'flex-col items-start gap-y-4 border-l overflow-y-auto no-scrollbar'\n        }\n    }\n})\n\nconst List = <T extends object>(props: TabListProps<T>) => {\n    const id = React.useId()\n    return (\n        <LayoutGroup id={id}>\n            <TabList\n                {...props}\n                className={cr(props.className, (className, renderProps) =>\n                    tabListStyles({ ...renderProps, className })\n                )}\n            />\n        </LayoutGroup>\n    )\n}\n\nconst tabStyles = tv({\n    base: [\n        'relative flex whitespace-nowrap cursor-default items-center rounded-full text-sm font-medium outline-none transition hover:text-foreground [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:mr-2',\n        // hor\n        'group-orientation-vertical/tabs:w-full group-orientation-vertical/tabs:py-0 group-orientation-vertical/tabs:pl-4 group-orientation-vertical/tabs:pr-2',\n        // ver\n        'group-orientation-horizontal/tabs:pb-3'\n    ],\n    variants: {\n        isSelected: {\n            false: 'text-muted-foreground',\n            true: 'text-foreground'\n        },\n        isFocused: { false: 'ring-0', true: 'text-foreground' },\n        isDisabled: {\n            true: 'text-muted-foreground/50'\n        }\n    }\n})\n\nconst Tab = ({ children, ...props }: TabProps) => {\n    return (\n        <TabPrimitive\n            {...props}\n            className={cr(props.className, (_className, renderProps) =>\n                tabStyles({\n                    ...renderProps,\n                    className: cn('href' in props && 'cursor-pointer', _className)\n                })\n            )}\n        >\n            {({ isSelected }) => (\n                <>\n                    {children as React.ReactNode}\n                    {isSelected && (\n                        <motion.span\n                            className={cn(\n                                'absolute rounded-lg bg-foreground',\n                                // horizontal\n                                'group-orientation-horizontal/tabs:inset-x-0 group-orientation-horizontal/tabs:-bottom-px group-orientation-horizontal/tabs:h-0.5 group-orientation-horizontal/tabs:w-full',\n                                // vertical\n                                'group-orientation-vertical/tabs:left-0 group-orientation-vertical/tabs:h-[calc(100%-10%)] group-orientation-vertical/tabs:w-0.5 group-orientation-vertical/tabs:transform'\n                            )}\n                            layoutId='current-selected'\n                            transition={{ type: 'spring', stiffness: 500, damping: 40 }}\n                        />\n                    )}\n                </>\n            )}\n        </TabPrimitive>\n    )\n}\n\nconst tabPanelStyles = tv({\n    base: 'flex-1 text-sm text-foreground',\n    variants: {\n        isFocusVisible: {\n            true: 'outline-none'\n        }\n    }\n})\n\nconst Panel = (props: TabPanelProps) => {\n    return (\n        <TabPanel\n            {...props}\n            className={cr(props.className, (className, renderProps) =>\n                tabPanelStyles({ ...renderProps, className })\n            )}\n        />\n    )\n}\n\nTabs.List = List\nTabs.Label = Tab\nTabs.Content = Panel\n\nexport { Tabs }\n"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport { Link as LinkPrimitive, type LinkProps as LinkPrimitiveProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cr } from './utils'\n\nconst linkStyles = tv({\n    base: 'relative focus-visible:outline-2 outline outline-offset-2 disabled:focus-visible:outline-0 outline-0 outline-primary disabled:opacity-60 border-transparent transition-colors disabled:cursor-default',\n    variants: {\n        variant: {\n            default: 'text-foreground hover:text-primary',\n            unstyled: 'text-current',\n            primary: 'text-primary hover:text-primary/80',\n            danger: 'text-danger hover:text-danger/80'\n        }\n    },\n    defaultVariants: {\n        variant: 'default'\n    }\n})\n\ninterface LinkProps extends LinkPrimitiveProps {\n    variant?: 'primary' | 'danger' | 'default' | 'unstyled'\n}\n\nconst Link = ({ className, ...props }: LinkProps) => {\n    return (\n        <LinkPrimitive\n            {...props}\n            className={cr(className, (className, ...renderProps) =>\n                linkStyles({ ...renderProps, variant: props.variant, className })\n            )}\n        >\n            {(values) => (\n                <>\n                    {typeof props.children === 'function' ? props.children(values) : props.children}\n                </>\n            )}\n        </LinkPrimitive>\n    )\n}\n\nexport { Link, type LinkProps }\n"
  },
  "loader": {
    "component": "@/components/ui/loader",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconLoaderCircle } from 'hq-icons'\nimport { ProgressBar } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from './utils'\n\nconst loaderStyles = tv({\n    base: 'relative',\n    variants: {\n        color: {\n            current: 'text-current',\n            primary: 'text-primary',\n            secondary: 'text-muted-foreground',\n            success: 'text-success',\n            warning: 'text-warning',\n            danger: 'text-danger'\n        },\n        size: {\n            sm: 'size-4',\n            md: 'size-6',\n            lg: 'size-8',\n            xl: 'size-10'\n        }\n    },\n    defaultVariants: {\n        color: 'current',\n        size: 'sm'\n    }\n})\n\ntype LoaderVariantProps = VariantProps<typeof loaderStyles>\n\nconst Bars = ({ className, ...props }: React.SVGProps<SVGSVGElement>) => (\n    <svg\n        className={cn('size-4', className)}\n        data-slot='icon'\n        viewBox='0 0 135 140'\n        xmlns='http://www.w3.org/2000/svg'\n        fill='currentColor'\n        {...props}\n    >\n        <rect y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.5s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.5s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='30' y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.25s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.25s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='60' width='15' height='140' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='90' y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.25s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.25s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='120' y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.5s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.5s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n    </svg>\n)\nconst Ring = (props: React.SVGProps<SVGSVGElement>) => <IconLoaderCircle {...props} />\nconst Spin = ({ className, ...props }: React.SVGProps<SVGSVGElement>) => (\n    <svg className={cn('size-4', className)} data-slot='icon' viewBox='0 0 2400 2400' {...props}>\n        <g strokeWidth='200' strokeLinecap='round' fill='none'>\n            <line x1='1200' y1='600' x2='1200' y2='100' />\n            <line opacity='0.5' x1='1200' y1='2300' x2='1200' y2='1800' />\n            <line opacity='0.917' x1='900' y1='680.4' x2='650' y2='247.4' />\n            <line opacity='0.417' x1='1750' y1='2152.6' x2='1500' y2='1719.6' />\n            <line opacity='0.833' x1='680.4' y1='900' x2='247.4' y2='650' />\n            <line opacity='0.333' x1='2152.6' y1='1750' x2='1719.6' y2='1500' />\n            <line opacity='0.75' x1='600' y1='1200' x2='100' y2='1200' />\n            <line opacity='0.25' x1='2300' y1='1200' x2='1800' y2='1200' />\n            <line opacity='0.667' x1='680.4' y1='1500' x2='247.4' y2='1750' />\n            <line opacity='0.167' x1='2152.6' y1='650' x2='1719.6' y2='900' />\n            <line opacity='0.583' x1='900' y1='1719.6' x2='650' y2='2152.6' />\n            <line opacity='0.083' x1='1750' y1='247.4' x2='1500' y2='680.4' />\n            <animateTransform\n                attributeName='transform'\n                attributeType='XML'\n                type='rotate'\n                keyTimes='0;0.08333;0.16667;0.25;0.33333;0.41667;0.5;0.58333;0.66667;0.75;0.83333;0.91667'\n                values='0 1199 1199;30 1199 1199;60 1199 1199;90 1199 1199;120 1199 1199;150 1199 1199;180 1199 1199;210 1199 1199;240 1199 1199;270 1199 1199;300 1199 1199;330 1199 1199'\n                dur='0.83333s'\n                begin='0.08333s'\n                repeatCount='indefinite'\n                calcMode='discrete'\n            />\n        </g>\n    </svg>\n)\n\nconst LOADERS = {\n    bars: Bars,\n    ring: Ring,\n    spin: Spin\n}\n\nconst DEFAULT_SPINNER = 'ring'\n\ninterface LoaderProps\n    extends Omit<React.ComponentPropsWithoutRef<'svg'>, 'display' | 'opacity' | 'color'>,\n        LoaderVariantProps {\n    variant?: keyof typeof LOADERS\n    percentage?: number\n    isIndeterminate?: boolean\n    formatOptions?: Intl.NumberFormatOptions\n}\n\nconst Loader = React.forwardRef<SVGSVGElement, LoaderProps>(\n    ({ isIndeterminate = true, ...props }, ref) => {\n        const { className, variant = DEFAULT_SPINNER, color, size, ...spinnerProps } = props\n        const LoaderPrimitive = LOADERS[variant in LOADERS ? variant : DEFAULT_SPINNER]\n\n        return (\n            <ProgressBar\n                aria-label={props['aria-label'] ?? 'Loading...'}\n                formatOptions={props.formatOptions}\n                isIndeterminate={isIndeterminate}\n            >\n                <LoaderPrimitive\n                    role='presentation'\n                    className={loaderStyles({\n                        color,\n                        size,\n                        className: cn([\n                            ['ring'].includes(variant) && 'animate-spin',\n                            variant === 'spin' && 'stroke-current',\n                            className\n                        ])\n                    })}\n                    ref={ref}\n                    {...spinnerProps}\n                />\n            </ProgressBar>\n        )\n    }\n)\nLoader.displayName = 'Loader'\n\nexport { Loader }\n"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\n\nimport { IconChevronRight } from 'hq-icons'\nimport type { BreadcrumbProps, BreadcrumbsProps } from 'react-aria-components'\nimport {\n    Breadcrumb,\n    Breadcrumbs as BreadcrumbsPrimitive,\n    type LinkProps\n} from 'react-aria-components'\n\nimport { Link } from './link'\nimport { cn, ctr } from './utils'\n\nconst Breadcrumbs = <T extends object>({ className, ...props }: BreadcrumbsProps<T>) => {\n    return <BreadcrumbsPrimitive {...props} className={cn('flex items-center gap-2', className)} />\n}\n\ninterface ItemProps extends BreadcrumbProps {\n    href?: string\n    separator?: 'slash' | 'chevron' | boolean\n}\n\nconst Item = ({\n    href,\n    separator = true,\n    className,\n    ...props\n}: ItemProps & Partial<Omit<LinkProps, 'className'>>) => {\n    const separatorValue = separator === true ? 'chevron' : separator\n\n    return (\n        <Breadcrumb {...props} className={ctr(className, 'flex text-sm items-center gap-2')}>\n            {({ isCurrent }) => (\n                <>\n                    {<Link href={href} {...props} />}\n                    {!isCurrent && separator !== false && <Separator separator={separatorValue} />}\n                </>\n            )}\n        </Breadcrumb>\n    )\n}\n\nconst Separator = ({ separator = 'chevron' }: { separator?: ItemProps['separator'] }) => {\n    return (\n        <span\n            className={cn(\n                '[&>*]:shrink-0 [&>[data-slot=icon]]:size-3.5 [&>*]:text-muted-foreground'\n            )}\n        >\n            {separator === 'chevron' && <IconChevronRight />}\n            {separator === 'slash' && <span className='select-none'>/</span>}\n        </span>\n    )\n}\n\nBreadcrumbs.Item = Item\n\nexport { Breadcrumbs }\n"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport {\n    TextArea as TextAreaPrimitive,\n    TextField as TextFieldPrimitive,\n    type TextFieldProps as TextFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { cr, ctr, focusStyles } from './utils'\n\nconst textareaStyles = tv({\n    extend: focusStyles,\n    base: 'w-full min-w-0 rounded-lg border border-muted bg-background px-2.5 py-2 text-base shadow-sm outline-none transition duration-200 disabled:opacity-50 sm:text-sm'\n})\n\ninterface TextareaProps extends TextFieldPrimitiveProps {\n    autoSize?: boolean\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    className?: string\n}\n\nconst Textarea = ({\n    className,\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    ...props\n}: TextareaProps) => {\n    return (\n        <TextFieldPrimitive {...props} className={ctr(className, 'group flex flex-col gap-y-1.5')}>\n            {label && <Label>{label}</Label>}\n            <TextAreaPrimitive\n                placeholder={placeholder}\n                className={cr(className, (className, renderProps) =>\n                    textareaStyles({\n                        ...renderProps,\n                        className\n                    })\n                )}\n            />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </TextFieldPrimitive>\n    )\n}\n\nexport { Textarea, type TextareaProps }\n"
  },
  "rich-text-field": {
    "component": "@/components/ui/rich-text-field",
    "raw": "'use client'\n\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport {\n    IconBold,\n    IconHeading1,\n    IconHeading2,\n    IconHeading3,\n    IconItalic,\n    IconList,\n    IconListOrdered,\n    IconParagraph,\n    IconRedo,\n    IconStrikethrough,\n    IconSubscript,\n    IconSuperscript,\n    IconTextQuote,\n    IconUnderline,\n    IconUndo\n} from 'hq-icons'\nimport {\n    $createParagraphNode,\n    $getRoot,\n    $getSelection,\n    $insertNodes,\n    $isRangeSelection,\n    $isRootOrShadowRoot,\n    CAN_REDO_COMMAND,\n    CAN_UNDO_COMMAND,\n    COMMAND_PRIORITY_CRITICAL,\n    FORMAT_TEXT_COMMAND,\n    REDO_COMMAND,\n    SELECTION_CHANGE_COMMAND,\n    UNDO_COMMAND\n} from 'lexical'\nimport { TextField, type ValidationResult } from 'react-aria-components'\n\nimport { CodeHighlightNode, CodeNode } from '@lexical/code'\nimport { $generateHtmlFromNodes, $generateNodesFromDOM } from '@lexical/html'\nimport { AutoLinkNode, LinkNode } from '@lexical/link'\nimport {\n    $isListNode,\n    INSERT_ORDERED_LIST_COMMAND,\n    INSERT_UNORDERED_LIST_COMMAND,\n    ListItemNode,\n    ListNode,\n    REMOVE_LIST_COMMAND\n} from '@lexical/list'\nimport { $convertToMarkdownString, TRANSFORMERS } from '@lexical/markdown'\nimport { type InitialConfigType, LexicalComposer } from '@lexical/react/LexicalComposer'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable'\nimport { LexicalErrorBoundary } from '@lexical/react/LexicalErrorBoundary'\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin'\nimport { LinkPlugin } from '@lexical/react/LexicalLinkPlugin'\nimport { ListPlugin } from '@lexical/react/LexicalListPlugin'\nimport { MarkdownShortcutPlugin } from '@lexical/react/LexicalMarkdownShortcutPlugin'\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin'\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin'\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin'\nimport type { HeadingTagType } from '@lexical/rich-text'\nimport {\n    $createHeadingNode,\n    $createQuoteNode,\n    $isHeadingNode,\n    HeadingNode,\n    QuoteNode\n} from '@lexical/rich-text'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $findMatchingParent, $getNearestNodeOfType, mergeRegister } from '@lexical/utils'\n\nimport { Button } from './button'\nimport { Description, FieldError, Label } from './field'\nimport { Menu } from './menu'\nimport { Toolbar } from './toolbar'\nimport { cn } from './utils'\n\ninterface RichTextFieldProps {\n    className?: string\n    value?: string\n    onChange?: (value: string) => void\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    isDisabled?: boolean\n    returnType?: 'markdown' | 'html'\n    hideToolbar?: boolean\n    as?: 'rich-text' | 'plain-text'\n}\n\nconst RichTextField = ({\n    className,\n    label,\n    description,\n    errorMessage,\n    isDisabled = false,\n    returnType = 'html',\n    hideToolbar = false,\n    as = 'rich-text',\n    ...props\n}: RichTextFieldProps) => {\n    const config: InitialConfigType = {\n        editable: !isDisabled,\n        namespace: 'rich-text-field',\n        theme: {\n            text: {\n                strikethrough: 'line-through',\n                underline: 'underline'\n            }\n        },\n        nodes: [\n            HeadingNode,\n            ListNode,\n            ListItemNode,\n            QuoteNode,\n            CodeNode,\n            CodeHighlightNode,\n            AutoLinkNode,\n            LinkNode\n        ],\n        onError: (error) => {\n            console.error(error)\n        }\n    }\n\n    return (\n        <LexicalComposer initialConfig={config}>\n            <div>\n                <div className='relative'>\n                    {as === 'rich-text' ? (\n                        <RichTextPlugin\n                            placeholder={\n                                <p className='absolute bottom-2 left-3 text-muted-foreground'>\n                                    Write something...\n                                </p>\n                            }\n                            contentEditable={\n                                <TextField\n                                    aria-label='Editor'\n                                    id='parent'\n                                    className={cn('group flex flex-col gap-1 relative', className)}\n                                >\n                                    {label && <Label>{label}</Label>}\n\n                                    {!hideToolbar && <Toolbar />}\n                                    <ContentEditable\n                                        autoFocus\n                                        aria-disabled={isDisabled}\n                                        disabled={isDisabled}\n                                        className={cn(\n                                            'w-full min-h-32 outline-none focus:outline-none min-w-0 rounded-lg border bg-background px-2.5 py-2 text-base shadow-sm transition sm:text-sm',\n                                            'focus:border-primary/85 focus:ring-4 focus:ring-primary/20',\n                                            'invalid:border-danger invalid:ring-4 invalid:ring-danger/20',\n                                            isDisabled && 'opacity-50'\n                                        )}\n                                    />\n                                    {description && <Description>{description}</Description>}\n                                    <FieldError>{errorMessage}</FieldError>\n                                </TextField>\n                            }\n                            ErrorBoundary={LexicalErrorBoundary}\n                        />\n                    ) : (\n                        <PlainTextPlugin\n                            placeholder={\n                                <p className='absolute bottom-2 left-3 text-muted-foreground'>\n                                    Write something...\n                                </p>\n                            }\n                            contentEditable={\n                                <TextField\n                                    aria-label='Editor'\n                                    id='parent'\n                                    className={cn('group flex flex-col gap-1 relative', className)}\n                                >\n                                    {label && <Label>{label}</Label>}\n\n                                    {!hideToolbar && <Toolbar />}\n                                    <ContentEditable\n                                        autoFocus\n                                        aria-disabled={isDisabled}\n                                        disabled={isDisabled}\n                                        className={cn(\n                                            'w-full min-h-32 outline-none focus:outline-none min-w-0 rounded-lg border bg-background px-2.5 py-2 text-base shadow-sm transition sm:text-sm',\n                                            'focus:border-primary/85 focus:ring-4 focus:ring-primary/20',\n                                            'invalid:border-danger invalid:ring-4 invalid:ring-danger/20',\n                                            isDisabled && 'opacity-50'\n                                        )}\n                                    />\n                                    {description && <Description>{description}</Description>}\n                                    <FieldError>{errorMessage}</FieldError>\n                                </TextField>\n                            }\n                            ErrorBoundary={LexicalErrorBoundary}\n                        />\n                    )}\n                    <HistoryPlugin />\n                </div>\n                <ListPlugin />\n                <LinkPlugin />\n                {as === 'rich-text' && <MarkdownShortcutPlugin transformers={TRANSFORMERS} />}\n                <OnChange returnType={returnType} value={props.value} onChange={props.onChange} />\n            </div>\n        </LexicalComposer>\n    )\n}\n\ninterface OnChangeProps {\n    value?: string\n    onChange?: (value: string) => void\n    returnType: 'markdown' | 'html'\n}\n\nfunction OnChange({ value, onChange, returnType }: OnChangeProps) {\n    const [editor] = useLexicalComposerContext()\n    const [isFirstRender, setIsFirstRender] = React.useState(true)\n\n    React.useEffect(() => {\n        if (returnType === 'html') {\n            if (!value || !isFirstRender) return\n\n            setIsFirstRender(false)\n            editor.update(() => {\n                const currentHTML = $generateHtmlFromNodes(editor)\n                if (currentHTML !== value) {\n                    $getRoot().clear()\n                    const parser = new DOMParser()\n                    const dom = parser.parseFromString(value, 'text/html')\n                    const nodes = $generateNodesFromDOM(editor, dom)\n                    $insertNodes(nodes)\n                }\n            })\n        }\n    }, [editor, value, isFirstRender, returnType])\n\n    React.useEffect(() => {\n        setIsFirstRender(true)\n    }, [value])\n\n    return (\n        <OnChangePlugin\n            onChange={(editorState) => {\n                editorState.read(() => {\n                    onChange?.(\n                        returnType === 'markdown'\n                            ? $convertToMarkdownString(TRANSFORMERS, undefined, true)\n                            : $generateHtmlFromNodes(editor)\n                    )\n                })\n            }}\n        />\n    )\n}\n\nfunction BlockTypeDropdown({ blockType }: { blockType: string }) {\n    const blockIcons = {\n        h1: <IconHeading1 />,\n        h2: <IconHeading2 />,\n        h3: <IconHeading3 />,\n        paragraph: <IconParagraph />,\n        bullet: <IconList />,\n        number: <IconListOrdered />,\n        quote: <IconTextQuote />\n    }\n    const [editor] = useLexicalComposerContext()\n\n    const formatHeading = (headingLevel: HeadingTagType) => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createHeadingNode(headingLevel))\n        })\n    }\n\n    const formatParagraph = () => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createParagraphNode())\n        })\n    }\n\n    const formatOrderedList = () => {\n        if (blockType !== 'number') {\n            editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined)\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined)\n        }\n    }\n\n    const formatUnorderedList = () => {\n        if (blockType !== 'bullet') {\n            editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined)\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined)\n        }\n    }\n\n    const formatQuote = () => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createQuoteNode())\n        })\n    }\n\n    return (\n        <Menu>\n            <Button isDisabled={!editor.isEditable()} variant='outline' size='icon'>\n                {blockIcons[blockType as keyof typeof blockIcons]}\n            </Button>\n            <Menu.Content selectionMode='single' aria-label='Block type' selectedKeys={[blockType]}>\n                <Menu.Radio id='paragraph' onAction={formatParagraph}>\n                    <IconParagraph /> Paragraph\n                </Menu.Radio>\n                <Menu.Radio id='h1' onAction={() => formatHeading('h1')}>\n                    <IconHeading1 /> Heading 1\n                </Menu.Radio>\n                <Menu.Radio id='h2' onAction={() => formatHeading('h2')}>\n                    <IconHeading2 /> Heading 2\n                </Menu.Radio>\n                <Menu.Radio id='h3' onAction={() => formatHeading('h3')}>\n                    <IconHeading3 /> Heading 3\n                </Menu.Radio>\n                <Menu.Radio id='bullet' onAction={formatUnorderedList}>\n                    <IconList /> Unordered List\n                </Menu.Radio>\n                <Menu.Radio id='number' onAction={formatOrderedList}>\n                    <IconListOrdered /> Ordered List\n                </Menu.Radio>\n                <Menu.Radio id='quote' onAction={formatQuote}>\n                    <IconTextQuote /> Quote\n                </Menu.Radio>\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nexport function ToolbarPlugin() {\n    const [editor] = useLexicalComposerContext()\n    const [formatText, setFormatText] = React.useState({\n        bold: false,\n        italic: false,\n        underline: false,\n        strikethrough: false,\n        subscript: false,\n        superscript: false\n    })\n    const [blockType, setBlockType] = useState<string>('paragraph')\n\n    const [canUndo, setCanUndo] = useState<boolean>(false)\n    const [canRedo, setCanRedo] = useState<boolean>(false)\n\n    const $updateToolbar = useCallback(() => {\n        const selection = $getSelection()\n        if ($isRangeSelection(selection)) {\n            setFormatText({\n                bold: selection.hasFormat('bold'),\n                italic: selection.hasFormat('italic'),\n                underline: selection.hasFormat('underline'),\n                strikethrough: selection.hasFormat('strikethrough'),\n                subscript: selection.hasFormat('subscript'),\n                superscript: selection.hasFormat('superscript')\n            })\n            const anchorNode = selection.anchor.getNode()\n\n            let element =\n                anchorNode.getKey() === 'root'\n                    ? anchorNode\n                    : $findMatchingParent(anchorNode, (e) => {\n                          const parent = e.getParent()\n                          return parent !== null && $isRootOrShadowRoot(parent)\n                      })\n\n            if (element === null) {\n                element = anchorNode.getTopLevelElementOrThrow()\n            }\n\n            const elementDOM = editor.getElementByKey(element.getKey())\n\n            if (elementDOM !== null) {\n                if ($isListNode(element)) {\n                    const parentList = $getNearestNodeOfType<ListNode>(anchorNode, ListNode)\n                    const type = parentList ? parentList.getListType() : element.getListType()\n                    setBlockType(type)\n                } else {\n                    const type = $isHeadingNode(element) ? element.getTag() : element.getType()\n                    setBlockType(type)\n                }\n            }\n        }\n    }, [editor])\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerCommand(\n                SELECTION_CHANGE_COMMAND,\n                () => {\n                    $updateToolbar()\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            ),\n            editor.registerUpdateListener(({ editorState }) => {\n                editorState.read(() => {\n                    $updateToolbar()\n                })\n            })\n        )\n    }, [editor, $updateToolbar])\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerCommand(\n                CAN_UNDO_COMMAND,\n                (payload) => {\n                    setCanUndo(payload)\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            ),\n            editor.registerCommand(\n                CAN_REDO_COMMAND,\n                (payload) => {\n                    setCanRedo(payload)\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            )\n        )\n    }, [editor])\n\n    return (\n        <Toolbar className='mb-2' aria-label='Toolbar'>\n            <Toolbar.Group aria-label='Formats'>\n                <BlockTypeDropdown blockType={blockType} />\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.bold}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'bold')\n                    }}\n                >\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.italic}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic')\n                    }}\n                >\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.underline}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'underline')\n                    }}\n                >\n                    <IconUnderline />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.strikethrough}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'strikethrough')\n                    }}\n                >\n                    <IconStrikethrough />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.subscript}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'subscript')\n                    }}\n                >\n                    <IconSubscript />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.superscript}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'superscript')\n                    }}\n                >\n                    <IconSuperscript />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Actions'>\n                <Toolbar.Item\n                    size='icon'\n                    isDisabled={!canUndo || !editor.isEditable()}\n                    isSelected={false}\n                    onPress={() => editor.dispatchCommand(UNDO_COMMAND, undefined)}\n                >\n                    <IconUndo />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    size='icon'\n                    isDisabled={!canRedo || !editor.isEditable()}\n                    isSelected={false}\n                    onPress={() => editor.dispatchCommand(REDO_COMMAND, undefined)}\n                >\n                    <IconRedo />\n                </Toolbar.Item>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n\nexport { RichTextField }\n"
  },
  "color-slider": {
    "component": "@/components/ui/color-slider",
    "raw": "'use client'\n\nimport {\n    ColorSlider as ColorSliderPrimitive,\n    type ColorSliderProps as ColorSliderPrimitiveProps,\n    SliderOutput,\n    SliderTrack\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { ColorThumb } from './color-thumb'\nimport { Label } from './field'\nimport { ctr } from './utils'\n\nconst trackStyles = tv({\n    base: 'group col-span-2 orientation-horizontal:h-6 rounded-lg',\n    variants: {\n        orientation: {\n            horizontal: 'w-full h-6',\n            vertical: 'w-6 h-56 ml-[50%] -translate-x-[50%]'\n        },\n        isDisabled: {\n            true: 'opacity-75 bg-muted forced-colors:bg-[GrayText]'\n        }\n    }\n})\n\ninterface ColorSliderProps extends ColorSliderPrimitiveProps {\n    label?: string\n    showOutput?: boolean\n}\n\nconst ColorSlider = ({ showOutput = true, label, className, ...props }: ColorSliderProps) => {\n    return (\n        <ColorSliderPrimitive\n            {...props}\n            data-slot='color-slider'\n            className={ctr(\n                className,\n                'group orientation-horizontal:grid orientation-vertical:flex relative orientation-horizontal:grid-cols-[1fr_auto] orientation-vertical:flex-col orientation-vertical:justify-center orientation-vertical:items-center gap-2 orientation-horizontal:w-56'\n            )}\n        >\n            <div className='flex items-center'>\n                {label && <Label className='text-sm [grid-area:label]'>{label}</Label>}\n                {showOutput && <SliderOutput className='text-sm ml-auto [grid-area:output]' />}\n            </div>\n            <SliderTrack\n                className={trackStyles}\n                style={({ defaultStyle, isDisabled }) => ({\n                    ...defaultStyle,\n                    background: isDisabled\n                        ? undefined\n                        : `${defaultStyle.background}, repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n                })}\n            >\n                <ColorThumb />\n            </SliderTrack>\n        </ColorSliderPrimitive>\n    )\n}\n\nexport { ColorSlider }\n"
  },
  "show-more": {
    "component": "@/components/ui/show-more",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { IconChevronDown } from 'hq-icons'\nimport { Text, ToggleButton } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { buttonVariants } from './button'\nimport { cn } from './utils'\n\nconst showMoreStyles = tv({\n    base: 'text-sm leading-6 after:border-muted before:border-muted',\n    variants: {\n        orientation: {\n            vertical: 'mx-1 h-auto self-stretch',\n            horizontal: 'my-0.5 h-px w-full self-stretch'\n        }\n    },\n    compoundVariants: [\n        {\n            orientation: 'vertical',\n            className:\n                'mx-2 flex flex-col items-center before:border-l before:flex-1 before:mb-2 after:border-r after:flex-1 after:mt-2'\n        },\n        {\n            orientation: 'horizontal',\n            className:\n                'self-stretch my-2 flex items-center before:border-t before:flex-1 before:mr-2 after:border-t after:flex-1 after:ml-2'\n        }\n    ],\n    defaultVariants: {\n        orientation: 'horizontal'\n    }\n})\n\ninterface ShowMoreProps extends React.ComponentProps<typeof ToggleButton> {\n    className?: string\n    orientation?: 'horizontal' | 'vertical'\n    as?: 'text' | 'button'\n    text?: string\n}\n\nconst ShowMore = ({\n    as = 'button',\n    orientation = 'horizontal',\n    className,\n    ...props\n}: ShowMoreProps) => {\n    return (\n        <div className={showMoreStyles({ orientation, className })}>\n            {as === 'button' ? (\n                <ToggleButton\n                    {...props}\n                    className={buttonVariants({\n                        variant: 'outline',\n                        size: 'sm'\n                    })}\n                />\n            ) : (\n                <Text slot='description'>{props.text}</Text>\n            )}\n        </div>\n    )\n}\n\ninterface ContentRevealProps {\n    initialHeight?: number\n    initialOpacity?: number\n    showMoreText?: string\n    showLessText?: string\n    gradientTransparency?: boolean\n    children: React.ReactNode\n    className?: string\n}\n\nfunction ContentReveal({\n    children,\n    initialHeight = 128,\n    initialOpacity = 1,\n    showMoreText = 'Show More',\n    showLessText = 'Show Less',\n    gradientTransparency = true,\n    className\n}: ContentRevealProps) {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const animate = {\n        transition: { type: 'tween' },\n        height: isExpanded ? 'auto' : initialHeight,\n        opacity: isExpanded ? 1 : initialOpacity\n    }\n    return (\n        <div className={cn('relative overflow-visible', className)}>\n            <AnimatePresence initial={false}>\n                <div aria-expanded={isExpanded}>\n                    <motion.div\n                        style={{ overflow: 'hidden' }}\n                        initial={{ height: initialHeight, opacity: initialOpacity }}\n                        exit={{ height: initialHeight, opacity: initialOpacity }}\n                        animate={animate}\n                    >\n                        {children}\n                    </motion.div>\n                </div>\n            </AnimatePresence>\n            {gradientTransparency && (\n                <div\n                    className={cn(\n                        'absolute inset-0 rounded-lg bg-gradient-to-b from-transparent via-background to-background',\n                        isExpanded && 'hidden'\n                    )}\n                ></div>\n            )}\n            <ShowMore\n                className={cn('absolute -bottom-2')}\n                isSelected={isExpanded}\n                onChange={setIsExpanded}\n            >\n                {isExpanded ? showLessText : showMoreText}\n                <IconChevronDown\n                    className={cn(isExpanded ? 'rotate-180' : '', 'size-4 transition')}\n                />\n            </ShowMore>\n        </div>\n    )\n}\n\nexport { ContentReveal, ShowMore }\n"
  },
  "field": {
    "component": "@/components/ui/field",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    FieldError as FieldErrorPrimitive,\n    type FieldErrorProps,\n    Group,\n    type GroupProps,\n    Input as InputPrimitive,\n    type InputProps,\n    Label as LabelPrimitive,\n    type LabelProps,\n    Text,\n    type TextFieldProps as TextFieldPrimitiveProps,\n    type TextProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn, ctr } from './utils'\n\ninterface FieldProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    'aria-label'?: TextFieldPrimitiveProps['aria-label']\n    'aria-labelledby'?: TextFieldPrimitiveProps['aria-labelledby']\n}\n\nconst fieldStyles = tv({\n    slots: {\n        description: 'text-pretty text-base/6 text-muted-foreground sm:text-sm/6',\n        label: 'w-fit cursor-default font-medium text-muted-foreground text-sm group-focus:text-primary group-data-[focus-within=true]:text-primary group-has-[[data-focus-within=true]]:text-primary group-has-[[data-focused=true]]:text-primary group-has-[[aria-invalid=true]]:text-danger',\n        fieldError: 'text-sm/6 text-danger forced-colors:text-[Mark]',\n        input: [\n            'w-full min-w-0 [&::-ms-reveal]:hidden bg-transparent p-2 text-base text-foreground placeholder-muted-foreground outline-none focus:outline-none lg:text-sm'\n        ]\n    }\n})\n\nconst { description, label, fieldError, input } = fieldStyles()\n\nconst Label = ({ className, ...props }: LabelProps) => {\n    return <LabelPrimitive {...props} className={label({ className })} />\n}\n\ninterface DescriptionProps extends TextProps {\n    isWarning?: boolean\n}\n\nconst Description = ({ className, ...props }: DescriptionProps) => {\n    const isWarning = props.isWarning ?? false\n    return (\n        <Text\n            {...props}\n            slot='description'\n            className={description({ className: isWarning ? 'text-warning' : className })}\n        />\n    )\n}\n\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n    return <FieldErrorPrimitive {...props} className={ctr(className, fieldError())} />\n}\n\nconst FieldGroup = ({ className, ...props }: GroupProps) => {\n    return (\n        <Group\n            {...props}\n            className={cn([\n                'border border-muted transition h-10 duration-200 ease-out rounded-lg flex items-center',\n                'focus-within:border-primary/70 focus-within:ring-4 focus-within:ring-primary/20',\n                'group-invalid:focus-within:border-danger focus-within:ring-4 group-invalid:focus-within:ring-danger/20',\n                '[&>[role=progressbar]]:mr-2.5',\n                '[&_[data-slot=icon]]:size-4 [&_[data-slot=icon]]:shrink-0',\n                '[&>[data-slot=suffix]]:mr-2.5 [&>[data-slot=suffix]]:text-muted-foreground',\n                '[&>[data-slot=prefix]]:ml-2.5 [&>[data-slot=prefix]]:text-muted-foreground',\n                'group-disabled:opacity-50',\n                className\n            ])}\n        />\n    )\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, ...props }, ref) => {\n    return <InputPrimitive ref={ref} {...props} className={ctr(className, input())} />\n})\n\nInput.displayName = 'Input'\n\nexport { Description, FieldError, FieldGroup, Input, Label, type FieldProps }\n"
  },
  "progress-bar": {
    "component": "@/components/ui/progress-bar",
    "raw": "'use client'\n\nimport { motion } from 'framer-motion'\nimport {\n    ProgressBar as ProgressBarPrimitive,\n    type ProgressBarProps as ProgressBarPrimitiveProps\n} from 'react-aria-components'\n\nimport { Label } from './field'\nimport { ctr } from './utils'\n\ninterface ProgressBarProps extends ProgressBarPrimitiveProps {\n    label?: string\n}\n\nconst ProgressBar = ({ label, className, ...props }: ProgressBarProps) => {\n    return (\n        <ProgressBarPrimitive {...props} className={ctr(className, 'flex flex-col')}>\n            {({ percentage, valueText, isIndeterminate }) => (\n                <>\n                    <div className='flex justify-between gap-2'>\n                        {label && <Label>{label}</Label>}\n                        <span className='text-sm text-muted-foreground tabular-nums'>\n                            {valueText}\n                        </span>\n                    </div>\n                    <div className='relative h-2 min-w-64 overflow-hidden rounded-lg bg-muted outline outline-1 -outline-offset-1 outline-transparent'>\n                        {!isIndeterminate ? (\n                            <motion.div\n                                className='absolute left-0 top-0 h-full rounded-lg bg-primary forced-colors:bg-[Highlight]'\n                                initial={{ width: '0%' }}\n                                animate={{ width: `${percentage}%` }}\n                                transition={{ duration: 0.5, ease: 'easeInOut' }}\n                            />\n                        ) : (\n                            <motion.div\n                                className='absolute top-0 h-full rounded-lg bg-primary forced-colors:bg-[Highlight]'\n                                initial={{ left: '0%', width: '40%' }}\n                                animate={{ left: ['0%', '100%', '0%'] }}\n                                transition={{\n                                    repeat: Infinity,\n                                    duration: 2,\n                                    ease: 'easeInOut'\n                                }}\n                            />\n                        )}\n                    </div>\n                </>\n            )}\n        </ProgressBarPrimitive>\n    )\n}\n\nexport { ProgressBar }\n"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconUser } from 'hq-icons'\nimport { Collection } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { type CollectionProps } from '@react-aria/collections'\n\nimport { Tooltip } from './tooltip'\nimport { cn, VisuallyHidden } from './utils'\n\ninterface AvatarGroupProps<T extends AvatarProps> extends Omit<CollectionProps<T>, 'children'> {\n    children?: React.ReactNode\n    className?: string\n}\n\nconst AvatarGroup = <T extends AvatarProps>({\n    className,\n    items,\n    children,\n    ...props\n}: AvatarGroupProps<T>) => {\n    return (\n        <div\n            className={cn(\n                'flex items-center -space-x-2 justify-center [&_[data-slot=avatar]]:ring-2 [&_[data-slot=avatar]]:ring-background',\n                'hover:[&_.avatar]:scale-110 hover:[&_.avatar]:z-30 [&_.avatar]:transition',\n                className\n            )}\n            {...props}\n        >\n            <Collection items={items}>{children ?? ((item) => <Avatar {...item} />)}</Collection>\n        </div>\n    )\n}\n\nconst avatarStyles = tv({\n    base: [\n        'inline-grid relative shrink-0 bg-muted align-middle [--ring-opacity:20%] *:col-start-1 *:row-start-1',\n        'avatar outline outline-1 -outline-offset-1 outline-foreground/[--ring-opacity]'\n    ],\n    variants: {\n        size: {\n            xs: 'size-5',\n            sm: 'size-6',\n            md: 'size-8',\n            lg: 'size-10'\n        },\n        shape: {\n            square: 'rounded-lg *:rounded-lg [&_[data-slot=badge]]:rounded-full',\n            circle: 'rounded-full *:rounded-full'\n        }\n    },\n\n    defaultVariants: {\n        shape: 'circle',\n        size: 'md'\n    }\n})\n\ntype Status = 'danger' | 'success' | 'muted' | 'warning' | 'primary'\n\ninterface AvatarProps\n    extends React.ComponentPropsWithoutRef<'span'>,\n        VariantProps<typeof avatarStyles> {\n    src?: string | null\n    initials?: string\n    alt?: string\n    status?: Status\n    tooltip?: string\n    className?: string\n}\n\nconst Avatar = ({\n    status,\n    src = null,\n    initials,\n    alt = '',\n    children,\n    tooltip,\n    className,\n    shape,\n    size,\n    ...props\n}: AvatarProps) => {\n    const badgeId = React.useId()\n    const ariaLabelledby = [badgeId, children ? badgeId : ''].join(' ')\n    return tooltip ? (\n        <Tooltip delay={0} closeDelay={0}>\n            <Tooltip.Trigger className='outline-none' aria-labelledby={ariaLabelledby}>\n                <span\n                    aria-labelledby={ariaLabelledby}\n                    data-slot='avatar'\n                    {...props}\n                    className={avatarStyles({ shape, size, className })}\n                >\n                    {initials ? (\n                        <svg\n                            className='select-none fill-current text-[48px] font-medium uppercase'\n                            viewBox='0 0 100 100'\n                            aria-hidden={alt ? undefined : 'true'}\n                        >\n                            {alt && <title>{alt}</title>}\n                            <text\n                                x='50%'\n                                y='50%'\n                                alignmentBaseline='middle'\n                                dominantBaseline='middle'\n                                textAnchor='middle'\n                                dy='.125em'\n                            >\n                                {initials}\n                            </text>\n                        </svg>\n                    ) : (\n                        <IconUser />\n                    )}\n                    {src && <img src={src} alt={alt} />}\n                    {status && <AvatarBadge size={size} status={status} aria-label={status} />}\n                </span>\n            </Tooltip.Trigger>\n            <Tooltip.Content variant='inverse'>{tooltip}</Tooltip.Content>\n        </Tooltip>\n    ) : (\n        <span\n            aria-labelledby={ariaLabelledby}\n            data-slot='avatar'\n            {...props}\n            className={avatarStyles({ shape, size, className })}\n        >\n            {initials && (\n                <svg\n                    className='select-none fill-current text-[48px] font-medium uppercase'\n                    viewBox='0 0 100 100'\n                    aria-hidden={alt ? undefined : 'true'}\n                >\n                    {alt && <title>{alt}</title>}\n                    <text\n                        x='50%'\n                        y='50%'\n                        alignmentBaseline='middle'\n                        dominantBaseline='middle'\n                        textAnchor='middle'\n                        dy='.125em'\n                    >\n                        {initials}\n                    </text>\n                </svg>\n            )}\n            {src && <img src={src} alt={alt} />}\n            {status && <AvatarBadge size={size} status={status} aria-label={status} />}\n        </span>\n    )\n}\n\ntype AvatarBadgeProps = {\n    className?: string\n    status?: Status\n    fillBackground?: boolean\n    'aria-label': string\n    size?: AvatarProps['size']\n}\n\nconst avatarBadgeStyles = tv({\n    base: [\n        'size-3 z-10 absolute bottom-0 right-0 rounded-full ring-[1.5px] ring-background bg-background'\n    ],\n    variants: {\n        size: {\n            xs: 'size-[0.360rem] translate-x-[0%] translate-y-[0%]',\n            sm: 'size-1.5 translate-x-[0%] translate-y-[0%]',\n            md: 'size-2 translate-x-[5%] translate-y-[5%]',\n            lg: 'size-2.5 translate-x-[5%] translate-y-[5%]'\n        },\n        status: {\n            danger: 'bg-danger',\n            success: 'bg-success',\n            muted: 'bg-muted-foreground',\n            warning: 'bg-warning',\n            primary: 'bg-primary'\n        }\n    },\n    defaultVariants: {\n        size: 'md',\n        status: 'primary'\n    }\n})\n\nconst AvatarBadge = ({ size, className, status, ...props }: AvatarBadgeProps) => {\n    return (\n        <span\n            data-slot='badge'\n            {...props}\n            aria-hidden\n            className={avatarBadgeStyles({ size, status, className })}\n        >\n            <VisuallyHidden>{status}</VisuallyHidden>\n        </span>\n    )\n}\n\nexport { Avatar, AvatarGroup }\n"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    DialogTrigger,\n    ModalOverlay as ModalOverlayPrimitive,\n    Modal as ModalPrimitive,\n    type DialogProps,\n    type DialogTriggerProps,\n    type ModalOverlayProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\nimport { cr } from './utils'\n\nconst modalOverlayStyles = tv({\n    base: [\n        'fixed left-0 top-0 isolate z-50 h-[--visual-viewport-height] w-full',\n        'flex items-end text-center sm:block',\n        '[--visual-viewport-vertical-padding:16px] sm:[--visual-viewport-vertical-padding:32px]'\n    ],\n    variants: {\n        isBlurred: {\n            true: 'backdrop-blur',\n            false: 'bg-dark/15 dark:bg-dark/40'\n        },\n        isEntering: {\n            true: 'ease-out animate-in fade-in'\n        },\n        isExiting: {\n            true: 'duration-200 ease-in animate-out fade-out'\n        }\n    }\n})\nconst modalContentStyles = tv({\n    base: [\n        'max-h-full w-full rounded-t-lg ring-1 ring-dark/5 bg-background text-foreground text-left align-middle shadow-lg',\n        'dark:ring-muted sm:rounded-lg overflow-hidden',\n        'sm:fixed sm:left-[50vw] sm:top-1/2 sm:-translate-x-1/2 sm:-translate-y-1/2'\n    ],\n    variants: {\n        isEntering: {\n            true: [\n                'animate-in ease-out duration-200 slide-in-from-bottom-[20%]',\n                'sm:slide-in-from-bottom-auto sm:slide-in-from-top-[80%] sm:slide-in-from-left-1/2'\n            ]\n        },\n        isExiting: {\n            true: [\n                'duration-200 ease-in animate-out slide-out-to-bottom-56',\n                'sm:exiting:slide-out-to-top-[80%] sm:slide-out-to-left-1/2'\n            ]\n        },\n        size: {\n            xs: 'sm:max-w-xs',\n            sm: 'sm:max-w-sm',\n            md: 'sm:max-w-md',\n            lg: 'sm:max-w-lg sm:has-[[role=alertdialog]]:max-w-lg sm:has-[[role=dialog]]:max-w-lg',\n            xl: 'sm:max-w-xl',\n            '2xl': 'sm:max-w-2xl',\n            '3xl': 'sm:max-w-3xl',\n            '4xl': 'sm:max-w-4xl',\n            '5xl': 'sm:max-w-5xl'\n        }\n    },\n    defaultVariants: {\n        size: 'lg'\n    }\n})\n\ntype ModalProps = DialogTriggerProps\nconst Modal = (props: ModalProps) => {\n    return <DialogTrigger {...props} />\n}\n\ninterface ModalContentProps\n    extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n        Omit<ModalOverlayProps, 'className'>,\n        VariantProps<typeof modalContentStyles> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    closeButton?: boolean\n    isBlurred?: boolean\n    classNames?: {\n        overlay?: ModalOverlayProps['className']\n        content?: ModalOverlayProps['className']\n    }\n}\n\nconst ModalContent = ({\n    classNames,\n    isDismissable = true,\n    isBlurred = false,\n    children,\n    size,\n    role,\n    closeButton = true,\n    ...props\n}: ModalContentProps) => {\n    const _isDismissable = role === 'alertdialog' ? false : isDismissable\n    return (\n        <ModalOverlayPrimitive\n            isDismissable={_isDismissable}\n            className={cr(classNames?.overlay, (className, renderProps) => {\n                return modalOverlayStyles({\n                    ...renderProps,\n                    isBlurred,\n                    className\n                })\n            })}\n            {...props}\n        >\n            <ModalPrimitive\n                className={cr(classNames?.content, (className, renderProps) =>\n                    modalContentStyles({\n                        ...renderProps,\n                        size,\n                        className\n                    })\n                )}\n                {...props}\n            >\n                {(values) => (\n                    <Dialog role={role}>\n                        {typeof children === 'function' ? children(values) : children}\n                        {closeButton && (\n                            <Dialog.CloseIndicator\n                                close={values.state.close}\n                                isDismissable={_isDismissable}\n                            />\n                        )}\n                    </Dialog>\n                )}\n            </ModalPrimitive>\n        </ModalOverlayPrimitive>\n    )\n}\n\nModal.Trigger = Dialog.Trigger\nModal.Header = Dialog.Header\nModal.Title = Dialog.Title\nModal.Description = Dialog.Description\nModal.Footer = Dialog.Footer\nModal.Body = Dialog.Body\nModal.Close = Dialog.Close\nModal.Content = ModalContent\n\nexport { Modal, modalContentStyles, modalOverlayStyles }\n"
  },
  "tree": {
    "component": "@/components/ui/tree",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconMinus } from 'hq-icons'\nimport type { ButtonProps, TreeItemProps, TreeProps } from 'react-aria-components'\nimport {\n    Button,\n    UNSTABLE_Tree as TreePrimitive,\n    UNSTABLE_TreeItem as TreeItemPrimitive,\n    UNSTABLE_TreeItemContent as TreeItemContent\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { cr } from './utils'\n\nconst treeStyles = tv({\n    base: 'flex border max-h-96 min-w-72 py-2 rounded-lg bg-background cursor-default lg:text-sm flex-col overflow-auto outline-none',\n    variants: {\n        isFocusVisible: {\n            true: 'outline-offset-[-1px] outline-2 outline-primary'\n        }\n    }\n})\n\nconst Tree = <T extends object>({ className, ...props }: TreeProps<T>) => {\n    return (\n        <TreePrimitive\n            className={cr(className, (className, renderProps) =>\n                treeStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            {...props}\n        >\n            {props.children}\n        </TreePrimitive>\n    )\n}\n\nconst itemStyles = tv({\n    base: [\n        '[&_[slot=chevron]_.indicator]:-rotate-90 outline-none [--padding:20px] p-[0.286rem_0.286rem_0.286rem_0.571rem] pl-[calc((var(--tree-item-level)-1)*20px+0.571rem+var(--padding))]',\n        '[&_[slot=chevron]]:outline-none [&_[slot=chevron]_svg]:text-muted-foreground',\n        'data-[has-child-rows]:[--padding:0px]'\n    ],\n    variants: {\n        isExpanded: {\n            true: '[&_[slot=chevron]_svg]:text-foreground [&_[slot=chevron]_.indicator]:rotate-0 [&_[slot=chevron]_svg]:transition'\n        },\n        isFocusVisible: {\n            true: '[&_[slot=chevron]_svg]:text-foreground focus:outline-none focus-visible:ring-1 focus-visible:ring-primary'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\nconst TreeItem = <T extends object>({ className, ...props }: TreeItemProps<T>) => {\n    return (\n        <TreeItemPrimitive\n            className={cr(className, (className, renderProps) =>\n                itemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            {...props}\n        >\n            {props.children}\n        </TreeItemPrimitive>\n    )\n}\n\nconst ItemContent = (props: React.ComponentProps<typeof TreeItemContent>) => (\n    <TreeItemContent {...props}>\n        <div className='flex items-center'>\n            <>{props.children as React.ReactNode}</>\n        </div>\n    </TreeItemContent>\n)\n\nconst Indicator = () => (\n    <Button className='shrink-0 relative' slot='chevron'>\n        <div className='ml-auto relative indicator flex items-center justify-center size-5'>\n            <IconMinus className='absolute size-3' />\n            <IconMinus className='absolute indicator size-3' />\n        </div>\n    </Button>\n)\n\nconst ItemCheckbox = () => <Checkbox slot='selection' />\n\nconst ItemLabel = (props: ButtonProps) => (\n    <Button\n        style={{ outline: 'none', display: 'flex', alignItems: 'center', gap: '0.5rem' }}\n        {...props}\n    />\n)\n\nTreeItem.Label = ItemLabel\nTreeItem.Indicator = Indicator\nTreeItem.Checkbox = ItemCheckbox\nTreeItem.Content = ItemContent\n\nexport { Tree, TreeItem }\n"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type {\n    DialogTriggerProps,\n    ModalOverlayProps,\n    PopoverProps as PopoverPrimitiveProps\n} from 'react-aria-components'\nimport {\n    type DialogProps,\n    DialogTrigger,\n    Modal,\n    ModalOverlay,\n    OverlayArrow,\n    PopoverContext,\n    Popover as PopoverPrimitive,\n    useSlottedContext\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\nimport { cn, cr, useMediaQuery } from './utils'\n\nconst Popover = ({ children, ...props }: DialogTriggerProps) => {\n    return <DialogTrigger {...props}>{children}</DialogTrigger>\n}\n\nconst Title = ({ level = 2, className, ...props }: React.ComponentProps<typeof Dialog.Title>) => (\n    <Dialog.Title\n        className={cn('sm:leading-none', level === 2 && 'sm:text-lg', className)}\n        {...props}\n    />\n)\n\nconst Header = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <Dialog.Header className={cn('p-0 sm:pt-0', className)} {...props} />\n)\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <Dialog.Footer className={cn('pb-0 pt-4 sm:pb-0', className)} {...props} />\n)\n\nconst Body = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <Dialog.Body className={cn('sm:p-0', className)} {...props} />\n)\n\nconst popoverContentStyles = tv({\n    base: [\n        'max-w-xs min-w-80 p-4 rounded-lg border bg-background bg-clip-padding text-foreground shadow-sm dark:backdrop-saturate-200 lg:text-sm sm:max-w-3xl forced-colors:bg-[Canvas]'\n    ],\n    variants: {\n        isMenu: {\n            true: {\n                true: 'p-0'\n            }\n        },\n        isEntering: {\n            true: [\n                'duration-50 ease-out animate-in fade-in placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n            ]\n        },\n        isExiting: {\n            true: 'duration-50 ease-in animate-out fade-out placement-left:slide-out-to-right-1 placement-right:slide-out-to-left-1 placement-top:slide-out-to-bottom-1 placement-bottom:slide-out-to-top-1'\n        }\n    }\n})\n\nconst drawerStyles = tv({\n    base: [\n        'fixed max-h-full bottom-0 top-auto z-50 w-full bg-background max-w-2xl border border-b-transparent outline-none'\n    ],\n    variants: {\n        isMenu: {\n            true: 'p-0 [&_[role=dialog]]:px-0 rounded-t-lg',\n            false: 'py-4 rounded-t-lg'\n        },\n        isEntering: {\n            true: [\n                '[will-change:transform] [transition:transform_0.5s_cubic-bezier(0.32,_0.72,_0,_1)]',\n                'animate-in duration-200 fade-in-0 slide-in-from-bottom-56',\n                '[transition:translate3d(0,_100%,_0)]',\n                'sm:slide-in-from-bottom-auto sm:slide-in-from-top-[20%]'\n            ]\n        },\n        isExiting: {\n            true: 'duration-200 ease-in animate-out slide-out-to-bottom-56'\n        }\n    }\n})\n\ninterface PopoverProps\n    extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n        Omit<PopoverPrimitiveProps, 'children' | 'className'>,\n        Omit<ModalOverlayProps, 'className'> {\n    children: React.ReactNode\n    showArrow?: boolean\n    style?: React.CSSProperties\n    respectScreen?: boolean\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    className?: string | ((values: { defaultClassName?: string }) => string)\n}\n\nconst Content = ({\n    respectScreen = true,\n    children,\n    showArrow = true,\n    className,\n    ...props\n}: PopoverProps) => {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n    const popoverContext = useSlottedContext(PopoverContext)!\n    const isMenuTrigger = popoverContext?.trigger === 'MenuTrigger'\n    const isSubmenuTrigger = popoverContext?.trigger === 'SubmenuTrigger'\n    const isMenu = isMenuTrigger || isSubmenuTrigger\n    const offset = showArrow ? 12 : 8\n    const effectiveOffset = isSubmenuTrigger ? offset - 5 : offset\n    return isMobile && respectScreen ? (\n        <ModalOverlay\n            className={twJoin(\n                'fixed left-0 top-0 isolate z-50 h-[--visual-viewport-height] w-full bg-background/10 [--visual-viewport-vertical-padding:16px]',\n                isSubmenuTrigger ? 'bg-background/10' : ''\n            )}\n            {...props}\n            isDismissable\n        >\n            <Modal\n                className={cr(className, (className, renderProps) =>\n                    drawerStyles({ ...renderProps, isMenu, className })\n                )}\n            >\n                <Dialog\n                    aria-label={isMenu ? 'Menu' : props['aria-label']}\n                    className='touch-none focus:outline-none'\n                >\n                    {children}\n                </Dialog>\n            </Modal>\n        </ModalOverlay>\n    ) : (\n        <PopoverPrimitive\n            offset={effectiveOffset}\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                popoverContentStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        >\n            {showArrow && (\n                <OverlayArrow className='group'>\n                    <svg\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className='block fill-background stroke-muted group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]'\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            {children}\n        </PopoverPrimitive>\n    )\n}\n\nconst Picker = ({ children, className, ...props }: PopoverProps) => {\n    return (\n        <PopoverPrimitive\n            {...props}\n            className={cr(\n                className as PopoverPrimitiveProps['className'],\n                (className, renderProps) =>\n                    popoverContentStyles({\n                        ...renderProps,\n                        className: cn(\n                            'max-h-72 min-w-[--trigger-width] overflow-y-auto p-0',\n                            className\n                        )\n                    })\n            )}\n        >\n            {children}\n        </PopoverPrimitive>\n    )\n}\n\nPopover.Primitive = PopoverPrimitive\nPopover.Trigger = Dialog.Trigger\nPopover.Close = Dialog.Close\nPopover.Content = Content\nPopover.Description = Dialog.Description\nPopover.Body = Body\nPopover.Footer = Footer\nPopover.Header = Header\nPopover.Picker = Picker\nPopover.Title = Title\n\nexport { drawerStyles, Popover, popoverContentStyles }\n"
  },
  "toggle": {
    "component": "@/components/ui/toggle",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    ToggleButton,\n    ToggleButtonGroup,\n    type ToggleButtonGroupProps,\n    type ToggleButtonProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cr } from './utils'\n\ninterface ToggleGroupContextProps {\n    variant?: 'solid' | 'outline' | 'ghost'\n}\n\nconst ToggleGroupContext = React.createContext<ToggleGroupContextProps>({\n    variant: 'solid'\n})\n\nconst toggleGroupStyles = tv({\n    base: ['flex gap-1'],\n    variants: {\n        orientation: {\n            horizontal:\n                'flex-row [&::-webkit-scrollbar]:hidden [scrollbar-width:none] [-ms-overflow-style:none]',\n            vertical: 'flex-col items-start'\n        }\n    }\n})\n\nconst ToggleGroup = ({\n    className,\n    orientation = 'horizontal',\n    variant = 'solid',\n    ...props\n}: ToggleButtonGroupProps & ToggleGroupContextProps) => {\n    return (\n        <ToggleGroupContext.Provider value={{ variant }}>\n            <ToggleButtonGroup\n                orientation={orientation}\n                className={cr(className, (className, renderProps) =>\n                    toggleGroupStyles({\n                        ...renderProps,\n                        orientation,\n                        className\n                    })\n                )}\n                {...props}\n            />\n        </ToggleGroupContext.Provider>\n    )\n}\n\nconst toggleStyles = tv({\n    base: [\n        'inline-flex btn gap-x-2 whitespace-nowrap relative items-center bg-transparent justify-center border text-sm font-medium ring-offset-background transition-colors hover:bg-muted',\n        'outline-0 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary'\n    ],\n    variants: {\n        isDisabled: {\n            true: 'opacity-50 cursor-default'\n        },\n        variant: {\n            solid: 'bg-white border-muted selected:border-primary hover:text-black text-black selected:bg-primary selected:text-primary-foreground',\n            outline:\n                'border-muted selected:bg-muted selected:backdrop-blur-sm hover:bg-muted hover:brightness-110',\n            ghost: 'border-transparent'\n        },\n        size: {\n            xs: 'h-8 px-2 text-xs',\n            sm: 'h-9 px-3 text-sm',\n            md: 'h-10 px-4 py-2 text-sm',\n            lg: 'h-10 sm:h-11 px-6 sm:px-8 text-base',\n            icon: 'size-10 shrink-0'\n        },\n        shape: {\n            square: 'rounded-lg',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'solid',\n        size: 'md',\n        shape: 'square'\n    }\n})\n\ntype ToggleProps = ToggleButtonProps & VariantProps<typeof toggleStyles>\n\nconst Toggle = ({ className, variant, ...props }: ToggleProps) => {\n    const { variant: groupVariant } = React.useContext(ToggleGroupContext)\n\n    return (\n        <ToggleButton\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                toggleStyles({\n                    ...renderProps,\n                    variant: variant ?? groupVariant,\n                    size: props.size,\n                    shape: props.shape,\n                    className\n                })\n            )}\n        />\n    )\n}\n\nToggle.Group = ToggleGroup\n\nexport { Toggle, toggleStyles, type ToggleProps }\n"
  },
  "command": {
    "component": "@/components/ui/command",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { IconSearch, IconX } from 'hq-icons'\nimport {\n    Button,\n    Dialog,\n    Modal,\n    ModalOverlay,\n    Text,\n    type ModalOverlayProps,\n    type SeparatorProps,\n    type TextProps\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Keyboard, type KeyboardProps } from './keyboard'\nimport { Separator } from './separator'\nimport { useMediaQuery } from './utils'\n\nconst commandStyles = tv({\n    slots: {\n        command: [\n            'flex h-svh w-full flex-col overflow-hidden rounded-lg sm:h-full',\n            '[&_[cmdk-group-heading]]:ml-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:-mb-1.5 [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_[data-slot=icon]]:size-5 [&_[cmdk-input]]:h-12',\n            '[&_[cmdk-item]]:py-2.5 [&_[cmdk-item]]:pl-2.5 [&_[cmdk-item]]:pr-4'\n        ],\n        list: 'overflow-y-auto lg:pb-0 max-h-[calc(100vh-35%)] pb-16 [&:not(:has(.xda32kfseccmd))]:p-2 [&:not(:has(.xda32kfseccmd))_.s3xsprt]:my-2 overflow-x-hidden md:max-h-[456px]',\n        input: [\n            'flex w-full rounded-lg forced-colors:focus:outline-0 bg-transparent text-base placeholder:text-muted-foreground',\n            'focus:outline-none',\n            'disabled:opacity-50 disabled:cursor-not-allowed'\n        ],\n        section: [\n            'xda32kfseccmd overflow-hidden py-2 px-2 text-foreground',\n            '[&_[cmdk-group-heading]]:select-none [&_[cmdk-group-heading]]:ml-[1px] [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-[0.8rem] [&_[cmdk-group-heading]]:text-muted-foreground'\n        ],\n        modal: [\n            'fixed bottom-0 left-[50%] top-auto z-50 grid h-[calc(100vh-35%)] w-full max-w-full translate-x-[-50%] gap-4 overflow-hidden rounded-t-lg bg-background text-foreground shadow-lg forced-colors:border ring-1 ring-dark/5 dark:ring-border sm:bottom-auto sm:top-[6rem] sm:h-auto sm:w-full sm:max-w-2xl sm:rounded-lg',\n            'sm:entering:slide-in-from-bottom-auto entering:duration-300 entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:slide-in-from-left-1/2 entering:[transition-timing-function:ease-out] sm:entering:duration-300 sm:entering:slide-in-from-top-[2rem]',\n            'exiting:duration-300 exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:slide-out-to-left-1/2 exiting:[transition-timing-function:ease] sm:exiting:slide-out-to-top-[4rem]'\n        ],\n        closeButton: [\n            'absolute right-3 top-1.5 [&>span>[data-slot=icon]]:text-muted-foreground pressed:[&_[data-slot=icon]]:text-foreground lg:top-3.5 rounded-lg border lg:border-border border-transparent lg:bg-muted/50 py-2.5 px-2.5 lg:py-0.5 text-xs transition-opacity data-[state=open]:bg-muted data-[state=open]:text-muted-foreground lg:focus:border-foreground/70 focus:outline-none lg:focus:ring-2 lg:focus:ring-ring disabled:pointer-events-none',\n            'focus:outline-none lg:focus:bg-primary/10 lg:focus:ring-2 lg:focus:ring-primary/20 lg:focus:border-primary/70',\n            'disabled:pointer-events-none'\n        ],\n        empty: 'py-6 text-center text-sm text-muted-foreground x3tmpy',\n        kbdKeyboard: 'lg:block hidden group-data-[selected=true]:opacity-60',\n        description: 'sm:inline hidden text-sm ml-auto',\n        item: [\n            'group relative flex forced-colors:outline-0 cursor-default select-none text-foreground items-center rounded-lg py-2 text-sm outline-none',\n            'data-[selected=true]:bg-primary forced-colors:data-[selected=true]:bg-[Highlight] forced-colors:data-[selected=true]:text-[ActiveCaption] forced-colors:text-[WindowText] data-[selected=true]:text-primary-foreground [&[data-selected=true]_[data-slot=icon]]:text-primary-foreground',\n            'focus-visible:bg-primary focus-visible:text-primary-foreground [&:focus-visible_[data-slot=icon]]:text-primary-foreground',\n            'data-[danger=true]:text-danger data-[danger=true]:data-[selected=true]:bg-danger data-[danger=true]:data-[selected=true]:text-danger-foreground',\n            'data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50',\n            '[&_[data-slot=icon]]:mr-2 [&_[data-slot=icon]]:size-[1.10rem] [&_[data-slot=icon]]:shrink-0 [&_[data-slot=icon]]:text-muted-foreground',\n            '[&_[data-slot=avatar]]:mr-2 [&_[data-slot=avatar]]:size-[1.10rem] [&_[data-slot=avatar]]:shrink-0',\n            'forced-colors:[&_[data-slot=icon]]:text-[CanvasText] forced-colors:[&_[data-slot=icon]]:group-data-[focus]:text-[Canvas] '\n        ]\n    },\n\n    variants: {\n        isDanger: {\n            true: 'text-danger data-[selected=true]:bg-danger data-[selected=true]:text-danger-foreground [&[data-selected=true]_[data-slot=icon]]:text-danger-foreground'\n        }\n    }\n})\n\nconst { command, empty, section, list, item, closeButton, modal, input, kbdKeyboard, description } =\n    commandStyles()\n\ninterface CommandContextProps {\n    hideSearchIndicator?: boolean\n    hideCloseButton?: boolean\n    messageOnEmpty?: boolean | string\n    isBlurred?: boolean\n}\n\nconst CommandContext = React.createContext<CommandContextProps>({})\n\ninterface CommandRootProps {\n    CommandEmpty?: typeof CommandEmpty\n    CommandInput?: typeof CommandInput\n    CommandItem?: typeof CommandItem\n    CommandKeyboard?: typeof CommandKeyboard\n    CommandList?: typeof CommandList\n    CommandSection?: typeof CommandSection\n    CommandSeparator?: typeof CommandSeparator\n    CommandDescription?: typeof CommandDescription\n}\n\nconst modalOverlay = tv({\n    base: [\n        'fixed inset-0 max-h-[--visual-viewport-height] z-50 bg-dark/15 dark:bg-dark/40 entering:animate-in entering:fade-in-0 exiting:animate-in exiting:fade-out-0'\n    ],\n    variants: {\n        isBlurred: {\n            true: 'backdrop-blur',\n            false: 'bg-dark/15 dark:bg-dark/40'\n        }\n    }\n})\ninterface CommandProps extends ModalOverlayProps, CommandRootProps, CommandContextProps {\n    children: React.ReactNode\n    value?: string\n    messageOnEmpty?: boolean | string\n    onValueChange?: (value: string) => void\n    classNames?: {\n        overlay?: string\n        content?: string\n    }\n}\n\nconst Command = ({\n    classNames,\n    hideSearchIndicator = false,\n    hideCloseButton = false,\n    messageOnEmpty,\n    value,\n    onValueChange,\n    children,\n    isBlurred = false,\n    ...props\n}: CommandProps) => {\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n\n    return (\n        <CommandContext.Provider value={{ hideSearchIndicator, hideCloseButton, messageOnEmpty }}>\n            <ModalOverlay\n                isDismissable\n                className={modalOverlay({\n                    isBlurred,\n                    className: classNames?.overlay\n                })}\n                {...props}\n            >\n                <Modal className={modal({ className: classNames?.content })}>\n                    <Dialog className='outline-none' aria-label='Command Palette'>\n                        {({ close }) => (\n                            <>\n                                <CommandPrimitive\n                                    value={value}\n                                    onValueChange={onValueChange}\n                                    className={command()}\n                                >\n                                    {children}\n                                </CommandPrimitive>\n                                {!hideCloseButton && (\n                                    <Button\n                                        autoFocus={!isDesktop}\n                                        onPress={close}\n                                        className={closeButton()}\n                                    >\n                                        <span className='lg:block hidden'>Esc</span>\n                                        <span className='lg:hidden -mr-2 block'>\n                                            <IconX />\n                                            <span className='sr-only'>Close command palette</span>\n                                        </span>\n                                    </Button>\n                                )}\n                            </>\n                        )}\n                    </Dialog>\n                </Modal>\n            </ModalOverlay>\n        </CommandContext.Provider>\n    )\n}\n\ntype CommandInputProps = React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n\nconst CommandInput = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive.Input>,\n    CommandInputProps\n>(({ className, ...props }, ref) => {\n    const { hideSearchIndicator } = React.useContext(CommandContext)\n    return (\n        <div className='flex border-b items-center px-3'>\n            {!hideSearchIndicator && <IconSearch className='mr-2 size-5 shrink-0 opacity-50' />}\n            <CommandPrimitive.Input\n                autoFocus\n                ref={ref}\n                className={input({ className: hideSearchIndicator ? 'pl-1' : className })}\n                {...props}\n            />\n        </div>\n    )\n})\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\ntype CommandListProps = React.ComponentProps<typeof CommandPrimitive.List>\n\nconst CommandList = ({ className, ...props }: CommandListProps) => {\n    const { messageOnEmpty } = React.useContext(CommandContext)\n    return (\n        <CommandPrimitive.List className={list({ className })} {...props}>\n            {messageOnEmpty !== false && (\n                <CommandEmpty>\n                    {typeof messageOnEmpty === 'string' ? messageOnEmpty : 'No results found.'}\n                </CommandEmpty>\n            )}\n            {props.children}\n        </CommandPrimitive.List>\n    )\n}\n\ntype CommandEmptyProps = React.ComponentProps<typeof CommandPrimitive.Empty>\n\nconst CommandEmpty = ({ className, ...props }: CommandEmptyProps) => {\n    return <CommandPrimitive.Empty className={empty({ className })} {...props} />\n}\n\ninterface CommandSectionProps extends React.ComponentProps<typeof CommandPrimitive.Group> {\n    separator?: boolean\n}\n\nconst CommandSection = ({ className, separator, ...props }: CommandSectionProps) => {\n    return (\n        <>\n            <CommandPrimitive.Group className={section({ className })} {...props}>\n                {props.children}\n                {separator && <CommandSeparator className='mt-2' />}\n            </CommandPrimitive.Group>\n        </>\n    )\n}\n\nconst CommandSeparator = ({ className, ...props }: SeparatorProps) => {\n    return (\n        <div className='-mx-4 s3xsprt'>\n            <Separator className={className} {...props} orientation='horizontal' />\n        </div>\n    )\n}\n\ninterface CommandItemProps extends React.ComponentProps<typeof CommandPrimitive.Item> {\n    isDanger?: boolean\n}\n\nconst CommandItem = ({ isDanger, className, ...props }: CommandItemProps) => {\n    return (\n        <CommandPrimitive.Item\n            data-danger={isDanger ? 'true' : undefined}\n            className={item({ isDanger, className })}\n            {...props}\n        />\n    )\n}\n\ninterface CommandDescriptionProps extends TextProps {\n    intent?: 'danger' | 'warning' | 'primary' | 'secondary' | 'success'\n}\n\nconst CommandDescription = ({ intent, className, ...props }: CommandDescriptionProps) => {\n    return (\n        <Text\n            {...props}\n            slot='description'\n            className={description({\n                className: twJoin(\n                    intent === 'danger'\n                        ? 'group-data-[selected=true]:text-primary-foreground/70 text-danger/90'\n                        : intent === 'warning'\n                          ? 'group-data-[selected=true]:text-primary-foreground/70 text-warning/90'\n                          : intent === 'success'\n                            ? 'group-data-[selected=true]:text-primary-foreground/70 text-success/90'\n                            : intent === 'primary'\n                              ? 'group-data-[selected=true]:text-white/70 text-primary/90'\n                              : 'group-data-[selected=true]:text-primary-foreground/70 text-muted-foreground',\n                    className\n                )\n            })}\n        />\n    )\n}\n\nconst CommandKeyboard = (props: KeyboardProps) => (\n    <Keyboard classNames={{ kbd: kbdKeyboard(), base: '-mr-2.5' }} {...props} />\n)\n\nCommand.Empty = CommandEmpty\nCommand.Input = CommandInput\nCommand.Item = CommandItem\nCommand.Keyboard = CommandKeyboard\nCommand.List = CommandList\nCommand.Section = CommandSection\nCommand.Separator = CommandSeparator\nCommand.Description = CommandDescription\n\nexport { Command }\n"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown, IconX } from 'hq-icons'\nimport {\n    ComboBox as ComboboxPrimitive,\n    type ComboBoxProps as ComboboxPrimitiveProps,\n    ComboBoxStateContext,\n    type ValidationResult\n} from 'react-aria-components'\n\nimport { Button } from './button'\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport { cn } from './utils'\n\ninterface ComboBoxProps<T extends object> extends Omit<ComboboxPrimitiveProps<T>, 'children'> {\n    label?: string\n    placeholder?: string\n    description?: string | null\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    portal?: Element\n}\n\nconst ComboBox = <T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    placeholder,\n    className,\n    items,\n    ...props\n}: ComboBoxProps<T>) => {\n    return (\n        <ComboboxPrimitive\n            menuTrigger='focus'\n            {...props}\n            className={cn('group w-full flex flex-col gap-1', className)}\n        >\n            <Label>{label}</Label>\n            <FieldGroup className='pl-0 relative'>\n                <Input className='pl-2.5' placeholder={placeholder} />\n                <Button\n                    size='icon'\n                    variant='ghost'\n                    className='size-7 rounded-lg outline-offset-0 text-muted-foreground active:bg-transparent hover:bg-transparent pressed:bg-transparent'\n                >\n                    {!props?.inputValue && (\n                        <IconChevronDown\n                            aria-hidden\n                            className='text-muted-foreground transition group-open:rotate-180 group-open:text-foreground'\n                        />\n                    )}\n                </Button>\n                {props?.inputValue && <ComboBoxClearButton />}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Picker UNSTABLE_portalContainer={props.portal}>\n                <ListBox.Picker items={items}>{children}</ListBox.Picker>\n            </Popover.Picker>\n        </ComboboxPrimitive>\n    )\n}\n\nconst ComboBoxClearButton = () => {\n    const state = React.useContext(ComboBoxStateContext)\n\n    return (\n        <Button\n            className='focus:outline-none absolute inset-y-0 right-0 flex items-center pr-2 text-muted-foreground hover:text-foreground'\n            slot={null}\n            aria-label='Clear'\n            onPress={() => {\n                state?.setSelectedKey(null)\n                state?.open()\n            }}\n        >\n            <IconX className='size-4' />\n        </Button>\n    )\n}\n\nconst ComboBoxItem = DropdownItem\nconst ComboBoxSection = DropdownSection\n\nComboBox.Item = ComboBoxItem\nComboBox.Section = ComboBoxSection\n\nexport { ComboBox, type ComboBoxProps }\n"
  },
  "range-calendar": {
    "component": "@/components/ui/range-calendar",
    "raw": "'use client'\n\nimport type {\n    DateValue,\n    RangeCalendarProps as RangeCalendarPrimitiveProps\n} from 'react-aria-components'\nimport {\n    CalendarCell,\n    CalendarGrid,\n    CalendarGridBody,\n    RangeCalendar as RangeCalendarPrimitive,\n    Text\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Calendar } from './calendar'\nimport { ctr, focusRing } from './utils'\n\nconst cellRangeStyles = tv({\n    extend: focusRing,\n    base: 'flex h-full w-full items-center tabular-nums justify-center rounded-lg forced-color-adjust-none',\n    variants: {\n        selectionState: {\n            none: 'group-hover:bg-muted-foreground/15 group-pressed:bg-muted-foreground/20 forced-colors:group-pressed:bg-[Highlight]',\n            middle: [\n                'group-hover:bg-primary/20 forced-colors:group-hover:bg-[Highlight]',\n                'group-invalid:group-hover:bg-red-200 group-invalid:text-red-500 dark:group-invalid:group-hover:bg-red-900 forced-colors:group-invalid:group-hover:bg-[Mark]',\n                'group-pressed:bg-primary forced-colors:text-[HighlightText] forced-colors:group-pressed:bg-[Highlight]',\n                'group-invalid:group-pressed:bg-red-300 dark:group-invalid:group-pressed:bg-red-800 forced-colors:group-invalid:group-pressed:bg-[Mark]'\n            ],\n            cap: 'bg-primary text-primary-foreground group-invalid:bg-danger group-invalid:text-danger-foreground forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] forced-colors:group-invalid:bg-[Mark]'\n        },\n        isDisabled: {\n            true: 'text-muted-foreground/70 forced-colors:text-[GrayText]'\n        }\n    }\n})\n\ninterface RangeCalendarProps<T extends DateValue>\n    extends Omit<RangeCalendarPrimitiveProps<T>, 'visibleDuration'> {\n    errorMessage?: string\n}\n\nconst RangeCalendar = <T extends DateValue>({\n    errorMessage,\n    className,\n    ...props\n}: RangeCalendarProps<T>) => {\n    return (\n        <RangeCalendarPrimitive\n            className={ctr(className, 'max-w-[17.5rem] sm:max-w-[15.8rem]')}\n            {...props}\n        >\n            <Calendar.Header />\n            <CalendarGrid className='[&_td]:border-collapse [&_td]:px-0'>\n                <Calendar.GridHeader />\n                <CalendarGridBody>\n                    {(date) => (\n                        <CalendarCell\n                            date={date}\n                            className={twJoin([\n                                'group size-10 lg:size-9 cursor-default lg:text-sm outline outline-0 outside-month:text-zinc-300 selection-start:rounded-s-lg selection-end:rounded-e-lg forced-colors:selected:bg-[Highlight] forced-colors:invalid:selected:bg-[Mark]',\n                                'selected:bg-primary/10 dark:selected:bg-primary/15 selected:text-primary forced-colors:selected:text-[HighlightText]',\n                                '[td:first-child_&]:rounded-s-lg [td:last-child_&]:rounded-e-lg',\n                                'invalid:selected:bg-red-100 dark:invalid:selected:bg-red-700/30'\n                            ])}\n                        >\n                            {({\n                                formattedDate,\n                                isSelected,\n                                isSelectionStart,\n                                isSelectionEnd,\n                                ...renderProps\n                            }) => (\n                                <span\n                                    className={cellRangeStyles({\n                                        ...renderProps,\n                                        selectionState:\n                                            isSelected && (isSelectionStart || isSelectionEnd)\n                                                ? 'cap'\n                                                : isSelected\n                                                  ? 'middle'\n                                                  : 'none'\n                                    })}\n                                >\n                                    {formattedDate}\n                                </span>\n                            )}\n                        </CalendarCell>\n                    )}\n                </CalendarGridBody>\n            </CalendarGrid>\n            {errorMessage && (\n                <Text slot='errorMessage' className='text-sm text-danger'>\n                    {errorMessage}\n                </Text>\n            )}\n        </RangeCalendarPrimitive>\n    )\n}\n\nexport { RangeCalendar }\n"
  },
  "color-swatch-picker": {
    "component": "@/components/ui/color-swatch-picker",
    "raw": "'use client'\n\nimport {\n    ColorSwatchPickerItem,\n    ColorSwatchPicker as ColorSwatchPickerPrimitive,\n    type ColorSwatchPickerItemProps,\n    type ColorSwatchPickerProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { ColorSwatch } from './color-swatch'\nimport { ctr, focusRing } from './utils'\n\nconst ColorSwatchPicker = ({\n    children,\n    className,\n    layout = 'grid',\n    ...props\n}: ColorSwatchPickerProps) => {\n    return (\n        <ColorSwatchPickerPrimitive\n            layout={layout}\n            {...props}\n            className={ctr(className, 'flex gap-1')}\n        >\n            {children}\n        </ColorSwatchPickerPrimitive>\n    )\n}\n\nconst itemStyles = tv({\n    extend: focusRing,\n    base: 'relative rounded-lg disabled:opacity-50'\n})\n\nconst SwatchPickerItem = (props: ColorSwatchPickerItemProps) => {\n    return (\n        <ColorSwatchPickerItem {...props} className={itemStyles}>\n            {({ isSelected }) => (\n                <>\n                    <ColorSwatch />\n                    {isSelected && (\n                        <div className='absolute top-0 left-0 w-full h-full ring-1 ring-foreground/30 outline-none rounded-[calc(var(--radius)-3.9px)] ring-inset forced-color-adjust-none' />\n                    )}\n                </>\n            )}\n        </ColorSwatchPickerItem>\n    )\n}\n\nColorSwatchPicker.Item = SwatchPickerItem\n\nexport { ColorSwatchPicker }\n"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport { IconSearch, IconX } from 'hq-icons'\nimport {\n    SearchField as SearchFieldPrimitive,\n    type SearchFieldProps as SearchFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { Loader } from './loader'\nimport { ctr } from './utils'\n\nconst searchFieldStyles = tv({\n    slots: {\n        base: 'group flex min-w-10 flex-col gap-y-1.5',\n        searchIcon:\n            'ml-2.5 size-4 shrink-0 text-muted-foreground group-disabled:text-muted-foreground forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]',\n        clearButton: [\n            'mr-1 size-8 text-muted-foreground group-empty:invisible pressed:bg-transparent hover:bg-transparent hover:text-foreground pressed:text-foreground'\n        ],\n        input: '[&::-webkit-search-cancel-button]:hidden'\n    }\n})\n\nconst { base, searchIcon, clearButton, input } = searchFieldStyles()\n\ninterface SearchFieldProps extends SearchFieldPrimitiveProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    isPending?: boolean\n}\n\nconst SearchField = ({\n    className,\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    isPending,\n    ...props\n}: SearchFieldProps) => {\n    return (\n        <SearchFieldPrimitive\n            aria-label={placeholder ?? props['aria-label'] ?? 'Search...'}\n            {...props}\n            className={ctr(className, base())}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                <IconSearch aria-hidden className={searchIcon()} />\n                <Input placeholder={placeholder ?? 'Search...'} className={input()} />\n                {isPending ? (\n                    <Loader variant='spin' className='mr-2.5' />\n                ) : (\n                    <Button size='icon' variant='ghost' className={clearButton()}>\n                        <IconX aria-hidden />\n                    </Button>\n                )}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </SearchFieldPrimitive>\n    )\n}\n\nexport { SearchField, type SearchFieldProps }\n"
  },
  "dropdown": {
    "component": "@/components/ui/dropdown",
    "raw": "'use client'\n\nimport { IconCheck } from 'hq-icons'\nimport {\n    Collection,\n    Header,\n    ListBoxItem as ListBoxItemPrimitive,\n    type ListBoxItemProps,\n    ListBoxSection,\n    type ListBoxSectionProps,\n    Text,\n    type TextProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn, cr } from './utils'\n\nconst dropdownItemStyles = tv({\n    base: [\n        'group flex cursor-default select-none items-center gap-x-1.5 rounded-[calc(var(--radius)-1px)] py-2 pl-2.5 relative pr-1.5 text-base outline outline-0 forced-color-adjust-none lg:text-sm',\n        'has-submenu:open:data-[danger=true]:bg-danger/20 has-submenu:open:data-[danger=true]:text-danger',\n        'has-submenu:open:bg-primary has-submenu:open:text-primary-foreground [&[data-has-submenu][data-open]>[data-slot=icon]]:text-primary-foreground',\n        '[&_[data-slot=avatar]]:-mr-0.5 [&_[data-slot=avatar]]:size-6 sm:[&_[data-slot=avatar]]:size-5',\n        '[&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0 [&>[data-slot=icon]]:text-muted-foreground [&[data-hovered]>[data-slot=icon]]:text-primary-foreground [&[data-focused]>[data-slot=icon]]:text-primary-foreground [&[data-danger]>[data-slot=icon]]:text-danger/60'\n    ],\n    variants: {\n        isDisabled: {\n            false: 'text-foreground',\n            true: 'text-muted-foreground forced-colors:text-[GrayText]'\n        },\n        isFocused: {\n            false: 'data-[danger=true]:text-danger',\n            true: [\n                'bg-primary text-primary-foreground forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]',\n                'data-[danger=true]:bg-danger data-[danger=true]:text-danger-foreground',\n                '[&_.text-muted-foreground]:text-primary-foreground/80 [&[data-slot=label]]:text-primary-foreground [&[data-slot=description]]:text-primary-foreground'\n            ]\n        }\n    },\n    compoundVariants: [\n        {\n            isFocused: false,\n            isOpen: true,\n            className: 'bg-muted'\n        }\n    ]\n})\n\nconst dropdownSectionStyles = tv({\n    slots: {\n        section:\n            \"-mt-[5px] pb-0.5 xss3 flex flex-col gap-y-0.5 after:content-[''] after:block after:h-[5px]\",\n        header: 'text-sm d-head font-medium text-muted-foreground bg-background px-4 py-2 truncate min-w-[--trigger-width] sticky -top-[5px] backdrop-blur -mt-px -mb-0.5 -mx-1 z-10 supports-[-moz-appearance:none]:bg-background border-y [&+*]:mt-1'\n    }\n})\n\nconst { section, header } = dropdownSectionStyles()\n\ninterface DropdownSectionProps<T> extends ListBoxSectionProps<T> {\n    title?: string\n}\n\nconst DropdownSection = <T extends object>({ className, ...props }: DropdownSectionProps<T>) => {\n    return (\n        <ListBoxSection className={section({ className })}>\n            {'title' in props && <Header className={header()}>{props.title}</Header>}\n            <Collection items={props.items}>{props.children}</Collection>\n        </ListBoxSection>\n    )\n}\n\nconst DropdownItem = ({ className, ...props }: ListBoxItemProps) => {\n    const textValue =\n        props.textValue || (typeof props.children === 'string' ? props.children : undefined)\n    return (\n        <ListBoxItemPrimitive\n            textValue={textValue}\n            className={cr(className, (className, renderProps) =>\n                dropdownItemStyles({ ...renderProps, className })\n            )}\n            {...props}\n        >\n            {cr(props.children, (children, { isSelected }) => (\n                <>\n                    <span className='flex flex-1 items-center gap-2 truncate font-normal group-selected:font-medium'>\n                        {children}\n                    </span>\n\n                    {isSelected && (\n                        <span className='absolute right-2 top-3 lg:top-2.5'>\n                            <IconCheck />\n                        </span>\n                    )}\n                </>\n            ))}\n        </ListBoxItemPrimitive>\n    )\n}\n\ninterface DropdownItemSlot extends TextProps {\n    label?: TextProps['children']\n    description?: TextProps['children']\n    classNames?: {\n        label?: TextProps['className']\n        description?: TextProps['className']\n    }\n}\n\nconst DropdownItemDetails = ({ label, description, classNames, ...props }: DropdownItemSlot) => {\n    const { slot, children, title, ...restProps } = props\n\n    return (\n        <div className='flex flex-col gap-y-1' {...restProps}>\n            {label && (\n                <Text\n                    slot={slot ?? 'label'}\n                    className={cn('font-medium lg:text-sm', classNames?.label)}\n                    {...restProps}\n                >\n                    {label}\n                </Text>\n            )}\n            {description && (\n                <Text\n                    slot={slot ?? 'description'}\n                    className={cn('text-muted-foreground text-xs', classNames?.description)}\n                    {...restProps}\n                >\n                    {description}\n                </Text>\n            )}\n            {!title && children}\n        </div>\n    )\n}\n\nexport {\n    DropdownItem,\n    DropdownItemDetails,\n    dropdownItemStyles,\n    DropdownSection,\n    dropdownSectionStyles\n}\n"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport { motion } from 'framer-motion'\nimport { IconTriangleAlert } from 'hq-icons'\nimport {\n    Meter as MeterPrimitive,\n    type MeterProps as MeterPrimitiveProps\n} from 'react-aria-components'\n\nimport { Label } from './field'\nimport { ctr } from './utils'\n\nexport interface MeterProps extends MeterPrimitiveProps {\n    label?: string\n}\n\nconst Meter = ({ label, ...props }: MeterProps) => {\n    return (\n        <MeterPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n            {({ percentage, valueText }) => (\n                <>\n                    <div className='flex w-full justify-between gap-2'>\n                        <Label>{label}</Label>\n                        <span\n                            className={`text-sm tabular-nums ${percentage >= 80 ? 'text-danger' : 'text-muted-foreground'}`}\n                        >\n                            {percentage >= 80 && (\n                                <IconTriangleAlert\n                                    aria-label='Alert'\n                                    className='inline-block fill-danger/20 text-danger size-4 align-text-bottom'\n                                />\n                            )}\n                            {' ' + valueText}\n                        </span>\n                    </div>\n                    <div className='relative h-2 min-w-64 rounded-lg bg-muted outline outline-1 -outline-offset-1 outline-transparent'>\n                        <motion.div\n                            className='absolute left-0 top-0 h-full rounded-lg forced-colors:bg-[Highlight]'\n                            initial={{ width: '0%', backgroundColor: getColor(0) }}\n                            animate={{\n                                width: `${percentage}%`,\n                                backgroundColor: getColor(percentage)\n                            }}\n                            transition={{ duration: 0.5 }}\n                        />\n                    </div>\n                </>\n            )}\n        </MeterPrimitive>\n    )\n}\nconst getColor = (percentage: number) => {\n    if (percentage < 30) {\n        return 'hsl(var(--primary))' // Blue\n    }\n\n    if (percentage < 50) {\n        return 'hsl(var(--success))' // Green\n    }\n\n    if (percentage < 70) {\n        return 'hsl(var(--info))' // Yellow\n    }\n\n    if (percentage < 80) {\n        return 'hsl(var(--warning))' // Orange\n    }\n\n    return 'hsl(var(--danger))' // Red\n}\n\nexport { Meter }\n"
  },
  "heading": {
    "component": "@/components/ui/heading",
    "raw": "import React from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nconst headingStyles = tv({\n    base: 'font-sans tracking-tight text-foreground',\n    variants: {\n        level: {\n            1: 'font-bold text-xl sm:text-2xl',\n            2: 'font-semibold text-lg sm:text-xl',\n            3: 'font-semibold text-base sm:text-lg',\n            4: 'font-semibold text-base'\n        },\n        tracking: {\n            tighter: 'tracking-tighter',\n            tight: 'tracking-tight',\n            normal: 'tracking-normal',\n            wide: 'tracking-wide',\n            wider: 'tracking-wider',\n            widest: 'tracking-widest'\n        }\n    }\n})\n\ntype HeadingType = { level?: 1 | 2 | 3 | 4 } & React.ComponentPropsWithoutRef<\n    'h1' | 'h2' | 'h3' | 'h4'\n>\n\ninterface HeadingProps extends HeadingType {\n    tracking?: 'tighter' | 'tight' | 'normal' | 'wide' | 'wider' | 'widest'\n    className?: string | undefined\n}\n\nconst Heading = ({ className, tracking = 'normal', level = 1, ...props }: HeadingProps) => {\n    const Element: `h${typeof level}` = `h${level}`\n    return (\n        <Element\n            className={headingStyles({\n                level,\n                tracking,\n                className\n            })}\n            {...props}\n        />\n    )\n}\n\nexport { Heading }\n"
  },
  "otp": {
    "component": "@/components/ui/otp",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconDot } from 'hq-icons'\nimport { OTPInput, OTPInputContext } from 'input-otp'\n\nimport { cn } from './utils'\n\ninterface OTPType\n    extends React.ForwardRefExoticComponent<\n        React.ComponentPropsWithoutRef<typeof OTPInput> & React.RefAttributes<HTMLInputElement>\n    > {\n    Group: typeof OTPGroup\n    Slot: typeof OTPSlot\n    Separator: typeof OTPSeparator\n}\n\nconst OTP = React.forwardRef<\n    React.ElementRef<typeof OTPInput>,\n    React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n    <OTPInput\n        data-1p-ignore\n        ref={ref}\n        containerClassName={cn(\n            'flex items-center gap-2 has-[:disabled]:opacity-50',\n            containerClassName\n        )}\n        className={cn('disabled:cursor-not-allowed', className)}\n        {...props}\n    />\n)) as OTPType\nOTP.displayName = 'OTP'\n\nconst OTPGroup = React.forwardRef<React.ElementRef<'div'>, React.ComponentPropsWithoutRef<'div'>>(\n    ({ className, ...props }, ref) => (\n        <div ref={ref} className={cn('flex items-center gap-x-1.5', className)} {...props} />\n    )\n)\nOTPGroup.displayName = 'OTPGroup'\n\nconst OTPSlot = React.forwardRef<\n    React.ElementRef<'div'>,\n    React.ComponentPropsWithoutRef<'div'> & { index: number }\n>(({ index, className, ...props }, ref) => {\n    const inputOTPContext = React.useContext(OTPInputContext)\n    const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'relative flex tabular-nums size-10 items-center justify-center rounded-lg border border-muted text-sm transition-all',\n                isActive && 'z-10 border-primary/70 ring-4 ring-primary/20',\n                className\n            )}\n            {...props}\n        >\n            {char}\n            {hasFakeCaret && (\n                <div className='pointer-events-none absolute inset-0 flex items-center justify-center'>\n                    <div className='h-4 w-px animate-caret-blink bg-foreground duration-1000' />\n                </div>\n            )}\n        </div>\n    )\n})\nOTPSlot.displayName = 'OTPSlot'\n\nconst OTPSeparator = React.forwardRef<\n    React.ElementRef<'div'>,\n    React.ComponentPropsWithoutRef<'div'>\n>(({ ...props }, ref) => (\n    <div ref={ref} role='separator' {...props}>\n        <IconDot className='size-2' />\n    </div>\n))\nOTPSeparator.displayName = 'OTPSeparator'\n\nOTP.Group = OTPGroup\nOTP.Slot = OTPSlot\nOTP.Separator = OTPSeparator\n\nexport { OTP }\n"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown, IconMenu } from 'hq-icons'\nimport {\n    Button,\n    Cell,\n    type CellProps,\n    Collection,\n    Column,\n    type ColumnProps,\n    ColumnResizer as ColumnResizerPrimitive,\n    type ColumnResizerProps,\n    ResizableTableContainer,\n    Row,\n    type RowProps,\n    TableBody,\n    type TableBodyProps,\n    TableHeader,\n    type TableHeaderProps,\n    Table as TablePrimitive,\n    type TableProps as TablePrimitiveProps,\n    useTableOptions\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { cn } from './utils'\n\ninterface TableProps extends TablePrimitiveProps {\n    className?: string\n    allowResize?: boolean\n}\n\nconst TableContext = React.createContext<TableProps>({\n    allowResize: false\n})\n\nconst useTableContext = () => React.useContext(TableContext)\n\nconst Table = ({ children, className, ...props }: TableProps) => (\n    <TableContext.Provider value={props}>\n        <div className='relative w-full overflow-auto'>\n            {props.allowResize ? (\n                <ResizableTableContainer className='overflow-auto'>\n                    <TablePrimitive\n                        {...props}\n                        className={cn(\n                            'table [&_[data-drop-target]]:border [&_[data-drop-target]]:border-primary w-full caption-bottom border-spacing-0 text-sm outline-none',\n                            className\n                        )}\n                    >\n                        {children}\n                    </TablePrimitive>\n                </ResizableTableContainer>\n            ) : (\n                <TablePrimitive\n                    {...props}\n                    className={cn(\n                        'table [&_[data-drop-target]]:border [&_[data-drop-target]]:border-primary w-full caption-bottom border-spacing-0 text-sm outline-none',\n                        className\n                    )}\n                >\n                    {children}\n                </TablePrimitive>\n            )}\n        </div>\n    </TableContext.Provider>\n)\n\nconst ColumnResizer = ({ className, ...props }: ColumnResizerProps) => (\n    <ColumnResizerPrimitive\n        {...props}\n        className={cn(\n            'touch-none absolute [&[data-resizing]>div]:bg-primary right-0 top-0 bottom-0 w-px px-1 grid place-content-center [&[data-resizable-direction=both]]:cursor-ew-resize &[data-resizable-direction=left]:cursor-e-resize &[data-resizable-direction=right]:cursor-w-resize',\n            className\n        )}\n    >\n        <div className='bg-muted h-full w-px py-3' />\n    </ColumnResizerPrimitive>\n)\n\nconst Body = <T extends object>(props: TableBodyProps<T>) => (\n    <TableBody {...props} className={cn('[&_.tr:last-child]:border-0')} />\n)\n\ninterface TableCellProps extends CellProps {\n    className?: string\n}\n\nconst cellStyles = tv({\n    base: 'whitespace-nowrap group px-3 py-3 outline-none',\n    variants: {\n        allowResize: {\n            true: 'overflow-hidden truncate'\n        }\n    }\n})\nconst TableCell = ({ children, className, ...props }: TableCellProps) => {\n    const { allowResize } = useTableContext()\n    return (\n        <Cell {...props} className={cellStyles({ allowResize, className })}>\n            {children}\n        </Cell>\n    )\n}\n\nconst columnStyles = tv({\n    base: 'whitespace-nowrap relative allows-sorting:cursor-pointer px-3 py-3 text-left dragging:cursor-grabbing font-medium outline-none [&:has([slot=selection])]:pr-0',\n    variants: {\n        isResizable: {\n            true: 'overflow-hidden truncate'\n        }\n    }\n})\n\ninterface TableColumnProps extends ColumnProps {\n    className?: string\n    isResizable?: boolean\n}\n\nconst TableColumn = ({ children, isResizable = false, className, ...props }: TableColumnProps) => {\n    return (\n        <Column\n            {...props}\n            className={columnStyles({\n                isResizable,\n                className\n            })}\n        >\n            {({ allowsSorting, sortDirection, isHovered }) => (\n                <div className='flex [&_svg]:shrink-0 items-center gap-2'>\n                    <>\n                        {children as React.ReactNode}\n                        {allowsSorting && (\n                            <>\n                                <span\n                                    className={cn(\n                                        'flex-none rounded-lg transition bg-transparent text-foreground [&>svg]:shrink-0 [&>svg]:size-3.5 [&>svg]:transition-transform size-[1.15rem] grid place-content-center shrink-0',\n                                        isHovered && 'bg-muted',\n                                        className\n                                    )}\n                                >\n                                    <IconChevronDown\n                                        className={\n                                            sortDirection === 'ascending' ? 'rotate-180' : ''\n                                        }\n                                    />\n                                </span>\n                            </>\n                        )}\n                        {isResizable && <ColumnResizer />}\n                    </>\n                </div>\n            )}\n        </Column>\n    )\n}\n\ninterface HeaderProps<T extends object> extends TableHeaderProps<T> {\n    className?: string\n}\n\nconst Header = <T extends object>({ children, className, columns, ...props }: HeaderProps<T>) => {\n    const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n    return (\n        <TableHeader {...props} className={cn('border-b', className)}>\n            {allowsDragging && <Column className='w-0' />}\n            {selectionBehavior === 'toggle' && (\n                <Column className='pl-4 w-0'>\n                    {selectionMode === 'multiple' && <Checkbox slot='selection' />}\n                </Column>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </TableHeader>\n    )\n}\n\ninterface TableRowProps<T extends object> extends RowProps<T> {\n    className?: string\n}\n\nconst TableRow = <T extends object>({\n    children,\n    className,\n    columns,\n    id,\n    ...props\n}: TableRowProps<T>) => {\n    const { selectionBehavior, allowsDragging } = useTableOptions()\n    return (\n        <Row\n            id={id}\n            {...props}\n            className={cn(\n                'tr group relative cursor-default border-b text-foreground/70 outline-none ring-primary focus-visible:ring-1 selected:bg-primary/20 selected:hover:bg-primary/20',\n                'href' in props ? 'cursor-pointer hover:bg-secondary/50' : '',\n                className\n            )}\n        >\n            {allowsDragging && (\n                <Cell className='ring-primary pr-0 group cursor-grab dragging:cursor-grabbing'>\n                    <Button\n                        className='relative bg-transparent pl-3.5 py-1.5 text-muted-foreground pressed:text-foreground'\n                        slot='drag'\n                    >\n                        <IconMenu />\n                    </Button>\n                </Cell>\n            )}\n            {selectionBehavior === 'toggle' && (\n                <Cell className='pl-4'>\n                    <span\n                        aria-hidden\n                        className='absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary group-selected:block'\n                    />\n                    <Checkbox slot='selection' />\n                </Cell>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </Row>\n    )\n}\n\nTable.Body = Body\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Header = Header\nTable.Row = TableRow\n\nexport { Table }\n"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport { Separator as SeparatorPrimitive, type SeparatorProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst separatorStyles = tv({\n    base: 'bg-muted shrink-0',\n    variants: {\n        orientation: {\n            horizontal: 'h-px w-full',\n            vertical: 'w-px'\n        }\n    },\n    defaultVariants: {\n        orientation: 'horizontal'\n    }\n})\n\nconst Separator = ({ className, ...props }: SeparatorProps) => (\n    <SeparatorPrimitive\n        {...props}\n        className={separatorStyles({\n            orientation: props.orientation,\n            className: className\n        })}\n    />\n)\n\nexport { Separator }\n"
  },
  "context-menu": {
    "component": "@/components/ui/context-menu",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nimport { Menu, type MenuContentProps } from './menu'\nimport { focusButtonStyles } from './utils'\n\ninterface ContextMenuTriggerContextType {\n    buttonRef: React.RefObject<HTMLButtonElement | null>\n    contextMenuOffset: { offset: number; crossOffset: number } | null\n    setContextMenuOffset: React.Dispatch<\n        React.SetStateAction<{ offset: number; crossOffset: number } | null>\n    >\n}\n\nconst ContextMenuTriggerContext = React.createContext<ContextMenuTriggerContextType | undefined>(\n    undefined\n)\n\nconst useContextMenuTrigger = () => {\n    const context = React.useContext(ContextMenuTriggerContext)\n    if (!context) {\n        throw new Error('useContextMenuTrigger must be used within a ContextMenuTrigger')\n    }\n    return context\n}\n\ninterface ContextMenuRootComponent {\n    children: React.ReactNode\n}\n\nconst ContextMenu = ({ children }: ContextMenuRootComponent) => {\n    const [contextMenuOffset, setContextMenuOffset] = React.useState<{\n        offset: number\n        crossOffset: number\n    } | null>(null)\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    return (\n        <ContextMenuTriggerContext.Provider\n            value={{ buttonRef, contextMenuOffset, setContextMenuOffset }}\n        >\n            {children}\n        </ContextMenuTriggerContext.Provider>\n    )\n}\n\nconst contextMenuTriggerStyles = tv({\n    extend: focusButtonStyles,\n    base: 'focus:outline-none cursor-default',\n    variants: {\n        isDisabled: {\n            false: 'forced-colors:disabled:text-[GrayText]',\n            true: 'cursor-default opacity-60 forced-colors:disabled:text-[GrayText]'\n        }\n    }\n})\n\ntype ContextMenuTriggerProps = React.ButtonHTMLAttributes<HTMLButtonElement>\n\nconst ContextMenuTrigger = ({ className, ...props }: ContextMenuTriggerProps) => {\n    const { buttonRef, setContextMenuOffset } = useContextMenuTrigger()\n\n    const onContextMenu = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault()\n        const rect = e.currentTarget.getBoundingClientRect()\n        setContextMenuOffset({\n            offset: e.clientY - rect.bottom,\n            crossOffset: e.clientX - rect.left\n        })\n    }\n    return (\n        <button\n            className={contextMenuTriggerStyles({ isDisabled: props.disabled, className })}\n            ref={buttonRef as React.RefObject<HTMLButtonElement>}\n            aria-haspopup='menu'\n            onContextMenu={onContextMenu}\n            {...props}\n        />\n    )\n}\n\ntype ContextMenuContentProps<T> = Omit<\n    MenuContentProps<T>,\n    'showArrow' | 'isOpen' | 'onOpenChange' | 'triggerRef' | 'placement' | 'shouldFlip'\n>\n\nconst ContextMenuContent = <T extends object>(props: ContextMenuContentProps<T>) => {\n    const { contextMenuOffset, setContextMenuOffset, buttonRef } = useContextMenuTrigger()\n    return contextMenuOffset ? (\n        <Menu.Content\n            isOpen={!!contextMenuOffset}\n            onOpenChange={() => setContextMenuOffset(null)}\n            triggerRef={buttonRef}\n            shouldFlip={false}\n            placement='bottom left'\n            offset={contextMenuOffset?.offset}\n            crossOffset={contextMenuOffset?.crossOffset}\n            onClose={() => setContextMenuOffset(null)}\n            {...props}\n        />\n    ) : null\n}\n\nContextMenu.Trigger = ContextMenuTrigger\nContextMenu.Content = ContextMenuContent\nContextMenu.Item = Menu.Item\nContextMenu.Separator = Menu.Separator\nContextMenu.ItemDetails = Menu.ItemDetails\nContextMenu.Section = Menu.Section\nContextMenu.Header = Menu.Header\nContextMenu.Keyboard = Menu.Keyboard\n\nexport { ContextMenu }\n"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\n\nimport { DropZone as DropPrimitiveZone, type DropZoneProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cr, focusStyles } from './utils'\n\nconst dropZoneStyles = tv({\n    extend: focusStyles,\n    base: 'group has-[slot=description]:text-center flex max-h-[200px] p-6 max-w-xl flex-col items-center justify-center gap-2 rounded-lg border border-dashed text-sm',\n    variants: {\n        isDropTarget: {\n            true: 'bg-primary/10 ring-4 ring-primary/20 [&_.text-muted-foreground]:text-primary-foreground border-solid border-primary'\n        }\n    }\n})\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n    <DropPrimitiveZone\n        className={cr(className, (className, renderProps) =>\n            dropZoneStyles({ ...renderProps, className })\n        )}\n        {...props}\n    />\n)\nexport { DropZone }\n"
  },
  "loading-dots": {
    "component": "@/components/ui/loading-dots",
    "raw": "'use client'\n\nimport { cn } from './utils'\n\nconst dots = 'mx-[1px] inline-block size-[0.3125rem] animate-blink rounded-lg'\n\nexport const LoadingDots = ({ className }: { className: string }) => {\n    return (\n        <span className='mx-2 inline-flex items-center'>\n            <span className={cn(dots, className)} />\n            <span className={cn(dots, 'animation-delay-[200ms]', className)} />\n            <span className={cn(dots, 'animation-delay-[400ms]', className)} />\n        </span>\n    )\n}\n"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport type { FormProps } from 'react-aria-components'\nimport { Form as FormPrimitive } from 'react-aria-components'\n\nconst Form = (props: FormProps) => <FormPrimitive {...props} />\n\nexport { Form }\n"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconX } from 'hq-icons'\nimport {\n    Button,\n    TagGroup as TagGroupPrimitive,\n    TagList as TagListPrimitive,\n    Tag as TagPrimitive,\n    type TagGroupProps as TagGroupPrimitiveProps,\n    type TagListProps,\n    type TagProps as TagPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { badgeVariants } from './badge'\nimport { Description, Label } from './field'\nimport { cn, cr } from './utils'\n\nconst { variant } = badgeVariants.variants\n\nconst variants = {\n    primary: {\n        base: [\n            variant.primary,\n            '[&_[slot=remove]:hover]:bg-primary [&_[slot=remove]:hover]:text-primary-foreground'\n        ],\n        selected: [\n            'bg-primary dark:hover:bg-primary dark:bg-primary hover:bg-primary ring-primary ring-inset text-primary-foreground dark:text-primary-foreground hover:text-primary-foreground',\n            '[&_[slot=remove]:hover]:bg-primary-foreground/80 [&_[slot=remove]:hover]:text-primary'\n        ]\n    },\n    secondary: {\n        base: [\n            variant.secondary,\n            '[&_[slot=remove]:hover]:bg-foreground [&_[slot=remove]:hover]:text-background'\n        ],\n        selected: [\n            'bg-foreground ring-foreground/50 text-background dark:bg-foreground/90 dark:text-secondary ring-inset',\n            '[&_[slot=remove]:hover]:bg-background [&_[slot=remove]:hover]:text-secondary-foreground'\n        ]\n    },\n    success: {\n        base: [\n            variant.success,\n            '[&_[slot=remove]:hover]:bg-success [&_[slot=remove]:hover]:text-success-foreground'\n        ],\n        selected: [\n            'bg-success dark:bg-success ring-success ring-inset dark:text-success-foreground dark:hover:bg-success hover:bg-success text-success-foreground hover:text-success-foreground',\n            '[&_[slot=remove]:hover]:bg-success-foreground/80 [&_[slot=remove]:hover]:text-success'\n        ]\n    },\n    warning: {\n        base: [\n            variant.warning,\n            '[&_[slot=remove]:hover]:bg-warning [&_[slot=remove]:hover]:text-warning-foreground'\n        ],\n        selected: [\n            'bg-warning dark:hover:bg-warning dark:bg-warning dark:text-background hover:bg-warning text-warning-foreground hover:text-warning-foreground',\n            '[&_[slot=remove]:hover]:bg-warning-foreground/80 [&_[slot=remove]:hover]:text-warning'\n        ]\n    },\n    danger: {\n        base: [\n            variant.danger,\n            '[&_[slot=remove]:hover]:bg-danger [&_[slot=remove]:hover]:text-danger-foreground'\n        ],\n        selected: [\n            'bg-danger dark:bg-danger dark:hover:bg-danger/90 hover:bg-danger text-danger-foreground ring-danger hover:text-danger-foreground',\n            '[&_[slot=remove]:hover]:bg-danger-foreground/80 [&_[slot=remove]:hover]:text-danger'\n        ]\n    },\n    info: {\n        base: [\n            variant.info,\n            '[&_[slot=remove]:hover]:bg-info [&_[slot=remove]:hover]:text-info-foreground'\n        ],\n        selected: [\n            'bg-info dark:bg-info dark:hover:bg-info/90 hover:bg-info text-info-foreground ring-info hover:text-info-foreground',\n            '[&_[slot=remove]:hover]:bg-info-foreground/80 [&_[slot=remove]:hover]:text-info'\n        ]\n    },\n    dark: {\n        base: [variant.dark],\n        selected: [\n            'bg-dark hover:bg-dark/90 ring-inset ring-dark/50 text-dark-foreground',\n            '[&_[slot=remove]:hover]:bg-dark-foreground/80 [&_[slot=remove]:hover]:text-dark'\n        ]\n    },\n    outline: {\n        base: [variant.outline],\n        selected: [\n            'bg-transparent ring-inset ring-foreground/50 text-foreground',\n            '[&_[slot=remove]:hover]:bg-foreground/80 [&_[slot=remove]:hover]:text-foreground'\n        ]\n    }\n}\n\ntype RestrictedVariant = 'primary' | 'secondary'\ntype Variant = keyof typeof variant\ntype Shape = keyof typeof badgeVariants.variants.shape\n\ntype TagGroupContextValue = {\n    variant: Variant\n    shape: Shape\n}\n\nconst TagGroupContext = React.createContext<TagGroupContextValue>({\n    variant: 'primary',\n    shape: 'square'\n})\n\nexport interface TagGroupProps extends TagGroupPrimitiveProps {\n    variant?: Variant\n    shape?: Shape\n    errorMessage?: string\n    label?: string\n    description?: string\n}\n\nconst TagGroup = ({ children, ...props }: TagGroupProps) => {\n    return (\n        <TagGroupPrimitive\n            {...props}\n            className={cn('flex flex-wrap flex-col gap-1', props.className)}\n        >\n            <TagGroupContext.Provider\n                value={{\n                    variant: props.variant || 'primary',\n                    shape: props.shape || 'square'\n                }}\n            >\n                {props.label && <Label>{props.label}</Label>}\n                {children}\n                {props.description && <Description>{props.description}</Description>}\n            </TagGroupContext.Provider>\n        </TagGroupPrimitive>\n    )\n}\n\nconst TagList = <T extends object>({ className, ...props }: TagListProps<T>) => {\n    return <TagListPrimitive {...props} className={cn('flex flex-wrap gap-2', className)} />\n}\n\nconst tagStyles = tv({\n    base: [badgeVariants.base, 'cursor-pointer tag'],\n    variants: {\n        isFocused: { true: 'border-ring/85 ring-1' },\n        isInvalid: { true: 'border-danger' },\n        isDisabled: { true: 'opacity-50 cursor-default' },\n        allowsRemoving: { true: 'pr-1' }\n    }\n})\n\ninterface TagProps extends TagPrimitiveProps {\n    variant?: Variant\n    shape?: Shape\n}\n\nconst TagItem = ({ children, className, variant, shape, ...props }: TagProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n    const groupContext = React.useContext(TagGroupContext)\n\n    return (\n        <TagPrimitive\n            textValue={textValue}\n            {...props}\n            className={cr(className, (_, renderProps) => {\n                const finalVariant = variant || groupContext.variant\n                const finalShape = shape || groupContext.shape\n                return tagStyles({\n                    ...renderProps,\n                    className: cn([\n                        variants[finalVariant as Variant]?.base,\n                        badgeVariants.variants.shape[finalShape as Shape],\n                        renderProps.isSelected\n                            ? variants[finalVariant as Variant].selected\n                            : undefined\n                    ])\n                })\n            })}\n        >\n            {({ allowsRemoving }) => {\n                return (\n                    <>\n                        {children as React.ReactNode}\n                        {allowsRemoving && (\n                            <Button\n                                slot='remove'\n                                className={cn(\n                                    'rounded-lg focus:outline-none size-3.5 grid place-content-center -mr-0.5 focus-visible:ring-1 focus-visible:ring-primary',\n                                    className\n                                )}\n                            >\n                                <span className='shrink-0 text-base/4 -mr-px'>\n                                    <IconX className='size-3' />\n                                </span>\n                            </Button>\n                        )}\n                    </>\n                )\n            }}\n        </TagPrimitive>\n    )\n}\n\nconst Tag = {\n    Group: TagGroup,\n    Item: TagItem,\n    List: TagList\n}\n\nexport { Tag, type RestrictedVariant }\n"
  },
  "color-field": {
    "component": "@/components/ui/color-field",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type {\n    ColorFieldProps as ColorFieldPrimitiveProps,\n    ValidationResult\n} from 'react-aria-components'\nimport { ColorField as ColorFieldPrimitive } from 'react-aria-components'\n\nimport { ColorPicker } from './color-picker'\nimport { ColorSwatch } from './color-swatch'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ctr } from './utils'\n\ninterface ColorFieldProps extends ColorFieldPrimitiveProps {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    placeholder?: string\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isLoading?: boolean\n    enableColorPicker?: boolean\n}\n\nconst ColorField = ({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    prefix,\n    suffix,\n    isLoading,\n    enableColorPicker = true,\n    className,\n    ...props\n}: ColorFieldProps) => {\n    const value = props.value ?? props.defaultValue\n    return (\n        <ColorFieldPrimitive\n            {...props}\n            aria-label={props['aria-label'] ?? 'Color field'}\n            className={ctr(\n                className,\n                '[&_[data-slot=color-swatch]]:-ml-0.5 group w-full flex flex-col gap-y-1'\n            )}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup data-loading={isLoading ? 'true' : undefined}>\n                {prefix ? (\n                    <span data-slot='prefix' className='atrs'>\n                        {prefix}\n                    </span>\n                ) : null}\n                <div className='flex items-center'>\n                    {value && (\n                        <span className='ml-2'>\n                            {enableColorPicker ? (\n                                <ColorPicker onChange={props.onChange} defaultValue={value} />\n                            ) : (\n                                <ColorSwatch className='size-6' color={value.toString('hex')} />\n                            )}\n                        </span>\n                    )}\n\n                    <Input placeholder={placeholder} />\n                </div>\n                {suffix ? (\n                    <span data-slot='suffix' className='atrs ml-auto'>\n                        {suffix}\n                    </span>\n                ) : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </ColorFieldPrimitive>\n    )\n}\n\nexport { ColorField }\n"
  },
  "date-range-picker": {
    "component": "@/components/ui/date-range-picker",
    "raw": "'use client'\n\nimport {\n    DateRangePicker as DateRangePickerPrimitive,\n    type DateRangePickerProps as DateRangePickerPrimitiveProps,\n    type DateValue,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DateInput } from './date-field'\nimport { DatePickerIcon, DatePickerOverlay } from './date-picker'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { ctr } from './utils'\n\nconst dateRangePickerStyles = tv({\n    slots: {\n        base: 'group flex flex-col gap-y-1.5',\n        dateRangePickerInputStart: 'px-2 lg:text-sm tabular-nums text-base',\n        dateRangePickerInputEnd: 'flex-1 px-2 py-1.5 tabular-nums text-base lg:text-sm',\n        dateRangePickerDash:\n            'text-foreground group-disabled:text-muted-foreground forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]'\n    }\n})\nconst { base, dateRangePickerInputStart, dateRangePickerInputEnd, dateRangePickerDash } =\n    dateRangePickerStyles()\n\ninterface DateRangePickerProps<T extends DateValue> extends DateRangePickerPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DateRangePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DateRangePickerProps<T>) => {\n    return (\n        <DateRangePickerPrimitive {...props} className={ctr(className, base())}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='w-auto min-w-40'>\n                <DateInput slot='start' className={dateRangePickerInputStart()} />\n                <span aria-hidden='true' className={dateRangePickerDash()}>\n                    –\n                </span>\n                <DateInput slot='end' className={dateRangePickerInputEnd()} />\n                <DatePickerIcon />\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <DatePickerOverlay range />\n        </DateRangePickerPrimitive>\n    )\n}\n\nexport { DateRangePicker, type DateRangePickerProps }\n"
  },
  "disclosure": {
    "component": "@/components/ui/disclosure",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconMinus } from 'hq-icons'\nimport {\n    Button,\n    DisclosureGroup as DisclosureGroupPrimitive,\n    DisclosurePanel,\n    Disclosure as DisclosurePrimitive,\n    type ButtonProps,\n    type DisclosureGroupProps as DisclosureGroupPrimitiveProps,\n    type DisclosurePanelProps,\n    type DisclosureProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn, cr } from './utils'\n\ninterface DisclosureGroupProps extends DisclosureGroupPrimitiveProps {\n    hideBorder?: boolean\n    hideIndicator?: boolean\n    className?: string\n}\n\nconst DisclosureGroupContext = React.createContext<DisclosureGroupProps>({})\n\nconst DisclosureGroup = ({\n    children,\n    hideIndicator,\n    hideBorder,\n    className,\n    ...props\n}: DisclosureGroupProps) => {\n    return (\n        <DisclosureGroupPrimitive\n            {...props}\n            className={({ isDisabled }) =>\n                cn([\n                    isDisabled ? 'cursor-not-allowed opacity-75' : 'cursor-pointer',\n                    hideBorder\n                        ? '[&_[data-slot=accordion-item]]:border-none'\n                        : '[&_[data-slot=accordion-item]]:border-b'\n                ])\n            }\n        >\n            {(values) => (\n                <div data-slot='accordion-item-content' className={className}>\n                    <DisclosureGroupContext.Provider value={{ hideIndicator, hideBorder }}>\n                        {typeof children === 'function' ? children(values) : children}\n                    </DisclosureGroupContext.Provider>\n                </div>\n            )}\n        </DisclosureGroupPrimitive>\n    )\n}\n\nconst disclosureStyles = tv({\n    base: 'flex group relative w-full flex-col',\n    variants: {\n        isDisabled: {\n            true: 'cursor-not-allowed opacity-75'\n        },\n        isExpanded: {\n            true: 'pb-3'\n        }\n    },\n    compoundVariants: [\n        {\n            hideBorder: true,\n            isExpanded: true,\n            className: 'pb-2'\n        }\n    ]\n})\n\nconst Disclosure = ({ className, ...props }: DisclosureProps) => {\n    return (\n        <DisclosurePrimitive\n            data-slot='accordion-item'\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                disclosureStyles({ ...renderProps, className })\n            )}\n        >\n            {props.children}\n        </DisclosurePrimitive>\n    )\n}\n\nconst accordionTriggerStyles = tv({\n    base: [\n        'flex flex-1 group rounded-lg aria-expanded:text-foreground text-muted-foreground sm:text-sm items-center gap-x-2 font-medium'\n    ],\n    variants: {\n        hideBorder: {\n            true: 'py-2',\n            false: 'py-3'\n        },\n        isFocused: {\n            true: 'outline-none text-foreground'\n        },\n        isOpen: {\n            true: 'text-foreground'\n        },\n        isDisabled: {\n            true: 'opacity-50 cursor-default'\n        }\n    }\n})\n\nconst Trigger = ({ className, ...props }: ButtonProps) => {\n    const { hideIndicator, hideBorder } = React.useContext(DisclosureGroupContext)\n    return (\n        <Button\n            {...props}\n            slot='trigger'\n            className={cr(className, (className, renderProps) =>\n                accordionTriggerStyles({\n                    ...renderProps,\n                    hideBorder,\n                    className\n                })\n            )}\n        >\n            {(values) => (\n                <>\n                    {typeof props.children === 'function' ? props.children(values) : props.children}\n                    {!hideIndicator && (\n                        <div\n                            className={cn(\n                                'ml-auto relative flex items-center justify-center size-3 indicator',\n                                '-rotate-90 group-aria-expanded:rotate-0 transition-transform duration-300'\n                            )}\n                        >\n                            <IconMinus\n                                className={cn('transition-opacity absolute size-3 indicator')}\n                            />\n                            <IconMinus\n                                className={cn(\n                                    'transition-all absolute size-3',\n                                    '-rotate-90 group-aria-expanded:rotate-0 indicator'\n                                )}\n                            />\n                        </div>\n                    )}\n                </>\n            )}\n        </Button>\n    )\n}\n\nconst Panel = ({ className, ...props }: DisclosurePanelProps) => {\n    return (\n        <DisclosurePanel {...props} className={cn('sm:text-sm', className)}>\n            {props.children}\n        </DisclosurePanel>\n    )\n}\n\nDisclosure.Trigger = Trigger\nDisclosure.Panel = Panel\n\nconst Accordion = (props: DisclosureGroupProps) => <DisclosureGroup {...props} />\nAccordion.Item = Disclosure\nAccordion.Trigger = Trigger\nAccordion.Content = Panel\n\nconst Collapsible = (props: DisclosureProps) => <Disclosure {...props} />\nCollapsible.Trigger = Trigger\nCollapsible.Content = Panel\n\nexport { Accordion, Collapsible }\n"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconMenu } from 'hq-icons'\nimport {\n    Button,\n    GridList as GridListPrimitive,\n    GridListItem,\n    type GridListItemProps,\n    type GridListProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { cr } from './utils'\n\nconst gridListStyles = tv({\n    base: 'relative group flex [&>[data-drop-target]]:border [&>[data-drop-target]]:border-primary has-[[data-slot=icon]]:[&_[slot=drag]]:sr-only',\n    variants: {\n        layout: {\n            stack: 'flex-col',\n            grid: 'flex-wrap gap-2'\n        }\n    }\n})\n\nconst GridList = <T extends object>({ children, className, ...props }: GridListProps<T>) => {\n    return (\n        <GridListPrimitive\n            className={cr(className, (className, renderProps) =>\n                gridListStyles({ ...renderProps, className })\n            )}\n            {...props}\n        >\n            {children}\n        </GridListPrimitive>\n    )\n}\n\nconst itemStyles = tv({\n    base: [\n        'relative group transition outline-none flex items-center cursor-default h-fit select-none gap-3 px-3 -mb-px py-2 lg:text-sm text-foreground -outline-offset-2',\n        'group-data-[layout=stack]:last:mb-0 group-data-[layout=stack]:border-y',\n        'group-data-[layout=grid]:has-[[data-slot=icon]]:w-32 group-data-[layout=grid]:has-[[data-slot=icon]]:p-2',\n        'group-data-[layout=grid]:rounded-lg group-data-[layout=grid]:flex-col group-data-[layout=grid]:text-center group-data-[layout=grid]:text-wrap group-data-[layout=grid]:[&>div>[data-slot=icon]]:size-10 group-data-[layout=grid]:[&_[data-slot=icon]]:shrink-0'\n    ],\n    variants: {\n        isHovered: { true: 'bg-primary/10' },\n        isSelected: {\n            true: 'bg-primary/20 z-20 border-muted/50'\n        },\n        isFocused: {\n            true: 'outline-none'\n        },\n        isFocusVisible: {\n            true: 'ring-1 ring-primary outline-none'\n        },\n        isDisabled: {\n            true: 'text-muted-foreground'\n        }\n    }\n})\n\nconst Item = ({ className, ...props }: GridListItemProps) => {\n    const textValue = typeof props.children === 'string' ? props.children : undefined\n    return (\n        <GridListItem\n            textValue={textValue}\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                itemStyles({ ...renderProps, className })\n            )}\n        >\n            {({ selectionMode, selectionBehavior, allowsDragging }) => (\n                <>\n                    {allowsDragging && (\n                        <Button\n                            slot='drag'\n                            className='cursor-grab group-data-[layout=grid]:sr-only dragging:cursor-grabbing [&>[data-slot=icon]]:text-muted-foreground'\n                        >\n                            <IconMenu />\n                        </Button>\n                    )}\n                    {selectionMode === 'multiple' && selectionBehavior === 'toggle' && (\n                        <Checkbox className='-mr-2' slot='selection' />\n                    )}\n                    {props.children as React.ReactNode}\n                </>\n            )}\n        </GridListItem>\n    )\n}\n\nconst EmptyState = (props: React.HTMLAttributes<HTMLDivElement>) => (\n    <div className='p-6' {...props} />\n)\n\nGridList.Item = Item\nGridList.EmptyState = EmptyState\n\nexport { GridList }\n"
  },
  "chart": {
    "component": "@/components/ui/chart",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ResponsiveContainer as Container, Legend, Tooltip, type LegendProps } from 'recharts'\n\nimport { cn } from './utils'\n\ninterface Theme {\n    readonly light: string\n    readonly dark: string\n}\n\nconst Themes: Theme = { light: '', dark: '.dark' }\n\ninterface ChartConfig {\n    [key: string]: {\n        label?: React.ReactNode\n        icon?: React.ComponentType\n        color?: string\n        theme?: Record<keyof Theme, string>\n    }\n}\n\nconst ChartContext = React.createContext<{ config: ChartConfig } | null>(null)\n\nconst useChart = () => {\n    const context = React.useContext(ChartContext)\n    if (!context) {\n        throw new Error('useChart must be used within a <Chart />')\n    }\n    return context\n}\n\ntype ChartProps = React.ComponentProps<'div'> & {\n    config: ChartConfig\n    children: React.ReactElement\n}\n\nconst Chart = React.forwardRef<HTMLDivElement, ChartProps>(\n    ({ id, className, children, config, ...props }, ref) => {\n        const uniqueId = React.useId()\n        const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n        return (\n            <ChartContext.Provider value={{ config }}>\n                <div\n                    data-chart={chartId}\n                    ref={ref}\n                    className={cn(\n                        \"flex cks aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-muted/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-muted [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-muted [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-muted [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n                        className\n                    )}\n                    {...props}\n                >\n                    <Style id={chartId} config={config} />\n                    <Container>{children}</Container>\n                </div>\n            </ChartContext.Provider>\n        )\n    }\n)\nChart.displayName = 'Chart'\n\ninterface StyleProps {\n    id: string\n    config: ChartConfig\n}\n\nconst Style = ({ id, config }: StyleProps) => {\n    const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color)\n    if (!colorConfig.length) return null\n\n    return (\n        <style\n            dangerouslySetInnerHTML={{\n                __html: Object.entries(Themes)\n                    .map(\n                        ([theme, prefix]) => `\n            ${prefix} [data-chart=${id}] {\n              ${colorConfig\n                  .map(([key, itemConfig]) => {\n                      const color =\n                          itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n                          itemConfig.color\n                      return color ? `--color-${key}: ${color};` : null\n                  })\n                  .filter(Boolean)\n                  .join('\\n')}\n            }\n          `\n                    )\n                    .join('\\n')\n            }}\n        />\n    )\n}\n\nconst TooltipContent = React.forwardRef<\n    HTMLDivElement,\n    React.ComponentProps<typeof Tooltip> &\n        React.ComponentProps<'div'> & {\n            hideLabel?: boolean\n            hideIndicator?: boolean\n            indicator?: 'line' | 'dot' | 'dashed'\n            nameKey?: string\n            labelKey?: string\n        }\n>(\n    (\n        {\n            active,\n            payload,\n            className,\n            indicator = 'dot',\n            hideLabel = false,\n            hideIndicator = false,\n            label,\n            labelFormatter,\n            labelClassName,\n            formatter,\n            color,\n            nameKey,\n            labelKey\n        },\n        ref\n    ) => {\n        const { config } = useChart()\n\n        const tooltipLabel = React.useMemo(() => {\n            if (hideLabel || !payload?.length) return null\n\n            const [item] = payload\n            const key = `${labelKey || item.dataKey || item.name || 'value'}`\n            const itemConfig = resolvePayloadConfig(config, item, key)\n            const value =\n                !labelKey && typeof label === 'string'\n                    ? config[label as keyof typeof config]?.label || label\n                    : itemConfig?.label\n\n            if (labelFormatter) {\n                return (\n                    <div className={cn('font-medium', labelClassName)}>\n                        {labelFormatter(value, payload)}\n                    </div>\n                )\n            }\n\n            return value ? <div className={cn('font-medium', labelClassName)}>{value}</div> : null\n        }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])\n\n        if (!active || !payload?.length) return null\n\n        const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n        return (\n            <div\n                ref={ref}\n                className={cn(\n                    'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-muted/60 bg-background text-foreground px-2.5 py-1.5 text-xs shadow-xl',\n                    className\n                )}\n            >\n                {!nestLabel ? tooltipLabel : null}\n                <div className='grid gap-1.5'>\n                    {payload.map((item, index) => {\n                        const key = `${nameKey || item.name || item.dataKey || 'value'}`\n                        const itemConfig = resolvePayloadConfig(config, item, key)\n                        const indicatorColor = color || item.payload.fill || item.color\n\n                        return (\n                            <div\n                                key={item.dataKey}\n                                className={cn(\n                                    'flex w-full flex-wrap items-stretch gap-2 [&>[data-slot=icon]]:size-2.5 [&>[data-slot=icon]]:text-muted-foreground',\n                                    indicator === 'dot' && 'items-center'\n                                )}\n                            >\n                                {formatter && item?.value !== undefined && item.name ? (\n                                    formatter(item.value, item.name, item, index, item.payload)\n                                ) : (\n                                    <>\n                                        {itemConfig?.icon ? (\n                                            <itemConfig.icon />\n                                        ) : (\n                                            !hideIndicator && (\n                                                <div\n                                                    className={cn(\n                                                        'shrink-0 rounded-lg border-[--color-border] bg-[--color-bg]',\n                                                        {\n                                                            'size-2.5': indicator === 'dot',\n                                                            'w-1': indicator === 'line',\n                                                            'w-0 border-[1.5px] border-dashed bg-transparent':\n                                                                indicator === 'dashed',\n                                                            'my-0.5':\n                                                                nestLabel && indicator === 'dashed'\n                                                        }\n                                                    )}\n                                                    style={\n                                                        {\n                                                            '--color-bg': indicatorColor,\n                                                            '--color-border': indicatorColor\n                                                        } as React.CSSProperties\n                                                    }\n                                                />\n                                            )\n                                        )}\n                                        <div\n                                            className={cn(\n                                                'flex flex-1 justify-between leading-none',\n                                                nestLabel ? 'items-end' : 'items-center'\n                                            )}\n                                        >\n                                            <div className='grid gap-1.5'>\n                                                {nestLabel ? tooltipLabel : null}\n                                                <span className='text-muted-foreground'>\n                                                    {itemConfig?.label || item.name}\n                                                </span>\n                                            </div>\n                                            {item.value && (\n                                                <span className='font-mono font-medium tabular-nums text-foreground'>\n                                                    {item.value.toLocaleString()}\n                                                </span>\n                                            )}\n                                        </div>\n                                    </>\n                                )}\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n)\nTooltipContent.displayName = 'ChartTooltipContent'\n\ninterface LegendContentProps\n    extends React.ComponentProps<'div'>,\n        Pick<LegendProps, 'payload' | 'verticalAlign'> {\n    hideIcon?: boolean\n    nameKey?: string\n}\n\nconst LegendContent = ({\n    className,\n    hideIcon = false,\n    payload,\n    verticalAlign = 'bottom',\n    nameKey\n}: LegendContentProps) => {\n    const { config } = useChart()\n\n    if (!payload?.length) return null\n\n    return (\n        <div\n            className={cn(\n                'flex items-center justify-center gap-4',\n                verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n                className\n            )}\n        >\n            {payload.map((item) => {\n                const key = `${nameKey || item.dataKey || 'value'}`\n                const itemConfig = resolvePayloadConfig(config, item, key)\n\n                return (\n                    <div\n                        key={item.value}\n                        className={cn(\n                            'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'\n                        )}\n                    >\n                        {itemConfig?.icon && !hideIcon ? (\n                            <itemConfig.icon />\n                        ) : (\n                            <div\n                                className='h-2 w-2 shrink-0 rounded-lg'\n                                style={{ backgroundColor: item.color }}\n                            />\n                        )}\n                        {itemConfig?.label}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nconst resolvePayloadConfig = (config: ChartConfig, payload: unknown, key: string) => {\n    if (typeof payload !== 'object' || payload === null) {\n        return undefined\n    }\n\n    const nestedPayload =\n        'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n            ? payload.payload\n            : undefined\n\n    let configLabelKey: string = key\n\n    if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n        configLabelKey = payload[key as keyof typeof payload] as string\n    } else if (\n        nestedPayload &&\n        key in nestedPayload &&\n        typeof nestedPayload[key as keyof typeof nestedPayload] === 'string'\n    ) {\n        configLabelKey = nestedPayload[key as keyof typeof nestedPayload] as string\n    }\n\n    return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config]\n}\n\nconst EnhancedChart = Object.assign(Chart, {\n    Tooltip,\n    TooltipContent,\n    Legend,\n    LegendContent,\n    Style\n})\n\nexport { EnhancedChart as Chart, type ChartConfig }\n"
  }
}