{
  "pickers/select/select-validation-demo": {
    "component": "@/components/docs/pickers/select/select-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Key } from 'react-aria-components'\n\nimport { Button, Form, Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectValidationDemo() {\n    const [value, setValue] = React.useState<Key>('')\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form onSubmit={onSubmit} className='space-y-4'>\n            <Select\n                label='Linux Distro'\n                items={items}\n                selectedKey={value}\n                onSelectionChange={setValue}\n                isRequired\n            >\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/select/select-disabled-demo": {
    "component": "@/components/docs/pickers/select/select-disabled-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', available: true },\n    { id: 2, name: 'Debian', available: true },\n    { id: 3, name: 'Fedora', available: false },\n    { id: 4, name: 'Arch', available: false },\n    { id: 5, name: 'CentOS', available: false },\n    { id: 6, name: 'Gentoo', available: true },\n    { id: 7, name: 'OpenSuse', available: false },\n    { id: 8, name: 'Redhat', available: false },\n    { id: 9, name: 'FreeBSD', available: false },\n    { id: 10, name: 'NetBSD', available: true }\n]\n\nexport default function SelectDisabledItemDemo() {\n    return (\n        <Select label='Linux Distro' items={items}>\n            {(item) => (\n                <Select.Item id={item.id} isDisabled={!item.available}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-with-icon-demo": {
    "component": "@/components/docs/pickers/select/select-with-icon-demo",
    "raw": "import {\n    IconBrandArch,\n    IconBrandDebian,\n    IconBrandFedora,\n    IconBrandRedhat,\n    IconBrandUbuntu\n} from 'hq-icons'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectWithIconDemo() {\n    return (\n        <Select label='Linux Distro'>\n            <Select.Item id='ubuntu' textValue='Ubuntu'>\n                <IconBrandUbuntu />\n                Ubuntu\n            </Select.Item>\n            <Select.Item id='debian' textValue='Debian'>\n                <IconBrandDebian />\n                Debian\n            </Select.Item>\n            <Select.Item id='fedora' textValue='Fedora'>\n                <IconBrandFedora />\n                Fedora\n            </Select.Item>\n            <Select.Item id='arch' textValue='Arch'>\n                <IconBrandArch />\n                Arch\n            </Select.Item>\n            <Select.Item id='red-hat' textValue='RedHat'>\n                <IconBrandRedhat />\n                RedHat\n            </Select.Item>\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-item-details-demo": {
    "component": "@/components/docs/pickers/select/select-item-details-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function SelectItemDetailsDemo() {\n    return (\n        <Select label='Javascript Frameworks' items={items}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <Select.Details label={item.name} description={item.description} />\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-collections-demo": {
    "component": "@/components/docs/pickers/select/select-collections-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectDemo() {\n    return (\n        <Select label='Linux Distro' items={items}>\n            {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-controlled-demo": {
    "component": "@/components/docs/pickers/select/select-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectControlledDemo() {\n    const [selected, setSelected] = React.useState<Key>('')\n    return (\n        <div className='space-y-6'>\n            <Select\n                selectedKey={selected}\n                onSelectionChange={setSelected}\n                label='Linux Distro'\n                items={items}\n            >\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "pickers/select/select-section-demo": {
    "component": "@/components/docs/pickers/select/select-section-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function SelectSectionDemo() {\n    return (\n        <Select label='Linux Distro' items={items}>\n            {(item) => (\n                <Select.Section title={item.name} items={item.distros}>\n                    {(distro) => <Select.Item id={distro.id}>{distro.name}</Select.Item>}\n                </Select.Section>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-demo": {
    "component": "@/components/docs/pickers/select/select-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectDemo() {\n    return (\n        <div className='grid sm:grid-cols-3 gap-2'>\n            <Select label='Default' items={items}>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Select label='Invalid' items={items} isInvalid>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Select label='Disabled' items={items} isDisabled>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n        </div>\n    )\n}\n"
  },
  "pickers/select/select-with-avatar-demo": {
    "component": "@/components/docs/pickers/select/select-with-avatar-demo",
    "raw": "import { Avatar, Select } from '@/components/ui'\n\nexport default function SelectAvatarDemo() {\n    return (\n        <Select label='User' items={users}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/combo-box/combo-box-controlled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconSquareCheckBig, IconTextCursorInput } from 'hq-icons'\nimport { Key, Selection } from 'react-aria-components'\n\nimport { ComboBox, Toggle } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ComboBoxControlledDemo() {\n    const [mode, setMode] = React.useState<Selection>(new Set(['selection']))\n    return (\n        <div className='space-y-4'>\n            <Toggle.Group selectionMode='single' selectedKeys={mode} onSelectionChange={setMode}>\n                <Toggle id='selection'>\n                    <IconSquareCheckBig />\n                    Selection\n                </Toggle>\n                <Toggle id='input'>\n                    <IconTextCursorInput />\n                    Input\n                </Toggle>\n            </Toggle.Group>\n            {Array.from(mode).includes('selection') ? (\n                <ComboBoxControlledSelected />\n            ) : (\n                <ComboBoxControlledInput />\n            )}\n        </div>\n    )\n}\n\nconst ComboBoxControlledInput = () => {\n    const [value, setValue] = React.useState<string>('')\n    return (\n        <div className='space-y-4 grid'>\n            <ComboBox\n                label='Linux Distro'\n                inputValue={value}\n                onInputChange={setValue}\n                items={items}\n            >\n                {(item) => (\n                    <ComboBox.Item id={item.id} textValue={item.name}>\n                        {item.name}\n                    </ComboBox.Item>\n                )}\n            </ComboBox>\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n\nconst ComboBoxControlledSelected = () => {\n    const [selected, setSelected] = React.useState<Key | null>(null)\n    return (\n        <div className='space-y-4 grid'>\n            <ComboBox\n                label='Linux Distro'\n                selectedKey={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-demo",
    "raw": "import { ComboBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function ComboBoxDemo() {\n    return (\n        <div className='grid sm:grid-cols-4 gap-2'>\n            <ComboBox label='Default' items={items}>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <ComboBox label='Readonly' items={items} isReadOnly>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <ComboBox label='Invalid' items={items} isInvalid>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <ComboBox label='Disabled' items={items} isDisabled>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n        </div>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-section-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-section-demo",
    "raw": "import { ComboBox } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function ComboBoxSectionDemo() {\n    return (\n        <ComboBox label='Linux Distro' items={items}>\n            {(item) => (\n                <ComboBox.Section title={item.name} items={item.distros}>\n                    {(distro) => <ComboBox.Item id={distro.id}>{distro.name}</ComboBox.Item>}\n                </ComboBox.Section>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-avatar-demo",
    "raw": "import { Avatar, ComboBox } from '@/components/ui'\n\nexport default function ComboBoxAvatarDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users} isRequired>\n            {(item) => (\n                <ComboBox.Item id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/combo-box/combo-box-validation-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Key } from 'react-aria-components'\n\nimport { Button, ComboBox, Form } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function ComboBoxValidationDemo() {\n    const [value, setValue] = React.useState<Key | null>('')\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form onSubmit={onSubmit} className='space-y-4'>\n            <ComboBox\n                label='Linux Distro'\n                items={items}\n                selectedKey={value}\n                onSelectionChange={setValue}\n                isRequired\n            >\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-disabled-demo",
    "raw": "import { ComboBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', available: true },\n    { id: 2, name: 'Debian', available: true },\n    { id: 3, name: 'Fedora', available: false },\n    { id: 4, name: 'Arch', available: false },\n    { id: 5, name: 'CentOS', available: false },\n    { id: 6, name: 'Gentoo', available: true },\n    { id: 7, name: 'OpenSuse', available: false },\n    { id: 8, name: 'Redhat', available: false },\n    { id: 9, name: 'FreeBSD', available: false },\n    { id: 10, name: 'NetBSD', available: true }\n]\n\nexport default function ComboBoxDisabledDemo() {\n    return (\n        <ComboBox label='Linux Distro' items={items}>\n            {(item) => (\n                <ComboBox.Item id={item.id} isDisabled={!item.available}>\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-validation-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Selection } from 'react-aria-components'\n\nimport { Button, Form, MultiSelect } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function MultiSelectDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([]))\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(Array.from(selected))\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <MultiSelect\n                isInvalid={Array.from(selected).length < 2}\n                errorMessage={\n                    Array.from(selected).length < 2 ? 'Select at least 2 distros' : undefined\n                }\n                label='Linux Distro'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => {\n                    return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-controlled-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Selection } from 'react-aria-components'\n\nimport { MultiSelect } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function MultiSelectDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([2, 4]))\n    return (\n        <div className='space-y-6'>\n            <MultiSelect\n                label='Linux Distro'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => {\n                    return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <code>selected: {JSON.stringify([...selected])}</code>\n        </div>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-demo",
    "raw": "'use client'\n\nimport { MultiSelect } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function MultiSelectDemo() {\n    return (\n        <div className='grid sm:grid-cols-3 gap-2'>\n            <MultiSelect label='Default' items={items}>\n                {(item) => {\n                    return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <MultiSelect label='Invalid' items={items} isInvalid>\n                {(item) => {\n                    return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <MultiSelect label='Disabled' items={items} isDisabled>\n                {(item) => {\n                    return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n        </div>\n    )\n}\n"
  },
  "collections/table/table-demo": {
    "component": "@/components/docs/collections/table/table-demo",
    "raw": "'use client'\n\nimport { Table } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\nexport default function TableDemo() {\n    return (\n        <Table aria-label='Pokemons'>\n            <Table.Header>\n                <Table.Column className='w-0'>#</Table.Column>\n                <Table.Column isRowHeader>Name</Table.Column>\n                <Table.Column>Type</Table.Column>\n                <Table.Column>Level</Table.Column>\n            </Table.Header>\n            <Table.Body items={items}>\n                {(item) => (\n                    <Table.Row>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.type}</Table.Cell>\n                        <Table.Cell>{item.level}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/table/table-sorting-demo": {
    "component": "@/components/docs/collections/table/table-sorting-demo",
    "raw": "'use client'\n\nimport { IconLoader } from 'hq-icons'\n\nimport { Table } from '@/components/ui'\nimport { useAsyncList } from '@react-stately/data'\n\ninterface Character {\n    title: string\n    director: number\n    producer: number\n    release_date: number\n}\n\nexport default function TableSortingDemo() {\n    const list = useAsyncList<Character>({\n        async load({ signal }) {\n            const res = await fetch(`https://swapi.py4e.com/api/films`, {\n                signal\n            })\n            const json = await res.json()\n            return {\n                items: json.results\n            }\n        },\n        async sort({ items, sortDescriptor }) {\n            return {\n                items: items.sort((a, b) => {\n                    // @ts-expect-error unknown-type\n                    const first = a[sortDescriptor.column]\n                    // @ts-expect-error unknown-type\n                    const second = b[sortDescriptor.column]\n                    let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1\n                    if (sortDescriptor.direction === 'descending') {\n                        cmp *= -1\n                    }\n                    return cmp\n                })\n            }\n        }\n    })\n    return (\n        <Table\n            aria-label='Movies'\n            selectionMode='multiple'\n            sortDescriptor={list.sortDescriptor}\n            onSortChange={list.sort}\n        >\n            <Table.Header>\n                <Table.Column id='title' isRowHeader>\n                    Title\n                </Table.Column>\n                <Table.Column id='director' allowsSorting>\n                    Director\n                </Table.Column>\n                <Table.Column id='producer'>Producer</Table.Column>\n                <Table.Column id='release_date' allowsSorting>\n                    Release Date\n                </Table.Column>\n            </Table.Header>\n            <Table.Body\n                items={list.items}\n                renderEmptyState={() => (\n                    <div className='grid place-content-center p-10'>\n                        <IconLoader className='animate-spin' />\n                    </div>\n                )}\n            >\n                {(item) => (\n                    <Table.Row id={item.title}>\n                        <Table.Cell>{item.title}</Table.Cell>\n                        <Table.Cell>{item.director}</Table.Cell>\n                        <Table.Cell>{item.producer}</Table.Cell>\n                        <Table.Cell>{item.release_date}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/table/table-resize-demo": {
    "component": "@/components/docs/collections/table/table-resize-demo",
    "raw": "'use client'\n\nimport { Table } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\n\nexport default function TableResizeDemo() {\n    return (\n        <Table allowResize aria-label='Pokemons'>\n            <Table.Header>\n                <Table.Column className='max-w-8'>#</Table.Column>\n                <Table.Column isRowHeader isResizable>\n                    Name\n                </Table.Column>\n                <Table.Column isResizable>Type</Table.Column>\n                <Table.Column>Level</Table.Column>\n            </Table.Header>\n            <Table.Body items={items}>\n                {(item) => (\n                    <Table.Row>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.type}</Table.Cell>\n                        <Table.Cell>{item.level}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/table/table-bulk-demo": {
    "component": "@/components/docs/collections/table/table-bulk-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Table } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\nexport default function TableBulkDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set())\n    return (\n        <div className='space-y-6'>\n            <Table\n                aria-label='Books'\n                selectionMode='multiple'\n                selectedKeys={selectedKeys}\n                onSelectionChange={setSelectedKeys}\n            >\n                <Table.Header>\n                    <Table.Column className='w-0'>#</Table.Column>\n                    <Table.Column isRowHeader>Name</Table.Column>\n                    <Table.Column>Type</Table.Column>\n                    <Table.Column>Level</Table.Column>\n                </Table.Header>\n                <Table.Body items={items}>\n                    {(item) => (\n                        <Table.Row>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.type}</Table.Cell>\n                            <Table.Cell>{item.level}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n            <code>selected: {JSON.stringify(Array.from(selectedKeys))}</code>\n        </div>\n    )\n}\n"
  },
  "collections/table/table-drag-demo": {
    "component": "@/components/docs/collections/table/table-drag-demo",
    "raw": "'use client'\n\nimport { Table, useDND, useList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\n\nexport default function TableDragDemo() {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n    return (\n        <Table aria-label='Pokemons' selectionMode='multiple' dragAndDropHooks={dragAndDropHooks}>\n            <Table.Header>\n                <Table.Column>#</Table.Column>\n                <Table.Column isRowHeader>Name</Table.Column>\n                <Table.Column>Type</Table.Column>\n                <Table.Column>Level</Table.Column>\n            </Table.Header>\n            <Table.Body items={list.items}>\n                {(item) => (\n                    <Table.Row>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.type}</Table.Cell>\n                        <Table.Cell>{item.level}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/accordion/accordion-demo": {
    "component": "@/components/docs/collections/accordion/accordion-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>Personal Information</Accordion.Trigger>\n                <Accordion.Content>Personal information form here.</Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>Billing Address</Accordion.Trigger>\n                <Accordion.Content>Billing address form here.</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/accordion/accordion-allow-multiple-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-allow-multiple-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionAllowMultipleExpandDemo() {\n    return (\n        <Accordion allowsMultipleExpanded>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>Personal Information</Accordion.Trigger>\n                <Accordion.Content>Personal information form here.</Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>Billing Address</Accordion.Trigger>\n                <Accordion.Content>Billing address form here.</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/accordion/accordion-disabled-demo": {
    "component": "@/components/docs/collections/accordion/accordion-disabled-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDisabledDemo() {\n    return (\n        <Accordion>\n            {faqs.map((item, index) => (\n                <Accordion.Item isDisabled={index === 2} key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'Do you offer gift wrapping options?',\n        a: 'Yes, we provide gift wrapping services for a small additional charge at checkout.'\n    },\n    {\n        q: 'Can I return a gift card?',\n        a: 'Sorry, gift cards are non-refundable and cannot be returned.'\n    },\n    {\n        q: 'What are your store hours?',\n        a: 'Our store is open from 9 AM to 9 PM on weekdays and 10 AM to 6 PM on weekends.'\n    },\n    {\n        q: 'Do you have a loyalty program?',\n        a: 'Yes, we have a loyalty program where you can earn points for every purchase and redeem them for discounts.'\n    },\n    {\n        q: 'How do I update my billing information?',\n        a: 'You can update your billing information through your account settings on our website.'\n    },\n    {\n        q: 'Are there any discounts for bulk orders?',\n        a: 'Yes, we offer discounts on bulk orders. Please contact our sales team for more details.'\n    }\n]\n"
  },
  "collections/accordion/accordion-default-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-default-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionGroupDefaultExpandDemo() {\n    return (\n        <Accordion defaultExpandedKeys={[2]}>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>Personal Information</Accordion.Trigger>\n                <Accordion.Content>Personal information form here.</Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>Billing Address</Accordion.Trigger>\n                <Accordion.Content>Billing address form here.</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/menu/multiple-menu-demo": {
    "component": "@/components/docs/collections/menu/multiple-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Recent Files' },\n    { id: 2, name: 'Downloads' },\n    { id: 3, name: 'Documents' },\n    { id: 4, name: 'Music' },\n    { id: 5, name: 'Pictures' },\n    { id: 6, name: 'Videos' }\n]\n\nexport default function MultipleMenuDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1, 2]))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => (\n                    <Menu.Item id={item.id} textValue={item.name}>\n                        <Menu.Label>{item.name}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-basic-demo": {
    "component": "@/components/docs/collections/menu/menu-basic-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuBasicDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-disabled-demo": {
    "component": "@/components/docs/collections/menu/menu-disabled-demo",
    "raw": "'use client'\n\nimport { IconEye, IconPencil, IconTrash } from 'hq-icons'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDisabledDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <Menu>\n                <Menu.Trigger>Disabled by Item</Menu.Trigger>\n                <Menu.Content>\n                    <Menu.Item>\n                        <IconEye />\n                        <Menu.Label>View</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item isDisabled>\n                        <IconPencil />\n                        <Menu.Label>Edit</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item isDanger isDisabled>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n            <Menu>\n                <Menu.Trigger>Disabled by Key</Menu.Trigger>\n                <Menu.Content disabledKeys={['edit', 'delete']}>\n                    <Menu.Item id='view'>\n                        <IconEye />\n                        <Menu.Label>View</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='edit'>\n                        <IconPencil />\n                        <Menu.Label>Edit</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='delete' isDanger>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </div>\n    )\n}\n"
  },
  "collections/menu/menu-respect-screen-demo": {
    "component": "@/components/docs/collections/menu/menu-respect-screen-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuRespectScreenDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content respectScreen={false}>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-section-level-demo": {
    "component": "@/components/docs/collections/menu/menu-section-level-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconAlignCenter,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconClipboard,\n    IconCopy,\n    IconItalic,\n    IconScissors,\n    IconUnderline\n} from 'hq-icons'\nimport type { Selection } from 'react-aria-components'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSectionLevelDemo() {\n    const [style, setStyle] = React.useState<Selection>(new Set(['bold']))\n    const [align, setAlign] = React.useState<Selection>(new Set(['left']))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Section title='Actions'>\n                    <Menu.Item textValue='Cut'>\n                        <IconScissors />\n                        <Menu.Label>Cut</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item textValue='Copy'>\n                        <IconCopy />\n                        <Menu.Label>Copy</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item textValue='Paste'>\n                        <IconClipboard />\n                        <Menu.Label>Paste</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n                <Menu.Separator />\n                <Menu.Section\n                    selectionMode='multiple'\n                    selectedKeys={style}\n                    onSelectionChange={setStyle}\n                    title='Text style'\n                >\n                    <Menu.Item id='bold' textValue='Bold'>\n                        <IconBold />\n                        <Menu.Label>Bold</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='italic' textValue='Italic'>\n                        <IconItalic />\n                        <Menu.Label>Italic</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='underline' textValue='Underline'>\n                        <IconUnderline />\n                        <Menu.Label>Underline</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n                <Menu.Separator />\n                <Menu.Section\n                    selectionMode='single'\n                    selectedKeys={align}\n                    onSelectionChange={setAlign}\n                    title='Text alignment'\n                >\n                    <Menu.Item id='left' textValue='Left'>\n                        <IconAlignLeft />\n                        <Menu.Label>Left</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='center' textValue='Cente'>\n                        <IconAlignCenter />\n                        <Menu.Label>Center</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='right' textValue='Right'>\n                        <IconAlignRight />\n                        <Menu.Label>Right</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-section-demo": {
    "component": "@/components/docs/collections/menu/menu-section-demo",
    "raw": "'use client'\n\nimport { IconBrandArch, IconBrandDebian, IconBrandFedora, IconBrandUbuntu } from 'hq-icons'\n\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        icon: IconBrandDebian,\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        icon: IconBrandUbuntu,\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        icon: IconBrandFedora,\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        icon: IconBrandArch,\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function MenuSectionDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content items={items}>\n                {(item) => (\n                    <Menu.Section title={item.name} items={item.distros}>\n                        {(distro) => (\n                            <Menu.Item textValue={distro.name}>\n                                <item.icon />\n                                <Menu.Label>{distro.name}</Menu.Label>\n                            </Menu.Item>\n                        )}\n                    </Menu.Section>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-danger-demo": {
    "component": "@/components/docs/collections/menu/menu-danger-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDangerDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item isDanger>\n                    <Menu.Label>Delete</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-collection-demo": {
    "component": "@/components/docs/collections/menu/menu-collection-demo",
    "raw": "'use client'\n\nimport {\n    IconBrandArch,\n    IconBrandDebian,\n    IconBrandFedora,\n    IconBrandMint,\n    IconBrandRedhat,\n    IconBrandUbuntu\n} from 'hq-icons'\n\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Debian', icon: IconBrandDebian },\n    { id: 2, name: 'Ubuntu', icon: IconBrandUbuntu },\n    { id: 3, name: 'Fedora', icon: IconBrandFedora },\n    { id: 4, name: 'Arch', icon: IconBrandArch },\n    { id: 5, name: 'Mint', icon: IconBrandMint },\n    { id: 6, name: 'Red Hat', icon: IconBrandRedhat }\n]\n\nexport default function MenuCollectionDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content items={items}>\n                {(item) => (\n                    <Menu.Item id={item.id}>\n                        <item.icon />\n                        <Menu.Label>{item.name}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/single-menu-demo": {
    "component": "@/components/docs/collections/menu/single-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Menu } from '@/components/ui'\nimport type { Placement } from '@react-types/overlays'\n\nconst placements = [\n    { position: 'bottom' },\n    { position: 'bottom left' },\n    { position: 'bottom right' },\n    { position: 'bottom start' },\n    { position: 'bottom end' },\n    { position: 'top' },\n    { position: 'top left' },\n    { position: 'top right' },\n    { position: 'top start' },\n    { position: 'top end' },\n    { position: 'left' },\n    { position: 'left top' },\n    { position: 'left bottom' },\n    { position: 'start' },\n    { position: 'start top' },\n    { position: 'start bottom' },\n    { position: 'right' },\n    { position: 'right top' },\n    { position: 'right bottom' },\n    { position: 'end' },\n    { position: 'end top' },\n    { position: 'end bottom' }\n]\n\nexport default function SingleMenuDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set(['bottom']))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content\n                placement={Array.from(selected)[0] as Placement}\n                selectionMode='single'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={placements}\n            >\n                {(item) => (\n                    <Menu.Item id={item.position}>\n                        <Menu.Label>{item.position}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-header-demo": {
    "component": "@/components/docs/collections/menu/menu-header-demo",
    "raw": "'use client'\n\nimport { IconCircleUser, IconLogOut, IconSettings } from 'hq-icons'\n\nimport { Avatar, Menu } from '@/components/ui'\n\nexport default function MenuHeaderDemo() {\n    return (\n        <>\n            <Menu>\n                <Menu.Trigger>\n                    <Avatar className='size-10' src='https://github.com/dq-alhq.png' />\n                </Menu.Trigger>\n                <Menu.Content placement='bottom' className='min-w-64'>\n                    <Menu.Header>\n                        <span className='block'>DQ Al-Haqqi</span>\n                        <span className='text-muted-fg font-normal'>@dq-alhq</span>\n                    </Menu.Header>\n                    <Menu.Item>\n                        <IconCircleUser />\n                        Profile\n                    </Menu.Item>\n                    <Menu.Item>\n                        <IconSettings />\n                        Settings\n                    </Menu.Item>\n                    <Menu.Separator />\n                    <Menu.Item isDanger>\n                        <IconLogOut />\n                        Log out\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </>\n    )\n}\n"
  },
  "collections/menu/menu-item-details-demo": {
    "component": "@/components/docs/collections/menu/menu-item-details-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function MenuItemDetailsDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content items={items}>\n                {(item) => (\n                    <Menu.Item id={item.id} textValue={item.name}>\n                        <Menu.Details label={item.name} description={item.description} />\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-sub-demo": {
    "component": "@/components/docs/collections/menu/menu-sub-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSubDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Submenu>\n                    <Menu.Item>\n                        <Menu.Label>Options</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Content>\n                        <Menu.Item>\n                            <Menu.Label>Edit</Menu.Label>\n                        </Menu.Item>\n                        <Menu.Submenu>\n                            <Menu.Item isDanger>\n                                <Menu.Label>Delete</Menu.Label>\n                            </Menu.Item>\n                            <Menu.Content>\n                                <Menu.Item>\n                                    <Menu.Label>For Everyone</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Submenu>\n                                    <Menu.Item>\n                                        <Menu.Label>For Me</Menu.Label>\n                                    </Menu.Item>\n                                    <Menu.Content>\n                                        <Menu.Item>\n                                            <Menu.Label>Permanently</Menu.Label>\n                                        </Menu.Item>\n                                        <Menu.Item>\n                                            <Menu.Label>Temporary</Menu.Label>\n                                        </Menu.Item>\n                                    </Menu.Content>\n                                </Menu.Submenu>\n                            </Menu.Content>\n                        </Menu.Submenu>\n                    </Menu.Content>\n                </Menu.Submenu>\n                <Menu.Item>\n                    <Menu.Label>Help</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu/menu-with-icon-demo",
    "raw": "'use client'\n\nimport { IconEye, IconPencil } from 'hq-icons'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuWithIconDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <IconEye />\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <IconPencil />\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-disabled-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', active: true },\n    { id: 2, name: 'Debian', active: false },\n    { id: 3, name: 'Fedora', active: true },\n    { id: 4, name: 'Arch', active: false }\n]\n\nexport default function TagGroupDisabledDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tag.Group\n                disabledKeys={items.filter((item) => !item.active).map((item) => item.id)}\n                label='Disabled Key'\n                selectionMode='multiple'\n                items={items}\n            >\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n\n            <Tag.Group label='Disabled by Tag' selectionMode='multiple' items={items}>\n                {(item) => <Tag isDisabled={!item.active}>{item.name}</Tag>}\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-href-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', url: '#' },\n    { id: 2, name: 'Debian', url: '#' },\n    { id: 3, name: 'Fedora', url: '#' },\n    { id: 4, name: 'Arch', url: '#' }\n]\n\nexport default function TagGroupControlledDemo() {\n    return (\n        <Tag.Group label='Linux Distros' items={items}>\n            {(item) => (\n                <Tag id={item.name} href={item.url}>\n                    {item.name}\n                </Tag>\n            )}\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\n\nexport default function TagGroupControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([]))\n    return (\n        <div className='space-y-6'>\n            <Tag.Group\n                label='Linux Distros'\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n\n            <code>selected: {JSON.stringify(Array.from(selected))}</code>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\n\nexport default function TagGroupDemo() {\n    return (\n        <Tag.Group label='Linux Distros' selectionMode='multiple' items={items}>\n            {(item) => <Tag>{item.name}</Tag>}\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-shape-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-shape-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\n\nexport default function TagGroupShapeDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tag.Group shape='square' label='Square' selectionMode='multiple' items={items}>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group shape='circle' label='Circle' selectionMode='multiple' items={items}>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Tag } from '@/components/ui'\n\nexport default function TagGroupWithRemoveDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: 1, name: 'Ubuntu' },\n            { id: 2, name: 'Debian' },\n            { id: 3, name: 'Fedora' },\n            { id: 4, name: 'Arch' }\n        ]\n    })\n\n    return (\n        <Tag.Group\n            label='Linux Distros'\n            selectionMode='multiple'\n            onRemove={(keys) => list.remove(...keys)}\n            items={list.items}\n        >\n            {(item) => <Tag>{item.name}</Tag>}\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-variant-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-variant-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\nexport default function TagGroupVariantDemo() {\n    return (\n        <div className='max-w-sm space-y-6'>\n            <Tag.Group variant='primary' label='Primary' items={items} selectionMode='multiple'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group variant='secondary' label='Secondary' items={items} selectionMode='multiple'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group variant='danger' label='Danger' items={items} selectionMode='multiple'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group variant='info' label='Info' items={items} selectionMode='multiple'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group variant='success' label='Success' items={items} selectionMode='multiple'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group variant='warning' label='Warning' items={items} selectionMode='multiple'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-drag-between-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-drag-between-demo",
    "raw": "'use client'\n\nimport { GridList, useDND, useList } from '@/components/ui'\n\nfunction DNDList({ items }: { items: { id: string; type: string; name: string }[] }) {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <GridList\n            selectedKeys={list.selectedKeys}\n            onSelectionChange={list.setSelectedKeys}\n            dragAndDropHooks={dragAndDropHooks}\n            items={list.items}\n            renderEmptyState={() => (\n                <div className='text-muted-fg flex items-center justify-center col-span-full'>\n                    Drop items here\n                </div>\n            )}\n            aria-label='Linux Distros'\n        >\n            {(item) => <GridList.Item>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n\nexport default function GridListDragBetween() {\n    return (\n        <div className='grid grid-cols-2 gap-4'>\n            <DNDList\n                items={[\n                    { id: '1', type: 'file', name: 'Adobe Photoshop' },\n                    { id: '2', type: 'file', name: 'Adobe XD' },\n                    { id: '3', type: 'folder', name: 'Documents' },\n                    { id: '4', type: 'file', name: 'Adobe InDesign' },\n                    { id: '5', type: 'folder', name: 'Utilities' },\n                    { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n                ]}\n            />\n            <DNDList\n                items={[\n                    { id: '7', type: 'folder', name: 'Pictures' },\n                    { id: '8', type: 'file', name: 'Adobe Fresco' },\n                    { id: '9', type: 'folder', name: 'Apps' },\n                    { id: '10', type: 'file', name: 'Adobe Illustrator' },\n                    { id: '11', type: 'file', name: 'Adobe Lightroom' },\n                    { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n                ]}\n            />\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { GridList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([]))\n    return (\n        <div className='space-y-6'>\n            <GridList\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n                aria-label='Linux Distros'\n                selectionMode='multiple'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n            <code>selected: {JSON.stringify(Array.from(selected))}</code>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-disabled-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\nexport default function GridListDisabledDemo() {\n    return (\n        <GridList\n            disabledKeys={[1, 3]}\n            items={items}\n            aria-label='Linux Distros'\n            selectionMode='multiple'\n        >\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListDemo() {\n    return (\n        <GridList selectionMode='single' items={items} aria-label='Linux Distros'>\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-rearrange-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-rearrange-demo",
    "raw": "'use client'\n\nimport { GridList, useDND, useList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListRearrangeDemo() {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <GridList\n            aria-label='Linux Distros'\n            selectionMode='multiple'\n            items={list.items}\n            dragAndDropHooks={dragAndDropHooks}\n        >\n            {(item) => (\n                <GridList.Item key={item.id} textValue={item.name}>\n                    {item.name}\n                </GridList.Item>\n            )}\n        </GridList>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-selection-mode-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-selection-mode-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Key } from 'react-aria-components'\n\nimport { GridList, Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListMultipleDemo() {\n    const [selectionMode, setSelectionMode] = React.useState<Key>('multiple')\n    return (\n        <div className='space-y-6'>\n            <Select\n                label='Selection mode'\n                selectedKey={selectionMode}\n                onSelectionChange={setSelectionMode}\n            >\n                <Select.Item id='none'>None</Select.Item>\n                <Select.Item id='single'>Single</Select.Item>\n                <Select.Item id='multiple'>Multiple</Select.Item>\n            </Select>\n\n            <GridList\n                items={items}\n                aria-label='Select items'\n                selectionMode={selectionMode as 'none' | 'single' | 'multiple'}\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-layout-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-layout-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Key } from 'react-aria-components'\n\nimport { GridList, Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListLayoutDemo() {\n    const [columns, setColumns] = React.useState<Key>(2)\n    const [gap, setGap] = React.useState<Key>(4)\n\n    return (\n        <div className='flex flex-col gap-4'>\n            <div className='flex gap-2 w-full'>\n                <Select\n                    className='w-full'\n                    label='Columns'\n                    selectedKey={columns}\n                    onSelectionChange={setColumns}\n                >\n                    <Select.Item id={1}>1</Select.Item>\n                    <Select.Item id={2}>2</Select.Item>\n                    <Select.Item id={3}>3</Select.Item>\n                    <Select.Item id={4}>4</Select.Item>\n                    <Select.Item id={5}>5</Select.Item>\n                    <Select.Item id={6}>6</Select.Item>\n                </Select>\n                <Select className='w-full' label='Gap' selectedKey={gap} onSelectionChange={setGap}>\n                    <Select.Item id={0}>0</Select.Item>\n                    <Select.Item id={2}>2</Select.Item>\n                    <Select.Item id={4}>4</Select.Item>\n                    <Select.Item id={6}>6</Select.Item>\n                </Select>\n            </div>\n            <GridList\n                selectionMode='multiple'\n                items={items}\n                aria-label='Linux Distros'\n                columns={columns as 1 | 2 | 3 | 4 | 5 | 6}\n                gap={gap as 0 | 2 | 4 | 6}\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n"
  },
  "collections/list-box/list-box-drag-between-demo": {
    "component": "@/components/docs/collections/list-box/list-box-drag-between-demo",
    "raw": "'use client'\n\nimport { ListBox, useDND, useList } from '@/components/ui'\n\nfunction DNDList({ items }: { items: { id: string; type: string; name: string }[] }) {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <ListBox\n            selectedKeys={list.selectedKeys}\n            onSelectionChange={list.setSelectedKeys}\n            dragAndDropHooks={dragAndDropHooks}\n            items={list.items}\n            renderEmptyState={() => (\n                <div className='text-muted-fg flex items-center justify-center col-span-full'>\n                    Drop items here\n                </div>\n            )}\n            aria-label='Linux Distros'\n        >\n            {(item) => <ListBox.Item>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n\nexport default function ListBoxDragBetween() {\n    return (\n        <div className='flex gap-4'>\n            <DNDList\n                items={[\n                    { id: '1', type: 'file', name: 'Adobe Photoshop' },\n                    { id: '2', type: 'file', name: 'Adobe XD' },\n                    { id: '3', type: 'folder', name: 'Documents' },\n                    { id: '4', type: 'file', name: 'Adobe InDesign' },\n                    { id: '5', type: 'folder', name: 'Utilities' },\n                    { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n                ]}\n            />\n            <DNDList\n                items={[\n                    { id: '7', type: 'folder', name: 'Pictures' },\n                    { id: '8', type: 'file', name: 'Adobe Fresco' },\n                    { id: '9', type: 'folder', name: 'Apps' },\n                    { id: '10', type: 'file', name: 'Adobe Illustrator' },\n                    { id: '11', type: 'file', name: 'Adobe Lightroom' },\n                    { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n                ]}\n            />\n        </div>\n    )\n}\n"
  },
  "collections/list-box/list-box-section-demo": {
    "component": "@/components/docs/collections/list-box/list-box-section-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function ListBoxSectionDemo() {\n    return (\n        <ListBox items={items} aria-label='Bands' selectionMode='multiple'>\n            {(item) => (\n                <ListBox.Section\n                    className='grid w-full gap-1'\n                    id={item.id}\n                    title={item.name}\n                    items={item.distros}\n                >\n                    {(distro) => <ListBox.Item id={distro.id}>{distro.name}</ListBox.Item>}\n                </ListBox.Section>\n            )}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-demo": {
    "component": "@/components/docs/collections/list-box/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxDemo() {\n    return (\n        <ListBox items={items} selectionMode='single' aria-label='Linux Distros'>\n            {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { ListBox, useDND, useList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxRearrangeDemo() {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <ListBox\n            aria-label='Linux Distros'\n            selectionMode='multiple'\n            items={list.items}\n            dragAndDropHooks={dragAndDropHooks}\n        >\n            {(item) => <ListBox.Item key={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-controlled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([1]))\n    return (\n        <div className='space-y-6'>\n            <ListBox\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n                aria-label='Linux Distros'\n                selectionMode='multiple'\n            >\n                {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n            </ListBox>\n\n            <code>selected: {JSON.stringify(Array.from(selected))}</code>\n        </div>\n    )\n}\n"
  },
  "collections/list-box/list-box-item-details-demo": {
    "component": "@/components/docs/collections/list-box/list-box-item-details-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function ListBoxItemDetailsDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([1]))\n    return (\n        <ListBox\n            selectedKeys={selected}\n            onSelectionChange={setSelected}\n            items={items}\n            aria-label='Javascript Frameworks'\n        >\n            {(item) => (\n                <ListBox.Item id={item.id} textValue={item.name}>\n                    <ListBox.Details label={item.name} description={item.description} />\n                </ListBox.Item>\n            )}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-disabled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-disabled-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxDisabledDemo() {\n    return (\n        <ListBox\n            disabledKeys={[1, 3]}\n            items={items}\n            aria-label='Linux Distros'\n            selectionMode='multiple'\n        >\n            {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-selection-mode-demo": {
    "component": "@/components/docs/collections/list-box/list-box-selection-mode-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Key } from 'react-aria-components'\n\nimport { ListBox, Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxMultipleDemo() {\n    const [selectionMode, setSelectionMode] = React.useState<Key>('multiple')\n    return (\n        <div className='space-y-6'>\n            <Select\n                label='Selection mode'\n                selectedKey={selectionMode}\n                onSelectionChange={setSelectionMode}\n            >\n                <Select.Item id='none'>None</Select.Item>\n                <Select.Item id='single'>Single</Select.Item>\n                <Select.Item id='multiple'>Multiple</Select.Item>\n            </Select>\n\n            <ListBox\n                items={items}\n                aria-label='Select items'\n                selectionMode={selectionMode as 'none' | 'single' | 'multiple'}\n            >\n                {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n            </ListBox>\n        </div>\n    )\n}\n"
  },
  "collections/tree/tree-demo": {
    "component": "@/components/docs/collections/tree/tree-demo",
    "raw": "'use client'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeDemo() {\n    return (\n        <Tree className='w-full' aria-label='Files'>\n            <TreeItem id='documents' textValue='Documents'>\n                <TreeItem.Content>Documents</TreeItem.Content>\n                <TreeItem id='project' textValue='Project'>\n                    <TreeItem.Content>Projects</TreeItem.Content>\n                    <TreeItem id='report' textValue='Weekly Report'>\n                        <TreeItem.Content>Weekly Report</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </TreeItem>\n            <TreeItem id='photos' textValue='Photos'>\n                <TreeItem.Content>Photos</TreeItem.Content>\n                <TreeItem id='one' textValue='Image 1'>\n                    <TreeItem.Content>Image 1</TreeItem.Content>\n                </TreeItem>\n                <TreeItem id='two' textValue='Image 2'>\n                    <TreeItem.Content>Image 2</TreeItem.Content>\n                </TreeItem>\n            </TreeItem>\n        </Tree>\n    )\n}\n"
  },
  "collections/tree/tree-selection-mode-demo": {
    "component": "@/components/docs/collections/tree/tree-selection-mode-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Key } from 'react-aria-components'\n\nimport { Select, Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeSelectionModeDemo() {\n    const [selectionMode, setSelectionMode] = React.useState<Key>('multiple')\n\n    return (\n        <div className='space-y-6'>\n            <Select\n                label='Selection mode'\n                selectedKey={selectionMode}\n                onSelectionChange={setSelectionMode}\n            >\n                <Select.Item id='none'>None</Select.Item>\n                <Select.Item id='single'>Single</Select.Item>\n                <Select.Item id='multiple'>Multiple</Select.Item>\n            </Select>\n            <Tree\n                selectionBehavior='toggle'\n                className='w-full'\n                aria-label='Files'\n                selectionMode={selectionMode as 'none' | 'single' | 'multiple'}\n            >\n                <TreeItem id='documents' textValue='Documents'>\n                    <TreeItem.Content>Documents</TreeItem.Content>\n                    <TreeItem id='project' textValue='Project'>\n                        <TreeItem.Content>Project</TreeItem.Content>\n                        <TreeItem id='report' textValue='Weekly Report'>\n                            <TreeItem.Content>Weekly Report</TreeItem.Content>\n                        </TreeItem>\n                    </TreeItem>\n                </TreeItem>\n                <TreeItem id='photos' textValue='Photos'>\n                    <TreeItem.Content>Photos</TreeItem.Content>\n                    <TreeItem id='one' textValue='Image 1'>\n                        <TreeItem.Content>Image 1</TreeItem.Content>\n                    </TreeItem>\n                    <TreeItem id='two' textValue='Image 2'>\n                        <TreeItem.Content>Image 2</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </Tree>\n        </div>\n    )\n}\n"
  },
  "collections/tree/tree-with-icon-demo": {
    "component": "@/components/docs/collections/tree/tree-with-icon-demo",
    "raw": "'use client'\n\nimport { IconFileImage, IconFileText, IconFolder, IconFolderOpen } from 'hq-icons'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeWithIconDemo() {\n    return (\n        <Tree className='w-full' aria-label='Files'>\n            <TreeItem id='documents' textValue='Documents'>\n                <TreeItem.Content>\n                    {({ isExpanded }) => (\n                        <>\n                            {isExpanded ? <IconFolderOpen /> : <IconFolder />}\n                            Documents\n                        </>\n                    )}\n                </TreeItem.Content>\n                <TreeItem id='project' textValue='Project'>\n                    <TreeItem.Content>\n                        {({ isExpanded }) => (\n                            <>\n                                {isExpanded ? <IconFolderOpen /> : <IconFolder />}\n                                Project\n                            </>\n                        )}\n                    </TreeItem.Content>\n                    <TreeItem id='report' textValue='Weekly Report'>\n                        <TreeItem.Content>\n                            <IconFileText />\n                            Weekly Report\n                        </TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </TreeItem>\n            <TreeItem id='photos' textValue='Photos'>\n                <TreeItem.Content>\n                    {({ isExpanded }) => (\n                        <>\n                            {isExpanded ? <IconFolderOpen /> : <IconFolder />}\n                            Photos\n                        </>\n                    )}\n                </TreeItem.Content>\n                <TreeItem id='one' textValue='Image 1'>\n                    <TreeItem.Content>\n                        <IconFileImage />\n                        Image 1\n                    </TreeItem.Content>\n                </TreeItem>\n                <TreeItem id='two' textValue='Image 2'>\n                    <TreeItem.Content>\n                        <IconFileImage />\n                        Image 2\n                    </TreeItem.Content>\n                </TreeItem>\n            </TreeItem>\n        </Tree>\n    )\n}\n"
  },
  "collections/tree/tree-disabled-demo": {
    "component": "@/components/docs/collections/tree/tree-disabled-demo",
    "raw": "'use client'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeDisabledDemo() {\n    return (\n        <Tree className='w-full' aria-label='Files'>\n            <TreeItem id='documents' textValue='Documents'>\n                <TreeItem.Content>Documents</TreeItem.Content>\n                <TreeItem id='project' textValue='Project'>\n                    <TreeItem.Content>Projects</TreeItem.Content>\n                    <TreeItem id='report' textValue='Weekly Report'>\n                        <TreeItem.Content>Weekly Report</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </TreeItem>\n            <TreeItem id='photos' textValue='Photos' isDisabled>\n                <TreeItem.Content>Photos</TreeItem.Content>\n                <TreeItem id='one' textValue='Image 1'>\n                    <TreeItem.Content>Image 1</TreeItem.Content>\n                </TreeItem>\n                <TreeItem id='two' textValue='Image 2'>\n                    <TreeItem.Content>Image 2</TreeItem.Content>\n                </TreeItem>\n            </TreeItem>\n        </Tree>\n    )\n}\n"
  },
  "collections/tree/tree-controlled-demo": {
    "component": "@/components/docs/collections/tree/tree-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Selection } from 'react-aria-components'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([]))\n    return (\n        <div className='space-y-6'>\n            <Tree\n                className='w-full'\n                aria-label='Files'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                selectionMode='multiple'\n            >\n                <TreeItem id='documents' textValue='Documents'>\n                    <TreeItem.Content>Documents</TreeItem.Content>\n                    <TreeItem id='project' textValue='Project'>\n                        <TreeItem.Content>Projects</TreeItem.Content>\n                        <TreeItem id='report' textValue='Weekly Report'>\n                            <TreeItem.Content>Weekly Report</TreeItem.Content>\n                        </TreeItem>\n                    </TreeItem>\n                </TreeItem>\n                <TreeItem id='photos' textValue='Photos'>\n                    <TreeItem.Content>Photos</TreeItem.Content>\n                    <TreeItem id='one' textValue='Image 1'>\n                        <TreeItem.Content>Image 1</TreeItem.Content>\n                    </TreeItem>\n                    <TreeItem id='two' textValue='Image 2'>\n                        <TreeItem.Content>Image 2</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </Tree>\n\n            <code>selected: {JSON.stringify(Array.from(selected))}</code>\n        </div>\n    )\n}\n"
  },
  "collections/tree/tree-collections-demo": {
    "component": "@/components/docs/collections/tree/tree-collections-demo",
    "raw": "'use client'\n\nimport {\n    IconArchive,\n    IconDisc,\n    IconFile,\n    IconFileImage,\n    IconFileMusic,\n    IconFileText,\n    IconFileVideo,\n    IconFolder,\n    IconFolderOpen\n} from 'hq-icons'\nimport { Collection } from 'react-aria-components'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeCollectionsDemo() {\n    const renderItem = (item: FileNode, i: number) => (\n        <TreeItem key={i} textValue={item.file}>\n            <TreeItem.Content>\n                {({ isExpanded, hasChildItems }) => (\n                    <>\n                        {isExpanded ? (\n                            <IconFolderOpen />\n                        ) : hasChildItems ? (\n                            <IconFolder />\n                        ) : (\n                            <FileIcon ext={item.file.substring(item.file.lastIndexOf('.') + 1)} />\n                        )}\n                        {item.file}\n                    </>\n                )}\n            </TreeItem.Content>\n            {item.children && (\n                <Collection items={item.children}>\n                    {item.children.map((file, i) => renderItem(file, i))}\n                </Collection>\n            )}\n        </TreeItem>\n    )\n\n    return (\n        <Tree className='w-full' aria-label='Files' selectionMode='multiple' items={files}>\n            {files.map((file, i) => renderItem(file, i))}\n        </Tree>\n    )\n}\n\nexport type FileNode = {\n    file: string\n    children?: FileNode[]\n}\n\nconst files: FileNode[] = [\n    {\n        file: 'Downloads',\n        children: [\n            {\n                file: 'Compressed',\n                children: [\n                    { file: 'laravel.zip' },\n                    { file: 'react.zip' },\n                    { file: 'nextjs.rar' },\n                    { file: 'ubuntu.iso' }\n                ]\n            },\n            {\n                file: 'Docs',\n                children: [{ file: 'resume.pdf' }, { file: 'cv.pdf' }]\n            },\n            {\n                file: 'Programs',\n                children: [{ file: 'chrome.exe' }, { file: 'vscode.deb' }]\n            }\n        ]\n    },\n    {\n        file: 'Documents',\n        children: [\n            {\n                file: 'Thesis',\n                children: [\n                    { file: 'Bab 1.docx' },\n                    { file: 'Bab 2.docx' },\n                    { file: 'Bab 3.docx' },\n                    { file: 'Cover.docx' }\n                ]\n            },\n            { file: 'Secret.txt' },\n            { file: 'Project.jpg' }\n        ]\n    },\n    {\n        file: 'Music',\n        children: [\n            { file: 'The Beatles.mp3' },\n            { file: 'Led Zeppelin.mp3' },\n            { file: 'Pink Floyd.mp3' },\n            { file: 'Queen.wav' },\n            { file: 'The Rolling Stones.mp3' },\n            { file: 'The Who.wav' }\n        ]\n    },\n    {\n        file: 'Videos',\n        children: [\n            {\n                file: 'Mission Impossible',\n                children: [\n                    { file: 'Mission Impossible 1.mp4' },\n                    { file: 'Mission Impossible 2.mp4' },\n                    { file: 'Mission Impossible 3.mp4' }\n                ]\n            },\n            { file: 'Star Wars.mp4' },\n            { file: 'Avengers - Endgame.mkv' }\n        ]\n    }\n]\n\nconst FileIcon = ({ ext }: { ext: string }) => {\n    let Icon\n    switch (ext) {\n        case 'jpg':\n        case 'png':\n            Icon = IconFileImage\n            break\n        case 'txt':\n        case 'docx':\n        case 'pdf':\n            Icon = IconFileText\n            break\n        case 'mp3':\n        case 'wav':\n            Icon = IconFileMusic\n            break\n        case 'mp4':\n        case 'mkv':\n            Icon = IconFileVideo\n            break\n        case 'zip':\n        case 'rar':\n            Icon = IconArchive\n            break\n        case 'iso':\n            Icon = IconDisc\n            break\n        default:\n            Icon = IconFile\n            break\n    }\n    return <Icon />\n}\n"
  },
  "collections/collapsible/collapsible-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDemo() {\n    return (\n        <Collapsible>\n            <Collapsible.Trigger>System Requirements</Collapsible.Trigger>\n            <Collapsible.Content>Details about system requirements here.</Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-disabled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-disabled-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDisabledDemo() {\n    return (\n        <Collapsible isDisabled>\n            <Collapsible.Trigger>System Requirements</Collapsible.Trigger>\n            <Collapsible.Content>Details about system requirements here.</Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-controlled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleControlledDemo() {\n    const [expanded, setExpanded] = React.useState(false)\n\n    return (\n        <div className='space-y-6'>\n            <Collapsible isExpanded={expanded} onExpandedChange={setExpanded}>\n                <Collapsible.Trigger>System Requirements</Collapsible.Trigger>\n                <Collapsible.Content>Details about system requirements here.</Collapsible.Content>\n            </Collapsible>\n            <code>expanded: {JSON.stringify(expanded)}</code>\n        </div>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-text-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-text-demo",
    "raw": "'use client'\n\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [{ product: 'Laptops', sales: 200, fill: 'var(--color-laptops)' }]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    laptops: {\n        label: 'Laptops',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function ProductSalesOverview() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Laptop Sales Performance'\n                description='Tracking sales data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart\n                        data={chartData}\n                        startAngle={0}\n                        endAngle={250}\n                        innerRadius={80}\n                        outerRadius={110}\n                    >\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-bg'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='sales' background cornerRadius={10} />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg text-4xl font-bold'\n                                                >\n                                                    {chartData[0]!.sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Sales\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-grid-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-grid-demo",
    "raw": "'use client'\n\nimport { PolarGrid, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 320, fill: 'var(--color-electronics)' },\n    { category: 'Furniture', sales: 250, fill: 'var(--color-furniture)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Sports', sales: 180, fill: 'var(--color-sports)' },\n    { category: 'Books', sales: 100, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-2)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-3)'\n    },\n    sports: {\n        label: 'Sports',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function RadialBarChartGridDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Category Sales Overview'\n                description='Visualizing sales distribution across categories for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart data={chartData} innerRadius={30} outerRadius={100}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel nameKey='category' />}\n                        />\n                        <PolarGrid gridType='circle' />\n                        <RadialBar dataKey='sales' />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-stacked-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Label, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [{ month: 'January', sales: 1260, profit: 570 }]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function SalesPerformanceOverview() {\n    const totalRevenue = chartData[0]!.sales + chartData[0]!.profit\n\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Monthly Revenue Distribution'\n                description='Visualizing sales and profit for Jan - Dec 2024'\n            />\n            <Card.Content className='flex flex-1 items-center pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square w-full max-w-[250px]'>\n                    <RadialBarChart\n                        data={chartData}\n                        endAngle={180}\n                        innerRadius={80}\n                        outerRadius={130}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text x={viewBox.cx} y={viewBox.cy} textAnchor='middle'>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) - 16}\n                                                    className='fill-fg text-2xl font-bold'\n                                                >\n                                                    {totalRevenue.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 4}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Total Revenue\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                        <RadialBar\n                            dataKey='sales'\n                            stackId='a'\n                            cornerRadius={5}\n                            fill='var(--color-sales)'\n                            className='stroke-transparent stroke-2'\n                        />\n                        <RadialBar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            stackId='a'\n                            cornerRadius={5}\n                            className='stroke-transparent stroke-2'\n                        />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-shape-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-shape-demo",
    "raw": "'use client'\n\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [{ category: 'Electronics', sales: 1260, fill: 'var(--color-electronics)' }]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function SalesPerformance() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Electronics Sales Performance'\n                description='Sales data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart\n                        data={chartData}\n                        endAngle={100}\n                        innerRadius={80}\n                        outerRadius={140}\n                    >\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-bg'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='sales' background />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg text-4xl font-bold'\n                                                >\n                                                    {chartData[0]!.sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Sales\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-basic-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-basic-demo",
    "raw": "'use client'\n\nimport { RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 320, fill: 'var(--color-electronics)' },\n    { category: 'Furniture', sales: 250, fill: 'var(--color-furniture)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Sports', sales: 180, fill: 'var(--color-sports)' },\n    { category: 'Books', sales: 100, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-2)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-3)'\n    },\n    sports: {\n        label: 'Sports',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function RadialBarChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Category Sales Overview'\n                description='Visualizing sales distribution across categories for the year 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart data={chartData} innerRadius={30} outerRadius={110}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel nameKey='category' />}\n                        />\n                        <RadialBar dataKey='sales' background />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-label-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-label-demo",
    "raw": "'use client'\n\nimport { LabelList, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Apples', quantity: 320, fill: 'var(--color-apples)' },\n    { category: 'Oranges', quantity: 250, fill: 'var(--color-oranges)' },\n    { category: 'Bananas', quantity: 200, fill: 'var(--color-bananas)' },\n    { category: 'Grapes', quantity: 180, fill: 'var(--color-grapes)' },\n    { category: 'Berries', quantity: 100, fill: 'var(--color-berries)' }\n]\n\nconst chartConfig = {\n    quantity: {\n        label: 'Quantity'\n    },\n    apples: {\n        label: 'Apples',\n        color: 'var(--chart-1)'\n    },\n    oranges: {\n        label: 'Oranges',\n        color: 'var(--chart-2)'\n    },\n    bananas: {\n        label: 'Bananas',\n        color: 'var(--chart-3)'\n    },\n    grapes: {\n        label: 'Grapes',\n        color: 'var(--chart-4)'\n    },\n    berries: {\n        label: 'Berries',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function SalesDistribution() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Fruit Sales Distribution'\n                description='Sales data of various fruit categories for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart\n                        data={chartData}\n                        startAngle={-90}\n                        endAngle={380}\n                        innerRadius={30}\n                        outerRadius={110}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel nameKey='category' />}\n                        />\n                        <RadialBar dataKey='quantity' background>\n                            <LabelList\n                                position='insideStart'\n                                dataKey='category'\n                                className='fill-white capitalize mix-blend-luminosity'\n                                fontSize={11}\n                            />\n                        </RadialBar>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-negative-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-negative-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, Cell, LabelList } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', profitLoss: 1200 },\n    { month: 'Feb', profitLoss: 1500 },\n    { month: 'Mar', profitLoss: -700 },\n    { month: 'Apr', profitLoss: 2000 },\n    { month: 'May', profitLoss: -1500 },\n    { month: 'Jun', profitLoss: 1700 },\n    { month: 'Jul', profitLoss: -1200 },\n    { month: 'Aug', profitLoss: 1900 },\n    { month: 'Sep', profitLoss: -1400 },\n    { month: 'Oct', profitLoss: -1800 },\n    { month: 'Nov', profitLoss: 2100 },\n    { month: 'Dec', profitLoss: 1600 }\n]\n\nconst chartConfig = {\n    profitLoss: {\n        label: 'Profit/Loss'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartNegativeDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Profit and Loss' description='January - December 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel hideIndicator />}\n                        />\n                        <Bar dataKey='profitLoss'>\n                            <LabelList position='top' dataKey='month' fillOpacity={1} />\n                            {chartData.map((item) => (\n                                <Cell\n                                    key={item.month}\n                                    fill={item.profitLoss > 0 ? 'var(--chart-1)' : 'var(--chart-2)'}\n                                />\n                            ))}\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-controlled-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-controlled-demo",
    "raw": "'use client'\n\nimport { useMemo, useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig, Select } from '@/components/ui'\n\nconst chartData = Array.from({ length: 50 }, (_, index) => {\n    const date = new Date(2024, 0, 1 + index)\n    return {\n        date: date.toISOString().split('T')[0],\n        sales: Math.floor(Math.random() * 1000 + 500),\n        revenue: Math.floor(Math.random() * 3000 + 1500)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartControlledDemo() {\n    const [activeChart, setActiveChart] = useState<Key>('sales')\n\n    const total = useMemo(\n        () => ({\n            sales: chartData.reduce((acc, curr) => acc + curr.sales, 0),\n            revenue: chartData.reduce((acc, curr) => acc + curr.revenue, 0)\n        }),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='flex-row items-center justify-between'>\n                <div className='space-y-1'>\n                    <Card.Title>Business Overview</Card.Title>\n                    <Card.Description>\n                        Displaying total sales and revenue for the last 50 days\n                    </Card.Description>\n                </div>\n                <div>\n                    <Select\n                        aria-label='Select a chart'\n                        selectedKey={activeChart}\n                        onSelectionChange={setActiveChart}\n                        placement='bottom end'\n                        className='sm:min-w-40'\n                    >\n                        {['sales', 'revenue'].map((key) => {\n                            const chart = key as keyof typeof chartConfig\n                            return (\n                                <Select.Item\n                                    key={chart}\n                                    data-active={activeChart === chart}\n                                    id={key}\n                                    textValue={chartConfig[chart].label}\n                                >\n                                    <Select.Details\n                                        label={chartConfig[chart].label}\n                                        description={total[\n                                            key as keyof typeof total\n                                        ].toLocaleString()}\n                                    />\n                                </Select.Item>\n                            )\n                        })}\n                    </Select>\n                </div>\n            </Card.Header>\n            <Card.Content className='px-2 sm:p-6'>\n                <Chart config={chartConfig} className='aspect-auto h-[250px] w-full'>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            minTickGap={32}\n                            tickFormatter={(value) => {\n                                const date = new Date(value)\n                                return date.toLocaleDateString('en-US', {\n                                    month: 'short',\n                                    day: 'numeric'\n                                })\n                            }}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    className='w-[150px]'\n                                    nameKey='views'\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString('en-US', {\n                                            month: 'short',\n                                            day: 'numeric',\n                                            year: 'numeric'\n                                        })\n                                    }}\n                                />\n                            }\n                        />\n                        <Bar\n                            dataKey={activeChart as keyof typeof chartConfig}\n                            fill={`var(--color-${activeChart})`}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-horizontal-label-inset-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-horizontal-label-inset-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, Rectangle, XAxis, YAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    {\n        country: 'United States',\n        count: 45000,\n        percentage: 45.0\n    },\n    {\n        country: 'Canada',\n        count: 34000,\n        percentage: 18.0\n    },\n    {\n        country: 'United Kingdom',\n        count: 30000,\n        percentage: 12.0\n    },\n    {\n        country: 'Germany',\n        count: 25000,\n        percentage: 9.0\n    },\n    {\n        country: 'Australia',\n        count: 22000,\n        percentage: 7.5\n    },\n    {\n        country: 'France',\n        count: 18000,\n        percentage: 6.0\n    },\n    {\n        country: 'Japan',\n        count: 15000,\n        percentage: 4.5\n    },\n    {\n        country: 'Brazil',\n        count: 13000,\n        percentage: 5.0\n    },\n    {\n        country: 'Indonesia',\n        count: 10030,\n        percentage: 6.0\n    }\n]\n\nconst chartConfig = {\n    count: {\n        label: 'Count',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartHorizontalLabelInsetDemo() {\n    return (\n        <Card className='h-full w-full'>\n            <Card.Header>\n                <Card.Title>Traffic by Country</Card.Title>\n                <Card.Description>Since Aug 17, 2014</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart config={chartConfig} className='aspect-[15/11] sm:aspect-[17/11]'>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        layout='vertical'\n                        barSize={30}\n                        margin={{ left: 0, right: 0 }}\n                    >\n                        <YAxis dataKey='name' type='category' hide />\n                        <XAxis dataKey='count' type='number' hide />\n                        <Bar\n                            dataKey='count'\n                            layout='vertical'\n                            fill='var(--color-count)'\n                            background={{ radius: 6, fill: 'var(--chart-1)', opacity: 0.2 }}\n                            radius={6}\n                            shape={({ ...props }) => (\n                                <>\n                                    <Rectangle {...props} />\n                                    <text x={props.x + 10} y={props.y + 20} fill='white'>\n                                        {props.country}\n                                    </text>\n                                    <text\n                                        x={props.background.width - 10}\n                                        y={props.y + 20}\n                                        textAnchor='end'\n                                        fill='var(--fg)'\n                                    >\n                                        {props.count.toLocaleString()} (\n                                        {props.percentage.toFixed(1)}%)\n                                    </text>\n                                </>\n                            )}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dot' />}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-horizontal-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-horizontal-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst performanceData = [\n    { dataCenter: 'New York', uptime: 99.9 },\n    { dataCenter: 'San Francisco', uptime: 97.5 },\n    { dataCenter: 'Singapore', uptime: 98.7 },\n    { dataCenter: 'London', uptime: 95.3 },\n    { dataCenter: 'Tokyo', uptime: 94.8 },\n    { dataCenter: 'Sydney', uptime: 99.9 },\n    { dataCenter: 'Seoul', uptime: 97.5 }\n]\n\nconst chartConfig = {\n    uptime: {\n        label: 'Uptime (%)',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartHorizontalDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Data Center Uptime'\n                description='Uptime percentage by region for Q1 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={performanceData}\n                        layout='vertical'\n                        margin={{\n                            left: -20\n                        }}\n                    >\n                        <XAxis type='number' dataKey='uptime' hide />\n                        <YAxis\n                            dataKey='dataCenter'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='uptime' fill='var(--color-uptime)' radius={5} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-custom-label-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst projectData = [\n    { team: 'Engineering', completed: 42, ongoing: 15 },\n    { team: 'Design', completed: 30, ongoing: 5 },\n    { team: 'Marketing', completed: 25, ongoing: 10 },\n    { team: 'Sales', completed: 20, ongoing: 8 },\n    { team: 'Support', completed: 35, ongoing: 12 },\n    { team: 'Engineering', completed: 42, ongoing: 15 },\n    { team: 'Design', completed: 30, ongoing: 5 },\n    { team: 'Marketing', completed: 25, ongoing: 10 },\n    { team: 'Sales', completed: 20, ongoing: 8 },\n    { team: 'Support', completed: 35, ongoing: 12 },\n    { team: 'Engineering', completed: 42, ongoing: 15 },\n    { team: 'Design', completed: 30, ongoing: 5 }\n]\n\nconst chartConfig = {\n    completed: {\n        label: 'Completed',\n        color: 'var(--chart-1)'\n    },\n    ongoing: {\n        label: 'Ongoing',\n        color: 'var(--chart-2)'\n    },\n    label: {\n        color: 'var(--bg)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Team Project Status'\n                description='Completed vs Ongoing Projects by Team'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={projectData}\n                        layout='vertical'\n                        margin={{\n                            right: 16\n                        }}\n                    >\n                        <CartesianGrid horizontal={false} />\n                        <YAxis\n                            dataKey='team'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                        />\n                        <XAxis dataKey='completed' type='number' hide />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Bar\n                            dataKey='completed'\n                            layout='vertical'\n                            fill='var(--color-completed)'\n                            radius={4}\n                        >\n                            <LabelList\n                                dataKey='team'\n                                position='insideLeft'\n                                offset={8}\n                                className='fill-(--color-label)'\n                                fontSize={12}\n                            />\n                            <LabelList\n                                dataKey='completed'\n                                position='right'\n                                offset={8}\n                                className='fill-fg'\n                                fontSize={12}\n                            />\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-mixed-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-mixed-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, Legend, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    {\n        browser: 'chrome',\n        visitors: 275,\n        bounceRate: 40,\n        avgSession: 5.6,\n        fill: 'var(--color-chrome)'\n    },\n    {\n        browser: 'safari',\n        visitors: 200,\n        bounceRate: 35,\n        avgSession: 6.3,\n        fill: 'var(--color-safari)'\n    },\n    {\n        browser: 'firefox',\n        visitors: 187,\n        bounceRate: 45,\n        avgSession: 4.2,\n        fill: 'var(--color-firefox)'\n    },\n    { browser: 'edge', visitors: 173, bounceRate: 30, avgSession: 5.0, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, bounceRate: 50, avgSession: 3.7, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors',\n        color: 'var(--chart-1)'\n    },\n    bounceRate: {\n        label: 'Bounce Rate (%)',\n        color: 'var(--chart-2)'\n    },\n    avgSession: {\n        label: 'Avg Session (min)',\n        color: 'var(--chart-3)'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'var(--chart-1)'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'var(--chart-2)'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'var(--chart-3)'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'var(--chart-4)'\n    },\n    other: {\n        label: 'Other',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartGroupedDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Browser Metrics'\n                description='Grouped data for visitors, bounce rate, and average session duration'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        layout='vertical'\n                        margin={{\n                            left: 0\n                        }}\n                    >\n                        <CartesianGrid horizontal={false} />\n                        <YAxis\n                            dataKey='browser'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) =>\n                                chartConfig[value as keyof typeof chartConfig]?.label\n                            }\n                        />\n                        <XAxis type='number' hide />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Legend />\n                        <Bar\n                            dataKey='visitors'\n                            layout='vertical'\n                            fill='var(--color-chrome)'\n                            radius={5}\n                        />\n                        <Bar\n                            dataKey='bounceRate'\n                            layout='vertical'\n                            fill='var(--color-safari)'\n                            radius={5}\n                        />\n                        <Bar\n                            dataKey='avgSession'\n                            layout='vertical'\n                            fill='var(--color-firefox)'\n                            radius={5}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-active-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-active-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, Rectangle, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { os: 'Windows', users: 320, fill: 'var(--chart-1)' },\n    { os: 'MacOS', users: 200, fill: 'var(--chart-2)' },\n    { os: 'Linux', users: 150, fill: 'var(--chart-3)' },\n    { os: 'Android', users: 250, fill: 'var(--chart-4)' },\n    { os: 'iOS', users: 180, fill: 'var(--chart-5)' },\n    { os: 'ChromeOS', users: 90, fill: 'var(--chart-1)' },\n    { os: 'Ubuntu', users: 130, fill: 'var(--chart-2)' },\n    { os: 'Fedora', users: 100, fill: 'var(--chart-3)' },\n    { os: 'FreeBSD', users: 60, fill: 'var(--chart-5)' }\n]\n\nconst chartConfig = {\n    users: {\n        label: 'Users'\n    },\n    windows: {\n        label: 'Windows',\n        color: 'var(--chart-1)'\n    },\n    macos: {\n        label: 'MacOS',\n        color: 'var(--chart-2)'\n    },\n    linux: {\n        label: 'Linux',\n        color: 'var(--chart-3)'\n    },\n    android: {\n        label: 'Android',\n        color: 'var(--chart-4)'\n    },\n    ios: {\n        label: 'iOS',\n        color: 'var(--chart-5)'\n    },\n    chromeos: {\n        label: 'ChromeOS',\n        color: 'var(--chart-1)'\n    },\n    ubuntu: {\n        label: 'Ubuntu',\n        color: 'var(--chart-2)'\n    },\n    fedora: {\n        label: 'Fedora',\n        color: 'var(--chart-3)'\n    },\n    harmonyos: {\n        label: 'HarmonyOS',\n        color: 'var(--chart-4)'\n    },\n    freebsd: {\n        label: 'FreeBSD',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartActiveDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Operating System Usage'\n                description='User distribution by OS in 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='os'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) =>\n                                chartConfig[value.toLowerCase() as keyof typeof chartConfig]?.label\n                            }\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar\n                            dataKey='users'\n                            strokeWidth={2}\n                            radius={8}\n                            activeIndex={1}\n                            activeBar={({ ...props }) => {\n                                return (\n                                    <Rectangle\n                                        {...props}\n                                        fillOpacity={0.8}\n                                        stroke={props.payload.fill}\n                                        strokeDasharray={4}\n                                        strokeDashoffset={4}\n                                    />\n                                )\n                            }}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-label-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst surveyData = [\n    { category: 'Customer Support', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 }\n]\n\nconst chartConfig = {\n    satisfaction: {\n        label: 'Satisfaction',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Customer Satisfaction Survey'\n                description='Satisfaction scores by category'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={surveyData}\n                        margin={{\n                            top: 20\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='satisfaction' fill='var(--color-satisfaction)' radius={8}>\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-fg'\n                                fontSize={12}\n                            />\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-multiple-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 12 }, (_, i) => {\n    const months = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec'\n    ]\n    return {\n        month: months[i],\n        sales: 1000 + Math.floor(Math.random() * 300), // Random value for Sales\n        expenses: 800 + Math.floor(Math.random() * 400), // Random value for Expenses\n        profit: 200 + Math.floor(Math.random() * 900) // Random value for Profit\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-4)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Sales vs Expenses'\n                description='The chart shows the sales and expenses for the last year.'\n                className='items-center pb-4'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='max-h-[250px] w-full'>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} tickMargin={10} axisLine={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dashed' />}\n                        />\n                        <Bar dataKey='sales' fill='var(--color-sales)' radius={4} />\n                        <Bar dataKey='expenses' fill='var(--color-expenses)' radius={4} />\n                        <Bar dataKey='profit' fill='var(--color-profit)' radius={4} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-basic-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-basic-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst salesData = Array.from({ length: 48 }, (_, index) => {\n    const month = new Date(new Date().getFullYear() - 4, Math.floor(index / 2)).toLocaleDateString(\n        'en-US',\n        {\n            month: 'short'\n        }\n    )\n    const startDay = index % 2 === 0 ? 1 : 15\n    const endDay = index % 2 === 0 ? 14 : 28\n    return {\n        period: `${month} ${startDay} - ${month} ${endDay}`,\n        revenue: Math.floor(Math.random() * 5000 + 2000)\n    }\n})\n\nconst salesConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Biweekly Revenue'\n                description='Revenue breakdown every 2 weeks (Jan - Dec 2024)'\n                className='items-center pb-0'\n            />\n            <Card.Content>\n                <Chart config={salesConfig}>\n                    <BarChart accessibilityLayer data={salesData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='period' tickLine={false} tickMargin={10} axisLine={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='revenue' fill='var(--color-revenue)' radius={0} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-stacked-legend-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-stacked-legend-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 3200, expenses: 2400 },\n    { month: 'Feb', revenue: 2800, expenses: 2000 },\n    { month: 'Mar', revenue: 3500, expenses: 2700 },\n    { month: 'Apr', revenue: 3000, expenses: 2200 },\n    { month: 'May', revenue: 3600, expenses: 2800 },\n    { month: 'Jun', revenue: 3400, expenses: 2600 },\n    { month: 'Jul', revenue: 3900, expenses: 3100 },\n    { month: 'Aug', revenue: 4100, expenses: 3300 },\n    { month: 'Sep', revenue: 3700, expenses: 2900 },\n    { month: 'Oct', revenue: 4200, expenses: 3400 },\n    { month: 'Nov', revenue: 4000, expenses: 3100 },\n    { month: 'Dec', revenue: 4300, expenses: 3500 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartStackedLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Biweekly Revenue'\n                description='Revenue breakdown every 2 weeks (Jan - Dec 2024)'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Chart.Tooltip content={<Chart.TooltipContent hideLabel />} />\n                        <Chart.Legend content={<Chart.LegendContent />} />\n                        <Bar\n                            dataKey='revenue'\n                            stackId='a'\n                            fill='var(--chart-1)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='expenses'\n                            stackId='a'\n                            fill='var(--chart-2)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-stacked-demo": {
    "component": "@/components/docs/charts/area/area-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst engagementData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        likes: Math.floor(Math.random() * 50 + 100),\n        comments: Math.floor(Math.random() * 30 + 40)\n    }\n})\n\nconst engagementConfig = {\n    likes: {\n        label: 'Likes',\n        color: 'var(--chart-1)'\n    },\n    comments: {\n        label: 'Comments',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Audience Engagement Analysis'\n                description='Tracking monthly likes and comments over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={engagementConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={engagementData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dot' />}\n                        />\n                        <Area\n                            dataKey='comments'\n                            type='natural'\n                            fill='var(--color-comments)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-comments)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='likes'\n                            type='natural'\n                            fill='var(--color-likes)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-likes)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-icon-demo": {
    "component": "@/components/docs/charts/area/area-chart-icon-demo",
    "raw": "'use client'\n\nimport { IconShoppingBag, IconStore } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst revenueData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        ecommerce: Math.floor(Math.random() * 5000 + 10000),\n        retail: Math.floor(Math.random() * 3000 + 7000)\n    }\n})\n\nconst revenueConfig = {\n    ecommerce: {\n        label: 'E-Commerce',\n        color: 'var(--chart-1)',\n        icon: IconShoppingBag\n    },\n    retail: {\n        label: 'Retail',\n        color: 'var(--chart-2)',\n        icon: IconStore\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartIconDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Revenue Overview'\n                description='Monthly revenue comparison between E-Commerce and Retail over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={revenueConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={revenueData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='retail'\n                            type='natural'\n                            fill='var(--color-retail)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-retail)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='ecommerce'\n                            type='natural'\n                            fill='var(--color-ecommerce)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-ecommerce)'\n                            stackId='a'\n                        />\n                        <Chart.Legend content={<Chart.LegendContent />} />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-axes-demo": {
    "component": "@/components/docs/charts/area/area-chart-axes-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis, YAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'var(--chart-1)'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartAxesDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Axes</Card.Title>\n                <Card.Description>Showing total visitors for the last 6 months</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: -20,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <YAxis tickLine={false} axisLine={false} tickMargin={8} tickCount={3} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='var(--color-mobile)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-step-demo": {
    "component": "@/components/docs/charts/area/area-chart-step-demo",
    "raw": "'use client'\n\nimport { IconChartArea } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst enrollmentData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        newEnrollments: Math.floor(Math.random() * 20 + 40)\n    }\n})\n\nconst enrollmentConfig = {\n    newEnrollments: {\n        label: 'New Enrollments',\n        color: 'var(--chart-1)',\n        icon: IconChartArea\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStepDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Enrollment Growth'\n                description='Monthly student enrollments over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={enrollmentConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={enrollmentData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Area\n                            dataKey='newEnrollments'\n                            type='step'\n                            fill='var(--color-newEnrollments)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-newEnrollments)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-stacked-expanded-demo": {
    "component": "@/components/docs/charts/area/area-chart-stacked-expanded-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst trafficData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        organic: Math.floor(Math.random() * 100 + 150),\n        paid: Math.floor(Math.random() * 50 + 100),\n        referral: Math.floor(Math.random() * 50 + 50)\n    }\n})\n\nconst trafficConfig = {\n    organic: {\n        label: 'Organic',\n        color: 'var(--chart-1)'\n    },\n    paid: {\n        label: 'Paid',\n        color: 'var(--chart-2)'\n    },\n    referral: {\n        label: 'Referral',\n        color: 'var(--chart-3)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedExpandedDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Traffic Analysis'\n                description='Distribution of traffic sources over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={trafficConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={trafficData}\n                        margin={{\n                            left: 20,\n                            right: 20,\n                            top: 20\n                        }}\n                        stackOffset='expand'\n                    >\n                        <CartesianGrid vertical={false} strokeDasharray='3 3' />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor content={<Chart.TooltipContent indicator='line' />} />\n                        <Area\n                            dataKey='referral'\n                            type='monotone'\n                            fill='var(--chart-3)'\n                            fillOpacity={0.1}\n                            stroke='var(--chart-3)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='paid'\n                            type='monotone'\n                            fill='var(--chart-2)'\n                            fillOpacity={0.4}\n                            stroke='var(--chart-2)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='organic'\n                            type='monotone'\n                            fill='var(--chart-1)'\n                            fillOpacity={0.4}\n                            stroke='var(--chart-1)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-basic-demo": {
    "component": "@/components/docs/charts/area/area-chart-basic-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst salesData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        revenue: Math.floor(Math.random() * 5000 + 2000)\n    }\n})\n\nconst salesConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Revenue Trends'\n                description='Monthly revenue for the last 24 months'\n                className='items-center pb-0'\n            />\n            <Card.Content>\n                <Chart config={salesConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={salesData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='revenue'\n                            type='natural'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-revenue)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-linear-demo": {
    "component": "@/components/docs/charts/area/area-chart-linear-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst visitorData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        uniqueVisitors: Math.floor(Math.random() * 500 + 1000)\n    }\n})\n\nconst visitorConfig = {\n    uniqueVisitors: {\n        label: 'Unique Visitors',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Visitor Insights'\n                description='Monthly unique visitors over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={visitorConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={visitorData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dot' hideLabel />}\n                        />\n                        <Area\n                            dataKey='uniqueVisitors'\n                            type='linear'\n                            fill='var(--color-uniqueVisitors)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-uniqueVisitors)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-gradient-demo": {
    "component": "@/components/docs/charts/area/area-chart-gradient-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst salesData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        online: Math.floor(Math.random() * 2000 + 3000),\n        inStore: Math.floor(Math.random() * 1000 + 1500)\n    }\n})\n\nconst chartConfig = {\n    online: {\n        label: 'Online Sales',\n        color: 'var(--chart-1)'\n    },\n    inStore: {\n        label: 'In-Store Sales',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartGradientDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Sales Channel Analysis'\n                description='Monthly comparison of online and in-store sales over the last 24 months'\n                className='items-center pb-4'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='max-h-[250px] w-full'>\n                    <AreaChart\n                        accessibilityLayer\n                        data={salesData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <defs>\n                            <linearGradient id='fillOnline' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-online)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-online)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                            <linearGradient id='fillInStore' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-inStore)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-inStore)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                        </defs>\n                        <Area\n                            dataKey='inStore'\n                            type='natural'\n                            fill='url(#fillInStore)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-inStore)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='online'\n                            type='natural'\n                            fill='url(#fillOnline)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-online)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-legend-demo": {
    "component": "@/components/docs/charts/area/area-chart-legend-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst salesData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        wholesale: Math.floor(Math.random() * 1000 + 500),\n        retail: Math.floor(Math.random() * 1000 + 1500)\n    }\n})\n\nconst salesConfig = {\n    wholesale: {\n        label: 'Wholesale',\n        color: 'var(--chart-1)'\n    },\n    retail: {\n        label: 'Retail',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Overview'\n                description='Distribution of wholesale and retail sales over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={salesConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={salesData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='retail'\n                            type='natural'\n                            fill='var(--color-retail)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-retail)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='wholesale'\n                            type='natural'\n                            fill='var(--color-wholesale)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-wholesale)'\n                            stackId='a'\n                        />\n                        <Chart.Legend content={<Chart.LegendContent />} />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/scatter/scatter-chart-basic-demo": {
    "component": "@/components/docs/charts/scatter/scatter-chart-basic-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Scatter, ScatterChart, XAxis, YAxis, ZAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = Array.from({ length: 30 }, (_, index) => ({\n    x: Math.floor(Math.random() * 500 + 50),\n    y: Math.floor(Math.random() * 30000 + 2000),\n    z: Math.floor(Math.random() * 200 + 10),\n    store: `Store ${index + 1}`\n}))\n\nconst chartConfig = {\n    performance: {\n        label: 'Store Performance',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function StorePerformanceAnalysis() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Store Performance Analysis'\n                description='Insights into revenue, footfall, and average order value across stores'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='max-h-min min-h-32'>\n                    <ScatterChart>\n                        <CartesianGrid strokeDasharray='3 3' />\n                        <XAxis\n                            type='number'\n                            dataKey='x'\n                            name='Footfall'\n                            unit='k'\n                            tickLine={false}\n                            axisLine={false}\n                        />\n                        <YAxis\n                            type='number'\n                            dataKey='y'\n                            name='Revenue'\n                            unit='$'\n                            tickLine={false}\n                            axisLine={false}\n                        />\n                        <ZAxis type='number' dataKey='z' name='Avg Order Value' unit='$' />\n                        <Chart.Tooltip content={<Chart.TooltipContent indicator='dashed' />} />\n                        <Scatter data={data} fill='var(--chart-1)' />\n                    </ScatterChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-donut-active-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-donut-active-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart, Sector } from 'recharts'\nimport type { PieSectorDataItem } from 'recharts/types/polar/Pie'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 500, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 300, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 450, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 200, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 100, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutActiveDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Allocation by Category'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='sales'\n                            nameKey='category'\n                            innerRadius={60}\n                            strokeWidth={5}\n                            activeIndex={0}\n                            activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                                <Sector {...props} outerRadius={outerRadius + 10} />\n                            )}\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-label-list-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-label-list-demo",
    "raw": "'use client'\n\nimport { LabelList, Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { manufacturer: 'Tesla', marketShare: 500, fill: 'var(--color-tesla)' },\n    { manufacturer: 'Rivian', marketShare: 150, fill: 'var(--color-rivian)' },\n    { manufacturer: 'Ford', marketShare: 200, fill: 'var(--color-ford)' },\n    { manufacturer: 'Lucid Motors', marketShare: 120, fill: 'var(--color-lucid)' },\n    { manufacturer: 'Others', marketShare: 80, fill: 'var(--color-others)' }\n]\n\nconst chartConfig = {\n    marketShare: {\n        label: 'Market Share'\n    },\n    tesla: {\n        label: 'Tesla',\n        color: 'var(--chart-1)'\n    },\n    rivian: {\n        label: 'Rivian',\n        color: 'var(--chart-2)'\n    },\n    ford: {\n        label: 'Ford',\n        color: 'var(--chart-3)'\n    },\n    lucid: {\n        label: 'Lucid Motors',\n        color: 'var(--chart-4)'\n    },\n    others: {\n        label: 'Others',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLabelListDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='EV Market Share by Manufacturer'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    config={chartConfig}\n                    className='[&_.recharts-text]:fill-bg mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent nameKey='marketShare' hideLabel />}\n                        />\n                        <Pie data={chartData} dataKey='marketShare'>\n                            <LabelList\n                                dataKey='manufacturer'\n                                className='fill-bg'\n                                stroke='none'\n                                fontSize={12}\n                                formatter={(value: keyof typeof chartConfig) =>\n                                    chartConfig[value]?.label\n                                }\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-controlled-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-controlled-demo",
    "raw": "'use client'\n\nimport { useMemo, useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Label, Pie, PieChart, Sector } from 'recharts'\nimport type { PieSectorDataItem } from 'recharts/types/polar/Pie'\n\nimport { Card, Chart, type ChartConfig, ChartStyle, Select } from '@/components/ui'\n\nconst data = [\n    { month: 'january', sales: 3186, fill: 'var(--color-january)' },\n    { month: 'february', sales: 2305, fill: 'var(--color-february)' },\n    { month: 'march', sales: 4237, fill: 'var(--color-march)' },\n    { month: 'april', sales: 4173, fill: 'var(--color-april)' },\n    { month: 'may', sales: 5209, fill: 'var(--color-may)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    sales: {\n        label: 'Sales'\n    },\n    profit: {\n        label: 'Profit'\n    },\n    january: {\n        label: 'January',\n        color: 'var(--chart-1)'\n    },\n    february: {\n        label: 'February',\n        color: 'var(--chart-2)'\n    },\n    march: {\n        label: 'March',\n        color: 'var(--chart-3)'\n    },\n    april: {\n        label: 'April',\n        color: 'var(--chart-4)'\n    },\n    may: {\n        label: 'May',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartControlledDemo() {\n    const id = 'pie-interactive'\n    const [activeMonth, setActiveMonth] = useState<Key>(data[0]!.month)\n\n    const activeIndex = useMemo(\n        () => data.findIndex((item) => item.month === activeMonth),\n        [activeMonth]\n    )\n    const months = useMemo(() => data.map((item) => item.month), [])\n\n    return (\n        <Card data-chart={id} className='flex flex-col'>\n            <ChartStyle id={id} config={config} />\n            <Card.Header className='flex-row items-start space-y-0 pb-0'>\n                <div className='grid w-full gap-1'>\n                    <Card.Title className='capitalize'>{activeMonth}</Card.Title>\n                    <Card.Description>\n                        The total sales for the month is{' '}\n                        <strong className='font-semibold'>\n                            {data[activeIndex]?.sales.toLocaleString()}\n                        </strong>\n                    </Card.Description>\n                </div>\n                <Select\n                    selectedKey={activeMonth}\n                    onSelectionChange={setActiveMonth}\n                    className='ml-auto'\n                    aria-label='Select a value'\n                >\n                    {months.map((key) => {\n                        const _config = config[key as keyof typeof config]\n\n                        if (!_config) {\n                            return null\n                        }\n\n                        return (\n                            <Select.Item key={key} id={key}>\n                                {_config?.label}\n                            </Select.Item>\n                        )\n                    })}\n                </Select>\n            </Card.Header>\n            <Card.Content className='flex flex-1 justify-center pb-0'>\n                <Chart\n                    id={id}\n                    config={config}\n                    className='mx-auto aspect-square w-full max-w-[315px]'\n                >\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={data}\n                            dataKey='sales'\n                            nameKey='month'\n                            innerRadius={60}\n                            strokeWidth={5}\n                            activeIndex={activeIndex}\n                            activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                                <g>\n                                    <Sector {...props} outerRadius={outerRadius + 10} />\n                                    <Sector\n                                        {...props}\n                                        outerRadius={outerRadius + 25}\n                                        innerRadius={outerRadius + 12}\n                                    />\n                                </g>\n                            )}\n                        >\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg text-2xl font-semibold'\n                                                >\n                                                    {data[activeIndex]?.sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-basic-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-basic-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Sales', amount: 275, fill: 'var(--color-sales)' },\n    { category: 'Marketing', amount: 200, fill: 'var(--color-marketing)' },\n    { category: 'IT', amount: 187, fill: 'var(--color-it)' },\n    { category: 'HR', amount: 173, fill: 'var(--color-hr)' },\n    { category: 'Operations', amount: 90, fill: 'var(--color-operations)' }\n]\n\nconst chartConfig = {\n    amount: {\n        label: 'Amount'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    marketing: {\n        label: 'Marketing',\n        color: 'var(--chart-2)'\n    },\n    it: {\n        label: 'IT',\n        color: 'var(--chart-3)'\n    },\n    hr: {\n        label: 'HR',\n        color: 'var(--chart-4)'\n    },\n    operations: {\n        label: 'Operations',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Departmental Budget Allocation</Card.Title>\n                <Card.Description>Jan - Jun 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie data={chartData} dataKey='amount' nameKey='category' />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-stacked-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst northAmericaData = [\n    { region: 'North America', sales: 500, fill: 'var(--color-north-america)' },\n    { region: 'Europe', sales: 300, fill: 'var(--color-europe)' },\n    { region: 'Asia', sales: 400, fill: 'var(--color-asia)' },\n    { region: 'Africa', sales: 150, fill: 'var(--color-africa)' },\n    { region: 'South America', sales: 100, fill: 'var(--color-south-america)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    northAmerica: {\n        label: 'North America',\n        color: 'var(--chart-1)'\n    },\n    europe: {\n        label: 'Europe',\n        color: 'var(--chart-2)'\n    },\n    asia: {\n        label: 'Asia',\n        color: 'var(--chart-3)'\n    },\n    africa: {\n        label: 'Africa',\n        color: 'var(--chart-4)'\n    },\n    southAmerica: {\n        label: 'South America',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartStackedDemo() {\n    return (\n        <Card>\n            <Card.Header title='Sales Distribution by Region' description='January - June 2024' />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    labelKey='sales'\n                                    nameKey='region'\n                                    indicator='line'\n                                    labelFormatter={(_, payload) => {\n                                        return chartConfig[\n                                            payload?.[0]!.dataKey as keyof typeof chartConfig\n                                        ].label\n                                    }}\n                                />\n                            }\n                        />\n                        <Pie data={northAmericaData} dataKey='sales' outerRadius={60} />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-label-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-label-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 275, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 187, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 173, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 90, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Allocation by Category'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    config={chartConfig}\n                    className='[&_.recharts-pie-label-text]:fill-fg mx-auto aspect-square max-h-[250px] pb-0'\n                >\n                    <PieChart>\n                        <Chart.Tooltip content={<Chart.TooltipContent hideLabel />} />\n                        <Pie data={chartData} dataKey='sales' label nameKey='category' />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-legend-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-legend-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { region: 'tesla', visitors: 275, fill: 'var(--color-tesla)' },\n    { region: 'rivian', visitors: 200, fill: 'var(--color-rivian)' },\n    { region: 'ford', visitors: 187, fill: 'var(--color-ford)' },\n    { region: 'lucid', visitors: 173, fill: 'var(--color-lucid)' },\n    { region: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    tesla: {\n        label: 'Tesla',\n        color: 'var(--chart-1)'\n    },\n    rivian: {\n        label: 'Rivian',\n        color: 'var(--chart-2)'\n    },\n    ford: {\n        label: 'Ford',\n        color: 'var(--chart-3)'\n    },\n    lucid: {\n        label: 'Lucid',\n        color: 'var(--chart-4)'\n    },\n    other: {\n        label: 'Other',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='EV Market'\n                description='Showing total visitors for the first half of 2024 by region'\n                className='items-center pb-0'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[300px]'>\n                    <PieChart>\n                        <Pie data={chartData} dataKey='visitors' />\n                        <Chart.Legend\n                            content={<Chart.LegendContent nameKey='region' />}\n                            className='-translate-y-2 flex-wrap gap-2 *:basis-1/4 *:justify-center'\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-custom-label-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Sales', amount: 275, fill: 'var(--color-sales)' },\n    { category: 'Marketing', amount: 200, fill: 'var(--color-marketing)' },\n    { category: 'IT', amount: 187, fill: 'var(--color-it)' },\n    { category: 'HR', amount: 173, fill: 'var(--color-hr)' },\n    { category: 'Operations', amount: 90, fill: 'var(--color-operations)' }\n]\n\nconst chartConfig = {\n    amount: {\n        label: 'Amount'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    marketing: {\n        label: 'Marketing',\n        color: 'var(--chart-2)'\n    },\n    it: {\n        label: 'IT',\n        color: 'var(--chart-3)'\n    },\n    hr: {\n        label: 'HR',\n        color: 'var(--chart-4)'\n    },\n    operations: {\n        label: 'Operations',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Departmental Budget Allocation</Card.Title>\n                <Card.Description>Jan - Jun 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px] px-0'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent nameKey='amount' hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='amount'\n                            labelLine={false}\n                            label={({ payload, ...props }) => {\n                                return (\n                                    <text\n                                        cx={props.cx}\n                                        cy={props.cy}\n                                        x={props.x}\n                                        y={props.y}\n                                        textAnchor={props.textAnchor}\n                                        dominantBaseline={props.dominantBaseline}\n                                        fill='var(--fg)'\n                                    >\n                                        {payload.amount}\n                                    </text>\n                                )\n                            }}\n                            nameKey='category'\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-donut-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-donut-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 275, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 187, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 173, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 90, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Allocation by Category'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie data={chartData} dataKey='sales' nameKey='category' innerRadius={60} />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-none-separator-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-none-separator-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { manufacturer: 'Tesla', marketShare: 275, fill: 'var(--color-tesla)' },\n    { manufacturer: 'Rivian', marketShare: 200, fill: 'var(--color-rivian)' },\n    { manufacturer: 'Ford', marketShare: 187, fill: 'var(--color-ford)' },\n    { manufacturer: 'Lucid Motors', marketShare: 173, fill: 'var(--color-lucid)' },\n    { manufacturer: 'Others', marketShare: 90, fill: 'var(--color-others)' }\n]\n\nconst chartConfig = {\n    marketShare: {\n        label: 'Market Share'\n    },\n    tesla: {\n        label: 'Tesla',\n        color: 'var(--chart-1)'\n    },\n    rivian: {\n        label: 'Rivian',\n        color: 'var(--chart-2)'\n    },\n    ford: {\n        label: 'Ford',\n        color: 'var(--chart-3)'\n    },\n    lucid: {\n        label: 'Lucid Motors',\n        color: 'var(--chart-4)'\n    },\n    others: {\n        label: 'Others',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartNoneSeparatorDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Market Share'\n                description='January - June 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='marketShare'\n                            nameKey='manufacturer'\n                            stroke='0'\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-donut-with-text-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-donut-with-text-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\n\nimport { Label, Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 275, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 287, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 173, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 190, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutWithTextDemo() {\n    const totalSales = useMemo(() => {\n        return chartData.reduce((acc, curr) => acc + curr.sales, 0)\n    }, [])\n\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Sales Allocation by Category</Card.Title>\n                <Card.Description>Jan - Jun 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='sales'\n                            nameKey='category'\n                            innerRadius={60}\n                            strokeWidth={5}\n                        >\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg text-3xl font-bold'\n                                                >\n                                                    {totalSales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Sales\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-lines-only-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-lines-only-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186, profit: 160 },\n    { month: 'Feb', revenue: 185, profit: 170 },\n    { month: 'Mar', revenue: 207, profit: 180 },\n    { month: 'Apr', revenue: 173, profit: 160 },\n    { month: 'May', revenue: 160, profit: 190 },\n    { month: 'Jun', revenue: 174, profit: 204 },\n    { month: 'Jul', revenue: 190, profit: 210 },\n    { month: 'Aug', revenue: 200, profit: 220 },\n    { month: 'Sep', revenue: 210, profit: 230 },\n    { month: 'Oct', revenue: 220, profit: 240 },\n    { month: 'Nov', revenue: 230, profit: 250 },\n    { month: 'Dec', revenue: 240, profit: 260 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartLinesOnlyDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Revenue vs Profit'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid radialLines={false} />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0}\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                        />\n                        <Radar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            fillOpacity={0}\n                            stroke='var(--color-profit)'\n                            strokeWidth={2}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-custom-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-custom-demo",
    "raw": "'use client'\n\nimport { PolarGrid, PolarRadiusAxis, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, expenses: 80 },\n    { month: 'Feb', sales: 305, expenses: 200 },\n    { month: 'Mar', sales: 237, expenses: 120 },\n    { month: 'Apr', sales: 73, expenses: 190 },\n    { month: 'May', sales: 209, expenses: 130 },\n    { month: 'Jun', sales: 214, expenses: 140 },\n    { month: 'Jul', sales: 230, expenses: 150 },\n    { month: 'Aug', sales: 250, expenses: 170 },\n    { month: 'Sep', sales: 270, expenses: 180 },\n    { month: 'Oct', sales: 290, expenses: 200 },\n    { month: 'Nov', sales: 310, expenses: 220 },\n    { month: 'Dec', sales: 330, expenses: 250 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function Component() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales vs Expenses'\n                description='Comparing sales and expenses for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' labelKey='month' />}\n                        />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='expenses' fill='var(--color-expenses)' />\n                        <PolarRadiusAxis\n                            angle={60}\n                            stroke='var(--fg)'\n                            orientation='middle'\n                            axisLine={false}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-filled-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-filled-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 285 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 203 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 264 },\n    { month: 'Jul', revenue: 290 },\n    { month: 'Aug', revenue: 310 },\n    { month: 'Sep', revenue: 330 },\n    { month: 'Oct', revenue: 350 },\n    { month: 'Nov', revenue: 370 },\n    { month: 'Dec', revenue: 390 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridFilledDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Revenue Radar Chart'\n                description='Revenue data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarGrid className='fill-[--color-revenue] opacity-20' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar dataKey='revenue' fill='var(--color-revenue)' fillOpacity={0.5} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-custom-label-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 45000, expenses: 30000 },\n    { month: 'Feb', revenue: 50000, expenses: 32000 },\n    { month: 'Mar', revenue: 47000, expenses: 31000 },\n    { month: 'Apr', revenue: 52000, expenses: 35000 },\n    { month: 'May', revenue: 48000, expenses: 33000 },\n    { month: 'Jun', revenue: 51000, expenses: 34000 },\n    { month: 'Jul', revenue: 53000, expenses: 36000 },\n    { month: 'Aug', revenue: 55000, expenses: 37000 },\n    { month: 'Sep', revenue: 54000, expenses: 35000 },\n    { month: 'Oct', revenue: 56000, expenses: 38000 },\n    { month: 'Nov', revenue: 58000, expenses: 39000 },\n    { month: 'Dec', revenue: 60000, expenses: 40000 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Monthly Financial Overview'\n                description='Revenue and expenses for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis\n                            dataKey='month'\n                            tick={({ x, y, textAnchor, index, ...props }) => {\n                                const data = chartData[index]!\n\n                                return (\n                                    <text\n                                        x={x}\n                                        y={index === 0 ? y - 10 : y}\n                                        textAnchor={textAnchor}\n                                        fontSize={13}\n                                        fontWeight={500}\n                                        {...props}\n                                    >\n                                        <tspan>{data.revenue}</tspan>\n                                        <tspan className='fill-muted-fg'>/</tspan>\n                                        <tspan>{data.expenses}</tspan>\n                                        <tspan\n                                            x={x}\n                                            dy={'1rem'}\n                                            fontSize={12}\n                                            className='fill-muted-fg'\n                                        >\n                                            {data.month}\n                                        </tspan>\n                                    </text>\n                                )\n                            }}\n                        />\n\n                        <PolarGrid />\n                        <Radar dataKey='revenue' fill='var(--color-revenue)' fillOpacity={0.6} />\n                        <Radar dataKey='expenses' fill='var(--color-expenses)' />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-dots-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-dots-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 273 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 220 },\n    { month: 'Aug', revenue: 230 },\n    { month: 'Sep', revenue: 240 },\n    { month: 'Oct', revenue: 250 },\n    { month: 'Nov', revenue: 260 },\n    { month: 'Dec', revenue: 270 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center'>\n                <Card.Title>Monthly Revenue Radar Chart</Card.Title>\n                <Card.Description>Displaying revenue trends for Jan - Dec 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-circle-no-lines-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-circle-no-lines-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 203 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 220 },\n    { month: 'Aug', revenue: 250 },\n    { month: 'Sep', revenue: 270 },\n    { month: 'Oct', revenue: 290 },\n    { month: 'Nov', revenue: 310 },\n    { month: 'Dec', revenue: 330 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function Component() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Monthly Revenue Breakdown'\n                description='Revenue data displayed for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarGrid gridType='circle' radialLines={false} />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-icons-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-icons-demo",
    "raw": "'use client'\n\nimport { IconBadgeDollar, IconShoppingBag } from 'hq-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 250, profit: 150 },\n    { month: 'Aug', sales: 270, profit: 160 },\n    { month: 'Sep', sales: 290, profit: 170 },\n    { month: 'Oct', sales: 310, profit: 180 },\n    { month: 'Nov', sales: 330, profit: 190 },\n    { month: 'Dec', sales: 350, profit: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)',\n        icon: IconShoppingBag\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)',\n        icon: IconBadgeDollar\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartIconsDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales and Profit'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: -40,\n                            bottom: -10\n                        }}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                        <Chart.Legend className='mt-8' content={<Chart.LegendContent />} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-multiple-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 230, profit: 150 },\n    { month: 'Aug', sales: 250, profit: 160 },\n    { month: 'Sep', sales: 270, profit: 170 },\n    { month: 'Oct', sales: 290, profit: 180 },\n    { month: 'Nov', sales: 310, profit: 190 },\n    { month: 'Dec', sales: 330, profit: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales and Profit Comparison'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-circle-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-circle-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', profit: 186 },\n    { month: 'Feb', profit: 305 },\n    { month: 'Mar', profit: 237 },\n    { month: 'Apr', profit: 273 },\n    { month: 'May', profit: 209 },\n    { month: 'Jun', profit: 214 },\n    { month: 'Jul', profit: 220 },\n    { month: 'Aug', profit: 230 },\n    { month: 'Sep', profit: 240 },\n    { month: 'Oct', profit: 250 },\n    { month: 'Nov', profit: 260 },\n    { month: 'Dec', profit: 270 }\n]\n\nconst chartConfig = {\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function Component() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Profit Distribution'\n                description='Profit trends displayed for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarGrid gridType='circle' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-none-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-none-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 273 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 250 },\n    { month: 'Aug', revenue: 270 },\n    { month: 'Sep', revenue: 290 },\n    { month: 'Oct', revenue: 310 },\n    { month: 'Nov', revenue: 330 },\n    { month: 'Dec', revenue: 350 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridNoneDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Revenue Growth'\n                description='Revenue trends for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-radius-axis-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-radius-axis-demo",
    "raw": "'use client'\n\nimport { PolarGrid, PolarRadiusAxis, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 230, profit: 150 },\n    { month: 'Aug', sales: 250, profit: 160 },\n    { month: 'Sep', sales: 270, profit: 170 },\n    { month: 'Oct', sales: 290, profit: 180 },\n    { month: 'Nov', sales: 310, profit: 190 },\n    { month: 'Dec', sales: 330, profit: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartRadiusAxisDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales and Profit Analysis'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' labelKey='month' />}\n                        />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                        <PolarRadiusAxis\n                            angle={60}\n                            stroke='var(--fg)'\n                            orientation='middle'\n                            axisLine={false}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-legend-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-legend-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, expenses: 80 },\n    { month: 'Feb', sales: 305, expenses: 200 },\n    { month: 'Mar', sales: 237, expenses: 120 },\n    { month: 'Apr', sales: 73, expenses: 190 },\n    { month: 'May', sales: 209, expenses: 130 },\n    { month: 'Jun', sales: 214, expenses: 140 },\n    { month: 'Jul', sales: 230, expenses: 150 },\n    { month: 'Aug', sales: 250, expenses: 160 },\n    { month: 'Sep', sales: 270, expenses: 170 },\n    { month: 'Oct', sales: 290, expenses: 180 },\n    { month: 'Nov', sales: 310, expenses: 190 },\n    { month: 'Dec', sales: 330, expenses: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales vs Expenses'\n                description='Comparing data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: -40,\n                            bottom: -10\n                        }}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='expenses' fill='var(--color-expenses)' />\n                        <Chart.Legend className='mt-8' content={<Chart.LegendContent />} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-basic-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-basic-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 186 },\n    { category: 'Clothing', sales: 305 },\n    { category: 'Groceries', sales: 237 },\n    { category: 'Furniture', sales: 273 },\n    { category: 'Toys', sales: 209 },\n    { category: 'Beauty', sales: 214 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='By Category'\n                description='Sales performance by category (Jan - Jun 2024)'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarAngleAxis dataKey='category' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-circle-filled-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-circle-filled-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186 },\n    { month: 'Feb', sales: 285 },\n    { month: 'Mar', sales: 237 },\n    { month: 'Apr', sales: 203 },\n    { month: 'May', sales: 209 },\n    { month: 'Jun', sales: 264 },\n    { month: 'Jul', sales: 290 },\n    { month: 'Aug', sales: 310 },\n    { month: 'Sep', sales: 320 },\n    { month: 'Oct', sales: 330 },\n    { month: 'Nov', sales: 350 },\n    { month: 'Dec', sales: 370 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridCircleFilledDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Monthly Sales Overview'\n                description='Displaying sales data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarGrid className='fill-[--color-sales] opacity-20' gridType='circle' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.5} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-label-demo": {
    "component": "@/components/docs/charts/line/line-chart-label-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, LabelList, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186, expenses: 80 },\n    { month: 'Feb', revenue: 305, expenses: 200 },\n    { month: 'Mar', revenue: 237, expenses: 120 },\n    { month: 'Apr', revenue: 73, expenses: 190 },\n    { month: 'May', revenue: 209, expenses: 130 },\n    { month: 'Jun', revenue: 214, expenses: 140 },\n    { month: 'Jul', revenue: 260, expenses: 160 },\n    { month: 'Aug', revenue: 320, expenses: 180 },\n    { month: 'Sep', revenue: 280, expenses: 150 },\n    { month: 'Oct', revenue: 350, expenses: 200 },\n    { month: 'Nov', revenue: 400, expenses: 210 },\n    { month: 'Dec', revenue: 450, expenses: 230 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header title='Annual Revenue & Expenses Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 20,\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-revenue)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-fg'\n                                fontSize={12}\n                            />\n                        </Line>\n                        <Line\n                            dataKey='expenses'\n                            type='natural'\n                            stroke='var(--color-expenses)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-expenses)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-fg'\n                                fontSize={12}\n                            />\n                        </Line>\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-dots-color-demo": {
    "component": "@/components/docs/charts/line/line-chart-dots-color-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Dot, Line, LineChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { department: 'Marketing', expenses: 275, fill: 'var(--color-marketing)' },\n    { department: 'Sales', expenses: 200, fill: 'var(--color-sales)' },\n    { department: 'IT', expenses: 187, fill: 'var(--color-it)' },\n    { department: 'HR', expenses: 173, fill: 'var(--color-hr)' },\n    { department: 'Operations', expenses: 90, fill: 'var(--color-operations)' }\n]\n\nconst chartConfig = {\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    },\n    marketing: {\n        label: 'Marketing',\n        color: 'var(--chart-1)'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-2)'\n    },\n    it: {\n        label: 'IT',\n        color: 'var(--chart-3)'\n    },\n    hr: {\n        label: 'HR',\n        color: 'var(--chart-4)'\n    },\n    operations: {\n        label: 'Operations',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsColorDemo() {\n    return (\n        <Card>\n            <Card.Header title='Departmental Expenses Overview' description='Jan - Jun 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 24,\n                            left: 24,\n                            right: 24\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={\n                                <Chart.TooltipContent\n                                    indicator='line'\n                                    nameKey='expenses'\n                                    hideLabel\n                                />\n                            }\n                        />\n                        <Line\n                            dataKey='expenses'\n                            type='natural'\n                            stroke='var(--color-expenses)'\n                            strokeWidth={2}\n                            dot={({ payload, ...props }) => {\n                                return (\n                                    <Dot\n                                        key={payload.department}\n                                        r={5}\n                                        cx={props.cx}\n                                        cy={props.cy}\n                                        fill={payload.fill}\n                                        stroke={payload.fill}\n                                    />\n                                )\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-multiple-demo": {
    "component": "@/components/docs/charts/line/line-chart-multiple-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'short' })\n    return {\n        month,\n        revenue: Math.floor(Math.random() * 300 + 200),\n        expenses: Math.floor(Math.random() * 150 + 50)\n    }\n})\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Revenue and Expenses Trend'\n                description='Monthly trends for revenue and expenses over the last 24 months'\n                className='items-center pb-0'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <Line\n                            dataKey='revenue'\n                            type='monotone'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                        <Line\n                            dataKey='expenses'\n                            type='monotone'\n                            stroke='var(--color-expenses)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-controlled-demo": {
    "component": "@/components/docs/charts/line/line-chart-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig, Toggle } from '@/components/ui'\n\nconst generateChartData = (startDate: string, endDate: string) => {\n    const result = []\n    const currentDate = new Date(startDate)\n\n    while (currentDate <= new Date(endDate)) {\n        const date = currentDate.toISOString().split('T')[0]\n        result.push({\n            date,\n            revenue: Math.floor(Math.random() * 5000), // Random revenue value\n            expenses: Math.floor(Math.random() * 3000) // Random expenses value\n        })\n        currentDate.setDate(currentDate.getDate() + 1)\n    }\n\n    return result\n}\n\nconst chartData = generateChartData('2024-04-01', '2024-06-30')\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartControlledDemo() {\n    const [activeChart, setActiveChart] = useState<keyof typeof chartConfig>('revenue')\n\n    return (\n        <Card>\n            <Card.Header className='flex flex-row items-center justify-between'>\n                <div className='space-y-1'>\n                    <Card.Title>Revenue vs Expenses</Card.Title>\n                    <Card.Description>\n                        Tracking daily revenue and expenses over the last 3 months\n                    </Card.Description>\n                </div>\n                <div className='flex gap-x-1'>\n                    {['revenue', 'expenses'].map((key) => {\n                        const chart = key as keyof typeof chartConfig\n                        return (\n                            <Toggle\n                                key={chart}\n                                isSelected={activeChart === chart}\n                                onPress={() => setActiveChart(chart)}\n                            >\n                                {chartConfig[chart].label}\n                            </Toggle>\n                        )\n                    })}\n                </div>\n            </Card.Header>\n            <Card.Content className='px-2 sm:p-6'>\n                <Chart config={chartConfig} className='aspect-auto h-[250px] w-full'>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            minTickGap={32}\n                            tickFormatter={(value) => {\n                                const date = new Date(value)\n                                return date.toLocaleDateString('en-US', {\n                                    month: 'short',\n                                    day: 'numeric'\n                                })\n                            }}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    className='w-[150px]'\n                                    nameKey='views'\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString('en-US', {\n                                            month: 'short',\n                                            day: 'numeric',\n                                            year: 'numeric'\n                                        })\n                                    }}\n                                />\n                            }\n                        />\n                        <Line\n                            dataKey={activeChart}\n                            type='monotone'\n                            stroke={`var(--color-${activeChart})`}\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-step-demo": {
    "component": "@/components/docs/charts/line/line-chart-step-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 12 }, (_, index) => {\n    const date = new Date(2024, index)\n    const month = date.toLocaleDateString('en-US', { month: 'short' })\n    return {\n        month,\n        sales: Math.floor(Math.random() * 300 + 150)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartStepDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Sales Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='sales'\n                            type='step'\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-custom-label-demo": {
    "component": "@/components/docs/charts/line/line-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, LabelList, Line, LineChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { platform: 'Instagram', users: 275, fill: 'var(--color-instagram)' },\n    { platform: 'TikTok', users: 200, fill: 'var(--color-tiktok)' },\n    { platform: 'Twitter', users: 187, fill: 'var(--color-twitter)' },\n    { platform: 'LinkedIn', users: 173, fill: 'var(--color-linkedin)' },\n    { platform: 'Other', users: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    users: {\n        label: 'Users',\n        color: 'var(--chart-2)'\n    },\n    Instagram: {\n        label: 'Instagram',\n        color: 'var(--chart-1)'\n    },\n    TikTok: {\n        label: 'TikTok',\n        color: 'var(--chart-2)'\n    },\n    Twitter: {\n        label: 'Twitter',\n        color: 'var(--chart-3)'\n    },\n    LinkedIn: {\n        label: 'LinkedIn',\n        color: 'var(--chart-4)'\n    },\n    Other: {\n        label: 'Other',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header title='Platform User Growth' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 24,\n                            left: 24,\n                            right: 24\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={\n                                <Chart.TooltipContent indicator='line' nameKey='users' hideLabel />\n                            }\n                        />\n                        <Line\n                            dataKey='users'\n                            type='natural'\n                            stroke='var(--color-users)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-users)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-fg'\n                                fontSize={12}\n                                dataKey='platform'\n                                formatter={(value: keyof typeof chartConfig) =>\n                                    chartConfig[value]?.label\n                                }\n                            />\n                        </Line>\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-custom-dots-demo": {
    "component": "@/components/docs/charts/line/line-chart-custom-dots-demo",
    "raw": "'use client'\n\nimport { IconBadgeDollar } from 'hq-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nconst chartData = months.map((month) => ({\n    month,\n    sales: Math.floor(Math.random() * 300) + 150,\n    profit: Math.floor(Math.random() * 150) + 50\n}))\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartCustomDotsDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Monthly Sales & Profit'\n                description='Visualizing Monthly Sales & Profit for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='sales'\n                            type='natural'\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                            dot={({ cx, cy, payload }) => {\n                                const r = 24\n                                return (\n                                    <IconBadgeDollar\n                                        className='text-(--color-profit)'\n                                        key={payload.month}\n                                        x={cx - r / 2}\n                                        y={cy - r / 2}\n                                        width={r}\n                                        height={r}\n                                        fill='var(--bg)'\n                                        stroke='var(--color-sales)'\n                                    />\n                                )\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-dots-demo": {
    "component": "@/components/docs/charts/line/line-chart-dots-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186, profit: 80 },\n    { month: 'Feb', revenue: 305, profit: 200 },\n    { month: 'Mar', revenue: 237, profit: 120 },\n    { month: 'Apr', revenue: 73, profit: 190 },\n    { month: 'May', revenue: 209, profit: 130 },\n    { month: 'Jun', revenue: 214, profit: 140 },\n    { month: 'Jul', revenue: 240, profit: 160 },\n    { month: 'Aug', revenue: 250, profit: 170 },\n    { month: 'Sep', revenue: 260, profit: 180 },\n    { month: 'Oct', revenue: 275, profit: 190 },\n    { month: 'Nov', revenue: 290, profit: 200 },\n    { month: 'Dec', revenue: 300, profit: 220 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Revenue and Profit' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-revenue)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-linear-demo": {
    "component": "@/components/docs/charts/line/line-chart-linear-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 73 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 250 },\n    { month: 'Aug', revenue: 320 },\n    { month: 'Sep', revenue: 280 },\n    { month: 'Oct', revenue: 350 },\n    { month: 'Nov', revenue: 400 },\n    { month: 'Dec', revenue: 450 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header title='Annual Revenue Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='revenue'\n                            type='linear'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-basic-demo": {
    "component": "@/components/docs/charts/line/line-chart-basic-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 1500 },\n    { month: 'Feb', revenue: 3200 },\n    { month: 'Mar', revenue: 2900 },\n    { month: 'Apr', revenue: 2100 },\n    { month: 'May', revenue: 4000 },\n    { month: 'Jun', revenue: 3700 },\n    { month: 'Jul', revenue: 4300 },\n    { month: 'Aug', revenue: 4900 },\n    { month: 'Sep', revenue: 4700 },\n    { month: 'Oct', revenue: 5200 },\n    { month: 'Nov', revenue: 6000 },\n    { month: 'Dec', revenue: 7200 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Revenue Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-default-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-default-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        groceries: Math.floor(Math.random() * 300 + 100),\n        utilities: Math.floor(Math.random() * 400 + 200)\n    }\n})\n\nconst chartConfig = {\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-1)'\n    },\n    utilities: {\n        label: 'Utilities',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartAdvanceDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Expense Breakdown'\n                description='Analyzing grocery and utility expenses for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='groceries'\n                            stackId='a'\n                            fill='var(--color-groceries)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='utilities'\n                            stackId='a'\n                            fill='var(--color-utilities)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    hideLabel\n                                    className='w-[180px]'\n                                    formatter={(value, name, item, index) => (\n                                        <>\n                                            <div\n                                                className='size-2.5 shrink-0 rounded-[2px] bg-[--color-bg]'\n                                                style={\n                                                    {\n                                                        '--color-bg': `var(--color-${name})`\n                                                    } as React.CSSProperties\n                                                }\n                                            />\n                                            {chartConfig[name as keyof typeof chartConfig]?.label ||\n                                                name}\n                                            <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                {value}\n                                                <span className='text-muted-fg font-normal'>\n                                                    USD\n                                                </span>\n                                            </div>\n                                            {index === 1 && (\n                                                <div className='text-foreground mt-1.5 flex basis-full items-center border-t pt-1.5 text-xs font-medium'>\n                                                    Total\n                                                    <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                        {item.payload.groceries +\n                                                            item.payload.utilities}\n                                                        <span className='text-muted-fg font-normal'>\n                                                            USD\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-no-label-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-no-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        products: Math.floor(Math.random() * 600 + 200),\n        services: Math.floor(Math.random() * 400 + 100)\n    }\n})\n\nconst chartConfig = {\n    products: {\n        label: 'Products',\n        color: 'var(--chart-1)'\n    },\n    services: {\n        label: 'Services',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartNoLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Products and Services Data'\n                description='Displaying products and services data over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='products'\n                            stackId='a'\n                            fill='var(--color-products)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='services'\n                            stackId='a'\n                            fill='var(--color-services)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent hideIndicator hideLabel />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-custom-label-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { date: '2024-07-15', sales: 450, profit: 300 },\n    { date: '2024-07-16', sales: 380, profit: 420 },\n    { date: '2024-07-17', sales: 520, profit: 120 },\n    { date: '2024-07-18', sales: 140, profit: 550 },\n    { date: '2024-07-19', sales: 600, profit: 350 },\n    { date: '2024-07-20', sales: 480, profit: 400 }\n]\n\nconst chartConfig = {\n    metrics: {\n        label: 'Metrics'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Weekly Performance Metrics'\n                description='Analyzing sales and profit trends for Jul 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => {\n                                return new Date(value).toLocaleDateString('en-US', {\n                                    weekday: 'short'\n                                })\n                            }}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='profit'\n                            stackId='a'\n                            fill='var(--color-profit)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent labelKey='metrics' indicator='line' />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-formatter-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-formatter-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 1000 + 200),\n        profit: Math.floor(Math.random() * 500 + 100)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartFormatterDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Sales and Profit'\n                description='Visualizing data for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='profit'\n                            stackId='a'\n                            fill='var(--color-profit)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    hideLabel\n                                    formatter={(value, name) => (\n                                        <div className='text-muted-fg flex min-w-[130px] items-center text-xs'>\n                                            {chartConfig[name as keyof typeof chartConfig]?.label ||\n                                                name}\n                                            <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                {value}\n                                                <span className='text-muted-fg font-normal'>\n                                                    USD\n                                                </span>\n                                            </div>\n                                        </div>\n                                    )}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-icons-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-icons-demo",
    "raw": "'use client'\n\nimport { IconCircleDollar, IconShoppingCart } from 'hq-icons'\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 500 + 100),\n        expenses: Math.floor(Math.random() * 300 + 50)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)',\n        icon: IconShoppingCart\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)',\n        icon: IconCircleDollar\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartIconsDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Financial Overview'\n                description='Sales and expenses for the past 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='expenses'\n                            stackId='a'\n                            fill='var(--color-expenses)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent hideLabel />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-no-indicator-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-no-indicator-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        revenue: Math.floor(Math.random() * 500 + 300),\n        cost: Math.floor(Math.random() * 300 + 150)\n    }\n})\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    cost: {\n        label: 'Cost',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartNoIndicatorDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Revenue and Costs'\n                description='Tracking revenue and costs over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='revenue'\n                            stackId='a'\n                            fill='var(--color-revenue)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='cost'\n                            stackId='a'\n                            fill='var(--color-cost)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent hideIndicator />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-advance-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-advance-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        coffee: Math.floor(Math.random() * 50 + 50),\n        snacks: Math.floor(Math.random() * 100 + 100)\n    }\n})\n\nconst chartConfig = {\n    coffee: {\n        label: 'Coffee',\n        color: 'var(--chart-1)'\n    },\n    snacks: {\n        label: 'Snacks',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartAdvanceDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Coffee & Snacks Expenses'\n                description='Tracking expenses on coffee and snacks for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='coffee'\n                            stackId='a'\n                            fill='var(--color-coffee)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='snacks'\n                            stackId='a'\n                            fill='var(--color-snacks)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    hideLabel\n                                    className='w-[180px]'\n                                    formatter={(value, name, item, index) => (\n                                        <>\n                                            <div\n                                                className='size-2.5 shrink-0 rounded-[2px] bg-(--color-bg)'\n                                                style={\n                                                    {\n                                                        '--color-bg': `var(--color-${name})`\n                                                    } as React.CSSProperties\n                                                }\n                                            />\n                                            {chartConfig[name as keyof typeof chartConfig]?.label ||\n                                                name}\n                                            <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                {value}\n                                                <span className='text-muted-fg font-normal'>\n                                                    USD\n                                                </span>\n                                            </div>\n                                            {/* Add this after the last item */}\n                                            {index === 1 && (\n                                                <div className='text-foreground mt-1.5 flex basis-full items-center border-t pt-1.5 text-xs font-medium'>\n                                                    Total\n                                                    <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                        {item.payload.coffee + item.payload.snacks}\n                                                        <span className='text-muted-fg font-normal'>\n                                                            USD\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-label-formatter-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-label-formatter-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 500 + 200),\n        profit: Math.floor(Math.random() * 300 + 100)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartLabelFormatterDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Financial Trends'\n                description='Sales and profit data for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='profit'\n                            stackId='a'\n                            fill='var(--color-profit)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString('en-US', {\n                                            month: 'long',\n                                            year: 'numeric'\n                                        })\n                                    }}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-line-indicator-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-line-indicator-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 500 + 200),\n        profit: Math.floor(Math.random() * 300 + 100)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartLineIndicatorDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Sales and Profit'\n                description='Sales and profit trends for the past 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='profit'\n                            stackId='a'\n                            fill='var(--color-profit)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent indicator='line' />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "overlays/popover/popover-placement-demo": {
    "component": "@/components/docs/overlays/popover/popover-placement-demo",
    "raw": "'use client'\n\nimport { PopoverProps } from 'react-aria-components'\n\nimport { Button, Popover } from '@/components/ui'\n\nconst placements: PopoverProps['placement'][] = [\n    'left top',\n    'top left',\n    'top',\n    'top right',\n    'right top',\n    'left',\n    'right',\n    'left bottom',\n    'bottom left',\n    'bottom',\n    'bottom right',\n    'right bottom'\n]\n\nexport default function PopoverPlacementDemo() {\n    return (\n        <div className='grid grid-cols-6 gap-2'>\n            {placements.map((place, i) => (\n                <Popover key={i}>\n                    <Button\n                        size='xs'\n                        variant='outline'\n                        className='nth-3:col-span-2 nth-10:col-span-2 nth-6:col-span-3 nth-7:col-span-3'\n                    >\n                        {place}\n                    </Button>\n                    <Popover.Content placement={place} className='p-4 min-w-64'>\n                        Popover shown at <strong>{place}</strong>\n                    </Popover.Content>\n                </Popover>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/popover/popover-arrow-demo": {
    "component": "@/components/docs/overlays/popover/popover-arrow-demo",
    "raw": "'use client'\n\nimport { IconMousePointerClick } from 'hq-icons'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverArrowDemo() {\n    return (\n        <Popover>\n            <Button>\n                <IconMousePointerClick />\n            </Button>\n            <Popover.Content showArrow={false} className='p-4'>\n                This popover doesn&apos;t have an arrow\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-demo": {
    "component": "@/components/docs/overlays/popover/popover-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Popover, TextField } from '@/components/ui'\n\nexport default function PopoverDemo() {\n    return (\n        <Popover>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Popover.Content className='min-w-96'>\n                    <Popover.Header>\n                        <Popover.Title>Login</Popover.Title>\n                        <Popover.Description>\n                            Enter your credentials to sign in.\n                        </Popover.Description>\n                    </Popover.Header>\n                    <Popover.Body className='space-y-4'>\n                        <TextField\n                            isRequired\n                            type='email'\n                            label='Email'\n                            placeholder='Enter your email'\n                        />\n                        <TextField\n                            isRequired\n                            label='Password'\n                            type='password'\n                            placeholder='Enter your password'\n                        />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Popover.Body>\n                    <Popover.Footer>\n                        <Button type='submit'>Login</Button>\n                    </Popover.Footer>\n                </Popover.Content>\n            </Form>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-controlled-demo": {
    "component": "@/components/docs/overlays/popover/popover-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverControlledDemo() {\n    const [open, setOpen] = React.useState<boolean>(false)\n    const [loading, setLoading] = React.useState<'idle' | 'loading' | 'success'>('idle')\n    const triggerRef = React.useRef<HTMLButtonElement>(null)\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button ref={triggerRef} onPress={() => setOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Popover.Content triggerRef={triggerRef} isOpen={open} onOpenChange={setOpen}>\n                <Popover.Header>\n                    <Popover.Title>Confirm Deletion</Popover.Title>\n                    <Popover.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button variant='outline' onPress={() => setOpen(false)}>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        variant={loading === 'success' ? 'success' : 'danger'}\n                        onPress={deleteAccount}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading'\n                            ? 'Deleting...'\n                            : loading === 'success'\n                              ? 'Deleted'\n                              : 'Delete'}\n                    </Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </>\n    )\n}\n"
  },
  "overlays/popover/popover-trigger-demo": {
    "component": "@/components/docs/overlays/popover/popover-trigger-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, Popover } from '@/components/ui'\n\nexport default function PopoverTriggerDemo() {\n    return (\n        <Popover>\n            <Popover.Trigger aria-label='Open Popover'>\n                <Avatar alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n            </Popover.Trigger>\n            <Popover.Content>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>\n                        We&apos;ll send you an email to log in.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/sheet/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBook,\n    IconBookOpen,\n    IconBrandGithub,\n    IconBrandGithubCopilot,\n    IconBuilding,\n    IconChartBar,\n    IconFileCode,\n    IconFilter,\n    IconGlobe,\n    IconHeart,\n    IconLogOut,\n    IconMessage,\n    IconSettings,\n    IconStar,\n    IconUser,\n    IconUsers\n} from 'hq-icons'\nimport { Group, Menu as MenuPrimitive } from 'react-aria-components'\n\nimport {\n    Avatar,\n    Button,\n    Checkbox,\n    Description,\n    Menu,\n    Modal,\n    Select,\n    Sheet,\n    TextField\n} from '@/components/ui'\n\nexport default function SheetMenuDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    return (\n        <>\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Modal.Header>\n                    <Modal.Title>Edit status</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='space-y-4'>\n                        <TextField\n                            prefix={<IconBrandGithub />}\n                            label='Status'\n                            placeholder=\"What's your status?\"\n                        />\n                        <Group>\n                            <Checkbox>Busy</Checkbox>\n                            <Description>\n                                When others mention you, assign you, or request your review, GitHub\n                                will let them know that you have limited availability.\n                            </Description>\n                        </Group>\n                        <Select label='Clear Status'>\n                            <Select.Item>Never</Select.Item>\n                            <Select.Item>in 30 Minutes</Select.Item>\n                            <Select.Item>in 1 Hour</Select.Item>\n                            <Select.Item>in 8 Hours</Select.Item>\n                            <Select.Item>after Today</Select.Item>\n                            <Select.Item>after a Week</Select.Item>\n                            <Select.Item>after a Month</Select.Item>\n                        </Select>\n                        <Select label='Visible to'>\n                            <Select.Item>Everyone</Select.Item>\n                            <Select.Item>Organization</Select.Item>\n                            <Select.Item>Public</Select.Item>\n                        </Select>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={closeModal}>\n                        Clear Status\n                    </Button>\n                    <Button onPress={closeModal}>Set Status</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <Sheet>\n                <Sheet.Trigger aria-label='Open menu'>\n                    <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' />\n                </Sheet.Trigger>\n                <Sheet.Content closeButton={false}>\n                    <Sheet.Header className='bg-background sticky top-0 flex flex-row items-center p-4 sm:gap-3'>\n                        <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' size='xl' />\n                        <div>\n                            <Sheet.Title>dq-alhq</Sheet.Title>\n                            <Sheet.Description>DQ Al-Haqqi</Sheet.Description>\n                        </div>\n                    </Sheet.Header>\n                    <Sheet.Body className='border-t px-0 sm:px-0'>\n                        <MenuPrimitive aria-label='Menu' className='divide-y'>\n                            <Menu.Section>\n                                <Menu.Item onAction={openModal}>\n                                    <IconBrandGithub />\n                                    <Menu.Label>Edit Status</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconUser />\n                                    <Menu.Label>Your profile</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBook />\n                                    <Menu.Label>Your repositories</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBrandGithubCopilot /> <Menu.Label>Your Copilot</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconChartBar /> <Menu.Label>Your projects</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconStar /> <Menu.Label>Your stars</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconFileCode /> <Menu.Label>Your gists</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBuilding /> <Menu.Label>Your organizations</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconGlobe /> <Menu.Label>Your enterprises</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconHeart />\n                                    <Menu.Label>Your sponsors</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconFilter /> <Menu.Label>Feature preview</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconSettings />\n                                    <Menu.Label>Settings</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconBookOpen /> <Menu.Label>GitHub Docs</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconUsers /> <Menu.Label>GitHub Support</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconMessage /> <Menu.Label>GitHub Community</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconLogOut /> <Menu.Label>Sign out</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                        </MenuPrimitive>\n                    </Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconBan, IconRotateCcw, IconTrash } from 'hq-icons'\nimport { Key } from 'react-aria-components'\n\nimport { Button, Menu, Sheet } from '@/components/ui'\n\nexport default function SheetMenuDemo() {\n    const [state, setState] = useState<Key>('')\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const executeAction = (action: string) => {\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n            setState('')\n            alert(action)\n        }, 3000)\n    }\n\n    const actions = (t: Key) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this user?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Button>Options</Button>\n                <Menu.Content onAction={setState}>\n                    <Menu.Item id='delete' isDanger>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='ban' isDanger>\n                        <IconBan />\n                        <Menu.Label>Ban</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='restore'>\n                        <IconRotateCcw />\n                        <Menu.Label>Restore</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Sheet.Content isOpen={state !== ''} onOpenChange={() => setState('')}>\n                <Sheet.Header>\n                    <Sheet.Title>{actions(state)?.title}</Sheet.Title>\n                    <Sheet.Description>{actions(state)?.description}</Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant={state === 'restore' ? 'primary' : 'danger'}\n                        isDisabled={loading}\n                        isPending={loading}\n                        onPress={actions(state)?.action}\n                    >\n                        {actions(state)?.confirmText}\n                    </Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-position-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-position-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { titleCase } from 'usemods'\n\nimport { Button, Sheet } from '@/components/ui'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetPositionDemo() {\n    const [sheetSide, setSheetSide] = React.useState<Side>('left')\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const sides: Side[] = ['top', 'left', 'right', 'bottom']\n\n    const openSheet = (side: Side, open: boolean) => {\n        setSheetSide(side)\n        setIsOpen(open)\n    }\n\n    return (\n        <>\n            <div className='grid grid-cols-2 gap-2'>\n                {sides.map((side, i) => (\n                    <Button\n                        variant='outline'\n                        onPress={() => openSheet(side, true)}\n                        key={i}\n                        className='first:col-span-full last:col-span-full'\n                    >\n                        {side}\n                    </Button>\n                ))}\n            </div>\n            <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen} side={sheetSide}>\n                <Sheet.Header>\n                    <Sheet.Title>{titleCase(sheetSide)}</Sheet.Title>\n                    <Sheet.Description>The sheet will go from {sheetSide} side.</Sheet.Description>\n                </Sheet.Header>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-controlled-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetControlledDemo() {\n    const [open, setOpen] = React.useState(false)\n    const [loading, setLoading] = React.useState<'idle' | 'loading' | 'success'>('idle')\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Sheet.Content isOpen={open} onOpenChange={setOpen}>\n                <Sheet.Header>\n                    <Sheet.Title>Confirm Deletion</Sheet.Title>\n                    <Sheet.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Footer>\n                    <Button variant='outline' onPress={() => setOpen(false)}>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        variant={loading === 'success' ? 'success' : 'danger'}\n                        onPress={deleteAccount}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading'\n                            ? 'Deleting...'\n                            : loading === 'success'\n                              ? 'Deleted'\n                              : 'Delete'}\n                    </Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-sticky-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetStickyDemo() {\n    return (\n        <Sheet>\n            <Button>Read</Button>\n            <Sheet.Content>\n                <Sheet.Header>\n                    <Sheet.Title>Terms of Use</Sheet.Title>\n                    <Sheet.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our services, you\n                            agree to be bound by these terms. If you do not agree to these terms,\n                            please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for maintaining\n                            the confidentiality of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that occur under\n                            your account. You must notify us immediately of any breach of security\n                            or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and policies\n                            in connection with your use of our services. This includes adhering to\n                            intellectual property laws and refraining from any unlawful behavior\n                            while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of our services\n                            by any means other than through the interface provided by us. Any form\n                            of hacking, bypassing, or circumventing our security protocols is\n                            strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any content\n                            from our services unless explicitly authorized by us. This includes\n                            engaging in activities such as scraping, data mining, or using automated\n                            systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse, or harm\n                            other users. This includes sending unsolicited messages, stalking, or\n                            engaging in any form of cyberbullying. We reserve the right to terminate\n                            accounts found in violation of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other intellectual\n                            property displayed on our services are the property of their respective\n                            owners. You may not use, copy, or distribute any content without prior\n                            written permission from the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a worldwide,\n                            royalty-free, non-exclusive license to use, distribute, modify, and\n                            display that content for the purpose of providing our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to allow us to\n                            use it in accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our services at\n                        any time, without notice, for any reason, including but not limited to a\n                        breach of these terms. Upon termination, your right to use our services will\n                        immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms that, by\n                        their nature, should survive termination shall remain in effect. This\n                        includes, but is not limited to, ownership provisions, warranty disclaimers,\n                        and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all times or\n                        without interruption. We are not liable for any downtime or technical issues\n                        that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided &quot;as is&quot; and &quot;as available&quot;\n                        without any warranties of any kind, whether express or implied. We do not\n                        warrant that our services will meet your requirements or that they will be\n                        error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental, special,\n                        consequential, or punitive damages arising out of or related to your use of\n                        our services. This includes, but is not limited to, damages for loss of\n                        profits, data, or other intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time. If a\n                        revision is material, we will provide at least 30 days&apos; notice prior to\n                        any new terms taking effect. What constitutes a material change will be\n                        determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the laws of\n                        [Your Jurisdiction], without regard to its conflict of law provisions. Any\n                        disputes arising from or relating to these terms shall be resolved in the\n                        courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at [Your\n                        Contact Information].\n                    </div>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Button slot='close' variant='outline'>\n                        Close\n                    </Button>\n                    <Button>Accept</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Sheet, TextField } from '@/components/ui'\n\nexport default function SheetDemo() {\n    return (\n        <Sheet>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Sheet.Content>\n                    <Sheet.Header>\n                        <Sheet.Title>Login</Sheet.Title>\n                        <Sheet.Description>Enter your credentials to sign in.</Sheet.Description>\n                    </Sheet.Header>\n                    <Sheet.Body className='space-y-4'>\n                        <TextField\n                            isRequired\n                            type='email'\n                            label='Email'\n                            placeholder='Enter your email'\n                        />\n                        <TextField\n                            isRequired\n                            label='Password'\n                            type='password'\n                            placeholder='Enter your password'\n                        />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Sheet.Body>\n                    <Sheet.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Sheet.Footer>\n                </Sheet.Content>\n            </Form>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-floating-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-floating-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetFloatingDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Open</Button>\n            <Sheet.Content isFloating>\n                <Sheet.Header>\n                    <Sheet.Title>Floating Sheet</Sheet.Title>\n                    <Sheet.Description>This sheet is floating</Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button>Save Changes</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/modal/modal-drawer-demo": {
    "component": "@/components/docs/overlays/modal/modal-drawer-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Modal, TextField } from '@/components/ui'\n\nexport default function ModalDrawerDemo() {\n    return (\n        <Modal>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Modal.Content drawer notch>\n                    <div className='max-w-xl w-full mx-auto'>\n                        <Modal.Header>\n                            <Modal.Title>Login</Modal.Title>\n                            <Modal.Description>\n                                Enter your credentials to sign in.\n                            </Modal.Description>\n                        </Modal.Header>\n                        <Modal.Body className='space-y-4'>\n                            <TextField\n                                isRequired\n                                type='email'\n                                label='Email'\n                                placeholder='Enter your email'\n                            />\n                            <TextField\n                                isRequired\n                                label='Password'\n                                type='password'\n                                placeholder='Enter your password'\n                            />\n                            <div className='flex items-center justify-between'>\n                                <Checkbox name='remember-me'>Remember me</Checkbox>\n                                <Link href='#'>Forgot password?</Link>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer className='sm:flex-col-reverse sm:justify-between'>\n                            <Button slot='close' variant='outline'>\n                                Cancel\n                            </Button>\n                            <Button type='submit'>Login</Button>\n                        </Modal.Footer>\n                    </div>\n                </Modal.Content>\n            </Form>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-size-demo": {
    "component": "@/components/docs/overlays/modal/modal-size-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button, Modal } from '@/components/ui'\n\ntype Size = Pick<React.ComponentProps<typeof Modal.Content>, 'size'>['size']\nconst sizes: Size[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl', 'full']\n\nexport default function ModalSizeDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [modalSize, setModalSize] = React.useState<Size>('md')\n\n    const openModal = (size: Size, open: boolean) => {\n        setModalSize(size)\n        setIsOpen(open)\n    }\n    return (\n        <>\n            <div className='grid grid-cols-3 gap-2'>\n                {sizes.map((size, i) => (\n                    <Button\n                        variant='outline'\n                        key={i}\n                        onPress={() => openModal(size, true)}\n                        className='last:col-span-full'\n                    >\n                        {size}\n                    </Button>\n                ))}\n            </div>\n\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen} size={modalSize}>\n                <Modal.Header>\n                    <Modal.Title>Modal {modalSize}</Modal.Title>\n                    <Modal.Description>This won&apos;t affect on small screen</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)}>\n                        Close\n                    </Button>\n                    <Button onPress={() => setIsOpen(false)}>Confirm</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-alert-demo": {
    "component": "@/components/docs/overlays/modal/modal-alert-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalAlertDemo() {\n    return (\n        <Modal>\n            <Button variant='danger'>Delete</Button>\n            <Modal.Content role='alertdialog'>\n                <Modal.Header>\n                    <Modal.Title>Delete file</Modal.Title>\n                    <Modal.Description>\n                        This will permanently delete the selected file. Continue?\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button slot='close' variant='danger'>\n                        Continue\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-sticky-demo": {
    "component": "@/components/docs/overlays/modal/modal-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalStickyDemo() {\n    return (\n        <Modal>\n            <Button>Open</Button>\n            <Modal.Content>\n                <Modal.Header>\n                    <Modal.Title>Terms of Use</Modal.Title>\n                    <Modal.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Body className='prose dark:prose-invert'>\n                    <p>\n                        Welcome to our Terms of Use. By accessing or using our services, you agree\n                        to be bound by these terms. If you do not agree to these terms, please\n                        refrain from using our services.\n                    </p>\n                    <h3> User Obligations</h3>\n                    <h4>Account Responsibility</h4>\n                    <p>\n                        When you create an account with us, you are responsible for maintaining the\n                        confidentiality of your account and password.\n                    </p>\n                    <p>\n                        You agree to accept responsibility for all activities that occur under your\n                        account. You must notify us immediately of any breach of security or\n                        unauthorized use of your account.\n                    </p>\n                    <h4>Compliance with Laws</h4>\n                    <p>\n                        You agree to comply with all applicable laws, regulations, and policies in\n                        connection with your use of our services. This includes adhering to\n                        intellectual property laws and refraining from any unlawful behavior while\n                        using our platform.\n                    </p>\n                    <h3> Prohibited Activities</h3>\n                    <p>\n                        You are not permitted to access or attempt to access any of our services by\n                        any means other than through the interface provided by us. Any form of\n                        hacking, bypassing, or circumventing our security protocols is strictly\n                        prohibited.\n                    </p>\n                    <h4>Misuse of Content</h4>\n                    <p>\n                        You agree not to misuse, reproduce, distribute, or modify any content from\n                        our services unless explicitly authorized by us. This includes engaging in\n                        activities such as scraping, data mining, or using automated systems to\n                        extract data.\n                    </p>\n                    <h4>Harassment and Abuse</h4>\n                    <p>\n                        You are prohibited from using our services to harass, abuse, or harm other\n                        users. This includes sending unsolicited messages, stalking, or engaging in\n                        any form of cyberbullying. We reserve the right to terminate accounts found\n                        in violation of this policy.\n                    </p>\n                    <h4>Ownership of Content</h4>\n                    <p>\n                        All content, trademarks, service marks, logos, and other intellectual\n                        property displayed on our services are the property of their respective\n                        owners. You may not use, copy, or distribute any content without prior\n                        written permission from the owner.\n                    </p>\n                    <h4>User-Generated Content</h4>\n                    <p>\n                        By submitting content to our services, you grant us a worldwide,\n                        royalty-free, non-exclusive license to use, distribute, modify, and display\n                        that content for the purpose of providing our services.\n                    </p>\n                    <p>\n                        You retain all ownership rights to your content but agree to allow us to use\n                        it in accordance with these terms.\n                    </p>\n                    <h3> Termination</h3>\n                    <h4>Right to Terminate</h4>\n                    We reserve the right to terminate or suspend your access to our services at any\n                    time, without notice, for any reason, including but not limited to a breach of\n                    these terms. Upon termination, your right to use our services will immediately\n                    cease.\n                    <h4>Effect of Termination</h4>\n                    Upon termination of your account, all provisions of these terms that, by their\n                    nature, should survive termination shall remain in effect. This includes, but is\n                    not limited to, ownership provisions, warranty disclaimers, and limitations of\n                    liability.\n                    <h3> Limitation of Liability</h3>\n                    <h4>Service Availability</h4>\n                    We do not guarantee that our services will be available at all times or without\n                    interruption. We are not liable for any downtime or technical issues that may\n                    prevent access to our services.\n                    <h4>No Warranties</h4>\n                    Our services are provided &quot;as is&quot; and &quot;as available&quot; without\n                    any warranties of any kind, whether express or implied. We do not warrant that\n                    our services will meet your requirements or that they will be error-free or\n                    secure.\n                    <h4>Limitation of Damages</h4>\n                    In no event shall we be liable for any indirect, incidental, special,\n                    consequential, or punitive damages arising out of or related to your use of our\n                    services. This includes, but is not limited to, damages for loss of profits,\n                    data, or other intangibles.\n                    <h3> Changes to These Terms</h3>\n                    We reserve the right to modify or replace these terms at any time. If a revision\n                    is material, we will provide at least 30 days&apos; notice prior to any new\n                    terms taking effect. What constitutes a material change will be determined at\n                    our sole discretion.\n                    <h3> Governing Law</h3>\n                    These terms shall be governed and construed in accordance with the laws of [Your\n                    Jurisdiction], without regard to its conflict of law provisions. Any disputes\n                    arising from or relating to these terms shall be resolved in the courts of [Your\n                    Jurisdiction].\n                    <h3> Contact Information</h3>\n                    If you have any questions about these terms, please contact us at [Your Contact\n                    Information].\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button slot='close'>Accept</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-nested-demo": {
    "component": "@/components/docs/overlays/modal/modal-nested-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, Modal, Textarea, toast } from '@/components/ui'\n\nexport default function ModalNestedDemo() {\n    const [firstModal, setFirstModal] = React.useState<boolean>(false)\n    const [secondModal, setSecondModal] = React.useState<boolean>(false)\n    const [filled, setFilled] = React.useState(false)\n\n    return (\n        <>\n            <Button onPress={() => setFirstModal(true)}>Register</Button>\n\n            <Modal.Content\n                isOpen={firstModal}\n                onOpenChange={() => setFirstModal(false)}\n                aria-label='Confirm Registration'\n            >\n                <Modal.Header>\n                    <Modal.Title>Confirm Registration</Modal.Title>\n                    <Modal.Description>Please confirm your registration details.</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        onPress={() => {\n                            setSecondModal(true)\n                        }}\n                    >\n                        Confirm\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n\n            <Modal.Content\n                isOpen={secondModal}\n                onOpenChange={(open) => {\n                    if (!open && !filled) {\n                        toast('Profile setup incomplete')\n                    }\n                    setSecondModal(open)\n                }}\n                aria-label='Profile Setup'\n            >\n                <Modal.Header>\n                    <Modal.Title>Set Up Your Profile</Modal.Title>\n                    <Modal.Description>\n                        We need a bit more information before you can get started.\n                    </Modal.Description>\n                </Modal.Header>\n                <Form\n                    onSubmit={(e) => {\n                        e.preventDefault()\n                        toast.success('Profile setup complete')\n                        setSecondModal(false)\n                        setFirstModal(false)\n                    }}\n                >\n                    <Modal.Body>\n                        <Textarea\n                            isRequired\n                            label='Bio'\n                            placeholder='Tell us something about yourself'\n                            onInput={() => setFilled(true)}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button slot='close' variant='outline'>\n                            Skip for now\n                        </Button>\n                        <Button type='submit'>Complete Setup</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-respect-screen-demo": {
    "component": "@/components/docs/overlays/modal/modal-respect-screen-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Modal, TextField } from '@/components/ui'\n\nexport default function ModalDemo() {\n    return (\n        <Modal>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Modal.Content respectScreen={false}>\n                    <Modal.Header>\n                        <Modal.Title>Login</Modal.Title>\n                        <Modal.Description>Enter your credentials to sign in.</Modal.Description>\n                    </Modal.Header>\n                    <Modal.Body className='space-y-4'>\n                        <TextField\n                            isRequired\n                            type='email'\n                            label='Email'\n                            placeholder='Enter your email'\n                        />\n                        <TextField\n                            isRequired\n                            label='Password'\n                            type='password'\n                            placeholder='Enter your password'\n                        />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Form>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-demo": {
    "component": "@/components/docs/overlays/modal/modal-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Modal, TextField } from '@/components/ui'\n\nexport default function ModalDemo() {\n    return (\n        <Modal>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>Login</Modal.Title>\n                        <Modal.Description>Enter your credentials to sign in.</Modal.Description>\n                    </Modal.Header>\n                    <Modal.Body className='space-y-4'>\n                        <TextField\n                            isRequired\n                            type='email'\n                            label='Email'\n                            placeholder='Enter your email'\n                        />\n                        <TextField\n                            isRequired\n                            label='Password'\n                            type='password'\n                            placeholder='Enter your password'\n                        />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Form>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-notch-demo": {
    "component": "@/components/docs/overlays/modal/modal-notch-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Modal, TextField } from '@/components/ui'\n\nexport default function ModalNotchDemo() {\n    return (\n        <Modal>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Modal.Content notch>\n                    <Modal.Header>\n                        <Modal.Title>Login</Modal.Title>\n                        <Modal.Description>Enter your credentials to sign in.</Modal.Description>\n                    </Modal.Header>\n                    <Modal.Body className='space-y-4'>\n                        <TextField\n                            isRequired\n                            type='email'\n                            label='Email'\n                            placeholder='Enter your email'\n                        />\n                        <TextField\n                            isRequired\n                            label='Password'\n                            type='password'\n                            placeholder='Enter your password'\n                        />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Form>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal/modal-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalControlledDemo() {\n    const [open, setOpen] = React.useState(false)\n    const [loading, setLoading] = React.useState<'idle' | 'loading' | 'success'>('idle')\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Modal.Content isOpen={open} onOpenChange={setOpen}>\n                <Modal.Header>\n                    <Modal.Title>Confirm Deletion</Modal.Title>\n                    <Modal.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={() => setOpen(false)}>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        variant={loading === 'success' ? 'success' : 'danger'}\n                        onPress={deleteAccount}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading'\n                            ? 'Deleting...'\n                            : loading === 'success'\n                              ? 'Deleted'\n                              : 'Delete'}\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconBan, IconRotateCcw, IconTrash } from 'hq-icons'\nimport { Key } from 'react-aria-components'\n\nimport { Button, Menu, Modal } from '@/components/ui'\n\nexport default function ModalMenuDemo() {\n    const [state, setState] = useState<Key>('')\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const executeAction = (action: string) => {\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n            setState('')\n            alert(action)\n        }, 3000)\n    }\n\n    const actions = (t: Key) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this user?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Button>Options</Button>\n                <Menu.Content onAction={setState}>\n                    <Menu.Item id='delete' isDanger>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='ban' isDanger>\n                        <IconBan />\n                        <Menu.Label>Ban</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='restore'>\n                        <IconRotateCcw />\n                        <Menu.Label>Restore</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Modal.Content isOpen={state !== ''} onOpenChange={() => setState('')}>\n                <Modal.Header>\n                    <Modal.Title>{actions(state)?.title}</Modal.Title>\n                    <Modal.Description>{actions(state)?.description}</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant={state === 'restore' ? 'primary' : 'danger'}\n                        isDisabled={loading}\n                        isPending={loading}\n                        onPress={actions(state)?.action}\n                    >\n                        {actions(state)?.confirmText}\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-variant-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-variant-demo",
    "raw": "'use client'\n\nimport { IconSquareMousePointer } from 'hq-icons'\n\nimport { Button, Tooltip } from '@/components/ui'\n\nexport default function TooltipVariantDemo() {\n    return (\n        <Tooltip>\n            <Button aria-label='Hover Me!'>\n                <IconSquareMousePointer />\n            </Button>\n            <Tooltip.Content isInverse>\n                This is a <strong>Tooltip</strong> with an <strong>inverse</strong> background.\n            </Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-delay-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-delay-demo",
    "raw": "'use client'\n\nimport { Button, Tooltip } from '@/components/ui'\n\nconst delays = [0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000]\n\nexport default function TooltipDelayDemo() {\n    return (\n        <div className='flex gap-2'>\n            {delays.map((delay, i) => (\n                <Tooltip key={i} delay={delay}>\n                    <Button>\n                        {delay}\n                        {delay === 1500 && ' (default)'}\n                    </Button>\n                    <Tooltip.Content>\n                        This tooltip shown after <strong>{delay}</strong>ms.\n                    </Tooltip.Content>\n                </Tooltip>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-demo",
    "raw": "'use client'\n\nimport { Tooltip } from '@/components/ui'\n\nexport default function TooltipDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger>Hover Me!</Tooltip.Trigger>\n            <Tooltip.Content>Hello, This is Tooltip!</Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-placement-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-placement-demo",
    "raw": "'use client'\n\nimport { type TooltipProps } from 'react-aria-components'\n\nimport { Button, Tooltip } from '@/components/ui'\n\nconst placements: TooltipProps['placement'][] = [\n    'left top',\n    'top left',\n    'top',\n    'top right',\n    'right top',\n    'left',\n    'right',\n    'left bottom',\n    'bottom left',\n    'bottom',\n    'bottom right',\n    'right bottom'\n]\n\nexport default function TooltipPlacementDemo() {\n    return (\n        <div className='grid grid-cols-2 gap-2 sm:grid-cols-3 lg:grid-cols-6 [&_.kbt32x]:w-full'>\n            {placements.map((place, i) => (\n                <Tooltip key={i}>\n                    <Button\n                        size='xs'\n                        variant='outline'\n                        className='nth-3:col-span-2 nth-10:col-span-2 nth-6:col-span-3 nth-7:col-span-3'\n                    >\n                        {place}\n                    </Button>\n                    <Tooltip.Content placement={place}>\n                        Tooltip shown at <strong>{place}</strong>.\n                    </Tooltip.Content>\n                </Tooltip>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-without-arrow-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-without-arrow-demo",
    "raw": "'use client'\n\nimport { IconSquareMousePointer } from 'hq-icons'\n\nimport { Button, Tooltip } from '@/components/ui'\n\nexport default function TooltipWithoutArrowDemo() {\n    return (\n        <Tooltip>\n            <Button aria-label='Hover Me!'>\n                <IconSquareMousePointer />\n            </Button>\n            <Tooltip.Content showArrow={false}>Hello, This is Tooltip!</Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "surfaces/spoiler/spoiler-initial-demo": {
    "component": "@/components/docs/surfaces/spoiler/spoiler-initial-demo",
    "raw": "import Image from 'next/image'\n\nimport { Spoiler } from '@/components/ui'\n\nexport default function SpoilerInitialDemo() {\n    return (\n        <Spoiler initialHeight={128} initialOpacity={0.5} showMoreText='Reveal' showLessText='Hide'>\n            <Image\n                className='rounded-lg'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </Spoiler>\n    )\n}\n"
  },
  "surfaces/spoiler/spoiler-demo": {
    "component": "@/components/docs/surfaces/spoiler/spoiler-demo",
    "raw": "import Image from 'next/image'\n\nimport { Spoiler } from '@/components/ui'\n\nexport default function SpoilerDemo() {\n    return (\n        <Spoiler>\n            <Image\n                className='rounded-lg'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </Spoiler>\n    )\n}\n"
  },
  "surfaces/card/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card/card-login-form-demo",
    "raw": "import { Button, Card, Checkbox, Link, TextField } from '@/components/ui'\n\nexport default function CardLoginFormDemo() {\n    return (\n        <Card className='mx-auto max-w-md'>\n            <Card.Header>\n                <Card.Title>Login</Card.Title>\n                <Card.Description>Don&apos;t loose the level, just keep on going.</Card.Description>\n            </Card.Header>\n            <Card.Content className='space-y-6'>\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <TextField\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <div className='flex items-center justify-between'>\n                    <Checkbox>Remember me</Checkbox>\n                    <Link href='#'>Forgot password?</Link>\n                </div>\n            </Card.Content>\n            <Card.Footer>\n                <Button className='w-full'>Login</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/card/card-action-demo": {
    "component": "@/components/docs/surfaces/card/card-action-demo",
    "raw": "import { IconUserPlus } from 'hq-icons'\n\nimport { Button, Card } from '@/components/ui'\n\nexport default function CardActionDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n                <Card.Action>\n                    <Button>\n                        <IconUserPlus /> New User\n                    </Button>\n                </Card.Action>\n            </Card.Header>\n        </Card>\n    )\n}\n"
  },
  "surfaces/card/card-table-demo": {
    "component": "@/components/docs/surfaces/card/card-table-demo",
    "raw": "import { IconEllipsisVertical, IconEye, IconPencil, IconTrash } from 'hq-icons'\n\nimport { Card, Menu, Pagination, Table } from '@/components/ui'\n\nexport default function CardTableDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Table aria-label='Users'>\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column isRowHeader>Name</Table.Column>\n                        <Table.Column>Gender</Table.Column>\n                        <Table.Column>Age</Table.Column>\n                        <Table.Column>Occupation</Table.Column>\n                        <Table.Column />\n                    </Table.Header>\n                    <Table.Body items={users}>\n                        {(item) => (\n                            <Table.Row id={item.id}>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.name}</Table.Cell>\n                                <Table.Cell>{item.gender}</Table.Cell>\n                                <Table.Cell>{item.age}</Table.Cell>\n                                <Table.Cell>{item.occupation}</Table.Cell>\n                                <Table.Cell className='flex justify-end'>\n                                    <Menu>\n                                        <Menu.Trigger>\n                                            <IconEllipsisVertical />\n                                        </Menu.Trigger>\n                                        <Menu.Content placement='left top'>\n                                            <Menu.Item>\n                                                <IconEye />\n                                                <Menu.Label>View</Menu.Label>\n                                            </Menu.Item>\n                                            <Menu.Item>\n                                                <IconPencil />\n                                                <Menu.Label>Edit</Menu.Label>\n                                            </Menu.Item>\n                                            <Menu.Separator />\n                                            <Menu.Item isDanger>\n                                                <IconTrash />\n                                                <Menu.Label>Delete</Menu.Label>\n                                            </Menu.Item>\n                                        </Menu.Content>\n                                    </Menu>\n                                </Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n            <Card.Footer className='justify-between gap-2'>\n                <div className='text-muted-fg text-sm'>Showing 1 to 10 of 50 entries</div>\n                <Pagination>\n                    <Pagination.Item role='first' href='#first' />\n                    <Pagination.Item role='previous' href='#previous' />\n                    <Pagination.Label className='lg:hidden' current={2} total={5} />\n                    <Pagination.Pages className='hidden lg:flex'>\n                        <Pagination.Item href='#1'>1</Pagination.Item>\n                        <Pagination.Item isCurrent href='#2'>\n                            2\n                        </Pagination.Item>\n                        <Pagination.Item href='#3'>3</Pagination.Item>\n                        <Pagination.Item role='ellipsis' />\n                        <Pagination.Item href='#5'>5</Pagination.Item>\n                    </Pagination.Pages>\n                    <Pagination.Item role='next' href='#next' />\n                    <Pagination.Item role='last' href='#last' />\n                </Pagination>\n            </Card.Footer>\n        </Card>\n    )\n}\n\nconst users = [\n    {\n        id: 1,\n        name: 'John Doe',\n        gender: 'Male',\n        age: 30,\n        occupation: 'Software Engineer'\n    },\n    {\n        id: 2,\n        name: 'Jane Smith',\n        gender: 'Female',\n        age: 25,\n        occupation: 'Marketing Manager'\n    },\n    {\n        id: 3,\n        name: 'Bob Johnson',\n        gender: 'Male',\n        age: 40,\n        occupation: 'Doctor'\n    },\n    {\n        id: 4,\n        name: 'Emily Chen',\n        gender: 'Female',\n        age: 28,\n        occupation: 'Teacher'\n    },\n    {\n        id: 5,\n        name: 'Michael Brown',\n        gender: 'Male',\n        age: 35,\n        occupation: 'Lawyer'\n    },\n    {\n        id: 6,\n        name: 'Sarah Lee',\n        gender: 'Female',\n        age: 32,\n        occupation: 'Designer'\n    },\n    {\n        id: 7,\n        name: 'Kevin White',\n        gender: 'Male',\n        age: 45,\n        occupation: 'CEO'\n    },\n    {\n        id: 8,\n        name: 'Lisa Nguyen',\n        gender: 'Female',\n        age: 29,\n        occupation: 'Engineer'\n    },\n    {\n        id: 9,\n        name: 'David Kim',\n        gender: 'Male',\n        age: 38,\n        occupation: 'Consultant'\n    },\n    {\n        id: 10,\n        name: 'Hannah Patel',\n        gender: 'Female',\n        age: 26,\n        occupation: 'Writer'\n    }\n]\n"
  },
  "surfaces/card/card-demo": {
    "component": "@/components/docs/surfaces/card/card-demo",
    "raw": "import { Button, Card } from '@/components/ui'\n\nexport default function CardDemo() {\n    return (\n        <Card className='max-w-lg'>\n            <Card.Header>\n                <Card.Title>Monthly Report</Card.Title>\n                <Card.Description>Financial summary for June</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                The monthly financial report shows a 15% increase in revenue compared to last month.\n            </Card.Content>\n            <Card.Footer>\n                <Button>View Details</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/separator/separator-demo": {
    "component": "@/components/docs/surfaces/separator/separator-demo",
    "raw": "import { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return (\n        <div className='flex flex-col gap-2 items-center'>\n            <div>Content Above</div>\n            <Separator />\n            <div>Content Below</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/separator/separator-button-demo": {
    "component": "@/components/docs/surfaces/separator/separator-button-demo",
    "raw": "import { Button, Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return (\n        <div className='flex flex-col gap-6 items-center'>\n            <div>Content Above</div>\n            <Separator>\n                <Button shape='circle' variant='outline'>\n                    Show More\n                </Button>\n            </Separator>\n            <div>Content Below</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/separator/separator-text-demo": {
    "component": "@/components/docs/surfaces/separator/separator-text-demo",
    "raw": "import { Separator } from '@/components/ui'\n\nexport default function SeparatorTextDemo() {\n    return (\n        <div className='flex flex-col gap-2 items-center'>\n            <div>Content Above</div>\n            <Separator>OR</Separator>\n            <div>Content Below</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/separator/separator-orientation-demo": {
    "component": "@/components/docs/surfaces/separator/separator-orientation-demo",
    "raw": "import { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return (\n        <div className='flex gap-2 items-center h-24'>\n            <div>Content Left</div>\n            <Separator orientation='vertical'>OR</Separator>\n            <div>Content Right</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-demo",
    "raw": "import { DL } from '@/components/ui/description-list'\n\nexport default function DescriptionListDemo() {\n    return (\n        <DL>\n            <DL.T>Product Name</DL.T>\n            <DL.D>PC Gaming Mid End</DL.D>\n            <DL.T>Processor</DL.T>\n            <DL.D>Intel Core i7-12700K</DL.D>\n            <DL.T>Memory</DL.T>\n            <DL.D>32GB DDR5 4800MHz</DL.D>\n            <DL.T>Storage</DL.T>\n            <DL.D>1TB SSD M.2 NVMe</DL.D>\n            <DL.T>Graphics Card</DL.T>\n            <DL.D>RTX 4090 24GB</DL.D>\n        </DL>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-card-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-card-demo",
    "raw": "import { Button, Card, DL } from '@/components/ui'\n\nexport default function DescriptionListCardDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>PC Gaming</Card.Title>\n                <Card.Description>Here are some features of this product.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <DL>\n                    <DL.T>Processor</DL.T>\n                    <DL.D>Intel Core i7-12700K</DL.D>\n                    <DL.T>Memory</DL.T>\n                    <DL.D>32GB DDR5 4800MHz</DL.D>\n                    <DL.T>Storage</DL.T>\n                    <DL.D>1TB SSD M.2 NVMe</DL.D>\n                    <DL.T>Graphics Card</DL.T>\n                    <DL.D>RTX 4090 24GB</DL.D>\n                </DL>\n            </Card.Content>\n            <Card.Footer>\n                <Button>Buy Now</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-heading-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-heading-demo",
    "raw": "import { DL, Heading } from '@/components/ui'\n\nexport default function DescriptionListHeadingDemo() {\n    return (\n        <div>\n            <Heading className='sm:text-lg'>PC Gaming</Heading>\n            <DL>\n                <DL.T>Processor</DL.T>\n                <DL.D>Intel Core i7-12700K</DL.D>\n                <DL.T>Memory</DL.T>\n                <DL.D>32GB DDR5 4800MHz</DL.D>\n                <DL.T>Storage</DL.T>\n                <DL.D>1TB SSD M.2 NVMe</DL.D>\n                <DL.T>Graphics Card</DL.T>\n                <DL.D>RTX 4090 24GB</DL.D>\n            </DL>\n        </div>\n    )\n}\n"
  },
  "date-and-time/calendar/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from '@/components/ui'\n\nexport default function CalendarDemo() {\n    return <Calendar aria-label='Event date' />\n}\n"
  },
  "date-and-time/calendar/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/range-calendar-demo",
    "raw": "'use client'\n\nimport { RangeCalendar } from '@/components/ui'\n\nexport default function RangeCalendarDemo() {\n    return <RangeCalendar aria-label='Range Calendar' />\n}\n"
  },
  "date-and-time/date-picker/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DatePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n\n    const [value, setValue] = React.useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DatePicker\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-required-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\nimport type { CalendarDate } from '@internationalized/date'\n\nexport default function DatePickerValidationDemo() {\n    const [value, setValue] = React.useState<CalendarDate>()\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DatePicker\n                isRequired\n                value={value}\n                onChange={(v) => setValue(v!)}\n                label='Event date'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDemo() {\n    return <DatePicker label='Event date' />\n}\n"
  },
  "date-and-time/date-picker/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, startOfYear, today } from '@internationalized/date'\n\nexport default function DatePickerInvalidDemo() {\n    const ly = startOfYear(today(getLocalTimeZone()))\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState(parseDate(ly.toString()))\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DatePicker\n                validate={(date) => (date < now ? 'Select a future date, please.' : null)}\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Delivery date'\n                className='mb-2'\n            />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-time-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-time-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = React.useState(today)\n\n    return (\n        <DatePicker\n            hideTimeZone\n            hourCycle={24}\n            className='max-w-xs'\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            label='Event date'\n        />\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateRangePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    const [value, setValue] = React.useState({\n        start: now,\n        end: tomorrowWeek\n    })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>\n                    {value\n                        ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n                        : '-- to --'}\n                </p>\n                <p>{value ? `${value.start.toString()} to ${value.end.toString()}` : '-- to --'}</p>\n            </div>\n            <DateRangePicker\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-time-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-time-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateRangePickerTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const tomorrowWeek = today.add({ days: 12 })\n\n    const [value, setValue] = React.useState({\n        start: today,\n        end: tomorrowWeek\n    })\n    return (\n        <DateRangePicker\n            hideTimeZone\n            label='Date time range'\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            hourCycle={24}\n        />\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDemo() {\n    return <DateRangePicker label='Event date' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\n\nexport default function DateRangePickerCustomValidationDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n\n    const [value, setValue] = React.useState({\n        start: now,\n        end: tomorrowWeek\n    })\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DateRangePicker\n                label='Room Booking Dates'\n                validate={(range) =>\n                    range?.end.compare(range.start) > 7\n                        ? 'Maximum booking duration is 1 week.'\n                        : null\n                }\n                defaultValue={{\n                    start: today(getLocalTimeZone()),\n                    end: today(getLocalTimeZone()).add({ weeks: 2 })\n                }}\n                value={value}\n                onChange={(v) => setValue(v!)}\n            />\n            <Button type='submit'>Book Room</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\nimport { CalendarDate } from '@internationalized/date'\n\nexport default function DateRangePickerValidationDemo() {\n    const [value, setValue] = React.useState<{ start: CalendarDate; end: CalendarDate }>()\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DateRangePicker\n                isRequired\n                label='Event date'\n                value={value}\n                onChange={(v) => setValue(v!)}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDisabledDemo() {\n    return <DateRangePicker isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/time-field/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-2'>\n            <TimeField label='Default' />\n            <TimeField label='Readonly' isReadOnly />\n            <TimeField label='Invalid' isInvalid />\n            <TimeField label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = React.useState<Time>()\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <TimeField label='Event time' isRequired value={value} onChange={(v) => setValue(v!)} />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-hc-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Switch, TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldHcDemo() {\n    const [hc, setHc] = React.useState<12 | 24>(24)\n    const [value, setValue] = React.useState(new Time(13, 45))\n    return (\n        <>\n            <div className='absolute top-4 left-4 inline-flex min-w-32 flex-col gap-1'>\n                <Switch\n                    isSelected={hc === 24}\n                    onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}\n                >\n                    {hc} hour\n                </Switch>\n            </div>\n            <TimeField\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                hourCycle={hc}\n                label='Event time'\n            />\n        </>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = React.useState(new Time(11, 45))\n    return (\n        <div className='space-y-6'>\n            <TimeField label='Event time' value={value} onChange={(v) => setValue(v!)} />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-field/date-time-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-time-field-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateTimeFieldDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = React.useState(today)\n    return (\n        <DateField\n            hideTimeZone\n            hourCycle={24}\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            label='Event date'\n        />\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-2'>\n            <DateField label='Default' />\n            <DateField label='Readonly' isReadOnly />\n            <DateField label='Invalid' isInvalid />\n            <DateField label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DateField, Form } from '@/components/ui'\nimport { type CalendarDate } from '@internationalized/date'\n\nexport default function DateFieldValidationDemo() {\n    const [value, setValue] = React.useState<CalendarDate>()\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DateField isRequired label='Event date' value={value} onChange={(v) => setValue(v!)} />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today, type CalendarDate } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateFieldControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState<CalendarDate>(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DateField\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-demo",
    "raw": "'use client'\n\nimport { ColorSwatch } from '@/components/ui'\n\nexport default function ColorSwatchDemo() {\n    return <ColorSwatch aria-label='Current color' color='#0d6efd' />\n}\n"
  },
  "colors/color-swatch/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-item-disabled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker, Description } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                value={value}\n                onChange={setValue}\n                className='flex justify-center gap-2'\n            >\n                <ColorSwatchPicker.Item isDisabled color='#f59e0b' />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item isDisabled color='#ec4899' />\n                <ColorSwatchPicker.Item isDisabled color='#f43f5e' />\n            </ColorSwatchPicker>\n\n            <Description>{value.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <ColorSwatchPicker\n            aria-label='Pick color'\n            value={value}\n            onChange={setValue}\n            className='grid grid-cols-3 gap-2 lg:grid-cols-6'\n        >\n            <ColorSwatchPicker.Item color='#f59e0b' />\n            <ColorSwatchPicker.Item color='#84cc16' />\n            <ColorSwatchPicker.Item color='#0d6efd' />\n            <ColorSwatchPicker.Item color='#ec4899' />\n            <ColorSwatchPicker.Item color='#f43f5e' />\n        </ColorSwatchPicker>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-controlled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [color, setColor] = React.useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                value={color}\n                onChange={setColor}\n                className='flex justify-center gap-2'\n            >\n                <ColorSwatchPicker.Item color='#f59e0b' />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item color='#ec4899' />\n                <ColorSwatchPicker.Item color='#f43f5e' />\n            </ColorSwatchPicker>\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-dynamic-label-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-dynamic-label-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker label={color.toString('hex')} value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-combination-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorPicker, ColorSlider, Select } from '@/components/ui'\n\nexport default function ColorPickerCombinationDemo() {\n    const [space, setSpace] = React.useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker label='Color picker' defaultValue='#0d6efd'>\n            <section className='space-y-2 sm:max-w-56'>\n                <ColorArea colorSpace={space} />\n                <div className='space-y-0 5'>\n                    {getColorChannels(space).map((channel) => (\n                        <ColorSlider\n                            showOutput={false}\n                            key={channel}\n                            colorSpace={space}\n                            channel={channel}\n                        />\n                    ))}\n                </div>\n                <Select\n                    aria-label='Color space'\n                    selectedKey={space}\n                    onSelectionChange={(s) => setSpace(s as ColorSpace)}\n                >\n                    {['rgb', 'hsb', 'hsl'].map((s) => (\n                        <Select.Item key={s} id={s} textValue={s}>\n                            {s}\n                        </Select.Item>\n                    ))}\n                </Select>\n                <div className='flex gap-2'>\n                    {getColorChannels(space).map((channel) => (\n                        <ColorField\n                            key={channel}\n                            colorSpace={space}\n                            channel={channel}\n                            className='w-full'\n                        />\n                    ))}\n                </div>\n            </section>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-selection-format-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorPicker, defaultColor, Select } from '@/components/ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const [isHexFormat, setIsHexFormat] = React.useState(false)\n    const [space, setSpace] = React.useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker label={color.toString(space)} value={color} onChange={setColor}>\n            <section className='space-y-2'>\n                <ColorArea />\n                <Select\n                    aria-label='Color Space'\n                    selectedKey={space}\n                    defaultSelectedKey={space}\n                    onSelectionChange={(s) => {\n                        setSpace(s as ColorSpace)\n                        setIsHexFormat(s === 'hex')\n                    }}\n                >\n                    {['rgb', 'hex', 'hsl', 'hsb'].map((s) => (\n                        <Select.Item key={s} id={s} textValue={s}>\n                            {s}\n                        </Select.Item>\n                    ))}\n                </Select>\n                {isHexFormat ? (\n                    <ColorField aria-label='Hex color' colorSpace={space} />\n                ) : getColorChannels(space).length > 0 ? (\n                    <div className='flex gap-2 sm:max-w-56'>\n                        {getColorChannels(space).map((channel) => (\n                            <ColorField colorSpace={space} channel={channel} key={channel} />\n                        ))}\n                    </div>\n                ) : null}\n            </section>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-label-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker label='Theme Color' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDisabledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n    return <ColorPicker isDisabled label='Color Picker' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerControlledDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n\n    return (\n        <div className='flex flex-col gap-4 items-center'>\n            <ColorPicker value={color} onChange={setColor} />\n            <code>{JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-description-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithDescriptionDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <ColorPicker\n            label='Theme Color'\n            description='Snag a color for the app theme'\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n"
  },
  "colors/color-picker/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-swatch-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Color } from 'react-aria-components'\n\nimport {\n    ColorArea,\n    ColorField,\n    ColorPicker,\n    ColorSlider,\n    ColorSwatchPicker,\n    defaultColor\n} from '@/components/ui'\n\nexport default function ColorPickerEnableSwatchDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const colorChangeHandler = (v: Color) => {\n        setColor(v)\n    }\n    return (\n        <ColorPicker value={color} onChange={(v) => colorChangeHandler(v)}>\n            <ColorArea colorSpace='hsb' xChannel='saturation' yChannel='brightness' />\n            <ColorSlider colorSpace='hsb' channel='hue' />\n            <ColorField aria-label='Hex color' />\n            <ColorSwatchPicker\n                aria-label='Color swatch picker'\n                layout='grid'\n                className='flex flex-wrap gap-2'\n            >\n                {colors.map((color) => (\n                    <ColorSwatchPicker.Item key={color} color={color} />\n                ))}\n            </ColorSwatchPicker>\n        </ColorPicker>\n    )\n}\n\nconst colors = [\n    '#f59e0b',\n    '#84cc16',\n    '#0d6efd',\n    '#ec4899',\n    '#f43f5e',\n    '#d4b990',\n    '#b19f73',\n    '#9370db',\n    '#7d60df'\n]\n"
  },
  "colors/color-picker/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-demo",
    "raw": "'use client'\n\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDemo() {\n    return (\n        <div className='flex gap-6'>\n            <ColorPicker label='Default' />\n            <ColorPicker label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area/color-area-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorSpace, Key, parseColor } from 'react-aria-components'\nimport { ColorChannel } from 'react-stately'\n\nimport { ColorArea } from '@/components/ui'\nimport { Select } from '@/components/ui/select'\n\nconst spaces = ['rgb', 'hsb', 'hsl'].map((space) => ({ space }))\nconst RGBchannels = ['red', 'green', 'blue', 'alpha'].map((channel) => ({ channel }))\nconst HSLchannels = ['hue', 'saturation', 'lightness', 'alpha'].map((channel) => ({ channel }))\nconst HSBchannels = ['hue', 'saturation', 'brightness', 'alpha'].map((channel) => ({ channel }))\n\nexport default function ColorAreaControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n    const [colorSpace, setColorSpace] = React.useState<Key>('rgb')\n    const [xChannel, setXChannel] = React.useState<Key>(colorSpace === 'rgb' ? 'red' : 'hue')\n    const [yChannel, setYChannel] = React.useState<Key>(\n        colorSpace === 'rgb' ? 'alpha' : 'saturation'\n    )\n\n    return (\n        <div className='flex flex-col gap-4 items-center'>\n            <div className='flex flex-col sm:flex-row gap-2 w-full'>\n                <Select\n                    className='w-full'\n                    label='Color Space'\n                    selectedKey={colorSpace}\n                    onSelectionChange={(v) => {\n                        setColorSpace(v)\n                        setXChannel(v === 'rgb' ? 'red' : 'hue')\n                        setYChannel(v === 'rgb' ? 'alpha' : 'saturation')\n                    }}\n                    items={spaces}\n                >\n                    {(item) => <Select.Item id={item.space}>{item.space}</Select.Item>}\n                </Select>\n                <Select\n                    label='X Channel'\n                    className='w-full'\n                    selectedKey={xChannel}\n                    onSelectionChange={(v) => setXChannel(v)}\n                    items={\n                        colorSpace === 'rgb'\n                            ? RGBchannels\n                            : colorSpace === 'hsl'\n                              ? HSLchannels\n                              : HSBchannels\n                    }\n                >\n                    {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n                </Select>\n                <Select\n                    label='Y Channel'\n                    className='w-full'\n                    selectedKey={yChannel}\n                    onSelectionChange={(v) => setYChannel(v)}\n                    items={\n                        colorSpace === 'rgb'\n                            ? RGBchannels\n                            : colorSpace === 'hsl'\n                              ? HSLchannels\n                              : HSBchannels\n                    }\n                >\n                    {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n                </Select>\n            </div>\n            <ColorArea\n                value={color}\n                onChange={setColor}\n                xChannel={xChannel as ColorChannel}\n                yChannel={yChannel as ColorChannel}\n                colorSpace={colorSpace as ColorSpace}\n            />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area/color-area-space-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorSpace, Key } from 'react-aria-components'\n\nimport { ColorArea, Select } from '@/components/ui'\n\nconst spaces = ['rgb', 'hsb', 'hsl'].map((space) => ({ space }))\n\nexport default function ColorAreaSpaceDemo() {\n    const [colorSpace, setColorSpace] = React.useState<Key>('rgb')\n    return (\n        <div className='flex flex-col gap-4'>\n            <Select\n                className='w-full'\n                label='Color Space'\n                selectedKey={colorSpace}\n                onSelectionChange={(v) => setColorSpace(v)}\n                items={spaces}\n            >\n                {(item) => <Select.Item id={item.space}>{item.space}</Select.Item>}\n            </Select>\n            <ColorArea colorSpace={colorSpace as ColorSpace} />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area/color-area-channel-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Key } from 'react-aria-components'\nimport { ColorChannel } from 'react-stately'\n\nimport { ColorArea, Select } from '@/components/ui'\n\nconst channels = ['red', 'green', 'blue', 'alpha'].map((channel) => ({ channel }))\n\nexport default function ColorAreaChannelDemo() {\n    const [xChannel, setXChannel] = React.useState<Key>('red')\n    const [yChannel, setYChannel] = React.useState<Key>('blue')\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <div className='flex flex-col sm:flex-row gap-2 w-full'>\n                <Select\n                    label='X Channel'\n                    className='w-full'\n                    selectedKey={xChannel}\n                    onSelectionChange={(v) => setXChannel(v)}\n                    items={channels}\n                >\n                    {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n                </Select>\n                <Select\n                    label='Y Channel'\n                    className='w-full'\n                    selectedKey={yChannel}\n                    onSelectionChange={(v) => setYChannel(v)}\n                    items={channels}\n                >\n                    {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n                </Select>\n            </div>\n            <ColorArea xChannel={xChannel as ColorChannel} yChannel={yChannel as ColorChannel} />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-with-slider-demo": {
    "component": "@/components/docs/colors/color-area/color-area-with-slider-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorSlider } from '@/components/ui'\n\nexport default function ColorAreaWithSliderDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(50, 100%, 50%)'))\n    return (\n        <div className='flex flex-col gap-y-2'>\n            <ColorArea\n                value={color}\n                onChange={setColor}\n                xChannel='saturation'\n                yChannel='lightness'\n            />\n            <ColorSlider label='Fill Color' channel='hue' value={color} onChange={setColor} />\n            <ColorField label='Current Color' withPicker={false} value={color.toString('hex')} />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-demo": {
    "component": "@/components/docs/colors/color-area/color-area-demo",
    "raw": "'use client'\n\nimport { ColorArea } from '@/components/ui'\n\nexport default function ColorAreaDemo() {\n    return (\n        <div className='flex gap-4'>\n            <div className='space-y-1.5'>\n                <span>Default</span>\n                <ColorArea />\n            </div>\n            <div className='space-y-1.5'>\n                <span>Disabled</span>\n                <ColorArea isDisabled />\n            </div>\n        </div>\n    )\n}\n"
  },
  "colors/color-field/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field/color-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Color, parseColor } from 'react-aria-components'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldControlledDemo() {\n    const [color, setColor] = React.useState<Color | null>(parseColor('#FAFAFA'))\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <ColorField value={color} label='Color' onChange={setColor} />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-field/color-field-demo": {
    "component": "@/components/docs/colors/color-field/color-field-demo",
    "raw": "'use client'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <ColorField placeholder='#FAFAFA' label='Default' />\n            <ColorField placeholder='#FAFAFA' label='Readonly' isReadOnly />\n            <ColorField placeholder='#FAFAFA' label='Invalid' isInvalid />\n            <ColorField placeholder='#FAFAFA' label='Disabled' isDisabled />\n            <ColorField placeholder='#FAFAFA' label='Loading' isLoading />\n        </div>\n    )\n}\n"
  },
  "colors/color-field/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field/color-field-with-prefix-demo",
    "raw": "'use client'\n\nimport { IconPalette, IconSwatchBook } from 'hq-icons'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldWithPrefixSuffixDemo() {\n    return (\n        <div className='space-y-4'>\n            <ColorField label='Color' prefix={<IconSwatchBook />} placeholder='#FAFAFA' />\n            <ColorField label='Color' suffix={<IconSwatchBook />} placeholder='#FAFAFA' />\n            <ColorField\n                label='Color'\n                prefix={<IconSwatchBook />}\n                suffix={<IconPalette />}\n                placeholder='#FAFAFA'\n            />\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-with-label-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderWithLabelDemo() {\n    return <ColorSlider label='Color Customizer' channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n"
  },
  "colors/color-slider/color-slider-vertical-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-vertical-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderVerticalDemo() {\n    return (\n        <div className='flex items-center justify-center'>\n            <ColorSlider\n                orientation='vertical'\n                aria-label='Fill Color'\n                channel='hue'\n                defaultValue='hsl(0, 100%, 50%)'\n            />\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDemo() {\n    return (\n        <div className='space-y-4'>\n            <ColorSlider label='Default' channel='hue' defaultValue={'hsl(0, 100%, 50%)'} />\n            <ColorSlider\n                label='Disabled'\n                channel='hue'\n                isDisabled\n                defaultValue={'hsl(0, 100%, 50%)'}\n            />\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-controlled-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorSlider, defaultColor } from '@/components/ui'\n\nexport default function ColorSliderControlledDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <div className='flex flex-col gap-2'>\n            <ColorSlider channel='hue' value={color} onChange={setColor} />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-wheel/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-demo",
    "raw": "'use client'\n\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelDemo() {\n    return (\n        <div className='flex gap-4'>\n            <div className='space-y-1.5'>\n                <span>Default</span>\n                <ColorWheel aria-label='Color' />\n            </div>\n            <div className='space-y-1.5'>\n                <span>Disabled</span>\n                <ColorWheel aria-label='Color' isDisabled />\n            </div>\n        </div>\n    )\n}\n"
  },
  "colors/color-wheel/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n    return (\n        <div className='flex flex-col gap-4 items-center'>\n            <ColorWheel aria-label='Background color' value={color} onChange={setColor} />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-button-demo": {
    "component": "@/components/docs/navigation/link/link-button-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Link } from '@/components/ui'\n\nexport default function LinkButtonDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Link className={buttonStyles()} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyles({ variant: 'outline' })} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyles({ variant: 'ghost', shape: 'circle' })} href='#'>\n                Link\n            </Link>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-demo": {
    "component": "@/components/docs/navigation/link/link-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDemo() {\n    return <Link href='#'>Link</Link>\n}\n"
  },
  "navigation/link/link-disabled-demo": {
    "component": "@/components/docs/navigation/link/link-disabled-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDisabledDemo() {\n    return (\n        <Link isDisabled href='#'>\n            Link\n        </Link>\n    )\n}\n"
  },
  "navigation/tabs/tabs-icons-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-icons-demo",
    "raw": "'use client'\n\nimport { IconBadgeDollar, IconBinoculars, IconGift, IconMessageHeart } from 'hq-icons'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsIconsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List>\n                <Tabs.Label id='1'>\n                    <IconBinoculars />\n                    Overview\n                </Tabs.Label>\n                <Tabs.Label id='2'>\n                    <IconGift />\n                    Features\n                </Tabs.Label>\n                <Tabs.Label id='3'>\n                    <IconBadgeDollar />\n                    Pricing\n                </Tabs.Label>\n                <Tabs.Label id='4'>\n                    <IconMessageHeart />\n                    Reviews\n                </Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='1'>This is the overview tab content.</Tabs.Content>\n            <Tabs.Content id='2'>Details about the features are listed here.</Tabs.Content>\n            <Tabs.Content id='3'>Find the pricing information on this tab.</Tabs.Content>\n            <Tabs.Content id='4'>Read user reviews and ratings here.</Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List>\n                <Tabs.Label id='1'>Overview</Tabs.Label>\n                <Tabs.Label id='2'>Features</Tabs.Label>\n                <Tabs.Label id='3'>Pricing</Tabs.Label>\n                <Tabs.Label id='4'>Reviews</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='1'>This is the overview tab content.</Tabs.Content>\n            <Tabs.Content id='2'>Details about the features are listed here.</Tabs.Content>\n            <Tabs.Content id='3'>Find the pricing information on this tab.</Tabs.Content>\n            <Tabs.Content id='4'>Read user reviews and ratings here.</Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-controlled-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Collection, type Key } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsControlledDemo() {\n    const [selected, setSelected] = React.useState<Key>(1)\n    return (\n        <div className='space-y-6'>\n            <Tabs\n                aria-label='Project Management'\n                selectedKey={selected}\n                onSelectionChange={setSelected}\n            >\n                <Tabs.List items={items}>\n                    {(item) => <Tabs.Label>{item.title}</Tabs.Label>}\n                </Tabs.List>\n                <Collection items={items}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "navigation/tabs/tabs-disabled-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-disabled-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDisabledDemo() {\n    return (\n        <Tabs disabledKeys={['c', 'a']} aria-label='Services'>\n            <Tabs.List>\n                <Tabs.Label id='o'>Overview</Tabs.Label>\n                <Tabs.Label id='c'>Contact</Tabs.Label>\n                <Tabs.Label id='a'>About Us</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='o'>\n                Welcome to our service! Here, you’ll find a brief overview of what we offer, our\n                mission, and how we strive to provide value to our customers.\n            </Tabs.Content>\n            <Tabs.Content id='c'>\n                Get in touch with us through our contact page. We are here to help you with any\n                inquiries, support requests, or feedback you may have.\n            </Tabs.Content>\n            <Tabs.Content id='a'>\n                Learn more about our company, our history, and the team behind our success. We are\n                dedicated to delivering the best service to our customers.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsOrientationDemo() {\n    return (\n        <Tabs orientation='vertical' aria-label='Project Management'>\n            <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n            <Collection items={items}>\n                {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n            </Collection>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-collections-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-collections-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsCollectionsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n            <Collection items={items}>\n                {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n            </Collection>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-keyboard-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-keyboard-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsKeyboardDemo() {\n    return (\n        <Tabs keyboardActivation='manual' aria-label='Project Management'>\n            <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n            <Collection items={items}>\n                {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n            </Collection>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-link-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-link-demo",
    "raw": "'use client'\n\nimport { IconBlocks, IconBookCopy, IconPalette, IconShapes, IconSwatchBook } from 'hq-icons'\n\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { url: '/', label: 'Home' },\n    { url: 'https://hq-ui.vercel.app/docs', label: 'Components', icon: IconBookCopy },\n    { url: 'https://hq-ui.vercel.app/blocks', label: 'Blocks', icon: IconBlocks },\n    { url: 'https://hq-ui.vercel.app/icons', label: 'Icons', icon: IconShapes },\n    { url: 'https://hq-ui.vercel.app/colors', label: 'Colors', icon: IconPalette },\n    { url: 'https://hq-ui.vercel.app/themes', label: 'Themes', icon: IconSwatchBook }\n]\n\nexport default function TabsLinkDemo() {\n    return (\n        <Tabs aria-label='Navbar'>\n            <Tabs.List items={items}>\n                {(item) => (\n                    <Tabs.Label id={item.label} href={item.url}>\n                        {item.icon && <item.icon />}\n                        {item.label}\n                    </Tabs.Label>\n                )}\n            </Tabs.List>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/pagination/pagination-simple-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-simple-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nexport default function PaginationSimpleDemo() {\n    return (\n        <Pagination>\n            <Pagination.Item role='first' href='#' />\n            <Pagination.Item role='previous' href='#' />\n            <Pagination.Label current={2} total={10} />\n            <Pagination.Item role='next' href='#' />\n            <Pagination.Item role='last' href='#' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nexport default function PaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.Item role='first' href='#first' />\n            <Pagination.Item role='previous' href='#previous' />\n            <Pagination.Pages>\n                <Pagination.Item href='#1'>1</Pagination.Item>\n                <Pagination.Item href='#2'>2</Pagination.Item>\n                <Pagination.Item href='#3'>3</Pagination.Item>\n                <Pagination.Item role='ellipsis' />\n                <Pagination.Item href='#6'>6</Pagination.Item>\n                <Pagination.Item href='#7'>7</Pagination.Item>\n            </Pagination.Pages>\n            <Pagination.Item role='next' href='#next' />\n            <Pagination.Item role='last' href='#last' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-shape-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-shape-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nexport default function PaginationShapeDemo() {\n    return (\n        <Pagination shape='circle'>\n            <Pagination.Item role='first' href='#first' />\n            <Pagination.Item role='previous' href='#previous' />\n            <Pagination.Pages>\n                <Pagination.Item href='#1'>1</Pagination.Item>\n                <Pagination.Item href='#2'>2</Pagination.Item>\n                <Pagination.Item href='#3'>3</Pagination.Item>\n                <Pagination.Item role='ellipsis' />\n                <Pagination.Item href='#6'>6</Pagination.Item>\n                <Pagination.Item href='#7'>7</Pagination.Item>\n            </Pagination.Pages>\n            <Pagination.Item role='next' href='#next' />\n            <Pagination.Item role='last' href='#last' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-dynamic-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nconst pages = [\n    { page: 1, href: '#', current: false },\n    { page: 2, href: '#', current: false },\n    { page: 3, href: '#', current: true },\n    { page: 4, href: '#', current: false },\n    { page: 5, href: '#', current: false },\n    { page: 6, href: '#', current: false },\n    { page: 7, href: '#', current: false }\n]\n\nexport default function PaginationDynamicDemo() {\n    return (\n        <Pagination>\n            <Pagination.Item role='first' href='#' />\n            <Pagination.Item role='previous' href='#' />\n            <Pagination.Label className='lg:hidden' current={3} total={pages.length} />\n            <Pagination.Pages items={pages} className='hidden lg:flex'>\n                {(item) => (\n                    <Pagination.Item id={item.page} href={item.href} isCurrent={item.current}>\n                        {item.page}\n                    </Pagination.Item>\n                )}\n            </Pagination.Pages>\n            <Pagination.Item role='next' href='#' />\n            <Pagination.Item role='last' href='#' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-collections-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-collections-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nconst urls = [\n    { id: 1, label: 'Home', href: '#' },\n    { id: 2, label: 'Docs', href: '#' },\n    { id: 3, label: 'Components' }\n]\n\nexport default function BreadcrumbsCollectionsDemo() {\n    return (\n        <Breadcrumbs items={urls}>\n            {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-menu-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-menu-demo",
    "raw": "'use client'\n\nimport { IconChevronDown } from 'hq-icons'\n\nimport { Breadcrumbs, Menu } from '@/components/ui'\n\nexport default function BreadcrumbsMenuDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item>\n                <Menu>\n                    <Menu.Trigger className='inline-flex items-center'>\n                        Docs\n                        <IconChevronDown className='ml-1' />\n                    </Menu.Trigger>\n                    <Menu.Content>\n                        <Menu.Item href='/blocks'>Blocks</Menu.Item>\n                        <Menu.Item href='/icons'>Icons</Menu.Item>\n                        <Menu.Item href='/colors'>Colors</Menu.Item>\n                        <Menu.Item href='/themes'>Themes</Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item>Components</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-icon-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-icon-demo",
    "raw": "'use client'\n\nimport { IconBook, IconBox, IconHome } from 'hq-icons'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsIconDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>\n                <IconHome />\n                Home\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>\n                <IconBook />\n                Docs\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item>\n                <IconBox />\n                Components\n            </Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-separator-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-separator-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nconst urls = [\n    { id: 1, label: 'Home', href: '#' },\n    { id: 2, label: 'Docs', href: '#' },\n    { id: 3, label: 'Components' }\n]\n\nexport default function BreadcrumbsSeparatorDemo() {\n    return (\n        <div className='space-y-4'>\n            <Breadcrumbs items={urls} separator='chevron'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n            <Breadcrumbs items={urls} separator='slash'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n            <Breadcrumbs items={urls} separator='dash'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n            <Breadcrumbs items={urls} separator='dot'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n        </div>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-current-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-current-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsCurrentDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Docs</Breadcrumbs.Item>\n            <Breadcrumbs.Item className='data-current:text-blue-500'>Components</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Docs</Breadcrumbs.Item>\n            <Breadcrumbs.Item>Components</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-url-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-url-demo",
    "raw": "'use client'\n\nimport { usePathname } from 'next/navigation'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsUrlDemo() {\n    const pathname = usePathname()\n    const urls = pathname\n        .split('/')\n        .filter((url) => url !== '')\n        .map((url, index) => {\n            return {\n                id: index,\n                label: url,\n                href: `/${url}`\n            }\n        })\n    return (\n        <Breadcrumbs items={urls}>\n            {(item) => (\n                <Breadcrumbs.Item className='capitalize' href={item.href}>\n                    {item.label}\n                </Breadcrumbs.Item>\n            )}\n        </Breadcrumbs>\n    )\n}\n"
  },
  "statuses/badge/badge-shape-demo": {
    "component": "@/components/docs/statuses/badge/badge-shape-demo",
    "raw": "'use client'\n\nimport { titleCase } from 'usemods'\n\nimport { Badge, badgeStyles } from '@/components/ui'\n\ntype Shapes = keyof typeof badgeStyles.variants.shape\n\nexport default function BadgeShapeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(badgeStyles.variants.shape).map((shape) => (\n                <div key={shape}>\n                    <Badge shape={shape as Shapes}>{titleCase(shape)}</Badge>\n                </div>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/badge/badge-demo": {
    "component": "@/components/docs/statuses/badge/badge-demo",
    "raw": "'use client'\n\nimport { Badge } from '@/components/ui'\n\nexport default function BadgeDemo() {\n    return <Badge variant='primary'>Label</Badge>\n}\n"
  },
  "statuses/badge/badge-variant-demo": {
    "component": "@/components/docs/statuses/badge/badge-variant-demo",
    "raw": "'use client'\n\nimport { titleCase } from 'usemods'\n\nimport { Badge, badgeStyles } from '@/components/ui'\n\ntype Appearance = keyof typeof badgeStyles.variants.variant\n\nexport default function BadgeVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(badgeStyles.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Badge variant={variant as Appearance}>{titleCase(variant)}</Badge>\n                </div>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/note/note-demo": {
    "component": "@/components/docs/statuses/note/note-demo",
    "raw": "'use client'\n\nimport { Note } from '@/components/ui'\n\nexport default function NoteDemo() {\n    return <Note>Change a few things up and try submitting again.</Note>\n}\n"
  },
  "statuses/note/note-hide-indicator-demo": {
    "component": "@/components/docs/statuses/note/note-hide-indicator-demo",
    "raw": "'use client'\n\nimport { Note } from '@/components/ui'\n\nexport default function NoteHideIndicatorDemo() {\n    return <Note hideIndicator>Change a few things up and try submitting again.</Note>\n}\n"
  },
  "statuses/note/note-variant-demo": {
    "component": "@/components/docs/statuses/note/note-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Key } from 'react-aria-components'\n\nimport { Note, Select } from '@/components/ui'\n\nconst variants = ['primary', 'secondary', 'warning', 'danger', 'info', 'success', 'outline'].map(\n    (n) => ({\n        name: n,\n        value: n\n    })\n)\n\nexport default function NoteVariantDemo() {\n    const [selected, setSelected] = React.useState<Key>('primary')\n    return (\n        <div className='space-y-6'>\n            <Select\n                aria-label='Variant'\n                placeholder='Choose a variant'\n                selectedKey={selected}\n                onSelectionChange={setSelected}\n                items={variants}\n            >\n                {(item) => <Select.Item id={item.name}>{item.name}</Select.Item>}\n            </Select>\n            <Note\n                variant={\n                    selected as\n                        | 'primary'\n                        | 'secondary'\n                        | 'warning'\n                        | 'danger'\n                        | 'success'\n                        | 'info'\n                        | 'outline'\n                }\n            >\n                {selected} alert! Change a few things up and try submitting again.\n            </Note>\n        </div>\n    )\n}\n"
  },
  "statuses/meter/meter-decimal-format-demo": {
    "component": "@/components/docs/statuses/meter/meter-decimal-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDecimalFormatDemo() {\n    return (\n        <Meter\n            formatOptions={{\n                style: 'decimal',\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }}\n            label='Progress'\n            value={75.25}\n        />\n    )\n}\n"
  },
  "statuses/meter/meter-currency-format-demo": {
    "component": "@/components/docs/statuses/meter/meter-currency-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterCurrencyFormatDemo() {\n    return (\n        <Meter label='Revenue' formatOptions={{ style: 'currency', currency: 'USD' }} value={15} />\n    )\n}\n"
  },
  "statuses/meter/meter-demo": {
    "component": "@/components/docs/statuses/meter/meter-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDemo() {\n    const [value, setValue] = React.useState(0)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return <Meter label='Storage space' value={value} />\n}\n"
  },
  "statuses/skeleton/skeleton-demo": {
    "component": "@/components/docs/statuses/skeleton/skeleton-demo",
    "raw": "import { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton shape='circle' className='size-6' />\n                <div className='space-y-1'>\n                    <Skeleton className='h-3 w-56' />\n                    <Skeleton className='h-3 w-10' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/skeleton/skeleton-shape-demo": {
    "component": "@/components/docs/statuses/skeleton/skeleton-shape-demo",
    "raw": "import { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonShapeDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton shape='circle' className='size-8' />\n                <div className='space-y-1'>\n                    <Skeleton shape='circle' className='h-4 w-56' />\n                    <Skeleton shape='circle' className='h-4 w-10' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/toast/toast-description-demo": {
    "component": "@/components/docs/statuses/toast/toast-description-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastDescriptionDemo() {\n    return (\n        <Button\n            onPress={() =>\n                toast('This is Toast Message', {\n                    description: 'And this is Message Description'\n                })\n            }\n        >\n            Toast\n        </Button>\n    )\n}\n"
  },
  "statuses/toast/toast-manual-demo": {
    "component": "@/components/docs/statuses/toast/toast-manual-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastAutoDismissDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Button\n                onPress={() =>\n                    toast('Manually Close', {\n                        description: 'Click the action or cancel button to close',\n                        actionLabel: 'Cancel',\n                        altActionLabel: 'Close'\n                    })\n                }\n            >\n                Manually Close\n            </Button>\n            <Button\n                onPress={() =>\n                    toast(\n                        'Automatically Close',\n                        {\n                            description: 'Just leave it for 3 seconds',\n                            actionLabel: 'Cancel',\n                            altActionLabel: 'Close'\n                        },\n                        { timeout: 3000 }\n                    )\n                }\n            >\n                Automatically Close\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-action-demo": {
    "component": "@/components/docs/statuses/toast/toast-action-demo",
    "raw": "'use client'\n\nimport { IconEye } from 'hq-icons'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastActionDemo() {\n    return (\n        <div className='flex gap-3'>\n            <Button\n                onPress={() =>\n                    toast('Your post has been published!', {\n                        action: () => alert('Viewed'),\n                        actionLabel: (\n                            <>\n                                <IconEye /> View\n                            </>\n                        )\n                    })\n                }\n            >\n                Action\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Your message has been sent!', {\n                        action: () => alert('Viewed'),\n                        actionLabel: (\n                            <>\n                                <IconEye /> View\n                            </>\n                        ),\n                        altAction: () => alert('Cancelled'),\n                        altActionLabel: 'Cancel'\n                    })\n                }\n            >\n                Do or Not\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Your data has been deleted!', {\n                        altAction: () => alert('Cancelled'),\n                        altActionLabel: 'Cancel'\n                    })\n                }\n            >\n                Cancel\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-demo": {
    "component": "@/components/docs/statuses/toast/toast-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastDemo() {\n    return <Button onPress={() => toast('This is Toast Message')}>Toast</Button>\n}\n"
  },
  "statuses/toast/toast-status-demo": {
    "component": "@/components/docs/statuses/toast/toast-status-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastStatusDemo() {\n    return (\n        <div className='flex flex-wrap gap-3'>\n            <Button variant='outline' onPress={() => toast('Everything is fine')}>\n                Default\n            </Button>\n            <Button variant='danger' onPress={() => toast.error('The registration failed')}>\n                Error\n            </Button>\n            <Button\n                variant='success'\n                onPress={() => toast.success('The registration was successful.')}\n            >\n                Success\n            </Button>\n            <Button\n                variant='warning'\n                onPress={() => toast.warning('There was an issue during registration')}\n            >\n                Warning\n            </Button>\n            <Button variant='info' onPress={() => toast.info('Email is already registered.')}>\n                Info\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/progress/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress/progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressBarDemo() {\n    const [value, setValue] = React.useState(0)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress label='Loading…' value={value} />\n}\n"
  },
  "statuses/progress/progress-circle-demo": {
    "component": "@/components/docs/statuses/progress/progress-circle-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressCircleDemo() {\n    const [value, setValue] = React.useState(0)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress circle label='Loading…' value={value} />\n}\n"
  },
  "statuses/progress/progress-variant-demo": {
    "component": "@/components/docs/statuses/progress/progress-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressVariantDemo() {\n    const [value, setValue] = React.useState(0)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 75 ? prev + 1 : 75))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return (\n        <div className='space-y-4'>\n            <div className='flex gap-2'>\n                <Progress circle label='Primary' value={value} variant='primary' />\n                <Progress circle label='Secondary' value={value} variant='secondary' />\n                <Progress circle label='Danger' value={value} variant='danger' />\n                <Progress circle label='Info' value={value} variant='info' />\n                <Progress circle label='Success' value={value} variant='success' />\n                <Progress circle label='Warning' value={value} variant='warning' />\n                <Progress circle label='Dark' value={value} variant='dark' />\n            </div>\n            <div className='flex flex-col gap-2'>\n                <Progress label='Primary' value={value} variant='primary' />\n                <Progress label='Secondary' value={value} variant='secondary' />\n                <Progress label='Danger' value={value} variant='danger' />\n                <Progress label='Info' value={value} variant='info' />\n                <Progress label='Success' value={value} variant='success' />\n                <Progress label='Warning' value={value} variant='warning' />\n                <Progress label='Dark' value={value} variant='dark' />\n            </div>\n        </div>\n    )\n}\n"
  },
  "statuses/progress/progress-controlled-demo": {
    "component": "@/components/docs/statuses/progress/progress-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Progress, Slider } from '@/components/ui'\n\nexport default function ProgressControlledDemo() {\n    const [value, setValue] = React.useState(10)\n\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <Progress circle label='Progress…' value={value} />\n            <Progress label='Progress…' value={value} />\n            <Slider label='Control' value={value} onChange={(v) => setValue(v as number)} />\n        </div>\n    )\n}\n"
  },
  "statuses/progress/progress-indeterminate-demo": {
    "component": "@/components/docs/statuses/progress/progress-indeterminate-demo",
    "raw": "'use client'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressIndeterminateDemo() {\n    return (\n        <div className='flex flex-col gap-4 items-center'>\n            <Progress label='Loading…' isIndeterminate />\n            <Progress circle label='Loading…' isIndeterminate />\n        </div>\n    )\n}\n"
  },
  "block/sidebar/sidebar-dock-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-dock-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset } from '@/components/ui'\n\nexport default function SidebarDockDemo() {\n    return (\n        <div className='flex'>\n            <AppSidebar collapsible='dock' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Dock</Heading>\n                </div>\n            </SidebarInset>\n        </div>\n    )\n}\n"
  },
  "block/sidebar/sidebar-basic-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-basic-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset } from '@/components/ui'\n\nexport default function SidebarBasicDemo() {\n    return (\n        <div className='flex'>\n            <AppSidebar />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Basic</Heading>\n                </div>\n            </SidebarInset>\n        </div>\n    )\n}\n"
  },
  "block/sidebar/sidebar-floating-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-floating-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset } from '@/components/ui'\n\nexport default function SidebarFloatDemo() {\n    return (\n        <div className='flex'>\n            <AppSidebar variant='float' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Float</Heading>\n                </div>\n            </SidebarInset>\n        </div>\n    )\n}\n"
  },
  "block/sidebar/sidebar-off-canvas-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-off-canvas-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset } from '@/components/ui'\n\nexport default function SidebarOffCanvasDemo() {\n    return (\n        <div className='flex'>\n            <AppSidebar collapsible='hidden' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>OffCanvas</Heading>\n                </div>\n            </SidebarInset>\n        </div>\n    )\n}\n"
  },
  "block/sidebar/sidebar-default-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-default-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset } from '@/components/ui'\n\nexport default function Page() {\n    return (\n        <div className='flex'>\n            <AppSidebar variant='default' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Default</Heading>\n                </div>\n            </SidebarInset>\n        </div>\n    )\n}\n"
  },
  "block/sidebar/sidebar-inset-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-inset-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset } from '@/components/ui'\n\nexport default function SidebarInsetDemo() {\n    return (\n        <div className='flex'>\n            <AppSidebar variant='inset' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Inset</Heading>\n                </div>\n            </SidebarInset>\n        </div>\n    )\n}\n"
  },
  "block/sidebar/sidebar-fixed-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-fixed-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset } from '@/components/ui'\n\nexport default function SidebarFixedDemo() {\n    return (\n        <div className='flex'>\n            <AppSidebar collapsible='none' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Fixed</Heading>\n                </div>\n            </SidebarInset>\n        </div>\n    )\n}\n"
  },
  "block/components/user-setting/security-setting": {
    "component": "@/components/docs/block/components/user-setting/security-setting",
    "raw": "'use client'\n\nimport { IconKey } from 'hq-icons'\n\nimport { Button, Card, Form, Switch, TextField } from '@/components/ui'\n\nexport default function SecuritySetting() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Security</Card.Title>\n                <Card.Description>Secure your account.</Card.Description>\n            </Card.Header>\n            <Form>\n                <Card.Content className='grid gap-4'>\n                    <TextField\n                        prefix={<IconKey />}\n                        autoFocus\n                        type='password'\n                        label='Current Password'\n                        id='current_password'\n                        name='current_password'\n                        isRequired\n                    />\n                    <TextField\n                        prefix={<IconKey />}\n                        type='password'\n                        label='New Password'\n                        id='new_password'\n                        name='new_password'\n                        isRequired\n                    />\n                    <TextField\n                        prefix={<IconKey />}\n                        type='password'\n                        label='Confirm New Password'\n                        id='new_password_confirm'\n                        name='new_password_confirm'\n                        isRequired\n                    />\n                    <div className='text-muted-fg'>Account Preferences</div>\n                    <Switch>Enable 2FA</Switch>\n                    <Switch>Auto Logout</Switch>\n                </Card.Content>\n                <Card.Footer>\n                    <Button>Save</Button>\n                </Card.Footer>\n            </Form>\n        </Card>\n    )\n}\n"
  },
  "block/components/user-setting/plan-billing-setting": {
    "component": "@/components/docs/block/components/user-setting/plan-billing-setting",
    "raw": "'use client'\n\nimport { IconCircleUser, IconCreditCard, IconHash, IconLock, IconMap } from 'hq-icons'\n\nimport { Button, Card, DatePicker, Form, GridList, Heading, Note, TextField } from '@/components/ui'\n\nexport default function PlanBillingSetting() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Manage Your Plan</Card.Title>\n                <Card.Description>Upgrade or downgrade your current plan.</Card.Description>\n            </Card.Header>\n            <Form>\n                <Card.Content className='grid gap-4'>\n                    <Note variant='warning'>\n                        Changing the plan will take effect immediately. You will be charged for the\n                        rest of the current month.\n                    </Note>\n                    <GridList aria-label='Select items' selectionMode='single'>\n                        <GridList.Item textValue='Basic'>Basic</GridList.Item>\n                        <GridList.Item textValue='Standard'>Standard</GridList.Item>\n                        <GridList.Item textValue='Deluxe'>Deluxe</GridList.Item>\n                        <GridList.Item textValue='Ultimate'>Ultimate</GridList.Item>\n                    </GridList>\n                    <Heading level={4}>Payment Details</Heading>\n                    <TextField\n                        autoFocus\n                        prefix={<IconCircleUser />}\n                        label='Card Holder'\n                        name='card_holder'\n                        id='card_holder'\n                    />\n                    <div className='grid gap-4 md:grid-cols-4'>\n                        <TextField\n                            className='md:col-span-2'\n                            prefix={<IconCreditCard />}\n                            label='Card Number'\n                            name='card_number'\n                            id='card_number'\n                        />\n                        <DatePicker\n                            label='Expiration Date'\n                            name='expiration_date'\n                            id='expiration_date'\n                        />\n                        <TextField prefix={<IconLock />} label='CVC / CVC2' name='cvc' id='cvc' />\n                    </div>\n                    <div className='grid gap-4 lg:grid-cols-2'>\n                        <TextField\n                            prefix={<IconMap />}\n                            label='Country'\n                            name='country'\n                            id='country'\n                        />\n                        <TextField\n                            prefix={<IconHash />}\n                            label='Zip / Postal Code'\n                            name='zip'\n                            id='zip'\n                        />\n                    </div>\n                </Card.Content>\n                <Card.Footer>\n                    <Button>Save</Button>\n                </Card.Footer>\n            </Form>\n        </Card>\n    )\n}\n"
  },
  "block/components/user-setting/danger-area": {
    "component": "@/components/docs/block/components/user-setting/danger-area",
    "raw": "'use client'\n\nimport { IconUserX } from 'hq-icons'\n\nimport { Button, Card, Form, Modal, Note, TextField } from '@/components/ui'\n\nexport default function SecuritySetting() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Danger Area</Card.Title>\n                <Card.Description>Delete your account.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Modal>\n                    <Button variant='danger'>\n                        <IconUserX />\n                        Delete Account\n                    </Button>\n                    <Modal.Content role='alertdialog'>\n                        <Modal.Header>\n                            <Modal.Title>Delete Account</Modal.Title>\n                            <Modal.Description>\n                                This will permanently delete your account and all your data\n                            </Modal.Description>\n                            <Note variant='danger'>No undo button here, so be sure!</Note>\n                        </Modal.Header>\n                        <Form onSubmit={() => {}}>\n                            <Modal.Body>\n                                <TextField isRequired autoFocus label='Password' type='password' />\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button slot='close' variant='outline'>\n                                    Cancel\n                                </Button>\n                                <Button variant='danger'>Confirm</Button>\n                            </Modal.Footer>\n                        </Form>\n                    </Modal.Content>\n                </Modal>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "block/components/user-setting/account-setting": {
    "component": "@/components/docs/block/components/user-setting/account-setting",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBrandFacebook, IconBrandGithub, IconBrandInstagram, IconBrandX } from 'hq-icons'\nimport { isFileDropItem } from 'react-aria-components'\n\nimport {\n    Avatar,\n    Button,\n    Card,\n    DropZone,\n    FileTrigger,\n    Form,\n    Textarea,\n    TextField\n} from '@/components/ui'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function AccountSetting() {\n    const [droppedImage, setDroppedImage] = React.useState<string>('')\n    async function onDropHandler(e: DropEvent) {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n    async function onSelectHandler(e: FileList | null) {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n    return (\n        <section className='space-y-4'>\n            <Card>\n                <Card.Header>\n                    <Card.Title>Account</Card.Title>\n                    <Card.Description>Your account details.</Card.Description>\n                </Card.Header>\n                <Form>\n                    <Card.Content className='space-y-4'>\n                        <div className='flex items-center gap-2'>\n                            <DropZone\n                                getDropOperation={(types) =>\n                                    types.has('image/jpeg') || types.has('image/png')\n                                        ? 'copy'\n                                        : 'cancel'\n                                }\n                                onDrop={onDropHandler}\n                                className='size-10 overflow-hidden rounded-full p-0'\n                            >\n                                <Avatar src={droppedImage ?? ''} size='lg' />\n                                <input type='hidden' name='image' value={droppedImage ?? ''} />\n                            </DropZone>\n                            <FileTrigger\n                                size='sm'\n                                acceptedFileTypes={['image/png', 'image/jpeg']}\n                                onSelect={onSelectHandler}\n                            >\n                                Upload avatar\n                            </FileTrigger>\n                        </div>\n                        <TextField\n                            autoFocus\n                            label='Name'\n                            placeholder='Enter your name'\n                            id='name'\n                            name='name'\n                            isRequired\n                        />\n                        <TextField\n                            type='email'\n                            isRequired\n                            label='Email'\n                            placeholder='Enter your email'\n                            id='email'\n                            name='email'\n                        />\n                        <Textarea label='Bio' placeholder='Enter your bio' id='bio' name='bio' />\n                    </Card.Content>\n                    <Card.Footer>\n                        <Button>Save</Button>\n                    </Card.Footer>\n                </Form>\n            </Card>\n            <Card>\n                <Form>\n                    <Card.Header>\n                        <Card.Title>Social Accounts</Card.Title>\n                        <Card.Description>Your social accounts.</Card.Description>\n                    </Card.Header>\n                    <Card.Content className='grid gap-4 lg:grid-cols-2'>\n                        <TextField\n                            label='Github Username'\n                            prefix={<IconBrandGithub />}\n                            id='github'\n                            name='github'\n                        />\n                        <TextField\n                            label='X Username'\n                            prefix={<IconBrandX />}\n                            id='twitter'\n                            name='twitter'\n                        />\n                        <TextField\n                            label='Facebook'\n                            prefix={<IconBrandFacebook />}\n                            id='facebook'\n                            name='facebook'\n                        />\n                        <TextField\n                            label='Instagram'\n                            prefix={<IconBrandInstagram />}\n                            id='ig'\n                            name='ig'\n                        />\n                    </Card.Content>\n                    <Card.Footer>\n                        <Button>Save</Button>\n                    </Card.Footer>\n                </Form>\n            </Card>\n        </section>\n    )\n}\n"
  },
  "block/components/file-manager/file-list": {
    "component": "@/components/docs/block/components/file-manager/file-list",
    "raw": "import {\n    IconArchive,\n    IconDisc,\n    IconFileImage,\n    IconFileMusic,\n    IconFileText,\n    IconFileVideo,\n    IconFolder\n} from 'hq-icons'\n\nexport type FileNode = {\n    file: string\n    children?: FileNode[]\n}\n\nconst filesInDownloads: FileNode[] = [\n    {\n        file: 'Compressed',\n        children: [\n            { file: 'laravel.zip' },\n            { file: 'react.zip' },\n            { file: 'nextjs.rar' },\n            { file: 'ubuntu.iso' }\n        ]\n    },\n    {\n        file: 'Docs',\n        children: [{ file: 'resume.pdf' }, { file: 'cv.pdf' }]\n    },\n    {\n        file: 'Programs',\n        children: [{ file: 'chrome.exe' }, { file: 'vscode.deb' }]\n    }\n]\n\nconst filesInDocuments: FileNode[] = [\n    {\n        file: 'Thesis',\n        children: [\n            { file: 'Bab 1.docx' },\n            { file: 'Bab 2.docx' },\n            { file: 'Bab 3.docx' },\n            { file: 'Cover.docx' }\n        ]\n    },\n    { file: 'Secret.txt' },\n    { file: 'Project.jpg' }\n]\n\nconst filesInMusic: FileNode[] = [\n    { file: 'The Beatles.mp3' },\n    { file: 'Led Zeppelin.mp3' },\n    { file: 'Pink Floyd.mp3' },\n    { file: 'Queen.wav' },\n    { file: 'The Rolling Stones.mp3' },\n    { file: 'The Who.wav' }\n]\n\nconst filesInVideos: FileNode[] = [\n    {\n        file: 'Mission Impossible',\n        children: [\n            { file: 'Mission Impossible 1.mp4' },\n            { file: 'Mission Impossible 2.mp4' },\n            { file: 'Mission Impossible 3.mp4' }\n        ]\n    },\n    { file: 'Star Wars.mp4' },\n    { file: 'Avengers - Endgame.mkv' }\n]\n\nexport const rootFolders: FileNode[] = [\n    {\n        file: 'Downloads',\n        children: filesInDownloads\n    },\n    {\n        file: 'Documents',\n        children: filesInDocuments\n    },\n    {\n        file: 'Music',\n        children: filesInMusic\n    },\n    {\n        file: 'Videos',\n        children: filesInVideos\n    }\n]\n\nexport function mapFilePaths(nodes: FileNode[], parentPath: string = ''): string[] {\n    let paths: string[] = []\n    for (const node of nodes) {\n        const currentPath = parentPath ? `${parentPath}/${node.file}` : node.file\n        if (node.children) {\n            paths = paths.concat(mapFilePaths(node.children, currentPath))\n        } else {\n            paths.push(currentPath)\n        }\n    }\n    return paths\n}\n\nexport const getFileIcon = (ext: string) => {\n    let Icon = IconFolder\n    switch (ext) {\n        case 'jpg':\n        case 'png':\n            Icon = IconFileImage\n            break\n        case 'txt':\n        case 'docx':\n        case 'pdf':\n            Icon = IconFileText\n            break\n        case 'mp3':\n        case 'wav':\n            Icon = IconFileMusic\n            break\n        case 'mp4':\n        case 'mkv':\n            Icon = IconFileVideo\n            break\n        case 'zip':\n        case 'rar':\n            Icon = IconArchive\n            break\n        case 'iso':\n            Icon = IconDisc\n            break\n        default:\n        case 'folder':\n            Icon = IconFolder\n            break\n    }\n    return <Icon />\n}\n"
  },
  "block/components/user-profile/posts": {
    "component": "@/components/docs/block/components/user-profile/posts",
    "raw": "import Image from 'next/image'\nimport { Collection } from 'react-aria-components'\n\nimport { Card } from '@/components/ui'\n\nexport default function Posts() {\n    return (\n        <div className='grid grid-cols-1 2xl:grid-cols-3 gap-2'>\n            <Collection items={posts}>\n                {(item) => (\n                    <div key={item.id}>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title>{item.title}</Card.Title>\n                                <Card.Description>{item.date}</Card.Description>\n                            </Card.Header>\n                            <Card.Content className='space-y-2 text-justify'>\n                                <Image alt={item.title} src={item.image} width={400} height={300} />\n                                <p>{item.content}</p>\n                            </Card.Content>\n                        </Card>\n                    </div>\n                )}\n            </Collection>\n        </div>\n    )\n}\n\nconst posts = [\n    {\n        id: 1,\n        title: 'First Post',\n        date: '2021-01-01 - 12:00',\n        image: 'https://picsum.photos/400/300?random=1',\n        content:\n            'Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolorum tempore nulla libero laborum officia aliquam voluptas quod porro quis accusamus.'\n    },\n    {\n        id: 2,\n        title: 'Second Post',\n        date: '2021-01-02 - 08:00',\n        image: 'https://picsum.photos/400/300?random=2',\n        content:\n            'Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas totam ad nostrum earum provident natus tempora! Accusamus iure sunt quam!'\n    },\n    {\n        id: 3,\n        title: 'Third Post',\n        date: '2021-01-03 - 14:00',\n        image: 'https://picsum.photos/400/300?random=3',\n        content:\n            'Lorem ipsum dolor sit amet. Veritatis dicta aliquid, voluptatibus sapiente repellendus fugit saepe voluptate eum praesentium facilis?'\n    }\n]\n"
  },
  "block/components/user-profile/media": {
    "component": "@/components/docs/block/components/user-profile/media",
    "raw": "import Image from 'next/image'\nimport { Collection } from 'react-aria-components'\n\nimport { Card } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport default function Media() {\n    const items = Array.from({ length: 17 }, (_, id) => ({\n        id: id + 1,\n        title: 'Image ' + id\n    }))\n    return (\n        <div className='grid grid-cols-2 2xl:grid-cols-4 gap-2'>\n            <Collection items={items}>\n                {(item) => (\n                    <div key={item.id} className={cn(item.id % 5 === 0 && 'col-span-2')}>\n                        <Card>\n                            <Image\n                                width={item.id % 5 === 0 ? 800 : 400}\n                                height={300}\n                                src={`https://picsum.photos/${item.id % 5 === 0 ? 800 : 400}/300?random=${item.id}`}\n                                alt={item.title}\n                            />\n                        </Card>\n                    </div>\n                )}\n            </Collection>\n        </div>\n    )\n}\n"
  },
  "block/components/user-profile/about": {
    "component": "@/components/docs/block/components/user-profile/about",
    "raw": "import { Card, DL } from '@/components/ui'\n\nexport default function About() {\n    return (\n        <Card className='w-full'>\n            <Card.Header>\n                <Card.Title>About Me</Card.Title>\n                <Card.Description>My profile information</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <DL>\n                    <DL.T>Full Name</DL.T>\n                    <DL.D>Diqi Al-Haqqi</DL.D>\n                    <DL.T>Address</DL.T>\n                    <DL.D>East Java, Indonesia</DL.D>\n                    <DL.T>Age</DL.T>\n                    <DL.D>25 years</DL.D>\n                    <DL.T>Company</DL.T>\n                    <DL.D>Qomaruddin University Gresik</DL.D>\n                </DL>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "block/components/chatting-app/contact-list": {
    "component": "@/components/docs/block/components/chatting-app/contact-list",
    "raw": "import { Avatar } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\ninterface ContactProps {\n    id: number\n    name: string\n    avatar: string\n    status: 'online' | 'offline'\n    lastSeen: string\n    active: boolean\n}\nexport default function ContactList() {\n    return (\n        <div className='grid w-full gap-2 mb-4'>\n            {contacts.map((contact) => (\n                <Contact key={contact.id} {...contact} />\n            ))}\n        </div>\n    )\n}\nconst Contact = ({ name, avatar, status, lastSeen, active }: ContactProps) => {\n    return (\n        <div\n            className={cn(\n                'flex cursor-pointer flex-row items-center gap-3 rounded-lg border p-2 md:px-4',\n                active ? 'bg-primary/20' : ''\n            )}\n        >\n            {status === 'online' ? <Avatar src={avatar} /> : <Avatar src={avatar} />}\n            <div className='grid'>\n                <span className='text-sm'>{name}</span>\n                {status === 'online' ? (\n                    <small className='text-success text-xs'>Online</small>\n                ) : (\n                    <small className='text-muted-fg text-xs'>Last seen {lastSeen}</small>\n                )}\n            </div>\n        </div>\n    )\n}\n\nconst contacts: ContactProps[] = [\n    {\n        id: 1,\n        avatar: 'https://i.pravatar.cc/77',\n        name: 'Hebert',\n        status: 'online',\n        lastSeen: '20:32',\n        active: true\n    },\n    {\n        id: 2,\n        avatar: 'https://i.pravatar.cc/78',\n        name: 'Schroeder',\n        status: 'offline',\n        lastSeen: '02:10',\n        active: false\n    },\n    {\n        id: 3,\n        avatar: 'https://i.pravatar.cc/79',\n        name: 'Donna',\n        status: 'online',\n        lastSeen: '06:14',\n        active: false\n    },\n    {\n        id: 4,\n        avatar: 'https://i.pravatar.cc/80',\n        name: 'Olivia',\n        status: 'offline',\n        lastSeen: '06:47',\n        active: false\n    },\n    {\n        id: 5,\n        avatar: 'https://i.pravatar.cc/81',\n        name: 'Aisha',\n        status: 'offline',\n        lastSeen: '02:32',\n        active: false\n    },\n    {\n        id: 6,\n        avatar: 'https://i.pravatar.cc/82',\n        name: 'Bruce',\n        status: 'online',\n        lastSeen: '01:34',\n        active: false\n    },\n    {\n        id: 7,\n        avatar: 'https://i.pravatar.cc/83',\n        name: 'Harmon',\n        status: 'offline',\n        lastSeen: '00:15',\n        active: false\n    }\n]\n"
  },
  "block/components/chatting-app/message-form": {
    "component": "@/components/docs/block/components/chatting-app/message-form",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCamera, IconMic, IconPaperclip, IconSend } from 'hq-icons'\n\nimport { Button, Form } from '@/components/ui'\n\ninterface MessageFormProps {\n    value: string\n    onChange: (value: string) => void\n    onSend: (e: React.FormEvent<HTMLFormElement>) => void\n}\nexport default function MessageForm({ value, onChange, onSend }: MessageFormProps) {\n    const editorRef = React.useRef<HTMLDivElement>(null)\n    React.useEffect(() => {\n        const editor = editorRef.current\n\n        const handleInput = () => {\n            if (editor) {\n                const text = editor.innerText\n                onChange(text)\n                editor.innerHTML = formatText(text)\n                placeCaretAtEnd(editor)\n            }\n        }\n\n        const placeCaretAtEnd = (el: HTMLElement) => {\n            el.focus()\n            const range = document.createRange()\n            range.selectNodeContents(el)\n            range.collapse(false)\n            const sel = window.getSelection()\n            sel?.removeAllRanges()\n            sel?.addRange(range)\n        }\n\n        editor?.addEventListener('input', handleInput)\n\n        return () => {\n            editor?.removeEventListener('input', handleInput)\n        }\n    }, [onChange])\n\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        onSend(e)\n        if (editorRef.current) {\n            editorRef.current.innerHTML = ''\n        }\n    }\n    return (\n        <Form\n            onSubmit={onSubmit}\n            className='bg-bg relative overflow-hidden rounded-lg border-t md:border'\n        >\n            <div\n                contentEditable\n                ref={editorRef}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter' && !e.shiftKey && value.trim() !== '') {\n                        onSubmit(e as unknown as React.FormEvent<HTMLFormElement>)\n                    }\n                }}\n                aria-label='Message'\n                id='message'\n                className='no-scrollbar min-h-32 w-full resize-none border-0 p-3 outline-none'\n            />\n            <div className='flex items-center p-2'>\n                <Button variant='ghost' size='icon' type='button'>\n                    <IconCamera className='size-4' />\n                    <span className='sr-only'>Upload Image</span>\n                </Button>\n                <Button variant='ghost' size='icon' type='button'>\n                    <IconMic className='size-4' />\n                    <span className='sr-only'>Use Microphone</span>\n                </Button>\n                <Button variant='ghost' size='icon' type='button'>\n                    <IconPaperclip className='size-4' />\n                    <span className='sr-only'>Attach File</span>\n                </Button>\n                <Button\n                    isDisabled={value.trim() === ''}\n                    type='submit'\n                    size='sm'\n                    className='ml-auto gap-1.5'\n                >\n                    Send Message\n                    <IconSend />\n                </Button>\n            </div>\n        </Form>\n    )\n}\n\nconst formatText = (text: string) => {\n    return text\n        .replace(/_(.*?)_/g, '<em>_$1_</em>')\n        .replace(/_/g, '<span class=\"text-muted-fg\">_</span>')\n        .replace(/\\*(.*?)\\*/g, '<strong>*$1*</strong>')\n        .replace(/\\*/g, '<span class=\"text-muted-fg\">*</span>')\n        .replace(/~(.*?)~/g, '<del>~$1~</del>')\n        .replace(/~/g, '<span class=\"text-muted-fg\">~</span>')\n        .replace(/\\^(.*?)\\^/g, '<sup>^$1^</sup>')\n        .replace(/\\^/g, '<span class=\"text-muted-fg\">^</span>')\n        .replace(\n            /(https?:\\/\\/[^\\s]+)/g,\n            '<a href=\"$1\" class=\"text-primary underline\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\n        )\n        .replace(/\\n/g, '<br />')\n}\n"
  },
  "block/components/chatting-app/bubble-chat": {
    "component": "@/components/docs/block/components/chatting-app/bubble-chat",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconCheck,\n    IconCheckDouble,\n    IconChevronRight,\n    IconClock,\n    IconForward,\n    IconInfo,\n    IconReply,\n    IconTrash\n} from 'hq-icons'\n\nimport { Button, Menu } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport interface BubbleChatProps {\n    message: string\n    time: string\n    role: 'send' | 'recieve'\n    status?: 'pending' | 'sent' | 'delivered' | 'read'\n    onDelete?: () => void\n}\n\nexport default function BubbleChat({ message, time, role, status, onDelete }: BubbleChatProps) {\n    const statusIcon: Record<string, React.ReactNode> = {\n        pending: <IconClock className='text-fg size-5' />,\n        sent: <IconCheck className='text-fg size-5' />,\n        delivered: <IconCheckDouble className='text-fg size-5' />,\n        read: <IconCheckDouble className='text-success size-5' />\n    }\n    return (\n        <div\n            className={cn(\n                'group flex items-start',\n                role === 'send' ? 'flex-row-reverse' : 'flex-row'\n            )}\n        >\n            <div>\n                <div\n                    className={cn(\n                        'rounded-lg border px-2 py-1.5 text-right text-sm [&_strong]:font-medium',\n                        role === 'send' ? 'rounded-br-none' : 'rounded-bl-none'\n                    )}\n                >\n                    <div\n                        className='text-fg text-left text-sm'\n                        dangerouslySetInnerHTML={{ __html: convertToHtml(message) }}\n                    />\n                </div>\n                <small\n                    className={cn(\n                        'text-muted-fg mt-0.5 flex items-center gap-1',\n                        role === 'send' ? 'justify-end' : 'justify-start'\n                    )}\n                >\n                    {time}\n                    {role === 'send' && status && statusIcon[status]}\n                </small>\n            </div>\n            <Menu>\n                <Button\n                    variant='outline'\n                    size='icon'\n                    className='pressed:opacity-100 mx-2 size-7 p-1 opacity-0 transition group-hover:opacity-100'\n                >\n                    <IconChevronRight\n                        className={cn('size-3', role === 'send' ? 'rotate-180' : '')}\n                    />\n                </Button>\n                <Menu.Content placement={role === 'send' ? 'left' : 'right'} aria-label='Actions'>\n                    <Menu.Item>\n                        <IconReply />\n                        Reply\n                    </Menu.Item>\n                    <Menu.Item>\n                        <IconForward />\n                        Forward\n                    </Menu.Item>\n                    <Menu.Item>\n                        <IconInfo />\n                        Message Info\n                    </Menu.Item>\n                    <Menu.Item onAction={onDelete} isDanger>\n                        <IconTrash /> Delete\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </div>\n    )\n}\n\nconst convertToHtml = (text: string) => {\n    let html = text\n    html = html.replace(\n        /(https?:\\/\\/[^\\s]+)/g,\n        '<a href=\"$1\" target=\"_blank\" class=\"text-primary underline\" rel=\"noopener noreferrer\">$1</a>'\n    )\n    html = html.replace(/`([^`]+)`/g, '<code class=\"font-mono\">$1</code>')\n    html = html.replace(/\\*(.*?)\\*/g, '<strong class=\"text-bold\">$1</strong>')\n    html = html.replace(/_(.*?)_/g, '<em>$1</em>')\n    html = html.replace(/~(.*?)~/g, '<del>$1</del>')\n    html = html.replace(/^(.*?)^/g, '<sup>$1</sup>')\n    html = html.replace(/\\n/g, '<br />')\n    return html\n}\n"
  },
  "block/components/paginator": {
    "component": "@/components/docs/block/components/paginator",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\nimport { useMediaQuery } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\n\ninterface PaginateProps {\n    className?: string\n    show: number\n    total: number\n    page: number\n    setPage: (page: number) => void\n}\n\nexport default function Paginator({ className, show, page, total, setPage }: PaginateProps) {\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n\n    const meta = {\n        total,\n        from: (page - 1) * Number(show) + 1,\n        to:\n            total - show * page > 0\n                ? total - (total - show * page)\n                : show * page - Math.abs(total - show * page),\n        page,\n        last_page: Math.ceil(total / show)\n    }\n\n    const actions = {\n        first: () => setPage(1),\n        prev: () => setPage(page - 1),\n        next: () => setPage(page + 1),\n        last: () => setPage(meta.last_page)\n    }\n    return (\n        <div\n            className={cn(\n                'flex w-full flex-col-reverse items-center gap-3 xl:flex-row xl:justify-between',\n                className\n            )}\n        >\n            <div>\n                Showing {meta.from} to {meta.to} of {meta.total} results\n            </div>\n            <div>\n                <Pagination>\n                    {isDesktop ? (\n                        <>\n                            <Pagination.Item\n                                role='first'\n                                isDisabled={meta.page === 1}\n                                onAction={actions.first}\n                            />\n                            <Pagination.Item\n                                role='previous'\n                                isDisabled={meta.page === 1}\n                                onAction={actions.prev}\n                            />\n                            {meta.page > 2 && (\n                                <Pagination.Item onAction={actions.first}>1</Pagination.Item>\n                            )}\n                            {meta.page > 3 && <Pagination.Item role='ellipsis' />}\n                            {meta.page !== 1 && (\n                                <Pagination.Item onAction={() => setPage(meta.page - 1)}>\n                                    {meta.page - 1}\n                                </Pagination.Item>\n                            )}\n                            <Pagination.Item isCurrent>{meta.page}</Pagination.Item>\n                            {meta.page !== meta.last_page && (\n                                <Pagination.Item onAction={() => setPage(meta.page + 1)}>\n                                    {meta.page + 1}\n                                </Pagination.Item>\n                            )}\n                            {meta.page < meta.last_page - 2 && <Pagination.Item role='ellipsis' />}\n                            {meta.page <= meta.last_page - 2 && (\n                                <Pagination.Item onAction={actions.last}>\n                                    {meta.last_page}\n                                </Pagination.Item>\n                            )}\n                            <Pagination.Item\n                                role='next'\n                                isDisabled={meta.page === meta.last_page}\n                                onAction={actions.next}\n                            />\n                            <Pagination.Item\n                                role='last'\n                                isDisabled={meta.page === meta.last_page}\n                                onAction={actions.last}\n                            />\n                        </>\n                    ) : (\n                        <>\n                            <Pagination.Item\n                                role='first'\n                                isDisabled={meta.page === 1}\n                                onAction={actions.first}\n                            />\n                            <Pagination.Item\n                                role='previous'\n                                isDisabled={meta.page === 1}\n                                onAction={actions.prev}\n                            />\n                            <Pagination.Label current={meta.page} total={meta.last_page} />\n                            <Pagination.Item\n                                role='next'\n                                isDisabled={meta.page === meta.last_page}\n                                onAction={actions.next}\n                            />\n                            <Pagination.Item\n                                role='last'\n                                isDisabled={meta.page === meta.last_page}\n                                onAction={actions.last}\n                            />\n                        </>\n                    )}\n                </Pagination>\n            </div>\n        </div>\n    )\n}\n"
  },
  "block/examples/dashboard": {
    "component": "@/components/docs/block/examples/dashboard",
    "raw": "'use client'\n\nimport {\n    IconActivity,\n    IconChartColumn,\n    IconRupiah,\n    IconSquareArrowUpRight,\n    IconUsers\n} from 'hq-icons'\n\nimport NavbarLayout from '@/components/docs/block/layouts/app-navbar'\nimport { Avatar, buttonStyles, Card, Container, Link, Navbar, Table } from '@/components/ui'\nimport { getInitials } from '@/lib/utils'\n\nexport default function Dashboard() {\n    return (\n        <NavbarLayout variant='inset'>\n            <Navbar.Inset>\n                <Container className='py-6 @xl:py-12'>\n                    <main className='flex flex-1 flex-col gap-4 md:gap-8'>\n                        <div className='grid gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-4'>\n                            <Card>\n                                <Card.Header className='flex flex-row items-center justify-between space-y-0'>\n                                    <Card.Title className='text-sm font-medium'>\n                                        Total Revenue\n                                    </Card.Title>\n                                    <IconRupiah className='text-muted-fg size-4' />\n                                </Card.Header>\n                                <Card.Content className='pb-4'>\n                                    <div className='text-2xl font-bold'>Rp 45,231.89</div>\n                                    <p className='text-muted-fg text-xs'>+20.1% from last month</p>\n                                </Card.Content>\n                            </Card>\n                            <Card>\n                                <Card.Header className='flex flex-row items-center justify-between space-y-0'>\n                                    <Card.Title className='text-sm font-medium'>\n                                        Subscriptions\n                                    </Card.Title>\n                                    <IconUsers className='text-muted-fg size-4' />\n                                </Card.Header>\n                                <Card.Content className='pb-4'>\n                                    <div className='text-2xl font-bold'>+2350</div>\n                                    <p className='text-muted-fg text-xs'>+180.1% from last month</p>\n                                </Card.Content>\n                            </Card>\n                            <Card>\n                                <Card.Header className='flex flex-row items-center justify-between space-y-0'>\n                                    <Card.Title className='text-sm font-medium'>Sales</Card.Title>\n                                    <IconChartColumn className='text-muted-fg size-4' />\n                                </Card.Header>\n                                <Card.Content className='pb-4'>\n                                    <div className='text-2xl font-bold'>+12,234</div>\n                                    <p className='text-muted-fg text-xs'>+19% from last month</p>\n                                </Card.Content>\n                            </Card>\n                            <Card>\n                                <Card.Header className='flex flex-row items-center justify-between space-y-0'>\n                                    <Card.Title className='text-sm font-medium'>\n                                        Active Now\n                                    </Card.Title>\n                                    <IconActivity className='text-muted-fg size-4' />\n                                </Card.Header>\n                                <Card.Content className='pb-4'>\n                                    <div className='text-2xl font-bold'>+573</div>\n                                    <p className='text-muted-fg text-xs'>+201 since last hour</p>\n                                </Card.Content>\n                            </Card>\n                        </div>\n                        <div className='grid gap-4 md:gap-8 lg:grid-cols-2 xl:grid-cols-3'>\n                            <Card className='xl:col-span-2'>\n                                <Card.Header className='flex flex-row justify-between'>\n                                    <div className='grid gap-1'>\n                                        <Card.Title>Transactions</Card.Title>\n                                        <Card.Description>Recent transactions.</Card.Description>\n                                    </div>\n                                    <Link className={buttonStyles({ variant: 'outline' })} href='#'>\n                                        All\n                                        <IconSquareArrowUpRight />\n                                    </Link>\n                                </Card.Header>\n                                <Card.Content>\n                                    <Table>\n                                        <Table.Header>\n                                            <Table.Column isRowHeader>Customer</Table.Column>\n                                            <Table.Column className='[&_div]:justify-end'>\n                                                Amount\n                                            </Table.Column>\n                                        </Table.Header>\n                                        <Table.Body>\n                                            {transactions.map((transaction) => (\n                                                <Table.Row key={transaction.id}>\n                                                    <Table.Cell>\n                                                        <div className='font-medium'>\n                                                            {transaction.name}\n                                                        </div>\n                                                        <div className='text-muted-fg hidden text-sm md:inline'>\n                                                            {transaction.email}\n                                                        </div>\n                                                    </Table.Cell>\n                                                    <Table.Cell className='text-right'>\n                                                        Rp {transaction.amount}\n                                                    </Table.Cell>\n                                                </Table.Row>\n                                            ))}\n                                        </Table.Body>\n                                    </Table>\n                                </Card.Content>\n                            </Card>\n                            <Card>\n                                <Card.Header>\n                                    <Card.Title>Recent Sales</Card.Title>\n                                </Card.Header>\n                                <Card.Content className='grid gap-8'>\n                                    {transactions.map((transaction) => (\n                                        <div\n                                            key={transaction.id}\n                                            className='flex items-center gap-4'\n                                        >\n                                            <Avatar\n                                                className='hidden size-9 sm:flex'\n                                                src={`https://i.pravatar.cc/150?img=${transaction.id}`}\n                                                initials={getInitials(transaction.name)}\n                                            />\n                                            <div className='grid gap-1'>\n                                                <p className='text-sm leading-none font-medium'>\n                                                    {transaction.name}\n                                                </p>\n                                                <p className='text-muted-fg text-sm'>\n                                                    {transaction.email}\n                                                </p>\n                                            </div>\n                                            <div className='ml-auto font-medium'>\n                                                +Rp {transaction.amount}\n                                            </div>\n                                        </div>\n                                    ))}\n                                </Card.Content>\n                            </Card>\n                        </div>\n                    </main>\n                </Container>\n            </Navbar.Inset>\n        </NavbarLayout>\n    )\n}\n\nconst transactions = [\n    {\n        id: 1,\n        name: 'Berger',\n        email: 'bergersavage@senmao.com',\n        amount: 17135\n    },\n    {\n        id: 2,\n        name: 'Horn',\n        email: 'hornsavage@senmao.com',\n        amount: 25866\n    },\n    {\n        id: 3,\n        name: 'Frieda',\n        email: 'friedasavage@senmao.com',\n        amount: 54584\n    },\n    {\n        id: 4,\n        name: 'Noble',\n        email: 'noblesavage@senmao.com',\n        amount: 27562\n    },\n    {\n        id: 5,\n        name: 'Hewitt',\n        email: 'hewittsavage@senmao.com',\n        amount: 77237\n    }\n]\n"
  },
  "block/examples/auth-form-classic": {
    "component": "@/components/docs/block/examples/auth-form-classic",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutClassic from 'layouts/auth-layout-classic'\n\nimport { toast } from '@/components/ui'\nimport { Button, Checkbox, Form, Link, Separator, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutClassic title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='mt-2 w-full' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='mb-4 text-center text-sm'>\n                    Already have an account?\n                </Link>\n                <Separator>Or continue with</Separator>\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutClassic>\n    )\n}\n"
  },
  "block/examples/user-setting": {
    "component": "@/components/docs/block/examples/user-setting",
    "raw": "'use client'\n\nimport AccountSetting from 'components/user-setting/account-setting'\nimport DangerArea from 'components/user-setting/danger-area'\nimport PlanBillingSetting from 'components/user-setting/plan-billing-setting'\nimport SecuritySetting from 'components/user-setting/security-setting'\n\nimport NavbarLayout from '@/components/docs/block/layouts/app-navbar'\nimport { Card, Container, Tabs } from '@/components/ui'\nimport { useMediaQuery } from '@/lib/hooks'\n\nexport default function UserSetting() {\n    const isMobile = useMediaQuery('(max-width: 767px)')\n    return (\n        <NavbarLayout variant='float'>\n            <Container className='py-6 @xl:py-12'>\n                <Card className='mb-6'>\n                    <Card.Header>\n                        <Card.Title>User Setting</Card.Title>\n                        <Card.Description>\n                            Manage your account settings and preferences.\n                        </Card.Description>\n                    </Card.Header>\n                </Card>\n                <Tabs\n                    orientation={isMobile ? 'horizontal' : 'vertical'}\n                    aria-label='E-Learning Platform'\n                >\n                    <Tabs.List>\n                        <Tabs.Label id='account'>Account</Tabs.Label>\n                        <Tabs.Label id='security'>Security</Tabs.Label>\n                        <Tabs.Label id='plan'>Plan & Billing</Tabs.Label>\n                        <Tabs.Label id='danger'>Danger Area</Tabs.Label>\n                    </Tabs.List>\n                    <Tabs.Content id='account'>\n                        <AccountSetting />\n                    </Tabs.Content>\n                    <Tabs.Content id='security'>\n                        <SecuritySetting />\n                    </Tabs.Content>\n                    <Tabs.Content id='plan'>\n                        <PlanBillingSetting />\n                    </Tabs.Content>\n                    <Tabs.Content id='danger'>\n                        <DangerArea />\n                    </Tabs.Content>\n                </Tabs>\n            </Container>\n        </NavbarLayout>\n    )\n}\n"
  },
  "block/examples/chatting-app": {
    "component": "@/components/docs/block/examples/chatting-app",
    "raw": "'use client'\n\nimport React, { FormEvent } from 'react'\n\nimport BubbleChat, { type BubbleChatProps } from 'components/chatting-app/bubble-chat'\nimport ContactList from 'components/chatting-app/contact-list'\nimport MessageForm from 'components/chatting-app/message-form'\nimport {\n    IconCircleX,\n    IconContact,\n    IconEllipsisVertical,\n    IconLogOut,\n    IconMessageDashed,\n    IconMessageMore,\n    IconMessagePlus,\n    IconTrash,\n    IconUser\n} from 'hq-icons'\nimport ChattingAppLayout from 'layouts/chatting-app-layout'\n\nimport { Avatar, Button, buttonStyles, Menu, Popover, SidebarInset } from '@/components/ui'\nimport { cn, formatTime } from '@/lib/utils'\n\nexport default function ChatApp() {\n    const [chats, setChats] = React.useState<BubbleChatProps[]>([\n        {\n            message: \"Assalamu'alaikum, Hello Bro!\",\n            time: '10:00',\n            role: 'recieve'\n        },\n        {\n            message: \"Wa'alaikumsalam, Yes Bro... What's up?\",\n            time: '10:01',\n            role: 'send',\n            status: 'read'\n        },\n        {\n            message: `I Have a good news, There is new Component at this site. I hope you will like it.\n                Check it out. https://cleon-ui.vercel.app\n                `,\n            time: '10:03',\n            role: 'recieve'\n        }\n    ])\n\n    const [message, setMessage] = React.useState<string>('')\n\n    function sendMessage(e: FormEvent) {\n        e.preventDefault()\n        setChats([\n            ...chats,\n            {\n                message,\n                time: formatTime(new Date()),\n                role: 'send'\n            }\n        ])\n        setMessage('')\n    }\n\n    function deleteChat(index: number) {\n        setChats([...chats.slice(0, index), ...chats.slice(index + 1)])\n    }\n\n    return (\n        <div className='flex'>\n            <ChattingAppLayout />\n            <SidebarInset>\n                <main className='grid h-svh flex-1 gap-3 overflow-auto md:grid-cols-2 md:p-2 lg:grid-cols-4'>\n                    <div className='relative hidden flex-col items-start gap-4 rounded-lg border md:flex'>\n                        <div className='bg-bg sticky top-0 z-20 flex w-full items-center justify-between rounded-lg p-4'>\n                            <h1 className='text-2xl font-bold'>Chats</h1>\n                            <div className='flex items-center justify-between gap-2'>\n                                <Button variant='ghost' size='icon'>\n                                    <IconMessageMore className='!size-6' />\n                                </Button>\n                                <Menu>\n                                    <Menu.Trigger\n                                        className={buttonStyles({\n                                            variant: 'ghost',\n                                            size: 'icon'\n                                        })}\n                                    >\n                                        <IconEllipsisVertical />\n                                    </Menu.Trigger>\n                                    <Menu.Content placement='bottom end'>\n                                        <Menu.Item>\n                                            <IconMessagePlus />\n                                            New Group\n                                        </Menu.Item>\n                                        <Menu.Item isDanger>\n                                            <IconLogOut />\n                                            Logout\n                                        </Menu.Item>\n                                    </Menu.Content>\n                                </Menu>\n                            </div>\n                        </div>\n                        <div className='w-full px-4'>\n                            <ContactList />\n                        </div>\n                    </div>\n                    <div className='bg-bg relative flex h-full min-h-[50vh] flex-col rounded-lg lg:col-span-3'>\n                        <div className='flex flex-row items-center gap-3 rounded-lg border-b p-2 md:border md:px-4'>\n                            <Popover>\n                                <Button variant='ghost' size='icon' className='md:hidden'>\n                                    <IconContact />\n                                </Button>\n                                <Popover.Content aria-label='Contact List'>\n                                    <Popover.Body>\n                                        <ContactList />\n                                    </Popover.Body>\n                                </Popover.Content>\n                            </Popover>\n                            <Avatar initials='HB' src='https://i.pravatar.cc/77' />\n                            <div className='grid'>\n                                <span className='text-sm'>Hebert</span>\n                                <small className='text-muted-fg text-xs'>Online</small>\n                            </div>\n                            <Menu>\n                                <Menu.Trigger\n                                    className={cn(\n                                        buttonStyles({\n                                            variant: 'ghost',\n                                            size: 'icon'\n                                        }),\n                                        'ml-auto'\n                                    )}\n                                >\n                                    <IconEllipsisVertical />\n                                </Menu.Trigger>\n                                <Menu.Content placement='bottom end'>\n                                    <Menu.Item>\n                                        <IconUser />\n                                        Contact Info\n                                    </Menu.Item>\n                                    <Menu.Item>\n                                        <IconTrash />\n                                        Clear Chat\n                                    </Menu.Item>\n                                    <Menu.Item isDanger>\n                                        <IconCircleX />\n                                        Block\n                                    </Menu.Item>\n                                </Menu.Content>\n                            </Menu>\n                        </div>\n                        <div className='text-muted-fg flex-1 flex-col space-y-2 overflow-x-hidden overflow-y-scroll p-4'>\n                            {chats.length > 0 ? (\n                                chats?.map((chat: BubbleChatProps, i: number) => (\n                                    <BubbleChat key={i} {...chat} onDelete={() => deleteChat(i)} />\n                                ))\n                            ) : (\n                                <div className='flex h-full flex-col items-center justify-center'>\n                                    <IconMessageDashed className='!size-6' />\n                                    <p className='text-center text-xl font-bold'>\n                                        Start a conversation\n                                    </p>\n                                </div>\n                            )}\n                        </div>\n                        <MessageForm value={message} onChange={setMessage} onSend={sendMessage} />\n                    </div>\n                </main>\n            </SidebarInset>\n        </div>\n    )\n}\n"
  },
  "block/examples/file-manager": {
    "component": "@/components/docs/block/examples/file-manager",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getFileIcon, mapFilePaths, rootFolders } from 'components/file-manager/file-list'\nimport {\n    IconLayoutGrid,\n    IconLayoutList,\n    IconSearch,\n    IconSquare,\n    IconSquareCheckBig\n} from 'hq-icons'\nimport FileManagerLayout from 'layouts/file-manager-layout'\n\nimport { Breadcrumbs, Button, GridList, SearchField, Toggle } from '@/components/ui'\n\nexport default function FileManager() {\n    const [view, setView] = React.useState<'grid' | 'stack'>('grid')\n    const [selectionMode, setSelectionMode] = React.useState<'single' | 'multiple'>('single')\n    const [dir, setDir] = React.useState('')\n    const paths = mapFilePaths(rootFolders)\n\n    const [files, setFiles] = React.useState(paths)\n\n    React.useEffect(() => {\n        setFiles(paths.filter((path) => path.startsWith(dir)))\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dir])\n\n    return (\n        <FileManagerLayout rootDir={dir} setRootDir={setDir}>\n            <header className='sticky top-0 flex h-[3.57rem] items-center justify-between gap-x-2 px-4'>\n                <span className='flex items-center gap-x-4'>\n                    <Breadcrumbs\n                        onAction={(v) => setDir(v + '/')}\n                        className='hidden md:flex'\n                        items={dir\n                            .split('/')\n                            .filter((item) => item !== '')\n                            .map((item) => ({ id: item }))}\n                    >\n                        {(item) => <Breadcrumbs.Item id={item.id}>{item.id}</Breadcrumbs.Item>}\n                    </Breadcrumbs>\n                </span>\n                <div className='flex items-center gap-x-2'>\n                    <Button\n                        variant='ghost'\n                        className='md:hidden'\n                        aria-label='Search...'\n                        size='icon'\n                    >\n                        <IconSearch />\n                    </Button>\n                    <SearchField aria-label='Search' className='hidden md:inline-flex' />\n                    <Button\n                        size='icon'\n                        variant='ghost'\n                        aria-label='View'\n                        onPress={() => setView(view === 'stack' ? 'grid' : 'stack')}\n                    >\n                        {view === 'stack' ? (\n                            <IconLayoutList />\n                        ) : (\n                            <IconLayoutGrid className='size-5' />\n                        )}\n                    </Button>\n                    <Toggle\n                        size='icon'\n                        aria-label='Selection Mode'\n                        isSelected={selectionMode === 'multiple'}\n                        onChange={() =>\n                            setSelectionMode(selectionMode === 'multiple' ? 'single' : 'multiple')\n                        }\n                    >\n                        {({ isSelected }) => (isSelected ? <IconSquareCheckBig /> : <IconSquare />)}\n                    </Toggle>\n                </div>\n            </header>\n            <div className='p-4 lg:p-6'>\n                <GridList\n                    aria-label='Files'\n                    selectionBehavior='toggle'\n                    selectionMode={selectionMode}\n                    columns={view === 'stack' ? 1 : 'auto'}\n                    gap={view === 'stack' ? 0 : 2}\n                    items={[\n                        ...new Map(\n                            files.map((item) => [\n                                item.replace(dir, '').split('/')[0],\n                                { id: item.replace(dir, '').split('/')[0] }\n                            ])\n                        ).values()\n                    ]}\n                >\n                    {(item) => (\n                        <GridList.Item\n                            textValue={item.id}\n                            id={item.id}\n                            onAction={() =>\n                                !item.id.includes('.') && setDir(dir + item.id.split('/')[0] + '/')\n                            }\n                        >\n                            {getFileIcon(item.id.split('.').pop() || 'folder')}\n                            {item.id}\n                        </GridList.Item>\n                    )}\n                </GridList>\n            </div>\n        </FileManagerLayout>\n    )\n}\n"
  },
  "block/examples/auth-form-split": {
    "component": "@/components/docs/block/examples/auth-form-split",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutSplit from 'layouts/auth-layout-split'\n\nimport { toast } from '@/components/ui'\nimport { Button, Checkbox, Form, Link, Separator, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutSplit title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='mt-2 w-full' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='mb-4 text-center text-sm'>\n                    Already have an account?\n                </Link>\n                <Separator>Or continue with</Separator>\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutSplit>\n    )\n}\n"
  },
  "block/examples/user-profile": {
    "component": "@/components/docs/block/examples/user-profile",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport About from 'components/user-profile/about'\nimport Media from 'components/user-profile/media'\nimport Posts from 'components/user-profile/posts'\nimport Image from 'next/image'\nimport { Key } from 'react-aria-components'\n\nimport NavbarLayout from '@/components/docs/block/layouts/app-navbar'\nimport { Avatar, Card, Container, Description, Heading, Tabs } from '@/components/ui'\n\nexport default function UserProfile() {\n    const [panel, setPanel] = React.useState<Key>(1)\n    return (\n        <NavbarLayout variant='inset'>\n            <Container className='py-6 @xl:py-12'>\n                <div className='relative w-full'>\n                    <Card className='w-full overflow-hidden'>\n                        <Card.Content className='p-0 lg:h-96'>\n                            <Image\n                                width={1920}\n                                height={1080}\n                                src='https://picsum.photos/id/1/1920/1080'\n                                alt='profil'\n                                className='object-contain'\n                            />\n                        </Card.Content>\n                    </Card>\n                    <div className='relative mt-12 flex flex-col items-center gap-4 lg:mt-4 lg:flex-row'>\n                        <Avatar\n                            alt='logo'\n                            src='https://github.com/dq-alhq.png'\n                            className='bg-bg absolute bottom-32 left-1/2 size-24 -translate-x-1/2 rounded-full border p-1 lg:-bottom-4 lg:left-20 lg:size-44 lg:translate-x-0'\n                        />\n                        <div className='flex w-full flex-col gap-1 lg:ml-72'>\n                            <Heading className='text-center text-lg font-bold lg:text-left lg:text-4xl'>\n                                Diqi Al-Haqqi\n                            </Heading>\n                            <Description className='text-center text-sm uppercase lg:text-left lg:text-lg'>\n                                East Java, Indonesia\n                            </Description>\n                        </div>\n                        <Tabs\n                            className='mx-20 lg:ml-auto'\n                            selectedKey={panel}\n                            onSelectionChange={setPanel}\n                        >\n                            <Tabs.List>\n                                <Tabs.Label className='lg:text-xl' id={1}>\n                                    Posts\n                                </Tabs.Label>\n                                <Tabs.Label className='lg:text-xl' id={2}>\n                                    About\n                                </Tabs.Label>\n                                <Tabs.Label className='lg:text-xl' id={3}>\n                                    Media\n                                </Tabs.Label>\n                            </Tabs.List>\n                        </Tabs>\n                    </div>\n                </div>\n                <div className='mt-2 flex flex-col gap-6 lg:mt-12 lg:flex-row'>\n                    {panel === 1 && <Posts />}\n                    {panel === 2 && <About />}\n                    {panel === 3 && <Media />}\n                </div>\n            </Container>\n        </NavbarLayout>\n    )\n}\n"
  },
  "block/examples/auth-form-modern": {
    "component": "@/components/docs/block/examples/auth-form-modern",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutModern from 'layouts/auth-layout-modern'\n\nimport { toast } from '@/components/ui'\nimport { Button, Checkbox, Form, Link, Separator, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutModern title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='mt-2 w-full' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='mb-4 text-center text-sm'>\n                    Already have an account?\n                </Link>\n                <Separator>Or continue with</Separator>\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutModern>\n    )\n}\n"
  },
  "block/examples/product-management": {
    "component": "@/components/docs/block/examples/product-management",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport Paginator from 'components/paginator'\nimport { IconEllipsisVertical, IconEye, IconHighlighter, IconPlus, IconTrash } from 'hq-icons'\nimport { Key } from 'react-aria-components'\nimport { useDebouncedCallback } from 'use-debounce'\n\nimport NavbarLayout from '@/components/docs/block/layouts/app-navbar'\nimport { Card, Container, Menu, SearchField, Select, Table, Toolbar } from '@/components/ui'\n\ntype product = {\n    id: number\n    title: string\n    category: string\n    price: string\n}\n\nexport default function ProductManagement() {\n    const [items, setItems] = React.useState<product[]>([])\n    const [show, setShow] = React.useState<Key>(5)\n    const [page, setPage] = React.useState<number>(1)\n    const [total, setTotal] = React.useState<number>(0)\n\n    const getProducts = async ({ query = '' }: { query?: string } = {}) => {\n        const response = await fetch(\n            `https://dummyjson.com/products/search?q=${query}&limit=${show}&skip=${(page - 1) * Number(show)}&select=title,category,price`\n        )\n        const data = await response.json()\n        setItems(data.products)\n        setTotal(data.total)\n    }\n\n    const handleSearch = useDebouncedCallback((e) => {\n        if (e) {\n            getProducts({ query: e })\n        } else {\n            getProducts()\n        }\n    }, 300)\n\n    React.useEffect(() => {\n        getProducts()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [show, page])\n\n    return (\n        <NavbarLayout>\n            <Container className='py-6 @xl:py-12'>\n                <Card>\n                    <Card.Header>\n                        <Card.Title>Product Management</Card.Title>\n                        <Card.Description>Manage your products</Card.Description>\n                        <Toolbar className='flex justify-between pt-2'>\n                            <Toolbar.Group aria-label='Filters'>\n                                <Select\n                                    className='w-32'\n                                    aria-label='Show'\n                                    selectedKey={show}\n                                    onSelectionChange={setShow}\n                                >\n                                    <Select.Item id={5} textValue='5'>\n                                        5\n                                    </Select.Item>\n                                    <Select.Item id={10} textValue='10'>\n                                        10\n                                    </Select.Item>\n                                    <Select.Item id={20} textValue='20'>\n                                        20\n                                    </Select.Item>\n                                </Select>\n                            </Toolbar.Group>\n                            <Toolbar.Group aria-label='Actions'>\n                                <SearchField\n                                    onChange={handleSearch}\n                                    placeholder='Search...'\n                                    aria-label='Search'\n                                />\n                                <Toolbar.Item aria-label='Create' size='icon' variant='outline'>\n                                    <IconPlus />\n                                </Toolbar.Item>\n                            </Toolbar.Group>\n                        </Toolbar>\n                    </Card.Header>\n                    <Card.Content>\n                        <Table aria-label='Product'>\n                            <Table.Header>\n                                <Table.Column>#</Table.Column>\n                                <Table.Column id='title' isRowHeader>\n                                    Title\n                                </Table.Column>\n                                <Table.Column>Category</Table.Column>\n                                <Table.Column>Price</Table.Column>\n                                <Table.Column />\n                            </Table.Header>\n                            <Table.Body\n                                items={items}\n                                renderEmptyState={() => (\n                                    <div className='w-full justify-center items-center flex h-10'>\n                                        No products found\n                                    </div>\n                                )}\n                            >\n                                {(item) => (\n                                    <Table.Row id={item.id}>\n                                        <Table.Cell>{item.id}</Table.Cell>\n                                        <Table.Cell>{item.title}</Table.Cell>\n                                        <Table.Cell>{item.category}</Table.Cell>\n                                        <Table.Cell>{item.price}</Table.Cell>\n                                        <Table.Cell className='flex justify-end'>\n                                            <Menu>\n                                                <Menu.Trigger>\n                                                    <IconEllipsisVertical />\n                                                </Menu.Trigger>\n                                                <Menu.Content placement='left top'>\n                                                    <Menu.Item>\n                                                        <IconEye /> View\n                                                    </Menu.Item>\n                                                    <Menu.Item>\n                                                        <IconHighlighter /> Edit\n                                                    </Menu.Item>\n                                                    <Menu.Separator />\n                                                    <Menu.Item isDanger>\n                                                        <IconTrash /> Delete\n                                                    </Menu.Item>\n                                                </Menu.Content>\n                                            </Menu>\n                                        </Table.Cell>\n                                    </Table.Row>\n                                )}\n                            </Table.Body>\n                        </Table>\n                    </Card.Content>\n                    <Card.Footer>\n                        <Paginator\n                            total={total}\n                            page={page}\n                            show={Number(show)}\n                            setPage={setPage}\n                        />\n                    </Card.Footer>\n                </Card>\n            </Container>\n        </NavbarLayout>\n    )\n}\n"
  },
  "block/examples/auth-form-overlay": {
    "component": "@/components/docs/block/examples/auth-form-overlay",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutOverlay from 'layouts/auth-layout-overlay'\n\nimport { toast } from '@/components/ui'\nimport { Button, Checkbox, Form, Link, Separator, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutOverlay title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='mt-2 w-full' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='mb-4 text-center text-sm'>\n                    Already have an account?\n                </Link>\n                <Separator>Or continue with</Separator>\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutOverlay>\n    )\n}\n"
  },
  "block/examples/auth-form-full": {
    "component": "@/components/docs/block/examples/auth-form-full",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutFull from 'layouts/auth-layout-full'\n\nimport { toast } from '@/components/ui'\nimport { Button, Checkbox, Form, Link, Separator, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutFull title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='mt-2 w-full' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='mb-4 text-center text-sm'>\n                    Already have an account?\n                </Link>\n                <Separator>Or continue with</Separator>\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutFull>\n    )\n}\n"
  },
  "block/navbar/navbar-creating-demo": {
    "component": "@/components/docs/block/navbar/navbar-creating-demo",
    "raw": "'use client'\n\nimport { IconBrandCleon, IconSearch, IconShoppingBag } from 'hq-icons'\n\nimport { ThemeToggle } from '@/components/theme-toggle'\nimport { Avatar, Button, Navbar, Separator } from '@/components/ui'\n\nexport default function AppNavbar() {\n    return (\n        <Navbar>\n            <Navbar.Nav>\n                <Navbar.Logo\n                    aria-label='Goto documenation of Navbar'\n                    href='/docs/components/layouts/navbar'\n                >\n                    <IconBrandCleon className='size-6 sm:size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#' isCurrent>\n                        Home\n                    </Navbar.Item>\n                    <Navbar.Item href='#'>Shop</Navbar.Item>\n                    <Navbar.Item href='#'>Offers</Navbar.Item>\n                    <Navbar.Item href='#'>Orders</Navbar.Item>\n                </Navbar.Section>\n\n                <Navbar.Section className='ml-auto hidden md:flex'>\n                    <Navbar.Flex className='sm:gap-x-1'>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle variant='ghost' />\n                    </Navbar.Flex>\n                    <Separator orientation='vertical' className='mr-3 ml-1 h-6' />\n                    <Avatar\n                        alt='DQ'\n                        size='sm'\n                        shape='square'\n                        src='https://github.com/dq-alhq.png'\n                    />\n                </Navbar.Section>\n            </Navbar.Nav>\n\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                    <Separator orientation='vertical' className='h-6 sm:mx-1' />\n                    <Navbar.Logo\n                        aria-label='Goto documenation of Navbar'\n                        href='/docs/components/layouts/navbar'\n                    >\n                        <IconBrandCleon className='size-5' />\n                    </Navbar.Logo>\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle variant='ghost' />\n                    </Navbar.Flex>\n                    <Separator orientation='vertical' className='mr-3 ml-1 h-6' />\n                    <Avatar\n                        alt='DQ'\n                        size='sm'\n                        shape='square'\n                        src='https://github.com/dq-alhq.png'\n                    />\n                </Navbar.Flex>\n            </Navbar.Compact>\n        </Navbar>\n    )\n}\n"
  },
  "block/navbar/navbar-inset-demo": {
    "component": "@/components/docs/block/navbar/navbar-inset-demo",
    "raw": "'use client'\n\nimport NavbarLayout from 'layouts/app-navbar'\n\nimport { Container, Heading, Navbar } from '@/components/ui'\n\nexport default function NavbarInsetDemo() {\n    return (\n        <>\n            <NavbarLayout variant='inset'>\n                <Navbar.Inset>\n                    <Container className='py-6 @xl:py-12'>\n                        <Heading>Inset</Heading>\n                    </Container>\n                </Navbar.Inset>\n            </NavbarLayout>\n        </>\n    )\n}\n"
  },
  "block/navbar/navbar-floating-demo": {
    "component": "@/components/docs/block/navbar/navbar-floating-demo",
    "raw": "'use client'\n\nimport NavbarLayout from 'layouts/app-navbar'\n\nimport { Container, Heading } from '@/components/ui'\n\nexport default function NavbarFloatingDemo() {\n    return (\n        <>\n            <NavbarLayout variant='float' />\n            <Container className='py-6 @xl:py-12'>\n                <Heading>Float</Heading>\n            </Container>\n        </>\n    )\n}\n"
  },
  "block/navbar/navbar-basic-demo": {
    "component": "@/components/docs/block/navbar/navbar-basic-demo",
    "raw": "'use client'\n\nimport NavbarLayout from 'layouts/app-navbar'\n\nimport { Container, Heading } from '@/components/ui'\n\nexport default function NavbarBasicDemo() {\n    return (\n        <>\n            <NavbarLayout />\n            <Container className='py-6 @xl:py-12'>\n                <Heading>Basic</Heading>\n            </Container>\n        </>\n    )\n}\n"
  },
  "block/layouts/file-manager-layout": {
    "component": "@/components/docs/block/layouts/file-manager-layout",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBrandCleon,\n    IconDownload,\n    IconFilm,\n    IconFolders,\n    IconHome,\n    IconMusicNotes,\n    IconTrash\n} from 'hq-icons'\n\nimport { Link, Sidebar, SidebarInset } from '@/components/ui'\n\ninterface Props {\n    rootDir: string\n    setRootDir: (rootDir: string) => void\n    children: React.ReactNode\n}\n\nexport default function FileManagerLayout({ children, rootDir, setRootDir }: Props) {\n    return (\n        <div className='flex'>\n            <Sidebar collapsible='dock' variant='inset'>\n                <Sidebar.Header>\n                    <Link\n                        className='flex items-center gap-x-2 group-data-[collapsible=dock]:size-10 group-data-[collapsible=dock]:justify-center'\n                        href='#'\n                    >\n                        <IconBrandCleon className='size-5' />\n                        <Sidebar.Label className='font-medium'>FILE MANAGER</Sidebar.Label>\n                    </Link>\n                </Sidebar.Header>\n                <Sidebar.Content>\n                    <Sidebar.Section>\n                        <Sidebar.Item\n                            onPress={() => setRootDir('')}\n                            isCurrent={rootDir === ''}\n                            href='#'\n                        >\n                            <IconHome />\n                            <Sidebar.Label>Home</Sidebar.Label>\n                        </Sidebar.Item>\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Downloads/')}\n                            isCurrent={rootDir.startsWith('Downloads/')}\n                            href='#'\n                        >\n                            <IconDownload />\n                            <Sidebar.Label>Downloads</Sidebar.Label>\n                        </Sidebar.Item>\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Documents/')}\n                            isCurrent={rootDir.startsWith('Documents/')}\n                            href='#'\n                        >\n                            <IconFolders />\n                            <Sidebar.Label>Documents</Sidebar.Label>\n                        </Sidebar.Item>\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Music/')}\n                            isCurrent={rootDir.startsWith('Music/')}\n                            href='#'\n                        >\n                            <IconMusicNotes />\n                            <Sidebar.Label>Music</Sidebar.Label>\n                        </Sidebar.Item>\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Videos/')}\n                            isCurrent={rootDir.startsWith('Videos/')}\n                            href='#'\n                        >\n                            <IconFilm />\n                            <Sidebar.Label>Videos</Sidebar.Label>\n                        </Sidebar.Item>\n                    </Sidebar.Section>\n                    <Sidebar.Section>\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Trash/')}\n                            isCurrent={rootDir === 'Trash/'}\n                            href='#'\n                        >\n                            <IconTrash />\n                            <Sidebar.Label>Trash</Sidebar.Label>\n                        </Sidebar.Item>\n                    </Sidebar.Section>\n                </Sidebar.Content>\n                <Sidebar.Rail />\n            </Sidebar>\n            <SidebarInset>{children}</SidebarInset>\n        </div>\n    )\n}\n"
  },
  "block/layouts/app-sidebar-nav": {
    "component": "@/components/docs/block/layouts/app-sidebar-nav",
    "raw": "'use client'\n\nimport { IconBrandCleon, IconSearch, IconShoppingBag } from 'hq-icons'\n\nimport { ThemeToggle } from '@/components/theme-toggle'\nimport { Button, Navbar, Separator } from '@/components/ui'\n\nexport default function AppNavbar(props: React.ComponentProps<typeof Navbar>) {\n    return (\n        <Navbar {...props}>\n            <Navbar.Nav>\n                <Navbar.Logo aria-label='Goto documenation of Navbar' href='#'>\n                    <IconBrandCleon className='size-6 sm:size-5' />\n                </Navbar.Logo>\n                <Navbar.Section className='ml-auto hidden md:flex'>\n                    <Navbar.Flex className='sm:gap-x-1'>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle />\n                    </Navbar.Flex>\n                </Navbar.Section>\n            </Navbar.Nav>\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                    <Separator orientation='vertical' className='h-6 sm:mx-1' />\n                    <Navbar.Logo\n                        aria-label='Goto documenation of Navbar'\n                        href='/docs/components/layouts/navbar'\n                    >\n                        <IconBrandCleon className='size-5' />\n                    </Navbar.Logo>\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle variant='ghost' />\n                    </Navbar.Flex>\n                </Navbar.Flex>\n            </Navbar.Compact>\n            {props.children ?? null}\n        </Navbar>\n    )\n}\n"
  },
  "block/layouts/auth-layout-classic": {
    "component": "@/components/docs/block/layouts/auth-layout-classic",
    "raw": "import { Card } from '@/components/ui'\n\nexport default function AuthLayoutClassic({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='flex min-h-screen w-full items-center justify-center p-4 lg:p-8'>\n            <Card className='w-full max-w-lg'>\n                <Card.Header>\n                    <Card.Title>{title}</Card.Title>\n                    <Card.Description>{description}</Card.Description>\n                </Card.Header>\n                <Card.Content className='pb-6'>{children}</Card.Content>\n            </Card>\n        </div>\n    )\n}\n"
  },
  "block/layouts/auth-layout-full": {
    "component": "@/components/docs/block/layouts/auth-layout-full",
    "raw": "import Image from 'next/image'\n\nimport { Card } from '@/components/ui'\n\nexport default function AuthLayoutSplit({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='flex min-h-screen w-full items-center justify-center'>\n            <div className='flex w-full max-w-xl items-center justify-center px-4 py-12 lg:px-8'>\n                <Card className='mx-auto w-full lg:border-none lg:shadow-none'>\n                    <Card.Header>\n                        <Card.Title>{title}</Card.Title>\n                        <Card.Description>{description}</Card.Description>\n                    </Card.Header>\n                    <Card.Content className='pb-6'>{children}</Card.Content>\n                </Card>\n            </div>\n            <div className='bg-muted hidden lg:block lg:h-screen lg:w-full'>\n                <Image\n                    src='https://picsum.photos/1920/1080'\n                    alt='Image'\n                    priority\n                    width='1920'\n                    height='1080'\n                    className='size-full object-cover dark:brightness-[0.2] dark:grayscale'\n                />\n            </div>\n        </div>\n    )\n}\n"
  },
  "block/layouts/auth-layout-overlay": {
    "component": "@/components/docs/block/layouts/auth-layout-overlay",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function AuthLayoutOverlay({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='flex h-screen w-full items-center justify-center'>\n            <Modal>\n                <Button>Register</Button>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>{title}</Modal.Title>\n                        <Modal.Description>{description}</Modal.Description>\n                    </Modal.Header>\n                    <Modal.Body className='pb-4'>{children}</Modal.Body>\n                </Modal.Content>\n            </Modal>\n        </div>\n    )\n}\n"
  },
  "block/layouts/app-navbar": {
    "component": "@/components/docs/block/layouts/app-navbar",
    "raw": "'use client'\n\nimport {\n    IconBrandCleon,\n    IconChevronDown,\n    IconCommand,\n    IconGauge,\n    IconHeadphones,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShield,\n    IconShoppingBag\n} from 'hq-icons'\n\nimport { ThemeToggle } from '@/components/theme-toggle'\nimport { Avatar, Button, Menu, Navbar, Separator } from '@/components/ui'\n\nexport default function AppNavbar(props: React.ComponentProps<typeof Navbar>) {\n    return (\n        <Navbar {...props}>\n            <Navbar.Nav>\n                <Navbar.Logo\n                    aria-label='Goto documenation of Navbar'\n                    href='/docs/components/layouts/navbar'\n                >\n                    <IconBrandCleon className='size-6 sm:size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#' isCurrent>\n                        Home\n                    </Navbar.Item>\n                    <Navbar.Item href='#'>Shop</Navbar.Item>\n                    <Navbar.Item href='#'>Offers</Navbar.Item>\n                    <Navbar.Item href='#'>Orders</Navbar.Item>\n                    <Menu>\n                        <Navbar.Item>\n                            Categories <IconChevronDown data-slot='chevron' />\n                        </Navbar.Item>\n                        <Menu.Content items={categories}>\n                            {(item) => (\n                                <Menu.Item id={item.id} textValue={item.label} href={item.url}>\n                                    {item.label}\n                                </Menu.Item>\n                            )}\n                        </Menu.Content>\n                    </Menu>\n                </Navbar.Section>\n\n                <Navbar.Section className='ml-auto hidden md:flex'>\n                    <Navbar.Flex className='sm:gap-x-1'>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle variant='ghost' />\n                    </Navbar.Flex>\n                    <Separator orientation='vertical' className='mr-3 ml-1 h-6' />\n                    <UserMenu />\n                </Navbar.Section>\n            </Navbar.Nav>\n\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                    <Separator orientation='vertical' className='h-6 sm:mx-1' />\n                    <Navbar.Logo\n                        aria-label='Goto documenation of Navbar'\n                        href='/docs/components/layouts/navbar'\n                    >\n                        <IconBrandCleon className='size-5' />\n                    </Navbar.Logo>\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle variant='ghost' />\n                    </Navbar.Flex>\n                    <Separator orientation='vertical' className='mr-3 ml-1 h-6' />\n                    <UserMenu />\n                </Navbar.Flex>\n            </Navbar.Compact>\n            {props.children ?? null}\n        </Navbar>\n    )\n}\n\nconst categories = [\n    {\n        id: 1,\n        label: 'Electronics',\n        url: '#'\n    },\n    {\n        id: 2,\n        label: 'Fashion',\n        url: '#'\n    },\n    {\n        id: 3,\n        label: 'Home & Kitchen',\n        url: '#'\n    },\n    {\n        id: 4,\n        label: 'Sports',\n        url: '#'\n    },\n    {\n        id: 5,\n        label: 'Books',\n        url: '#'\n    },\n    {\n        id: 6,\n        label: 'Beauty & Personal Care',\n        url: '#'\n    },\n    {\n        id: 7,\n        label: 'Grocery',\n        url: '#'\n    },\n    {\n        id: 8,\n        label: 'Toys & Games',\n        url: '#'\n    },\n    {\n        id: 9,\n        label: 'Automotive',\n        url: '#'\n    },\n    {\n        id: 10,\n        label: 'Health & Wellness',\n        url: '#'\n    }\n]\n\nfunction UserMenu() {\n    return (\n        <Menu>\n            <Menu.Trigger aria-label='Open Menu'>\n                <Avatar alt='DQ' size='sm' shape='square' src='https://github.com/dq-alhq.png' />\n            </Menu.Trigger>\n            <Menu.Content placement='bottom right' className='sm:min-w-56'>\n                <Menu.Header>\n                    <span className='block'>DQ Al-Haqqi</span>\n                    <span className='text-muted-fg font-normal'>@dq-alhq</span>\n                </Menu.Header>\n                <Menu.Item href='#dashboard'>\n                    <IconGauge />\n                    Dashboard\n                </Menu.Item>\n                <Menu.Item href='#settings'>\n                    <IconSettings />\n                    Settings\n                </Menu.Item>\n                <Menu.Item href='#security'>\n                    <IconShield />\n                    Security\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item>\n                    <IconCommand />\n                    Command Menu\n                </Menu.Item>\n                <Menu.Item href='#contact'>\n                    <IconHeadphones />\n                    Customer Support\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item href='#logout'>\n                    <IconLogOut />\n                    Log out\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "block/layouts/app-sidebar": {
    "component": "@/components/docs/block/layouts/app-sidebar",
    "raw": "'use client'\n\nimport {\n    IconBrandCleon,\n    IconChevronRight,\n    IconCommand,\n    IconCreditCard,\n    IconEllipsis,\n    IconGauge,\n    IconHeadphones,\n    IconLogOut,\n    IconMessage,\n    IconNotebook,\n    IconSettings,\n    IconShield,\n    IconShieldQuestion,\n    IconTicket\n} from 'hq-icons'\n\nimport { Menu, Sidebar, User } from '@/components/ui'\n\nexport default function AppSidebar(props: React.ComponentProps<typeof Sidebar>) {\n    return (\n        <Sidebar {...props}>\n            <Sidebar.Header>\n                <IconBrandCleon />\n                <Sidebar.Label>HQ UI</Sidebar.Label>\n            </Sidebar.Header>\n            <Sidebar.Content>\n                <Sidebar.Section title='Overview'>\n                    <Sidebar.Item tooltip='Overview' isCurrent href='#'>\n                        <IconGauge />\n                        <Sidebar.Label>Overview</Sidebar.Label>\n                    </Sidebar.Item>\n                    <Sidebar.Item href='#' badge='4 Pending' tooltip='Payments'>\n                        <IconCreditCard />\n                        <Sidebar.Label>Payments</Sidebar.Label>\n                    </Sidebar.Item>\n                </Sidebar.Section>\n\n                <Sidebar.Section defaultExpandedKeys={[1]}>\n                    <Sidebar.Item id={1}>\n                        <Sidebar.SubItemTrigger>\n                            <IconEllipsis />\n                            <Sidebar.Label>Support</Sidebar.Label>\n                        </Sidebar.SubItemTrigger>\n                        <Sidebar.SubItem>\n                            <Sidebar.Item href='#'>\n                                <IconTicket />\n                                <Sidebar.Label>Tickets</Sidebar.Label>\n                            </Sidebar.Item>\n                            <Sidebar.Item href='#'>\n                                <IconMessage />\n                                <Sidebar.Label>Chat Support</Sidebar.Label>\n                            </Sidebar.Item>\n                            <Sidebar.Item href='#'>\n                                <IconShieldQuestion />\n                                <Sidebar.Label>FAQ</Sidebar.Label>\n                            </Sidebar.Item>\n                            <Sidebar.Item href='#'>\n                                <IconNotebook />\n                                <Sidebar.Label>Documentation</Sidebar.Label>\n                            </Sidebar.Item>\n                        </Sidebar.SubItem>\n                    </Sidebar.Item>\n                </Sidebar.Section>\n            </Sidebar.Content>\n            <Sidebar.Footer>\n                <Menu>\n                    <Menu.Trigger\n                        slot={null}\n                        className='group p-2 size-full justify-between items-center flex hover:bg-muted pressed:bg-muted rounded-lg'\n                    >\n                        <User\n                            src='https://github.com/dq-alhq.png'\n                            name='DQ Al Haqqi'\n                            description='@dq-alhq'\n                            shape='square'\n                        />\n                        <IconChevronRight className='group-aria-expanded:-rotate-90 size-4' />\n                    </Menu.Trigger>\n                    <Menu.Content placement='bottom left' className='sm:min-w-(--trigger-width)'>\n                        <Menu.Header>\n                            <span className='block'>DQ Al Haqqi</span>\n                            <span className='text-muted-fg font-normal'>@dq-alhq</span>\n                        </Menu.Header>\n                        <Menu.Item href='#dashboard'>\n                            <IconGauge />\n                            Dashboard\n                        </Menu.Item>\n                        <Menu.Item href='#settings'>\n                            <IconSettings />\n                            Settings\n                        </Menu.Item>\n                        <Menu.Item href='#security'>\n                            <IconShield />\n                            Security\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Item>\n                            <IconCommand />\n                            Command Menu\n                        </Menu.Item>\n                        <Menu.Item href='#contact'>\n                            <IconHeadphones />\n                            Customer Support\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Item href='#logout'>\n                            <IconLogOut />\n                            Log out\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Sidebar.Footer>\n            <Sidebar.Rail />\n            <Sidebar.Trigger />\n        </Sidebar>\n    )\n}\n"
  },
  "block/layouts/auth-layout-modern": {
    "component": "@/components/docs/block/layouts/auth-layout-modern",
    "raw": "import Image from 'next/image'\n\nimport { Card } from '@/components/ui'\n\nexport default function AuthLayoutModern({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='flex min-h-screen w-full items-center justify-center'>\n            <div className='flex w-full justify-center rounded-lg lg:max-w-screen-xl lg:border lg:shadow-sm'>\n                <div className='flex w-full max-w-xl items-center justify-center px-4 py-12 lg:px-8'>\n                    <Card className='mx-auto w-full lg:border-none lg:shadow-none'>\n                        <Card.Header>\n                            <Card.Title>{title}</Card.Title>\n                            <Card.Description>{description}</Card.Description>\n                        </Card.Header>\n                        <Card.Content className='pb-6'>{children}</Card.Content>\n                    </Card>\n                </div>\n                <div className='bg-muted hidden lg:block'>\n                    <Image\n                        src='https://picsum.photos/1920/1080'\n                        alt='Image'\n                        priority\n                        width='1920'\n                        height='1080'\n                        className='size-full object-cover dark:brightness-[0.2] dark:grayscale'\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n"
  },
  "block/layouts/chatting-app-layout": {
    "component": "@/components/docs/block/layouts/chatting-app-layout",
    "raw": "'use client'\n\nimport {\n    IconBrandCleon,\n    IconChevronRight,\n    IconFilm,\n    IconGroup,\n    IconHeadphones,\n    IconLogOut,\n    IconMessage,\n    IconRss,\n    IconSettings\n} from 'hq-icons'\n\nimport { Menu, Sidebar, User } from '@/components/ui'\n\nexport default function ChattingAppLayout() {\n    return (\n        <Sidebar collapsible='dock' defaultOpen={false}>\n            <Sidebar.Header>\n                <IconBrandCleon />\n                <Sidebar.Label>Chat App</Sidebar.Label>\n            </Sidebar.Header>\n            <Sidebar.Content>\n                <Sidebar.Section>\n                    <Sidebar.Item isCurrent href='#'>\n                        <IconMessage />\n                        <Sidebar.Label>Chats</Sidebar.Label>\n                    </Sidebar.Item>\n                    <Sidebar.Item href='#'>\n                        <IconRss />\n                        <Sidebar.Label>Broadcast</Sidebar.Label>\n                    </Sidebar.Item>\n                    <Sidebar.Item href='#'>\n                        <IconFilm />\n                        <Sidebar.Label>Stories</Sidebar.Label>\n                    </Sidebar.Item>\n                    <Sidebar.Item href='#'>\n                        <IconGroup />\n                        <Sidebar.Label>Communities</Sidebar.Label>\n                    </Sidebar.Item>\n                </Sidebar.Section>\n            </Sidebar.Content>\n            <Sidebar.Footer>\n                <Menu>\n                    <Menu.Trigger className='group p-2 size-full justify-between items-center flex hover:bg-muted pressed:bg-muted rounded-lg'>\n                        <User\n                            src='https://github.com/dq-alhq.png'\n                            name='DQ Al Haqqi'\n                            description='@dq-alhq'\n                            shape='square'\n                        />\n                        <IconChevronRight className='group-aria-expanded:-rotate-90 size-4' />\n                    </Menu.Trigger>\n                    <Menu.Content placement='bottom right' className='sm:min-w-(--trigger-width)'>\n                        <Menu.Header>\n                            <span className='block'>DQ Al Haqqi</span>\n                            <span className='text-muted-fg font-normal'>@dq-alhq</span>\n                        </Menu.Header>\n                        <Menu.Item href='#setting'>\n                            <IconSettings />\n                            Setting\n                        </Menu.Item>\n                        <Menu.Item href='#contact'>\n                            <IconHeadphones />\n                            Customer Support\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Item href='#logout'>\n                            <IconLogOut />\n                            Log out\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Sidebar.Footer>\n            <Sidebar.Trigger />\n        </Sidebar>\n    )\n}\n"
  },
  "block/layouts/auth-layout-split": {
    "component": "@/components/docs/block/layouts/auth-layout-split",
    "raw": "import Image from 'next/image'\n\nimport { Card } from '@/components/ui'\n\nexport default function AuthLayoutSplit({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='grid w-full lg:max-h-screen lg:min-h-screen lg:grid-cols-2'>\n            <div className='flex items-center justify-center px-4 py-12 lg:px-8'>\n                <Card className='mx-auto w-full max-w-lg'>\n                    <Card.Header>\n                        <Card.Title>{title}</Card.Title>\n                        <Card.Description>{description}</Card.Description>\n                    </Card.Header>\n                    <Card.Content className='pb-6'>{children}</Card.Content>\n                </Card>\n            </div>\n            <div className='bg-muted hidden lg:block'>\n                <Image\n                    src='https://picsum.photos/1920/1080'\n                    alt='Image'\n                    priority\n                    width='1920'\n                    height='1080'\n                    className='size-full object-cover dark:brightness-[0.2] dark:grayscale'\n                />\n            </div>\n        </div>\n    )\n}\n"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconImage } from 'hq-icons'\nimport Image from 'next/image'\nimport { isFileDropItem } from 'react-aria-components'\n\nimport { Description, DropZone, FileTrigger } from '@/components/ui'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function DropZoneAndFileTriggerDemo() {\n    const [droppedImage, setDroppedImage] = React.useState<string | null>(null)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    const onSelectHandler = async (e: FileList | null) => {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n\n    return (\n        <DropZone\n            getDropOperation={(types) =>\n                types.has('image/jpeg') || types.has('image/png') ? 'copy' : 'cancel'\n            }\n            onDrop={onDropHandler}\n        >\n            <div className='grid space-y-3'>\n                <div className='bg-muted/70 group-drop-target:bg-primary/20 group-drop-target:border-primary/70 mx-auto grid size-12 place-content-center rounded-full overflow-hidden border'>\n                    {droppedImage ? (\n                        <Image\n                            width={20}\n                            height={20}\n                            alt='Uploaded Image'\n                            src={droppedImage}\n                            className='aspect-square size-full object-cover'\n                        />\n                    ) : (\n                        <IconImage className='size-5' />\n                    )}\n                </div>\n                <div className='flex justify-center'>\n                    <FileTrigger\n                        acceptedFileTypes={['image/png', 'image/jpeg']}\n                        allowsMultiple={false}\n                        onSelect={onSelectHandler}\n                    >\n                        Upload an image\n                    </FileTrigger>\n                </div>\n                <Description>Or drag and drop PNG, JPG, GIF up to 10MB</Description>\n            </div>\n            <input type='hidden' name='image' value={droppedImage ?? ''} />\n        </DropZone>\n    )\n}\n"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from '@/components/ui'\n\nexport default function DropZoneDemo() {\n    const [dropped, setDropped] = React.useState(false)\n\n    return (\n        <DropZone onDrop={() => setDropped(true)}>\n            <Label>{dropped ? 'Item dropped!' : 'Drop an Item here'}</Label>\n        </DropZone>\n    )\n}\n"
  },
  "forms/text-field/text-field-demo": {
    "component": "@/components/docs/forms/text-field/text-field-demo",
    "raw": "import { TextField } from '@/components/ui'\n\nexport default function TextFieldDemo() {\n    return (\n        <div className='flex flex-col sm:flex-row gap-2'>\n            <TextField label='Basic' />\n            <TextField isPending label='Pending' />\n            <TextField label='Readonly' isReadOnly />\n            <TextField label='Invalid' isInvalid />\n            <TextField label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field/text-field-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function TextFieldValidationDemo() {\n    const [value, setValue] = React.useState<string>('')\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <TextField\n                isRequired\n                validate={(v) => (v.length < 3 ? 'Must be at least 3 characters' : null)}\n                label='Name'\n                value={value}\n                onChange={setValue}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/text-field/text-field-suffix-button-demo": {
    "component": "@/components/docs/forms/text-field/text-field-suffix-button-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconUserPlus } from 'hq-icons'\n\nimport { Button, Modal, TextField } from '@/components/ui'\n\nexport default function TextFieldSuffixButtonDemo() {\n    const [open, setOpen] = React.useState<boolean>(false)\n    return (\n        <>\n            <Modal.Content isOpen={open} onOpenChange={() => setOpen(false)}>\n                <Modal.Header>\n                    <Modal.Title>New User</Modal.Title>\n                    <Modal.Description>Create a new user account</Modal.Description>\n                </Modal.Header>\n                <Modal.Body className='space-y-4'>\n                    <TextField label='Name' placeholder='Name' />\n                    <TextField label='Email' placeholder='Email' type='email' />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button slot='close'>Add</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <TextField\n                label='Name'\n                suffix={\n                    <Button\n                        aria-label='Add New User'\n                        onPress={() => setOpen(true)}\n                        size='icon'\n                        variant='ghost'\n                    >\n                        <IconUserPlus />\n                    </Button>\n                }\n            />\n        </>\n    )\n}\n"
  },
  "forms/text-field/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field/text-field-prefix-suffix-demo",
    "raw": "import { IconBrandTiktok } from 'hq-icons'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldPrefixSuffixDemo() {\n    return (\n        <div className='space-y-2'>\n            <TextField label='Tiktok' suffix={<IconBrandTiktok />} />\n            <TextField label='Sites' prefix='https://' suffix='.com' />\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-visibility-demo": {
    "component": "@/components/docs/forms/text-field/text-field-visibility-demo",
    "raw": "import { TextField } from '@/components/ui'\n\nexport default function TextFieldVisibilityDemo() {\n    return <TextField type='password' label='Password' />\n}\n"
  },
  "forms/text-field/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <div className='space-y-2'>\n            <TextField value={value} onChange={setValue} label='Name' />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/form-validation-demo": {
    "component": "@/components/docs/forms/form-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function FormValidationDemo() {\n    return (\n        <Form onSubmit={() => {}}>\n            <TextField label='Name' isRequired className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-orientation-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-orientation-demo",
    "raw": "'use client'\n\nimport { SelectionBox } from '@/components/ui'\n\nexport default function SelectionBoxDemo() {\n    return (\n        <div className='space-y-6'>\n            <SelectionBox orientation='horizontal' label='Plan'>\n                <SelectionBox.Item value='bronze'>Bronze</SelectionBox.Item>\n                <SelectionBox.Item value='silver'>Silver</SelectionBox.Item>\n                <SelectionBox.Item value='gold'>Gold</SelectionBox.Item>\n                <SelectionBox.Item value='platinum'>Platinum</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox orientation='vertical' label='Plan'>\n                <SelectionBox.Item value='bronze'>Bronze</SelectionBox.Item>\n                <SelectionBox.Item value='silver'>Silver</SelectionBox.Item>\n                <SelectionBox.Item value='gold'>Gold</SelectionBox.Item>\n                <SelectionBox.Item value='platinum'>Platinum</SelectionBox.Item>\n            </SelectionBox>\n        </div>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-prefix-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-prefix-demo",
    "raw": "import { IconBrandArch, IconBrandDebian, IconBrandFedora, IconBrandUbuntu } from 'hq-icons'\n\nimport { SelectionBox } from '@/components/ui'\n\nexport default function SelectionBoxPrefixDemo() {\n    return (\n        <SelectionBox selectionMode='multiple' label='Linux Distro'>\n            <SelectionBox.Item prefix={<IconBrandUbuntu />} value='ubuntu'>\n                Ubuntu\n            </SelectionBox.Item>\n            <SelectionBox.Item prefix={<IconBrandDebian />} value='debian'>\n                Debian\n            </SelectionBox.Item>\n            <SelectionBox.Item prefix={<IconBrandFedora />} value='fedora'>\n                Fedora\n            </SelectionBox.Item>\n            <SelectionBox.Item prefix={<IconBrandArch />} value='arch'>\n                Arch\n            </SelectionBox.Item>\n        </SelectionBox>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-demo",
    "raw": "'use client'\n\nimport { SelectionBox } from '@/components/ui'\n\nexport default function SelectionBoxDemo() {\n    return (\n        <div className='space-y-4'>\n            <SelectionBox label='Basic'>\n                <SelectionBox.Item value='1'>Option 1</SelectionBox.Item>\n                <SelectionBox.Item value='2'>Option 2</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox isReadOnly label='Readonly'>\n                <SelectionBox.Item value='1'>Option 1</SelectionBox.Item>\n                <SelectionBox.Item value='2'>Option 2</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox isInvalid label='Invalid'>\n                <SelectionBox.Item value='1'>Option 1</SelectionBox.Item>\n                <SelectionBox.Item value='2'>Option 2</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox isDisabled label='Disabled'>\n                <SelectionBox.Item value='1'>Option 1</SelectionBox.Item>\n                <SelectionBox.Item value='2'>Option 2</SelectionBox.Item>\n            </SelectionBox>\n        </div>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-controlled-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBrandArch, IconBrandDebian, IconBrandFedora, IconBrandUbuntu } from 'hq-icons'\n\nimport { SelectionBox } from '@/components/ui'\n\nexport default function SelectionBoxControlledDemo() {\n    const [singleValue, setSingleValue] = React.useState<string>('')\n    const [multiValue, setMultiValue] = React.useState<string[]>([])\n    return (\n        <div className='flex flex-col gap-4'>\n            <SelectionBox\n                orientation='horizontal'\n                selectionMode='single'\n                label='Linux Distro'\n                value={singleValue}\n                onChange={setSingleValue}\n            >\n                <SelectionBox.Item prefix={<IconBrandUbuntu />} value='ubuntu'>\n                    Ubuntu\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandDebian />} value='debian'>\n                    Debian\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandFedora />} value='fedora'>\n                    Fedora\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandArch />} value='arch'>\n                    Arch\n                </SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox\n                orientation='horizontal'\n                selectionMode='multiple'\n                label='Linux Distro'\n                value={multiValue}\n                onChange={setMultiValue}\n            >\n                <SelectionBox.Item prefix={<IconBrandUbuntu />} value='ubuntu'>\n                    Ubuntu\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandDebian />} value='debian'>\n                    Debian\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandFedora />} value='fedora'>\n                    Fedora\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandArch />} value='arch'>\n                    Arch\n                </SelectionBox.Item>\n            </SelectionBox>\n            <code>single_value: {JSON.stringify(singleValue)}</code>\n            <code>multi_value: {JSON.stringify(multiValue)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-mode-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-mode-demo",
    "raw": "'use client'\n\nimport { SelectionBox } from '@/components/ui'\n\nexport default function CheckboxGroupDescriptionDemo() {\n    return (\n        <div className='space-y-6'>\n            <SelectionBox selectionMode='single' label='Plan'>\n                <SelectionBox.Item value='bronze'>Bronze</SelectionBox.Item>\n                <SelectionBox.Item value='silver'>Silver</SelectionBox.Item>\n                <SelectionBox.Item value='gold'>Gold</SelectionBox.Item>\n                <SelectionBox.Item value='platinum'>Platinum</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox selectionMode='multiple' label='Plan'>\n                <SelectionBox.Item value='bronze'>Bronze</SelectionBox.Item>\n                <SelectionBox.Item value='silver'>Silver</SelectionBox.Item>\n                <SelectionBox.Item value='gold'>Gold</SelectionBox.Item>\n                <SelectionBox.Item value='platinum'>Platinum</SelectionBox.Item>\n            </SelectionBox>\n        </div>\n    )\n}\n"
  },
  "forms/search-field/search-field-demo": {
    "component": "@/components/docs/forms/search-field/search-field-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDemo() {\n    return (\n        <div className='flex flex-col sm:flex-row gap-2'>\n            <SearchField label='Basic' />\n            <SearchField isPending label='Pending' />\n            <SearchField isReadOnly label='Readonly' />\n            <SearchField isInvalid label='Invalid' />\n            <SearchField isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "forms/search-field/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field/search-field-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, SearchField } from '@/components/ui'\n\nexport default function SearchFieldValidationDemo() {\n    const [value, setValue] = React.useState<string>('')\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <SearchField\n                isRequired\n                validate={(v) => (v.length < 3 ? 'Must be at least 3 characters' : null)}\n                value={value}\n                onChange={setValue}\n                label='Search for Products'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/search-field/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <div className='space-y-2'>\n            <SearchField value={value} onChange={setValue} className='mb-2' />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/otp/otp-separator-demo": {
    "component": "@/components/docs/forms/otp/otp-separator-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpSeparatorDemo() {\n    return (\n        <OTP maxLength={6}>\n            <OTP.Group>\n                <OTP.Slot index={0} />\n                <OTP.Slot index={1} />\n                <OTP.Slot index={2} />\n            </OTP.Group>\n            <OTP.Separator />\n            <OTP.Group>\n                <OTP.Slot index={3} />\n                <OTP.Slot index={4} />\n                <OTP.Slot index={5} />\n            </OTP.Group>\n        </OTP>\n    )\n}\n"
  },
  "forms/otp/otp-demo": {
    "component": "@/components/docs/forms/otp/otp-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpDemo() {\n    return (\n        <div>\n            <OTP maxLength={6}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot key={index} index={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n        </div>\n    )\n}\n"
  },
  "forms/otp/otp-controlled-demo": {
    "component": "@/components/docs/forms/otp/otp-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <div className='space-y-2'>\n            <OTP maxLength={6} value={value} onChange={setValue}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot key={index} index={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n\n            <div className='text-center text-sm'>\n                {value === '' ? <>Enter your one-time password.</> : <>You entered: {value}</>}\n            </div>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-controlled-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupControlledDemo() {\n    const [values, setValues] = React.useState<string[]>([])\n    return (\n        <div className='space-y-2'>\n            <CheckboxGroup value={values} onChange={setValues} label='Agreement'>\n                <Checkbox value='terms-conditions'>Terms and conditions</Checkbox>\n                <Checkbox value='privacy-policy'>Privacy policy</Checkbox>\n                <Checkbox value='cookie-policy'>Cookie policy</Checkbox>\n            </CheckboxGroup>\n            <code>selected: {JSON.stringify(values)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-item-description-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-item-description-demo",
    "raw": "import { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupItemDescriptionDemo() {\n    return (\n        <CheckboxGroup label='Email Settings'>\n            <Checkbox value='newsletter' description='Receive our newsletter once per week'>\n                Newsletter\n            </Checkbox>\n            <Checkbox value='deals' description='The best deals and sales for members'>\n                Deals\n            </Checkbox>\n            <Checkbox value='notifications' description='Notifications about your orders'>\n                Notifications\n            </Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-validation-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Checkbox, CheckboxGroup, Form } from '@/components/ui'\n\nexport default function CheckboxValidationDemo() {\n    const [value, setValue] = React.useState<string[]>([])\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <CheckboxGroup\n                onChange={setValue}\n                value={value}\n                isRequired\n                validate={(v) =>\n                    !v.includes('terms-conditions') ? 'Terms and conditions must be accepted' : null\n                }\n                label='Agreement'\n                description='Please read and agree before continuing'\n            >\n                <Checkbox isRequired value='terms-conditions'>\n                    Terms and conditions (required)\n                </Checkbox>\n                <Checkbox value='privacy-policy'>Privacy policy</Checkbox>\n                <Checkbox value='cookie-policy'>Cookie policy</Checkbox>\n            </CheckboxGroup>\n            <Button type='submit'>Save</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-description-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-description-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDescriptionDemo() {\n    return (\n        <CheckboxGroup label='Agreement' description='Please read and agree before continuing'>\n            <Checkbox value='terms-conditions'>Terms and conditions</Checkbox>\n            <Checkbox value='privacy-policy'>Privacy policy</Checkbox>\n            <Checkbox value='cookie-policy'>Cookie policy</Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDemo() {\n    return (\n        <div className='space-y-4'>\n            <CheckboxGroup label='Basic'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n            <CheckboxGroup isReadOnly label='Readonly'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n            <CheckboxGroup isInvalid label='Invalid'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n            <CheckboxGroup isDisabled label='Disabled'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n        </div>\n    )\n}\n"
  },
  "forms/number-field/number-field-validation-demo": {
    "component": "@/components/docs/forms/number-field/number-field-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, NumberField } from '@/components/ui'\n\nexport default function NumberFieldValidationDemo() {\n    const [value, setValue] = React.useState<number>()\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <NumberField\n                isRequired\n                validate={(v) => (v < 100 ? 'Value must be greater than 100' : null)}\n                label='Size'\n                value={value}\n                onChange={setValue}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/number-field/number-field-controlled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldControlledDemo() {\n    const [value, setValue] = React.useState<number>(100)\n    return (\n        <div className='space-y-2'>\n            <NumberField label='Size' value={value} onChange={setValue} />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/number-field/number-field-demo": {
    "component": "@/components/docs/forms/number-field/number-field-demo",
    "raw": "import { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDemo() {\n    return (\n        <div className='flex flex-col sm:flex-row gap-2'>\n            <NumberField label='Basic' />\n            <NumberField label='Readonly' isReadOnly />\n            <NumberField label='Invalid' isInvalid />\n            <NumberField label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxControlledDemo() {\n    const [selected, setSelection] = React.useState(false)\n    return (\n        <div className='space-y-2'>\n            <Checkbox isSelected={selected} onChange={setSelection} value='updates'>\n                Accept terms and conditions\n            </Checkbox>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-description-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-description-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDescriptionDemo() {\n    return (\n        <Checkbox\n            label='I accept terms and conditions'\n            description='I have read and agree to the terms and conditions'\n        />\n    )\n}\n"
  },
  "forms/checkbox/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-demo",
    "raw": "import { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDemo() {\n    return (\n        <div className='space-y-2'>\n            <Checkbox>Basic</Checkbox>\n            <Checkbox isIndeterminate>Indeterminate</Checkbox>\n            <Checkbox isReadOnly>Readonly</Checkbox>\n            <Checkbox isInvalid>Invalid</Checkbox>\n            <Checkbox isDisabled>Disabled</Checkbox>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-validation-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Checkbox, Form } from '@/components/ui'\n\nexport default function CheckboxValidationDemo() {\n    const [value, setValue] = React.useState<boolean>(false)\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <Checkbox isRequired isSelected={value} onChange={setValue}>\n                I accept terms and conditions\n            </Checkbox>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/rich-text-field/rich-text-field-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-demo",
    "raw": "'use client'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldDemo() {\n    return <RichTextField label='Content' />\n}\n"
  },
  "forms/rich-text-field/rich-text-field-controlled-html-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-controlled-html-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldControlledMarkdownDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <RichTextField\n                returnType='html'\n                value={value}\n                onChange={setValue}\n                label='Content'\n                className='mb-2'\n            />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/rich-text-field/rich-text-field-disabled-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-disabled-demo",
    "raw": "'use client'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldDemo() {\n    return <RichTextField isDisabled label='Content (Disabled)' />\n}\n"
  },
  "forms/rich-text-field/rich-text-field-controlled-markdown-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-controlled-markdown-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldControlledMarkdownDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <RichTextField\n                returnType='markdown'\n                value={value}\n                onChange={setValue}\n                label='Content'\n                className='mb-2'\n            />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-orientation-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-orientation-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupOrientationDemo() {\n    return (\n        <RadioGroup orientation='horizontal' label='Plan'>\n            <Radio value='bronze'>Bronze</Radio>\n            <Radio value='silver'>Silver</Radio>\n            <Radio value='gold'>Gold</Radio>\n            <Radio value='platinum'>Platinum</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-validation-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = React.useState<string>('')\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(selected)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <RadioGroup isRequired label='Plan' value={selected} onChange={setSelected}>\n                <Radio value='bronze'>Bronze</Radio>\n                <Radio value='silver'>Silver</Radio>\n                <Radio value='gold'>Gold</Radio>\n                <Radio value='platinum'>Platinum</Radio>\n            </RadioGroup>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = React.useState('')\n    return (\n        <div className='space-y-4'>\n            <RadioGroup label='Plan' value={selected} onChange={setSelected}>\n                <Radio value='bronze'>Bronze</Radio>\n                <Radio value='silver'>Silver</Radio>\n                <Radio value='gold'>Gold</Radio>\n                <Radio value='platinum'>Platinum</Radio>\n            </RadioGroup>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-item-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-item-description-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupChildrenDescriptionDemo() {\n    return (\n        <RadioGroup label='Plan'>\n            <Radio value='bronze' description='Weekly subscription'>\n                Bronze\n            </Radio>\n            <Radio value='silver' description='Monthly subscription'>\n                Silver\n            </Radio>\n            <Radio value='gold' description='Yearly subscription'>\n                Gold\n            </Radio>\n            <Radio value='platinum' description='Lifetime subscription'>\n                Platinum\n            </Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-description-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDescriptionDemo() {\n    return (\n        <RadioGroup label='Plan' description='Choose a plan that fits your needs and budget'>\n            <Radio value='bronze'>Bronze</Radio>\n            <Radio value='silver'>Silver</Radio>\n            <Radio value='gold'>Gold</Radio>\n            <Radio value='platinum'>Platinum</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-basic-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-basic-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupBasicDemo() {\n    return (\n        <div className='space-y-4'>\n            <RadioGroup label='Basic'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n            <RadioGroup isReadOnly label='Readonly'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n            <RadioGroup isInvalid label='Invalid'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n            <RadioGroup isDisabled label='Disabled'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-demo": {
    "component": "@/components/docs/forms/textarea/textarea-demo",
    "raw": "import { Textarea } from '@/components/ui'\n\nexport default function TextareaDemo() {\n    return (\n        <div className='flex flex-col sm:flex-row gap-2'>\n            <Textarea label='Basic' />\n            <Textarea label='Readonly' isReadOnly />\n            <Textarea label='Invalid' isInvalid />\n            <Textarea label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-autosize-demo": {
    "component": "@/components/docs/forms/textarea/textarea-autosize-demo",
    "raw": "import { Textarea } from '@/components/ui'\n\nexport default function TextareaAutosizeDemo() {\n    return <Textarea className='min-w-xs' autoSize label='About' />\n}\n"
  },
  "forms/textarea/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea/textarea-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, Textarea } from '@/components/ui'\n\nexport default function TextareaValidationDemo() {\n    const [value, setValue] = React.useState('')\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <Textarea\n                isRequired\n                validate={(v) => (v.length < 10 ? 'Must be at least 10 characters' : null)}\n                value={value}\n                onChange={setValue}\n                label='About'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/textarea/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <div className='space-y-2'>\n            <Textarea value={value} onChange={setValue} label='About' />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/form-demo": {
    "component": "@/components/docs/forms/form-demo",
    "raw": "'use client'\n\nimport { Button, Form, Heading, TextField } from '@/components/ui'\n\nexport default function FormDemo() {\n    return (\n        <div className='mx-auto max-w-md py-10'>\n            <Heading level={2} className='mb-4'>\n                Register\n            </Heading>\n            <Form onSubmit={() => {}} className='space-y-4'>\n                <TextField isRequired label='Name' placeholder='Enter your name' />\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <div className='grid grid-cols-2 gap-4'>\n                    <TextField\n                        isRequired\n                        label='Password'\n                        placeholder='Enter your password'\n                        type='password'\n                    />\n                    <TextField\n                        isRequired\n                        label='Confirm Password'\n                        placeholder='Enter your password again'\n                        type='password'\n                    />\n                </div>\n                <Button type='submit'>Submit</Button>\n            </Form>\n        </div>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-item-details-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-item-details-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function ContextMenuItemDetailsDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='h-32 rounded-lg border border-dashed flex items-center justify-center'>\n                <p className='sm:flex hidden'>Right click here!</p>\n                <p className='sm:hidden flex'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content items={items} aria-label='Bands'>\n                {(item) => (\n                    <ContextMenu.Item id={item.id} textValue={item.name}>\n                        <ContextMenu.Details label={item.name} description={item.description} />\n                    </ContextMenu.Item>\n                )}\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-demo",
    "raw": "'use client'\n\nimport { ContextMenu, Keyboard } from '@/components/ui'\n\nexport default function ContextMenuDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='h-32 rounded-lg border border-dashed flex items-center justify-center'>\n                <p className='sm:flex hidden'>Right click here!</p>\n                <p className='sm:hidden flex'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Context menu'>\n                <ContextMenu.Item>Back</ContextMenu.Item>\n                <ContextMenu.Item isDisabled>Forward</ContextMenu.Item>\n                <ContextMenu.Item>Reload</ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>Bookmark</ContextMenu.Item>\n                <ContextMenu.Item>Save as</ContextMenu.Item>\n                <ContextMenu.Item>\n                    Select all\n                    <Keyboard keys='⌘A' />\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>View source</ContextMenu.Item>\n                <ContextMenu.Item>Inspect Accessibility</ContextMenu.Item>\n                <ContextMenu.Item>Inspect</ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-disabled-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-disabled-demo",
    "raw": "'use client'\n\nimport { IconEye, IconPencil, IconTrash } from 'hq-icons'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDisabledDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <ContextMenu>\n                <ContextMenu.Trigger className='p-10 rounded-lg flex items-center justify-center border border-dashed'>\n                    Disabled by Item\n                </ContextMenu.Trigger>\n                <ContextMenu.Content>\n                    <ContextMenu.Item>\n                        <IconEye />\n                        <ContextMenu.Label>View</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item isDisabled>\n                        <IconPencil />\n                        <ContextMenu.Label>Edit</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item isDanger isDisabled>\n                        <IconTrash />\n                        <ContextMenu.Label>Delete</ContextMenu.Label>\n                    </ContextMenu.Item>\n                </ContextMenu.Content>\n            </ContextMenu>\n            <ContextMenu>\n                <ContextMenu.Trigger className='p-10 rounded-lg flex items-center justify-center border border-dashed'>\n                    Disabled by Key\n                </ContextMenu.Trigger>\n                <ContextMenu.Content disabledKeys={['edit', 'delete']}>\n                    <ContextMenu.Item id='view'>\n                        <IconEye />\n                        <ContextMenu.Label>View</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item id='edit'>\n                        <IconPencil />\n                        <ContextMenu.Label>Edit</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item id='delete' isDanger>\n                        <IconTrash />\n                        <ContextMenu.Label>Delete</ContextMenu.Label>\n                    </ContextMenu.Item>\n                </ContextMenu.Content>\n            </ContextMenu>\n        </div>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-with-icon-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-with-icon-demo",
    "raw": "'use client'\n\nimport { IconCopy, IconFolder, IconHighlighter, IconTrash, IconUpload } from 'hq-icons'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuWithIconDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='h-32 rounded-lg border border-dashed flex items-center justify-center'>\n                <p className='sm:flex hidden'>Right click here!</p>\n                <p className='sm:hidden flex'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Options'>\n                <ContextMenu.Item>\n                    <IconFolder />\n                    Open\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconHighlighter />\n                    Rename\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconCopy />\n                    Duplicate\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconUpload />\n                    Share\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>\n                    <IconTrash />\n                    Delete\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-danger-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-danger-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDangerDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='h-32 rounded-lg border border-dashed flex items-center justify-center'>\n                <p className='sm:flex hidden'>Right click here!</p>\n                <p className='sm:hidden flex'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item>\n                    <ContextMenu.Label>View</ContextMenu.Label>\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <ContextMenu.Label>Edit</ContextMenu.Label>\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>\n                    <ContextMenu.Label>Delete</ContextMenu.Label>\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-separator-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-separator-demo",
    "raw": "'use client'\n\nimport { IconCircleUser, IconLogOut, IconSettings } from 'hq-icons'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuSeparatorDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='h-32 rounded-lg border border-dashed flex items-center justify-center'>\n                <p className='sm:flex hidden'>Right click here!</p>\n                <p className='sm:hidden flex'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Context menu'>\n                <ContextMenu.Header>\n                    <span className='block'>DQ Al-Haqqi</span>\n                    <span className='text-muted-fg font-normal'>@dq-alhq</span>\n                </ContextMenu.Header>\n                <ContextMenu.Item>\n                    <IconCircleUser />\n                    Profile\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconSettings />\n                    Settings\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>\n                    <IconLogOut />\n                    Log out\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/command/command-trigger-by-keyboard-demo": {
    "component": "@/components/docs/controls/command/command-trigger-by-keyboard-demo",
    "raw": "'use client'\n\nimport { IconHome, IconLayoutDashboard, IconPackage, IconPalette, IconShapes } from 'hq-icons'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandTriggerByKeyboardDemo() {\n    return (\n        <>\n            <Button\n                variant='outline'\n                onPress={() => alert('Do not press me!, press the keyboard shortcut')}\n            >\n                <Command.Shortcut>⌘ + /</Command.Shortcut>\n            </Button>\n            <Command shortcut={{ key: '/' }}>\n                <Command.Item textValue='home'>\n                    <IconHome />\n                    <Command.Label>Home</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='documenation'>\n                    <IconPackage />\n                    <Command.Label>Documentation</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='blocks'>\n                    <IconLayoutDashboard />\n                    <Command.Label>Blocks</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='icons'>\n                    <IconShapes />\n                    <Command.Label>Icons</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='colors'>\n                    <IconPalette />\n                    <Command.Label>Colors</Command.Label>\n                </Command.Item>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command/command-danger-item-demo": {
    "component": "@/components/docs/controls/command/command-danger-item-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandDangerItemDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Item>System Shutdown</Command.Item>\n                <Command.Item isDanger>Format Disk</Command.Item>\n                <Command.Item>Restart Service</Command.Item>\n                <Command.Item>Empty Trash</Command.Item>\n                <Command.Item>Overwrite File</Command.Item>\n                <Command.Item isDanger>Reset Factory Settings</Command.Item>\n                <Command.Item>Disconnect Network</Command.Item>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command/command-async-demo": {
    "component": "@/components/docs/controls/command/command-async-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useAsyncList } from 'react-stately'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandSeparatorDemo() {\n    const [isOpen, setOpen] = React.useState(false)\n    const list = useAsyncList<{ title: string }>({\n        async load({ signal, filterText }) {\n            const res = await fetch(`https://dummyjson.com/posts/search?q=${filterText}`, {\n                signal\n            }).then((r) => r.json())\n            return {\n                items: res.posts\n            }\n        }\n    })\n    return (\n        <>\n            <Button variant='outline' onPress={() => setOpen(true)}>\n                Open\n            </Button>\n            <Command\n                isOpen={isOpen}\n                onOpenChange={setOpen}\n                items={list.items}\n                onInputChange={list.setFilterText}\n                inputValue={list.filterText}\n                isPending={list.isLoading}\n            >\n                {(item) => (\n                    <Command.Item key={item.title} id={item.title} textValue={item.title}>\n                        <Command.Label>{item.title}</Command.Label>\n                    </Command.Item>\n                )}\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command/command-demo": {
    "component": "@/components/docs/controls/command/command-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconHome, IconLayoutDashboard, IconPackage, IconPalette, IconShapes } from 'hq-icons'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Item textValue='home'>\n                    <IconHome />\n                    <Command.Label>Home</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='documenation'>\n                    <IconPackage />\n                    <Command.Label>Documentation</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='blocks'>\n                    <IconLayoutDashboard />\n                    <Command.Label>Blocks</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='icons'>\n                    <IconShapes />\n                    <Command.Label>Icons</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='colors'>\n                    <IconPalette />\n                    <Command.Label>Colors</Command.Label>\n                </Command.Item>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command/command-section-demo": {
    "component": "@/components/docs/controls/command/command-section-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Avatar, Button, Command } from '@/components/ui'\n\nexport default function CommandSectionDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Section title='Pages'>\n                    <Command.Item textValue='home'>\n                        <Command.Label>Home</Command.Label>\n                    </Command.Item>\n                    <Command.Item textValue='documenation'>\n                        <Command.Label>Documentation</Command.Label>\n                    </Command.Item>\n                </Command.Section>\n                <Command.Separator />\n                <Command.Section title='Users' items={users}>\n                    {(item) => (\n                        <Command.Item id={item.id} textValue={item.name}>\n                            <Avatar src={item.image_url} />\n                            <Command.Label>{item.name}</Command.Label>\n                        </Command.Item>\n                    )}\n                </Command.Section>\n            </Command>\n        </>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "controls/toolbar/toolbar-disabled-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-disabled-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignJustify,\n    IconAlignRight,\n    IconCamera,\n    IconImage,\n    IconPencil,\n    IconPencilRuler,\n    IconPointer\n} from 'hq-icons'\n\nimport { Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDisabledDemo() {\n    return (\n        <Toolbar aria-label='Toolbox'>\n            <Toolbar.Group aria-label='Toolbox'>\n                <Toggle isDisabled aria-label='Cursor' size='icon' variant='outline'>\n                    <IconPointer />\n                </Toggle>\n                <Toggle aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencil />\n                </Toggle>\n                <Toggle aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencilRuler />\n                </Toggle>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group isDisabled aria-label='Gallery'>\n                <Toolbar.Item aria-label='Camera' size='icon' variant='outline'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery' size='icon' variant='outline'>\n                    <IconImage />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment'>\n                <Toggle aria-label='Align Right' size='icon' variant='outline'>\n                    <IconAlignRight />\n                </Toggle>\n                <Toggle aria-label='Align Justify' size='icon' variant='outline'>\n                    <IconAlignJustify />\n                </Toggle>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustify,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconChevronDown,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconImage,\n    IconItalic,\n    IconLayoutGrid,\n    IconLink,\n    IconStrikethrough,\n    IconUnderline\n} from 'hq-icons'\n\nimport { Button, Checkbox, Menu, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDemo() {\n    return (\n        <Toolbar aria-label='Toolbars'>\n            <Toolbar.Group aria-label='Text Formatting Options'>\n                <Toolbar.Item aria-label='Bold' size='icon' variant='outline'>\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Italic' size='icon' variant='outline'>\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Underline' size='icon' variant='outline'>\n                    <IconUnderline />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Strikethrough' size='icon' variant='outline'>\n                    <IconStrikethrough />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment'>\n                <Toolbar.Item aria-label='Align Left' size='icon' variant='outline'>\n                    <IconAlignLeft />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Center' size='icon' variant='outline'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Right' size='icon' variant='outline'>\n                    <IconAlignRight />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify' size='icon' variant='outline'>\n                    <IconAlignJustify />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group className='ml-auto'>\n                <Menu>\n                    <Button aria-label='Other options' variant='outline' size='sm'>\n                        Options...\n                        <IconChevronDown />\n                    </Button>\n                    <Menu.Content placement='bottom right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconImage />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n            <Checkbox>Spell Check</Checkbox>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-orientation-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-orientation-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustify,\n    IconAlignLeft,\n    IconCamera,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconEllipsisVertical,\n    IconImage,\n    IconLayoutGrid,\n    IconLink,\n    IconPencil,\n    IconPencilRuler,\n    IconPointer\n} from 'hq-icons'\n\nimport { Button, Menu, Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarOrientationDemo() {\n    return (\n        <Toolbar aria-label='Toolbox' orientation='vertical'>\n            <Toolbar.Group aria-label='Toolbox'>\n                <Toolbar.Item aria-label='Cursor' size='icon' variant='outline'>\n                    <IconPointer />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencil />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencilRuler />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Gallery'>\n                <Toolbar.Item aria-label='Camera' size='icon' variant='outline'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery' size='icon' variant='outline'>\n                    <IconImage />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment'>\n                <Toggle aria-label='Align Left' size='icon' variant='outline'>\n                    <IconAlignLeft />\n                </Toggle>\n                <Toolbar.Item aria-label='Align Center' size='icon' variant='outline'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify' size='icon' variant='outline'>\n                    <IconAlignJustify />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group>\n                <Menu>\n                    <Button aria-label='Other options' variant='outline' size='icon'>\n                        <IconEllipsisVertical />\n                    </Button>\n                    <Menu.Content placement='right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconImage />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/slider/slider-step-demo": {
    "component": "@/components/docs/controls/slider/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderStepDemo() {\n    return <Slider step={10} description='Step in 10' label='Step Slider' />\n}\n"
  },
  "controls/slider/slider-range-demo": {
    "component": "@/components/docs/controls/slider/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderRangeDemo() {\n    return <Slider defaultValue={[25, 75]} label='Slider Range' />\n}\n"
  },
  "controls/slider/slider-orientation-demo": {
    "component": "@/components/docs/controls/slider/slider-orientation-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Card, Description, Slider } from '@/components/ui'\n\nexport default function SliderOrientationDemo() {\n    const [equalizer, setEqualizer] = useState({\n        subBass: 40,\n        bass: 50,\n        lowMid: 60,\n        mid: 70,\n        highMid: 65,\n        presence: 75,\n        brilliance: 80\n    })\n\n    const handleSliderChange = (name: string, value: number) => {\n        setEqualizer((prev) => ({ ...prev, [name]: value }))\n    }\n\n    return (\n        <Card className='p-4'>\n            <div className='flex justify-center gap-4 [&>*]:w-6'>\n                <Slider\n                    aria-label='Sub Bass'\n                    value={equalizer.subBass}\n                    onChange={(newValue) => handleSliderChange('subBass', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Bass'\n                    value={equalizer.bass}\n                    onChange={(newValue) => handleSliderChange('bass', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Low Mid'\n                    value={equalizer.lowMid}\n                    onChange={(newValue) => handleSliderChange('lowMid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Mid'\n                    value={equalizer.mid}\n                    onChange={(newValue) => handleSliderChange('mid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='High Mid'\n                    value={equalizer.highMid}\n                    onChange={(newValue) => handleSliderChange('highMid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Presence'\n                    value={equalizer.presence}\n                    onChange={(newValue) => handleSliderChange('presence', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Brilliance'\n                    value={equalizer.brilliance}\n                    onChange={(newValue) => handleSliderChange('brilliance', newValue as number)}\n                    orientation='vertical'\n                />\n            </div>\n            <Description className='mt-6 block text-center'>Equilizer</Description>\n        </Card>\n    )\n}\n"
  },
  "controls/slider/slider-controlled-demo": {
    "component": "@/components/docs/controls/slider/slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderControlledDemo() {\n    const [temperature, setTemperature] = React.useState<number>(31)\n    const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n    return (\n        <div className='space-y-6'>\n            <Slider\n                value={temperature}\n                onChange={(v) => setTemperature(v as number)}\n                label='Temperature'\n                description={`Current temperature: ${temperature ?? '-'}`}\n            />\n            <Slider\n                value={saturation}\n                onChange={(v) => setSaturation(v as number[])}\n                label='Saturation'\n                description={`Current saturation: ${saturation ?? '-'}`}\n            />\n        </div>\n    )\n}\n"
  },
  "controls/slider/slider-demo": {
    "component": "@/components/docs/controls/slider/slider-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDemo() {\n    return <Slider label='Volume' />\n}\n"
  },
  "controls/slider/slider-disabled-demo": {
    "component": "@/components/docs/controls/slider/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDisabledDemo() {\n    return <Slider isDisabled label='Volume' />\n}\n"
  },
  "controls/switch/switch-demo": {
    "component": "@/components/docs/controls/switch/switch-demo",
    "raw": "'use client'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    return (\n        <div className='grid grid-cols-3 gap-3'>\n            <Switch>Default</Switch>\n            <Switch isReadOnly>Read Only</Switch>\n            <Switch isDisabled>Disabled</Switch>\n        </div>\n    )\n}\n"
  },
  "controls/switch/switch-controlled-demo": {
    "component": "@/components/docs/controls/switch/switch-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchControlledDemo() {\n    const [value, setValue] = React.useState<boolean>(false)\n    return (\n        <div className='flex flex-col gap-6'>\n            <Switch isSelected={value} onChange={setValue} value='selected'>\n                Switch\n            </Switch>\n\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-size-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-size-demo",
    "raw": "'use client'\n\nimport { IconEye, IconEyeClosed } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleSizeDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <Toggle variant='outline' size='sm'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n            <Toggle variant='outline' size='icon'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle variant='outline' size='md'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n            <Toggle variant='outline' size='lg'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDemo() {\n    return <Toggle>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n}\n"
  },
  "buttons/toggle/toggle-group-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupControlledDemo() {\n    const [selected, setSelected] = React.useState(new Set<Key>(['bold']))\n\n    return (\n        <div className='space-y-6 flex flex-col items-center'>\n            <Toggle.Group\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n            >\n                <Toggle id='bold'>Bold</Toggle>\n                <Toggle id='italic'>Italic</Toggle>\n                <Toggle id='underline'>Underline</Toggle>\n            </Toggle.Group>\n            <code>selected: {JSON.stringify([...selected])}</code>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-demo",
    "raw": "'use client'\n\nimport { IconHeading, IconParagraph } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDemo() {\n    return (\n        <Toggle.Group>\n            <Toggle>\n                <IconParagraph />\n                Paragraph\n            </Toggle>\n            <Toggle>\n                <IconHeading />\n                Heading\n            </Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-variant-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleVariantDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Toggle variant='solid'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle variant='outline'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n            <Toggle variant='ghost'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconLock, IconLockOpen } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleControlledDemo() {\n    const [isSelected, setSelected] = React.useState(false)\n    return (\n        <div className='flex flex-col space-y-6 items-center'>\n            <Toggle size='icon' isSelected={isSelected} onChange={setSelected}>\n                {({ isSelected }) => <>{isSelected ? <IconLock /> : <IconLockOpen />}</>}\n            </Toggle>\n            <code>value: {JSON.stringify(isSelected)}</code>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-disabled-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDisabledDemo() {\n    return (\n        <Toggle.Group isDisabled>\n            <Toggle id='left'>Left</Toggle>\n            <Toggle id='center'>Center</Toggle>\n            <Toggle id='right'>Right</Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-variant-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupVariantDemo() {\n    return (\n        <div className='flex flex-col space-y-6'>\n            <Toggle.Group variant='solid' defaultSelectedKeys={['left']} selectionMode='single'>\n                <Toggle id='left'>Left</Toggle>\n                <Toggle id='center'>Center</Toggle>\n                <Toggle id='right'>Right</Toggle>\n            </Toggle.Group>\n            <Toggle.Group variant='outline' defaultSelectedKeys={['center']} selectionMode='single'>\n                <Toggle id='left'>Left</Toggle>\n                <Toggle id='center'>Center</Toggle>\n                <Toggle id='right'>Right</Toggle>\n            </Toggle.Group>\n            <Toggle.Group variant='ghost' defaultSelectedKeys={['right']} selectionMode='single'>\n                <Toggle id='left'>Left</Toggle>\n                <Toggle id='center'>Center</Toggle>\n                <Toggle id='right'>Right</Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-disabled-demo",
    "raw": "'use client'\n\nimport { IconPower } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDisabledDemo() {\n    return (\n        <Toggle size='icon' isDisabled>\n            <IconPower />\n        </Toggle>\n    )\n}\n"
  },
  "buttons/toggle/toggle-shape-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-shape-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleShapeDemo() {\n    return (\n        <Toggle variant='outline' shape='circle'>\n            {({ isSelected }) => <>{isSelected ? 'Disabled' : 'Enabled'}</>}\n        </Toggle>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-orientation-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-orientation-demo",
    "raw": "import { IconCloud, IconCloudOff, IconLock, IconLockOpen, IconMoon, IconSun } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function App() {\n    return (\n        <div>\n            <Toggle.Group orientation='vertical'>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconMoon /> : <IconSun />}\n                            {isSelected ? 'Dark' : 'Light'} Mode\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconLock /> : <IconLockOpen />}\n                            Secure Access {isSelected ? 'On' : 'Off'}\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconCloud /> : <IconCloudOff />}\n                            Always Sync\n                        </>\n                    )}\n                </Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-selection-mode-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-selection-mode-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupSelectionModeDemo() {\n    return (\n        <Toggle.Group defaultSelectedKeys={['center']} selectionMode='single'>\n            <Toggle id='left'>Left</Toggle>\n            <Toggle id='center'>Center</Toggle>\n            <Toggle id='right'>Right</Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { IconUpload } from 'hq-icons'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerMultipleDemo() {\n    return (\n        <FileTrigger allowsMultiple>\n            <IconUpload />\n            Upload\n        </FileTrigger>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-variant-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-variant-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <FileTrigger variant='primary'>Primary</FileTrigger>\n            <FileTrigger variant='secondary'>Secondary</FileTrigger>\n            <FileTrigger variant='danger'>Danger</FileTrigger>\n            <FileTrigger variant='success'>Success</FileTrigger>\n            <FileTrigger variant='info'>Info</FileTrigger>\n            <FileTrigger variant='warning'>Warning</FileTrigger>\n            <FileTrigger variant='outline'>Outline</FileTrigger>\n            <FileTrigger variant='ghost'>Ghost</FileTrigger>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    return <FileTrigger>Upload</FileTrigger>\n}\n"
  },
  "buttons/file-trigger/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { IconFolder } from 'hq-icons'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerFolderDemo() {\n    return (\n        <FileTrigger acceptDirectory>\n            <IconFolder />\n            Upload\n        </FileTrigger>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    return (\n        <>\n            <FileTrigger isDisabled>Upload</FileTrigger>\n        </>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-avatar-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-avatar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { isFileDropItem } from 'react-aria-components'\n\nimport { Avatar, DropZone, FileTrigger } from '@/components/ui'\nimport { cn } from '@/lib/utils'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function FileTriggerAvatarDemo() {\n    const [droppedImage, setDroppedImage] = React.useState<string | null>(null)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    const onSelectHandler = async (e: FileList | null) => {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n\n    return (\n        <div className='flex items-center gap-2'>\n            <DropZone\n                getDropOperation={(types) =>\n                    types.has('image/jpeg') || types.has('image/png') ? 'copy' : 'cancel'\n                }\n                onDrop={onDropHandler}\n                className={cn('size-10 overflow-hidden rounded-full p-0')}\n            >\n                <Avatar src={droppedImage ?? ''} size='lg' />\n                <input type='hidden' name='image' value={droppedImage ?? ''} />\n            </DropZone>\n            <FileTrigger\n                size='sm'\n                acceptedFileTypes={['image/png', 'image/jpeg']}\n                onSelect={onSelectHandler}\n            >\n                Upload avatar\n            </FileTrigger>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-controlled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = React.useState<string[] | null>(null)\n    return (\n        <div className='space-y-6 flex flex-col'>\n            <FileTrigger\n                allowsMultiple\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            >\n                Upload\n            </FileTrigger>\n            {file && <code>uploaded: {JSON.stringify(file)}</code>}\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { IconCamera } from 'hq-icons'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerCameraDemo() {\n    return (\n        <FileTrigger>\n            <IconCamera />\n            Open a camera\n        </FileTrigger>\n    )\n}\n"
  },
  "buttons/button/button-variant-demo": {
    "component": "@/components/docs/buttons/button/button-variant-demo",
    "raw": "import { Button } from '@/components/ui'\n\nexport default function ButtonVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button variant='danger'>Danger</Button>\n            <Button variant='success'>Success</Button>\n            <Button variant='info'>Info</Button>\n            <Button variant='warning'>Warning</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-shape-demo": {
    "component": "@/components/docs/buttons/button/button-shape-demo",
    "raw": "import { Button } from '@/components/ui'\n\nexport default function ButtonShapeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button shape='square'>Rounded</Button>\n            <Button shape='circle'>Circle</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-link-demo": {
    "component": "@/components/docs/buttons/button/button-link-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Link } from '@/components/ui'\n\nexport default function ButtonLinkDemo() {\n    return (\n        <Link className={buttonStyles({ variant: 'success' })} href='#'>\n            Choicebox\n        </Link>\n    )\n}\n"
  },
  "buttons/button/button-icon-demo": {
    "component": "@/components/docs/buttons/button/button-icon-demo",
    "raw": "import { IconBrandVercel } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconDemo() {\n    return (\n        <Button>\n            <IconBrandVercel />\n            Vercel\n        </Button>\n    )\n}\n"
  },
  "buttons/button/button-icon-only-demo": {
    "component": "@/components/docs/buttons/button/button-icon-only-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconOnlyDemo() {\n    return (\n        <Button size='icon'>\n            <IconBrandGithub />\n        </Button>\n    )\n}\n"
  },
  "buttons/button/button-loader-demo": {
    "component": "@/components/docs/buttons/button/button-loader-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonLoaderDemo() {\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const onPress = () => {\n        setLoading('loading')\n        setTimeout(() => setLoading('success'), 3000)\n        setTimeout(() => setLoading('idle'), 6000)\n    }\n\n    return (\n        <Button\n            isPending={loading === 'loading'}\n            variant={loading === 'success' ? 'success' : 'danger'}\n            onPress={onPress}\n        >\n            {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n            {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n        </Button>\n    )\n}\n"
  },
  "buttons/button/button-basic-demo": {
    "component": "@/components/docs/buttons/button/button-basic-demo",
    "raw": "import { Button } from '@/components/ui'\n\nexport default function ButtonBasicDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button variant='primary'>Primary</Button>\n            <Button variant='secondary'>Secondary</Button>\n            <Button variant='outline'>Outline</Button>\n            <Button variant='ghost'>Ghost</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-size-demo": {
    "component": "@/components/docs/buttons/button/button-size-demo",
    "raw": "import { Button } from '@/components/ui'\n\nexport default function ButtonSizeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button size='xs'>Extra Small</Button>\n            <Button size='sm'>Small</Button>\n            <Button>Medium</Button>\n            <Button size='lg'>Large</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-disabled-demo": {
    "component": "@/components/docs/buttons/button/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonDisabledDemo() {\n    return <Button isDisabled>Label</Button>\n}\n"
  },
  "media/user/user-shape-demo": {
    "component": "@/components/docs/media/user/user-shape-demo",
    "raw": "import { User } from '@/components/ui'\n\nexport default function UserShapeDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <User name='John Doe' shape='circle' description='Admin' />\n            <User name='John Doe' shape='square' description='Admin' />\n        </div>\n    )\n}\n"
  },
  "media/user/user-basic-demo": {
    "component": "@/components/docs/media/user/user-basic-demo",
    "raw": "import { User } from '@/components/ui'\n\nexport default function UserBasicDemo() {\n    return <User src='https://github.com/dq-alhq.png' name='DQ Al Haqqi' description='@dq-alhq' />\n}\n"
  },
  "media/user/user-size-demo": {
    "component": "@/components/docs/media/user/user-size-demo",
    "raw": "import { User } from '@/components/ui'\n\nexport default function UserSizeDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <User name='John Doe' size='md' description='Admin' />\n            <User name='John Doe' size='lg' description='Admin' />\n            <User name='John Doe' size='xl' description='Admin' />\n        </div>\n    )\n}\n"
  },
  "media/carousel/carousel-with-collection-demo": {
    "component": "@/components/docs/media/carousel/carousel-with-collection-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselWithCollectionDemo() {\n    return (\n        <Carousel className='w-full max-w-xs'>\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <Card className='p-1'>\n                            <Image\n                                className='h-40 rounded-lg object-cover object-center'\n                                src={`https://picsum.photos/id/${item.id}/400/300`}\n                                alt={`image ${item.id}`}\n                                width={400}\n                                height={300}\n                            />\n                            <Card.Header className='p-3'>\n                                <Card.Title className='line-clamp-1 sm:text-lg'>\n                                    {item.title}\n                                </Card.Title>\n                                <Card.Description className='line-clamp-2'>\n                                    {item.description}\n                                </Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    }\n]\n"
  },
  "media/carousel/carousel-autoplay-demo": {
    "component": "@/components/docs/media/carousel/carousel-autoplay-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport Autoplay from 'embla-carousel-autoplay'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselAutoplayDemo() {\n    const plugin = React.useRef(Autoplay({ delay: 1000, stopOnInteraction: true }))\n\n    return (\n        <Carousel\n            onMouseEnter={plugin.current.stop}\n            onMouseLeave={plugin.current.reset}\n            plugins={[plugin.current]}\n            opts={{\n                loop: true,\n                align: 'center'\n            }}\n            className='w-full max-w-xs'\n        >\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title className='line-clamp-1 sm:text-lg'>\n                                    {item.title}\n                                </Card.Title>\n                                <Card.Description className='line-clamp-2'>\n                                    {item.description}\n                                </Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "media/carousel/carousel-api-demo": {
    "component": "@/components/docs/media/carousel/carousel-api-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button } from 'react-aria-components'\n\nimport { Card, Carousel, type CarouselApi } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport default function CarouselDApiDemo() {\n    const [api, setApi] = React.useState<CarouselApi>()\n    const [current, setCurrent] = React.useState(0)\n    const [count, setCount] = React.useState(0)\n\n    React.useEffect(() => {\n        if (!api) {\n            return\n        }\n        setCount(api.scrollSnapList().length)\n        setCurrent(api.selectedScrollSnap() + 1)\n        api.on('select', () => {\n            setCurrent(api.selectedScrollSnap() + 1)\n        })\n    }, [api])\n\n    const handleSelect = (index: number) => {\n        if (api) {\n            api.scrollTo(index)\n            setCurrent(index + 1)\n        }\n    }\n\n    return (\n        <Carousel setApi={setApi} className='w-full max-w-sm'>\n            <Carousel.Content items={Array.from({ length: 10 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item id={id}>\n                        <Card>\n                            <Card.Content className='flex aspect-square items-center justify-center p-6'>\n                                <span className='text-4xl font-semibold'>{id}</span>\n                            </Card.Content>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n            <div className='flex items-center justify-between'>\n                <div className='text-muted-fg flex gap-1 py-2 text-center text-sm'>\n                    {Array.from({ length: 10 }).map((_, index) => (\n                        <Button\n                            className={cn(\n                                'rounded-full transition size-3',\n                                current === index + 1\n                                    ? 'bg-primary'\n                                    : 'bg-muted hover:bg-primary/50'\n                            )}\n                            aria-label={`Slide ${current} of ${count}`}\n                            onPress={() => handleSelect(index)}\n                            key={index}\n                        />\n                    ))}\n                </div>\n\n                <Carousel.Handler />\n            </div>\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-options-demo": {
    "component": "@/components/docs/media/carousel/carousel-options-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOptionsDemo() {\n    return (\n        <Carousel\n            opts={{\n                align: 'center',\n                loop: true\n            }}\n            className='w-full max-w-2xl'\n        >\n            <Carousel.Content items={Array.from({ length: 16 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item id={id} className='basis-1/2 lg:basis-1/3'>\n                        <Card className='flex aspect-square items-center justify-center'>\n                            <Card.Title>{id}</Card.Title>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-demo": {
    "component": "@/components/docs/media/carousel/carousel-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Carousel } from '@/components/ui'\n\nexport default function CarouselDemo() {\n    return (\n        <Carousel className='w-full max-w-xs'>\n            <Carousel.Content>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/61/400/300'\n                        alt='image 1'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/62/400/300'\n                        alt='image 2'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/63/400/300'\n                        alt='image 3'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/64/400/300'\n                        alt='image 4'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/65/400/300'\n                        alt='image 5'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/66/400/300'\n                        alt='image 6'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/61/400/300'\n                        alt='image 7'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n            </Carousel.Content>\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-orientation-demo": {
    "component": "@/components/docs/media/carousel/carousel-orientation-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOrientationDemo() {\n    return (\n        <Carousel orientation='vertical'>\n            <Carousel.Content items={items} className='h-32'>\n                {(item) => (\n                    <Carousel.Item className='basis-1/2 md:basis-1/3'>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title>{item.title}</Card.Title>\n                                <Card.Description>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "media/avatar/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar/avatar-initials-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarInitialsDemo() {\n    return <Avatar initials='Diqi Nahdliyan' />\n}\n"
  },
  "media/avatar/avatar-group-demo": {
    "component": "@/components/docs/media/avatar/avatar-group-demo",
    "raw": "import { Avatar, AvatarGroup } from '@/components/ui'\n\nexport default function AvatarGroupDemo() {\n    return (\n        <AvatarGroup aria-label='avatar-group'>\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=61' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=62' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=63' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=64' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=65' />\n        </AvatarGroup>\n    )\n}\n"
  },
  "media/avatar/avatar-size-demo": {
    "component": "@/components/docs/media/avatar/avatar-size-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarSizeDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Avatar alt='avatar-sm' size='xs' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-sm' size='sm' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-md' size='md' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-lg' size='lg' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-xl' size='xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-2xl' size='2xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-3xl' size='3xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-4xl' size='4xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-5xl' size='5xl' src='https://github.com/dq-alhq.png' />\n        </div>\n    )\n}\n"
  },
  "media/avatar/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar/avatar-shape-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarShapeDemo() {\n    return (\n        <Avatar shape='square' initials='DQ' alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n    )\n}\n"
  },
  "media/avatar/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar/avatar-fallback-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarFallbackDemo() {\n    return <Avatar />\n}\n"
  },
  "date-range-picker": {
    "component": "@/components/ui/date-range-picker",
    "raw": "'use client'\n\nimport { IconCalendarDays } from 'hq-icons'\nimport {\n    Button,\n    composeRenderProps,\n    DateRangePicker as RACDateRangePicker,\n    type DateValue,\n    type DateRangePickerProps as RACDateRangePickerProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, FieldProps, Label } from './field'\nimport { Popover } from './popover'\nimport { RangeCalendar } from './range-calendar'\n\ninterface DateRangePickerProps<T extends DateValue>\n    extends RACDateRangePickerProps<T>,\n        FieldProps {}\n\nconst DateRangePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DateRangePickerProps<T>) => {\n    return (\n        <RACDateRangePicker\n            shouldCloseOnSelect={false}\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isOpen, isInvalid, isDisabled }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <FieldGroup className='w-auto min-w-40'>\n                        <DateInput\n                            slot='start'\n                            className='px-2 text-base tabular-nums lg:text-sm'\n                        />\n                        <span\n                            aria-hidden='true'\n                            className='flex-1 px-2 py-1.5 text-base tabular-nums lg:text-sm'\n                        >\n                            –\n                        </span>\n                        <DateInput\n                            slot='end'\n                            className='flex-1 px-2 py-1.5 text-base tabular-nums lg:text-sm'\n                        />\n                        <Button className='mr-1 cursor-pointer size-8 rounded-lg outline-hidden inline-flex items-center justify-center'>\n                            <IconCalendarDays\n                                aria-hidden\n                                className={cn('size-4', isOpen ? 'text-primary' : 'text-muted-fg')}\n                            />\n                        </Button>\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                    <Popover.Content showArrow={false} className='p-4'>\n                        <RangeCalendar />\n                        <Button\n                            type='button'\n                            slot='close'\n                            className='mt-2 w-full sm:hidden rounded-lg p-2 text-center border hover:bg-primary/40 pressed:bg-primary/50'\n                        >\n                            Close\n                        </Button>\n                    </Popover.Content>\n                </>\n            )}\n        </RACDateRangePicker>\n    )\n}\n\nexport { DateRangePicker }\n"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    type DateInputProps,\n    DateSegment,\n    type DateValue,\n    DateField as RACDateField,\n    type DateFieldProps as RACDateFieldProps,\n    DateInput as RACDateInput\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, FieldGroup, FieldProps, Label } from './field'\n\ninterface DateFieldProps<T extends DateValue> extends RACDateFieldProps<T>, FieldProps {\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n}\n\nconst DateField = <T extends DateValue>({\n    prefix,\n    suffix,\n    label,\n    description,\n    errorMessage,\n    className,\n    ...props\n}: DateFieldProps<T>) => {\n    return (\n        <RACDateField\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <FieldGroup>\n                        {prefix ? <span data-slot='prefix'>{prefix}</span> : null}\n                        <DateInput />\n                        {suffix ? <span data-slot='suffix'>{suffix}</span> : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACDateField>\n    )\n}\n\nconst DateInput = ({ className, ...props }: Omit<DateInputProps, 'children'>) => {\n    return (\n        <RACDateInput\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn('bg-transparent p-2 text-base lg:text-sm', isDisabled && 'opacity-50', className)\n            )}\n            {...props}\n        >\n            {(segment) => (\n                <DateSegment\n                    segment={segment}\n                    className={cn(\n                        'type-literal:px-0 text-fg inline shrink-0 rounded-sm p-0.5 tracking-wider tabular-nums caret-transparent outline-0 sm:text-sm sm:uppercase',\n                        segment.isPlaceholder && 'text-muted-fg',\n                        'focus:bg-primary/70 focus:text-primary-fg',\n                        'invalid:not-type-literal:text-danger invalid:focus:text-primary-fg'\n                    )}\n                />\n            )}\n        </RACDateInput>\n    )\n}\n\nexport { DateField, DateInput }\n"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconEye, IconEyeClosed, IconLoaderCircle } from 'hq-icons'\nimport {\n    Button,\n    composeRenderProps,\n    TextField as RACTextField,\n    type TextFieldProps as RACTextFieldProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport type { FieldProps } from './field'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\n\ninterface TextFieldProps extends RACTextFieldProps, FieldProps {\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isPending?: boolean\n}\n\nconst TextField = ({\n    label,\n    placeholder,\n    description,\n    errorMessage,\n    className,\n    type,\n    ...props\n}: TextFieldProps) => {\n    const [masked, setMasked] = React.useState<boolean>(type === 'password')\n    const inputType = type === 'password' ? (masked ? 'password' : 'text') : type\n\n    return (\n        <RACTextField\n            type={inputType}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-y-1.5', className)\n            )}\n            {...props}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid || !!errorMessage} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <FieldGroup\n                        isInvalid={isInvalid || !!errorMessage}\n                        isDisabled={isDisabled}\n                        data-loading={props.isPending ? 'true' : undefined}\n                    >\n                        {props.prefix ? (\n                            <span className='ml-2 has-[button]:ml-0 text-muted-fg'>\n                                {props.prefix}\n                            </span>\n                        ) : null}\n                        <Input placeholder={placeholder} />\n                        {type === 'password' ? (\n                            <Button\n                                type='button'\n                                aria-label='Toggle visibility'\n                                onPress={() => setMasked((e) => !e)}\n                                className='mr-2 rounded-lg outline-offset-4 inline-flex items-center justify-center text-muted-fg'\n                            >\n                                {masked ? <IconEye /> : <IconEyeClosed />}\n                            </Button>\n                        ) : props.isPending ? (\n                            <IconLoaderCircle\n                                className='animate-spin size-3.5 mr-2 text-muted-fg'\n                                data-suffix\n                            />\n                        ) : props.suffix ? (\n                            <span data-suffix className='mr-2 has-[button]:mr-0 text-muted-fg'>\n                                {props.suffix}\n                            </span>\n                        ) : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACTextField>\n    )\n}\n\nexport { TextField }\n"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport {\n    FileTrigger as RACFileTrigger,\n    type FileTriggerProps as RACFileTriggerProps\n} from 'react-aria-components'\nimport { VariantProps } from 'tailwind-variants'\n\nimport { Button, buttonStyles } from './button'\n\ninterface FileTriggerProps extends RACFileTriggerProps, VariantProps<typeof buttonStyles> {\n    isDisabled?: boolean\n    ref?: React.RefObject<HTMLInputElement>\n}\n\nconst FileTrigger = ({\n    variant,\n    size,\n    shape,\n    ref,\n    children,\n    ...props\n}: Omit<FileTriggerProps, 'children'> & { children: React.ReactNode }) => {\n    return (\n        <RACFileTrigger ref={ref} {...props}>\n            <Button isDisabled={props.isDisabled} size={size} shape={shape} variant={variant}>\n                {children}\n            </Button>\n        </RACFileTrigger>\n    )\n}\n\nexport { FileTrigger }\nexport type { FileTriggerProps }\n"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { AnimatePresence, motion, useDragControls } from 'motion/react'\nimport type {\n    DialogProps,\n    DialogTriggerProps,\n    HeadingProps,\n    ModalOverlayProps,\n    PopoverProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Button,\n    composeRenderProps,\n    Dialog,\n    DialogTrigger,\n    Heading,\n    ModalOverlay,\n    OverlayArrow,\n    OverlayTriggerStateContext,\n    Modal as RACModal,\n    Popover as RACPopover,\n    Text\n} from 'react-aria-components'\n\nimport { useMediaQuery } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\n\nconst Modal = motion.create(RACModal)\nconst Overlay = motion.create(ModalOverlay)\n\nconst Popover = (props: DialogTriggerProps) => <DialogTrigger {...props} />\n\nconst DrawerMode = ({\n    className,\n    ...props\n}: Omit<ModalOverlayProps, 'style'> & Pick<DialogProps, 'children'>) => {\n    const state = React.useContext(OverlayTriggerStateContext)!\n    const controls = useDragControls()\n    return (\n        <AnimatePresence>\n            {(props?.isOpen || state?.isOpen) && (\n                <Overlay\n                    isOpen={props?.isOpen || state?.isOpen}\n                    onOpenChange={props?.onOpenChange || state?.setOpen}\n                    initial={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    animate={{ backgroundColor: `rgba(0, 0, 0, 0.5)`, backdropFilter: 'blur(2px)' }}\n                    exit={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    className='fixed inset-0 z-50 [--visual-viewport-vertical-padding:32px] will-change-auto'\n                    isDismissable\n                    {...props}\n                >\n                    {({ state }) => (\n                        <Modal\n                            isDismissable\n                            className={cn(\n                                'bg-bg rounded-t-2xl border-t fixed bottom-0 w-full shadow-sm will-change-transform max-h-full overflow-hidden',\n                                className\n                            )}\n                            initial={{ y: '100%' }}\n                            animate={{ y: 0 }}\n                            exit={{ y: '100%' }}\n                            drag='y'\n                            dragElastic={{ top: 0, bottom: 1 }}\n                            whileDrag={{ cursor: 'grabbing' }}\n                            dragTransition={{ bounceStiffness: 600, bounceDamping: 20 }}\n                            dragPropagation\n                            dragConstraints={{ top: 0, bottom: 0 }}\n                            transition={{ duration: 0.15, ease: 'easeInOut' }}\n                            onDragEnd={(_, { offset, velocity }) =>\n                                (offset.y > screen.availHeight * 0.25 || velocity.y > 100) &&\n                                state.close()\n                            }\n                            dragListener={false}\n                            dragControls={controls}\n                            {...props}\n                        >\n                            <Dialog\n                                aria-label='Popover'\n                                className='relative flex flex-col max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] overflow-hidden outline-hidden'\n                            >\n                                <div\n                                    className='w-full h-8 touch-none py-2'\n                                    onPointerDown={(e) => controls.start(e)}\n                                >\n                                    <div className='mx-auto w-12 h-1.5 rounded-full bg-muted' />\n                                </div>\n                                {props.children as React.ReactNode}\n                            </Dialog>\n                        </Modal>\n                    )}\n                </Overlay>\n            )}\n        </AnimatePresence>\n    )\n}\n\nconst PopoverMode = ({\n    className,\n    children,\n    showArrow,\n    ...props\n}: PopoverProps & { showArrow?: boolean }) => (\n    <RACPopover\n        className={composeRenderProps(\n            className,\n            (className, { isEntering, isExiting, placement }) =>\n                cn(\n                    'group max-w-sm bg-bg rounded-lg border shadow transition outline-hidden',\n                    isEntering && 'fade-in animate-in zoom-in-95',\n                    isExiting && 'fade-out animate-out zoom-out-95',\n                    placement === 'top' &&\n                        `mb-2 ${isEntering ? 'slide-in-from-bottom-2' : 'slide-out-to-bottom-2'}`,\n                    placement === 'right' &&\n                        `ml-2 ${isEntering ? 'slide-in-from-left-2' : 'slide-out-to-left-2'}`,\n                    placement === 'bottom' &&\n                        `mt-2 ${isEntering ? 'slide-in-from-top-2' : 'slide-out-to-top-2'}`,\n                    placement === 'left' &&\n                        `mr-2 ${isEntering ? 'slide-in-from-right-2' : 'slide-out-to-right-2'}`,\n                    className\n                )\n        )}\n        {...props}\n    >\n        {(values) => (\n            <>\n                {showArrow && (\n                    <OverlayArrow className='group'>\n                        <svg\n                            width={12}\n                            height={12}\n                            viewBox='0 0 12 12'\n                            className='block fill-bg stroke-muted group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180'\n                        >\n                            <path d='M0 0 L6 6 L12 0' />\n                        </svg>\n                    </OverlayArrow>\n                )}\n                {typeof children === 'function' ? children(values) : children}\n            </>\n        )}\n    </RACPopover>\n)\n\ninterface PopoverContentProps\n    extends Omit<ModalOverlayProps, 'children' | 'className'>,\n        Omit<PopoverProps, 'children' | 'className'> {\n    style?: React.CSSProperties\n    showArrow?: boolean\n    respectScreen?: boolean\n    children: React.ReactNode\n    className?: string | ((values: { defaultClassName?: string }) => string)\n}\n\nconst PopoverContent = ({\n    showArrow = true,\n    respectScreen = true,\n    ...props\n}: PopoverContentProps) => {\n    const isMobile = useMediaQuery('(max-width: 768px)')\n    return isMobile && respectScreen ? (\n        <DrawerMode {...props} />\n    ) : (\n        <PopoverMode showArrow={showArrow} {...props} />\n    )\n}\n\nconst Header = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='header'\n            className={cn('flex flex-col p-4 text-center sm:text-left', className)}\n            {...props}\n        />\n    )\n}\n\nconst Title = ({ className, ...props }: HeadingProps) => (\n    <Heading slot='title' className={cn('font-semibold text-lg/8', className)} {...props} />\n)\n\nconst Description = ({ className, ...props }: TextProps) => (\n    <Text slot='description' className={cn('text-muted-fg text-sm', className)} {...props} />\n)\n\nconst Body = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        slot='body'\n        className={cn(\n            'isolate flex flex-col overflow-auto px-4 py-1 max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))]',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='footer'\n            className={cn(\n                'isolate flex sm:flex-row flex-col-reverse justify-end gap-2 mt-auto p-4',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nPopover.Trigger = Button\nPopover.Content = PopoverContent\nPopover.Header = Header\nPopover.Title = Title\nPopover.Description = Description\nPopover.Body = Body\nPopover.Footer = Footer\n\nexport { Popover }\n"
  },
  "heading": {
    "component": "@/components/ui/heading",
    "raw": "import React from 'react'\n\nimport { cn } from '@/lib/utils'\n\ntype HeadingType = { level?: 1 | 2 | 3 | 4 } & React.ComponentPropsWithoutRef<\n    'h1' | 'h2' | 'h3' | 'h4'\n>\n\ninterface HeadingProps extends HeadingType {\n    tracking?: 'tighter' | 'tight' | 'normal' | 'wide' | 'wider' | 'widest'\n    className?: string | undefined\n}\n\nconst Heading = ({ className, tracking = 'normal', level = 1, ...props }: HeadingProps) => {\n    const Element: `h${typeof level}` = `h${level}`\n    return (\n        <Element\n            className={cn(\n                'text-fg font-sans',\n                level === 1 && 'text-xl font-bold sm:text-2xl',\n                level === 2 && 'text-lg font-semibold sm:text-xl',\n                level === 3 && 'text-base font-semibold sm:text-lg',\n                level === 4 && 'text-base font-semibold',\n                tracking === 'tighter' && 'tracking-tighter',\n                tracking === 'tight' && 'tracking-tight',\n                tracking === 'normal' && 'tracking-normal',\n                tracking === 'wide' && 'tracking-wide',\n                tracking === 'wider' && 'tracking-wider',\n                tracking === 'widest' && 'tracking-widest',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nexport { Heading }\n"
  },
  "color-field": {
    "component": "@/components/ui/color-field",
    "raw": "'use client'\n\nimport { IconLoaderPinwheel } from 'hq-icons'\nimport type { ColorFieldProps as RACColorFieldProps } from 'react-aria-components'\nimport { ColorField as RACColorField, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { ColorPicker } from './color-picker'\nimport { ColorSwatch } from './color-swatch'\nimport { Description, FieldError, FieldGroup, FieldProps, Input, Label } from './field'\n\ninterface ColorFieldProps extends RACColorFieldProps, FieldProps {\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isLoading?: boolean\n    withPicker?: boolean\n}\n\nconst ColorField = ({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    isLoading,\n    withPicker = true,\n    className,\n    ...props\n}: ColorFieldProps) => {\n    const value = props.value ?? props.defaultValue\n    return (\n        <RACColorField\n            aria-label={props['aria-label'] ?? 'Color field'}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group flex w-full flex-col gap-y-1.5 **:data-[slot=color-swatch]:-ml-0.5',\n                    className\n                )\n            )}\n            {...props}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <FieldGroup isDisabled={isDisabled} isInvalid={isInvalid}>\n                        {props.prefix ? (\n                            <span className='ml-2 has-[button]:ml-0 text-muted-fg'>\n                                {props.prefix}\n                            </span>\n                        ) : null}\n                        {isLoading ? (\n                            <span className='ml-2 has-[button]:ml-0 text-muted-fg'>\n                                <IconLoaderPinwheel className='animate-spin size-4' />\n                            </span>\n                        ) : null}\n                        <div className='flex w-full items-center'>\n                            {value && (\n                                <span className='ml-2'>\n                                    {withPicker ? (\n                                        <ColorPicker\n                                            onChange={props.onChange}\n                                            value={value.toString('hex')}\n                                        />\n                                    ) : (\n                                        <ColorSwatch\n                                            className='size-6'\n                                            color={value.toString('hex')}\n                                        />\n                                    )}\n                                </span>\n                            )}\n                            <Input placeholder={placeholder} />\n                        </div>\n                        {props.suffix ? (\n                            <span data-suffix className='mr-2 has-[button]:mr-0 text-muted-fg'>\n                                {props.suffix}\n                            </span>\n                        ) : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACColorField>\n    )\n}\n\nexport { ColorField }\nexport type { ColorFieldProps }\n"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "'use client'\n\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst badgeStyles = tv({\n    base: [\n        'inline-flex items-center cursor-default border gap-x-1.5 px-2 py-0.5 text-xs/5 font-medium **:data-[slot=icon]:size-3 transition bg-(--bg) text-(--fg) border-(--bg)/20 hover:bg-(--bg)/85 pressed:bg-(--bg)/95'\n    ],\n    variants: {\n        variant: {\n            primary: '[--bg:var(--color-primary)] [--fg:var(--color-primary-fg)]',\n            secondary: '[--bg:var(--color-secondary)] [--fg:var(--color-secondary-fg)]',\n            info: '[--bg:var(--color-info)] [--fg:var(--color-info-fg)]',\n            success: '[--bg:var(--color-success)] [--fg:var(--color-success-fg)]',\n            danger: '[--bg:var(--color-danger)] [--fg:var(--color-danger-fg)]',\n            warning: '[--bg:var(--color-warning)] [--fg:var(--color-warning-fg)]',\n            outline:\n                'bg-bg/80 text-fg hover:bg-primary/40 pressed:bg-primary/50 hover:text-primary-fg border-primary'\n        },\n        shape: {\n            square: 'rounded-lg',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        shape: 'square'\n    }\n})\n\ninterface BadgeProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof badgeStyles> {\n    className?: string\n    children: React.ReactNode\n}\n\nconst Badge = ({ children, variant, shape, className, ...props }: BadgeProps) => {\n    return (\n        <span data-badge {...props} className={badgeStyles({ variant, shape, className })}>\n            {children}\n        </span>\n    )\n}\n\nexport { Badge, badgeStyles }\nexport type { BadgeProps }\n"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type {\n    SliderProps as RACSliderProps,\n    SliderThumbProps,\n    SliderTrackProps\n} from 'react-aria-components'\nimport {\n    Slider as RACSlider,\n    SliderThumb as RACSliderThumb,\n    SliderTrack as RACSliderTrack,\n    SliderOutput,\n    SliderStateContext,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, FieldProps, Label } from './field'\n\ninterface SliderProps extends RACSliderProps, FieldProps {}\n\nconst Slider = ({ orientation = 'horizontal', className, ...props }: SliderProps) => {\n    return (\n        <RACSlider\n            orientation={orientation}\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'group relative flex touch-none select-none flex-col gap-y-3',\n                    orientation === 'horizontal'\n                        ? 'w-full min-w-56'\n                        : 'h-full min-h-56 w-1.5 items-center',\n                    className\n                )\n            )}\n            {...props}\n        >\n            {({ orientation, state }) => (\n                <>\n                    <div className='flex text-fg'>\n                        {props.label && <Label>{props.label}</Label>}\n                        <SliderOutput\n                            className={cn(\n                                'text-muted-fg text-sm tabular-nums',\n                                orientation === 'horizontal' ? 'ml-auto' : 'mx-auto'\n                            )}\n                        >\n                            {state.values.map((_, i) => state.getThumbValueLabel(i)).join(' – ')}\n                        </SliderOutput>\n                    </div>\n                    <SliderTrack>\n                        <SliderFiller />\n                        {state.values.map((_, i) => (\n                            <SliderThumb key={i} index={i} />\n                        ))}\n                    </SliderTrack>\n                    {props.description && <Description>{props.description}</Description>}\n                    <FieldError>{props.errorMessage}</FieldError>\n                </>\n            )}\n        </RACSlider>\n    )\n}\n\nconst SliderTrack = ({ className, ...props }: SliderTrackProps) => {\n    return (\n        <RACSliderTrack\n            {...props}\n            className={composeRenderProps(className, (className, { orientation, isDisabled }) =>\n                cn([\n                    'relative cursor-pointer rounded-full bg-muted',\n                    orientation === 'horizontal' ? 'h-1.5 w-full' : 'w-1.5 flex-1/2',\n                    isDisabled ? 'opacity-50 cursor-default' : 'cursor-pointer',\n                    className\n                ])\n            )}\n        />\n    )\n}\n\nconst SliderFiller = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    const state = React.use(SliderStateContext)\n    const { values, orientation, getThumbPercent } = state || {}\n\n    const getStyle = () => {\n        const percent0 = getThumbPercent ? getThumbPercent(0) * 100 : 0\n        const percent1 = getThumbPercent ? getThumbPercent(1) * 100 : 0\n\n        if (values?.length === 1) {\n            return orientation === 'horizontal'\n                ? { width: `${percent0}%` }\n                : { height: `${percent0}%` }\n        } else {\n            return orientation === 'horizontal'\n                ? { left: `${percent0}%`, width: `${Math.abs(percent0 - percent1)}%` }\n                : { bottom: `${percent0}%`, height: `${Math.abs(percent0 - percent1)}%` }\n        }\n    }\n\n    return (\n        <div\n            className={cn(\n                'pointer-events-none absolute rounded-full bg-primary',\n                orientation === 'horizontal' ? 'h-full' : 'w-full bottom-0',\n                className\n            )}\n            style={getStyle()}\n            {...props}\n        />\n    )\n}\n\nconst SliderThumb = ({ className, ...props }: SliderThumbProps) => {\n    return (\n        <RACSliderThumb\n            {...props}\n            className={composeRenderProps(\n                className,\n                (className, { isFocusVisible, isDragging, isDisabled }) =>\n                    cn(\n                        'top-1/2 left-1/2 size-5 rounded-full border border-muted-fg bg-bg outline-hidden transition',\n                        isFocusVisible && 'border-primary ring-4 ring-primary/20',\n                        isDragging && 'cursor-grabbing border-primary ring-4 ring-primary/20',\n                        isDisabled && 'opacity-50',\n                        className\n                    )\n            )}\n        />\n    )\n}\n\nexport { Slider }\n"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\n\nimport type { DropZoneProps } from 'react-aria-components'\nimport { composeRenderProps, DropZone as RACDropZone } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n    <RACDropZone\n        className={composeRenderProps(\n            className,\n            (className, { isDropTarget, isFocused, isFocusVisible }) =>\n                cn(\n                    'group flex max-h-[200px] max-w-xl outline-hidden flex-col items-center justify-center gap-2 rounded-lg border border-dashed p-6 text-sm transition duration-200 has-[[slot=description]]:text-center',\n                    isDropTarget &&\n                        'border-primary bg-primary/10 ring-primary/20 [&_.text-muted-fg]:text-primary border-solid ring-4',\n                    isFocused &&\n                        'ring-primary/20 invalid:ring-danger/20 ring-4 outline-hidden border-primary/70 invalid:border-danger/70',\n                    isFocusVisible && 'ring-primary/20 ring-4',\n                    className\n                )\n        )}\n        {...props}\n    />\n)\nexport { DropZone }\n"
  },
  "selection-box": {
    "component": "@/components/ui/selection-box",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type {\n    CheckboxGroupProps,\n    CheckboxProps,\n    RadioGroupProps,\n    RadioProps\n} from 'react-aria-components'\nimport {\n    Checkbox,\n    CheckboxGroup,\n    composeRenderProps,\n    Radio,\n    RadioGroup\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, FieldProps, Label } from './field'\n\nconst SelectionBoxContext = React.createContext<'single' | 'multiple'>('single')\nconst useSelectionBoxContext = () => React.use(SelectionBoxContext)\n\ninterface SelectionBoxProps\n    extends Omit<CheckboxGroupProps, 'value' | 'onChange' | 'defaultValue' | 'validate'>,\n        Omit<RadioGroupProps, 'value' | 'onChange' | 'defaultValue' | 'validate'>,\n        FieldProps {\n    selectionMode?: 'single' | 'multiple'\n    prefix?: React.ReactNode\n    children?: React.ReactNode\n    className?: string\n    style?: React.CSSProperties\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    value?: any\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    onChange?: (value: any) => any\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    defaultValue?: any\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    validate?: (value: any) => any\n}\n\nconst SelectionBox = ({\n    orientation = 'vertical',\n    selectionMode = 'single',\n    className,\n    children,\n    label,\n    description,\n    errorMessage,\n    ...props\n}: SelectionBoxProps) => {\n    return (\n        <SelectionBoxContext.Provider value={selectionMode}>\n            {selectionMode === 'multiple' ? (\n                <CheckboxGroup\n                    {...props}\n                    className={composeRenderProps(className, (className) =>\n                        cn('group flex flex-col gap-2', className)\n                    )}\n                >\n                    {composeRenderProps(children, (children, { isInvalid, isDisabled }) => (\n                        <>\n                            {label && (\n                                <Label isInvalid={isInvalid} isDisabled={isDisabled}>\n                                    {label}\n                                </Label>\n                            )}\n                            <div\n                                slot='items'\n                                className={cn(\n                                    'select-none flex gap-2',\n                                    orientation === 'horizontal' ? 'flex-wrap' : 'flex-col'\n                                )}\n                            >\n                                {children}\n                            </div>\n                            {description && <Description>{description}</Description>}\n                            <FieldError>{errorMessage}</FieldError>\n                        </>\n                    ))}\n                </CheckboxGroup>\n            ) : (\n                <RadioGroup\n                    {...props}\n                    className={composeRenderProps(className, (className) =>\n                        cn('group flex flex-col gap-2', className)\n                    )}\n                >\n                    {composeRenderProps(children, (children, { isInvalid, isDisabled }) => (\n                        <>\n                            {label && (\n                                <Label isInvalid={isInvalid} isDisabled={isDisabled}>\n                                    {label}\n                                </Label>\n                            )}\n                            <div\n                                slot='items'\n                                className={cn(\n                                    'select-none flex gap-2',\n                                    orientation === 'horizontal' ? 'flex-wrap' : 'flex-col'\n                                )}\n                            >\n                                {children}\n                            </div>\n                            {description && <Description>{description}</Description>}\n                            <FieldError>{errorMessage}</FieldError>\n                        </>\n                    ))}\n                </RadioGroup>\n            )}\n        </SelectionBoxContext.Provider>\n    )\n}\n\ninterface SelectionBoxItemProps\n    extends Omit<CheckboxProps, 'value'>,\n        Omit<RadioProps, 'value'>,\n        Omit<FieldProps, 'placeholder' | 'description' | 'errorMessage'> {\n    prefix?: React.ReactNode\n    children?: React.ReactNode\n    className?: string\n    style?: React.CSSProperties\n    value: string\n}\n\nconst SelectionBoxItem = ({ className, label, children, ...props }: SelectionBoxItemProps) => {\n    const selectionMode = useSelectionBoxContext()\n    return selectionMode === 'multiple' ? (\n        <Checkbox\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'group flex items-center gap-2 text-sm transition',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n            {...props}\n        >\n            {({ isSelected, isIndeterminate, isFocused, isInvalid }) => (\n                <div\n                    slot='box'\n                    className={cn(\n                        'flex w-full px-3 py-2 items-center rounded-sm border text-bg transition',\n                        isSelected || isIndeterminate\n                            ? 'border-primary bg-primary/10 text-primary **:text-primary group-invalid:border-danger/70 group-invalid:bg-danger/20 group-invalid:**:text-danger'\n                            : 'border-muted group-hover:border-primary/70 group-hover:bg-primary/10 **:text-muted-fg',\n                        isFocused &&\n                            'border-primary ring-primary/20 ring-4 group-invalid:border-danger/70 group-invalid:text-danger-fg group-invalid:ring-danger/20',\n                        isInvalid &&\n                            'border-danger/70 bg-danger/20 text-danger-fg ring-danger/20 group-hover:border-danger/70',\n                        className\n                    )}\n                >\n                    {props.prefix && (\n                        <div className='flex shrink-0 items-center justify-center size-5 text-base mr-2'>\n                            {props.prefix}\n                        </div>\n                    )}\n                    <Label isInvalid={isInvalid} isDisabled={props.isDisabled}>\n                        {label ?? children}\n                    </Label>\n                </div>\n            )}\n        </Checkbox>\n    ) : (\n        <Radio\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'group flex items-center gap-2 text-sm transition',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n            {...props}\n        >\n            {({ isSelected, isFocused, isInvalid }) => (\n                <div\n                    slot='box'\n                    className={cn(\n                        'flex w-full px-3 py-2 items-center rounded-sm border text-bg transition',\n                        isSelected\n                            ? 'border-primary bg-primary/10 text-primary **:text-primary group-invalid:border-danger/70 group-invalid:bg-danger/20 group-invalid:**:text-danger'\n                            : 'border-muted group-hover:border-primary/70 group-hover:bg-primary/10 **:text-muted-fg',\n                        isFocused &&\n                            'border-primary ring-primary/20 ring-4 group-invalid:border-danger/70 group-invalid:text-danger-fg group-invalid:ring-danger/20',\n                        isInvalid &&\n                            'border-danger/70 bg-danger/20 text-danger-fg ring-danger/20 group-hover:border-danger/70',\n                        className\n                    )}\n                >\n                    {props.prefix && (\n                        <div className='flex shrink-0 items-center justify-center size-5 text-base mr-2'>\n                            {props.prefix}\n                        </div>\n                    )}\n                    <Label isInvalid={isInvalid} isDisabled={props.isDisabled}>\n                        {label ?? children}\n                    </Label>\n                </div>\n            )}\n        </Radio>\n    )\n}\n\nSelectionBox.Item = SelectionBoxItem\nexport { SelectionBox }\n"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "import { cn } from '@/lib/utils'\n\nconst Card = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='card'\n            className={cn(\n                'flex flex-col rounded-lg border bg-bg text-fg shadow-xs has-[table]:overflow-hidden **:[[slot=table]]:border-x-0 **:[[slot=table]]:rounded-none',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\ninterface HeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n    title?: string\n    description?: string\n}\n\nconst CardHeader = ({ className, title, description, children, ...props }: HeaderProps) => (\n    <div\n        slot='header'\n        className={cn(\n            'grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 p-6 has-[[slot=action]]:grid-cols-[1fr_auto]',\n            className\n        )}\n        {...props}\n    >\n        {title && <CardTitle>{title}</CardTitle>}\n        {description && <CardDescription>{description}</CardDescription>}\n        {!title && typeof children === 'string' ? <CardTitle>{children}</CardTitle> : children}\n    </div>\n)\n\nconst CardTitle = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    return (\n        <div\n            slot='title'\n            className={cn('font-semibold text-lg leading-none tracking-tight', className)}\n            {...props}\n        />\n    )\n}\n\nconst CardDescription = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='description'\n            className={cn('row-start-2 text-muted-fg text-sm', className)}\n            {...props}\n        />\n    )\n}\n\nconst CardAction = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='action'\n            className={cn(\n                'col-start-2 row-span-2 row-start-1 self-start justify-self-end',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CardContent = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return <div slot='content' className={cn('px-6 has-[table]:p-0', className)} {...props} />\n}\n\nconst CardFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='footer'\n            className={cn(\n                'flex flex-col-reverse lg:flex-row items-center justify-end p-6',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nCard.Content = CardContent\nCard.Description = CardDescription\nCard.Footer = CardFooter\nCard.Header = CardHeader\nCard.Title = CardTitle\nCard.Action = CardAction\n\nexport { Card, CardAction, CardContent, CardDescription, CardFooter, CardHeader, CardTitle }\n"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport { IconCheck, IconGripVertical } from 'hq-icons'\nimport type {\n    ListBoxItemProps,\n    ListBoxProps,\n    ListBoxSectionProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Collection,\n    composeRenderProps,\n    Header,\n    ListBox as RACListBox,\n    ListBoxItem as RACListBoxItem,\n    ListBoxSection as RACListBoxSection,\n    Text\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst ListBox = <T extends object>({ className, ...props }: ListBoxProps<T>) => (\n    <RACListBox\n        {...props}\n        className={composeRenderProps(className, (className) =>\n            cn(\n                'grid outline-hidden w-full grid-cols-[auto_1fr_1.5rem_0.5rem_auto] gap-y-1 overflow-y-auto rounded-lg border p-1',\n                className\n            )\n        )}\n    />\n)\n\nconst ListBoxItem = ({ children, className, ...props }: ListBoxItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <RACListBoxItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(\n                className,\n                (\n                    className,\n                    { isHovered, isFocused, isDragging, isSelected, isDisabled, isFocusVisible }\n                ) =>\n                    cn(\n                        'group relative grid grid-cols-subgrid col-span-full items-center outline-hidden',\n                        'rounded-md px-2 py-1.5 text-base sm:text-sm/6 select-none',\n                        '**:[svg]:size-4 *:data-[slot=icon]:mr-2',\n                        {\n                            'bg-primary/10 text-primary *:[.text-muted-fg]:text-primary':\n                                isFocused || isFocusVisible || isHovered\n                        },\n                        isSelected && '**:data-[slot=icon]:hidden',\n                        isDragging && 'cursor-grabbing outline outline-primary',\n                        isDisabled && 'pointer-events-none opacity-50',\n                        className\n                    )\n            )}\n        >\n            {({ allowsDragging, isSelected, isFocused, isDragging }) => (\n                <>\n                    {allowsDragging && (\n                        <IconGripVertical\n                            className={cn(\n                                'size-4 shrink-0 text-muted-fg transition',\n                                isFocused && 'text-fg',\n                                isDragging && 'text-muted-fg',\n                                isSelected && 'text-primary-fg/70'\n                            )}\n                        />\n                    )}\n                    {isSelected && <IconCheck className='mr-2 size-4' data-slot='checked' />}\n                    {typeof children === 'string' ? (\n                        <Text slot='label' className='col-start-2'>\n                            {children}\n                        </Text>\n                    ) : (\n                        children\n                    )}\n                </>\n            )}\n        </RACListBoxItem>\n    )\n}\n\nconst ListBoxSection = <T extends object>({\n    className,\n    ...props\n}: ListBoxSectionProps<T> & { title?: string }) => (\n    <RACListBoxSection\n        className={cn('col-span-full text-sm grid grid-cols-[auto_1fr] mt-2', className)}\n    >\n        {'title' in props && (\n            <Header className='text-muted-fg text-xs py-1 px-2.5 col-span-full pointer-events-none'>\n                {props.title}\n            </Header>\n        )}\n        <Collection items={props.items}>{props.children}</Collection>\n    </RACListBoxSection>\n)\n\ninterface ListBoxDetailsProps extends TextProps {\n    label?: TextProps['children']\n    description?: TextProps['children']\n}\n\nconst ListBoxDetails = ({ label, description, ...props }: ListBoxDetailsProps) => {\n    const { children, title, ...restProps } = props\n\n    return (\n        <div data-slot='item-details' className='col-start-2 flex flex-col gap-y-1' {...restProps}>\n            {label && (\n                <Text slot='label' className='font-medium sm:text-sm'>\n                    {label}\n                </Text>\n            )}\n            {description && (\n                <Text slot='description' className='text-muted-fg text-xs' {...restProps}>\n                    {description}\n                </Text>\n            )}\n            {!title && children}\n        </div>\n    )\n}\n\nListBox.Section = ListBoxSection\nListBox.Details = ListBoxDetails\nListBox.Item = ListBoxItem\n\nexport { ListBox }\n"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from 'hq-icons'\nimport {\n    Button,\n    type ButtonProps,\n    composeRenderProps,\n    NumberField as RACNumberField,\n    type NumberFieldProps as RACNumberFieldProps,\n    type ValidationResult\n} from 'react-aria-components'\n\nimport { useMediaQuery } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\n\ninterface NumberFieldProps extends RACNumberFieldProps {\n    label?: string\n    description?: string\n    placeholder?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst NumberField = ({\n    label,\n    placeholder,\n    description,\n    className,\n    errorMessage,\n    ...props\n}: NumberFieldProps) => {\n    const isMobile = useMediaQuery('(max-width: 768px)')\n    return (\n        <RACNumberField\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid || !!errorMessage} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <FieldGroup isDisabled={isDisabled} className='overflow-hidden'>\n                        {isMobile && (\n                            <Stepper slot='decrement' className='border-r'>\n                                <IconMinus />\n                            </Stepper>\n                        )}\n                        <Input\n                            className='tabular-nums text-center sm:text-left'\n                            placeholder={placeholder}\n                        />\n                        <div\n                            className={cn(\n                                'grid h-10 place-content-center border-s',\n                                'group-focus:border-primary/70 group-hover:border-primary/60',\n                                isInvalid && 'group-focus:border-danger/70',\n                                isDisabled && 'group-focus:border-muted'\n                            )}\n                        >\n                            {isMobile ? (\n                                <Stepper slot='increment'>\n                                    <IconPlus />\n                                </Stepper>\n                            ) : (\n                                <div className='flex h-full flex-col divide-y'>\n                                    <Stepper slot='increment' className='h-5 px-1'>\n                                        <IconChevronUp />\n                                    </Stepper>\n                                    <Stepper slot='decrement' className='h-5 px-1'>\n                                        <IconChevronDown />\n                                    </Stepper>\n                                </div>\n                            )}\n                        </div>\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACNumberField>\n    )\n}\n\ninterface StepperProps extends ButtonProps {\n    slot: 'increment' | 'decrement'\n    className?: string\n}\n\nconst Stepper = ({ slot, className, ...props }: StepperProps) => {\n    return (\n        <Button\n            className={composeRenderProps(className, (className, { isDisabled, isPressed }) =>\n                cn(\n                    'text-muted-fg h-10 px-3 outline-hidden',\n                    isPressed && 'bg-primary text-primary-fg',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n            slot={slot}\n            {...props}\n        />\n    )\n}\n\nexport { NumberField }\n"
  },
  "field": {
    "component": "@/components/ui/field",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    composeRenderProps,\n    type FieldErrorProps,\n    Group,\n    type GroupProps,\n    type InputProps,\n    FieldError as RACFieldError,\n    Input as RACInput,\n    Label as RACLabel,\n    type LabelProps as RACLabelProps,\n    Text,\n    type TextFieldProps,\n    type TextProps,\n    type ValidationResult\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ninterface FieldProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    'aria-label'?: TextFieldProps['aria-label']\n    'aria-labelledby'?: TextFieldProps['aria-labelledby']\n}\n\ninterface LabelProps extends RACLabelProps {\n    isInvalid?: boolean\n    isDisabled?: boolean\n}\n\nconst Label = ({ className, isInvalid, isDisabled, ...props }: LabelProps) => {\n    return (\n        <RACLabel\n            slot='label'\n            {...props}\n            className={cn(\n                'w-fit cursor-default text-sm font-medium transition-colors',\n                isInvalid\n                    ? 'text-danger/70 group-has-focus:text-danger group-has-focus-within:text-danger group-open:text-danger group-has-pressed:text-danger'\n                    : 'text-muted-fg group-has-focus:text-primary group-has-focus-within:text-primary group-open:text-primary group-has-pressed:text-primary',\n                isDisabled && 'opacity-50',\n                className\n            )}\n        />\n    )\n}\n\nconst Description = ({ className, ...props }: TextProps) => {\n    return (\n        <Text\n            {...props}\n            slot='description'\n            className={cn('text-muted-fg text-base/5 text-pretty sm:text-sm/5', className)}\n        />\n    )\n}\n\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n    return <RACFieldError {...props} className={cn('text-danger text-sm/5', className)} />\n}\n\nconst FieldGroup = ({ className, ...props }: GroupProps) => {\n    return (\n        <Group\n            className={composeRenderProps(\n                className,\n                (className, { isHovered, isInvalid, isFocusWithin, isDisabled, isFocusVisible }) =>\n                    cn([\n                        'h-10 flex items-center rounded-lg border transition',\n                        isInvalid ? 'border-danger/30' : 'border-muted',\n                        isHovered && `${isInvalid ? 'border-danger/70' : 'border-primary/70'}`,\n                        {\n                            'ring-4 border-primary/70 ring-primary/20 invalid:border-danger/70 invalid:ring-danger/20':\n                                isFocusWithin || isFocusVisible\n                        },\n                        isDisabled && 'opacity-50 pointer-events-none',\n                        className\n                    ])\n            )}\n            {...props}\n        />\n    )\n}\n\nconst Input = ({\n    className,\n    ref,\n    ...props\n}: InputProps & { ref?: React.Ref<HTMLInputElement> }) => (\n    <RACInput\n        ref={ref}\n        className={cn(\n            'w-full min-w-0 bg-transparent p-2 text-base text-fg placeholder-muted-fg outline-hidden lg:text-sm',\n            className\n        )}\n        {...props}\n    />\n)\n\nexport { Description, FieldError, FieldGroup, Input, Label, type FieldProps }\n"
  },
  "disclosure": {
    "component": "@/components/ui/disclosure",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconMinus } from 'hq-icons'\nimport type {\n    ButtonProps,\n    DisclosurePanelProps,\n    DisclosureGroupProps as RACDisclosureGroupProps,\n    DisclosureProps as RACDisclosureProps\n} from 'react-aria-components'\nimport {\n    Button,\n    composeRenderProps,\n    Disclosure as RACDisclosure,\n    DisclosureGroup as RACDisclosureGroup,\n    DisclosurePanel as RACDisclosurePanel\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ninterface AccordionProps extends RACDisclosureGroupProps {\n    ref?: React.RefObject<HTMLDivElement>\n    hideIndicator?: boolean\n}\nconst DisclosureGroup = ({ children, ref, className, ...props }: AccordionProps) => {\n    return (\n        <RACDisclosureGroup\n            ref={ref}\n            data-slot='disclosure-group'\n            {...props}\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'space-y-1',\n                    props.hideIndicator && '**:data-[slot=indicator]:text-transparent',\n                    isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer',\n                    className\n                )\n            )}\n        >\n            {(values) => <>{typeof children === 'function' ? children(values) : children}</>}\n        </RACDisclosureGroup>\n    )\n}\n\ninterface CollapsibleProps extends RACDisclosureProps {\n    ref?: React.Ref<HTMLDivElement>\n}\nconst Disclosure = ({ className, ref, children, ...props }: CollapsibleProps) => {\n    return (\n        <RACDisclosure\n            ref={ref}\n            data-slot='disclosure'\n            {...props}\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'w-full rounded-lg min-w-60 transition duration-300 ease-in-out overflow-hidden',\n                    isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer',\n                    className\n                )\n            )}\n        >\n            {(values) => (typeof children === 'function' ? children(values) : children)}\n        </RACDisclosure>\n    )\n}\n\ninterface DisclosureTriggerProps extends ButtonProps {\n    ref?: React.Ref<HTMLButtonElement>\n}\nconst DisclosureTrigger = ({ className, ref, ...props }: DisclosureTriggerProps) => {\n    return (\n        <Button\n            ref={ref}\n            slot='trigger'\n            className={composeRenderProps(className, (className, { isFocusVisible, isDisabled }) =>\n                cn(\n                    'flex w-full rounded-lg items-center justify-between gap-2 py-2 font-medium whitespace-nowrap sm:text-sm aria-expanded:**:data-[slot=indicator]:rotate-0',\n                    isFocusVisible && 'text-fg outline-2 outline-offset-2 outline-primary',\n                    isDisabled && 'cursor-default opacity-50',\n                    className\n                )\n            )}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof props.children === 'function' ? props.children(values) : props.children}\n                    <div\n                        data-slot='indicator'\n                        className={cn(\n                            className,\n                            'relative ml-auto inline-flex size-5 -rotate-90 items-center justify-center transition-transform duration-300'\n                        )}\n                    >\n                        <IconMinus data-slot='indicator-static' className='absolute size-3.5' />\n                        <IconMinus\n                            data-slot='indicator'\n                            className='absolute size-3.5 -rotate-90 transition-transform duration-300'\n                        />\n                    </div>\n                </>\n            )}\n        </Button>\n    )\n}\nconst DisclosurePanel = ({ className, children, ...props }: DisclosurePanelProps) => {\n    return (\n        <RACDisclosurePanel\n            data-slot='disclosure-content'\n            className={cn(\n                'transition-all duration-300 ease-in-out overflow-hidden',\n                'max-h-0 opacity-0 aria-[hidden=false]:max-h-[1000px] aria-[hidden=false]:opacity-100',\n                className\n            )}\n            {...props}\n        >\n            {children}\n        </RACDisclosurePanel>\n    )\n}\nconst Accordion = (props: AccordionProps) => <DisclosureGroup {...props} />\nAccordion.Item = Disclosure\nAccordion.Trigger = DisclosureTrigger\nAccordion.Content = DisclosurePanel\n\nconst Collapsible = (props: CollapsibleProps) => <Disclosure {...props} />\nCollapsible.Trigger = DisclosureTrigger\nCollapsible.Content = DisclosurePanel\n\nexport { Accordion, Collapsible }\n"
  },
  "otp": {
    "component": "@/components/ui/otp",
    "raw": "'use client'\n\nimport { use } from 'react'\n\nimport { IconCircle } from 'hq-icons'\nimport { OTPInput, OTPInputContext } from 'input-otp'\n\nimport { cn } from '@/lib/utils'\n\ntype OTPInputProps = React.ComponentProps<typeof OTPInput>\nconst OTP = ({\n    className,\n    autoFocus = false,\n    containerClassName,\n    ref,\n    ...props\n}: OTPInputProps) => (\n    <OTPInput\n        data-1p-ignore\n        ref={ref}\n        autoFocus={autoFocus}\n        containerClassName={cn(\n            'flex items-center gap-2 has-disabled:opacity-50',\n            containerClassName\n        )}\n        className={cn('bg-danger mt-auto h-[2.5rem] disabled:cursor-not-allowed', className)}\n        {...props}\n    />\n)\n\ntype OTPGroupProps = React.ComponentProps<'div'>\nconst OTPGroup = ({ className, ref, ...props }: OTPGroupProps) => (\n    <div ref={ref} className={cn('flex items-center gap-x-1.5', className)} {...props} />\n)\n\ninterface OTPSlotProps extends React.ComponentProps<'div'> {\n    index: number\n}\n\nconst OTPSlot = ({ index, className, ref, ...props }: OTPSlotProps) => {\n    const OTPContext = use(OTPInputContext)\n    const slot = OTPContext.slots[index]\n\n    if (!slot) {\n        throw new Error('Slot not found')\n    }\n\n    const { char, hasFakeCaret, isActive } = slot\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'relative flex size-10 items-center justify-center rounded-lg border text-sm tabular-nums transition-all',\n                isActive && 'border-primary/70 ring-primary/20 z-10 ring-4',\n                className\n            )}\n            {...props}\n        >\n            {char}\n            {hasFakeCaret && (\n                <div className='pointer-events-none absolute inset-0 flex items-center justify-center'>\n                    <div className='animate-caret-blink bg-fg h-4 w-px duration-1000' />\n                </div>\n            )}\n        </div>\n    )\n}\n\ntype OTPSeparatorProps = React.ComponentProps<'div'>\nconst OTPSeparator = ({ ref, ...props }: OTPSeparatorProps) => (\n    <div ref={ref} {...props}>\n        <IconCircle className='fill-fg size-2' />\n    </div>\n)\n\nOTP.Group = OTPGroup\nOTP.Slot = OTPSlot\nOTP.Separator = OTPSeparator\n\nexport { OTP }\nexport type { OTPGroupProps, OTPSeparatorProps, OTPSlotProps }\n"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCheck, IconChevronRight } from 'hq-icons'\nimport { AnimatePresence, motion } from 'motion/react'\nimport type {\n    MenuProps,\n    MenuSectionProps,\n    MenuTriggerProps,\n    PopoverProps,\n    MenuItemProps as RACMenuItemProps,\n    SeparatorProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Collection,\n    composeRenderProps,\n    Header,\n    MenuTrigger,\n    ModalOverlay,\n    OverlayTriggerStateContext,\n    Popover,\n    PopoverContext,\n    Menu as RACMenu,\n    MenuItem as RACMenuItem,\n    MenuSection as RACMenuSection,\n    Modal as RACModal,\n    Separator,\n    SubmenuTrigger,\n    Text,\n    useSlottedContext\n} from 'react-aria-components'\n\nimport { useMediaQuery } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\n\nconst Modal = motion.create(RACModal)\nconst Overlay = motion.create(ModalOverlay)\nconst Menu = ({ ...props }: MenuTriggerProps) => <MenuTrigger {...props} />\n\ninterface MenuContentProps<T>\n    extends Pick<\n            PopoverProps,\n            | 'placement'\n            | 'offset'\n            | 'crossOffset'\n            | 'arrowBoundaryOffset'\n            | 'triggerRef'\n            | 'isOpen'\n            | 'onOpenChange'\n            | 'shouldFlip'\n        >,\n        MenuProps<T> {\n    className?: string\n    style?: React.CSSProperties\n    respectScreen?: boolean\n}\n\nconst MenuContent = <T extends object>({\n    className,\n    respectScreen = true,\n    ...props\n}: MenuContentProps<T>) => {\n    const isMobile = useMediaQuery('(max-width: 768px)')\n    const popoverContext = useSlottedContext(PopoverContext)!\n    const state = React.use(OverlayTriggerStateContext)!\n    if (isMobile && respectScreen) {\n        return (\n            <AnimatePresence>\n                {(props?.isOpen || state?.isOpen) && (\n                    <Overlay\n                        isOpen={props?.isOpen || state?.isOpen}\n                        onOpenChange={props?.onOpenChange || state?.setOpen}\n                        initial={{\n                            backgroundColor: 'rgba(0, 0, 0, 0)',\n                            backdropFilter: 'blur(0px)'\n                        }}\n                        animate={{\n                            backgroundColor: `rgba(0, 0, 0, 0.5)`,\n                            backdropFilter: 'blur(2px)'\n                        }}\n                        exit={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                        className='fixed inset-0 z-50 [--visual-viewport-vertical-padding:32px] will-change-auto'\n                        isDismissable\n                        {...props}\n                    >\n                        {({ state }) => (\n                            <Modal\n                                isDismissable\n                                className='bg-bg rounded-t-2xl border-t absolute bottom-0 w-full shadow-sm will-change-transform max-h-full overflow-hidden'\n                                initial={{ y: '100%' }}\n                                animate={{ y: 0 }}\n                                exit={{ y: '100%' }}\n                                drag='y'\n                                dragElastic={{ top: 0, bottom: 1 }}\n                                whileDrag={{ cursor: 'grabbing' }}\n                                dragTransition={{ bounceStiffness: 600, bounceDamping: 20 }}\n                                dragPropagation\n                                dragConstraints={{ top: 0, bottom: 0 }}\n                                transition={{ duration: 0.15, ease: 'easeInOut' }}\n                                onDragEnd={(_, { offset, velocity }) =>\n                                    (offset.y > screen.availHeight * 0.25 || velocity.y > 100) &&\n                                    state.close()\n                                }\n                            >\n                                <div className='w-full h-8 touch-none py-2'>\n                                    <div className='mx-auto w-12 h-1.5 rounded-full bg-muted' />\n                                </div>\n                                <RACMenu\n                                    aria-label='Menu'\n                                    className='grid grid-cols-[auto_1fr_auto] max-h-[calc(var(--visual-viewport-height)-10rem)] overflow-auto p-1 outline-hidden'\n                                    {...props}\n                                />\n                            </Modal>\n                        )}\n                    </Overlay>\n                )}\n            </AnimatePresence>\n        )\n    } else {\n        const isSubmenuTrigger = popoverContext?.trigger === 'SubmenuTrigger'\n        const optimalOffset = isSubmenuTrigger ? 0 : 8\n        return (\n            <Popover\n                isOpen={props.isOpen}\n                onOpenChange={props.onOpenChange}\n                shouldFlip={props.shouldFlip}\n                offset={props.offset ?? optimalOffset}\n                placement={props.placement}\n                crossOffset={props.crossOffset}\n                triggerRef={props.triggerRef}\n                arrowBoundaryOffset={props.arrowBoundaryOffset}\n                className={composeRenderProps(className, (className, { isEntering, isExiting }) =>\n                    cn(\n                        'group min-w-40 bg-bg max-w-xs sm:max-w-3xl rounded-lg border bg-clip-padding shadow transition-transform outline-hidden',\n                        isEntering &&\n                            'fade-in animate-in zoom-in-95 placement-left:slide-in-from-right-2 placement-right:slide-in-from-left-2 placement-top:slide-in-from-bottom-2 placement-bottom:slide-in-from-top-2',\n                        isExiting &&\n                            'fade-out animate-out zoom-out-95 placement-left:slide-out-to-right-2 placement-right:slide-out-to-left-2 placement-top:slide-out-to-bottom-2 placement-bottom:slide-out-to-top-2',\n                        className\n                    )\n                )}\n            >\n                <RACMenu\n                    className={cn(\n                        'grid grid-cols-[auto_1fr_auto] max-h-[calc(var(--visual-viewport-height)-10rem)] sm:max-h-[inherit] overflow-auto rounded-lg p-1 outline-hidden',\n                        className\n                    )}\n                    {...props}\n                />\n            </Popover>\n        )\n    }\n}\n\ninterface MenuItemProps extends RACMenuItemProps {\n    isDanger?: boolean\n}\n\nconst MenuItem = ({ className, isDanger = false, children, ...props }: MenuItemProps) => {\n    const textValue = props.textValue || (typeof children === 'string' ? children : undefined)\n    return (\n        <RACMenuItem\n            className={composeRenderProps(\n                className,\n                (className, { isOpen, isFocused, isSelected, isDisabled }) =>\n                    cn(\n                        'group relative grid grid-cols-subgrid col-span-full items-center',\n                        'rounded-md px-2 py-1.5 text-base sm:text-sm outline-hidden select-none',\n                        '**:[svg]:size-4 *:data-[slot=icon]:mr-2',\n                        isDanger\n                            ? 'text-danger **:text-danger focus:bg-danger/10 open:bg-danger/10 open:text-danger focus:text-danger focus:**:text-danger'\n                            : 'text-fg',\n                        isOpen && 'bg-primary/10 text-primary *:[.text-muted-fg]:text-primary',\n                        isFocused && 'bg-primary/10 text-primary',\n                        isSelected &&\n                            '**:data-avatar:hidden **:data-avatar:*:hidden **:data-[slot=icon]:hidden',\n                        isDisabled && 'pointer-events-none opacity-50',\n                        className\n                    )\n            )}\n            textValue={textValue}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {values.isSelected && <IconCheck className='mr-2 size-4' data-slot='checked' />}\n                    {typeof children === 'function' ? children(values) : children}\n                    {values.hasSubmenu && (\n                        <IconChevronRight data-slot='chevron' className='ml-auto size-4' />\n                    )}\n                </>\n            )}\n        </RACMenuItem>\n    )\n}\n\nconst MenuHeader = ({ className, ...props }: React.ComponentProps<typeof Header>) => (\n    <Header\n        className={cn(\n            'touch-none col-span-full px-2.5 py-2 text-base font-semibold sm:text-sm -mx-1 mb-1 border-b sm:px-3 sm:pb-2.5',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst MenuSection = <T extends object>({\n    className,\n    ...props\n}: MenuSectionProps<T> & { title?: string }) => {\n    return (\n        <RACMenuSection\n            className={cn('col-span-full grid grid-cols-[auto_1fr] mt-2', className)}\n            {...props}\n        >\n            {'title' in props && (\n                <Header className='text-muted-fg text-xs col-span-full px-2 py-1 pointer-events-none'>\n                    {props.title}\n                </Header>\n            )}\n            <Collection items={props.items}>{props.children}</Collection>\n        </RACMenuSection>\n    )\n}\n\ninterface DropdownItemDetailProps extends TextProps {\n    label?: TextProps['children']\n    description?: TextProps['children']\n}\n\nconst MenuDetails = ({ label, description, ...props }: DropdownItemDetailProps) => {\n    const { children, title, ...restProps } = props\n\n    return (\n        <div data-slot='item-details' className='col-start-2 flex flex-col gap-y-1' {...restProps}>\n            {label && (\n                <Text slot='label' className='font-medium sm:text-sm'>\n                    {label}\n                </Text>\n            )}\n            {description && (\n                <Text slot='description' className='text-muted-fg text-xs' {...restProps}>\n                    {description}\n                </Text>\n            )}\n            {!title && children}\n        </div>\n    )\n}\n\ninterface MenuLabelProps extends TextProps {\n    ref?: React.Ref<HTMLDivElement>\n}\n\nconst MenuLabel = ({ className, ref, ...props }: MenuLabelProps) => (\n    <Text slot='label' ref={ref} className={cn('col-start-2', className)} {...props} />\n)\n\nconst MenuSeparator = ({ className, ...props }: SeparatorProps) => (\n    <Separator\n        orientation='horizontal'\n        className={cn('bg-muted col-span-full -mx-1 my-1 h-px', className)}\n        {...props}\n    />\n)\n\nMenu.Trigger = Button\nMenu.Submenu = SubmenuTrigger\nMenu.Item = MenuItem\nMenu.Content = MenuContent\nMenu.Header = MenuHeader\nMenu.Section = MenuSection\nMenu.Details = MenuDetails\nMenu.Label = MenuLabel\nMenu.Separator = MenuSeparator\n\nexport { Menu }\n"
  },
  "range-calendar": {
    "component": "@/components/ui/range-calendar",
    "raw": "'use client'\n\nimport type {\n    DateValue,\n    RangeCalendarProps as RangeCalendarPrimitiveProps\n} from 'react-aria-components'\nimport {\n    CalendarCell,\n    CalendarGrid,\n    CalendarGridBody,\n    FieldError,\n    RangeCalendar as RangeCalendarPrimitive\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { getLocalTimeZone, today } from '@internationalized/date'\n\nimport { Calendar } from './calendar'\n\ninterface RangeCalendarProps<T extends DateValue> extends RangeCalendarPrimitiveProps<T> {\n    errorMessage?: string\n}\n\nconst RangeCalendar = <T extends DateValue>({\n    errorMessage,\n    visibleDuration = { months: 1 },\n    ...props\n}: RangeCalendarProps<T>) => {\n    const now = today(getLocalTimeZone())\n    return (\n        <RangeCalendarPrimitive visibleDuration={visibleDuration} {...props}>\n            <Calendar.Header isRange />\n            <div className='flex gap-2 overflow-auto'>\n                {Array.from({ length: visibleDuration?.months ?? 1 }).map((_, index) => {\n                    const id = index + 1\n                    return (\n                        <CalendarGrid\n                            key={index}\n                            offset={id >= 2 ? { months: id - 1 } : undefined}\n                            className='**:[td]:px-0 **:[td]:py-[1.5px] **:[td]:first:*:rounded-s-lg **:[td]:last:*:rounded-e-lg w-full'\n                        >\n                            <Calendar.GridHeader />\n                            <CalendarGridBody>\n                                {(date) => (\n                                    <CalendarCell\n                                        date={date}\n                                        className={({\n                                            isSelected,\n                                            isSelectionStart,\n                                            isSelectionEnd,\n                                            isOutsideMonth,\n                                            isInvalid,\n                                            isDisabled\n                                        }) =>\n                                            cn([\n                                                'shrink-0 relative size-10 cursor-default outline-hidden',\n                                                '[td:first-child_&]:rounded-s-lg [td:last-child_&]:rounded-e-lg',\n                                                isSelectionStart && 'rounded-s-lg',\n                                                isSelectionEnd && 'rounded-e-lg',\n                                                isOutsideMonth && 'text-muted-fg',\n                                                isSelected &&\n                                                    `${isInvalid ? 'bg-danger/15 text-danger' : 'bg-primary/10 text-primary'}`,\n                                                isDisabled && 'opacity-50 pointer-events-none',\n                                                date.compare(now) === 0 &&\n                                                    'after:-translate-x-1/2 after:pointer-events-none after:absolute after:start-1/2 after:bottom-1.5 after:z-10 after:size-1 after:rounded-full after:bg-primary selected:after:bg-muted-fg'\n                                            ])\n                                        }\n                                    >\n                                        {({\n                                            formattedDate,\n                                            isSelected,\n                                            isHovered,\n                                            isSelectionStart,\n                                            isSelectionEnd,\n                                            isDisabled\n                                        }) => (\n                                            <span\n                                                className={cn(\n                                                    'flex size-full items-center justify-center rounded-lg tabular-nums',\n                                                    isHovered && 'bg-primary/10 text-primary',\n                                                    isSelected &&\n                                                        (isSelectionStart || isSelectionEnd) &&\n                                                        'bg-primary text-primary-fg',\n                                                    isDisabled && 'opacity-50'\n                                                )}\n                                            >\n                                                {formattedDate}\n                                            </span>\n                                        )}\n                                    </CalendarCell>\n                                )}\n                            </CalendarGridBody>\n                        </CalendarGrid>\n                    )\n                })}\n            </div>\n            <FieldError className='text-danger text-sm/5 px-2'>{errorMessage}</FieldError>\n        </RangeCalendarPrimitive>\n    )\n}\n\nexport { RangeCalendar }\n"
  },
  "rich-text-field": {
    "component": "@/components/ui/rich-text-field",
    "raw": "'use client'\n\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport {\n    IconBold,\n    IconHeading1,\n    IconHeading2,\n    IconHeading3,\n    IconItalic,\n    IconList,\n    IconListOrdered,\n    IconParagraph,\n    IconRedo,\n    IconStrikethrough,\n    IconSubscript,\n    IconSuperscript,\n    IconTextQuote,\n    IconUnderline,\n    IconUndo\n} from 'hq-icons'\nimport {\n    $createParagraphNode,\n    $getRoot,\n    $getSelection,\n    $insertNodes,\n    $isRangeSelection,\n    $isRootOrShadowRoot,\n    CAN_REDO_COMMAND,\n    CAN_UNDO_COMMAND,\n    COMMAND_PRIORITY_CRITICAL,\n    FORMAT_TEXT_COMMAND,\n    REDO_COMMAND,\n    SELECTION_CHANGE_COMMAND,\n    UNDO_COMMAND\n} from 'lexical'\nimport { TextField, type ValidationResult } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { CodeHighlightNode, CodeNode } from '@lexical/code'\nimport { $generateHtmlFromNodes, $generateNodesFromDOM } from '@lexical/html'\nimport { AutoLinkNode, LinkNode } from '@lexical/link'\nimport {\n    $isListNode,\n    INSERT_ORDERED_LIST_COMMAND,\n    INSERT_UNORDERED_LIST_COMMAND,\n    ListItemNode,\n    ListNode,\n    REMOVE_LIST_COMMAND\n} from '@lexical/list'\nimport { $convertToMarkdownString, TRANSFORMERS } from '@lexical/markdown'\nimport { type InitialConfigType, LexicalComposer } from '@lexical/react/LexicalComposer'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable'\nimport { LexicalErrorBoundary } from '@lexical/react/LexicalErrorBoundary'\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin'\nimport { LinkPlugin } from '@lexical/react/LexicalLinkPlugin'\nimport { ListPlugin } from '@lexical/react/LexicalListPlugin'\nimport { MarkdownShortcutPlugin } from '@lexical/react/LexicalMarkdownShortcutPlugin'\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin'\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin'\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin'\nimport type { HeadingTagType } from '@lexical/rich-text'\nimport {\n    $createHeadingNode,\n    $createQuoteNode,\n    $isHeadingNode,\n    HeadingNode,\n    QuoteNode\n} from '@lexical/rich-text'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $findMatchingParent, $getNearestNodeOfType, mergeRegister } from '@lexical/utils'\n\nimport { Button } from './button'\nimport { Description, FieldError, Label } from './field'\nimport { Menu } from './menu'\nimport { Toolbar } from './toolbar'\n\ninterface RichTextFieldProps {\n    className?: string\n    value?: string\n    onChange?: (value: string) => void\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    isDisabled?: boolean\n    returnType?: 'markdown' | 'html'\n    hideToolbar?: boolean\n    as?: 'rich-text' | 'plain-text'\n}\n\nconst RichTextField = ({\n    className,\n    label,\n    description,\n    errorMessage,\n    isDisabled = false,\n    returnType = 'html',\n    hideToolbar = false,\n    as = 'rich-text',\n    ...props\n}: RichTextFieldProps) => {\n    const config: InitialConfigType = {\n        editable: !isDisabled,\n        namespace: 'rich-text-field',\n        theme: {\n            text: {\n                strikethrough: 'line-through',\n                underline: 'underline'\n            }\n        },\n        nodes: [\n            HeadingNode,\n            ListNode,\n            ListItemNode,\n            QuoteNode,\n            CodeNode,\n            CodeHighlightNode,\n            AutoLinkNode,\n            LinkNode\n        ],\n        onError: (error) => {\n            console.error(error)\n        }\n    }\n\n    return (\n        <LexicalComposer initialConfig={config}>\n            <div>\n                <div className='relative'>\n                    {as === 'rich-text' ? (\n                        <RichTextPlugin\n                            placeholder={\n                                <p className='text-muted-fg absolute bottom-2 left-3'>\n                                    Write something...\n                                </p>\n                            }\n                            contentEditable={\n                                <TextField\n                                    aria-label='Editor'\n                                    id='parent'\n                                    className={cn('group relative flex flex-col gap-1', className)}\n                                >\n                                    {label && <Label>{label}</Label>}\n\n                                    {!hideToolbar && <ToolbarPlugin />}\n                                    <ContentEditable\n                                        autoFocus\n                                        aria-disabled={isDisabled}\n                                        disabled={isDisabled}\n                                        className={cn(\n                                            'bg-bg min-h-32 w-full min-w-0 rounded-lg border px-2.5 py-2 text-base transition outline-none focus:outline-none sm:text-sm',\n                                            'focus:border-primary/70 focus:ring-primary/20 focus:ring-4',\n                                            'invalid:border-danger invalid:ring-danger/20 invalid:ring-4',\n                                            isDisabled ? 'opacity-50' : 'hover:border-primary/60 '\n                                        )}\n                                    />\n                                    {description && <Description>{description}</Description>}\n                                    <FieldError>{errorMessage}</FieldError>\n                                </TextField>\n                            }\n                            ErrorBoundary={LexicalErrorBoundary}\n                        />\n                    ) : (\n                        <PlainTextPlugin\n                            placeholder={\n                                <p className='text-muted-fg absolute bottom-2 left-3'>\n                                    Write something...\n                                </p>\n                            }\n                            contentEditable={\n                                <TextField\n                                    aria-label='Editor'\n                                    id='parent'\n                                    className={cn('group relative flex flex-col gap-1', className)}\n                                >\n                                    {label && <Label>{label}</Label>}\n\n                                    {!hideToolbar && <Toolbar />}\n                                    <ContentEditable\n                                        autoFocus\n                                        aria-disabled={isDisabled}\n                                        disabled={isDisabled}\n                                        className={cn(\n                                            'bg-bg min-h-32 w-full min-w-0 rounded-lg border px-2.5 py-2 text-base shadow-sm transition outline-none focus:outline-none sm:text-sm',\n                                            'focus:border-primary/70 focus:ring-primary/20 focus:ring-4',\n                                            'invalid:border-danger invalid:ring-danger/20 invalid:ring-4',\n                                            isDisabled ? 'opacity-50' : 'hover:border-primary/60 '\n                                        )}\n                                    />\n                                    {description && <Description>{description}</Description>}\n                                    <FieldError>{errorMessage}</FieldError>\n                                </TextField>\n                            }\n                            ErrorBoundary={LexicalErrorBoundary}\n                        />\n                    )}\n                    <HistoryPlugin />\n                </div>\n                <ListPlugin />\n                <LinkPlugin />\n                {as === 'rich-text' && <MarkdownShortcutPlugin transformers={TRANSFORMERS} />}\n                <OnChange returnType={returnType} value={props.value} onChange={props.onChange} />\n            </div>\n        </LexicalComposer>\n    )\n}\n\ninterface OnChangeProps {\n    value?: string\n    onChange?: (value: string) => void\n    returnType: 'markdown' | 'html'\n}\n\nfunction OnChange({ value, onChange, returnType }: OnChangeProps) {\n    const [editor] = useLexicalComposerContext()\n    const [isFirstRender, setIsFirstRender] = React.useState(true)\n\n    React.useEffect(() => {\n        if (returnType === 'html') {\n            if (!value || !isFirstRender) return\n\n            setIsFirstRender(false)\n            editor.update(() => {\n                const currentHTML = $generateHtmlFromNodes(editor)\n                if (currentHTML !== value) {\n                    $getRoot().clear()\n                    const parser = new DOMParser()\n                    const dom = parser.parseFromString(value, 'text/html')\n                    const nodes = $generateNodesFromDOM(editor, dom)\n                    $insertNodes(nodes)\n                }\n            })\n        }\n    }, [editor, value, isFirstRender, returnType])\n\n    React.useEffect(() => {\n        setIsFirstRender(true)\n    }, [value])\n\n    return (\n        <OnChangePlugin\n            onChange={(editorState) => {\n                editorState.read(() => {\n                    onChange?.(\n                        returnType === 'markdown'\n                            ? $convertToMarkdownString(TRANSFORMERS, undefined, true)\n                            : $generateHtmlFromNodes(editor)\n                    )\n                })\n            }}\n        />\n    )\n}\n\nfunction BlockTypeDropdown({ blockType }: { blockType: string }) {\n    const blockIcons = {\n        h1: <IconHeading1 />,\n        h2: <IconHeading2 />,\n        h3: <IconHeading3 />,\n        paragraph: <IconParagraph />,\n        bullet: <IconList />,\n        number: <IconListOrdered />,\n        quote: <IconTextQuote />\n    }\n    const [editor] = useLexicalComposerContext()\n\n    const formatHeading = (headingLevel: HeadingTagType) => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createHeadingNode(headingLevel))\n        })\n    }\n\n    const formatParagraph = () => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createParagraphNode())\n        })\n    }\n\n    const formatOrderedList = () => {\n        if (blockType !== 'number') {\n            editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined)\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined)\n        }\n    }\n\n    const formatUnorderedList = () => {\n        if (blockType !== 'bullet') {\n            editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined)\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined)\n        }\n    }\n\n    const formatQuote = () => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createQuoteNode())\n        })\n    }\n\n    return (\n        <Menu>\n            <Button isDisabled={!editor.isEditable()} variant='outline' size='icon'>\n                {blockIcons[blockType as keyof typeof blockIcons]}\n            </Button>\n            <Menu.Content selectionMode='single' aria-label='Block type' selectedKeys={[blockType]}>\n                <Menu.Item id='paragraph' onAction={formatParagraph}>\n                    <IconParagraph />\n                    <Menu.Label>Paragraph</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='h1' onAction={() => formatHeading('h1')}>\n                    <IconHeading1 />\n                    <Menu.Label>Heading 1</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='h2' onAction={() => formatHeading('h2')}>\n                    <IconHeading2 />\n                    <Menu.Label>Heading 2</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='h3' onAction={() => formatHeading('h3')}>\n                    <IconHeading3 />\n                    <Menu.Label>Heading 3</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='bullet' onAction={formatUnorderedList}>\n                    <IconList />\n                    <Menu.Label>Unordered List</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='number' onAction={formatOrderedList}>\n                    <IconListOrdered />\n                    <Menu.Label>Ordered List</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='quote' onAction={formatQuote}>\n                    <IconTextQuote />\n                    <Menu.Label>Quote</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nexport function ToolbarPlugin() {\n    const [editor] = useLexicalComposerContext()\n    const [formatText, setFormatText] = React.useState({\n        bold: false,\n        italic: false,\n        underline: false,\n        strikethrough: false,\n        subscript: false,\n        superscript: false\n    })\n    const [blockType, setBlockType] = useState<string>('paragraph')\n\n    const [canUndo, setCanUndo] = useState<boolean>(false)\n    const [canRedo, setCanRedo] = useState<boolean>(false)\n\n    const $updateToolbar = useCallback(() => {\n        const selection = $getSelection()\n        if ($isRangeSelection(selection)) {\n            setFormatText({\n                bold: selection.hasFormat('bold'),\n                italic: selection.hasFormat('italic'),\n                underline: selection.hasFormat('underline'),\n                strikethrough: selection.hasFormat('strikethrough'),\n                subscript: selection.hasFormat('subscript'),\n                superscript: selection.hasFormat('superscript')\n            })\n            const anchorNode = selection.anchor.getNode()\n\n            let element =\n                anchorNode.getKey() === 'root'\n                    ? anchorNode\n                    : $findMatchingParent(anchorNode, (e) => {\n                          const parent = e.getParent()\n                          return parent !== null && $isRootOrShadowRoot(parent)\n                      })\n\n            if (element === null) {\n                element = anchorNode.getTopLevelElementOrThrow()\n            }\n\n            const elementDOM = editor.getElementByKey(element.getKey())\n\n            if (elementDOM !== null) {\n                if ($isListNode(element)) {\n                    const parentList = $getNearestNodeOfType<ListNode>(anchorNode, ListNode)\n                    const type = parentList ? parentList.getListType() : element.getListType()\n                    setBlockType(type)\n                } else {\n                    const type = $isHeadingNode(element) ? element.getTag() : element.getType()\n                    setBlockType(type)\n                }\n            }\n        }\n    }, [editor])\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerCommand(\n                SELECTION_CHANGE_COMMAND,\n                () => {\n                    $updateToolbar()\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            ),\n            editor.registerUpdateListener(({ editorState }) => {\n                editorState.read(() => {\n                    $updateToolbar()\n                })\n            })\n        )\n    }, [editor, $updateToolbar])\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerCommand(\n                CAN_UNDO_COMMAND,\n                (payload) => {\n                    setCanUndo(payload)\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            ),\n            editor.registerCommand(\n                CAN_REDO_COMMAND,\n                (payload) => {\n                    setCanRedo(payload)\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            )\n        )\n    }, [editor])\n\n    return (\n        <Toolbar className='mb-2' aria-label='Toolbar'>\n            <Toolbar.Group aria-label='Formats'>\n                <BlockTypeDropdown blockType={blockType} />\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.bold}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'bold')\n                    }}\n                >\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.italic}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic')\n                    }}\n                >\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.underline}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'underline')\n                    }}\n                >\n                    <IconUnderline />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.strikethrough}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'strikethrough')\n                    }}\n                >\n                    <IconStrikethrough />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.subscript}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'subscript')\n                    }}\n                >\n                    <IconSubscript />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.superscript}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'superscript')\n                    }}\n                >\n                    <IconSuperscript />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Actions'>\n                <Toolbar.Item\n                    size='icon'\n                    isDisabled={!canUndo || !editor.isEditable()}\n                    isSelected={false}\n                    onPress={() => editor.dispatchCommand(UNDO_COMMAND, undefined)}\n                >\n                    <IconUndo />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    size='icon'\n                    isDisabled={!canRedo || !editor.isEditable()}\n                    isSelected={false}\n                    onPress={() => editor.dispatchCommand(REDO_COMMAND, undefined)}\n                >\n                    <IconRedo />\n                </Toolbar.Item>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n\nexport { RichTextField }\n"
  },
  "toast": {
    "component": "@/components/ui/toast",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleAlert, IconCircleCheck, IconInfo, IconTriangleAlert, IconX } from 'hq-icons'\nimport { motion, useAnimation } from 'motion/react'\nimport {\n    Button,\n    ButtonProps,\n    Text,\n    UNSTABLE_ToastContent as ToastContent,\n    UNSTABLE_Toast as Toaster,\n    ToastOptions,\n    UNSTABLE_ToastQueue as ToastQueue,\n    UNSTABLE_ToastRegion as ToastRegion\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ninterface ToastContent {\n    title: string\n    description?: string\n    action?: () => void\n    actionLabel?: React.ReactNode\n    altAction?: () => void\n    altActionLabel?: React.ReactNode\n    type: 'default' | 'success' | 'error' | 'info' | 'warning'\n}\n\nconst queue = new ToastQueue<ToastContent>({\n    wrapUpdate(fn) {\n        if ('startViewTransition' in document) {\n            document.startViewTransition(() => fn())\n        } else fn()\n    },\n    maxVisibleToasts: 5\n})\n\nconst ToastProvider = () => {\n    const [isHovered, setIsHovered] = React.useState(false)\n    return (\n        <ToastRegion\n            className='fixed w-full h-fit sm:w-fit flex flex-col-reverse items-center sm:items-end p-4 gap-3 sm:bottom-2 sm:right-2 top-0 sm:top-auto'\n            queue={queue}\n        >\n            {({ toast }) => (\n                <Toaster\n                    key={toast.key}\n                    toast={toast}\n                    className={cn('sm:min-w-xs will-change-transform sm:w-fit')}\n                >\n                    <motion.div\n                        onMouseEnter={() => setIsHovered(true)}\n                        onMouseLeave={() => setIsHovered(false)}\n                        key={toast.key}\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        className={cn(\n                            'flex flex-col backdrop-blur-lg p-4 gap-2 rounded-lg shadow-[0_3px_10px_rgb(0,0,0,0.3)] border',\n                            {\n                                'border-success/20 text-success bg-success/10':\n                                    toast.content.type === 'success',\n                                'border-danger/20 bg-danger/5 text-danger':\n                                    toast.content.type === 'error',\n                                'border-primary/30 text-primary bg-primary/10':\n                                    toast.content.type === 'info',\n                                'border-warning/40 bg-warning/5 text-warning':\n                                    toast.content.type === 'warning',\n                                'bg-bg text-fg': toast.content.type === 'default'\n                            }\n                        )}\n                    >\n                        <div\n                            className={cn('flex items-start gap-2', {\n                                'items-center': !toast.content.description\n                            })}\n                        >\n                            {toast.content.type === 'success' ? (\n                                <IconCircleCheck className='shrink-0' />\n                            ) : toast.content.type === 'error' ? (\n                                <IconCircleAlert className='shrink-0' />\n                            ) : toast.content.type === 'info' ? (\n                                <IconInfo className='shrink-0' />\n                            ) : toast.content.type === 'warning' ? (\n                                <IconTriangleAlert className='shrink-0' />\n                            ) : null}\n                            <ToastContent className='w-full flex flex-col'>\n                                <Text slot='title' className='font-medium'>\n                                    {toast.content.title}\n                                </Text>\n                                {toast.content.description && (\n                                    <Text slot='description' className='text-sm'>\n                                        {toast.content.description}\n                                    </Text>\n                                )}\n                            </ToastContent>\n                            <TimeoutButton paused={isHovered} timeout={toast.timeout} slot='close'>\n                                <IconX />\n                            </TimeoutButton>\n                        </div>\n                        {(toast.content.action || toast.content.altAction) && (\n                            <div className='flex items-center gap-2 justify-start'>\n                                {toast.content.action && (\n                                    <Button\n                                        onPress={toast.content.action}\n                                        slot='close'\n                                        className={({ isHovered, isPressed, isFocusVisible }) =>\n                                            cn(\n                                                'outline-hidden cursor-pointer flex items-center border justify-center gap-x-1.5 rounded-lg px-2 py-1 text-sm *:[svg]:size-3',\n                                                isHovered && 'brightness-80',\n                                                isPressed && 'brightness-90',\n                                                isFocusVisible && 'ring-4 ring-primary/20',\n                                                {\n                                                    'border-success text-success-fg bg-success':\n                                                        toast.content.type === 'success',\n                                                    'border-danger text-danger-fg bg-danger':\n                                                        toast.content.type === 'error',\n                                                    'border-primary text-primary-fg bg-primary':\n                                                        toast.content.type === 'info' ||\n                                                        toast.content.type === 'default',\n                                                    'border-warning text-warning-fg bg-warning':\n                                                        toast.content.type === 'warning'\n                                                }\n                                            )\n                                        }\n                                    >\n                                        {toast.content.actionLabel || 'Action'}\n                                    </Button>\n                                )}\n                                {toast.content.altAction && (\n                                    <Button\n                                        onPress={toast.content.altAction}\n                                        slot='close'\n                                        className={({ isHovered, isPressed, isFocusVisible }) =>\n                                            cn(\n                                                'outline-hidden cursor-pointer flex items-center border justify-center gap-x-1.5 rounded-lg bg-bg px-2 py-1 text-sm text-fg *:[svg]:size-3',\n                                                isHovered && 'bg-muted/40',\n                                                isPressed && 'bg-muted/60',\n                                                isFocusVisible &&\n                                                    'ring-4 ring-primary/20 border-primary'\n                                            )\n                                        }\n                                    >\n                                        {toast.content.altActionLabel || 'Cancel'}\n                                    </Button>\n                                )}\n                            </div>\n                        )}\n                    </motion.div>\n                </Toaster>\n            )}\n        </ToastRegion>\n    )\n}\n\ninterface TimeoutButtonProps extends ButtonProps {\n    timeout: number | undefined\n    paused?: boolean\n    onComplete?: () => void\n}\n\nconst TimeoutButton = ({ timeout, onComplete, paused, children, ...props }: TimeoutButtonProps) => {\n    const controls = useAnimation()\n    const startTimeRef = React.useRef<number | null>(null)\n    const elapsedRef = React.useRef<number>(0)\n    const size = 28\n    const stroke = 2\n    const radius = (size - stroke) / 2\n    const circumference = 2 * Math.PI * radius\n\n    const animate = (duration: number) => {\n        controls\n            .start({\n                strokeDashoffset: 0,\n                transition: { duration, ease: 'linear' }\n            })\n            .then(() => {\n                onComplete?.()\n            })\n    }\n\n    React.useEffect(() => {\n        if (timeout === undefined) return\n        startTimeRef.current = performance.now()\n        animate(timeout / 1000)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [timeout])\n\n    React.useEffect(() => {\n        if (timeout === undefined) return\n\n        if (paused) {\n            controls.stop()\n            if (startTimeRef.current) {\n                elapsedRef.current += performance.now() - startTimeRef.current\n            }\n        } else {\n            const remaining = timeout - elapsedRef.current\n            if (remaining > 0) {\n                startTimeRef.current = performance.now()\n                animate(remaining / 1000)\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [paused])\n\n    return (\n        <Button\n            className={({ isHovered, isPressed, isFocusVisible }) =>\n                cn(\n                    'relative shrink-0 outline-hidden ml-auto border size-7 rounded-full inline-flex items-center justify-center',\n                    isHovered && 'bg-muted/40',\n                    isPressed && 'bg-muted/60',\n                    isFocusVisible && 'ring-4 ring-primary/20 border-primary'\n                )\n            }\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof children === 'function' ? children(values) : children}\n                    {timeout !== undefined && (\n                        <svg\n                            className='absolute top-0 left-0 size-full'\n                            viewBox={`0 0 ${size} ${size}`}\n                        >\n                            <motion.circle\n                                stroke='#3b82f6'\n                                fill='transparent'\n                                strokeWidth={stroke}\n                                strokeDasharray={circumference}\n                                strokeDashoffset={circumference}\n                                animate={controls}\n                                r={radius}\n                                cx={size / 2}\n                                cy={size / 2}\n                            />\n                        </svg>\n                    )}\n                </>\n            )}\n        </Button>\n    )\n}\n\nconst toast = (\n    body: string,\n    content?: Omit<ToastContent, 'type' | 'title'>,\n    options?: ToastOptions\n) => queue.add({ ...content, title: body, type: 'default' }, options)\n\ntoast.success = (\n    body: string,\n    content?: Omit<ToastContent, 'type' | 'title'>,\n    options?: ToastOptions\n) => queue.add({ ...content, title: body, type: 'success' }, options)\n\ntoast.error = (\n    body: string,\n    content?: Omit<ToastContent, 'type' | 'title'>,\n    options?: ToastOptions\n) => queue.add({ ...content, title: body, type: 'error' }, options)\n\ntoast.info = (\n    body: string,\n    content?: Omit<ToastContent, 'type' | 'title'>,\n    options?: ToastOptions\n) => queue.add({ ...content, title: body, type: 'info' }, options)\n\ntoast.warning = (\n    body: string,\n    content?: Omit<ToastContent, 'type' | 'title'>,\n    options?: ToastOptions\n) => queue.add({ ...content, title: body, type: 'warning' }, options)\n\nexport { toast, ToastProvider }\n"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport type { TooltipProps as RACTooltipProps } from 'react-aria-components'\nimport {\n    composeRenderProps,\n    OverlayArrow,\n    Pressable,\n    Tooltip as RACTooltip,\n    TooltipTrigger as RACTooltipTrigger\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ntype TooltipProps = React.ComponentProps<typeof RACTooltipTrigger>\nconst Tooltip = (props: TooltipProps) => <RACTooltipTrigger {...props} />\n\ninterface TooltipContentProps extends Omit<RACTooltipProps, 'children'> {\n    showArrow?: boolean\n    children: React.ReactNode\n    isInverse?: boolean\n}\n\nconst TooltipContent = ({\n    offset = 10,\n    showArrow = true,\n    isInverse = false,\n    children,\n    ...props\n}: TooltipContentProps) => {\n    return (\n        <RACTooltip\n            {...props}\n            offset={offset}\n            className={composeRenderProps(\n                props.className,\n                (className, { isEntering, isExiting, placement }) =>\n                    cn(\n                        'group rounded-lg border px-2.5 py-1.5 text-sm will-change-transform',\n                        isInverse ? 'bg-fg text-bg' : 'bg-bg text-fg',\n                        isEntering && `fade-in animate-in`,\n                        isExiting && 'fade-in direction-reverse animate-in',\n                        placement === 'top' &&\n                            `${isEntering ? 'slide-in-from-bottom-1' : 'slide-out-to-bottom-1'}`,\n                        placement === 'right' &&\n                            `${isEntering ? 'slide-in-from-left-1' : 'slide-out-to-left-1'}`,\n                        placement === 'bottom' &&\n                            `${isEntering ? 'slide-in-from-top-1' : 'slide-out-to-top-1'}`,\n                        placement === 'left' &&\n                            `${isEntering ? 'slide-in-from-right-1' : 'slide-out-to-right-1'}`,\n                        className\n                    )\n            )}\n        >\n            {showArrow && (\n                <OverlayArrow className='group'>\n                    <svg\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className={cn(\n                            'block group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180',\n                            isInverse ? 'fill-fg' : 'fill-bg stroke-border'\n                        )}\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            {children}\n        </RACTooltip>\n    )\n}\n\nconst TooltipTrigger = (props: React.HTMLAttributes<HTMLDivElement>) => (\n    <Pressable>\n        <div style={{ cursor: 'default' }} {...props} />\n    </Pressable>\n)\n\nTooltip.Trigger = TooltipTrigger\nTooltip.Content = TooltipContent\n\nexport { Tooltip }\n"
  },
  "toggle": {
    "component": "@/components/ui/toggle",
    "raw": "'use client'\n\nimport { createContext, use } from 'react'\n\nimport type { ToggleButtonGroupProps, ToggleButtonProps } from 'react-aria-components'\nimport { composeRenderProps, ToggleButton, ToggleButtonGroup } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\ntype ToggleGroupContextProps = {\n    isDisabled?: boolean\n    gap?: 0 | 1 | 2 | 3 | 4\n    variant?: 'solid' | 'outline' | 'ghost'\n    orientation?: 'horizontal' | 'vertical'\n    size?: 'sm' | 'md' | 'lg' | 'icon'\n}\n\nconst ToggleGroupContext = createContext<ToggleGroupContextProps>({\n    gap: 1,\n    variant: 'outline',\n    orientation: 'horizontal',\n    size: 'md'\n})\n\ntype BaseToggleGroupProps = Omit<ToggleGroupContextProps, 'gap' | 'variant'>\ninterface ToggleGroupPropsNonZeroGap extends BaseToggleGroupProps {\n    gap?: Exclude<ToggleGroupContextProps['gap'], 0>\n    variant?: ToggleGroupContextProps['variant']\n}\n\ninterface ToggleGroupPropsGapZero extends BaseToggleGroupProps {\n    gap?: 0\n    variant?: ToggleGroupContextProps['variant']\n}\n\ntype ToggleGroupProps = ToggleButtonGroupProps &\n    (ToggleGroupPropsGapZero | ToggleGroupPropsNonZeroGap) & {\n        ref?: React.RefObject<HTMLDivElement>\n    }\n\nconst toggleGroupStyles = tv({\n    variants: {\n        orientation: {\n            horizontal: 'flex flex-row [-ms-overflow-style:none]',\n            vertical: 'grid items-start'\n        },\n        gap: {\n            0: 'gap-0 rounded-lg *:[button]:rounded-none',\n            1: 'gap-1',\n            2: 'gap-2',\n            3: 'gap-3',\n            4: 'gap-4'\n        }\n    },\n    defaultVariants: {\n        orientation: 'horizontal',\n        gap: 0\n    },\n    compoundVariants: [\n        {\n            gap: 0,\n            orientation: 'vertical',\n            className:\n                '*:[button]:-mt-px *:[button]:first:rounded-t-lg *:[button]:last:rounded-b-lg'\n        },\n        {\n            gap: 0,\n            orientation: 'horizontal',\n            className:\n                '*:[button]:-mr-px *:[button]:first:rounded-s-lg *:[button]:last:rounded-e-lg'\n        }\n    ]\n})\n\nconst ToggleGroup = ({\n    className,\n    ref,\n    variant,\n    gap,\n    size,\n    orientation,\n    ...props\n}: ToggleGroupProps) => {\n    return (\n        <ToggleGroupContext.Provider\n            value={{ variant, gap, orientation, size, isDisabled: props.isDisabled }}\n        >\n            <ToggleButtonGroup\n                ref={ref}\n                orientation={orientation}\n                className={composeRenderProps(className, (className) =>\n                    cn(\n                        toggleGroupStyles({\n                            gap,\n                            orientation\n                        }),\n                        className\n                    )\n                )}\n                {...props}\n            />\n        </ToggleGroupContext.Provider>\n    )\n}\n\nconst toggleStyles = tv({\n    base: [\n        'inline-flex cursor-pointer items-center gap-x-2 outline-hidden rounded-lg border transition sm:text-sm',\n        '*:svg:-mx-0.5 *:svg:my-1 *:svg:size-4 *:svg:shrink-0',\n        'focus-visible:ring-4 ring-primary/20',\n        'disabled:cursor-default disabled:opacity-50'\n    ],\n    variants: {\n        variant: {\n            solid: 'hover:bg-primary/40 pressed:bg-primary/50 selected:bg-primary selected:text-primary-fg',\n            ghost: 'text-fg hover:bg-primary/40 pressed:bg-primary/50 border-transparent bg-transparent selected:bg-primary selected:text-primary-fg',\n            outline:\n                'hover:bg-primary/40 pressed:bg-primary/50 selected:bg-primary selected:text-primary-fg'\n        },\n        noGap: { true: '' },\n        orientation: {\n            horizontal: 'inline-flex justify-center',\n            vertical: 'flex'\n        },\n        size: {\n            sm: 'h-9 px-3.5',\n            md: 'h-10 px-4',\n            lg: '*:svg:size-4.5 h-11 px-5 sm:text-base',\n            icon: 'size-10 shrink-0'\n        },\n        shape: {\n            square: 'rounded-lg',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'solid',\n        size: 'sm',\n        shape: 'square'\n    },\n    compoundVariants: [\n        {\n            noGap: true,\n            orientation: 'vertical',\n            className: 'w-full'\n        }\n    ]\n})\n\ninterface ToggleProps extends ToggleButtonProps, VariantProps<typeof toggleStyles> {\n    ref?: React.RefObject<HTMLButtonElement>\n}\n\nconst Toggle = ({ className, variant, ref, ...props }: ToggleProps) => {\n    const {\n        variant: groupvariant,\n        orientation,\n        gap,\n        size,\n        isDisabled: isGroupDisabled\n    } = use(ToggleGroupContext)\n    return (\n        <ToggleButton\n            ref={ref}\n            isDisabled={props.isDisabled ?? isGroupDisabled}\n            className={composeRenderProps(className, (classname) =>\n                cn(\n                    toggleStyles({\n                        variant: variant ?? groupvariant,\n                        size: props.size ?? size,\n                        orientation,\n                        shape: props.shape,\n                        noGap: gap === 0\n                    }),\n                    classname\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nToggle.Group = ToggleGroup\n\nexport { Toggle }\nexport type { ToggleGroupProps, ToggleProps }\n"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconX } from 'hq-icons'\nimport type {\n    TagGroupProps as RACTagGroupProps,\n    TagListProps,\n    TagProps\n} from 'react-aria-components'\nimport {\n    Button,\n    composeRenderProps,\n    Tag as RACTag,\n    TagGroup as RACTagGroup,\n    TagList\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { badgeStyles } from './badge'\nimport { Description, Label } from './field'\n\ntype TagGroupStyles = {\n    variant: keyof Omit<typeof badgeStyles.variants.variant, 'outline'>\n    shape: keyof typeof badgeStyles.variants.shape\n}\n\nconst TagGroupContext = React.createContext<TagGroupStyles>({\n    variant: 'primary',\n    shape: 'square'\n})\n\ninterface TagGroupProps extends Omit<RACTagGroupProps, 'children'> {\n    variant?: TagGroupStyles['variant']\n    shape?: TagGroupStyles['shape']\n    errorMessage?: string\n    label?: string\n    description?: string\n    ref?: React.RefObject<HTMLDivElement>\n    className?: string\n}\n\nconst TagGroup = <T extends object>({\n    label,\n    description,\n    items,\n    className,\n    ref,\n    children,\n    renderEmptyState,\n    ...props\n}: TagGroupProps & TagListProps<T>) => {\n    return (\n        <RACTagGroup ref={ref} className={cn('flex flex-col flex-wrap', className)} {...props}>\n            {label && <Label className='mb-1'>{label}</Label>}\n            <TagGroupContext.Provider\n                value={{\n                    variant: props.variant || 'primary',\n                    shape: props.shape || 'square'\n                }}\n            >\n                <TagList\n                    items={items}\n                    renderEmptyState={renderEmptyState}\n                    className='flex flex-wrap gap-2 *:data-badge:bg-primary'\n                >\n                    {children}\n                </TagList>\n            </TagGroupContext.Provider>\n            {description && <Description>{description}</Description>}\n        </RACTagGroup>\n    )\n}\n\nconst tagStyles = tv({\n    extend: badgeStyles,\n    variants: {\n        isSelected: { false: '!bg-(--bg)/10 !text-(--bg)' },\n        isFocusVisible: {\n            true: 'ring-primary ring-2 ring-offset-2 outline-0'\n        },\n        isDisabled: { true: 'cursor-default opacity-50', false: 'cursor-pointer' },\n        allowsRemoving: { true: 'pr-1' }\n    }\n})\n\nconst Tag = (props: TagProps) => {\n    const textValue = typeof props.children === 'string' ? props.children : undefined\n    const groupContext = React.useContext(TagGroupContext)\n\n    return (\n        <RACTag\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(props.className, (className, renderProps) =>\n                tagStyles({\n                    ...renderProps,\n                    variant: groupContext.variant,\n                    shape: groupContext.shape,\n                    className\n                })\n            )}\n        >\n            {({ allowsRemoving }) => {\n                return (\n                    <>\n                        {props.children as React.ReactNode}\n                        {allowsRemoving && (\n                            <Button\n                                slot='remove'\n                                className='focus-visible:ring-primary -mr-0.5 grid size-3.5 place-content-center rounded-lg focus-visible:ring-1 focus:outline-none'\n                            >\n                                <IconX className='size-3 shrink-0' />\n                            </Button>\n                        )}\n                    </>\n                )\n            }}\n        </RACTag>\n    )\n}\n\nTag.Group = TagGroup\nTag.List = TagList\n\nexport { Tag }\nexport type { TagGroupProps, TagGroupStyles }\n"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronRight, IconDot, IconMinus, IconSlash } from 'hq-icons'\nimport type { BreadcrumbProps, BreadcrumbsProps, LinkProps } from 'react-aria-components'\nimport {\n    Breadcrumb,\n    composeRenderProps,\n    Link,\n    Breadcrumbs as RACBreadcrumbs\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ntype BreadcrumbsContextProps = { separator?: 'chevron' | 'slash' | 'dash' | 'dot' }\n\nconst BreadcrumbsProvider = React.createContext<BreadcrumbsContextProps>({\n    separator: 'chevron'\n})\n\nconst Breadcrumbs = <T extends object>({\n    className,\n    ...props\n}: BreadcrumbsProps<T> & BreadcrumbsContextProps) => {\n    return (\n        <BreadcrumbsProvider value={{ separator: props.separator }}>\n            <RACBreadcrumbs\n                {...props}\n                className={cn('flex items-center gap-1.5 **:data-[slot=icon]:size-3.5', className)}\n            />\n        </BreadcrumbsProvider>\n    )\n}\n\ninterface BreadcrumbsItemProps extends BreadcrumbProps, Pick<LinkProps, 'href'> {\n    href?: string\n}\n\nconst BreadcrumbsItem = ({ href, className, ...props }: BreadcrumbsItemProps) => {\n    const { separator } = React.use(BreadcrumbsProvider)\n\n    return (\n        <Breadcrumb\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('inline-flex items-center gap-2 text-muted-fg data-current:text-fg', className)\n            )}\n        >\n            {(values) => (\n                <>\n                    {href ? (\n                        <Link href={href} className='inline-flex items-center gap-2' {...props} />\n                    ) : (\n                        props.children\n                    )}\n                    {!values.isCurrent && <Separator separator={separator} />}\n                </>\n            )}\n        </Breadcrumb>\n    )\n}\n\nconst Separator = ({\n    separator = 'chevron'\n}: {\n    separator?: BreadcrumbsContextProps['separator']\n}) => {\n    return (\n        <span className='*:text-muted-fg select-none'>\n            {separator === 'chevron' && <IconChevronRight />}\n            {separator === 'slash' && <IconSlash />}\n            {separator === 'dash' && <IconMinus />}\n            {separator === 'dot' && <IconDot />}\n        </span>\n    )\n}\n\nBreadcrumbs.Item = BreadcrumbsItem\n\nexport { Breadcrumbs }\n"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconUser } from 'hq-icons'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\nimport { Collection, type CollectionProps } from '@react-aria/collections'\n\ninterface AvatarGroupProps<T extends object> extends CollectionProps<T> {\n    className?: string\n}\n\nconst AvatarGroup = <T extends object>({ className, ...props }: AvatarGroupProps<T>) => {\n    return (\n        <div\n            className={cn(\n                '**:data-avatar:ring-border flex items-center justify-center -space-x-2 **:data-avatar:ring',\n                '**:data-avatar:transition-transform **:data-avatar:hover:z-30 **:data-avatar:hover:scale-110',\n                className\n            )}\n        >\n            <Collection {...props} />\n        </div>\n    )\n}\n\nconst avatar = tv({\n    base: [\n        'inline-grid shrink-0 items-center justify-center align-middle *:col-start-1 *:row-start-1',\n        'outline-fg/20 text-center outline-1 -outline-offset-1'\n    ],\n\n    variants: {\n        shape: {\n            square: 'rounded-lg *:rounded-lg',\n            circle: 'rounded-full *:rounded-full'\n        },\n        size: {\n            xs: 'size-5',\n            sm: 'size-6',\n            md: 'size-8',\n            lg: 'size-10',\n            xl: 'size-12',\n            '2xl': 'size-14',\n            '3xl': 'size-16',\n            '4xl': 'size-20',\n            '5xl': 'size-24'\n        }\n    },\n    defaultVariants: {\n        shape: 'circle',\n        size: 'md'\n    }\n})\n\ninterface AvatarProps extends VariantProps<typeof avatar> {\n    src?: string | undefined\n    initials?: string\n    alt?: string\n    className?: string\n}\n\nconst Avatar = ({\n    src,\n    shape,\n    size,\n    initials,\n    alt = '',\n    className,\n    ...props\n}: AvatarProps & React.ComponentPropsWithoutRef<'img'>) => {\n    const [error, setError] = React.useState(!src)\n\n    function handleError() {\n        setError(true)\n    }\n\n    React.useEffect(() => {\n        setError(!src)\n    }, [src])\n\n    if (error) {\n        return (\n            <span data-avatar className={avatar({ shape, size, className })}>\n                <FallbackImage initials={initials} alt={alt} />\n            </span>\n        )\n    }\n    return (\n        <img\n            src={src}\n            alt={alt}\n            onError={handleError}\n            data-avatar\n            className={avatar({ shape, size, className })}\n            {...props}\n        />\n    )\n}\n\nconst FallbackImage = ({ initials, alt }: { initials?: string; alt: string }) => {\n    return initials ? (\n        <svg\n            className='bg-bg size-full fill-current p-[5%] text-[48px] font-medium uppercase select-none'\n            viewBox='0 0 100 100'\n            aria-hidden={alt ? undefined : 'true'}\n        >\n            {alt && <title>{alt}</title>}\n            <text\n                x='50%'\n                y='50%'\n                alignmentBaseline='middle'\n                dominantBaseline='middle'\n                textAnchor='middle'\n                dy='.125em'\n            >\n                {initials.split(' ').slice(0, 2).length > 1\n                    ? initials\n                          .split(' ')\n                          .slice(0, 2)\n                          .map((part) => part.charAt(0))\n                          .join('')\n                    : initials.split('').slice(0, 2)}\n            </text>\n        </svg>\n    ) : alt ? (\n        <svg\n            className='size-full fill-current p-[5%] text-[48px] font-medium uppercase select-none'\n            viewBox='0 0 100 100'\n            aria-hidden={alt ? undefined : 'true'}\n        >\n            {alt && <title>{alt}</title>}\n            <text\n                x='50%'\n                y='50%'\n                alignmentBaseline='middle'\n                dominantBaseline='middle'\n                textAnchor='middle'\n                dy='.125em'\n            >\n                {alt.split(' ').slice(0, 2).length > 1\n                    ? alt\n                          .split(' ')\n                          .slice(0, 2)\n                          .map((part) => part.charAt(0))\n                          .join('')\n                    : alt.split('').slice(0, 2)}\n            </text>\n        </svg>\n    ) : (\n        <IconUser className='bg-bg size-full place-self-center p-1.5' />\n    )\n}\n\nexport { Avatar, AvatarGroup, type AvatarProps }\n"
  },
  "color-wheel": {
    "component": "@/components/ui/color-wheel",
    "raw": "'use client'\n\nimport {\n    ColorWheelTrack,\n    ColorWheel as RACColorWheel,\n    type ColorWheelProps as RACColorWheelProps\n} from 'react-aria-components'\n\nimport { ColorThumb } from './color-thumb'\n\nconst ColorWheel = (props: Omit<RACColorWheelProps, 'outerRadius' | 'innerRadius'>) => {\n    return (\n        <RACColorWheel {...props} outerRadius={100} innerRadius={70}>\n            <ColorWheelTrack\n                className='disabled:opacity-50'\n                style={({ defaultStyle }) => ({ ...defaultStyle })}\n            />\n            <ColorThumb />\n        </RACColorWheel>\n    )\n}\n\nexport { ColorWheel }\n"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    TimeField as RACTimeField,\n    type TimeFieldProps as RACTimeFieldProps,\n    type TimeValue\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, FieldProps, Label } from './field'\n\ninterface TimeFieldProps<T extends TimeValue> extends RACTimeFieldProps<T>, FieldProps {\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n}\n\nconst TimeField = <T extends TimeValue>({\n    prefix,\n    suffix,\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: TimeFieldProps<T>) => {\n    return (\n        <RACTimeField\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <FieldGroup>\n                        {prefix ? <span data-slot='prefix'>{prefix}</span> : null}\n                        <DateInput className='flex w-fit min-w-28 justify-around p-2 whitespace-nowrap sm:text-sm' />\n                        {suffix ? <span data-slot='suffix'>{suffix}</span> : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACTimeField>\n    )\n}\n\nexport { TimeField }\n"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "import { IconCircleAlert, IconCircleCheck, IconInfo } from 'hq-icons'\n\nimport { cn } from '@/lib/utils'\n\ninterface NoteProps extends React.HtmlHTMLAttributes<HTMLDivElement> {\n    variant?: 'primary' | 'secondary' | 'danger' | 'info' | 'success' | 'warning' | 'outline'\n    hideIndicator?: boolean\n}\n\nconst Note = ({\n    hideIndicator = false,\n    variant = 'primary',\n    className,\n    children,\n    ...props\n}: NoteProps) => {\n    const iconMap: Record<string, React.ElementType | null> = {\n        primary: IconInfo,\n        info: IconInfo,\n        warning: IconCircleAlert,\n        danger: IconCircleAlert,\n        success: IconCircleCheck,\n        secondary: null,\n        outline: null\n    }\n\n    const Icon = iconMap[variant] || null\n\n    return (\n        <div\n            className={cn(\n                'w-full overflow-hidden rounded-lg p-4 text-sm border backdrop-blur-2xl',\n                variant === 'primary' && 'border-primary/30 text-primary bg-primary/10',\n                variant === 'secondary' && 'border-muted text-secondary-foreground bg-secondary/25',\n                variant === 'warning' && 'border-warning/40 bg-warning/5 text-warning',\n                variant === 'danger' && 'border-danger/30 bg-danger/10 text-danger',\n                variant === 'success' && 'border-success/20 text-success bg-success/10',\n                variant === 'info' && 'border-info/35 text-info bg-info/10',\n                variant === 'outline' && 'border-muted text-fg bg-bg/10',\n                className\n            )}\n            {...props}\n        >\n            <div className='flex grow items-start'>\n                {Icon && !hideIndicator && (\n                    <Icon className='mr-3 shrink-0 size-5 rounded-full ring-2 ring-current/30 my-0.5' />\n                )}\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport { Note }\n"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\n\nimport { use } from 'react'\n\nimport { IconChevronLeft, IconChevronRight } from 'hq-icons'\nimport type { DateValue, CalendarProps as RACCalendarProps } from 'react-aria-components'\nimport {\n    CalendarCell,\n    CalendarGrid,\n    CalendarGridBody,\n    CalendarHeaderCell,\n    CalendarStateContext,\n    FieldError,\n    Calendar as RACCalendar,\n    CalendarGridHeader as RACCalendarGridHeader,\n    RangeCalendarStateContext,\n    useLocale\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport type { CalendarState, RangeCalendarState } from '@react-stately/calendar'\n\nimport { Button } from './button'\nimport { Menu } from './menu'\n\ninterface CalendarProps<T extends DateValue> extends Omit<RACCalendarProps<T>, 'visibleDuration'> {\n    errorMessage?: string\n    className?: string\n}\n\nconst Calendar = <T extends DateValue>({ errorMessage, ...props }: CalendarProps<T>) => {\n    const now = today(getLocalTimeZone())\n    return (\n        <RACCalendar {...props}>\n            <CalendarHeader />\n            <CalendarGrid className='**:[td]:px-0 **:[td]:py-[1.5px] w-full'>\n                <CalendarGridHeader />\n                <CalendarGridBody>\n                    {(date) => (\n                        <CalendarCell\n                            date={date}\n                            className={({\n                                isHovered,\n                                isSelected,\n                                isOutsideMonth,\n                                isInvalid,\n                                isDisabled\n                            }) =>\n                                cn([\n                                    'shrink-0 relative rounded-lg flex items-center justify-center size-10 cursor-default outline-hidden',\n                                    isOutsideMonth && 'text-muted-fg',\n                                    isHovered && 'bg-primary/10 text-primary',\n                                    isSelected &&\n                                        `${isInvalid ? 'bg-danger text-danger-fg' : 'bg-primary text-primary-fg'}`,\n                                    isDisabled && 'opacity-50 pointer-events-none',\n                                    date.compare(now) === 0 &&\n                                        'after:-translate-x-1/2 after:pointer-events-none after:absolute after:start-1/2 after:bottom-1.5 after:z-10 after:size-1 after:rounded-full after:bg-primary selected:after:bg-muted-fg'\n                                ])\n                            }\n                        >\n                            {({ formattedDate }) => formattedDate}\n                        </CalendarCell>\n                    )}\n                </CalendarGridBody>\n            </CalendarGrid>\n            <FieldError className='text-danger text-sm/5 px-2'>{errorMessage}</FieldError>\n        </RACCalendar>\n    )\n}\n\nconst CalendarHeader = ({\n    isRange,\n    className,\n    ...props\n}: React.ComponentProps<'header'> & { isRange?: boolean }) => {\n    const { direction } = useLocale()\n    const state = isRange ? use(RangeCalendarStateContext)! : use(CalendarStateContext)!\n\n    return (\n        <header\n            slot='calendar-header'\n            className={cn(\n                'flex w-full items-center justify-between gap-1.5 pt-1 pr-1 pb-5 pl-1.5 sm:pb-4',\n                className\n            )}\n            {...props}\n        >\n            <MonthYearSelection state={state} />\n            <div className='flex items-center gap-1'>\n                <Button\n                    size='icon'\n                    className='size-8 **:data-[slot=icon]:text-fg sm:size-7'\n                    shape='circle'\n                    variant='ghost'\n                    slot='previous'\n                >\n                    {direction === 'rtl' ? <IconChevronRight /> : <IconChevronLeft />}\n                </Button>\n                <Button\n                    size='icon'\n                    className='size-8 **:data-[slot=icon]:text-fg sm:size-7'\n                    shape='circle'\n                    variant='ghost'\n                    slot='next'\n                >\n                    {direction === 'rtl' ? <IconChevronLeft /> : <IconChevronRight />}\n                </Button>\n            </div>\n        </header>\n    )\n}\n\nconst MonthYearSelection = ({ state }: { state: CalendarState | RangeCalendarState }) => {\n    const { timeZone, focusedDate, setFocusedDate } = state\n    const monthFormatter = useDateFormatter({\n        month: 'long',\n        timeZone: timeZone\n    })\n\n    const months: string[] = []\n    const numMonths = focusedDate.calendar.getMonthsInYear(focusedDate)\n    for (let i = 1; i <= numMonths; i++) {\n        const date = focusedDate.set({ month: i })\n        months.push(monthFormatter.format(date.toDate(timeZone)))\n    }\n    const onMonthChange = (e: number) => {\n        const date = focusedDate.set({ month: e })\n        setFocusedDate(date)\n    }\n\n    const yearFormatter = useDateFormatter({\n        year: 'numeric',\n        timeZone: timeZone\n    })\n\n    const years: string[] = []\n    for (let i = -20; i <= 20; i++) {\n        const date = focusedDate.add({ years: i })\n        years.push(yearFormatter.format(date.toDate(timeZone)))\n    }\n    const onYearChange = (e: number) => {\n        const date = focusedDate.set({ year: Number(years[e]) })\n        setFocusedDate(date)\n    }\n\n    return (\n        <div className='flex gap-1'>\n            <Menu aria-label='Select month'>\n                <Menu.Trigger className='text-muted-fg rounded-lg' slot={null}>\n                    {months[focusedDate.month - 1]}\n                </Menu.Trigger>\n                <Menu.Content\n                    selectionMode='single'\n                    selectedKeys={[focusedDate.month]}\n                    items={months.map((month, i) => ({ id: i + 1, label: month }))}\n                    // @ts-expect-error unknown-type\n                    onSelectionChange={(e) => onMonthChange(e.currentKey)}\n                >\n                    {(item) => (\n                        <Menu.Item id={item.id} textValue={item.label}>\n                            <Menu.Label>{item.label}</Menu.Label>\n                        </Menu.Item>\n                    )}\n                </Menu.Content>\n            </Menu>\n            <Menu aria-label='Select year'>\n                <Menu.Trigger className='text-muted-fg rounded-lg' slot={null}>\n                    {yearFormatter.format(focusedDate.toDate(timeZone))}\n                </Menu.Trigger>\n                <Menu.Content\n                    selectionMode='single'\n                    selectedKeys={[20]}\n                    items={years.map((year, i) => ({ id: i, label: year }))}\n                    // @ts-expect-error unknown-type\n                    onSelectionChange={(e) => onYearChange(e.currentKey)}\n                >\n                    {(item) => (\n                        <Menu.Item id={item.id} textValue={item.label}>\n                            <Menu.Label>{item.label}</Menu.Label>\n                        </Menu.Item>\n                    )}\n                </Menu.Content>\n            </Menu>\n        </div>\n    )\n}\n\nconst CalendarGridHeader = () => {\n    return (\n        <RACCalendarGridHeader>\n            {(day) => (\n                <CalendarHeaderCell className='pb-2 font-semibold text-muted-fg text-sm sm:px-0 sm:py-0.5 lg:text-xs'>\n                    {day}\n                </CalendarHeaderCell>\n            )}\n        </RACCalendarGridHeader>\n    )\n}\n\nCalendar.Header = CalendarHeader\nCalendar.GridHeader = CalendarGridHeader\n\nexport { Calendar }\n"
  },
  "navbar": {
    "component": "@/components/ui/navbar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconMenu } from 'hq-icons'\nimport { LayoutGroup, motion } from 'motion/react'\nimport type { LinkProps } from 'react-aria-components'\nimport { composeRenderProps, Link } from 'react-aria-components'\n\nimport { useMediaQuery } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\n\nimport { Button, type ButtonProps } from './button'\nimport { Sheet } from './sheet'\n\ntype NavbarOptions = {\n    side?: 'left' | 'right'\n    isSticky?: boolean\n    variant?: 'navbar' | 'float' | 'inset'\n}\n\ntype NavbarContextProps = {\n    open: boolean\n    setOpen: (open: boolean) => void\n    isCompact: boolean\n    toggleNavbar: () => void\n} & NavbarOptions\n\nconst NavbarContext = React.createContext<NavbarContextProps | null>(null)\n\nfunction useNavbar() {\n    const context = React.use(NavbarContext)\n    if (!context) {\n        throw new Error('useNavbar must be used within a Navbar.')\n    }\n\n    return context\n}\n\ninterface NavbarProps extends React.ComponentProps<'header'>, NavbarOptions {\n    defaultOpen?: boolean\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n}\n\nconst Navbar = ({\n    children,\n    isOpen: openProp,\n    onOpenChange: setOpenProp,\n    defaultOpen = false,\n    className,\n    side = 'left',\n    isSticky = false,\n    variant = 'navbar',\n    ...props\n}: NavbarProps) => {\n    const isCompact = useMediaQuery('(max-width: 768px)')\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n\n    const setOpen = React.useCallback(\n        (value: boolean | ((value: boolean) => boolean)) => {\n            if (setOpenProp) {\n                return setOpenProp?.(typeof value === 'function' ? value(open) : value)\n            }\n\n            _setOpen(value)\n        },\n        [setOpenProp, open]\n    )\n\n    const toggleNavbar = React.useCallback(() => {\n        setOpen((open) => !open)\n    }, [setOpen])\n\n    const contextValue = React.useMemo<NavbarContextProps>(\n        () => ({\n            open,\n            setOpen,\n            isCompact,\n            toggleNavbar,\n            variant,\n            isSticky,\n            side\n        }),\n        [open, setOpen, isCompact, toggleNavbar, variant, isSticky, side]\n    )\n    return (\n        <NavbarContext value={contextValue}>\n            <header\n                data-navbar-variant={variant}\n                className={cn(\n                    'relative isolate flex w-full flex-col',\n                    variant === 'float' && 'px-2.5 pt-2',\n                    variant === 'inset' && 'bg-bg min-h-svh',\n                    className\n                )}\n                {...props}\n            >\n                {children}\n            </header>\n        </NavbarContext>\n    )\n}\n\ninterface NavbarNavProps extends React.ComponentProps<'div'> {\n    variant?: 'navbar' | 'float' | 'inset'\n    isSticky?: boolean\n    side?: 'left' | 'right'\n    useDefaultResponsive?: boolean\n}\n\nconst NavbarNav = ({ useDefaultResponsive = true, className, ref, ...props }: NavbarNavProps) => {\n    const { isCompact, side, variant, isSticky, open, setOpen } = useNavbar()\n\n    if (isCompact && useDefaultResponsive) {\n        return (\n            <Sheet isOpen={open} onOpenChange={setOpen} {...props}>\n                <Sheet.Trigger className='sr-only' />\n                <Sheet.Content\n                    side={side}\n                    aria-label='Compact Navbar'\n                    data-navbar='compact'\n                    isFloating={variant === 'float'}\n                >\n                    <Sheet.Body className='px-2 md:px-4'>{props.children}</Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        )\n    }\n\n    return (\n        <div\n            data-navbar-nav='true'\n            ref={ref}\n            className={cn(\n                'group peer hidden h-(--navbar-height) w-full items-center px-4 [--navbar-height:3.5rem] md:flex',\n                '[&>div]:mx-auto [&>div]:w-full [&>div]:max-w-[1680px] [&>div]:items-center md:[&>div]:flex',\n                isSticky && 'sticky top-0 z-40',\n                variant === 'float' &&\n                    'bg-bg text-fg mx-auto w-full max-w-7xl rounded-lg border md:px-4 2xl:max-w-(--breakpoint-2xl)',\n                variant === 'navbar' && 'bg-bg text-fg border-b md:px-6',\n                variant === 'inset' &&\n                    'mx-auto md:px-6 [&>div]:mx-auto [&>div]:w-full [&>div]:items-center md:[&>div]:flex 2xl:[&>div]:max-w-(--breakpoint-2xl)',\n                className\n            )}\n            {...props}\n        >\n            <div>{props.children}</div>\n        </div>\n    )\n}\n\ninterface NavbarTriggerProps extends ButtonProps {\n    ref?: React.RefObject<HTMLButtonElement>\n}\nconst NavbarTrigger = ({ className, onPress, ref, ...props }: NavbarTriggerProps) => {\n    const { toggleNavbar } = useNavbar()\n    return (\n        <Button\n            ref={ref}\n            data-navbar-trigger='true'\n            variant='ghost'\n            aria-label={props['aria-label'] || 'Toggle Navbar'}\n            size='icon'\n            className={className}\n            onPress={(event) => {\n                onPress?.(event)\n                toggleNavbar()\n            }}\n            {...props}\n        >\n            <IconMenu />\n            <span className='sr-only'>Toggle Navbar</span>\n        </Button>\n    )\n}\n\nconst NavbarSection = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    const { isCompact } = useNavbar()\n    const id = React.useId()\n    return (\n        <LayoutGroup id={id}>\n            <div\n                data-navbar-section='true'\n                className={cn(\n                    'flex',\n                    isCompact ? 'flex-col gap-y-4' : 'flex-row items-center gap-x-3',\n                    className\n                )}\n                {...props}\n            >\n                {props.children}\n            </div>\n        </LayoutGroup>\n    )\n}\n\ninterface NavbarItemProps extends LinkProps {\n    isCurrent?: boolean\n}\n\nconst NavbarItem = ({ className, isCurrent, ...props }: NavbarItemProps) => {\n    const { variant, isCompact } = useNavbar()\n    return (\n        <Link\n            data-navbar-item\n            aria-current={isCurrent ? 'page' : undefined}\n            className={composeRenderProps(\n                className,\n                (className, { isFocused, isHovered, isPressed, isFocusVisible, isDisabled }) =>\n                    cn(\n                        'text-muted-fg relative flex cursor-pointer items-center gap-x-2 px-2 no-underline outline-hidden transition-colors md:text-sm',\n                        '**:data-[slot=chevron]:size-4 **:data-[slot=chevron]:transition-transform',\n                        '*:data-[slot=icon]:-mx-0.5 *:data-[slot=icon]:size-4 *:data-[slot=icon]:shrink-0',\n                        isFocused && 'text-fg',\n                        isHovered && 'text-fg',\n                        isPressed && 'text-fg **:data-[slot=chevron]:rotate-180',\n                        isFocusVisible && 'ring-2 ring-primary/20',\n                        isDisabled && 'cursor-default opacity-50',\n                        isCurrent && 'text-fg cursor-default',\n                        className\n                    )\n            )}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof props.children === 'function' ? props.children(values) : props.children}\n\n                    {(isCurrent || values.isCurrent) && !isCompact && variant !== 'float' && (\n                        <motion.span\n                            layoutId='current-indicator'\n                            data-slot='current-indicator'\n                            className='bg-fg absolute inset-x-2 bottom-[calc(var(--navbar-height)*-0.33)] h-0.5 rounded-full'\n                        />\n                    )}\n                </>\n            )}\n        </Link>\n    )\n}\n\nconst NavbarLogo = ({ className, ...props }: LinkProps) => {\n    return (\n        <Link\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'text-fg data-focus-visible:outline-primary relative flex items-center gap-x-2 px-2 py-4 data-focus-visible:outline-1 data-focused:outline-hidden md:mr-4 md:px-0 md:py-0',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst NavbarFlex = ({ className, ref, ...props }: React.ComponentProps<'div'>) => {\n    return (\n        <div ref={ref} className={cn('flex items-center gap-2 md:gap-3', className)} {...props} />\n    )\n}\n\ninterface NavbarCompactProps extends React.ComponentProps<'div'> {\n    ref?: React.RefObject<HTMLDivElement>\n    variant?: 'float' | 'inset' | 'navbar'\n}\nconst NavbarCompact = ({ className, ref, ...props }: NavbarCompactProps) => {\n    const { variant } = useNavbar()\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'bg-bg text-fg flex justify-between peer-has-[[data-navbar-variant=float]]:border md:hidden',\n                variant === 'float' && 'h-12 rounded-lg border px-3.5',\n                variant === 'inset' && 'h-14 border-b px-4',\n                variant === 'navbar' && 'h-14 border-b px-4',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst NavbarInset = ({ className, ref, ...props }: React.ComponentProps<'div'>) => {\n    const { variant } = useNavbar()\n    return (\n        <main\n            ref={ref}\n            data-navbar-variant={variant}\n            className={cn(\n                'flex flex-1 flex-col',\n                variant === 'inset' && 'bg-bg pb-2 md:px-2',\n                className\n            )}\n        >\n            <div\n                className={cn(\n                    'grow',\n                    variant === 'inset' &&\n                        'bg-bg md:ring-fg/15 md:dark:ring-border md:rounded-lg md:ring-1 md:shadow-xs'\n                )}\n            >\n                {props.children}\n            </div>\n        </main>\n    )\n}\n\nNavbar.Nav = NavbarNav\nNavbar.Inset = NavbarInset\nNavbar.Compact = NavbarCompact\nNavbar.Flex = NavbarFlex\nNavbar.Trigger = NavbarTrigger\nNavbar.Logo = NavbarLogo\nNavbar.Item = NavbarItem\nNavbar.Section = NavbarSection\n\nexport { Navbar }\n"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport { IconLoaderCircle, IconSearch, IconX } from 'hq-icons'\nimport {\n    Button,\n    composeRenderProps,\n    SearchField as RACSearchField,\n    type SearchFieldProps as RACSearchFieldProps,\n    type ValidationResult\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\n\ninterface SearchFieldProps extends RACSearchFieldProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    isPending?: boolean\n}\n\nconst SearchField = ({\n    className,\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    isPending,\n    ...props\n}: SearchFieldProps) => {\n    return (\n        <RACSearchField\n            aria-label={placeholder ?? props['aria-label'] ?? 'Search...'}\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isEmpty }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup>\n                        <IconSearch aria-hidden className='text-muted-fg ml-2 size-4 shrink-0' />\n                        <Input\n                            placeholder={placeholder ?? 'Search...'}\n                            className='[&::-webkit-search-cancel-button]:hidden'\n                        />\n                        {isPending && (\n                            <IconLoaderCircle className='animate-spin size-4 mr-2 to-muted-fg' />\n                        )}\n                        {!isEmpty && (\n                            <Button\n                                type='button'\n                                aria-label='Clear'\n                                className='mr-2 rounded-lg outline-offset-4 inline-flex items-center justify-center text-muted-fg'\n                            >\n                                <IconX aria-hidden />\n                            </Button>\n                        )}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACSearchField>\n    )\n}\n\nexport { SearchField }\nexport type { SearchFieldProps }\n"
  },
  "multi-select": {
    "component": "@/components/ui/multi-select",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCheck, IconChevronDown, IconX } from 'hq-icons'\nimport type {\n    ComboBoxProps,\n    GroupProps,\n    Key,\n    ListBoxItemProps,\n    ListBoxProps,\n    Selection\n} from 'react-aria-components'\nimport {\n    Button,\n    ComboBox,\n    composeRenderProps,\n    Group,\n    Input,\n    ListBox,\n    ListBoxItem,\n    Popover,\n    Tag,\n    TagGroup,\n    TagList,\n    Text\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldGroup, FieldProps, Label } from './field'\n\ninterface MultiSelectProps<T>\n    extends ListBoxProps<T>,\n        Pick<\n            ComboBoxProps<T & { selectedKeys: Selection }>,\n            'isRequired' | 'validate' | 'validationBehavior'\n        >,\n        FieldProps,\n        Pick<GroupProps, 'isDisabled' | 'isInvalid'> {\n    className?: string\n    errorMessage?: string\n}\n\nconst MultiSelect = <T extends object>({ className, children, ...props }: MultiSelectProps<T>) => {\n    const triggerRef = React.useRef<HTMLDivElement>(null)\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const [inputValue, setInputValue] = React.useState('')\n    const [selectedKeys, onSelectionChange] = React.useState<Selection>(new Set(props.selectedKeys))\n\n    React.useEffect(() => {\n        setInputValue('')\n    }, [props.selectedKeys, selectedKeys])\n\n    const addItem = (e: Key | null) => {\n        if (!e) return\n        onSelectionChange?.((s) => new Set([...s, e!]))\n        // @ts-expect-error incompatible type Key and Selection\n        props.onSelectionChange?.((s) => new Set([...s, e!]))\n    }\n\n    const removeItem = (e: Set<Key>) => {\n        onSelectionChange?.((s) => new Set([...s].filter((i) => i !== e.values().next().value)))\n        props.onSelectionChange?.(\n            // @ts-expect-error incompatible type Key and Selection\n            (s) => new Set([...s].filter((i) => i !== e.values().next().value))\n        )\n    }\n\n    const onKeyDownCapture = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Backspace' && inputValue === '') {\n            onSelectionChange?.((s) => new Set([...s].slice(0, -1)))\n            // @ts-expect-error incompatible type Key and Selection\n            props.onSelectionChange?.((s) => new Set([...s].slice(0, -1)))\n        }\n    }\n\n    const items = props.items\n        ? // @ts-expect-error unknown type\n          props.items.map((item) => ({ id: item.id, name: item.name }))\n        : React.Children.map(\n              children as React.ReactNode,\n              (child) => React.isValidElement(child) && child.props\n              // @ts-expect-error unknown type\n          )?.map((item) => ({ id: item.id, name: item.textValue }))\n\n    return (\n        <Group\n            isInvalid={props.isInvalid}\n            isDisabled={props.isDisabled}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex h-fit flex-col gap-y-1.5', className)\n            )}\n            ref={triggerRef}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {props.label && (\n                        <Label\n                            onClick={() => inputRef.current?.focus()}\n                            isInvalid={isInvalid}\n                            isDisabled={isDisabled}\n                        >\n                            {props.label}\n                        </Label>\n                    )}\n                    <FieldGroup\n                        isDisabled={isDisabled}\n                        isInvalid={isInvalid}\n                        className='flex min-h-10 h-fit flex-wrap items-center py-1'\n                    >\n                        <TagGroup onRemove={removeItem} aria-hidden aria-label='Selected'>\n                            <TagList\n                                className='flex flex-1 flex-wrap gap-1 pl-2 empty:pl-0'\n                                items={items.filter((i: { id: Key }) =>\n                                    [...selectedKeys].includes(i.id)\n                                )}\n                            >\n                                {(item: { id: Key; name: string }) => (\n                                    <Tag\n                                        isDisabled={isDisabled}\n                                        id={item.id}\n                                        className={({ isFocusVisible }) =>\n                                            cn(\n                                                'inline-flex items-center justify-between gap-1 rounded-lg border px-2 py-0.5 text-sm outline-hidden',\n                                                isInvalid\n                                                    ? 'bg-danger/10 text-danger border-danger/70'\n                                                    : 'bg-primary/10 text-primary border-primary/70',\n                                                isFocusVisible &&\n                                                    `ring-2 ${isInvalid ? 'ring-danger/70' : 'ring-primary/70'}`\n                                            )\n                                        }\n                                        textValue={item.name}\n                                    >\n                                        {item.name}\n                                        <Button\n                                            slot='remove'\n                                            className={({ isHovered, isPressed }) =>\n                                                cn(\n                                                    '-mr-1 flex size-4 cursor-pointer items-center justify-center rounded-lg outline-hidden',\n                                                    isHovered && 'bg-primary/70 text-primary-fg',\n                                                    isPressed && 'bg-primary text-primary-fg'\n                                                )\n                                            }\n                                        >\n                                            <IconX className='size-3 shrink-0' />\n                                        </Button>\n                                    </Tag>\n                                )}\n                            </TagList>\n                        </TagGroup>\n                        <ComboBox\n                            isRequired={props.isRequired}\n                            validate={props.validate}\n                            validationBehavior={props.validationBehavior}\n                            isInvalid={isInvalid}\n                            isDisabled={isDisabled}\n                            className='flex-1 px-2 text-sm/7'\n                            aria-label='Search'\n                            onSelectionChange={addItem}\n                            inputValue={inputValue}\n                            onInputChange={setInputValue}\n                        >\n                            <div className='flex flex-row items-center'>\n                                <Input\n                                    ref={inputRef}\n                                    onKeyDownCapture={onKeyDownCapture}\n                                    placeholder='Pick something'\n                                    className='w-full text-sm/7 outline-hidden'\n                                />\n                                <Button\n                                    aria-label='Chevron'\n                                    className='text-muted-fg ml-auto inline-flex w-auto flex-1 items-center justify-center rounded-lg outline-hidden'\n                                >\n                                    <IconChevronDown\n                                        className={cn(\n                                            'size-4 transition group-has-open:-rotate-180'\n                                        )}\n                                    />\n                                </Button>\n                            </div>\n                            <Popover\n                                style={{\n                                    minWidth: triggerRef.current?.offsetWidth,\n                                    width: triggerRef.current?.offsetWidth\n                                }}\n                                triggerRef={triggerRef}\n                                className={({ isEntering, isExiting }) =>\n                                    cn(\n                                        'group bg-bg max-h-72 w-full max-w-(--trigger-width) overflow-y-auto rounded-lg border p-1 shadow outline-hidden transition',\n                                        isEntering &&\n                                            'fade-in animate-in zoom-in-95 placement-left:slide-in-from-right-2 placement-right:slide-in-from-left-2 placement-top:slide-in-from-bottom-2 placement-bottom:slide-in-from-top-2',\n                                        isExiting &&\n                                            'fade-out animate-out zoom-out-95 placement-left:slide-out-to-right-2 placement-right:slide-out-to-left-2 placement-top:slide-out-to-bottom-2 placement-bottom:slide-out-to-top-2'\n                                    )\n                                }\n                            >\n                                <ListBox\n                                    className='grid w-full grid-cols-[auto_1fr_1.5rem_0.5rem_auto] gap-y-1 overflow-y-auto rounded-lg outline-hidden'\n                                    selectionMode='multiple'\n                                    renderEmptyState={() => <div>No Items</div>}\n                                    {...props}\n                                >\n                                    {children}\n                                </ListBox>\n                            </Popover>\n                        </ComboBox>\n                    </FieldGroup>\n                    {props.description && <Description>{props.description}</Description>}\n                    {props.errorMessage && isInvalid && (\n                        <Description className='text-danger text-sm/5'>\n                            {props.errorMessage}\n                        </Description>\n                    )}\n                </>\n            )}\n        </Group>\n    )\n}\n\nconst MultiSelectItem = ({ className, children, ...props }: ListBoxItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <ListBoxItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(\n                className,\n                (className, { isHovered, isFocused, isDisabled, isFocusVisible }) =>\n                    cn(\n                        'group relative col-span-full grid grid-cols-subgrid',\n                        'rounded-md px-2 py-1.5 text-base select-none sm:text-sm/6',\n                        '*:[svg]:my-1 *:[svg]:mr-2 **:[svg]:size-4',\n                        { 'bg-primary text-primary-fg': isFocused || isFocusVisible || isHovered },\n                        isDisabled && 'pointer-events-none opacity-50',\n                        className\n                    )\n            )}\n        >\n            {({ isSelected }) => (\n                <>\n                    {isSelected && <IconCheck data-slot='checked' />}\n                    {typeof children === 'string' ? (\n                        <Text slot='label' className='col-start-2'>\n                            {children}\n                        </Text>\n                    ) : (\n                        children\n                    )}\n                </>\n            )}\n        </ListBoxItem>\n    )\n}\n\nMultiSelect.Item = MultiSelectItem\n\nexport { MultiSelect }\n"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport {\n    IconChevronLeft,\n    IconChevronRight,\n    IconChevronsLeft,\n    IconChevronsRight,\n    IconEllipsis\n} from 'hq-icons'\nimport type {\n    ListBoxItemProps,\n    ListBoxProps,\n    ListBoxSectionProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    composeRenderProps,\n    ListBox,\n    ListBoxItem,\n    ListBoxSection,\n    Text\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ninterface PaginationProps<T> extends ListBoxProps<T> {\n    ref?: React.RefObject<HTMLDivElement>\n    shape?: 'square' | 'circle'\n}\nconst Pagination = <T extends object>({\n    className,\n    shape = 'square',\n    ref,\n    ...props\n}: PaginationProps<T>) => {\n    return (\n        <ListBox\n            ref={ref}\n            orientation='horizontal'\n            aria-label={props['aria-label'] || 'Pagination'}\n            layout='grid'\n            data-shape={shape}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex gap-1.5', className)\n            )}\n            {...props}\n        />\n    )\n}\n\ninterface PaginationPagesProps<T> extends ListBoxSectionProps<T> {\n    ref?: React.RefObject<HTMLElement>\n}\nconst PaginationPages = <T extends object>({\n    className,\n    ref,\n    ...props\n}: PaginationPagesProps<T>) => (\n    <ListBoxSection ref={ref} {...props} className={cn('flex gap-1.5', className)} />\n)\n\ninterface PaginationItemProps extends ListBoxItemProps {\n    children?: React.ReactNode\n    className?: string\n    isCurrent?: boolean\n    role?: 'ellipsis' | 'page' | 'last' | 'first' | 'previous' | 'next'\n}\nconst PaginationItem = ({\n    role = 'page',\n    className,\n    isCurrent,\n    children,\n    ...props\n}: PaginationItemProps) => {\n    const textValue = role === 'page' ? children?.toString() : role\n    return (\n        <ListBoxItem\n            isDisabled={props.isDisabled || role === 'ellipsis'}\n            textValue={textValue}\n            className={composeRenderProps(\n                className,\n                (className, { isHovered, isPressed, isSelected, isDisabled, isFocusVisible }) =>\n                    cn(\n                        'inline-flex size-10 text-sm items-center justify-center gap-x-2 font-medium whitespace-nowrap transition outline-hidden',\n                        'group-data-[shape=circle]:rounded-full group-data-[shape=square]:rounded-lg',\n                        isHovered && 'bg-primary/10 text-primary',\n                        isPressed && 'bg-primary/20 text-primary',\n                        isFocusVisible && 'ring-4 border-primary ring-primary/20',\n                        {\n                            'bg-primary text-primary-fg pointer-events-none':\n                                isCurrent || isSelected\n                        },\n                        isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer',\n                        role !== 'ellipsis' && 'border',\n                        className\n                    )\n            )}\n            {...props}\n        >\n            {role === 'ellipsis' ? (\n                <IconEllipsis />\n            ) : role === 'first' ? (\n                <IconChevronsLeft />\n            ) : role === 'last' ? (\n                <IconChevronsRight />\n            ) : role === 'previous' ? (\n                <IconChevronLeft />\n            ) : role === 'next' ? (\n                <IconChevronRight />\n            ) : (\n                children\n            )}\n        </ListBoxItem>\n    )\n}\n\ninterface PaginationLabelProps extends TextProps {\n    current: number | string\n    total?: number | string\n}\nconst PaginationLabel = ({ className, current, total, ...props }: PaginationLabelProps) => (\n    <ListBoxItem\n        textValue={`${String(current)}/${String(total)}`}\n        isDisabled\n        className={cn(\n            'inline-flex select-none px-4 h-10 text-sm items-center text-muted-fg justify-center gap-x-2 font-medium whitespace-nowrap transition outline-hidden',\n            className\n        )}\n        {...props}\n    >\n        <Text className='text-primary'>{current}</Text>\n        {total && (\n            <>\n                <span>/</span>\n                <Text>{total}</Text>\n            </>\n        )}\n    </ListBoxItem>\n)\n\nPagination.Item = PaginationItem\nPagination.Pages = PaginationPages\nPagination.Label = PaginationLabel\n\nexport { Pagination }\n"
  },
  "toolbar": {
    "component": "@/components/ui/toolbar",
    "raw": "'use client'\n\nimport type { GroupProps, SeparatorProps, ToolbarProps } from 'react-aria-components'\nimport { composeRenderProps, Group, Toolbar as RACToolbar, Separator } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Toggle } from './toggle'\n\nconst Toolbar = ({ orientation = 'horizontal', className, ...props }: ToolbarProps) => (\n    <RACToolbar\n        orientation={orientation}\n        className={composeRenderProps(className, (className, { orientation }) =>\n            cn(\n                'group flex gap-2',\n                orientation === 'vertical'\n                    ? 'flex-col items-start'\n                    : 'flex-row [-ms-overflow-style:none]',\n                className\n            )\n        )}\n        {...props}\n    />\n)\n\nconst ToolbarGroup = ({ className, ...props }: GroupProps) => (\n    <Group\n        className={composeRenderProps(className, (className, { isDisabled }) =>\n            cn(\n                'flex gap-2 items-center group-orientation-vertical:flex-col group-orientation-vertical:items-start',\n                isDisabled && 'opacity-50 pointer-events-none',\n                className\n            )\n        )}\n        {...props}\n    >\n        {props.children}\n    </Group>\n)\n\nconst ToolbarSeparator = ({ className, ...props }: SeparatorProps) => {\n    return (\n        <Separator\n            className={cn(\n                'bg-muted group-orientation-horizontal:mx-1.5 group-orientation-horizontal:h-10 group-orientation-horizontal:w-px group-orientation-vertical:my-1.5 group-orientation-vertical:w-10 group-orientation-vertical:h-px',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nToolbar.Group = ToolbarGroup\nToolbar.Item = Toggle\nToolbar.Separator = ToolbarSeparator\n\nexport { Toolbar }\n"
  },
  "user": {
    "component": "@/components/ui/user",
    "raw": "'use client'\n\nimport { Avatar, AvatarProps } from './avatar'\n\ninterface UserProps extends Omit<AvatarProps, 'size'> {\n    name: string\n    description?: string\n    size?: 'md' | 'lg' | 'xl'\n}\n\nconst User = ({ name, description, size = 'lg', ...props }: UserProps) => {\n    const sizes: { avatar: 'lg' | 'md' | 'xl'; name: string; description: string } = {\n        avatar: 'lg',\n        name: 'text-sm',\n        description: 'text-xs'\n    }\n    switch (size) {\n        case 'md':\n            sizes.avatar = 'md'\n            sizes.name = 'text-sm'\n            sizes.description = 'text-xs'\n            break\n        case 'xl':\n            sizes.avatar = 'xl'\n            sizes.name = 'text-base'\n            sizes.description = 'text-sm'\n            break\n        default:\n        case 'lg':\n            sizes.avatar = 'lg'\n            sizes.name = 'text-sm'\n            sizes.description = 'text-xs'\n            break\n    }\n    return (\n        <div className='inline-flex items-center justify-center gap-2 rounded-xl outline-none'>\n            <Avatar {...props} initials={name} size={sizes.avatar} />\n            <div data-user className='inline-flex flex-col items-start'>\n                <span className={'font-medium text-inherit ' + sizes.name}>{name}</span>\n                {description && (\n                    <span className={'text-muted-fg ' + sizes.description}>{description}</span>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport { User }\n"
  },
  "tree": {
    "component": "@/components/ui/tree",
    "raw": "'use client'\n\nimport { IconChevronRight } from 'hq-icons'\nimport type { TreeItemContentProps, TreeItemProps, TreeProps } from 'react-aria-components'\nimport {\n    Button,\n    composeRenderProps,\n    Tree as RACTree,\n    TreeItem as RACTreeItem,\n    TreeItemContent\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst Tree = <T extends object>({ className, ...props }: TreeProps<T>) => {\n    return (\n        <RACTree\n            className={composeRenderProps(className, (className) =>\n                cn('flex flex-col cursor-default gap-0.5 p-2 text-sm outline-hidden', className)\n            )}\n            {...props}\n        />\n    )\n}\n\nconst TreeItem = <T extends object>({ className, ...props }: TreeItemProps<T>) => {\n    return (\n        <RACTreeItem\n            className={composeRenderProps(\n                className,\n                (className, { isFocusVisible, isDisabled, isSelected, hasChildItems }) =>\n                    cn(\n                        'p-1 outline-hidden relative flex items-center gap-1.5 rounded-lg py-2 text-sm',\n                        hasChildItems\n                            ? 'pl-[calc((var(--tree-item-level)-1)*20px+8px)]'\n                            : 'pl-[calc((var(--tree-item-level)-1)*20px+32px)]',\n                        isFocusVisible && 'ring-primary/20 ring-2',\n                        isSelected && 'bg-primary text-primary-fg',\n                        isDisabled && 'opacity-50',\n                        className\n                    )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst ItemContent = ({ children, ...props }: TreeItemContentProps) => (\n    <TreeItemContent {...props}>\n        {composeRenderProps(children, (children, { hasChildItems, isExpanded }) => (\n            <>\n                {hasChildItems && (\n                    <Button\n                        slot='chevron'\n                        className='inline-flex size-4 text-muted-fg items-center justify-center outline-hidden'\n                    >\n                        <IconChevronRight\n                            data-slot='indicator'\n                            className={cn('transition-transform', isExpanded && 'rotate-90')}\n                        />\n                    </Button>\n                )}\n                {children}\n            </>\n        ))}\n    </TreeItemContent>\n)\n\nTreeItem.Content = ItemContent\n\nexport { Tree, TreeItem }\nexport type { TreeItemProps, TreeProps }\n"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport type { FormProps } from 'react-aria-components'\nimport { Form as RACForm } from 'react-aria-components'\n\nconst Form = (props: FormProps) => <RACForm {...props} />\n\nexport { Form }\n"
  },
  "color-area": {
    "component": "@/components/ui/color-area",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    ColorArea as RACColorArea,\n    type ColorAreaProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { ColorThumb } from './color-thumb'\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n    return (\n        <RACColorArea\n            slot='color-area'\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'bg-muted min-w-56 min-h-56 rounded-lg',\n                    isDisabled && 'opacity-50 grayscale-50',\n                    className\n                )\n            )}\n            style={({ defaultStyle }) => ({ ...defaultStyle })}\n            {...props}\n        >\n            <ColorThumb />\n        </RACColorArea>\n    )\n}\n\nexport { ColorArea }\n"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport { IconChevronLeft, IconChevronRight } from 'hq-icons'\nimport {\n    Button,\n    composeRenderProps,\n    ListBox,\n    ListBoxItem,\n    type ListBoxItemProps,\n    ListBoxSection,\n    type ListBoxSectionProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselContextProps = {\n    carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n    api: ReturnType<typeof useEmblaCarousel>[1]\n    scrollPrev: () => void\n    scrollNext: () => void\n    canScrollPrev: boolean\n    canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nconst useCarousel = () => {\n    const context = React.use(CarouselContext)\n\n    if (!context) {\n        throw new Error('useCarousel must be used within a <Carousel />')\n    }\n\n    return context\n}\n\ninterface CarouselRootProps {\n    CarouselContent?: typeof CarouselContent\n    CarouselHandler?: typeof CarouselHandler\n    CarouselItem?: typeof CarouselItem\n}\n\ninterface CarouselProps extends React.HTMLAttributes<HTMLDivElement>, CarouselRootProps {\n    opts?: CarouselOptions\n    plugins?: CarouselPlugin\n    orientation?: 'horizontal' | 'vertical'\n    setApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = ({\n    orientation = 'horizontal',\n    opts,\n    setApi,\n    plugins,\n    className,\n    children,\n    ...props\n}: CarouselProps) => {\n    const [carouselRef, api] = useEmblaCarousel(\n        {\n            ...opts,\n            axis: orientation === 'horizontal' ? 'x' : 'y'\n        },\n        plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n        if (!api) {\n            return\n        }\n\n        setCanScrollPrev(api.canScrollPrev())\n        setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n        api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n        api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n        (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (event.key === 'ArrowLeft') {\n                event.preventDefault()\n                scrollPrev()\n            } else if (event.key === 'ArrowRight') {\n                event.preventDefault()\n                scrollNext()\n            }\n        },\n        [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n        if (!api || !setApi) {\n            return\n        }\n\n        setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        onSelect(api)\n        api.on('reInit', onSelect)\n        api.on('select', onSelect)\n\n        return () => {\n            api?.off('select', onSelect)\n        }\n    }, [api, onSelect])\n\n    return (\n        <CarouselContext.Provider\n            value={{\n                carouselRef,\n                api: api,\n                opts,\n                orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n                scrollPrev,\n                scrollNext,\n                canScrollPrev,\n                canScrollNext\n            }}\n        >\n            <div\n                onKeyDownCapture={handleKeyDown}\n                className={cn('relative', className)}\n                role='region'\n                {...props}\n            >\n                {children}\n            </div>\n        </CarouselContext.Provider>\n    )\n}\n\nconst CarouselContent = <T extends object>({ className, ...props }: ListBoxSectionProps<T>) => {\n    const { carouselRef, orientation } = useCarousel()\n\n    return (\n        <ListBox\n            layout={orientation === 'vertical' ? 'stack' : 'grid'}\n            aria-label='Slides'\n            orientation={orientation}\n            ref={carouselRef}\n            className='overflow-hidden'\n        >\n            <ListBoxSection\n                className={cn(\n                    'flex',\n                    orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n                    className\n                )}\n                {...props}\n            />\n        </ListBox>\n    )\n}\n\nconst CarouselItem = ({ className, ...props }: ListBoxItemProps) => {\n    const { orientation } = useCarousel()\n\n    return (\n        <ListBoxItem\n            aria-label={`Slide ${props.id}`}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group relative min-w-0 shrink-0 grow-0 basis-full outline-hidden',\n                    orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CarouselHandler = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    const { orientation, scrollPrev, canScrollPrev, scrollNext, canScrollNext } = useCarousel()\n    return (\n        <div\n            slot='carousel-handler'\n            className={cn(\n                'relative z-10 flex items-center gap-x-2 my-4',\n                orientation === 'horizontal' ? 'justify-end' : 'justify-center',\n                className\n            )}\n            {...props}\n        >\n            <Button\n                aria-label='Previous Slide'\n                data-handler='previous'\n                className={composeRenderProps(\n                    className,\n                    (className, { isPressed, isHovered, isFocusVisible, isDisabled }) =>\n                        cn(\n                            'bg-bg border inline-flex size-8 items-center justify-center rounded-lg text-muted-fg outline-hidden',\n                            isHovered && 'bg-primary/40',\n                            isFocusVisible && 'ring-4 ring-primary/20',\n                            isPressed && 'bg-primary/50',\n                            isDisabled && 'opacity-50',\n                            orientation === 'vertical' ? 'rotate-90' : '',\n                            className\n                        )\n                )}\n                isDisabled={!canScrollPrev}\n                onPress={scrollPrev}\n            >\n                <IconChevronLeft />\n            </Button>\n            <Button\n                aria-label='Next Slide'\n                data-handler='next'\n                className={composeRenderProps(\n                    className,\n                    (className, { isPressed, isHovered, isFocusVisible, isDisabled }) =>\n                        cn(\n                            'bg-bg border inline-flex size-8 items-center justify-center rounded-lg text-muted-fg outline-hidden',\n                            isHovered && 'bg-primary/40',\n                            isFocusVisible && 'ring-4 ring-primary/20',\n                            isPressed && 'bg-primary/50',\n                            isDisabled && 'opacity-50',\n                            orientation === 'vertical' ? 'rotate-90' : '',\n                            className\n                        )\n                )}\n                isDisabled={!canScrollNext}\n                onPress={scrollNext}\n            >\n                <IconChevronRight />\n            </Button>\n        </div>\n    )\n}\n\nCarousel.Content = CarouselContent\nCarousel.Handler = CarouselHandler\nCarousel.Item = CarouselItem\n\nexport { Carousel }\nexport type { CarouselApi }\n"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCheck, IconChevronDown } from 'hq-icons'\nimport type {\n    ListBoxItemProps,\n    ListBoxSectionProps,\n    SelectProps as RACSelectProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Collection,\n    composeRenderProps,\n    Header,\n    ListBox,\n    ListBoxItem,\n    ListBoxSection,\n    Popover,\n    Select as RACSelect,\n    SelectValue,\n    Text\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport type { Placement } from '@react-types/overlays'\n\nimport { Description, FieldError, FieldProps, Label } from './field'\n\ninterface SelectProps<T extends object> extends Omit<RACSelectProps<T>, 'children'>, FieldProps {\n    className?: string\n    items?: Iterable<T>\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    placement?: Placement\n    prefix?: React.ReactNode\n}\n\nconst Select = <T extends object>({\n    label,\n    description,\n    placement,\n    errorMessage,\n    children,\n    items,\n    className,\n    ...props\n}: SelectProps<T>) => {\n    return (\n        <RACSelect\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-y-1.5 **:data-placeholder:text-muted-fg', className)\n            )}\n            {...props}\n        >\n            {({ isInvalid, isDisabled, isOpen, isFocusVisible, isFocused }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid || !!errorMessage} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <Button\n                        className={composeRenderProps(className, (className, { isHovered }) =>\n                            cn(\n                                'flex h-10 w-full cursor-default items-center gap-4 gap-x-2 rounded-lg border p-2 transition outline-hidden',\n                                {\n                                    'border-primary/70 ring-primary/20 ring-4':\n                                        isFocusVisible || isOpen || isFocused\n                                },\n                                isHovered && 'border-primary/70 invalid:border-danger/70',\n                                isInvalid && 'border-danger/70 ring-danger/20',\n                                isDisabled && 'opacity-50',\n                                className\n                            )\n                        )}\n                    >\n                        {props.prefix ? (\n                            <span className='ml-2 has-[button]:ml-0 text-muted-fg'>\n                                {props.prefix}\n                            </span>\n                        ) : null}\n                        <SelectValue className='grid grid-cols-[auto_1fr] items-center text-base **:data-avatar:-mx-0.5 **:data-avatar:mr-2 **:data-avatar:size-6 **:data-[slot=icon]:mr-2 sm:text-sm **:data-[slot=description]:hidden' />\n                        <IconChevronDown\n                            data-slot='chevron'\n                            className={cn(\n                                'text-muted-fg size-4 transition ml-auto',\n                                isOpen && '-rotate-180'\n                            )}\n                        />\n                    </Button>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                    <Popover\n                        trigger='Select'\n                        placement={placement}\n                        className={({ isEntering, isExiting }) =>\n                            cn(\n                                'group max-h-72 overflow-y-auto border p-1 shadow bg-bg w-full max-w-(--trigger-width) rounded-lg transition outline-hidden',\n                                isEntering &&\n                                    'fade-in animate-in zoom-in-95 placement-left:slide-in-from-right-2 placement-right:slide-in-from-left-2 placement-top:slide-in-from-bottom-2 placement-bottom:slide-in-from-top-2',\n                                isExiting &&\n                                    'fade-out animate-out zoom-out-95 placement-left:slide-out-to-right-2 placement-right:slide-out-to-left-2 placement-top:slide-out-to-bottom-2 placement-bottom:slide-out-to-top-2'\n                            )\n                        }\n                    >\n                        <ListBox\n                            aria-label='items'\n                            items={items}\n                            className='grid outline-hidden w-full grid-cols-[auto_1fr_1.5rem_0.5rem_auto] gap-y-1 overflow-y-auto rounded-lg'\n                        >\n                            {children}\n                        </ListBox>\n                    </Popover>\n                </>\n            )}\n        </RACSelect>\n    )\n}\n\nconst SelectItem = ({ className, children, ...props }: ListBoxItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <ListBoxItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(\n                className,\n                (className, { isHovered, isFocused, isSelected, isDisabled, isFocusVisible }) =>\n                    cn(\n                        'group relative grid grid-cols-subgrid col-span-full outline-hidden',\n                        'rounded-md px-2 py-1.5 text-base sm:text-sm/6 select-none',\n                        '**:[svg]:size-4 *:[svg]:mr-2 *:[svg]:my-1 *:data-avatar:mr-2 *:data-avatar:size-6',\n                        { 'bg-primary/10 text-primary': isFocused || isFocusVisible || isHovered },\n                        isSelected && '**:data-[slot=icon]:hidden **:data-avatar:hidden',\n                        isDisabled && 'pointer-events-none opacity-50',\n                        className\n                    )\n            )}\n        >\n            {({ isSelected }) => (\n                <>\n                    {isSelected && <IconCheck data-slot='checked' />}\n                    {typeof children === 'string' ? (\n                        <Text slot='label' className='col-start-2'>\n                            {children}\n                        </Text>\n                    ) : (\n                        children\n                    )}\n                </>\n            )}\n        </ListBoxItem>\n    )\n}\n\nconst SelectSection = <T extends object>({\n    className,\n    ...props\n}: ListBoxSectionProps<T> & { title?: string }) => (\n    <ListBoxSection\n        className={cn('col-span-full text-sm grid grid-cols-[auto_1fr] mt-2', className)}\n    >\n        {'title' in props && (\n            <Header className='text-muted-fg text-xs py-1 px-2 col-span-full pointer-events-none'>\n                {props.title}\n            </Header>\n        )}\n        <Collection items={props.items}>{props.children}</Collection>\n    </ListBoxSection>\n)\n\ninterface SelectDetailsProps extends TextProps {\n    label?: TextProps['children']\n    description?: TextProps['children']\n}\n\nconst SelectDetails = ({ label, description, ...props }: SelectDetailsProps) => {\n    const { children, title, ...restProps } = props\n    return (\n        <div data-slot='item-details' className='col-start-2 flex flex-col gap-y-1' {...restProps}>\n            {label && (\n                <Text data-slot='label' className='font-medium sm:text-sm'>\n                    {label}\n                </Text>\n            )}\n            {description && (\n                <Text data-slot='description' className='text-muted-fg text-xs' {...restProps}>\n                    {description}\n                </Text>\n            )}\n            {!title && children}\n        </div>\n    )\n}\n\nSelect.Item = SelectItem\nSelect.Details = SelectDetails\nSelect.Section = SelectSection\n\nexport { Select }\n"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconX } from 'hq-icons'\nimport { AnimatePresence, motion } from 'motion/react'\nimport type {\n    DialogProps,\n    DialogTriggerProps,\n    HeadingProps,\n    ModalOverlayProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Dialog,\n    DialogTrigger,\n    Heading,\n    ModalOverlay,\n    OverlayTriggerStateContext,\n    Modal as RACModal,\n    Text\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst Modal = motion.create(RACModal)\nconst Overlay = motion.create(ModalOverlay)\n\nconst Sheet = (props: DialogTriggerProps) => <DialogTrigger {...props} />\n\ninterface SheetContentProps\n    extends Omit<ModalOverlayProps, 'className' | 'children' | 'isDismissable'>,\n        Pick<DialogProps, 'aria-label' | 'aria-labelledby' | 'role' | 'children' | 'className'> {\n    closeButton?: boolean\n    isFloating?: boolean\n    isBlurred?: boolean\n    className?: string\n    style?: React.CSSProperties\n    side?: 'top' | 'bottom' | 'left' | 'right'\n}\n\nconst SheetContent = ({\n    side = 'right',\n    closeButton = true,\n    isFloating = false,\n    isBlurred = true,\n    children,\n    className,\n    ...props\n}: SheetContentProps) => {\n    const state = React.use(OverlayTriggerStateContext)!\n\n    return (\n        <AnimatePresence>\n            {(props?.isOpen || state?.isOpen) && (\n                <Overlay\n                    isDismissable\n                    isOpen={props?.isOpen || state?.isOpen}\n                    onOpenChange={props?.onOpenChange || state?.setOpen}\n                    initial={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    animate={{\n                        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                        backdropFilter: isBlurred ? 'blur(4px)' : 'blur(0px)'\n                    }}\n                    exit={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    className='fixed inset-0 z-50 [--visual-viewport-vertical-padding:32px] will-change-auto'\n                >\n                    {({ state }) => (\n                        <Modal\n                            className={cn(\n                                'fixed will-change-transform max-h-full touch-none bg-bg text-fg align-middle shadow-sm overflow-hidden',\n                                side === 'top' &&\n                                    `${\n                                        isFloating\n                                            ? 'top-2 inset-x-2 rounded-lg border-b-0'\n                                            : 'inset-x-0 top-0 rounded-b-2xl border-b'\n                                    }`,\n                                side === 'right' &&\n                                    `max-w-xs w-full overflow-y-auto **:[[slot=header]]:text-left ${\n                                        isFloating\n                                            ? 'inset-y-2 right-2 rounded-lg border'\n                                            : 'inset-y-0 right-0 h-auto border-l'\n                                    }`,\n                                side === 'bottom' &&\n                                    `${\n                                        isFloating\n                                            ? 'bottom-2 inset-x-2 rounded-lg border-t-0'\n                                            : 'inset-x-0 bottom-0 rounded-t-2xl border-t'\n                                    }`,\n                                side === 'left' &&\n                                    `max-w-xs w-full overflow-y-auto **:[[slot=header]]:text-left ${\n                                        isFloating\n                                            ? 'inset-y-2 left-2 rounded-lg border'\n                                            : 'inset-y-0 left-0 h-auto border-r'\n                                    }`,\n                                className\n                            )}\n                            initial={{\n                                x: side === 'left' ? '-100%' : side === 'right' ? '100%' : 0,\n                                y: side === 'top' ? '-100%' : side === 'bottom' ? '100%' : 0\n                            }}\n                            animate={{ x: 0, y: 0 }}\n                            exit={{\n                                x: side === 'left' ? '-100%' : side === 'right' ? '100%' : 0,\n                                y: side === 'top' ? '-100%' : side === 'bottom' ? '100%' : 0\n                            }}\n                            drag={side === 'left' || side === 'right' ? 'x' : 'y'}\n                            whileDrag={{ cursor: 'grabbing' }}\n                            dragConstraints={{ top: 0, bottom: 0, left: 0, right: 0 }}\n                            dragTransition={{ bounceStiffness: 600, bounceDamping: 20 }}\n                            transition={{ duration: 0.15, ease: 'easeInOut' }}\n                            onDragEnd={(_, { offset, velocity }) => {\n                                if (\n                                    side === 'bottom' &&\n                                    (velocity.y > 150 || offset.y > screen.height * 0.25)\n                                ) {\n                                    state.close()\n                                }\n                                if (\n                                    side === 'top' &&\n                                    (velocity.y < -150 || offset.y < screen.height * 0.25)\n                                ) {\n                                    state.close()\n                                }\n                                if (side === 'left' && velocity.x < -150) {\n                                    state.close()\n                                }\n                                if (side === 'right' && velocity.x > 150) {\n                                    state.close()\n                                }\n                            }}\n                            dragElastic={{\n                                top: side === 'top' ? 1 : 0,\n                                bottom: side === 'bottom' ? 1 : 0,\n                                left: side === 'left' ? 1 : 0,\n                                right: side === 'right' ? 1 : 0\n                            }}\n                            dragPropagation\n                        >\n                            <Dialog\n                                aria-label='Sheet'\n                                role='dialog'\n                                className={cn(\n                                    'relative flex flex-col overflow-hidden outline-hidden will-change-auto',\n                                    side === 'top' || side === 'bottom'\n                                        ? 'max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))]'\n                                        : 'max-h-full'\n                                )}\n                            >\n                                {children as React.ReactNode}\n                                {closeButton && (\n                                    <Button\n                                        aria-label='Close'\n                                        slot='close'\n                                        className={({ isPressed, isHovered, isFocusVisible }) =>\n                                            cn(\n                                                'absolute top-2 right-2 bg-bg shrink-0 inline-flex size-8 items-center justify-center rounded-md text-muted-fg outline-hidden',\n                                                isHovered && 'bg-muted/40',\n                                                isFocusVisible && 'ring-4 ring-primary/20',\n                                                isPressed && 'bg-muted/50'\n                                            )\n                                        }\n                                    >\n                                        <IconX />\n                                    </Button>\n                                )}\n                            </Dialog>\n                        </Modal>\n                    )}\n                </Overlay>\n            )}\n        </AnimatePresence>\n    )\n}\n\nconst Header = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='header'\n            className={cn('flex flex-col p-4 sm:text-left text-center', className)}\n            {...props}\n        />\n    )\n}\n\nconst Title = ({ className, ...props }: HeadingProps) => (\n    <Heading slot='title' className={cn('font-semibold text-lg/8', className)} {...props} />\n)\n\nconst Description = ({ className, ...props }: TextProps) => (\n    <Text slot='description' className={cn('text-muted-fg text-sm', className)} {...props} />\n)\n\nconst Body = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        slot='body'\n        className={cn(\n            'isolate will-change-scroll flex flex-col overflow-auto px-4 py-1 max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))]',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='footer'\n            className={cn(\n                'isolate flex sm:flex-row flex-col-reverse justify-end gap-2 mt-auto p-4',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nSheet.Trigger = Button\nSheet.Footer = Footer\nSheet.Header = Header\nSheet.Title = Title\nSheet.Description = Description\nSheet.Body = Body\nSheet.Content = SheetContent\n\nexport { Sheet }\n"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport type { SeparatorProps } from 'react-aria-components'\nimport { Separator as RACSeparator } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst Separator = ({\n    className,\n    children,\n    ...props\n}: SeparatorProps & { children?: React.ReactNode }) => {\n    return children ? (\n        <div\n            className={cn(\n                'text-sm text-muted-fg leading-6 before:border-muted after:border-muted',\n                props.orientation === 'vertical'\n                    ? 'h-full self-stretch mx-2 flex flex-col items-center before:mb-2 before:flex-1 before:border-l after:mt-2 after:flex-1 after:border-r'\n                    : 'h-px w-full self-stretch my-2 flex items-center before:mr-2 before:flex-1 before:border-t after:ml-2 after:flex-1 after:border-t',\n                className\n            )}\n        >\n            {children}\n        </div>\n    ) : (\n        <RACSeparator\n            {...props}\n            className={cn(\n                'bg-border shrink-0',\n                props.orientation === 'vertical' ? 'w-px h-full' : 'h-px w-full',\n                className\n            )}\n        />\n    )\n}\n\nexport { Separator }\n"
  },
  "description-list": {
    "component": "@/components/ui/description-list",
    "raw": "import { cn } from '@/lib/utils'\n\nconst DL = ({ className, ...props }: React.HTMLAttributes<HTMLDListElement>) => {\n    return (\n        <dl\n            className={cn(\n                'grid grid-cols-1 text-base/6 sm:grid-cols-[min(50%,calc(var(--spacing)*80))_auto] sm:text-sm/6',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst DT = ({ className, ...props }: React.HTMLAttributes<HTMLDetailsElement>) => {\n    return (\n        <dt\n            className={cn(\n                'text-muted-fg col-start-1 border-t pt-3 first:border-none sm:py-3',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst DD = ({ className, ...props }: React.HTMLAttributes<HTMLDetailsElement>) => {\n    return (\n        <dd\n            className={cn('text-fg pt-1 pb-3 sm:border-t sm:py-3 sm:nth-2:border-none', className)}\n            {...props}\n        />\n    )\n}\n\nDL.T = DT\nDL.D = DD\nexport { DL }\n"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport { IconCircleAlert } from 'hq-icons'\nimport { motion } from 'motion/react'\nimport { Meter as RACMeter, type MeterProps as RACMeterProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Label } from './field'\n\ninterface MeterProps extends RACMeterProps {\n    label?: string\n}\n\nconst Meter = ({ label, className, ...props }: MeterProps) => {\n    return (\n        <RACMeter {...props} className={cn('flex flex-col gap-y-1.5', className)}>\n            {({ percentage, valueText }) => (\n                <>\n                    <div className='flex w-full justify-between gap-2'>\n                        {label && <Label>{label}</Label>}\n                        <span\n                            className={`text-sm flex items-center tabular-nums ${percentage >= 80 ? 'text-danger' : 'text-muted-fg'}`}\n                        >\n                            {percentage >= 80 && (\n                                <IconCircleAlert\n                                    aria-label='Alert'\n                                    className='fill-danger/20 inline text-danger size-4 mr-1'\n                                />\n                            )}\n                            {valueText}\n                        </span>\n                    </div>\n                    <div className='bg-muted relative h-2 min-w-64 rounded-lg outline-hidden'>\n                        <motion.div\n                            className='absolute top-0 left-0 h-full rounded-full'\n                            initial={{ width: '0%', backgroundColor: 'transparent' }}\n                            animate={{\n                                width: `${percentage}%`,\n                                backgroundColor: getColor(percentage)\n                            }}\n                            transition={{ duration: 1.5 }}\n                        />\n                    </div>\n                </>\n            )}\n        </RACMeter>\n    )\n}\n\nconst getColor = (percentage: number) => {\n    if (percentage < 25) {\n        return 'var(--info)'\n    } else if (percentage < 50) {\n        return 'var(--success)'\n    } else if (percentage < 75) {\n        return 'var(--warning)'\n    } else return 'var(--danger)'\n}\n\nexport { Meter }\n"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport type {\n    RadioGroupProps as RACRadioGroupProps,\n    RadioProps as RACRadioProps\n} from 'react-aria-components'\nimport {\n    Radio as RACRadio,\n    RadioGroup as RACRadioGroup,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, FieldProps, Label } from './field'\n\ninterface RadioGroupProps extends Omit<RACRadioGroupProps, 'children'>, FieldProps {\n    children?: React.ReactNode\n}\n\nconst RadioGroup = ({ label, description, errorMessage, children, ...props }: RadioGroupProps) => {\n    return (\n        <RACRadioGroup\n            {...props}\n            className={composeRenderProps(props.className, (className) =>\n                cn('group flex flex-col gap-2', className)\n            )}\n        >\n            {composeRenderProps(children, (children, { isInvalid, isDisabled, orientation }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <div\n                        className={cn(\n                            'flex select-none',\n                            orientation === 'horizontal'\n                                ? 'flex-wrap gap-2 sm:gap-4'\n                                : 'flex-col gap-2'\n                        )}\n                    >\n                        {children}\n                    </div>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            ))}\n        </RACRadioGroup>\n    )\n}\n\ninterface RadioProps\n    extends RACRadioProps,\n        Omit<FieldProps, 'children' | 'placeholder' | 'errorMessage'> {\n    ref?: React.Ref<HTMLLabelElement>\n    children?: React.ReactNode\n}\n\nconst Radio = ({ label, description, className, children, ref, ...props }: RadioProps) => {\n    return (\n        <RACRadio\n            ref={ref}\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'group flex items-center gap-2 text-sm transition',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n            {...props}\n        >\n            {({ isSelected, isFocused, isInvalid }) => (\n                <div\n                    className={cn('flex gap-2 items-center', {\n                        'items-start': description\n                    })}\n                >\n                    <div\n                        className={cn(\n                            'size-4 shrink-0 rounded-full border bg-bg transition',\n                            isSelected\n                                ? 'border-[5px] border-primary bg-bg group-invalid:border-danger'\n                                : 'border-muted group-hover:border-primary/70 group-hover:bg-primary/10',\n                            isFocused &&\n                                'border-primary ring-primary/20 ring-4 group-invalid:border-danger group-invalid:ring-danger/20',\n                            isInvalid &&\n                                'border-danger/70 ring-danger/20 group-hover:border-danger/70'\n                        )}\n                    />\n                    <div className='flex flex-col'>\n                        <Label\n                            isInvalid={isInvalid}\n                            isDisabled={props.isDisabled}\n                            className='not-last:text-sm/4'\n                        >\n                            {label ?? children}\n                        </Label>\n                        {description && <Description>{description}</Description>}\n                    </div>\n                </div>\n            )}\n        </RACRadio>\n    )\n}\n\nexport { Radio, RadioGroup }\n"
  },
  "container": {
    "component": "@/components/ui/container",
    "raw": "import { tv } from 'tailwind-variants'\n\nconst containerStyles = tv({\n    base: '@container mx-auto w-full max-w-7xl lg:max-w-(--breakpoint-xl) 2xl:max-w-(--breakpoint-2xl)',\n    variants: {\n        variant: {\n            constrained: 'sm:px-6 lg:px-8',\n            'padded-content': 'px-4 sm:px-6 lg:px-8'\n        }\n    },\n    defaultVariants: {\n        variant: 'padded-content'\n    }\n})\n\ninterface ContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n    variant?: 'constrained' | 'padded-content'\n    ref?: React.Ref<HTMLDivElement>\n}\n\nconst Container = ({ className, variant, ref, ...props }: ContainerProps) => (\n    <div className={containerStyles({ variant, className })} {...props} ref={ref} />\n)\n\nexport { Container }\nexport type { ContainerProps }\n"
  },
  "collections": {
    "component": "@/components/ui/collections",
    "raw": "'use client'\n\nimport {\n    type DragAndDropOptions,\n    DropIndicator,\n    type DropOperation,\n    isTextDropItem,\n    useDragAndDrop\n} from 'react-aria-components'\nimport { ListData, ListOptions, useListData as RACListData } from 'react-stately'\n\nconst useList = <T extends object>(options: ListOptions<T>) => RACListData(options)\nconst useDND = <T extends object>({\n    list,\n    operation = 'move'\n}: {\n    list: ListData<T & { name: string }>\n    operation?: DropOperation\n    DragAndDropOptions?: DragAndDropOptions\n}) =>\n    useDragAndDrop({\n        getItems: (items) =>\n            [...items].map((item) => ({\n                'text/plain': list.getItem(item)?.name ?? '',\n                'custom-app-type': JSON.stringify(list.getItem(item as string)!)\n            })),\n        onReorder: (e) => {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        },\n        acceptedDragTypes: ['custom-app-type'],\n        getDropOperation: () => operation,\n        onInsert: async (e) => {\n            const processedItems = await Promise.all(\n                e.items\n                    .filter(isTextDropItem)\n                    .map(async (item) => JSON.parse(await item.getText('custom-app-type')))\n            )\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...processedItems)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...processedItems)\n            }\n        },\n        onRootDrop: async (e) => {\n            const processedItems = await Promise.all(\n                e.items\n                    .filter(isTextDropItem)\n                    .map(async (item) => JSON.parse(await item.getText('custom-app-type')))\n            )\n            list.append(...processedItems)\n        },\n        onDragEnd: (e) => {\n            if (e.dropOperation === 'move' && !e.isInternal) {\n                list.remove(...e.keys)\n            }\n        },\n        renderDropIndicator: (e) => (\n            <DropIndicator\n                target={e}\n                className={({ isDropTarget }) =>\n                    isDropTarget ? 'outline outline-primary col-span-full rounded-md' : ''\n                }\n            />\n        ),\n        renderDragPreview: (items) => (\n            <ul className='rounded-md bg-primary p-2 text-primary-fg w-full'>\n                {items.map((item, i) => (\n                    <li className='text-sm' key={i}>\n                        {i + 1}. {item['text/plain']}\n                    </li>\n                ))}\n            </ul>\n        )\n    })\n\nexport { useDND, useList }\n"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconX } from 'hq-icons'\nimport { AnimatePresence, motion } from 'motion/react'\nimport type {\n    DialogProps,\n    DialogTriggerProps,\n    HeadingProps,\n    ModalOverlayProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Dialog,\n    DialogTrigger,\n    Heading,\n    ModalOverlay,\n    OverlayTriggerStateContext,\n    Modal as RACModal,\n    Text\n} from 'react-aria-components'\n\nimport { useMediaQuery } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\n\nconst MModal = motion.create(RACModal)\nconst Overlay = motion.create(ModalOverlay)\n\nconst Modal = (props: DialogTriggerProps) => <DialogTrigger {...props} />\n\ninterface ModalContentProps\n    extends Omit<ModalOverlayProps, 'className' | 'children'>,\n        Pick<DialogProps, 'aria-label' | 'aria-labelledby' | 'role' | 'children' | 'className'> {\n    closeButton?: boolean\n    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | 'full'\n    style?: React.CSSProperties\n    respectScreen?: boolean\n    drawer?: boolean\n    notch?: boolean\n}\n\nconst Content = ({\n    isDismissable: isDismissableInternal,\n    className,\n    children,\n    size = 'lg',\n    role = 'dialog',\n    closeButton = true,\n    notch = false,\n    respectScreen = true,\n    drawer = false,\n    ...props\n}: ModalContentProps) => {\n    const isDismissable = isDismissableInternal ?? role !== 'alertdialog'\n    const isMobile = useMediaQuery('(max-width: 768px)') || drawer\n    const isDesktop = respectScreen ? !isMobile : true\n    const state = React.use(OverlayTriggerStateContext)!\n    return (\n        <AnimatePresence>\n            {(props?.isOpen || state?.isOpen) && (\n                <Overlay\n                    isDismissable={isDismissable}\n                    isOpen={props?.isOpen || state?.isOpen}\n                    onOpenChange={props?.onOpenChange || state?.setOpen}\n                    initial={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    animate={{ backgroundColor: 'rgba(0, 0, 0, 0.5)', backdropFilter: 'blur(4px)' }}\n                    exit={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    className='fixed inset-0 z-10 [--visual-viewport-vertical-padding:32px] will-change-auto'\n                    {...props}\n                >\n                    {({ state }) => (\n                        <MModal\n                            isDismissable={isDismissable}\n                            className={cn(\n                                'absolute max-h-full w-full touch-none overflow-hidden bg-bg align-middle text-fg shadow-sm will-change-transform',\n                                isDesktop\n                                    ? 'rounded-lg border left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2'\n                                    : 'rounded-t-2xl border-t bottom-0',\n                                {\n                                    'max-w-xs': size === 'xs' && isDesktop,\n                                    'max-w-sm': size === 'sm' && isDesktop,\n                                    'max-w-md': size === 'md' && isDesktop,\n                                    'max-w-lg': size === 'lg' && isDesktop,\n                                    'max-w-xl': size === 'xl' && isDesktop,\n                                    'max-w-2xl': size === '2xl' && isDesktop,\n                                    'max-w-3xl': size === '3xl' && isDesktop,\n                                    'max-w-4xl': size === '4xl' && isDesktop,\n                                    'max-w-5xl': size === '5xl' && isDesktop,\n                                    'max-w-full h-svh': size === 'full' && isDesktop\n                                },\n                                className\n                            )}\n                            drag={!isDesktop && isDismissable ? 'y' : false}\n                            initial={{\n                                y: isDesktop ? 0 : '100%',\n                                scale: isDesktop ? 0.9 : 1,\n                                opacity: 0\n                            }}\n                            animate={{ y: 0, scale: 1, opacity: 1 }}\n                            exit={{\n                                y: isDesktop ? 0 : '100%',\n                                scale: isDesktop ? 0.9 : 1,\n                                opacity: 0\n                            }}\n                            transition={{ duration: 0.15, ease: 'easeInOut' }}\n                            dragTransition={{ bounceStiffness: 600, bounceDamping: 20 }}\n                            dragPropagation\n                            dragConstraints={{ top: 0, bottom: 0, left: 0, right: 0 }}\n                            onDragEnd={(_, { offset, velocity }) => {\n                                if (offset.y > screen.availHeight * 0.25 || velocity.y > 100) {\n                                    state.close()\n                                }\n                            }}\n                            {...props}\n                        >\n                            <Dialog\n                                aria-label='Modal'\n                                role={role}\n                                className='relative flex flex-col max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] overflow-hidden outline-hidden'\n                            >\n                                {notch && isMobile && (\n                                    <div className='w-full mt-2'>\n                                        <div className='mx-auto w-12 h-1.5 rounded-full bg-muted' />\n                                    </div>\n                                )}\n                                {children as React.ReactNode}\n                                {closeButton && isDesktop && (\n                                    <Button\n                                        slot='close'\n                                        aria-label='Close'\n                                        className={({ isPressed, isHovered, isFocusVisible }) =>\n                                            cn(\n                                                'absolute top-2 right-2 bg-bg shrink-0 inline-flex size-8 items-center justify-center rounded-md text-muted-fg outline-hidden',\n                                                isHovered && 'bg-muted/40',\n                                                isFocusVisible && 'ring-4 ring-primary/20',\n                                                isPressed && 'bg-muted/50'\n                                            )\n                                        }\n                                    >\n                                        <IconX />\n                                    </Button>\n                                )}\n                            </Dialog>\n                        </MModal>\n                    )}\n                </Overlay>\n            )}\n        </AnimatePresence>\n    )\n}\n\nconst Header = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='header'\n            className={cn('flex flex-col p-4 sm:p-6 sm:text-left text-center', className)}\n            {...props}\n        />\n    )\n}\n\nconst Title = ({ className, ...props }: HeadingProps) => (\n    <Heading slot='title' className={cn('font-semibold text-xl/8', className)} {...props} />\n)\n\nconst Description = ({ className, ...props }: TextProps) => (\n    <Text slot='description' className={cn('text-muted-fg', className)} {...props} />\n)\n\nconst Body = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        slot='body'\n        className={cn(\n            'isolate flex flex-col overflow-auto px-4 sm:px-6 py-1 max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))]',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div\n            slot='footer'\n            className={cn(\n                'isolate flex sm:flex-row flex-col-reverse justify-center sm:justify-end gap-2 mt-auto p-4 sm:p-6',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nModal.Trigger = Button\nModal.Header = Header\nModal.Title = Title\nModal.Description = Description\nModal.Footer = Footer\nModal.Body = Body\nModal.Content = Content\n\nexport { Modal }\n"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    Switch as RACSwitch,\n    type SwitchProps as RACSwitchProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Label } from './field'\n\ninterface SwitchProps extends RACSwitchProps {\n    ref?: React.RefObject<HTMLLabelElement>\n}\n\nconst Switch = ({ children, className, ref, ...props }: SwitchProps) => {\n    return (\n        <RACSwitch\n            ref={ref}\n            className={composeRenderProps(className, (className) =>\n                cn('group inline-flex touch-none items-center sm:text-sm', className)\n            )}\n            {...props}\n        >\n            {({ isSelected, isFocused, isFocusVisible, isDisabled, isPressed }) => (\n                <>\n                    <span\n                        className={cn(\n                            'mr-2 inline-flex h-5 w-8 items-center rounded-xl border-2 border-transparent bg-muted transition',\n                            { 'ring-4 ring-primary/20': isFocused || isFocusVisible },\n                            isSelected && 'bg-primary',\n                            isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer'\n                        )}\n                    >\n                        <span\n                            className={cn(\n                                'bg-primary-fg block size-4 origin-right rounded-lg shadow-sm transition',\n                                isSelected && 'ml-3',\n                                isPressed && 'w-5',\n                                isSelected && isPressed && 'ml-2'\n                            )}\n                        />\n                    </span>\n                    <Label>{children as React.ReactNode}</Label>\n                </>\n            )}\n        </RACSwitch>\n    )\n}\n\nexport { Switch }\n"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\n\nimport { IconCalendarDays } from 'hq-icons'\nimport {\n    Button,\n    composeRenderProps,\n    DatePicker as RACDatePicker,\n    type DateValue,\n    type DatePickerProps as RACDatePickerProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Calendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, FieldProps, Label } from './field'\nimport { Popover } from './popover'\n\ninterface DatePickerProps<T extends DateValue> extends RACDatePickerProps<T>, FieldProps {}\n\nconst DatePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DatePickerProps<T>) => {\n    return (\n        <RACDatePicker\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isOpen, isInvalid, isDisabled }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <FieldGroup className='min-w-40'>\n                        <DateInput className='w-full px-2 text-base lg:text-sm' />\n                        <Button className='mr-1 cursor-pointer size-8 rounded-lg outline-hidden inline-flex items-center justify-center'>\n                            <IconCalendarDays\n                                aria-hidden\n                                className={cn('size-4', isOpen ? 'text-primary' : 'text-muted-fg')}\n                            />\n                        </Button>\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                    <Popover.Content showArrow={false} className='p-4'>\n                        <Calendar />\n                        <Button\n                            type='button'\n                            slot='close'\n                            className='mt-2 w-full sm:hidden rounded-lg p-2 text-center border hover:bg-primary/40 pressed:bg-primary/50'\n                        >\n                            Close\n                        </Button>\n                    </Popover.Content>\n                </>\n            )}\n        </RACDatePicker>\n    )\n}\n\nexport { DatePicker }\n"
  },
  "keyboard": {
    "component": "@/components/ui/keyboard",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Keyboard as RACKeyboard } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst Keyboard = ({\n    keys,\n    className,\n    ...props\n}: React.ComponentProps<typeof RACKeyboard> & { keys: string | string[] }) => {\n    return (\n        <RACKeyboard\n            className={cn(\n                'hidden text-current/70 group-hover:text-fg group-focus:text-fg group-focus:opacity-90 group-disabled:opacity-50 sm:inline-flex',\n                className\n            )}\n            {...props}\n        >\n            {(Array.isArray(keys) ? keys : keys.split('')).map((char, index) => (\n                <kbd\n                    key={index}\n                    className='inline-grid min-h-5 w-fit place-content-center rounded-lg text-center font-sans text-xs uppercase'\n                >\n                    {char}\n                </kbd>\n            ))}\n        </RACKeyboard>\n    )\n}\n\nexport { Keyboard }\n"
  },
  "color-swatch-picker": {
    "component": "@/components/ui/color-swatch-picker",
    "raw": "'use client'\n\nimport type { ColorSwatchPickerItemProps, ColorSwatchPickerProps } from 'react-aria-components'\nimport {\n    ColorSwatchPickerItem,\n    composeRenderProps,\n    ColorSwatchPicker as RACColorSwatchPicker\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { ColorSwatch } from './color-swatch'\n\nconst ColorSwatchPicker = ({\n    children,\n    className,\n    layout = 'grid',\n    ...props\n}: ColorSwatchPickerProps) => {\n    return (\n        <RACColorSwatchPicker\n            layout={layout}\n            className={composeRenderProps(className, (className) => cn('flex gap-1', className))}\n            {...props}\n        >\n            {children}\n        </RACColorSwatchPicker>\n    )\n}\n\nconst SwatchPickerItem = ({ className, ...props }: ColorSwatchPickerItemProps) => {\n    return (\n        <ColorSwatchPickerItem\n            {...props}\n            className={composeRenderProps(\n                className,\n                (className, { isDisabled, isFocusVisible, isFocused }) =>\n                    cn(\n                        'relative rounded-lg disabled:opacity-50',\n                        isFocused && 'ring-primary/20 ring-4',\n                        isFocusVisible && 'ring-primary/20 ring-4',\n                        isDisabled && 'opacity-50',\n                        className\n                    )\n            )}\n        >\n            {({ isSelected }) => (\n                <>\n                    <ColorSwatch />\n                    {isSelected && (\n                        <div className='ring-fg/30 absolute top-0 left-0 h-full w-full rounded-lg ring-2 outline-hidden ring-inset' />\n                    )}\n                </>\n            )}\n        </ColorSwatchPickerItem>\n    )\n}\n\nColorSwatchPicker.Item = SwatchPickerItem\n\nexport { ColorSwatchPicker }\n"
  },
  "spoiler": {
    "component": "@/components/ui/spoiler",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown } from 'hq-icons'\nimport { AnimatePresence, motion } from 'motion/react'\n\nimport { cn } from '@/lib/utils'\n\nimport { Button } from './button'\n\ninterface SpoilerProps {\n    initialHeight?: number\n    initialOpacity?: number\n    showMoreText?: string\n    showLessText?: string\n    gradientTransparency?: boolean\n    className?: string\n    children: React.ReactNode\n}\n\nfunction Spoiler({\n    children,\n    initialHeight = 0,\n    initialOpacity = 0,\n    showMoreText = 'Show More',\n    showLessText = 'Show Less',\n    gradientTransparency = true,\n    className\n}: SpoilerProps) {\n    const [isExpanded, setIsExpanded] = React.useState(false)\n    const animate = {\n        transition: { type: 'tween' },\n        height: isExpanded ? 'auto' : initialHeight,\n        opacity: isExpanded ? 1 : initialOpacity\n    }\n    return (\n        <div className={cn('relative overflow-visible', className)}>\n            <AnimatePresence initial={false}>\n                <div aria-expanded={isExpanded}>\n                    <motion.div\n                        style={{ overflow: 'hidden' }}\n                        initial={{ height: initialHeight, opacity: initialOpacity }}\n                        exit={{ height: initialHeight, opacity: initialOpacity }}\n                        animate={animate}\n                    >\n                        {children}\n                    </motion.div>\n                </div>\n            </AnimatePresence>\n            {gradientTransparency && (\n                <div\n                    className={cn(\n                        'via-bg to-bg absolute inset-0 rounded-lg bg-gradient-to-b from-transparent',\n                        isExpanded && 'hidden'\n                    )}\n                />\n            )}\n            <Button\n                variant='outline'\n                size='sm'\n                className={cn('absolute left-1/2 -translate-x-1/2 w-fit -bottom-4')}\n                onPress={() => setIsExpanded(!isExpanded)}\n            >\n                {isExpanded ? showLessText : showMoreText}\n                <IconChevronDown className={cn('size-4 transition', isExpanded && '-rotate-180')} />\n            </Button>\n        </div>\n    )\n}\n\nexport { Spoiler }\n"
  },
  "progress": {
    "component": "@/components/ui/progress",
    "raw": "'use client'\n\nimport { motion } from 'motion/react'\nimport { composeRenderProps, ProgressBar, type ProgressBarProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Label } from './field'\n\ninterface ProgressProps extends ProgressBarProps {\n    label?: string\n    ref?: React.RefObject<HTMLDivElement>\n    circle?: boolean\n    variant?: 'primary' | 'secondary' | 'warning' | 'danger' | 'info' | 'success' | 'dark'\n}\n\nconst Progress = ({\n    label,\n    ref,\n    circle,\n    variant = 'primary',\n    className,\n    ...props\n}: ProgressProps) => {\n    return (\n        <ProgressBar\n            ref={ref}\n            className={composeRenderProps(className, (className) =>\n                cn('flex flex-col gap-y-1.5', className)\n            )}\n            {...props}\n        >\n            {({ percentage, valueText, isIndeterminate }) => (\n                <>\n                    {circle ? (\n                        <svg\n                            aria-label={label ?? 'Progress'}\n                            className={cn(\n                                'size-20 shrink-0',\n                                `text-${variant === 'dark' ? 'fg' : variant}`,\n                                className\n                            )}\n                            viewBox='0 0 32 32'\n                            fill='none'\n                        >\n                            <circle\n                                cx='50%'\n                                cy='50%'\n                                r='calc(50% - 2px)'\n                                strokeWidth={3}\n                                stroke='currentColor'\n                                strokeOpacity={0.25}\n                            />\n                            <circle\n                                cx='50%'\n                                cy='50%'\n                                r='calc(50% - 2px)'\n                                strokeWidth={3}\n                                stroke='currentColor'\n                                pathLength={100}\n                                strokeDasharray='100 200'\n                                strokeDashoffset={100 - (percentage ?? 30)}\n                                strokeLinecap='round'\n                                className={cn(\n                                    'origin-center',\n                                    isIndeterminate\n                                        ? 'animate-[spin_1s_cubic-bezier(0.4,_0,_0.2,_1)_infinite]'\n                                        : '-rotate-90'\n                                )}\n                            />\n                            {!isIndeterminate && (\n                                <text\n                                    x='50%'\n                                    y='50%'\n                                    textAnchor='middle'\n                                    dy='.35em'\n                                    fontSize='calc(50% + 1px)'\n                                    className='fill-current'\n                                >\n                                    {valueText}\n                                </text>\n                            )}\n                        </svg>\n                    ) : (\n                        <>\n                            <div className='flex justify-between gap-2'>\n                                {label && <Label>{label}</Label>}\n                                {valueText && (\n                                    <span className='text-muted-fg text-sm tabular-nums'>\n                                        {valueText}\n                                    </span>\n                                )}\n                            </div>\n                            <div className='bg-muted relative h-2 min-w-64 overflow-hidden rounded-lg outline-hidden'>\n                                <motion.div\n                                    className={cn(\n                                        'absolute top-0 left-0 h-full rounded-full',\n                                        `bg-${variant === 'dark' ? 'fg' : variant}`\n                                    )}\n                                    initial={{\n                                        width: `${isIndeterminate ? '50%' : '0%'}`,\n                                        left: '0%'\n                                    }}\n                                    animate={{\n                                        width: `${percentage}%`,\n                                        left: isIndeterminate ? ['-100%', '100%'] : '0%'\n                                    }}\n                                    transition={{\n                                        duration: 1.5,\n                                        ease: 'easeInOut',\n                                        repeat: isIndeterminate ? Infinity : 0\n                                    }}\n                                />\n                            </div>\n                        </>\n                    )}\n                </>\n            )}\n        </ProgressBar>\n    )\n}\n\nexport { Progress }\n"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport { IconGripVertical } from 'hq-icons'\nimport type { GridListItemProps, GridListProps as RACGridListProps } from 'react-aria-components'\nimport {\n    Button,\n    composeRenderProps,\n    GridList as RACGridList,\n    GridListItem as RACGridListItem\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Checkbox } from './checkbox'\n\ninterface GridListProps<T extends object> extends Omit<RACGridListProps<T>, 'layout'> {\n    columns?: 1 | 2 | 3 | 4 | 5 | 6 | 'auto'\n    gap?: 0 | 1 | 2 | 3 | 4 | 5 | 6\n}\n\nconst GridList = <T extends object>({\n    children,\n    className,\n    columns = 1,\n    gap = 0,\n    ...props\n}: GridListProps<T>) => (\n    <RACGridList\n        layout={columns === 1 && gap === 0 ? 'stack' : 'grid'}\n        className={composeRenderProps(className, (className, { layout }) =>\n            cn(\n                layout === 'stack'\n                    ? 'grid grid-cols-1 gap-0 *:rounded-none *:first:rounded-t-lg *:last:rounded-b-lg'\n                    : `${columns === 'auto' ? 'flex flex-wrap grow' : `grid grid-cols-${columns}`}`,\n                `gap-${gap}`,\n                className\n            )\n        )}\n        {...props}\n    >\n        {children}\n    </RACGridList>\n)\n\nconst GridListItem = ({ className, children, ...props }: GridListItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n    return (\n        <RACGridListItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(\n                className,\n                (className, { isHovered, isSelected, isFocusVisible, isDisabled }) =>\n                    cn(\n                        'flex items-center text-fg gap-2 border px-3 py-2 outline-hidden transition select-none sm:text-sm rounded-lg',\n                        isHovered && 'bg-primary/10',\n                        {\n                            'border-primary/70 bg-primary/10 text-primary':\n                                isSelected || isFocusVisible\n                        },\n                        isDisabled && 'opacity-50',\n                        className\n                    )\n            )}\n        >\n            {({ selectionMode, selectionBehavior, allowsDragging, isDragging }) => (\n                <>\n                    {allowsDragging && (\n                        <Button\n                            slot='drag'\n                            className={cn(\n                                'text-muted-fg cursor-grab',\n                                isDragging && 'cursor-grabbing'\n                            )}\n                        >\n                            <IconGripVertical />\n                        </Button>\n                    )}\n                    {selectionMode === 'multiple' && selectionBehavior === 'toggle' && (\n                        <Checkbox slot='selection' />\n                    )}\n                    {children}\n                </>\n            )}\n        </RACGridListItem>\n    )\n}\n\nGridList.Item = GridListItem\n\nexport { GridList }\n"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport { composeRenderProps, Link as RACLink, type LinkProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst Link = (props: LinkProps) => {\n    return (\n        <RACLink\n            {...props}\n            className={composeRenderProps(\n                props.className,\n                (className, { isDisabled, isFocusVisible }) =>\n                    cn(\n                        'relative text-sm cursor-pointer rounded-lg transition',\n                        isFocusVisible && 'ring-2 ring-offset-2 ring-primary',\n                        isDisabled && 'cursor-default opacity-50',\n                        className\n                    )\n            )}\n        />\n    )\n}\n\nexport { Link }\n"
  },
  "color-swatch": {
    "component": "@/components/ui/color-swatch",
    "raw": "'use client'\n\nimport type { ColorSwatchProps } from 'react-aria-components'\nimport { ColorSwatch as RACColorSwatch, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { parseColor } from '@react-stately/color'\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n    const normalizeHex = hex.replace(\n        /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n        (_m, r, g, b) => r + r + g + g + b + b\n    )\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(normalizeHex)\n    return result\n        ? {\n              r: Number.parseInt(result[1]!, 16),\n              g: Number.parseInt(result[2]!, 16),\n              b: Number.parseInt(result[3]!, 16)\n          }\n        : null\n}\n\nconst hsbToRgb = (h: number, s: number, b: number): { r: number; g: number; b: number } => {\n    const saturation = s / 100\n    const brightness = b / 100\n    const k = (n: number) => (n + h / 60) % 6\n    const f = (n: number) =>\n        brightness * (1 - saturation * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n    return {\n        r: Math.round(255 * f(5)),\n        g: Math.round(255 * f(3)),\n        b: Math.round(255 * f(1))\n    }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n    const a = [r, g, b].map((v) => {\n        const normalized = v / 255\n        return normalized <= 0.03928 ? normalized / 12.92 : ((normalized + 0.055) / 1.055) ** 2.4\n    })\n    return a[0]! * 0.2126 + a[1]! * 0.7152 + a[2]! * 0.0722\n}\n\ntype HSBColor = {\n    hue: number\n    saturation: number\n    brightness: number\n}\n\nconst isBrightColor = (color: string | HSBColor): boolean => {\n    let r: number\n    let g: number\n    let b: number\n\n    if (typeof color === 'string') {\n        if (color.startsWith('#')) {\n            const rgb = hexToRgb(color)\n            if (rgb) {\n                r = rgb.r\n                g = rgb.g\n                b = rgb.b\n            } else {\n                return false\n            }\n        } else if (color.startsWith('rgb')) {\n            const rgbValues = color.match(/\\d+/g)\n            if (rgbValues) {\n                r = Number.parseInt(rgbValues[0]!, 10)\n                g = Number.parseInt(rgbValues[1]!, 10)\n                b = Number.parseInt(rgbValues[2]!, 10)\n            } else {\n                return false\n            }\n        } else {\n            const namedColors: Record<string, string> = {\n                white: '#ffffff',\n                black: '#000000'\n            }\n            const hex = namedColors[color.toLowerCase()]\n            if (hex) {\n                const rgb = hexToRgb(hex)\n                if (rgb) {\n                    r = rgb.r\n                    g = rgb.g\n                    b = rgb.b\n                } else {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n    } else if (\n        typeof color === 'object' &&\n        'hue' in color &&\n        'saturation' in color &&\n        'brightness' in color\n    ) {\n        const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n    } else {\n        return false\n    }\n\n    const lum = luminance(r, g, b)\n    return lum > 0.5\n}\n\nconst defaultColor = parseColor('hsl(216, 98%, 52%)')\n\nconst ColorSwatch = ({ className, ...props }: ColorSwatchProps) => {\n    const color = props.color?.toString() ?? ''\n    const ring = color ? isBrightColor(color) : false\n    return (\n        <RACColorSwatch\n            data-slot='color-swatch'\n            aria-label={props['aria-label'] ?? 'Color swatch'}\n            className={composeRenderProps(className, (className) =>\n                cn('size-8 shrink-0 rounded-lg', ring && 'inset-ring-fg/10 inset-ring-1', className)\n            )}\n            {...props}\n        />\n    )\n}\n\nexport { ColorSwatch, defaultColor, isBrightColor }\n"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import React from 'react'\n\nimport { cn } from '@/lib/utils'\n\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n    shape?: 'square' | 'circle'\n}\nconst Skeleton = ({ shape, className, ...props }: SkeletonProps) => {\n    return (\n        <div\n            className={cn(\n                'shrink-0 animate-pulse bg-muted/50',\n                shape === 'circle' ? 'rounded-full' : 'rounded-lg',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nexport { Skeleton }\n"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    Button,\n    ColorPicker as RACColorPicker,\n    type ColorPickerProps as RACColorPickerProps\n} from 'react-aria-components'\n\nimport type { Placement } from '@react-types/overlays'\n\nimport { ColorArea } from './color-area'\nimport { ColorField } from './color-field'\nimport { ColorSlider } from './color-slider'\nimport { ColorSwatch } from './color-swatch'\nimport { Description, Label } from './field'\nimport { Popover } from './popover'\n\nexport interface ColorPickerProps extends RACColorPickerProps {\n    label?: string\n    children?: React.ReactNode\n    showArrow?: boolean\n    isDisabled?: boolean\n    placement?: Placement\n    description?: string\n}\n\nconst ColorPicker = ({\n    showArrow = false,\n    placement = 'bottom start',\n    label,\n    isDisabled,\n    children,\n    description,\n    ...props\n}: ColorPickerProps) => {\n    return (\n        <div className='flex flex-col gap-y-2 group'>\n            <RACColorPicker {...props}>\n                <Popover>\n                    <Button\n                        isDisabled={isDisabled}\n                        className='flex items-center gap-2 outline-hidden'\n                    >\n                        <ColorSwatch className='size-6' />\n                        {label && <Label className='ml-2'>{label}</Label>}\n                    </Button>\n                    <Popover.Content showArrow={showArrow} placement={placement}>\n                        <Popover.Body className='space-y-2 pb-4 sm:py-4 overflow-visible'>\n                            {children || (\n                                <>\n                                    <ColorArea\n                                        className='w-full'\n                                        colorSpace='hsb'\n                                        xChannel='saturation'\n                                        yChannel='brightness'\n                                    />\n                                    <ColorSlider\n                                        showOutput={false}\n                                        colorSpace='hsb'\n                                        channel='hue'\n                                    />\n                                    <ColorField aria-label='Hex' />\n                                </>\n                            )}\n                        </Popover.Body>\n                    </Popover.Content>\n                </Popover>\n            </RACColorPicker>\n            {description && <Description>{description}</Description>}\n        </div>\n    )\n}\n\nexport { ColorPicker }\n"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport type {\n    TabListProps as RACTabListProps,\n    TabPanelProps as RACTabPanelProps,\n    TabProps as RACTabProps,\n    TabsProps as RACTabsProps\n} from 'react-aria-components'\nimport {\n    composeRenderProps,\n    Tab as RACTab,\n    Tabs as RACTabs,\n    TabList,\n    TabPanel\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ninterface TabsProps extends RACTabsProps {\n    ref?: React.RefObject<HTMLDivElement>\n}\nconst Tabs = ({ className, ref, ...props }: TabsProps) => {\n    return (\n        <RACTabs\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'gap-4 grid',\n                    orientation === 'horizontal' ? 'grid-cols-1' : 'grid-cols-[auto_1fr]',\n                    className\n                )\n            )}\n            ref={ref}\n            {...props}\n        />\n    )\n}\n\ninterface TabListProps<T extends object> extends RACTabListProps<T> {\n    ref?: React.RefObject<HTMLDivElement>\n}\nconst List = <T extends object>({ className, ref, ...props }: TabListProps<T>) => {\n    return (\n        <TabList\n            ref={ref}\n            {...props}\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'group p-1 size-fit',\n                    orientation === 'horizontal'\n                        ? 'flex items-center rounded-t-lg pb-0'\n                        : 'grid items-start rounded-r-lg pl-0',\n                    className\n                )\n            )}\n        />\n    )\n}\n\ninterface TabProps extends RACTabProps {\n    ref?: React.RefObject<HTMLButtonElement>\n}\n\nconst Tab = ({ className, ref, ...props }: TabProps) => {\n    return (\n        <RACTab\n            ref={ref}\n            {...props}\n            className={composeRenderProps(\n                className,\n                (className, { isSelected, isFocusVisible, isHovered, isDisabled }) =>\n                    cn(\n                        'relative cursor-pointer py-1.5 px-4 flex gap-x-2 items-center text-sm font-medium whitespace-nowrap outline-hidden transition',\n                        'group-orientation-horizontal:rounded-t-md group-orientation-vertical:rounded-r-md group-orientation-horizontal:border-b-2 group-orientation-vertical:border-l-2',\n                        isSelected ? 'text-primary bg-primary/10 border-primary' : 'text-muted-fg',\n                        isFocusVisible && 'text-primary ring-1 ring-offset-2 ring-primary',\n                        isHovered && 'text-primary',\n                        isDisabled && 'opacity-50',\n                        className\n                    )\n            )}\n        />\n    )\n}\n\ninterface TabPanelProps extends RACTabPanelProps {\n    ref?: React.RefObject<HTMLDivElement>\n}\nconst Panel = ({ className, ref, ...props }: TabPanelProps) => {\n    return (\n        <TabPanel\n            {...props}\n            ref={ref}\n            className={cn(className, 'text-fg flex-1 text-sm outline-hidden')}\n        />\n    )\n}\n\nTabs.List = List\nTabs.Label = Tab\nTabs.Content = Panel\n\nexport { Tabs }\n"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown, IconMenu } from 'hq-icons'\nimport type {\n    CellProps,\n    ColumnProps,\n    ColumnResizerProps,\n    TableHeaderProps as HeaderProps,\n    TableProps as RACTableProps,\n    RowProps,\n    TableBodyProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Cell,\n    Collection,\n    Column,\n    composeRenderProps,\n    ColumnResizer as RACColumnResizer,\n    Table as RACTable,\n    TableBody as RACTableBody,\n    TableHeader as RACTableHeader,\n    ResizableTableContainer,\n    Row,\n    useTableOptions\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Checkbox } from './checkbox'\n\ninterface TableProps extends RACTableProps {\n    className?: string\n    allowResize?: boolean\n}\n\nconst TableContext = React.createContext<TableProps>({\n    allowResize: false\n})\n\nconst useTableContext = () => React.useContext(TableContext)\n\nconst Table = ({ className, ...props }: TableProps) => {\n    return (\n        <TableContext.Provider value={props}>\n            <div slot='table' className='relative w-full overflow-auto border rounded-lg'>\n                {props.allowResize ? (\n                    <ResizableTableContainer className='overflow-auto'>\n                        <RACTable\n                            className={cn(\n                                'w-full min-w-full caption-bottom border-spacing-0 text-sm outline-hidden',\n                                className\n                            )}\n                            {...props}\n                        />\n                    </ResizableTableContainer>\n                ) : (\n                    <RACTable\n                        className={cn(\n                            'w-full min-w-full caption-bottom border-spacing-0 text-sm outline-hidden',\n                            className\n                        )}\n                        {...props}\n                    />\n                )}\n            </div>\n        </TableContext.Provider>\n    )\n}\n\nconst ColumnResizer = ({ className, ...props }: ColumnResizerProps) => (\n    <RACColumnResizer\n        {...props}\n        className={composeRenderProps(className, (className, { isResizing, resizableDirection }) =>\n            cn(\n                'absolute top-0 right-0 bottom-0 w-px touch-none px-1.5',\n                resizableDirection === 'left' && 'cursor-w-resize',\n                resizableDirection === 'right' && 'cursor-e-resize',\n                resizableDirection === 'both' && 'cursor-ew-resize',\n                isResizing ? '*:bg-primary' : '*:bg-muted',\n                className\n            )\n        )}\n    >\n        <div className='w-px h-full' />\n    </RACColumnResizer>\n)\n\nconst TableBody = <T extends object>(props: TableBodyProps<T>) => (\n    <RACTableBody\n        {...props}\n        className={cn(\n            '**:data-drop-target:outline **:data-drop-target:outline-primary **:data-drop-target:py-2',\n            props.className\n        )}\n    />\n)\n\ninterface TableCellProps extends CellProps {\n    className?: string\n}\n\nconst TableCell = ({ children, className, ...props }: TableCellProps) => {\n    const { allowResize } = useTableContext()\n    return (\n        <Cell\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group whitespace-nowrap px-3 py-3 outline-hidden',\n                    'first:pl-6 last:pr-6',\n                    allowResize && 'overflow-hidden truncate',\n                    className\n                )\n            )}\n        >\n            {children}\n        </Cell>\n    )\n}\n\ninterface TableColumnProps extends ColumnProps {\n    className?: string\n    isResizable?: boolean\n}\n\nconst TableColumn = ({ isResizable = false, className, ...props }: TableColumnProps) => {\n    return (\n        <Column\n            {...props}\n            className={composeRenderProps(className, (className, { isResizing, allowsSorting }) =>\n                cn(\n                    'relative whitespace-nowrap p-3 text-left font-medium outline-hidden **:has-[slot=selection]:pr-0 first:pl-6 last:pr-6',\n                    isResizable && 'overflow-hidden truncate',\n                    isResizing && 'cursor-grabbing',\n                    allowsSorting && 'cursor-pointer',\n                    className\n                )\n            )}\n        >\n            {({ allowsSorting, sortDirection, isHovered }) => (\n                <div className='flex items-center gap-2'>\n                    <>\n                        {props.children as React.ReactNode}\n                        {allowsSorting && (\n                            <IconChevronDown\n                                className={cn(\n                                    'size-3.5 shrink-0 text-muted-fg transition-transform',\n                                    sortDirection === 'ascending' ? '-rotate-180' : '',\n                                    isHovered && 'text-primary'\n                                )}\n                            />\n                        )}\n                        {isResizable && <ColumnResizer />}\n                    </>\n                </div>\n            )}\n        </Column>\n    )\n}\n\ninterface TableHeaderProps<T extends object> extends HeaderProps<T> {\n    className?: string\n    ref?: React.Ref<HTMLTableSectionElement>\n}\n\nconst TableHeader = <T extends object>({\n    children,\n    ref,\n    className,\n    columns,\n    ...props\n}: TableHeaderProps<T>) => {\n    const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n    return (\n        <RACTableHeader\n            ref={ref}\n            className={cn('border-b bg-primary/10 text-fg', className)}\n            {...props}\n        >\n            {allowsDragging && <Column className='w-0' />}\n            {selectionBehavior === 'toggle' && (\n                <Column className='w-0 pl-4'>\n                    {selectionMode === 'multiple' && <Checkbox slot='selection' />}\n                </Column>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </RACTableHeader>\n    )\n}\n\ninterface TableRowProps<T extends object> extends RowProps<T> {\n    className?: string\n    ref?: React.Ref<HTMLTableRowElement>\n}\n\nconst TableRow = <T extends object>({\n    children,\n    className,\n    columns,\n    id,\n    ref,\n    ...props\n}: TableRowProps<T>) => {\n    const { selectionBehavior, allowsDragging } = useTableOptions()\n    return (\n        <Row\n            ref={ref}\n            id={id}\n            className={composeRenderProps(\n                className,\n                (\n                    className,\n                    { isSelected, isHovered, isFocusVisible, isDisabled, isFocusVisibleWithin }\n                ) =>\n                    cn(\n                        'group relative cursor-default not-last:border-b',\n                        'href' in props && 'cursor-pointer',\n                        isSelected && 'bg-primary/15 text-primary',\n                        isHovered && 'bg-primary/10 text-primary',\n                        {\n                            'outline outline-primary bg-primary/15 text-primary':\n                                isFocusVisible || isFocusVisibleWithin\n                        },\n                        isDisabled && 'pointer-events-none opacity-50',\n                        className\n                    )\n            )}\n            {...props}\n        >\n            {allowsDragging && (\n                <Cell className='cursor-grab pr-0 outline-primary data-dragging:cursor-grabbing'>\n                    <Button className='py-1.5 pl-3.5' slot='drag'>\n                        <IconMenu />\n                    </Button>\n                </Cell>\n            )}\n            {selectionBehavior === 'toggle' && (\n                <Cell className='pl-4'>\n                    <span\n                        aria-hidden\n                        className='absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary/70 group-selected:block'\n                    />\n                    <Checkbox slot='selection' />\n                </Cell>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </Row>\n    )\n}\n\nTable.Body = TableBody\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Header = TableHeader\nTable.Row = TableRow\n\nexport { Table }\nexport type { TableBodyProps, TableCellProps, TableColumnProps, TableProps, TableRowProps }\n"
  },
  "context-menu": {
    "component": "@/components/ui/context-menu",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { MenuProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Menu } from './menu'\n\ninterface ContextMenuContextProps {\n    triggerRef: React.RefObject<HTMLDivElement | null>\n    contextMenuOffset: { offset: number; crossOffset: number } | null\n    setContextMenuOffset: React.Dispatch<\n        React.SetStateAction<{ offset: number; crossOffset: number } | null>\n    >\n}\n\nconst ContextMenuContext = React.createContext<ContextMenuContextProps>({\n    triggerRef: React.createRef(),\n    contextMenuOffset: null,\n    setContextMenuOffset: () => {}\n})\n\nconst useContextMenu = () => {\n    const context = React.use(ContextMenuContext)\n    if (!context) {\n        throw new Error('useContextMenu must be used within a ContextMenu')\n    }\n    return context\n}\n\ninterface ContextMenuProps {\n    children: React.ReactNode\n}\n\nconst ContextMenu = ({ children }: ContextMenuProps) => {\n    const [contextMenuOffset, setContextMenuOffset] = React.useState<{\n        offset: number\n        crossOffset: number\n    } | null>(null)\n    const triggerRef = React.useRef<HTMLDivElement>(null)\n    return (\n        <ContextMenuContext.Provider\n            value={{ triggerRef, contextMenuOffset, setContextMenuOffset }}\n        >\n            {children}\n        </ContextMenuContext.Provider>\n    )\n}\n\nconst ContextMenuTrigger = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    const { triggerRef, setContextMenuOffset } = useContextMenu()\n\n    const onContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault()\n        const rect = e.currentTarget.getBoundingClientRect()\n        setContextMenuOffset({\n            offset: e.clientY - rect.bottom,\n            crossOffset: e.clientX - rect.left\n        })\n    }\n    const longPressTimer = React.useRef<NodeJS.Timeout | null>(null)\n\n    const onTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n        e.preventDefault()\n        const touch = e.touches[0]\n        const rect = e.currentTarget.getBoundingClientRect()\n        longPressTimer.current = setTimeout(() => {\n            setContextMenuOffset({\n                offset: touch.clientY - rect.bottom,\n                crossOffset: touch.clientX - rect.left\n            })\n        }, 600)\n    }\n    const onTouchEnd = () => {\n        if (longPressTimer.current) {\n            clearTimeout(longPressTimer.current)\n        }\n    }\n    return (\n        <div\n            className={cn(\n                'cursor-default outline-hidden disabled:opacity-50 select-none',\n                className\n            )}\n            ref={triggerRef}\n            aria-haspopup='menu'\n            onContextMenu={onContextMenu}\n            onTouchStart={onTouchStart}\n            onTouchEnd={onTouchEnd}\n            {...props}\n        />\n    )\n}\n\ninterface ContextMenuContentProps<T>\n    extends Omit<\n        MenuProps<T>,\n        | 'showArrow'\n        | 'isOpen'\n        | 'onOpenChange'\n        | 'triggerRef'\n        | 'placement'\n        | 'shouldFlip'\n        | 'className'\n    > {\n    className?: string\n}\n\nconst ContextMenuContent = <T extends object>(props: Omit<ContextMenuContentProps<T>, 'style'>) => {\n    const { contextMenuOffset, setContextMenuOffset, triggerRef } = useContextMenu()\n    return contextMenuOffset ? (\n        <Menu.Content\n            respectScreen={false}\n            aria-label={props['aria-label'] ?? 'Context Menu'}\n            isOpen={!!contextMenuOffset}\n            offset={contextMenuOffset?.offset}\n            crossOffset={contextMenuOffset?.crossOffset}\n            triggerRef={triggerRef}\n            placement='bottom left'\n            onOpenChange={() => setContextMenuOffset(null)}\n            onClose={() => setContextMenuOffset(null)}\n            {...props}\n        />\n    ) : null\n}\n\nContextMenu.Trigger = ContextMenuTrigger\nContextMenu.Content = ContextMenuContent\nContextMenu.Item = Menu.Item\nContextMenu.Label = Menu.Label\nContextMenu.Separator = Menu.Separator\nContextMenu.Details = Menu.Details\nContextMenu.Section = Menu.Section\nContextMenu.Header = Menu.Header\n\nexport { ContextMenu }\n"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\n\nimport { IconCheck, IconMinus } from 'hq-icons'\nimport type {\n    CheckboxGroupProps as RACCheckboxGroupProps,\n    CheckboxProps as RACCheckboxProps\n} from 'react-aria-components'\nimport {\n    composeRenderProps,\n    Checkbox as RACCheckbox,\n    CheckboxGroup as RACCheckboxGroup\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, FieldProps, Label } from './field'\n\ninterface CheckboxGroupProps extends RACCheckboxGroupProps, FieldProps {}\n\nconst CheckboxGroup = ({\n    className,\n    children,\n    description,\n    errorMessage,\n    ...props\n}: CheckboxGroupProps) => {\n    return (\n        <RACCheckboxGroup\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-2', className)\n            )}\n        >\n            {composeRenderProps(children, (children, { isInvalid, isDisabled }) => (\n                <>\n                    <Label isInvalid={isInvalid} isDisabled={isDisabled}>\n                        {props.label}\n                    </Label>\n                    {children}\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            ))}\n        </RACCheckboxGroup>\n    )\n}\n\ninterface CheckboxProps extends RACCheckboxProps, Omit<FieldProps, 'placeholder'> {\n    children?: React.ReactNode\n}\n\nconst Checkbox = ({\n    className,\n    label,\n    children,\n    description,\n    errorMessage,\n    ...props\n}: CheckboxProps) => {\n    return (\n        <RACCheckbox\n            {...props}\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'group flex items-center gap-2 text-sm transition',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n        >\n            {({ isSelected, isIndeterminate, isFocused, isInvalid, isRequired }) => (\n                <div\n                    className={cn('flex gap-2 items-center', {\n                        'items-start': description || (isInvalid && isRequired)\n                    })}\n                >\n                    <div\n                        className={cn(\n                            'flex size-4 shrink-0 items-center justify-center rounded-sm border text-bg transition',\n                            isSelected || isIndeterminate\n                                ? 'border-primary bg-primary text-primary-fg group-invalid:border-danger/70 group-invalid:bg-danger group-invalid:text-danger-fg'\n                                : 'border-muted group-hover:border-primary/70 group-hover:bg-primary/10',\n                            isFocused &&\n                                'border-primary ring-primary/20 ring-4 group-invalid:border-danger/70 group-invalid:text-danger-fg group-invalid:ring-danger/20',\n                            isInvalid &&\n                                'border-danger/70 bg-danger/20 text-danger-fg ring-danger/20 group-hover:border-danger/70',\n                            className\n                        )}\n                    >\n                        {isIndeterminate ? (\n                            <IconMinus className='size-3' />\n                        ) : isSelected ? (\n                            <IconCheck className='size-3' />\n                        ) : null}\n                    </div>\n\n                    <div className='flex flex-col'>\n                        <Label\n                            isInvalid={isInvalid || !!errorMessage}\n                            isDisabled={props.isDisabled}\n                            className='not-last:text-sm/4'\n                        >\n                            {label ?? children}\n                        </Label>\n                        {description && <Description>{description}</Description>}\n                        {isRequired && <FieldError>{errorMessage}</FieldError>}\n                    </div>\n                </div>\n            )}\n        </RACCheckbox>\n    )\n}\n\nexport { Checkbox, CheckboxGroup }\n"
  },
  "chart": {
    "component": "@/components/ui/chart",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { LegendProps } from 'recharts'\nimport { Legend, ResponsiveContainer, Tooltip } from 'recharts'\n\nimport { cn } from '@/lib/utils'\n\nconst THEMES = { light: '', dark: '.dark' } as const\n\ntype ChartConfig = {\n    [k in string]: {\n        label?: React.ReactNode\n        icon?: React.ComponentType\n    } & (\n        | { color?: string; theme?: never }\n        | { color?: never; theme: Record<keyof typeof THEMES, string> }\n    )\n}\n\ntype ChartContextProps = {\n    config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n    const context = React.use(ChartContext)\n\n    if (!context) {\n        throw new Error('useChart must be used within a <Chart />')\n    }\n\n    return context\n}\n\nconst Chart = ({\n    id,\n    className,\n    children,\n    config,\n    ref,\n    ...props\n}: React.ComponentProps<'div'> & {\n    config: ChartConfig\n    children: React.ComponentProps<typeof ResponsiveContainer>['children']\n}) => {\n    const uniqueId = React.useId()\n    const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n    return (\n        <ChartContext.Provider value={{ config }}>\n            <div\n                data-chart={chartId}\n                ref={ref}\n                className={cn(\n                    \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-fg [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/80 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n                    className\n                )}\n                {...props}\n            >\n                <ChartStyle id={chartId} config={config} />\n                <ResponsiveContainer>{children}</ResponsiveContainer>\n            </div>\n        </ChartContext.Provider>\n    )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n    const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color)\n\n    if (!colorConfig.length) {\n        return null\n    }\n\n    return (\n        <style\n            dangerouslySetInnerHTML={{\n                __html: Object.entries(THEMES)\n                    .map(\n                        ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n    .map(([key, itemConfig]) => {\n        const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color\n        return color ? `  --color-${key}: ${color};` : null\n    })\n    .join('\\n')}\n}\n`\n                    )\n                    .join('\\n')\n            }}\n        />\n    )\n}\n\nconst ChartTooltip = Tooltip\n\nconst ChartTooltipContent = ({\n    active,\n    payload,\n    className,\n    indicator = 'dot',\n    hideLabel = false,\n    hideIndicator = false,\n    label,\n    labelFormatter,\n    labelClassName,\n    formatter,\n    color,\n    nameKey,\n    labelKey,\n    ref\n}: React.ComponentProps<typeof Tooltip> &\n    React.ComponentProps<'div'> & {\n        hideLabel?: boolean\n        hideIndicator?: boolean\n        indicator?: 'line' | 'dot' | 'dashed'\n        nameKey?: string\n        labelKey?: string\n    }) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n        if (hideLabel || !payload?.length) {\n            return null\n        }\n\n        const [item] = payload\n\n        if (!item) {\n            return null\n        }\n\n        const key = `${labelKey || item.dataKey || item.name || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n        const value =\n            !labelKey && typeof label === 'string'\n                ? config[label as keyof typeof config]?.label || label\n                : itemConfig?.label\n\n        if (labelFormatter) {\n            return <div className={labelClassName}>{labelFormatter(value, payload)}</div>\n        }\n\n        if (!value) {\n            return null\n        }\n\n        return <div className={labelClassName}>{value}</div>\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])\n\n    if (!active || !payload?.length) {\n        return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'bg-bg text-fg grid min-w-[12rem] items-start gap-1.5 rounded-lg border px-3 py-2 text-xs shadow-xl',\n                className\n            )}\n        >\n            {!nestLabel ? tooltipLabel : null}\n            <div className='grid gap-1.5'>\n                {payload.map((item, index) => {\n                    const key = `${nameKey || item.name || item.dataKey || 'value'}`\n                    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n                    const indicatorColor = color || item.payload.fill || item.color\n\n                    return (\n                        <div\n                            key={item.dataKey}\n                            className={cn(\n                                '*:data-[slot=icon]:text-muted-fg flex w-full flex-wrap items-stretch gap-2 *:data-[slot=icon]:size-2.5',\n                                indicator === 'dot' && 'items-center'\n                            )}\n                        >\n                            {formatter && item?.value !== undefined && item.name ? (\n                                formatter(item.value, item.name, item, index, item.payload)\n                            ) : (\n                                <>\n                                    {itemConfig?.icon ? (\n                                        <itemConfig.icon />\n                                    ) : (\n                                        !hideIndicator && (\n                                            <div\n                                                className={cn(\n                                                    'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',\n                                                    indicator === 'dot' && 'size-2.5',\n                                                    indicator === 'line' && 'w-1',\n                                                    indicator === 'dashed' &&\n                                                        'w-0 border-[1.5px] border-dashed bg-transparent',\n                                                    nestLabel && indicator === 'dashed' && 'my-0.5'\n                                                )}\n                                                style={\n                                                    {\n                                                        '--color-bg': indicatorColor,\n                                                        '--color-border': indicatorColor\n                                                    } as React.CSSProperties\n                                                }\n                                            />\n                                        )\n                                    )}\n                                    <div\n                                        className={cn(\n                                            'flex flex-1 justify-between leading-none',\n                                            nestLabel ? 'items-end' : 'items-center'\n                                        )}\n                                    >\n                                        <div className='grid gap-1.5'>\n                                            {nestLabel ? tooltipLabel : null}\n                                            <span className='text-muted-fg'>\n                                                {itemConfig?.label || item.name}\n                                            </span>\n                                        </div>\n                                        {item.value && (\n                                            <span className='text-fg font-mono font-medium tabular-nums'>\n                                                {item.value.toLocaleString()}\n                                            </span>\n                                        )}\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nconst ChartLegend = Legend\n\nconst ChartLegendContent = ({\n    className,\n    hideIcon = false,\n    payload,\n    verticalAlign = 'bottom',\n    nameKey,\n    ref\n}: React.ComponentProps<'div'> &\n    Pick<LegendProps, 'payload' | 'verticalAlign'> & {\n        hideIcon?: boolean\n        nameKey?: string\n    }) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n        return null\n    }\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'flex items-center justify-center gap-4',\n                verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n                className\n            )}\n        >\n            {payload.map((item) => {\n                const key = `${nameKey || item.dataKey || 'value'}`\n                const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n                return (\n                    <div\n                        key={item.value}\n                        className={cn(\n                            '*:data-[slot=icon]:text-muted-fg flex items-center gap-1.5 *:data-[slot=icon]:size-3'\n                        )}\n                    >\n                        {itemConfig?.icon && !hideIcon ? (\n                            <itemConfig.icon />\n                        ) : (\n                            <div\n                                className='h-2 w-2 shrink-0 rounded-[2px]'\n                                style={{\n                                    backgroundColor: item.color\n                                }}\n                            />\n                        )}\n                        {itemConfig?.label}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n    if (typeof payload !== 'object' || payload === null) {\n        return undefined\n    }\n\n    const payloadPayload =\n        'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n            ? payload.payload\n            : undefined\n\n    let configLabelKey: string = key\n\n    if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n        configLabelKey = payload[key as keyof typeof payload] as string\n    } else if (\n        payloadPayload &&\n        key in payloadPayload &&\n        typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n    ) {\n        configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string\n    }\n\n    return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config]\n}\n\nChart.Legend = ChartLegend\nChart.Tooltip = ChartTooltip\nChart.LegendContent = ChartLegendContent\nChart.TooltipContent = ChartTooltipContent\n\nexport { Chart, ChartStyle }\nexport type { ChartConfig }\n"
  },
  "color-slider": {
    "component": "@/components/ui/color-slider",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    ColorSlider as RACColorSlider,\n    SliderOutput,\n    SliderTrack,\n    type ColorSliderProps as RACColorSliderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { ColorThumb } from './color-thumb'\nimport { Label } from './field'\n\ninterface ColorSliderProps extends RACColorSliderProps {\n    label?: string\n    showOutput?: boolean\n}\n\nconst ColorSlider = ({ showOutput = true, label, className, ...props }: ColorSliderProps) => {\n    return (\n        <RACColorSlider\n            {...props}\n            slot='color-slider'\n            className={composeRenderProps(className, (className, { orientation, isDisabled }) =>\n                cn(\n                    'group relative gap-2 flex flex-col items-center',\n                    orientation === 'horizontal' ? 'min-w-56 justify-between' : 'justify-center',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n        >\n            {({ isDisabled, orientation }) => (\n                <>\n                    <div className='flex items-center justify-between w-full has-only:justify-center'>\n                        {label && <Label isDisabled={isDisabled}>{label}</Label>}\n                        {showOutput && <SliderOutput />}\n                    </div>\n                    <SliderTrack\n                        className={cn(\n                            'rounded-lg',\n                            orientation === 'horizontal' ? 'h-6 w-full' : 'h-56 w-6'\n                        )}\n                        style={({ defaultStyle }) => ({ ...defaultStyle })}\n                    >\n                        <ColorThumb />\n                    </SliderTrack>\n                </>\n            )}\n        </RACColorSlider>\n    )\n}\n\nexport { ColorSlider }\nexport type { ColorSliderProps }\n"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    TextArea as RACTextArea,\n    TextField as RACTextField,\n    type TextFieldProps as RACTextFieldProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, FieldProps, Label } from './field'\n\ninterface TextareaProps extends RACTextFieldProps, FieldProps {\n    autoSize?: boolean\n    className?: string\n}\n\nconst Textarea = ({\n    className,\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    ...props\n}: TextareaProps) => {\n    return (\n        <RACTextField\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-y-1.5', className)\n            )}\n            {...props}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid || !!errorMessage} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <RACTextArea\n                        placeholder={placeholder}\n                        className={({ isFocused, isFocusVisible, isHovered }) =>\n                            cn(\n                                'min-h-14 w-full min-w-0 rounded-lg border bg-transparent p-2 text-base outline-hidden transition duration-200 sm:text-sm',\n                                isInvalid ? 'border-danger/30' : 'border-muted',\n                                isHovered && 'border-primary/70 invalid:border-danger/70',\n                                isDisabled && 'opacity-50 pointer-events-none',\n                                {\n                                    'border-primary/70 ring-4 ring-primary/20 invalid:border-danger/70 invalid:ring-danger/20':\n                                        isFocused || isFocusVisible\n                                },\n                                props.autoSize && 'resize-none field-sizing-content'\n                            )\n                        }\n                    />\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACTextField>\n    )\n}\n\nexport { Textarea }\n"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport { IconLoaderCircle } from 'hq-icons'\nimport type { ButtonProps as RACButtonProps } from 'react-aria-components'\nimport { composeRenderProps, Button as RACButton } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst buttonStyles = tv({\n    base: [\n        'inline-flex items-center justify-center gap-x-2 border border-muted font-medium whitespace-nowrap backdrop-blur-2xl transition outline-hidden',\n        '**:data-[slot=icon]:size-4',\n        'focus-visible:ring-4 ring-primary/20',\n        'cursor-pointer disabled:cursor-default disabled:opacity-50'\n    ],\n    variants: {\n        variant: {\n            primary:\n                'bg-primary text-primary-fg border-primary hover:bg-primary/85 pressed:bg-primary/95',\n            secondary:\n                'bg-secondary text-secondary-fg border-secondary hover:bg-secondary/85 pressed:bg-secondary/95',\n            info: 'bg-info text-info-fg border-info hover:bg-info/85 pressed:bg-info/95',\n            success:\n                'bg-success text-success-fg border-success hover:bg-success/85 pressed:bg-success/95',\n            danger: 'bg-danger text-danger-fg border-danger hover:bg-danger/85 pressed:bg-danger/95',\n            warning:\n                'bg-warning text-warning-fg border-warning hover:bg-warning/85 pressed:bg-warning/95',\n            outline: 'bg-bg/80 hover:bg-muted/40 pressed:bg-muted/50 text-fg',\n            ghost: 'text-fg hover:bg-muted/40 pressed:bg-muted/50 border-transparent bg-transparent backdrop-blur-none'\n        },\n        size: {\n            xs: 'h-6 px-2 py-1.5 text-xs',\n            sm: 'h-8 px-3 py-2 text-sm',\n            md: 'h-10 px-4 py-3 text-sm',\n            lg: 'h-12 px-5 py-3.5 text-base',\n            icon: 'size-10 shrink-0 text-base'\n        },\n        shape: {\n            square: 'rounded-lg',\n            circle: 'rounded-full'\n        },\n        isPending: {\n            true: 'pointer-events-none cursor-default opacity-50 *:data-[slot=icon]:hidden'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        size: 'md',\n        shape: 'square'\n    }\n})\n\nexport interface ButtonProps extends RACButtonProps, VariantProps<typeof buttonStyles> {\n    ref?: React.Ref<HTMLButtonElement>\n}\n\nconst Button = ({ className, variant, size, shape, ref, ...props }: ButtonProps) => (\n    <RACButton\n        ref={ref}\n        {...props}\n        className={composeRenderProps(className, (className, renderProps) =>\n            buttonStyles({\n                ...renderProps,\n                variant,\n                size,\n                shape,\n                className\n            })\n        )}\n    >\n        {(values) => (\n            <>\n                {values.isPending && (\n                    <IconLoaderCircle data-slot='loader' className='animate-spin size-4' />\n                )}\n                {typeof props.children === 'function' ? props.children(values) : props.children}\n            </>\n        )}\n    </RACButton>\n)\n\nexport { Button, buttonStyles }\n"
  },
  "color-thumb": {
    "component": "@/components/ui/color-thumb",
    "raw": "'use client'\n\nimport {\n    ColorThumb as RACColorThumb,\n    composeRenderProps,\n    type ColorThumbProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst ColorThumb = ({ className, ...props }: ColorThumbProps) => {\n    return (\n        <RACColorThumb\n            {...props}\n            style={({ defaultStyle }) => ({ ...defaultStyle })}\n            className={composeRenderProps(\n                className,\n                (className, { isFocusVisible, isDragging, isDisabled }) =>\n                    cn(\n                        'ring-bg top-1/2 left-1/2 size-5 rounded-full border-2',\n                        isFocusVisible && 'size-8',\n                        isDragging && 'bg-muted',\n                        isDisabled && 'opacity-50',\n                        className\n                    )\n            )}\n        />\n    )\n}\n\nexport { ColorThumb }\n"
  },
  "sidebar": {
    "component": "@/components/ui/sidebar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronRight, IconPanelBottomClose, IconPanelLeftOpen } from 'hq-icons'\nimport type {\n    ButtonProps,\n    DisclosureGroupProps,\n    DisclosurePanelProps,\n    DisclosureProps,\n    LinkProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Button,\n    composeRenderProps,\n    DialogTrigger,\n    Disclosure,\n    DisclosureGroup,\n    DisclosurePanel,\n    Header,\n    Link,\n    OverlayArrow,\n    Popover,\n    Text\n} from 'react-aria-components'\n\nimport { useMediaQuery } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\n\nimport { Sheet } from './sheet'\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar:state'\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst WIDTH = '16rem'\nconst WIDTH_DOCK = '3rem'\nconst WIDTH_FLOAT_DOCK = '4rem'\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b'\n\ntype SidebarContextProps = {\n    state: 'expanded' | 'collapsed'\n    open: boolean\n    setOpen: (open: boolean) => void\n    openMobile: boolean\n    setOpenMobile: (open: boolean) => void\n    isMobile: boolean\n    toggleSidebar: () => void\n    side: 'left' | 'right'\n    variant: 'default' | 'float' | 'inset'\n    collapsible: 'dock' | 'hidden' | 'none'\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nconst useSidebar = () => {\n    const context = React.use(SidebarContext)\n    if (!context) {\n        throw new Error('useSidebar must be used within a Sidebar.')\n    }\n    return context\n}\n\ninterface SidebarProviderProps extends React.ComponentProps<'div'> {\n    defaultOpen?: boolean\n    shortcut?: string\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n    side?: 'left' | 'right'\n    variant?: 'default' | 'float' | 'inset'\n    collapsible?: 'dock' | 'hidden' | 'none'\n}\n\nconst Sidebar = ({\n    defaultOpen = true,\n    isOpen: openProp,\n    onOpenChange: setOpenProp,\n    className,\n    children,\n    shortcut = SIDEBAR_KEYBOARD_SHORTCUT,\n    side = 'left',\n    variant = 'default',\n    collapsible = 'hidden',\n    ...props\n}: SidebarProviderProps) => {\n    const isMobile = useMediaQuery('(max-width: 768px)')\n    const [openMobile, setOpenMobile] = React.useState<boolean>(false)\n    const [internalOpenState, setInternalOpenState] = React.useState<boolean>(defaultOpen)\n\n    const open = openProp ?? internalOpenState\n    const setOpen = React.useCallback(\n        (value: boolean | ((value: boolean) => boolean)) => {\n            const openState = typeof value === 'function' ? value(open) : value\n            if (setOpenProp) {\n                setOpenProp(openState)\n            } else {\n                setInternalOpenState(openState)\n            }\n            document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n        },\n        [setOpenProp, open]\n    )\n\n    const toggleSidebar = React.useCallback(() => {\n        return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n    }, [isMobile, setOpen])\n\n    React.useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (\n                event.key === shortcut &&\n                collapsible !== 'none' &&\n                (event.metaKey || event.ctrlKey)\n            ) {\n                event.preventDefault()\n                toggleSidebar()\n            }\n        }\n\n        window.addEventListener('keydown', handleKeyDown)\n        return () => window.removeEventListener('keydown', handleKeyDown)\n    }, [toggleSidebar, shortcut, collapsible])\n\n    const state = open ? 'expanded' : 'collapsed'\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n        () => ({\n            state,\n            open,\n            setOpen,\n            isMobile,\n            openMobile: openMobile,\n            setOpenMobile: setOpenMobile,\n            toggleSidebar,\n            side,\n            variant,\n            collapsible\n        }),\n        [state, open, setOpen, isMobile, openMobile, toggleSidebar, side, variant, collapsible]\n    )\n\n    const collapsedHidden = state === 'collapsed' && collapsible === 'hidden'\n    const collapsedDock = state === 'collapsed' && collapsible === 'dock' && variant === 'default'\n    const collapsedFloatDock =\n        state === 'collapsed' && variant === 'float' && collapsible === 'dock'\n    const collapsedInsetDock =\n        state === 'collapsed' && variant === 'inset' && collapsible === 'dock'\n\n    return (\n        <SidebarContext value={contextValue}>\n            {collapsible === 'none' && !isMobile ? (\n                <div\n                    style={{ width: WIDTH }}\n                    className={cn(\n                        'flex h-full min-h-screen flex-col border-r bg-bg text-fg',\n                        className\n                    )}\n                >\n                    {children}\n                </div>\n            ) : isMobile ? (\n                <Sheet isOpen={openMobile} onOpenChange={setOpenMobile} {...props}>\n                    <Sheet.Trigger\n                        className={({ isPressed, isHovered, isFocusVisible }) =>\n                            cn(\n                                'bg-bg z-50 top-1/2 absolute shrink-0 border inline-flex size-10 items-center justify-center rounded-md text-muted-fg outline-hidden',\n                                isHovered && 'bg-muted/40',\n                                isFocusVisible && 'ring-4 ring-primary/20 border-primary',\n                                isPressed && 'bg-muted/50',\n                                side === 'left' ? '-left-2 ' : '-right-2'\n                            )\n                        }\n                    >\n                        <IconPanelLeftOpen className='size-6' />\n                    </Sheet.Trigger>\n                    <Sheet.Content\n                        aria-label='Sidebar'\n                        isFloating={variant === 'float'}\n                        side={side}\n                    >\n                        <Sheet.Body className='px-0 sm:px-0'>{children}</Sheet.Body>\n                    </Sheet.Content>\n                </Sheet>\n            ) : (\n                <div\n                    data-variant={variant}\n                    data-side={side}\n                    className='peer z-20 [--visual-viewport-vertical-padding:32px] text-fg hidden md:block **:data-[slot=icon]:shrink-0'\n                >\n                    <div\n                        style={{\n                            width: collapsedDock\n                                ? WIDTH_DOCK\n                                : collapsedFloatDock\n                                  ? WIDTH_FLOAT_DOCK\n                                  : collapsedHidden\n                                    ? 0\n                                    : collapsedInsetDock\n                                      ? WIDTH_FLOAT_DOCK\n                                      : WIDTH\n                        }}\n                        className={cn(\n                            'hidden backdrop-blur transition-[left,right,width] duration-200 ease-linear md:flex',\n                            `${side}-0`,\n                            variant === 'float' && 'p-2',\n                            variant === `inset` && 'p-2 bg-primary/5',\n                            variant === 'default' && 'border-r',\n                            collapsedHidden && 'p-0'\n                        )}\n                    >\n                        <div\n                            data-sidebar='default'\n                            className={cn(\n                                'text-fg flex min-h-svh size-full flex-col',\n                                variant === 'inset' && 'min-h-[calc(100vh-1rem)]',\n                                variant === 'float' &&\n                                    'bg-primary/5 rounded-lg border min-h-[calc(100vh-1rem)]',\n                                className\n                            )}\n                        >\n                            {children}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </SidebarContext>\n    )\n}\n\nconst SidebarHeader = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    const { state, variant, collapsible } = useSidebar()\n    const collapsed = state === 'collapsed'\n    return (\n        <div\n            data-sidebar-header='true'\n            className={cn(\n                'flex items-center p-4 gap-x-3 *:[svg]:size-5 font-semibold',\n                collapsed && variant === 'float' && 'mt-1',\n                collapsed && 'justify-center mt-10 *:[[slot=label]]:hidden',\n                collapsed && collapsible === 'hidden' && 'hidden',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst SidebarFooter = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    const { state, isMobile, collapsible } = useSidebar()\n    const collapsed = state === 'collapsed' && !isMobile\n    const hidden = collapsed && collapsible === 'hidden'\n    return (\n        <div\n            data-sidebar-footer='true'\n            className={cn(\n                'mt-auto flex flex-col p-2 overflow-hidden',\n                '**:data-avatar:size-8 **:data-avatar:shrink-0',\n                collapsed && '**:data-user:hidden **:data-[slot=icon]:hidden **:[button]:p-0',\n                hidden && 'hidden',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst SidebarBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        slot='body'\n        className={cn(\n            'isolate will-change-scroll py-2 flex flex-col space-y-4 overflow-y-auto overflow-x-hidden max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))]',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst SidebarSection = ({ className, ...props }: DisclosureGroupProps & { title?: string }) => {\n    const { state } = useSidebar()\n    return (\n        <section\n            data-section\n            className={cn('col-span-full flex flex-col gap-y-0.5 px-2', className)}\n        >\n            {state !== 'collapsed' && 'title' in props && (\n                <Header className='text-muted-fg flex shrink-0 items-center rounded-lg px-2 text-xs font-medium transition-[margin,opa] duration-200 ease-linear outline-hidden'>\n                    {props.title}\n                </Header>\n            )}\n            <DisclosureGroup\n                {...props}\n                data-section\n                allowsMultipleExpanded\n                className='grid grid-cols-[auto_1fr_auto] gap-y-0.5 group'\n            >\n                {props.children}\n            </DisclosureGroup>\n        </section>\n    )\n}\n\ninterface SidebarItemProps\n    extends DisclosureProps,\n        Pick<LinkProps, 'href' | 'routerOptions' | 'onPress'> {\n    isCurrent?: boolean\n    tooltip?: React.ReactNode | string\n    badge?: string | number | undefined\n    style?: React.CSSProperties\n}\n\nconst SidebarItem = ({ className, isCurrent, ...props }: SidebarItemProps) => {\n    const { state, collapsible } = useSidebar()\n    const collapsedDock = state === 'collapsed' && collapsible === 'dock'\n    return 'href' in props ? (\n        <Link\n            className={({ isHovered, isPressed, isFocused, isFocusVisible, isDisabled }) =>\n                cn(\n                    'col-span-full relative text-sm cursor-pointer items-center outline-hidden rounded-lg',\n                    {\n                        'bg-primary/10 text-primary':\n                            isHovered || isPressed || isFocused || isCurrent\n                    },\n                    isFocusVisible && 'ring-2 ring-offset-2 ring-primary',\n                    isDisabled && 'cursor-default opacity-50',\n                    collapsedDock\n                        ? 'size-8 p-0 flex justify-center'\n                        : 'px-2.5 py-2 grid grid-cols-subgrid gap-x-3',\n                    state === 'collapsed' && 'group-data-section:*:[[slot=label]]:hidden',\n                    className\n                )\n            }\n            {...props}\n        >\n            {props.children as React.ReactNode}\n        </Link>\n    ) : state === 'expanded' ? (\n        <Disclosure\n            isExpanded\n            className={composeRenderProps(className, (className, { isDisabled, isExpanded }) =>\n                cn(\n                    'relative outline-hidden gap-y-0.5 grid grid-cols-subgrid col-span-full gap-x-3 rounded-lg text-sm items-center',\n                    isExpanded && '*:[button]:data-[slot=indicator]:rotate-90',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n            {...props}\n        />\n    ) : (\n        <DialogTrigger>{props.children as React.ReactNode}</DialogTrigger>\n    )\n}\n\nconst SidebarLabel = ({ className, ...props }: TextProps) => {\n    return (\n        <Text\n            slot='label'\n            className={cn('col-start-2 line-clamp-1 text-left', className)}\n            {...props}\n        />\n    )\n}\n\nconst SidebarSubItemTrigger = ({ children, className, ...props }: ButtonProps) => {\n    const { state, collapsible } = useSidebar()\n    const collapsedDock = state === 'collapsed' && collapsible === 'dock'\n    return (\n        <Button\n            slot='trigger'\n            {...props}\n            className={({ isHovered, isPressed, isFocused, isFocusVisible }) =>\n                cn(\n                    'col-span-full cursor-pointer items-center outline-hidden rounded-lg',\n                    {\n                        'bg-primary/10 text-primary': isHovered || isPressed || isFocused\n                    },\n                    collapsedDock\n                        ? 'p-0 size-8 flex justify-center'\n                        : 'grid grid-cols-subgrid px-2.5 py-2 text-left',\n                    isFocusVisible && 'ring-2 ring-offset-2 ring-primary',\n                    'aria-expanded:*:data-[slot=indicator]:rotate-90',\n                    state === 'collapsed' && '*:[[slot=label]]:hidden',\n                    className\n                )\n            }\n        >\n            {(values) => (\n                <>\n                    {typeof children === 'function' ? children(values) : children}\n                    {!collapsedDock && (\n                        <IconChevronRight\n                            data-slot='indicator'\n                            className={cn('transition-transform size-3.5 text-muted-fg ml-auto')}\n                        />\n                    )}\n                </>\n            )}\n        </Button>\n    )\n}\n\nconst SidebarSubItem = ({ children, className, ...props }: DisclosurePanelProps) => {\n    const { state, isMobile } = useSidebar()\n    return state === 'expanded' || isMobile ? (\n        <DisclosurePanel\n            className={cn('grid grid-cols-subgrid gap-y-0.5 col-span-full', className)}\n            {...props}\n        >\n            {children}\n        </DisclosurePanel>\n    ) : (\n        <Popover\n            placement='right top'\n            className='group **:line-clamp-none **:size-fit border rounded-lg p-1 bg-bg **:[a]:px-3 **:[a]:py-0.5'\n        >\n            <OverlayArrow className='group'>\n                <svg\n                    width={12}\n                    height={12}\n                    viewBox='0 0 12 12'\n                    className='block fill-bg stroke-muted group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180'\n                >\n                    <path d='M0 0 L6 6 L12 0' />\n                </svg>\n            </OverlayArrow>\n            {children}\n        </Popover>\n    )\n}\n\nconst SidebarInset = ({ ...props }: React.ComponentProps<'main'>) => {\n    return (\n        <div className='peer-data-[variant=inset]:bg-primary/5 relative flex w-full flex-1 p-1.5 peer-data-[variant=default]:*:border-0 peer-data-[variant=default]:p-0 peer-data-[variant=float]:peer-data-[side=right]:pr-0 peer-data-[variant=inset]:peer-data-[side=right]:pr-0 peer-data-[variant=float]:peer-data-[side=left]:pl-0 peer-data-[variant=inset]:peer-data-[side=left]:pl-0 flex-col min-h-[calc(100svh-theme(spacing.4))] '>\n            <main className='bg-bg h-full overflow-auto rounded-lg border' {...props} />\n        </div>\n    )\n}\n\nconst SidebarTrigger = ({ children, ...props }: React.ComponentProps<typeof Button>) => {\n    const { toggleSidebar, open, variant, isMobile, side } = useSidebar()\n    return (\n        !isMobile && (\n            <Button\n                aria-label='Toggle Sidebar'\n                onPress={toggleSidebar}\n                className={({ isPressed, isHovered, isFocusVisible }) =>\n                    cn(\n                        'bg-bg absolute shrink-0 border inline-flex size-8 items-center justify-center rounded-md text-muted-fg outline-hidden',\n                        isHovered && 'bg-muted/40',\n                        isFocusVisible && 'ring-4 ring-primary/20 border-primary',\n                        isPressed && 'bg-muted/50',\n                        variant === 'default' ? 'top-2 right-2' : 'top-4 right-4'\n                    )\n                }\n                {...props}\n            >\n                {children || (\n                    <IconPanelBottomClose\n                        className={cn(\n                            'size-4 transition-transform',\n                            side === 'right' && `-rotate-90 ${!open && 'rotate-90'}`,\n                            side === 'left' && `rotate-90 ${!open && '-rotate-90'}`\n                        )}\n                    />\n                )}\n            </Button>\n        )\n    )\n}\n\nconst SidebarRail = ({ className, ...props }: ButtonProps) => {\n    const { toggleSidebar, state, side } = useSidebar()\n    return (\n        <Button\n            data-rail\n            slot={null}\n            aria-label='Toggle Sidebar'\n            excludeFromTabOrder\n            onPress={toggleSidebar}\n            className={composeRenderProps(className, (className, { isHovered, isPressed }) =>\n                cn(\n                    'fixed h-[calc(100svh-theme(spacing.4))] max-h-full w-4 transition bg-transparent',\n                    side === 'left' ? 'right-0' : 'left-0',\n                    state === 'collapsed' ? 'cursor-e-resize' : 'cursor-w-resize',\n                    (isHovered || isPressed) &&\n                        `${side === 'left' ? 'border-r-2' : 'border-l-2'} border-primary`,\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nSidebar.Content = SidebarBody\nSidebar.Footer = SidebarFooter\nSidebar.Header = SidebarHeader\nSidebar.Item = SidebarItem\nSidebar.SubItem = SidebarSubItem\nSidebar.Label = SidebarLabel\nSidebar.SubItemTrigger = SidebarSubItemTrigger\nSidebar.Rail = SidebarRail\nSidebar.Section = SidebarSection\nSidebar.Trigger = SidebarTrigger\n\nexport { Sidebar, SidebarInset }\n"
  },
  "command": {
    "component": "@/components/ui/command",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconLoader, IconSearch } from 'hq-icons'\nimport type {\n    AutocompleteProps,\n    MenuItemProps,\n    MenuProps,\n    MenuSectionProps,\n    ModalOverlayProps,\n    SeparatorProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Autocomplete,\n    Button,\n    Collection,\n    composeRenderProps,\n    Group,\n    Header,\n    Input,\n    Menu,\n    MenuItem,\n    MenuSection,\n    Separator,\n    Text,\n    TextField,\n    useFilter\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Modal } from './modal'\n\ninterface CommandProps<T>\n    extends Pick<MenuProps<T>, 'children' | 'items'>,\n        Pick<ModalOverlayProps, 'isOpen' | 'onOpenChange'>,\n        Pick<AutocompleteProps, 'inputValue' | 'onInputChange'> {\n    shortcut?: {\n        modifiers?: 'alt' | 'ctrl/meta' | 'ctrl/meta+alt'\n        key: string\n    }\n    isPending?: boolean\n}\n\nconst Command = <T extends object>({ shortcut, ...props }: CommandProps<T>) => {\n    const { contains } = useFilter({ sensitivity: 'accent' })\n    const [shortcutOpen, setShortcutOpen] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        if (!shortcut) return\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (\n                e.key === shortcut?.key &&\n                (shortcut.modifiers === 'alt'\n                    ? e.altKey\n                    : shortcut.modifiers === 'ctrl/meta+alt'\n                      ? e.altKey && (e.ctrlKey || e.metaKey)\n                      : e.ctrlKey || e.metaKey)\n            ) {\n                e.preventDefault()\n                if (props.onOpenChange) {\n                    return props.onOpenChange(!props.isOpen)\n                } else setShortcutOpen(!shortcutOpen)\n            } else if (e.key === 'Escape') {\n                e.preventDefault()\n                if (props.onOpenChange) {\n                    return props.onOpenChange(false)\n                } else setShortcutOpen(false)\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown)\n        return () => document.removeEventListener('keydown', handleKeyDown)\n    })\n\n    return (\n        <Modal.Content\n            isOpen={props.isOpen || shortcutOpen}\n            onOpenChange={props.onOpenChange || setShortcutOpen}\n            aria-label='Commands'\n            notch\n            {...props}\n        >\n            <Autocomplete\n                filter={props.inputValue && props.onInputChange ? undefined : contains}\n                inputValue={props.inputValue}\n                onInputChange={props.onInputChange}\n            >\n                <TextField className='p-1 border-b' aria-label='Search'>\n                    <Group className='flex items-center px-2'>\n                        {props.isPending ? (\n                            <IconLoader className='animate-spin size-4 shrink-0 text-muted-fg' />\n                        ) : (\n                            <IconSearch className='text-muted-fg size-4 shrink-0' />\n                        )}\n                        <Input\n                            autoFocus\n                            className='outline-hidden w-full p-2'\n                            placeholder='Search...'\n                        />\n                    </Group>\n                </TextField>\n                <Menu\n                    renderEmptyState={() => (\n                        <div className='p-4 text-muted-fg col-span-full text-center'>\n                            No results found\n                        </div>\n                    )}\n                    className='grid outline-hidden w-full grid-cols-[auto_1fr_auto] gap-y-1 max-h-[30rem] overflow-y-auto p-2'\n                    items={props.items}\n                >\n                    {props.children}\n                </Menu>\n            </Autocomplete>\n        </Modal.Content>\n    )\n}\n\nconst CommandItem = ({ isDanger, className, ...props }: MenuItemProps & { isDanger?: boolean }) => {\n    const textValue =\n        props.textValue || (typeof props.children === 'string' ? props.children : undefined)\n    return (\n        <MenuItem\n            textValue={textValue}\n            className={composeRenderProps(\n                className,\n                (className, { isOpen, isFocused, isSelected, isDisabled }) =>\n                    cn(\n                        'group relative grid grid-cols-subgrid col-span-full items-center',\n                        'rounded-md px-2 py-1.5 text-base sm:text-sm outline-hidden select-none',\n                        '**:[svg]:size-4 *:data-[slot=icon]:mr-2',\n                        isDanger\n                            ? 'text-danger **:text-danger focus:bg-danger/10 open:bg-danger/10 open:text-danger focus:text-danger focus:**:text-danger'\n                            : 'text-fg',\n                        isOpen && 'bg-primary/10 text-primary *:[.text-muted-fg]:text-primary',\n                        isFocused && 'bg-primary/10 text-primary',\n                        isSelected &&\n                            '**:data-avatar:hidden **:data-avatar:*:hidden **:data-[slot=icon]:hidden',\n                        isDisabled && 'pointer-events-none opacity-50',\n                        className\n                    )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CommandLabel = ({ className, ...props }: TextProps) => (\n    <Text slot='label' className={cn('col-start-2', className)} {...props} />\n)\n\nconst CommandSection = <T extends object>({\n    className,\n    ...props\n}: MenuSectionProps<T> & { title?: string }) => (\n    <MenuSection className={cn('col-span-full text-sm grid grid-cols-[auto_1fr] mt-2', className)}>\n        {'title' in props && (\n            <Header className='text-muted-fg text-xs py-1 px-2 col-span-full pointer-events-none'>\n                {props.title}\n            </Header>\n        )}\n        <Collection items={props.items}>{props.children}</Collection>\n    </MenuSection>\n)\n\nconst CommandSeparator = ({ className, ...props }: SeparatorProps) => (\n    <Separator\n        orientation='horizontal'\n        className={cn('bg-muted col-span-full -mx-1 my-1 h-px', className)}\n        {...props}\n    />\n)\n\nconst CommandShortcut = ({ className, ...props }: TextProps) => (\n    <Text\n        className={cn(\n            'text-current/60 group-hover:text-current group-focus:text-current text-xs',\n            className\n        )}\n        {...props}\n    />\n)\n\nCommand.Trigger = Button\nCommand.Item = CommandItem\nCommand.Label = CommandLabel\nCommand.Section = CommandSection\nCommand.Separator = CommandSeparator\nCommand.Shortcut = CommandShortcut\n\nexport { Command }\n"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCheck, IconChevronDown, IconX } from 'hq-icons'\nimport type {\n    ListBoxItemProps,\n    ListBoxSectionProps,\n    ComboBoxProps as RACComboboxProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Collection,\n    ComboBoxStateContext,\n    composeRenderProps,\n    Header,\n    ListBox,\n    ListBoxItem,\n    ListBoxSection,\n    Popover,\n    ComboBox as RACCombobox,\n    Text\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, FieldGroup, FieldProps, Input, Label } from './field'\n\ninterface ComboBoxProps<T extends object>\n    extends Omit<RACComboboxProps<T>, 'children'>,\n        FieldProps {\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    prefix?: React.ReactNode\n}\n\nconst ComboBox = <T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    placeholder,\n    className,\n    items,\n    ...props\n}: ComboBoxProps<T>) => {\n    return (\n        <RACCombobox\n            menuTrigger='focus'\n            className={composeRenderProps(className, (className) =>\n                cn('group flex flex-col gap-1.5 **:data-placeholder:text-muted-fg', className)\n            )}\n            {...props}\n        >\n            {({ isInvalid, isDisabled, isOpen }) => (\n                <>\n                    {label && (\n                        <Label isInvalid={isInvalid || !!errorMessage} isDisabled={isDisabled}>\n                            {label}\n                        </Label>\n                    )}\n                    <FieldGroup>\n                        {props.prefix ? (\n                            <span className='ml-2 has-[button]:ml-0 text-muted-fg'>\n                                {props.prefix}\n                            </span>\n                        ) : null}\n                        <Input placeholder={placeholder ?? 'Choose an option or Input value'} />\n                        {props.inputValue ? (\n                            <ClearButton />\n                        ) : (\n                            <Button\n                                aria-label='Chevron'\n                                className='rounded-lg outline-hidden inline-flex items-center justify-center text-muted-fg'\n                            >\n                                <IconChevronDown\n                                    className={cn(\n                                        'transition size-4 mr-2',\n                                        isOpen && '-rotate-180'\n                                    )}\n                                />\n                            </Button>\n                        )}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                    <Popover\n                        trigger='Select'\n                        className={({ isEntering, isExiting }) =>\n                            cn(\n                                'group max-h-72 overflow-y-auto border p-1 shadow bg-bg w-full max-w-(--trigger-width) rounded-lg transition outline-hidden',\n                                isEntering &&\n                                    'fade-in animate-in zoom-in-95 placement-left:slide-in-from-right-2 placement-right:slide-in-from-left-2 placement-top:slide-in-from-bottom-2 placement-bottom:slide-in-from-top-2',\n                                isExiting &&\n                                    'fade-out animate-out zoom-out-95 placement-left:slide-out-to-right-2 placement-right:slide-out-to-left-2 placement-top:slide-out-to-bottom-2 placement-bottom:slide-out-to-top-2'\n                            )\n                        }\n                    >\n                        <ListBox\n                            aria-label='items'\n                            items={items}\n                            className='grid outline-hidden w-full grid-cols-[auto_1fr_1.5rem_0.5rem_auto] gap-y-1 overflow-y-auto rounded-lg'\n                        >\n                            {children}\n                        </ListBox>\n                    </Popover>\n                </>\n            )}\n        </RACCombobox>\n    )\n}\n\nconst ClearButton = () => {\n    const state = React.use(ComboBoxStateContext)!\n    return (\n        <Button\n            className='rounded-lg cursor-pointer outline-hidden inline-flex items-center justify-center text-muted-fg hover:text-fg'\n            slot={null}\n            aria-label='Clear'\n            onPress={() => {\n                state.setInputValue('')\n                state.setSelectedKey(null)\n                state.open()\n            }}\n        >\n            <IconX className='size-4 mr-2' />\n        </Button>\n    )\n}\n\nconst ComboBoxItem = ({ className, children, ...props }: ListBoxItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <ListBoxItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(\n                className,\n                (className, { isHovered, isFocused, isSelected, isDisabled, isFocusVisible }) =>\n                    cn(\n                        'group relative grid grid-cols-subgrid col-span-full',\n                        'rounded-md px-2 py-1.5 text-base sm:text-sm/6 select-none',\n                        '**:[svg]:size-4 *:[svg]:mr-2 *:[svg]:my-1 *:data-avatar:mr-2 *:data-avatar:size-6',\n                        { 'bg-primary text-primary-fg': isFocused || isFocusVisible || isHovered },\n                        isSelected && '**:data-[slot=icon]:hidden **:data-avatar:hidden',\n                        isDisabled && 'pointer-events-none opacity-50',\n                        className\n                    )\n            )}\n        >\n            {({ isSelected }) => (\n                <>\n                    {isSelected && <IconCheck data-slot='checked' />}\n                    {typeof children === 'string' ? (\n                        <Text slot='label' className='col-start-2'>\n                            {children}\n                        </Text>\n                    ) : (\n                        children\n                    )}\n                </>\n            )}\n        </ListBoxItem>\n    )\n}\n\nconst ComboBoxSection = <T extends object>({\n    className,\n    ...props\n}: ListBoxSectionProps<T> & { title?: string }) => (\n    <ListBoxSection\n        className={cn('col-span-full text-sm grid grid-cols-[auto_1fr] mt-2', className)}\n    >\n        {'title' in props && (\n            <Header className='text-muted-fg text-xs py-1 px-2 col-span-full pointer-events-none'>\n                {props.title}\n            </Header>\n        )}\n        <Collection items={props.items}>{props.children}</Collection>\n    </ListBoxSection>\n)\n\nComboBox.Item = ComboBoxItem\nComboBox.Section = ComboBoxSection\n\nexport { ComboBox }\n"
  }
}