{
  "media/avatar/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar/avatar-initials-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarInitialsDemo() {\n    return <Avatar alt='Diqi Al Haqqi' />\n}\n"
  },
  "media/avatar/avatar-size-demo": {
    "component": "@/components/docs/media/avatar/avatar-size-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarSizeDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Avatar alt='avatar-sm' size='xs' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-sm' size='sm' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-md' size='md' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-lg' size='lg' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-xl' size='xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-2xl' size='2xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-3xl' size='3xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-4xl' size='4xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-5xl' size='5xl' src='https://github.com/dq-alhq.png' />\n        </div>\n    )\n}\n"
  },
  "media/avatar/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar/avatar-shape-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarShapeDemo() {\n    return <Avatar alt='Diqi Al-Haqqi' shape='square' src='https://github.com/dq-alhq.png' />\n}\n"
  },
  "media/avatar/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar/avatar-fallback-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarFallbackDemo() {\n    return <Avatar />\n}\n"
  },
  "media/avatar/avatar-group-demo": {
    "component": "@/components/docs/media/avatar/avatar-group-demo",
    "raw": "import { Avatar, AvatarGroup } from '@/components/ui'\n\nexport default function AvatarGroupDemo() {\n    return (\n        <AvatarGroup aria-label='avatar-group'>\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=61' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=62' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=63' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=64' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=65' />\n        </AvatarGroup>\n    )\n}\n"
  },
  "media/user/user-basic-demo": {
    "component": "@/components/docs/media/user/user-basic-demo",
    "raw": "import { User } from '@/components/ui'\n\nexport default function UserBasicDemo() {\n    return <User description='@dq-alhq' name='DQ Al Haqqi' src='https://github.com/dq-alhq.png' />\n}\n"
  },
  "media/user/user-shape-demo": {
    "component": "@/components/docs/media/user/user-shape-demo",
    "raw": "import { User } from '@/components/ui'\n\nexport default function UserShapeDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <User description='Admin' name='John Doe' shape='circle' />\n            <User description='Admin' name='John Doe' shape='square' />\n        </div>\n    )\n}\n"
  },
  "media/user/user-size-demo": {
    "component": "@/components/docs/media/user/user-size-demo",
    "raw": "import { User } from '@/components/ui'\n\nexport default function UserSizeDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <User description='Admin' name='John Doe' size='md' />\n            <User description='Admin' name='John Doe' size='lg' />\n            <User description='Admin' name='John Doe' size='xl' />\n        </div>\n    )\n}\n"
  },
  "media/carousel/carousel-api-demo": {
    "component": "@/components/docs/media/carousel/carousel-api-demo",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Button } from 'react-aria-components'\nimport { Card, Carousel, type CarouselApi } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport default function CarouselDApiDemo() {\n    const [api, setApi] = useState<CarouselApi>()\n    const [current, setCurrent] = useState(0)\n    const [count, setCount] = useState(0)\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n        setCount(api.scrollSnapList().length)\n        setCurrent(api.selectedScrollSnap() + 1)\n        api.on('select', () => {\n            setCurrent(api.selectedScrollSnap() + 1)\n        })\n    }, [api])\n\n    const handleSelect = (index: number) => {\n        if (api) {\n            api.scrollTo(index)\n            setCurrent(index + 1)\n        }\n    }\n\n    return (\n        <Carousel className='w-full max-w-sm' setApi={setApi}>\n            <Carousel.Content items={Array.from({ length: 10 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item id={id}>\n                        <Card>\n                            <Card.Content className='flex aspect-square items-center justify-center p-6'>\n                                <span className='font-semibold text-4xl'>{id}</span>\n                            </Card.Content>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n            <div className='flex items-center justify-between'>\n                <div className='flex gap-1 py-2 text-center text-muted-foreground text-sm'>\n                    {Array.from({ length: 10 }).map((_, index) => (\n                        <Button\n                            aria-label={`Slide ${current} of ${count}`}\n                            className={cn(\n                                'size-3 rounded-full transition',\n                                current === index + 1 ? 'bg-primary' : 'bg-muted hover:bg-primary/50'\n                            )}\n                            key={index}\n                            onPress={() => handleSelect(index)}\n                        />\n                    ))}\n                </div>\n\n                <Carousel.Handler />\n            </div>\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-options-demo": {
    "component": "@/components/docs/media/carousel/carousel-options-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOptionsDemo() {\n    return (\n        <Carousel\n            className='w-full max-w-2xl'\n            opts={{\n                align: 'center',\n                loop: true\n            }}\n        >\n            <Carousel.Content items={Array.from({ length: 16 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item className='basis-1/2 lg:basis-1/3' id={id}>\n                        <Card className='flex aspect-square items-center justify-center'>\n                            <Card.Title>{id}</Card.Title>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-autoplay-demo": {
    "component": "@/components/docs/media/carousel/carousel-autoplay-demo",
    "raw": "'use client'\n\nimport Autoplay from 'embla-carousel-autoplay'\nimport { useRef } from 'react'\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselAutoplayDemo() {\n    const plugin = useRef(Autoplay({ delay: 1000, stopOnInteraction: true }))\n\n    return (\n        <Carousel\n            className='w-full max-w-xs'\n            onMouseEnter={plugin.current.stop}\n            onMouseLeave={plugin.current.reset}\n            opts={{\n                loop: true,\n                align: 'center'\n            }}\n            plugins={[plugin.current]}\n        >\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title className='line-clamp-1 sm:text-lg'>{item.title}</Card.Title>\n                                <Card.Description className='line-clamp-2'>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description: 'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "media/carousel/carousel-with-collection-demo": {
    "component": "@/components/docs/media/carousel/carousel-with-collection-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselWithCollectionDemo() {\n    return (\n        <Carousel className='w-full max-w-xs'>\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <Card className='p-1'>\n                            <Image\n                                alt={`image ${item.id}`}\n                                className='h-40 rounded-lg object-cover object-center'\n                                height={300}\n                                src={`https://picsum.photos/id/${item.id}/400/300`}\n                                width={400}\n                            />\n                            <Card.Header className='p-3'>\n                                <Card.Title className='line-clamp-1 sm:text-lg'>{item.title}</Card.Title>\n                                <Card.Description className='line-clamp-2'>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description: 'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    }\n]\n"
  },
  "media/carousel/carousel-orientation-demo": {
    "component": "@/components/docs/media/carousel/carousel-orientation-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOrientationDemo() {\n    return (\n        <Carousel orientation='vertical'>\n            <Carousel.Content className='h-32' items={items}>\n                {(item) => (\n                    <Carousel.Item className='basis-1/2 md:basis-1/3'>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title>{item.title}</Card.Title>\n                                <Card.Description>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description: 'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "media/carousel/carousel-demo": {
    "component": "@/components/docs/media/carousel/carousel-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\nimport { Carousel } from '@/components/ui'\n\nexport default function CarouselDemo() {\n    return (\n        <Carousel className='w-full max-w-xs'>\n            <Carousel.Content>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        alt='image 1'\n                        className='rounded-lg'\n                        height={300}\n                        src='https://picsum.photos/id/61/400/300'\n                        width={400}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        alt='image 2'\n                        className='rounded-lg'\n                        height={300}\n                        src='https://picsum.photos/id/62/400/300'\n                        width={400}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        alt='image 3'\n                        className='rounded-lg'\n                        height={300}\n                        src='https://picsum.photos/id/63/400/300'\n                        width={400}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        alt='image 4'\n                        className='rounded-lg'\n                        height={300}\n                        src='https://picsum.photos/id/64/400/300'\n                        width={400}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        alt='image 5'\n                        className='rounded-lg'\n                        height={300}\n                        src='https://picsum.photos/id/65/400/300'\n                        width={400}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        alt='image 6'\n                        className='rounded-lg'\n                        height={300}\n                        src='https://picsum.photos/id/66/400/300'\n                        width={400}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        alt='image 7'\n                        className='rounded-lg'\n                        height={300}\n                        src='https://picsum.photos/id/61/400/300'\n                        width={400}\n                    />\n                </Carousel.Item>\n            </Carousel.Content>\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n"
  },
  "surfaces/spoiler/spoiler-demo": {
    "component": "@/components/docs/surfaces/spoiler/spoiler-demo",
    "raw": "import Image from 'next/image'\nimport { Spoiler } from '@/components/ui'\n\nexport default function SpoilerDemo() {\n    return (\n        <Spoiler>\n            <Image\n                alt='Image'\n                className='rounded-lg'\n                height={1080}\n                src='https://picsum.photos/1920/1080'\n                width={1920}\n            />\n        </Spoiler>\n    )\n}\n"
  },
  "surfaces/spoiler/spoiler-initial-demo": {
    "component": "@/components/docs/surfaces/spoiler/spoiler-initial-demo",
    "raw": "import Image from 'next/image'\nimport { Spoiler } from '@/components/ui'\n\nexport default function SpoilerInitialDemo() {\n    return (\n        <Spoiler initialHeight={128} initialOpacity={0.5} showLessText='Hide' showMoreText='Reveal'>\n            <Image\n                alt='Image'\n                className='rounded-lg'\n                height={1080}\n                src='https://picsum.photos/1920/1080'\n                width={1920}\n            />\n        </Spoiler>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-demo",
    "raw": "import { DL } from '@/components/ui/description-list'\n\nexport default function DescriptionListDemo() {\n    return (\n        <DL>\n            <DL.T>Product Name</DL.T>\n            <DL.D>PC Gaming Mid End</DL.D>\n            <DL.T>Processor</DL.T>\n            <DL.D>Intel Core i7-12700K</DL.D>\n            <DL.T>Memory</DL.T>\n            <DL.D>32GB DDR5 4800MHz</DL.D>\n            <DL.T>Storage</DL.T>\n            <DL.D>1TB SSD M.2 NVMe</DL.D>\n            <DL.T>Graphics Card</DL.T>\n            <DL.D>RTX 4090 24GB</DL.D>\n        </DL>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-heading-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-heading-demo",
    "raw": "import { DL, Header } from '@/components/ui'\n\nexport default function DescriptionListHeadingDemo() {\n    return (\n        <div>\n            <Header description='PC Gaming' title='PC Gaming' />\n            <DL>\n                <DL.T>Processor</DL.T>\n                <DL.D>Intel Core i7-12700K</DL.D>\n                <DL.T>Memory</DL.T>\n                <DL.D>32GB DDR5 4800MHz</DL.D>\n                <DL.T>Storage</DL.T>\n                <DL.D>1TB SSD M.2 NVMe</DL.D>\n                <DL.T>Graphics Card</DL.T>\n                <DL.D>RTX 4090 24GB</DL.D>\n            </DL>\n        </div>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-card-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-card-demo",
    "raw": "import { Button, Card, DL } from '@/components/ui'\n\nexport default function DescriptionListCardDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>PC Gaming</Card.Title>\n                <Card.Description>Here are some features of this product.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <DL>\n                    <DL.T>Processor</DL.T>\n                    <DL.D>Intel Core i7-12700K</DL.D>\n                    <DL.T>Memory</DL.T>\n                    <DL.D>32GB DDR5 4800MHz</DL.D>\n                    <DL.T>Storage</DL.T>\n                    <DL.D>1TB SSD M.2 NVMe</DL.D>\n                    <DL.T>Graphics Card</DL.T>\n                    <DL.D>RTX 4090 24GB</DL.D>\n                </DL>\n            </Card.Content>\n            <Card.Footer>\n                <Button>Buy Now</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/header/header-basic-demo": {
    "component": "@/components/docs/surfaces/header/header-basic-demo",
    "raw": "import { Header } from '@/components/ui'\n\nexport default function HeaderBasicDemo() {\n    return <Header description='Manage users, groups, and roles.' title='Users' />\n}\n"
  },
  "surfaces/header/header-action-demo": {
    "component": "@/components/docs/surfaces/header/header-action-demo",
    "raw": "import { IconUserPlus } from '@tabler/icons-react'\nimport { Header } from '@/components/ui'\nimport { Button } from '@/components/ui/button'\nimport { SearchField } from '@/components/ui/search-field'\n\nexport default function HeaderActionDemo() {\n    return (\n        <Header description='Manage users, groups, and roles.' title='Users'>\n            <Header.Action>\n                <SearchField placeholder='Search users' />\n                <Button>\n                    <IconUserPlus /> New User\n                </Button>\n            </Header.Action>\n        </Header>\n    )\n}\n"
  },
  "surfaces/code/code-block-demo": {
    "component": "@/components/docs/surfaces/code/code-block-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = `export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )`\n\nexport default function CodeBlockDemo() {\n    return <Code code={code} />\n}\n"
  },
  "surfaces/code/code-highlight-demo": {
    "component": "@/components/docs/surfaces/code/code-highlight-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = `import { Provider } from './providers'\n \nconst appElement = (\n  <Providers>\n    <App {...props} />\n  </Providers>\n)`\n\nexport default function CodeHighlightDemo() {\n    return <Code code={code} highlight={['1', '4-6']} />\n}\n"
  },
  "surfaces/code/code-snippet-demo": {
    "component": "@/components/docs/surfaces/code/code-snippet-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = 'npx hq-kit@latest init'\n\nexport default function CodeSnippetDemo() {\n    return <Code code={code} lang='bash' />\n}\n"
  },
  "surfaces/code/code-theme-demo": {
    "component": "@/components/docs/surfaces/code/code-theme-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport type { Theme } from 'rehype-pretty-code'\nimport { useState } from 'react'\nimport { Code, Select } from '@/components/ui'\n\nconst themes = [\n    'andromeeda',\n    'aurora-x',\n    'ayu-dark',\n    'catppuccin-frappe',\n    'catppuccin-latte',\n    'catppuccin-macchiato',\n    'catppuccin-mocha',\n    'dark-plus',\n    'dracula',\n    'dracula-soft',\n    'everforest-dark',\n    'everforest-light',\n    'github-dark',\n    'github-dark-default',\n    'github-dark-dimmed',\n    'github-dark-high-contrast',\n    'github-light',\n    'github-light-default',\n    'github-light-high-contrast',\n    'gruvbox-dark-hard',\n    'gruvbox-dark-medium',\n    'gruvbox-dark-soft',\n    'gruvbox-light-hard',\n    'gruvbox-light-medium',\n    'gruvbox-light-soft',\n    'houston',\n    'kanagawa-dragon',\n    'kanagawa-lotus',\n    'kanagawa-wave',\n    'laserwave',\n    'light-plus',\n    'material-theme',\n    'material-theme-darker',\n    'material-theme-lighter',\n    'material-theme-ocean',\n    'material-theme-palenight',\n    'min-dark',\n    'min-light',\n    'monokai',\n    'night-owl',\n    'nord',\n    'one-dark-pro',\n    'one-light',\n    'plastic',\n    'poimandres',\n    'red',\n    'rose-pine',\n    'rose-pine-dawn',\n    'rose-pine-moon',\n    'slack-dark',\n    'slack-ochin',\n    'snazzy-light',\n    'solarized-dark',\n    'solarized-light',\n    'synthwave-84',\n    'tokyo-night',\n    'vesper',\n    'vitesse-black',\n    'vitesse-dark',\n    'vitesse-light'\n].map((t) => ({ id: t, name: t }))\n\nconst code = `export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )`\n\nexport default function CodeThemeDemo() {\n    const [theme, setTheme] = useState<Key | null>('dracula')\n    return (\n        <div className='space-y-4'>\n            <Select items={themes} label='Theme' onSelectionChange={setTheme} searchable selectedKey={theme}>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Code code={code} theme={theme as Theme} />\n        </div>\n    )\n}\n"
  },
  "surfaces/code/code-filename-demo": {
    "component": "@/components/docs/surfaces/code/code-filename-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = `export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )`\n\nexport default function CodeFilenameDemo() {\n    return <Code code={code} filename='src/app/layout.tsx' />\n}\n"
  },
  "surfaces/code/code-language-demo": {
    "component": "@/components/docs/surfaces/code/code-language-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = `<?php\n\nuse Illuminate\\\\Support\\\\Facades\\\\Route;\nuse Inertia\\\\Inertia;\n\nRoute::get('/', function () {\n    return Inertia::render('welcome');\n})->name('home');\n\nRoute::middleware(['auth', 'verified'])->group(function () {\n    Route::get('dashboard', function () {\n        return Inertia::render('dashboard');\n    })->name('dashboard');\n});`\n\nexport default function CodeLanguageDemo() {\n    return <Code code={code} filename='routes/web.php' lang='php' />\n}\n"
  },
  "surfaces/card/card-demo": {
    "component": "@/components/docs/surfaces/card/card-demo",
    "raw": "import { Button, Card } from '@/components/ui'\n\nexport default function CardDemo() {\n    return (\n        <Card className='max-w-lg'>\n            <Card.Header>\n                <Card.Title>Monthly Report</Card.Title>\n                <Card.Description>Financial summary for June</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                The monthly financial report shows a 15% increase in revenue compared to last month.\n            </Card.Content>\n            <Card.Footer>\n                <Button>View Details</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/card/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card/card-login-form-demo",
    "raw": "import { Button, Card, Checkbox, Link, TextField } from '@/components/ui'\n\nexport default function CardLoginFormDemo() {\n    return (\n        <Card className='mx-auto max-w-md'>\n            <Card.Header>\n                <Card.Title>Login</Card.Title>\n                <Card.Description>Don&apos;t loose the level, just keep on going.</Card.Description>\n            </Card.Header>\n            <Card.Content className='space-y-6'>\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <TextField isRequired label='Password' placeholder='Enter your password' type='password' />\n                <div className='flex items-center justify-between'>\n                    <Checkbox>Remember me</Checkbox>\n                    <Link href='#'>Forgot password?</Link>\n                </div>\n            </Card.Content>\n            <Card.Footer>\n                <Button className='w-full'>Login</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/card/card-table-demo": {
    "component": "@/components/docs/surfaces/card/card-table-demo",
    "raw": "import { IconDots, IconEye, IconPencil, IconTrash } from '@tabler/icons-react'\nimport { Card, Menu, Pagination, Table } from '@/components/ui'\n\nexport default function CardTableDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Table aria-label='Users'>\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column isRowHeader>Name</Table.Column>\n                        <Table.Column>Gender</Table.Column>\n                        <Table.Column>Age</Table.Column>\n                        <Table.Column>Occupation</Table.Column>\n                        <Table.Column />\n                    </Table.Header>\n                    <Table.Body items={users}>\n                        {(item) => (\n                            <Table.Row id={item.id}>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.name}</Table.Cell>\n                                <Table.Cell>{item.gender}</Table.Cell>\n                                <Table.Cell>{item.age}</Table.Cell>\n                                <Table.Cell>{item.occupation}</Table.Cell>\n                                <Table.Cell className='flex justify-end'>\n                                    <Menu>\n                                        <Menu.Trigger>\n                                            <IconDots />\n                                        </Menu.Trigger>\n                                        <Menu.Content placement='left top'>\n                                            <Menu.Item>\n                                                <IconEye />\n                                                <Menu.Label>View</Menu.Label>\n                                            </Menu.Item>\n                                            <Menu.Item>\n                                                <IconPencil />\n                                                <Menu.Label>Edit</Menu.Label>\n                                            </Menu.Item>\n                                            <Menu.Separator />\n                                            <Menu.Item isDestructive>\n                                                <IconTrash />\n                                                <Menu.Label>Delete</Menu.Label>\n                                            </Menu.Item>\n                                        </Menu.Content>\n                                    </Menu>\n                                </Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n            <Card.Footer className='flex-col justify-between gap-2 md:flex-row'>\n                <div className='text-muted-foreground text-sm'>Showing 1 to 10 of 50 entries</div>\n                <Pagination>\n                    <Pagination.Item href='#first' slot='first' />\n                    <Pagination.Item href='#previous' slot='previous' />\n                    <Pagination.Label className='lg:hidden' current={2} total={5} />\n                    <Pagination.Pages className='hidden lg:flex'>\n                        <Pagination.Item href='#1'>1</Pagination.Item>\n                        <Pagination.Item href='#2' isCurrent>\n                            2\n                        </Pagination.Item>\n                        <Pagination.Item href='#3'>3</Pagination.Item>\n                        <Pagination.Item slot='ellipsis' />\n                        <Pagination.Item href='#5'>5</Pagination.Item>\n                    </Pagination.Pages>\n                    <Pagination.Item href='#next' slot='next' />\n                    <Pagination.Item href='#last' slot='last' />\n                </Pagination>\n            </Card.Footer>\n        </Card>\n    )\n}\n\nconst users = [\n    {\n        id: 1,\n        name: 'John Doe',\n        gender: 'Male',\n        age: 30,\n        occupation: 'Software Engineer'\n    },\n    {\n        id: 2,\n        name: 'Jane Smith',\n        gender: 'Female',\n        age: 25,\n        occupation: 'Marketing Manager'\n    },\n    {\n        id: 3,\n        name: 'Bob Johnson',\n        gender: 'Male',\n        age: 40,\n        occupation: 'Doctor'\n    },\n    {\n        id: 4,\n        name: 'Emily Chen',\n        gender: 'Female',\n        age: 28,\n        occupation: 'Teacher'\n    },\n    {\n        id: 5,\n        name: 'Michael Brown',\n        gender: 'Male',\n        age: 35,\n        occupation: 'Lawyer'\n    },\n    {\n        id: 6,\n        name: 'Sarah Lee',\n        gender: 'Female',\n        age: 32,\n        occupation: 'Designer'\n    },\n    {\n        id: 7,\n        name: 'Kevin White',\n        gender: 'Male',\n        age: 45,\n        occupation: 'CEO'\n    },\n    {\n        id: 8,\n        name: 'Lisa Nguyen',\n        gender: 'Female',\n        age: 29,\n        occupation: 'Engineer'\n    },\n    {\n        id: 9,\n        name: 'David Kim',\n        gender: 'Male',\n        age: 38,\n        occupation: 'Consultant'\n    },\n    {\n        id: 10,\n        name: 'Hannah Patel',\n        gender: 'Female',\n        age: 26,\n        occupation: 'Writer'\n    }\n]\n"
  },
  "surfaces/card/card-action-demo": {
    "component": "@/components/docs/surfaces/card/card-action-demo",
    "raw": "import { IconUserPlus } from '@tabler/icons-react'\nimport { Button, Card, SearchField } from '@/components/ui'\n\nexport default function CardActionDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n                <Card.Action>\n                    <SearchField placeholder='Search users' />\n                    <Button>\n                        <IconUserPlus /> New User\n                    </Button>\n                </Card.Action>\n            </Card.Header>\n        </Card>\n    )\n}\n"
  },
  "surfaces/separator/separator-button-demo": {
    "component": "@/components/docs/surfaces/separator/separator-button-demo",
    "raw": "import { Button, Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return (\n        <div className='flex flex-col items-center gap-6'>\n            <div>Content Above</div>\n            <Separator>\n                <Button variant='outline'>Show More</Button>\n            </Separator>\n            <div>Content Below</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/separator/separator-text-demo": {
    "component": "@/components/docs/surfaces/separator/separator-text-demo",
    "raw": "import { Separator } from '@/components/ui'\n\nexport default function SeparatorTextDemo() {\n    return (\n        <div className='flex flex-col items-center gap-2'>\n            <div>Content Above</div>\n            <Separator>OR</Separator>\n            <div>Content Below</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/separator/separator-orientation-demo": {
    "component": "@/components/docs/surfaces/separator/separator-orientation-demo",
    "raw": "import { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return (\n        <div className='flex h-24 items-center gap-2'>\n            <div>Content Left</div>\n            <Separator orientation='vertical'>OR</Separator>\n            <div>Content Right</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/separator/separator-demo": {
    "component": "@/components/docs/surfaces/separator/separator-demo",
    "raw": "import { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return (\n        <div className='flex flex-col items-center gap-2'>\n            <div>Content Above</div>\n            <Separator />\n            <div>Content Below</div>\n        </div>\n    )\n}\n"
  },
  "collections/accordion/accordion-default-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-default-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionGroupDefaultExpandDemo() {\n    return (\n        <Accordion defaultExpandedKeys={[2]}>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>Personal Information</Accordion.Trigger>\n                <Accordion.Content>Personal information form here.</Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>Billing Address</Accordion.Trigger>\n                <Accordion.Content>Billing address form here.</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/accordion/accordion-disabled-demo": {
    "component": "@/components/docs/collections/accordion/accordion-disabled-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDisabledDemo() {\n    return (\n        <Accordion>\n            {faqs.map((item, index) => (\n                <Accordion.Item id={index} isDisabled={index === 2} key={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'Do you offer gift wrapping options?',\n        a: 'Yes, we provide gift wrapping services for a small additional charge at checkout.'\n    },\n    {\n        q: 'Can I return a gift card?',\n        a: 'Sorry, gift cards are non-refundable and cannot be returned.'\n    },\n    {\n        q: 'What are your store hours?',\n        a: 'Our store is open from 9 AM to 9 PM on weekdays and 10 AM to 6 PM on weekends.'\n    },\n    {\n        q: 'Do you have a loyalty program?',\n        a: 'Yes, we have a loyalty program where you can earn points for every purchase and redeem them for discounts.'\n    },\n    {\n        q: 'How do I update my billing information?',\n        a: 'You can update your billing information through your account settings on our website.'\n    },\n    {\n        q: 'Are there any discounts for bulk orders?',\n        a: 'Yes, we offer discounts on bulk orders. Please contact our sales team for more details.'\n    }\n]\n"
  },
  "collections/accordion/accordion-allow-multiple-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-allow-multiple-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionAllowMultipleExpandDemo() {\n    return (\n        <Accordion allowsMultipleExpanded>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>Personal Information</Accordion.Trigger>\n                <Accordion.Content>Personal information form here.</Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>Billing Address</Accordion.Trigger>\n                <Accordion.Content>Billing address form here.</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/accordion/accordion-demo": {
    "component": "@/components/docs/collections/accordion/accordion-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>Personal Information</Accordion.Trigger>\n                <Accordion.Content>Personal information form here.</Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>Billing Address</Accordion.Trigger>\n                <Accordion.Content>Billing address form here.</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-disabled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-disabled-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDisabledDemo() {\n    return (\n        <Collapsible isDisabled>\n            <Collapsible.Trigger>System Requirements</Collapsible.Trigger>\n            <Collapsible.Content>Details about system requirements here.</Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-controlled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleControlledDemo() {\n    const [expanded, setExpanded] = useState(false)\n\n    return (\n        <div className='space-y-6'>\n            <Collapsible isExpanded={expanded} onExpandedChange={setExpanded}>\n                <Collapsible.Trigger>System Requirements</Collapsible.Trigger>\n                <Collapsible.Content>Details about system requirements here.</Collapsible.Content>\n            </Collapsible>\n            <code>{JSON.stringify({ expanded }, null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDemo() {\n    return (\n        <Collapsible>\n            <Collapsible.Trigger>System Requirements</Collapsible.Trigger>\n            <Collapsible.Content>Details about system requirements here.</Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/menu/menu-basic-demo": {
    "component": "@/components/docs/collections/menu/menu-basic-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuBasicDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-collection-demo": {
    "component": "@/components/docs/collections/menu/menu-collection-demo",
    "raw": "'use client'\n\nimport {\n    IconBrandArc,\n    IconBrandChrome,\n    IconBrandEdge,\n    IconBrandFirefox,\n    IconBrandOpera,\n    IconBrandSafari\n} from '@tabler/icons-react'\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Chrome', icon: IconBrandChrome },\n    { id: 2, name: 'Firefox', icon: IconBrandFirefox },\n    { id: 3, name: 'Opera', icon: IconBrandOpera },\n    { id: 4, name: 'Arc', icon: IconBrandArc },\n    { id: 5, name: 'Edge', icon: IconBrandEdge },\n    { id: 6, name: 'Safari', icon: IconBrandSafari }\n]\n\nexport default function MenuCollectionDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content items={items}>\n                {(item) => (\n                    <Menu.Item id={item.id}>\n                        <item.icon />\n                        <Menu.Label>{item.name}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/multiple-menu-demo": {
    "component": "@/components/docs/collections/menu/multiple-menu-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Recent Files' },\n    { id: 2, name: 'Downloads' },\n    { id: 3, name: 'Documents' },\n    { id: 4, name: 'Music' },\n    { id: 5, name: 'Pictures' },\n    { id: 6, name: 'Videos' }\n]\n\nexport default function MultipleMenuDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1, 2]))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content\n                items={items}\n                onSelectionChange={setSelected}\n                selectedKeys={selected}\n                selectionMode='multiple'\n            >\n                {(item) => (\n                    <Menu.Item id={item.id} textValue={item.name}>\n                        <Menu.Label>{item.name}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu/menu-with-icon-demo",
    "raw": "'use client'\n\nimport { IconEye, IconPencil } from '@tabler/icons-react'\nimport { Menu } from '@/components/ui'\n\nexport default function MenuWithIconDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <IconEye />\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <IconPencil />\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-sub-demo": {
    "component": "@/components/docs/collections/menu/menu-sub-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSubDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Submenu>\n                    <Menu.Item>\n                        <Menu.Label>Options</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Content>\n                        <Menu.Item>\n                            <Menu.Label>Edit</Menu.Label>\n                        </Menu.Item>\n                        <Menu.Submenu>\n                            <Menu.Item isDestructive>\n                                <Menu.Label>Delete</Menu.Label>\n                            </Menu.Item>\n                            <Menu.Content>\n                                <Menu.Item>\n                                    <Menu.Label>For Everyone</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Submenu>\n                                    <Menu.Item>\n                                        <Menu.Label>For Me</Menu.Label>\n                                    </Menu.Item>\n                                    <Menu.Content>\n                                        <Menu.Item>\n                                            <Menu.Label>Permanently</Menu.Label>\n                                        </Menu.Item>\n                                        <Menu.Item>\n                                            <Menu.Label>Temporary</Menu.Label>\n                                        </Menu.Item>\n                                    </Menu.Content>\n                                </Menu.Submenu>\n                            </Menu.Content>\n                        </Menu.Submenu>\n                    </Menu.Content>\n                </Menu.Submenu>\n                <Menu.Item>\n                    <Menu.Label>Help</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-disabled-demo": {
    "component": "@/components/docs/collections/menu/menu-disabled-demo",
    "raw": "'use client'\n\nimport { IconEye, IconPencil, IconTrash } from '@tabler/icons-react'\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDisabledDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <Menu>\n                <Menu.Trigger>Disabled by Item</Menu.Trigger>\n                <Menu.Content>\n                    <Menu.Item>\n                        <IconEye />\n                        <Menu.Label>View</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item isDisabled>\n                        <IconPencil />\n                        <Menu.Label>Edit</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item isDestructive isDisabled>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n            <Menu>\n                <Menu.Trigger>Disabled by Key</Menu.Trigger>\n                <Menu.Content disabledKeys={['edit', 'delete']}>\n                    <Menu.Item id='view'>\n                        <IconEye />\n                        <Menu.Label>View</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='edit'>\n                        <IconPencil />\n                        <Menu.Label>Edit</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='delete' isDestructive>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </div>\n    )\n}\n"
  },
  "collections/menu/menu-destructive-demo": {
    "component": "@/components/docs/collections/menu/menu-destructive-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDestructiveDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item isDestructive>\n                    <Menu.Label>Delete</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-section-level-demo": {
    "component": "@/components/docs/collections/menu/menu-section-level-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport {\n    IconAlignCenter,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconClipboard,\n    IconCopy,\n    IconItalic,\n    IconScissors,\n    IconUnderline\n} from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSectionLevelDemo() {\n    const [style, setStyle] = useState<Selection>(new Set(['bold']))\n    const [align, setAlign] = useState<Selection>(new Set(['left']))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Section title='Actions'>\n                    <Menu.Item textValue='Cut'>\n                        <IconScissors />\n                        <Menu.Label>Cut</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item textValue='Copy'>\n                        <IconCopy />\n                        <Menu.Label>Copy</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item textValue='Paste'>\n                        <IconClipboard />\n                        <Menu.Label>Paste</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n                <Menu.Separator />\n                <Menu.Section\n                    onSelectionChange={setStyle}\n                    selectedKeys={style}\n                    selectionMode='multiple'\n                    title='Text style'\n                >\n                    <Menu.Item id='bold' textValue='Bold'>\n                        <IconBold />\n                        <Menu.Label>Bold</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='italic' textValue='Italic'>\n                        <IconItalic />\n                        <Menu.Label>Italic</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='underline' textValue='Underline'>\n                        <IconUnderline />\n                        <Menu.Label>Underline</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n                <Menu.Separator />\n                <Menu.Section\n                    onSelectionChange={setAlign}\n                    selectedKeys={align}\n                    selectionMode='single'\n                    title='Text alignment'\n                >\n                    <Menu.Item id='left' textValue='Left'>\n                        <IconAlignLeft />\n                        <Menu.Label>Left</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='center' textValue='Cente'>\n                        <IconAlignCenter />\n                        <Menu.Label>Center</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='right' textValue='Right'>\n                        <IconAlignRight />\n                        <Menu.Label>Right</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/single-menu-demo": {
    "component": "@/components/docs/collections/menu/single-menu-demo",
    "raw": "'use client'\n\nimport type { Placement } from '@react-types/overlays'\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { Menu } from '@/components/ui'\n\nconst placements = [\n    { position: 'bottom' },\n    { position: 'bottom left' },\n    { position: 'bottom right' },\n    { position: 'bottom start' },\n    { position: 'bottom end' },\n    { position: 'top' },\n    { position: 'top left' },\n    { position: 'top right' },\n    { position: 'top start' },\n    { position: 'top end' },\n    { position: 'left' },\n    { position: 'left top' },\n    { position: 'left bottom' },\n    { position: 'start' },\n    { position: 'start top' },\n    { position: 'start bottom' },\n    { position: 'right' },\n    { position: 'right top' },\n    { position: 'right bottom' },\n    { position: 'end' },\n    { position: 'end top' },\n    { position: 'end bottom' }\n]\n\nexport default function SingleMenuDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set(['bottom']))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content\n                items={placements}\n                onSelectionChange={setSelected}\n                placement={Array.from(selected)[0] as Placement}\n                selectedKeys={selected}\n                selectionMode='single'\n            >\n                {(item) => (\n                    <Menu.Item id={item.position}>\n                        <Menu.Label>{item.position}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-respect-screen-demo": {
    "component": "@/components/docs/collections/menu/menu-respect-screen-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuRespectScreenDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content respectScreen={false}>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-section-demo": {
    "component": "@/components/docs/collections/menu/menu-section-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Jawa Timur',\n        distros: [\n            {\n                id: '1-1',\n                name: 'Surabaya'\n            },\n            {\n                id: '1-2',\n                name: 'Mojokerto'\n            },\n            {\n                id: '1-3',\n                name: 'Malang'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Jawa Barat',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Bandung'\n            },\n            {\n                id: '2-2',\n                name: 'Cirebon'\n            },\n            {\n                id: '2-3',\n                name: 'Bogor'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Jawa Tengah',\n        distros: [\n            {\n                id: '3-1',\n                name: 'Semarang'\n            },\n            {\n                id: '3-2',\n                name: 'Solo'\n            },\n            {\n                id: '3-3',\n                name: 'Kudus'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Banten',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Serang'\n            },\n            {\n                id: '4-2',\n                name: 'Tangerang'\n            },\n            {\n                id: '4-3',\n                name: 'Tasikmalaya'\n            }\n        ]\n    }\n]\n\nexport default function MenuSectionDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content items={items}>\n                {(item) => (\n                    <Menu.Section items={item.distros} title={item.name}>\n                        {(distro) => (\n                            <Menu.Item textValue={distro.name}>\n                                <Menu.Label>{distro.name}</Menu.Label>\n                            </Menu.Item>\n                        )}\n                    </Menu.Section>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-header-demo": {
    "component": "@/components/docs/collections/menu/menu-header-demo",
    "raw": "'use client'\n\nimport { IconLogout, IconSettings, IconUserCircle } from '@tabler/icons-react'\nimport { Avatar, Menu } from '@/components/ui'\n\nexport default function MenuHeaderDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>\n                <Avatar className='size-10' src='https://github.com/dq-alhq.png' />\n            </Menu.Trigger>\n            <Menu.Content className='min-w-64' placement='bottom'>\n                <Menu.Header>\n                    <span className='block'>DQ Al-Haqqi</span>\n                    <span className='font-normal text-muted-foreground'>@dq-alhq</span>\n                </Menu.Header>\n                <Menu.Item>\n                    <IconUserCircle />\n                    Profile\n                </Menu.Item>\n                <Menu.Item>\n                    <IconSettings />\n                    Settings\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item isDestructive>\n                    <IconLogout />\n                    Log out\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-item-details-demo": {
    "component": "@/components/docs/collections/menu/menu-item-details-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function MenuItemDetailsDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1]))\n\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content items={items} onSelectionChange={setSelected} selectedKeys={selected} selectionMode='single'>\n                {(item) => (\n                    <Menu.Item id={item.id} textValue={item.name}>\n                        <Menu.Details description={item.description} label={item.name} />\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-drag-between-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-drag-between-demo",
    "raw": "'use client'\n\nimport { GridList, useDND, useList } from '@/components/ui'\n\nfunction DNDList({ items }: { items: { id: string; type: string; name: string }[] }) {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <GridList\n            aria-label='Linux Distros'\n            dragAndDropHooks={dragAndDropHooks}\n            items={list.items}\n            onSelectionChange={list.setSelectedKeys}\n            renderEmptyState={() => (\n                <div className='col-span-full flex items-center justify-center text-muted-foreground'>\n                    Drop items here\n                </div>\n            )}\n            selectedKeys={list.selectedKeys}\n        >\n            {(item) => <GridList.Item>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n\nexport default function GridListDragBetween() {\n    return (\n        <div className='grid grid-cols-2 gap-4'>\n            <DNDList\n                items={[\n                    { id: '1', type: 'file', name: 'Adobe Photoshop' },\n                    { id: '2', type: 'file', name: 'Adobe XD' },\n                    { id: '3', type: 'folder', name: 'Documents' },\n                    { id: '4', type: 'file', name: 'Adobe InDesign' },\n                    { id: '5', type: 'folder', name: 'Utilities' },\n                    { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n                ]}\n            />\n            <DNDList\n                items={[\n                    { id: '7', type: 'folder', name: 'Pictures' },\n                    { id: '8', type: 'file', name: 'Adobe Fresco' },\n                    { id: '9', type: 'folder', name: 'Apps' },\n                    { id: '10', type: 'file', name: 'Adobe Illustrator' },\n                    { id: '11', type: 'file', name: 'Adobe Lightroom' },\n                    { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n                ]}\n            />\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-controlled-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { GridList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([]))\n    return (\n        <div className='space-y-6'>\n            <GridList\n                aria-label='Linux Distros'\n                items={items}\n                onSelectionChange={setSelected}\n                selectedKeys={selected}\n                selectionMode='multiple'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n            <code>{JSON.stringify([...selected], null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-rearrange-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-rearrange-demo",
    "raw": "'use client'\n\nimport { GridList, useDND, useList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListRearrangeDemo() {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <GridList\n            aria-label='Linux Distros'\n            dragAndDropHooks={dragAndDropHooks}\n            items={list.items}\n            selectionMode='multiple'\n        >\n            {(item) => (\n                <GridList.Item key={item.id} textValue={item.name}>\n                    {item.name}\n                </GridList.Item>\n            )}\n        </GridList>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-layout-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-layout-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { useState } from 'react'\nimport { GridList, Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListLayoutDemo() {\n    const [columns, setColumns] = useState<Key | null>(2)\n    const [gap, setGap] = useState<Key | null>(4)\n\n    return (\n        <div className='flex flex-col gap-4'>\n            <div className='flex w-full gap-2'>\n                <Select\n                    className='w-full'\n                    id='columns'\n                    label='Columns'\n                    onSelectionChange={setColumns}\n                    selectedKey={columns}\n                >\n                    <Select.Item id={1}>1</Select.Item>\n                    <Select.Item id={2}>2</Select.Item>\n                    <Select.Item id={3}>3</Select.Item>\n                    <Select.Item id={4}>4</Select.Item>\n                    <Select.Item id={5}>5</Select.Item>\n                    <Select.Item id={6}>6</Select.Item>\n                </Select>\n                <Select className='w-full' id='gap' label='Gap' onSelectionChange={setGap} selectedKey={gap}>\n                    <Select.Item id={0}>0</Select.Item>\n                    <Select.Item id={2}>2</Select.Item>\n                    <Select.Item id={4}>4</Select.Item>\n                    <Select.Item id={6}>6</Select.Item>\n                </Select>\n            </div>\n            <GridList\n                aria-label='Linux Distros'\n                columns={columns as 1 | 2 | 3 | 4 | 5 | 6}\n                gap={gap as 0 | 2 | 4 | 6}\n                items={items}\n                selectionMode='multiple'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-disabled-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\nexport default function GridListDisabledDemo() {\n    return (\n        <GridList aria-label='Linux Distros' disabledKeys={[1, 3]} items={items} selectionMode='multiple'>\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-selection-mode-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-selection-mode-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { GridList, Radio, RadioGroup } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListMultipleDemo() {\n    const [selectionMode, setSelectionMode] = useState<string>('multiple')\n    return (\n        <div className='space-y-6'>\n            <RadioGroup\n                label='Selection mode'\n                onChange={setSelectionMode}\n                orientation='horizontal'\n                value={selectionMode}\n            >\n                <Radio value='none'>None</Radio>\n                <Radio value='single'>Single</Radio>\n                <Radio value='multiple'>Multiple</Radio>\n            </RadioGroup>\n\n            <GridList\n                aria-label='Select items'\n                items={items}\n                selectionMode={selectionMode as 'none' | 'single' | 'multiple'}\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListDemo() {\n    return (\n        <GridList aria-label='Linux Distros' items={items} selectionMode='single'>\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-controlled-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\n\nexport default function TagGroupControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([]))\n    return (\n        <div className='space-y-6'>\n            <Tag.Group\n                items={items}\n                label='Linux Distros'\n                onSelectionChange={setSelected}\n                selectedKeys={selected}\n                selectionMode='multiple'\n            >\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n\n            <pre>{JSON.stringify([...selected], null, 2)}</pre>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-variant-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-variant-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\nexport default function TagGroupVariantDemo() {\n    return (\n        <div className='max-w-sm space-y-6'>\n            <Tag.Group items={items} label='Default' selectionMode='multiple' variant='default'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group items={items} label='Secondary' selectionMode='multiple' variant='secondary'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group items={items} label='Destructive' selectionMode='multiple' variant='destructive'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-disabled-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', active: true },\n    { id: 2, name: 'Debian', active: false },\n    { id: 3, name: 'Fedora', active: true },\n    { id: 4, name: 'Arch', active: false }\n]\n\nexport default function TagGroupDisabledDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tag.Group\n                disabledKeys={items.filter((item) => !item.active).map((item) => item.id)}\n                items={items}\n                label='Disabled Key'\n                selectionMode='multiple'\n            >\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n\n            <Tag.Group items={items} label='Disabled by Tag' selectionMode='multiple'>\n                {(item) => <Tag isDisabled={!item.active}>{item.name}</Tag>}\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\n\nexport default function TagGroupDemo() {\n    return (\n        <Tag.Group items={items} label='Linux Distros' selectionMode='multiple'>\n            {(item) => <Tag>{item.name}</Tag>}\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\nimport { Tag } from '@/components/ui'\n\nexport default function TagGroupWithRemoveDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: 1, name: 'Ubuntu' },\n            { id: 2, name: 'Debian' },\n            { id: 3, name: 'Fedora' },\n            { id: 4, name: 'Arch' }\n        ]\n    })\n\n    return (\n        <Tag.Group\n            items={list.items}\n            label='Linux Distros'\n            onRemove={(keys) => list.remove(...keys)}\n            selectionMode='multiple'\n        >\n            {(item) => <Tag>{item.name}</Tag>}\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-href-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', url: '#' },\n    { id: 2, name: 'Debian', url: '#' },\n    { id: 3, name: 'Fedora', url: '#' },\n    { id: 4, name: 'Arch', url: '#' }\n]\n\nexport default function TagGroupControlledDemo() {\n    return (\n        <Tag.Group items={items} label='Linux Distros'>\n            {(item) => (\n                <Tag href={item.url} id={item.name}>\n                    {item.name}\n                </Tag>\n            )}\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/table/table-filtering-demo": {
    "component": "@/components/docs/collections/table/table-filtering-demo",
    "raw": "'use client'\n\nimport { useAsyncList } from '@react-stately/data'\nimport { Card, SearchField, Table } from '@/components/ui'\n\ninterface Character {\n    title: string\n    director: number\n    producer: number\n    release_date: number\n}\n\nexport default function TableFilteringDemo() {\n    const list = useAsyncList<Character>({\n        async load({ signal, filterText }) {\n            const res = await fetch(`https://swapi.py4e.com/api/films/?search=${filterText}`, {\n                signal\n            })\n            const json = await res.json()\n            return {\n                items: json.results\n            }\n        },\n        async sort({ items, sortDescriptor }) {\n            return {\n                items: items.sort((a, b) => {\n                    // @ts-expect-error unknown-type\n                    const first = a[sortDescriptor.column]\n                    // @ts-expect-error unknown-type\n                    const second = b[sortDescriptor.column]\n                    let cmp = (Number.parseInt(first) || first) < (Number.parseInt(second) || second) ? -1 : 1\n                    if (sortDescriptor.direction === 'descending') {\n                        cmp *= -1\n                    }\n                    return cmp\n                })\n            }\n        }\n    })\n    return (\n        <Card>\n            <Card.Header>\n                <SearchField\n                    isPending={list.isLoading}\n                    label='Search Movies'\n                    onChange={list.setFilterText}\n                    placeholder='Type to search...'\n                    value={list.filterText}\n                />\n            </Card.Header>\n            <Card.Content>\n                <Table aria-label='Movies' selectionMode='multiple'>\n                    <Table.Header>\n                        <Table.Column id='title' isRowHeader>\n                            Title\n                        </Table.Column>\n                        <Table.Column id='director'>Director</Table.Column>\n                        <Table.Column id='producer'>Producer</Table.Column>\n                        <Table.Column id='release_date'>Release Date</Table.Column>\n                    </Table.Header>\n                    <Table.Body\n                        items={list.items}\n                        renderEmptyState={() => (\n                            <div className='col-span-full p-4 text-center text-muted-foreground'>No items found</div>\n                        )}\n                    >\n                        {(item) => (\n                            <Table.Row id={item.title}>\n                                <Table.Cell>{item.title}</Table.Cell>\n                                <Table.Cell>{item.director}</Table.Cell>\n                                <Table.Cell>{item.producer}</Table.Cell>\n                                <Table.Cell>{item.release_date}</Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "collections/table/table-demo": {
    "component": "@/components/docs/collections/table/table-demo",
    "raw": "'use client'\n\nimport { Table } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\nexport default function TableDemo() {\n    return (\n        <Table aria-label='Pokemons'>\n            <Table.Header>\n                <Table.Column className='w-0'>#</Table.Column>\n                <Table.Column isRowHeader>Name</Table.Column>\n                <Table.Column>Type</Table.Column>\n                <Table.Column>Level</Table.Column>\n            </Table.Header>\n            <Table.Body items={items}>\n                {(item) => (\n                    <Table.Row>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.type}</Table.Cell>\n                        <Table.Cell>{item.level}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/table/table-resize-demo": {
    "component": "@/components/docs/collections/table/table-resize-demo",
    "raw": "'use client'\n\nimport { Table } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\n\nexport default function TableResizeDemo() {\n    return (\n        <Table allowResize aria-label='Pokemons'>\n            <Table.Header>\n                <Table.Column className='max-w-8'>#</Table.Column>\n                <Table.Column isResizable isRowHeader>\n                    Name\n                </Table.Column>\n                <Table.Column isResizable>Type</Table.Column>\n                <Table.Column>Level</Table.Column>\n            </Table.Header>\n            <Table.Body items={items}>\n                {(item) => (\n                    <Table.Row>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.type}</Table.Cell>\n                        <Table.Cell>{item.level}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/table/table-sorting-demo": {
    "component": "@/components/docs/collections/table/table-sorting-demo",
    "raw": "'use client'\n\nimport { useAsyncList } from '@react-stately/data'\nimport { IconLoader } from '@tabler/icons-react'\nimport { Table } from '@/components/ui'\n\ninterface Character {\n    title: string\n    director: number\n    producer: number\n    release_date: number\n}\n\nexport default function TableSortingDemo() {\n    const list = useAsyncList<Character>({\n        async load({ signal }) {\n            const res = await fetch('https://swapi.py4e.com/api/films', {\n                signal\n            })\n            const json = await res.json()\n            return {\n                items: json.results\n            }\n        },\n        async sort({ items, sortDescriptor }) {\n            return {\n                items: items.sort((a, b) => {\n                    // @ts-expect-error unknown-type\n                    const first = a[sortDescriptor.column]\n                    // @ts-expect-error unknown-type\n                    const second = b[sortDescriptor.column]\n                    let cmp = (Number.parseInt(first) || first) < (Number.parseInt(second) || second) ? -1 : 1\n                    if (sortDescriptor.direction === 'descending') {\n                        cmp *= -1\n                    }\n                    return cmp\n                })\n            }\n        }\n    })\n    return (\n        <Table\n            aria-label='Movies'\n            onSortChange={list.sort}\n            selectionMode='multiple'\n            sortDescriptor={list.sortDescriptor}\n        >\n            <Table.Header>\n                <Table.Column id='title' isRowHeader>\n                    Title\n                </Table.Column>\n                <Table.Column allowsSorting id='director'>\n                    Director\n                </Table.Column>\n                <Table.Column id='producer'>Producer</Table.Column>\n                <Table.Column allowsSorting id='release_date'>\n                    Release Date\n                </Table.Column>\n            </Table.Header>\n            <Table.Body\n                items={list.items}\n                renderEmptyState={() => (\n                    <div className='grid place-content-center p-10'>\n                        <IconLoader className='animate-spin' />\n                    </div>\n                )}\n            >\n                {(item) => (\n                    <Table.Row id={item.title}>\n                        <Table.Cell>{item.title}</Table.Cell>\n                        <Table.Cell>{item.director}</Table.Cell>\n                        <Table.Cell>{item.producer}</Table.Cell>\n                        <Table.Cell>{item.release_date}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/table/table-bulk-demo": {
    "component": "@/components/docs/collections/table/table-bulk-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { Table } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\nexport default function TableBulkDemo() {\n    const [selectedKeys, setSelectedKeys] = useState<Selection>(new Set())\n    return (\n        <div className='space-y-6'>\n            <Table\n                aria-label='Books'\n                onSelectionChange={setSelectedKeys}\n                selectedKeys={selectedKeys}\n                selectionMode='multiple'\n            >\n                <Table.Header>\n                    <Table.Column className='w-0'>#</Table.Column>\n                    <Table.Column isRowHeader>Name</Table.Column>\n                    <Table.Column>Type</Table.Column>\n                    <Table.Column>Level</Table.Column>\n                </Table.Header>\n                <Table.Body items={items}>\n                    {(item) => (\n                        <Table.Row>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.type}</Table.Cell>\n                            <Table.Cell>{item.level}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n            <code>selected: {JSON.stringify(Array.from(selectedKeys))}</code>\n        </div>\n    )\n}\n"
  },
  "collections/table/table-drag-demo": {
    "component": "@/components/docs/collections/table/table-drag-demo",
    "raw": "'use client'\n\nimport { Table, useDND, useList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\n\nexport default function TableDragDemo() {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n    return (\n        <Table aria-label='Pokemons' dragAndDropHooks={dragAndDropHooks} selectionMode='multiple'>\n            <Table.Header>\n                <Table.Column>#</Table.Column>\n                <Table.Column isRowHeader>Name</Table.Column>\n                <Table.Column>Type</Table.Column>\n                <Table.Column>Level</Table.Column>\n            </Table.Header>\n            <Table.Body items={list.items}>\n                {(item) => (\n                    <Table.Row>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.type}</Table.Cell>\n                        <Table.Cell>{item.level}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/list-box/list-box-item-details-demo": {
    "component": "@/components/docs/collections/list-box/list-box-item-details-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function ListBoxItemDetailsDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1]))\n    return (\n        <ListBox\n            aria-label='Javascript Frameworks'\n            items={items}\n            onSelectionChange={setSelected}\n            selectedKeys={selected}\n            selectionMode='single'\n        >\n            {(item) => (\n                <ListBox.Item id={item.id} textValue={item.name}>\n                    <ListBox.Details description={item.description} label={item.name} />\n                </ListBox.Item>\n            )}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { ListBox, useDND, useList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxRearrangeDemo() {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <ListBox\n            aria-label='Linux Distros'\n            dragAndDropHooks={dragAndDropHooks}\n            items={list.items}\n            selectionMode='multiple'\n        >\n            {(item) => <ListBox.Item key={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-disabled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-disabled-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxDisabledDemo() {\n    return (\n        <ListBox aria-label='Linux Distros' disabledKeys={[1, 3]} items={items} selectionMode='multiple'>\n            {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-drag-between-demo": {
    "component": "@/components/docs/collections/list-box/list-box-drag-between-demo",
    "raw": "'use client'\n\nimport { ListBox, useDND, useList } from '@/components/ui'\n\nfunction DNDList({ items }: { items: { id: string; type: string; name: string }[] }) {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <ListBox\n            aria-label='Linux Distros'\n            dragAndDropHooks={dragAndDropHooks}\n            items={list.items}\n            onSelectionChange={list.setSelectedKeys}\n            renderEmptyState={() => (\n                <div className='col-span-full flex items-center justify-center text-muted-foreground'>\n                    Drop items here\n                </div>\n            )}\n            selectedKeys={list.selectedKeys}\n        >\n            {(item) => <ListBox.Item>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n\nexport default function ListBoxDragBetween() {\n    return (\n        <div className='flex gap-4'>\n            <DNDList\n                items={[\n                    { id: '1', type: 'file', name: 'Adobe Photoshop' },\n                    { id: '2', type: 'file', name: 'Adobe XD' },\n                    { id: '3', type: 'folder', name: 'Documents' },\n                    { id: '4', type: 'file', name: 'Adobe InDesign' },\n                    { id: '5', type: 'folder', name: 'Utilities' },\n                    { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n                ]}\n            />\n            <DNDList\n                items={[\n                    { id: '7', type: 'folder', name: 'Pictures' },\n                    { id: '8', type: 'file', name: 'Adobe Fresco' },\n                    { id: '9', type: 'folder', name: 'Apps' },\n                    { id: '10', type: 'file', name: 'Adobe Illustrator' },\n                    { id: '11', type: 'file', name: 'Adobe Lightroom' },\n                    { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n                ]}\n            />\n        </div>\n    )\n}\n"
  },
  "collections/list-box/list-box-filtering-demo": {
    "component": "@/components/docs/collections/list-box/list-box-filtering-demo",
    "raw": "'use client'\n\nimport { Autocomplete } from 'react-aria-components'\nimport { ListBox, SearchField } from '@/components/ui'\nimport { fuzzyMatch } from '@/lib/utils'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function AutocompleteListBoxDemo() {\n    return (\n        <Autocomplete filter={fuzzyMatch}>\n            <SearchField className='mb-2' />\n            <ListBox aria-label='Linux Distros' items={items} selectionMode='multiple'>\n                {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n            </ListBox>\n        </Autocomplete>\n    )\n}\n"
  },
  "collections/list-box/list-box-demo": {
    "component": "@/components/docs/collections/list-box/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxDemo() {\n    return (\n        <ListBox aria-label='Linux Distros' items={items} selectionMode='single'>\n            {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-selection-mode-demo": {
    "component": "@/components/docs/collections/list-box/list-box-selection-mode-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { ListBox, Radio, RadioGroup } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxMultipleDemo() {\n    const [selectionMode, setSelectionMode] = useState<string>('multiple')\n    return (\n        <div className='space-y-6'>\n            <RadioGroup\n                label='Selection mode'\n                onChange={setSelectionMode}\n                orientation='horizontal'\n                value={selectionMode}\n            >\n                <Radio value='none'>None</Radio>\n                <Radio value='single'>Single</Radio>\n                <Radio value='multiple'>Multiple</Radio>\n            </RadioGroup>\n\n            <ListBox\n                aria-label='Select items'\n                items={items}\n                selectionMode={selectionMode as 'none' | 'single' | 'multiple'}\n            >\n                {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n            </ListBox>\n        </div>\n    )\n}\n"
  },
  "collections/list-box/list-box-controlled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-controlled-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1]))\n    return (\n        <div className='space-y-6'>\n            <ListBox\n                aria-label='Linux Distros'\n                items={items}\n                onSelectionChange={setSelected}\n                selectedKeys={selected}\n                selectionMode='multiple'\n            >\n                {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n            </ListBox>\n\n            <code>{JSON.stringify([...selected], null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "collections/list-box/list-box-section-demo": {
    "component": "@/components/docs/collections/list-box/list-box-section-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function ListBoxSectionDemo() {\n    return (\n        <ListBox aria-label='Bands' items={items} selectionMode='multiple'>\n            {(item) => (\n                <ListBox.Section className='grid w-full gap-1' id={item.id} items={item.distros} title={item.name}>\n                    {(distro) => <ListBox.Item id={distro.id}>{distro.name}</ListBox.Item>}\n                </ListBox.Section>\n            )}\n        </ListBox>\n    )\n}\n"
  },
  "collections/tree/tree-collections-demo": {
    "component": "@/components/docs/collections/tree/tree-collections-demo",
    "raw": "'use client'\n\nimport {\n    IconArchive,\n    IconDisc,\n    IconFile,\n    IconFileMusic,\n    IconFileTypeDocx,\n    IconFileTypeJpg,\n    IconFileTypePdf,\n    IconFileTypePng,\n    IconFileTypeTxt,\n    IconFolder,\n    IconFolderOpen,\n    IconMovie\n} from '@tabler/icons-react'\nimport { Collection } from 'react-aria-components'\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeCollectionsDemo() {\n    const renderItem = (item: FileNode, i: number) => (\n        <TreeItem key={i} textValue={item.file}>\n            <TreeItem.Content>\n                {({ isExpanded, hasChildItems }) => (\n                    <>\n                        {isExpanded ? (\n                            <IconFolderOpen />\n                        ) : hasChildItems ? (\n                            <IconFolder />\n                        ) : (\n                            <FileIcon ext={item.file.substring(item.file.lastIndexOf('.') + 1)} />\n                        )}\n                        {item.file}\n                    </>\n                )}\n            </TreeItem.Content>\n            {item.children && (\n                <Collection items={item.children}>{item.children.map((file, i) => renderItem(file, i))}</Collection>\n            )}\n        </TreeItem>\n    )\n\n    return (\n        <Tree aria-label='Files' className='w-full' items={files} selectionMode='multiple'>\n            {files.map((file, i) => renderItem(file, i))}\n        </Tree>\n    )\n}\n\nexport type FileNode = {\n    file: string\n    children?: FileNode[]\n}\n\nconst files: FileNode[] = [\n    {\n        file: 'Downloads',\n        children: [\n            {\n                file: 'Compressed',\n                children: [\n                    { file: 'laravel.zip' },\n                    { file: 'react.zip' },\n                    { file: 'nextjs.rar' },\n                    { file: 'ubuntu.iso' }\n                ]\n            },\n            {\n                file: 'Docs',\n                children: [{ file: 'resume.pdf' }, { file: 'cv.pdf' }]\n            },\n            {\n                file: 'Programs',\n                children: [{ file: 'chrome.exe' }, { file: 'vscode.deb' }]\n            }\n        ]\n    },\n    {\n        file: 'Documents',\n        children: [\n            {\n                file: 'Thesis',\n                children: [\n                    { file: 'Bab 1.docx' },\n                    { file: 'Bab 2.docx' },\n                    { file: 'Bab 3.docx' },\n                    { file: 'Cover.docx' }\n                ]\n            },\n            { file: 'Secret.txt' },\n            { file: 'Project.jpg' }\n        ]\n    },\n    {\n        file: 'Music',\n        children: [\n            { file: 'The Beatles.mp3' },\n            { file: 'Led Zeppelin.mp3' },\n            { file: 'Pink Floyd.mp3' },\n            { file: 'Queen.wav' },\n            { file: 'The Rolling Stones.mp3' },\n            { file: 'The Who.wav' }\n        ]\n    },\n    {\n        file: 'Videos',\n        children: [\n            {\n                file: 'Mission Impossible',\n                children: [\n                    { file: 'Mission Impossible 1.mp4' },\n                    { file: 'Mission Impossible 2.mp4' },\n                    { file: 'Mission Impossible 3.mp4' }\n                ]\n            },\n            { file: 'Star Wars.mp4' },\n            { file: 'Avengers - Endgame.mkv' }\n        ]\n    }\n]\n\nconst FileIcon = ({ ext }: { ext: string }) => {\n    let Icon: any\n    switch (ext) {\n        case 'jpg':\n            Icon = IconFileTypeJpg\n            break\n        case 'png':\n            Icon = IconFileTypePng\n            break\n        case 'txt':\n            Icon = IconFileTypeTxt\n            break\n        case 'docx':\n            Icon = IconFileTypeDocx\n            break\n        case 'pdf':\n            Icon = IconFileTypePdf\n            break\n        case 'mp3':\n        case 'wav':\n            Icon = IconFileMusic\n            break\n        case 'mp4':\n        case 'mkv':\n            Icon = IconMovie\n            break\n        case 'zip':\n        case 'rar':\n            Icon = IconArchive\n            break\n        case 'iso':\n            Icon = IconDisc\n            break\n        default:\n            Icon = IconFile\n            break\n    }\n    return <Icon />\n}\n"
  },
  "collections/tree/tree-selection-mode-demo": {
    "component": "@/components/docs/collections/tree/tree-selection-mode-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { useState } from 'react'\nimport { Select, Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeSelectionModeDemo() {\n    const [selectionMode, setSelectionMode] = useState<Key | null>('multiple')\n\n    return (\n        <div className='space-y-6'>\n            <Select label='Selection mode' onSelectionChange={setSelectionMode} selectedKey={selectionMode}>\n                <Select.Item id='none'>None</Select.Item>\n                <Select.Item id='single'>Single</Select.Item>\n                <Select.Item id='multiple'>Multiple</Select.Item>\n            </Select>\n            <Tree\n                aria-label='Files'\n                className='w-full'\n                selectionBehavior='toggle'\n                selectionMode={selectionMode as 'none' | 'single' | 'multiple'}\n            >\n                <TreeItem id='documents' textValue='Documents'>\n                    <TreeItem.Content>Documents</TreeItem.Content>\n                    <TreeItem id='project' textValue='Project'>\n                        <TreeItem.Content>Project</TreeItem.Content>\n                        <TreeItem id='report' textValue='Weekly Report'>\n                            <TreeItem.Content>Weekly Report</TreeItem.Content>\n                        </TreeItem>\n                    </TreeItem>\n                </TreeItem>\n                <TreeItem id='photos' textValue='Photos'>\n                    <TreeItem.Content>Photos</TreeItem.Content>\n                    <TreeItem id='one' textValue='Image 1'>\n                        <TreeItem.Content>Image 1</TreeItem.Content>\n                    </TreeItem>\n                    <TreeItem id='two' textValue='Image 2'>\n                        <TreeItem.Content>Image 2</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </Tree>\n        </div>\n    )\n}\n"
  },
  "collections/tree/tree-disabled-demo": {
    "component": "@/components/docs/collections/tree/tree-disabled-demo",
    "raw": "'use client'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeDisabledDemo() {\n    return (\n        <Tree aria-label='Files' className='w-full'>\n            <TreeItem id='documents' textValue='Documents'>\n                <TreeItem.Content>Documents</TreeItem.Content>\n                <TreeItem id='project' textValue='Project'>\n                    <TreeItem.Content>Projects</TreeItem.Content>\n                    <TreeItem id='report' textValue='Weekly Report'>\n                        <TreeItem.Content>Weekly Report</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </TreeItem>\n            <TreeItem id='photos' isDisabled textValue='Photos'>\n                <TreeItem.Content>Photos</TreeItem.Content>\n                <TreeItem id='one' textValue='Image 1'>\n                    <TreeItem.Content>Image 1</TreeItem.Content>\n                </TreeItem>\n                <TreeItem id='two' textValue='Image 2'>\n                    <TreeItem.Content>Image 2</TreeItem.Content>\n                </TreeItem>\n            </TreeItem>\n        </Tree>\n    )\n}\n"
  },
  "collections/tree/tree-with-icon-demo": {
    "component": "@/components/docs/collections/tree/tree-with-icon-demo",
    "raw": "'use client'\n\nimport { IconFileText, IconFileTypeJpg, IconFolder, IconFolderOpen } from '@tabler/icons-react'\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeWithIconDemo() {\n    return (\n        <Tree aria-label='Files' className='w-full'>\n            <TreeItem id='documents' textValue='Documents'>\n                <TreeItem.Content>\n                    {({ isExpanded }) => (\n                        <>\n                            {isExpanded ? <IconFolderOpen /> : <IconFolder />}\n                            Documents\n                        </>\n                    )}\n                </TreeItem.Content>\n                <TreeItem id='project' textValue='Project'>\n                    <TreeItem.Content>\n                        {({ isExpanded }) => (\n                            <>\n                                {isExpanded ? <IconFolderOpen /> : <IconFolder />}\n                                Project\n                            </>\n                        )}\n                    </TreeItem.Content>\n                    <TreeItem id='report' textValue='Weekly Report'>\n                        <TreeItem.Content>\n                            <IconFileText />\n                            Weekly Report\n                        </TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </TreeItem>\n            <TreeItem id='photos' textValue='Photos'>\n                <TreeItem.Content>\n                    {({ isExpanded }) => (\n                        <>\n                            {isExpanded ? <IconFolderOpen /> : <IconFolder />}\n                            Photos\n                        </>\n                    )}\n                </TreeItem.Content>\n                <TreeItem id='one' textValue='Image 1'>\n                    <TreeItem.Content>\n                        <IconFileTypeJpg />\n                        Image 1\n                    </TreeItem.Content>\n                </TreeItem>\n                <TreeItem id='two' textValue='Image 2'>\n                    <TreeItem.Content>\n                        <IconFileTypeJpg />\n                        Image 2\n                    </TreeItem.Content>\n                </TreeItem>\n            </TreeItem>\n        </Tree>\n    )\n}\n"
  },
  "collections/tree/tree-controlled-demo": {
    "component": "@/components/docs/collections/tree/tree-controlled-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([]))\n    return (\n        <div className='space-y-6'>\n            <Tree\n                aria-label='Files'\n                className='w-full'\n                onSelectionChange={setSelected}\n                selectedKeys={selected}\n                selectionMode='multiple'\n            >\n                <TreeItem id='documents' textValue='Documents'>\n                    <TreeItem.Content>Documents</TreeItem.Content>\n                    <TreeItem id='project' textValue='Project'>\n                        <TreeItem.Content>Projects</TreeItem.Content>\n                        <TreeItem id='report' textValue='Weekly Report'>\n                            <TreeItem.Content>Weekly Report</TreeItem.Content>\n                        </TreeItem>\n                    </TreeItem>\n                </TreeItem>\n                <TreeItem id='photos' textValue='Photos'>\n                    <TreeItem.Content>Photos</TreeItem.Content>\n                    <TreeItem id='one' textValue='Image 1'>\n                        <TreeItem.Content>Image 1</TreeItem.Content>\n                    </TreeItem>\n                    <TreeItem id='two' textValue='Image 2'>\n                        <TreeItem.Content>Image 2</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </Tree>\n\n            <pre>{JSON.stringify([...selected], null, 2)}</pre>\n        </div>\n    )\n}\n"
  },
  "collections/tree/tree-demo": {
    "component": "@/components/docs/collections/tree/tree-demo",
    "raw": "'use client'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeDemo() {\n    return (\n        <Tree aria-label='Files' className='w-full'>\n            <TreeItem id='documents' textValue='Documents'>\n                <TreeItem.Content>Documents</TreeItem.Content>\n                <TreeItem id='project' textValue='Project'>\n                    <TreeItem.Content>Projects</TreeItem.Content>\n                    <TreeItem id='report' textValue='Weekly Report'>\n                        <TreeItem.Content>Weekly Report</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </TreeItem>\n            <TreeItem id='photos' textValue='Photos'>\n                <TreeItem.Content>Photos</TreeItem.Content>\n                <TreeItem id='one' textValue='Image 1'>\n                    <TreeItem.Content>Image 1</TreeItem.Content>\n                </TreeItem>\n                <TreeItem id='two' textValue='Image 2'>\n                    <TreeItem.Content>Image 2</TreeItem.Content>\n                </TreeItem>\n            </TreeItem>\n        </Tree>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-with-icon-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-with-icon-demo",
    "raw": "'use client'\n\nimport { IconCopy, IconFolder, IconHighlight, IconTrash, IconUpload } from '@tabler/icons-react'\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuWithIconDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Options'>\n                <ContextMenu.Item>\n                    <IconFolder />\n                    Open\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconHighlight />\n                    Rename\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconCopy />\n                    Duplicate\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconUpload />\n                    Share\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDestructive>\n                    <IconTrash />\n                    Delete\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-disabled-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-disabled-demo",
    "raw": "'use client'\n\nimport { IconEye, IconPencil, IconTrash } from '@tabler/icons-react'\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDisabledDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <ContextMenu>\n                <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                    Disabled by Item\n                </ContextMenu.Trigger>\n                <ContextMenu.Content>\n                    <ContextMenu.Item>\n                        <IconEye />\n                        <ContextMenu.Label>View</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item isDisabled>\n                        <IconPencil />\n                        <ContextMenu.Label>Edit</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item isDestructive isDisabled>\n                        <IconTrash />\n                        <ContextMenu.Label>Delete</ContextMenu.Label>\n                    </ContextMenu.Item>\n                </ContextMenu.Content>\n            </ContextMenu>\n            <ContextMenu>\n                <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                    Disabled by Key\n                </ContextMenu.Trigger>\n                <ContextMenu.Content disabledKeys={['edit', 'delete']}>\n                    <ContextMenu.Item id='view'>\n                        <IconEye />\n                        <ContextMenu.Label>View</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item id='edit'>\n                        <IconPencil />\n                        <ContextMenu.Label>Edit</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item id='delete' isDestructive>\n                        <IconTrash />\n                        <ContextMenu.Label>Delete</ContextMenu.Label>\n                    </ContextMenu.Item>\n                </ContextMenu.Content>\n            </ContextMenu>\n        </div>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-separator-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-separator-demo",
    "raw": "'use client'\n\nimport { IconLogout, IconSettings, IconUserCircle } from '@tabler/icons-react'\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuSeparatorDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Context menu'>\n                <ContextMenu.Header>\n                    <span className='block'>DQ Al-Haqqi</span>\n                    <span className='font-normal text-muted-foreground'>@dq-alhq</span>\n                </ContextMenu.Header>\n                <ContextMenu.Item>\n                    <IconUserCircle />\n                    Profile\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconSettings />\n                    Settings\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDestructive>\n                    <IconLogout />\n                    Log out\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-demo",
    "raw": "'use client'\n\nimport { ContextMenu, Keyboard } from '@/components/ui'\n\nexport default function ContextMenuDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Context menu'>\n                <ContextMenu.Item>Back</ContextMenu.Item>\n                <ContextMenu.Item isDisabled>Forward</ContextMenu.Item>\n                <ContextMenu.Item>Reload</ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>Bookmark</ContextMenu.Item>\n                <ContextMenu.Item>Save as</ContextMenu.Item>\n                <ContextMenu.Item>\n                    Select all\n                    <Keyboard keys={['⌘', 'A']} />\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>View source</ContextMenu.Item>\n                <ContextMenu.Item>Inspect Accessibility</ContextMenu.Item>\n                <ContextMenu.Item>Inspect</ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-destructive-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-destructive-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDestructiveDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item>\n                    <ContextMenu.Label>View</ContextMenu.Label>\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <ContextMenu.Label>Edit</ContextMenu.Label>\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDestructive>\n                    <ContextMenu.Label>Delete</ContextMenu.Label>\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-item-details-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-item-details-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function ContextMenuItemDetailsDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Bands' items={items}>\n                {(item) => (\n                    <ContextMenu.Item id={item.id} textValue={item.name}>\n                        <ContextMenu.Details description={item.description} label={item.name} />\n                    </ContextMenu.Item>\n                )}\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/keyboard/keyboard-command-demo": {
    "component": "@/components/docs/controls/keyboard/keyboard-command-demo",
    "raw": "'use client'\n\nimport { IconFolder, IconLayoutSidebar, IconSettings, IconX } from '@tabler/icons-react'\nimport { Command, Keyboard } from '@/components/ui'\n\nexport default function KeyboardCommandDemo() {\n    return (\n        <Command>\n            <Command.Item textValue='explorer'>\n                <IconFolder />\n                <Command.Label>Explorer</Command.Label>\n                <Keyboard keys={['mod', 'shift', 'e']} />\n            </Command.Item>\n            <Command.Item textValue='hide sidebar'>\n                <IconLayoutSidebar />\n                <Command.Label>Hide Sidebar</Command.Label>\n                <Keyboard keys={['mod', 'b']} />\n            </Command.Item>\n            <Command.Item textValue='settings'>\n                <IconSettings />\n                <Command.Label>Settings</Command.Label>\n                <Keyboard keys={['mod', ',']} />\n            </Command.Item>\n            <Command.Item textValue='quit'>\n                <IconX />\n                <Command.Label>Quit</Command.Label>\n                <Keyboard keys={['alt', 'F4']} />\n            </Command.Item>\n        </Command>\n    )\n}\n"
  },
  "controls/keyboard/keyboard-menu-demo": {
    "component": "@/components/docs/controls/keyboard/keyboard-menu-demo",
    "raw": "'use client'\n\nimport { Keyboard, Menu } from '@/components/ui'\n\nexport default function KeyboardMenuDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Options</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>Copy</Menu.Label>\n                    <Keyboard keys={['mod', 'c']} />\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Cut</Menu.Label>\n                    <Keyboard keys={['mod', 'x']} />\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Paste</Menu.Label>\n                    <Keyboard keys={['mod', 'v']} />\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "controls/keyboard/keyboard-basic-demo": {
    "component": "@/components/docs/controls/keyboard/keyboard-basic-demo",
    "raw": "import { Keyboard } from '@/components/ui'\n\nexport default function KeyboardBasicDemo() {\n    return <Keyboard keys={['mod', 'shift', 'k']} />\n}\n"
  },
  "controls/keyboard/keyboard-tooltip-demo": {
    "component": "@/components/docs/controls/keyboard/keyboard-tooltip-demo",
    "raw": "'use client'\n\nimport { IconBold } from '@tabler/icons-react'\nimport { Keyboard, Tooltip } from '@/components/ui'\n\nexport default function KeyboardTooltipDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger>\n                <IconBold />\n            </Tooltip.Trigger>\n            <Tooltip.Content>\n                <span className='mr-4'>Bold</span>\n                <Keyboard keys={['mod', 'b']} />\n            </Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "controls/slider/slider-step-demo": {
    "component": "@/components/docs/controls/slider/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderStepDemo() {\n    return <Slider description='Step in 10' label='Step Slider' step={10} />\n}\n"
  },
  "controls/slider/slider-controlled-demo": {
    "component": "@/components/docs/controls/slider/slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { Slider } from '@/components/ui'\n\nexport default function SliderControlledDemo() {\n    const [temperature, setTemperature] = React.useState<number>(31)\n    const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n    return (\n        <div className='space-y-6'>\n            <Slider\n                description={`Current temperature: ${temperature ?? '-'}`}\n                label='Temperature'\n                onChange={(v) => setTemperature(v as number)}\n                value={temperature}\n            />\n            <Slider\n                description={`Current saturation: ${saturation ?? '-'}`}\n                label='Saturation'\n                onChange={(v) => setSaturation(v as number[])}\n                value={saturation}\n            />\n        </div>\n    )\n}\n"
  },
  "controls/slider/slider-orientation-demo": {
    "component": "@/components/docs/controls/slider/slider-orientation-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Card, Description, Slider } from '@/components/ui'\n\nexport default function SliderOrientationDemo() {\n    const [equalizer, setEqualizer] = useState({\n        subBass: 40,\n        bass: 50,\n        lowMid: 60,\n        mid: 70,\n        highMid: 65,\n        presence: 75,\n        brilliance: 80\n    })\n\n    const handleSliderChange = (name: string, value: number) => {\n        setEqualizer((prev) => ({ ...prev, [name]: value }))\n    }\n\n    return (\n        <Card className='p-4'>\n            <div className='flex justify-center gap-4 [&>*]:w-6'>\n                <Slider\n                    aria-label='Sub Bass'\n                    onChange={(newValue) => handleSliderChange('subBass', newValue as number)}\n                    orientation='vertical'\n                    value={equalizer.subBass}\n                />\n                <Slider\n                    aria-label='Bass'\n                    onChange={(newValue) => handleSliderChange('bass', newValue as number)}\n                    orientation='vertical'\n                    value={equalizer.bass}\n                />\n                <Slider\n                    aria-label='Low Mid'\n                    onChange={(newValue) => handleSliderChange('lowMid', newValue as number)}\n                    orientation='vertical'\n                    value={equalizer.lowMid}\n                />\n                <Slider\n                    aria-label='Mid'\n                    onChange={(newValue) => handleSliderChange('mid', newValue as number)}\n                    orientation='vertical'\n                    value={equalizer.mid}\n                />\n                <Slider\n                    aria-label='High Mid'\n                    onChange={(newValue) => handleSliderChange('highMid', newValue as number)}\n                    orientation='vertical'\n                    value={equalizer.highMid}\n                />\n                <Slider\n                    aria-label='Presence'\n                    onChange={(newValue) => handleSliderChange('presence', newValue as number)}\n                    orientation='vertical'\n                    value={equalizer.presence}\n                />\n                <Slider\n                    aria-label='Brilliance'\n                    onChange={(newValue) => handleSliderChange('brilliance', newValue as number)}\n                    orientation='vertical'\n                    value={equalizer.brilliance}\n                />\n            </div>\n            <Description className='mt-6 block text-center'>Equilizer</Description>\n        </Card>\n    )\n}\n"
  },
  "controls/slider/slider-range-demo": {
    "component": "@/components/docs/controls/slider/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderRangeDemo() {\n    return <Slider defaultValue={[25, 75]} label='Slider Range' />\n}\n"
  },
  "controls/slider/slider-disabled-demo": {
    "component": "@/components/docs/controls/slider/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDisabledDemo() {\n    return <Slider isDisabled label='Volume' />\n}\n"
  },
  "controls/slider/slider-demo": {
    "component": "@/components/docs/controls/slider/slider-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDemo() {\n    return <Slider label='Volume' />\n}\n"
  },
  "controls/command/command-trigger-by-keyboard-demo": {
    "component": "@/components/docs/controls/command/command-trigger-by-keyboard-demo",
    "raw": "'use client'\n\nimport { IconHome, IconLayoutDashboard, IconPackage, IconPalette } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandTriggerByKeyboardDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='outline'>\n                <Command.Shortcut keys={['meta', '/']} />\n            </Button>\n            <Command.Modal isOpen={open} onOpenChange={setOpen} shortcut={{ key: '/' }}>\n                <Command.Item textValue='home'>\n                    <IconHome />\n                    <Command.Label>Home</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='documenation'>\n                    <IconPackage />\n                    <Command.Label>Documentation</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='blocks'>\n                    <IconLayoutDashboard />\n                    <Command.Label>Blocks</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='colors'>\n                    <IconPalette />\n                    <Command.Label>Colors</Command.Label>\n                </Command.Item>\n            </Command.Modal>\n        </>\n    )\n}\n"
  },
  "controls/command/command-danger-item-demo": {
    "component": "@/components/docs/controls/command/command-danger-item-demo",
    "raw": "'use client'\n\nimport { Command } from '@/components/ui'\n\nexport default function CommandDestructiveItemDemo() {\n    return (\n        <Command>\n            <Command.Item>System Shutdown</Command.Item>\n            <Command.Item isDestructive>Format Disk</Command.Item>\n            <Command.Item>Restart Service</Command.Item>\n            <Command.Item>Empty Trash</Command.Item>\n            <Command.Item>Overwrite File</Command.Item>\n            <Command.Item isDestructive>Reset Factory Settings</Command.Item>\n            <Command.Item>Disconnect Network</Command.Item>\n        </Command>\n    )\n}\n"
  },
  "controls/command/command-async-demo": {
    "component": "@/components/docs/controls/command/command-async-demo",
    "raw": "'use client'\n\nimport { useAsyncList } from 'react-stately'\nimport { Command } from '@/components/ui'\n\nexport default function CommandSeparatorDemo() {\n    const list = useAsyncList<{ title: string }>({\n        async load({ signal, filterText }) {\n            const res = await fetch(`https://dummyjson.com/posts/search?q=${filterText}`, {\n                signal\n            }).then((r) => r.json())\n            return {\n                items: res.posts\n            }\n        }\n    })\n    return (\n        <Command\n            inputValue={list.filterText}\n            isPending={list.isLoading}\n            items={list.items}\n            onInputChange={list.setFilterText}\n        >\n            {(item) => (\n                <Command.Item id={item.title} key={item.title} textValue={item.title}>\n                    <Command.Label>{item.title}</Command.Label>\n                </Command.Item>\n            )}\n        </Command>\n    )\n}\n"
  },
  "controls/command/command-demo": {
    "component": "@/components/docs/controls/command/command-demo",
    "raw": "'use client'\n\nimport { IconHome, IconLayoutDashboard, IconPackage, IconPalette } from '@tabler/icons-react'\nimport { Command } from '@/components/ui'\n\nexport default function CommandDemo() {\n    return (\n        <Command>\n            <Command.Item textValue='home'>\n                <IconHome />\n                <Command.Label>Home</Command.Label>\n            </Command.Item>\n            <Command.Item textValue='documenation'>\n                <IconPackage />\n                <Command.Label>Documentation</Command.Label>\n            </Command.Item>\n            <Command.Item textValue='blocks'>\n                <IconLayoutDashboard />\n                <Command.Label>Blocks</Command.Label>\n            </Command.Item>\n            <Command.Item textValue='colors'>\n                <IconPalette />\n                <Command.Label>Colors</Command.Label>\n            </Command.Item>\n        </Command>\n    )\n}\n"
  },
  "controls/command/command-section-demo": {
    "component": "@/components/docs/controls/command/command-section-demo",
    "raw": "'use client'\n\nimport { Avatar, Command } from '@/components/ui'\n\nexport default function CommandSectionDemo() {\n    return (\n        <Command>\n            <Command.Section title='Pages'>\n                <Command.Item textValue='home'>\n                    <Command.Label>Home</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='documenation'>\n                    <Command.Label>Documentation</Command.Label>\n                </Command.Item>\n            </Command.Section>\n            <Command.Separator />\n            <Command.Section items={users} title='Users'>\n                {(item) => (\n                    <Command.Item id={item.id} textValue={item.name}>\n                        <Avatar src={item.image_url} />\n                        <Command.Label>{item.name}</Command.Label>\n                    </Command.Item>\n                )}\n            </Command.Section>\n        </Command>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "controls/command/command-controlled-demo": {
    "component": "@/components/docs/controls/command/command-controlled-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { Command } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function CommandControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1]))\n    return (\n        <div className='space-y-6'>\n            <Command\n                aria-label='Linux Distros'\n                items={items}\n                onSelectionChange={setSelected}\n                selectedKeys={selected}\n                selectionMode='multiple'\n            >\n                {(item) => (\n                    <Command.Item id={item.id} textValue={item.name}>\n                        <Command.Label>{item.name}</Command.Label>\n                    </Command.Item>\n                )}\n            </Command>\n\n            <code>{JSON.stringify({ selected: [...selected] })}</code>\n        </div>\n    )\n}\n"
  },
  "controls/switch/switch-demo": {
    "component": "@/components/docs/controls/switch/switch-demo",
    "raw": "'use client'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    return (\n        <div className='grid grid-cols-3 gap-3'>\n            <Switch>Default</Switch>\n            <Switch isReadOnly>Read Only</Switch>\n            <Switch isDisabled>Disabled</Switch>\n        </div>\n    )\n}\n"
  },
  "controls/switch/switch-controlled-demo": {
    "component": "@/components/docs/controls/switch/switch-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchControlledDemo() {\n    const [value, setValue] = React.useState<boolean>(false)\n    return (\n        <div className='flex flex-col gap-6'>\n            <Switch isSelected={value} onChange={setValue} value='selected'>\n                Switch\n            </Switch>\n\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-orientation-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-orientation-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustified,\n    IconAlignLeft,\n    IconCamera,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconDotsCircleHorizontal,\n    IconLayoutGrid,\n    IconLink,\n    IconPencil,\n    IconPhoto,\n    IconPointer,\n    IconScissors\n} from '@tabler/icons-react'\nimport { Menu, Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarOrientationDemo() {\n    return (\n        <Toolbar aria-label='Toolbox' orientation='vertical'>\n            <Toolbar.Group aria-label='Toolbox' icon>\n                <Toolbar.Item aria-label='Cursor'>\n                    <IconPointer />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Scissors'>\n                    <IconScissors />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Pencil'>\n                    <IconPencil />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Gallery' icon>\n                <Toolbar.Item aria-label='Camera'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery'>\n                    <IconPhoto />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment' icon>\n                <Toggle aria-label='Align Left'>\n                    <IconAlignLeft />\n                </Toggle>\n                <Toolbar.Item aria-label='Align Center'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify'>\n                    <IconAlignJustified />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group icon>\n                <Menu>\n                    <Toolbar.Item aria-label='Other options'>\n                        <IconDotsCircleHorizontal />\n                    </Toolbar.Item>\n                    <Menu.Content placement='right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconPhoto />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustified,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconChevronDown,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconItalic,\n    IconLayoutGrid,\n    IconLink,\n    IconPhoto,\n    IconStrikethrough,\n    IconUnderline\n} from '@tabler/icons-react'\nimport { Checkbox, Menu, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDemo() {\n    return (\n        <Toolbar aria-label='Toolbars'>\n            <Toolbar.Group aria-label='Text Formatting Options' icon>\n                <Toolbar.Item aria-label='Bold'>\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Italic'>\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Underline'>\n                    <IconUnderline />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Strikethrough'>\n                    <IconStrikethrough />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment' icon>\n                <Toolbar.Item aria-label='Align Left'>\n                    <IconAlignLeft />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Center'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Right'>\n                    <IconAlignRight />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify'>\n                    <IconAlignJustified />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group>\n                <Menu>\n                    <Toolbar.Item aria-label='Other options'>\n                        Options...\n                        <IconChevronDown />\n                    </Toolbar.Item>\n                    <Menu.Content placement='bottom right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconPhoto />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n            <Checkbox>Spell Check</Checkbox>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-disabled-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-disabled-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignJustified,\n    IconAlignRight,\n    IconCamera,\n    IconPencil,\n    IconPhoto,\n    IconPointer,\n    IconScissors\n} from '@tabler/icons-react'\nimport { Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDisabledDemo() {\n    return (\n        <Toolbar aria-label='Toolbox'>\n            <Toolbar.Group aria-label='Toolbox' icon>\n                <Toggle aria-label='Cursor' isDisabled>\n                    <IconPointer />\n                </Toggle>\n                <Toggle aria-label='Scissors'>\n                    <IconScissors />\n                </Toggle>\n                <Toggle aria-label='Pencil'>\n                    <IconPencil />\n                </Toggle>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Gallery' icon isDisabled>\n                <Toolbar.Item aria-label='Camera'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery'>\n                    <IconPhoto />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment' icon>\n                <Toggle aria-label='Align Right'>\n                    <IconAlignRight />\n                </Toggle>\n                <Toggle aria-label='Align Justify'>\n                    <IconAlignJustified />\n                </Toggle>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-variants-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-variants-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconEye,\n    IconItalic,\n    IconPencil,\n    IconUnderline\n} from '@tabler/icons-react'\nimport { Toolbar } from '@/components/ui'\n\nexport default function ToolbarVariantsDemo() {\n    return (\n        <Toolbar aria-label='Toolbars'>\n            <Toolbar.Group aria-label='Text Formatting Options' icon>\n                <Toolbar.Item aria-label='Bold'>\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Italic'>\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Underline'>\n                    <IconUnderline />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment' icon variant='outline'>\n                <Toolbar.Item aria-label='Align Left'>\n                    <IconAlignLeft />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Center'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Right'>\n                    <IconAlignRight />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Mode' variant='outline'>\n                <Toolbar.Item aria-label='View'>\n                    <IconEye />\n                    View\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Edit'>\n                    <IconPencil />\n                    Edit\n                </Toolbar.Item>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\nimport { ColorSwatchPicker } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [color, setColor] = useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                className='flex justify-center gap-2'\n                onChange={setColor}\n                value={color}\n            >\n                <ColorSwatchPicker.Item color='#f59e0b' />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item color='#ec4899' />\n                <ColorSwatchPicker.Item color='#f43f5e' />\n            </ColorSwatchPicker>\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-item-disabled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\nimport { ColorSwatchPicker, Description } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                className='flex justify-center gap-2'\n                onChange={setValue}\n                value={value}\n            >\n                <ColorSwatchPicker.Item color='#f59e0b' isDisabled />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item color='#ec4899' isDisabled />\n                <ColorSwatchPicker.Item color='#f43f5e' isDisabled />\n            </ColorSwatchPicker>\n\n            <Description>{value.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\nimport { ColorSwatchPicker } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = useState(parseColor('#0d6efd'))\n    return (\n        <ColorSwatchPicker\n            aria-label='Pick color'\n            className='grid grid-cols-3 gap-2 lg:grid-cols-6'\n            onChange={setValue}\n            value={value}\n        >\n            <ColorSwatchPicker.Item color='#fafafa' />\n            <ColorSwatchPicker.Item color='#84cc16' />\n            <ColorSwatchPicker.Item color='#0d6efd' />\n            <ColorSwatchPicker.Item color='#ec4899' />\n            <ColorSwatchPicker.Item color='#f43f5e' />\n        </ColorSwatchPicker>\n    )\n}\n"
  },
  "colors/color-area/color-area-with-slider-demo": {
    "component": "@/components/docs/colors/color-area/color-area-with-slider-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\nimport { ColorArea, ColorField, ColorSlider } from '@/components/ui'\n\nexport default function ColorAreaWithSliderDemo() {\n    const [color, setColor] = useState(parseColor('hsl(50, 100%, 50%)'))\n    return (\n        <div className='flex flex-col gap-y-2'>\n            <ColorArea onChange={setColor} value={color} xChannel='saturation' yChannel='lightness' />\n            <ColorSlider channel='hue' label='Fill Color' onChange={setColor} value={color} />\n            <ColorField label='Current Color' value={color.toString('hex')} withPicker={false} />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area/color-area-channel-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport type { ColorChannel } from 'react-stately'\nimport { useState } from 'react'\nimport { ColorArea, Select } from '@/components/ui'\n\nconst channels = ['red', 'green', 'blue', 'alpha'].map((channel) => ({ channel }))\n\nexport default function ColorAreaChannelDemo() {\n    const [xChannel, setXChannel] = useState<Key | null>('red')\n    const [yChannel, setYChannel] = useState<Key | null>('blue')\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <div className='flex w-full flex-col gap-2 sm:flex-row'>\n                <Select\n                    className='w-full'\n                    items={channels}\n                    label='X Channel'\n                    onSelectionChange={(v) => setXChannel(v)}\n                    selectedKey={xChannel}\n                >\n                    {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n                </Select>\n                <Select\n                    className='w-full'\n                    items={channels}\n                    label='Y Channel'\n                    onSelectionChange={(v) => setYChannel(v)}\n                    selectedKey={yChannel}\n                >\n                    {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n                </Select>\n            </div>\n            <ColorArea xChannel={xChannel as ColorChannel} yChannel={yChannel as ColorChannel} />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area/color-area-space-demo",
    "raw": "'use client'\n\nimport type { ColorSpace, Key } from 'react-aria-components'\nimport { useState } from 'react'\nimport { ColorArea, Select } from '@/components/ui'\n\nconst spaces = ['rgb', 'hsb', 'hsl'].map((space) => ({ space }))\n\nexport default function ColorAreaSpaceDemo() {\n    const [colorSpace, setColorSpace] = useState<Key | null>('rgb')\n    return (\n        <div className='flex flex-col gap-4'>\n            <Select\n                className='w-full'\n                items={spaces}\n                label='Color Space'\n                onSelectionChange={setColorSpace}\n                selectedKey={colorSpace}\n            >\n                {(item) => <Select.Item id={item.space}>{item.space}</Select.Item>}\n            </Select>\n            <ColorArea colorSpace={colorSpace as ColorSpace} />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-demo": {
    "component": "@/components/docs/colors/color-area/color-area-demo",
    "raw": "'use client'\n\nimport { ColorArea } from '@/components/ui'\n\nexport default function ColorAreaDemo() {\n    return (\n        <div className='flex gap-4'>\n            <div className='space-y-1.5'>\n                <span>Default</span>\n                <ColorArea />\n            </div>\n            <div className='space-y-1.5'>\n                <span>Disabled</span>\n                <ColorArea isDisabled />\n            </div>\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area/color-area-controlled-demo",
    "raw": "'use client'\n\nimport type { ColorChannel } from 'react-stately'\nimport { useState } from 'react'\nimport { type ColorSpace, type Key, parseColor } from 'react-aria-components'\nimport { ColorArea } from '@/components/ui'\nimport { Select } from '@/components/ui/select'\n\nconst RGBchannels = ['red', 'green', 'blue'].map((channel) => ({ channel }))\nconst HSLchannels = ['hue', 'saturation', 'lightness'].map((channel) => ({ channel }))\nconst HSBchannels = ['hue', 'saturation', 'brightness'].map((channel) => ({ channel }))\n\nexport default function ColorAreaControlledDemo() {\n    const [color, setColor] = useState(parseColor('hsl(0, 100%, 50%)'))\n    const [colorSpace, setColorSpace] = useState<Key | null>('rgb')\n    const [xChannel, setXChannel] = useState<Key | null>(colorSpace === 'rgb' ? 'red' : 'hue')\n    const [yChannel, setYChannel] = useState<Key | null>(colorSpace === 'rgb' ? 'green' : 'saturation')\n\n    return (\n        <div className='flex flex-col items-center gap-2'>\n            <Select\n                className='w-full'\n                label='Color Spaces'\n                onSelectionChange={(v) => {\n                    setColorSpace(v)\n                    setXChannel(v === 'rgb' ? 'red' : 'hue')\n                    setYChannel(v === 'rgb' ? 'green' : 'saturation')\n                }}\n                selectedKey={colorSpace}\n            >\n                <Select.Item id='rgb'>RGB</Select.Item>\n                <Select.Item id='hsl'>HSL</Select.Item>\n                <Select.Item id='hsb'>HSB</Select.Item>\n            </Select>\n            <Select\n                className='w-full'\n                items={colorSpace === 'rgb' ? RGBchannels : colorSpace === 'hsl' ? HSLchannels : HSBchannels}\n                label='X Channel'\n                onSelectionChange={(v) => setXChannel(v)}\n                selectedKey={xChannel}\n            >\n                {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n            </Select>\n            <Select\n                className='w-full'\n                items={colorSpace === 'rgb' ? RGBchannels : colorSpace === 'hsl' ? HSLchannels : HSBchannels}\n                label='Y Channel'\n                onSelectionChange={(v) => setYChannel(v)}\n                selectedKey={yChannel}\n            >\n                {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n            </Select>\n            <ColorArea\n                colorSpace={colorSpace as ColorSpace}\n                onChange={setColor}\n                value={color}\n                xChannel={xChannel as ColorChannel}\n                yChannel={yChannel as ColorChannel}\n            />\n            <pre>{JSON.stringify({ color }, null, 2)}</pre>\n        </div>\n    )\n}\n"
  },
  "colors/color-wheel/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-demo",
    "raw": "'use client'\n\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelDemo() {\n    return (\n        <div className='flex gap-4'>\n            <div className='space-y-1.5'>\n                <span>Default</span>\n                <ColorWheel aria-label='Color' />\n            </div>\n            <div className='space-y-1.5'>\n                <span>Disabled</span>\n                <ColorWheel aria-label='Color' isDisabled />\n            </div>\n        </div>\n    )\n}\n"
  },
  "colors/color-wheel/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelControlledDemo() {\n    const [color, setColor] = useState(parseColor('hsl(0, 100%, 50%)'))\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <ColorWheel aria-label='Background color' onChange={setColor} value={color} />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-field/color-field-demo": {
    "component": "@/components/docs/colors/color-field/color-field-demo",
    "raw": "'use client'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <ColorField label='Default' placeholder='#FAFAFA' />\n            <ColorField isReadOnly label='Readonly' placeholder='#FAFAFA' />\n            <ColorField isInvalid label='Invalid' placeholder='#FAFAFA' />\n            <ColorField isDisabled label='Disabled' placeholder='#FAFAFA' />\n            <ColorField isLoading label='Loading' placeholder='#FAFAFA' />\n        </div>\n    )\n}\n"
  },
  "colors/color-field/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field/color-field-with-prefix-demo",
    "raw": "'use client'\n\nimport { IconColorSwatch, IconPalette } from '@tabler/icons-react'\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldWithPrefixSuffixDemo() {\n    return (\n        <div className='space-y-4'>\n            <ColorField label='Color' placeholder='#FAFAFA' prefix={<IconColorSwatch />} />\n            <ColorField label='Color' placeholder='#FAFAFA' suffix={<IconColorSwatch />} />\n            <ColorField label='Color' placeholder='#FAFAFA' prefix={<IconColorSwatch />} suffix={<IconPalette />} />\n        </div>\n    )\n}\n"
  },
  "colors/color-field/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field/color-field-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { type Color, parseColor } from 'react-aria-components'\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldControlledDemo() {\n    const [color, setColor] = useState<Color | null>(parseColor('#FAFAFA'))\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <ColorField label='Color' onChange={setColor} value={color} />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-label-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = useState(defaultColor)\n    return <ColorPicker label='Theme Color' onChange={setColor} value={color} />\n}\n"
  },
  "colors/color-picker/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-demo",
    "raw": "'use client'\n\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDemo() {\n    return (\n        <div className='flex gap-6'>\n            <ColorPicker label='Default' />\n            <ColorPicker isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-description-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithDescriptionDemo() {\n    const [color, setColor] = useState(defaultColor)\n    return (\n        <ColorPicker\n            description='Snag a color for the app theme'\n            label='Theme Color'\n            onChange={setColor}\n            value={color}\n        />\n    )\n}\n"
  },
  "colors/color-picker/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-selection-format-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\nimport { ColorArea, ColorField, ColorPicker, defaultColor, Select } from '@/components/ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n    const [color, setColor] = useState(defaultColor)\n    const [isHexFormat, setIsHexFormat] = useState(false)\n    const [space, setSpace] = useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker label={color.toString(space)} onChange={setColor} value={color}>\n            <section className='space-y-2'>\n                <ColorArea />\n                <Select\n                    aria-label='Color Space'\n                    defaultSelectedKey={space}\n                    onSelectionChange={(s) => {\n                        setSpace(s as ColorSpace)\n                        setIsHexFormat(s === 'hex')\n                    }}\n                    selectedKey={space}\n                >\n                    {['rgb', 'hex', 'hsl', 'hsb'].map((s) => (\n                        <Select.Item id={s} key={s} textValue={s}>\n                            {s}\n                        </Select.Item>\n                    ))}\n                </Select>\n                {isHexFormat ? (\n                    <ColorField aria-label='Hex color' colorSpace={space} />\n                ) : getColorChannels(space).length > 0 ? (\n                    <div className='flex gap-2 sm:max-w-56'>\n                        {getColorChannels(space).map((channel) => (\n                            <ColorField channel={channel} colorSpace={space} key={channel} />\n                        ))}\n                    </div>\n                ) : null}\n            </section>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-disabled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDisabledDemo() {\n    const [color, setColor] = useState(parseColor('hsl(216, 98%, 52%)'))\n    return <ColorPicker isDisabled label='Color Picker' onChange={setColor} value={color} />\n}\n"
  },
  "colors/color-picker/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-combination-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\nimport { ColorArea, ColorField, ColorPicker, ColorSlider, Select } from '@/components/ui'\n\nexport default function ColorPickerCombinationDemo() {\n    const [space, setSpace] = useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker defaultValue='#0d6efd' label='Color picker'>\n            <section className='space-y-2 sm:max-w-56'>\n                <ColorArea colorSpace={space} />\n                <div className='5 space-y-0'>\n                    {getColorChannels(space).map((channel) => (\n                        <ColorSlider channel={channel} colorSpace={space} key={channel} showOutput={false} />\n                    ))}\n                </div>\n                <Select\n                    aria-label='Color space'\n                    onSelectionChange={(s) => setSpace(s as ColorSpace)}\n                    selectedKey={space}\n                >\n                    {['rgb', 'hsb', 'hsl'].map((s) => (\n                        <Select.Item id={s} key={s} textValue={s}>\n                            {s}\n                        </Select.Item>\n                    ))}\n                </Select>\n                <div className='flex gap-2'>\n                    {getColorChannels(space).map((channel) => (\n                        <ColorField channel={channel} className='w-full' colorSpace={space} key={channel} />\n                    ))}\n                </div>\n            </section>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-swatch-demo",
    "raw": "'use client'\n\nimport type { Color } from 'react-aria-components'\nimport { useState } from 'react'\nimport { ColorArea, ColorField, ColorPicker, ColorSlider, ColorSwatchPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerEnableSwatchDemo() {\n    const [color, setColor] = useState(defaultColor)\n    const colorChangeHandler = (v: Color) => {\n        setColor(v)\n    }\n    return (\n        <ColorPicker onChange={(v) => colorChangeHandler(v)} value={color}>\n            <ColorArea colorSpace='hsb' xChannel='saturation' yChannel='brightness' />\n            <ColorSlider channel='hue' colorSpace='hsb' />\n            <ColorField aria-label='Hex color' />\n            <ColorSwatchPicker aria-label='Color swatch picker' className='flex flex-wrap gap-2' layout='grid'>\n                {colors.map((color) => (\n                    <ColorSwatchPicker.Item color={color} key={color} />\n                ))}\n            </ColorSwatchPicker>\n        </ColorPicker>\n    )\n}\n\nconst colors = ['#f59e0b', '#84cc16', '#0d6efd', '#ec4899', '#f43f5e', '#d4b990', '#b19f73', '#9370db', '#7d60df']\n"
  },
  "colors/color-picker/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerControlledDemo() {\n    const [color, setColor] = useState(defaultColor)\n\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <ColorPicker onChange={setColor} value={color} />\n            <code>{JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-dynamic-label-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-dynamic-label-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = useState(defaultColor)\n    return <ColorPicker label={color.toString('hex')} onChange={setColor} value={color} />\n}\n"
  },
  "colors/color-slider/color-slider-controlled-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { ColorSlider, defaultColor } from '@/components/ui'\n\nexport default function ColorSliderControlledDemo() {\n    const [color, setColor] = useState(defaultColor)\n    return (\n        <div className='flex flex-col gap-2'>\n            <ColorSlider channel='hue' onChange={setColor} value={color} />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-with-label-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderWithLabelDemo() {\n    return <ColorSlider channel='hue' defaultValue='hsl(0, 100%, 50%)' label='Color Customizer' />\n}\n"
  },
  "colors/color-slider/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDemo() {\n    return (\n        <div className='space-y-4'>\n            <ColorSlider channel='hue' defaultValue={'hsl(0, 100%, 50%)'} label='Default' />\n            <ColorSlider channel='hue' defaultValue={'hsl(0, 100%, 50%)'} isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-vertical-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-vertical-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderVerticalDemo() {\n    return (\n        <div className='flex items-center justify-center'>\n            <ColorSlider\n                aria-label='Fill Color'\n                channel='hue'\n                defaultValue='hsl(0, 100%, 50%)'\n                orientation='vertical'\n            />\n        </div>\n    )\n}\n"
  },
  "charts/line-chart/line-chart-demo": {
    "component": "@/components/docs/charts/line-chart/line-chart-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, LineChart } from '@/components/ui'\n\nexport default function LineChartDemo() {\n    const engagementData = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>\n                    Tracks likes, comments, and shares during the most recent 7-day period.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <LineChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={engagementData}\n                    dataKey='day'\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line-chart/line-chart-controlled-demo": {
    "component": "@/components/docs/charts/line-chart/line-chart-controlled-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { useMemo, useState } from 'react'\nimport { Card, LineChart, Toggle } from '@/components/ui'\n\nexport default function LineChartControlledSmart() {\n    const [selected, setSelected] = useState<Set<Key>>(new Set(['7d']))\n    const selectedKey = Array.from(selected)[0] as string | undefined\n\n    const engagementData = useMemo(() => {\n        if (selectedKey === '1m') {\n            return Array.from({ length: 4 }, (_, i) => ({\n                label: `Week ${i + 1}`,\n                likes: Math.floor(400 + Math.random() * 300),\n                comments: Math.floor(100 + Math.random() * 100),\n                shares: Math.floor(50 + Math.random() * 50)\n            }))\n        }\n\n        if (selectedKey === '2w') {\n            return Array.from({ length: 2 }, (_, i) => ({\n                label: `Week ${i + 1}`,\n                likes: Math.floor(800 + Math.random() * 400),\n                comments: Math.floor(200 + Math.random() * 150),\n                shares: Math.floor(100 + Math.random() * 80)\n            }))\n        }\n\n        const lengthMap: Record<string, number> = { '3d': 3, '7d': 7 }\n        const length = lengthMap[selectedKey ?? '7d'] ?? 7\n\n        return Array.from({ length }, (_, i) => ({\n            label: `Day ${i + 1}`,\n            likes: Math.floor(100 + Math.random() * 300),\n            comments: Math.floor(20 + Math.random() * 80),\n            shares: Math.floor(10 + Math.random() * 50)\n        }))\n    }, [selectedKey])\n\n    const showAllTicks = selectedKey === '3d' || selectedKey === '7d'\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement</Card.Title>\n                <Card.Description>Likes, comments, and shares over a dynamic time range.</Card.Description>\n                <Card.Action>\n                    <Toggle.Group onSelectionChange={setSelected} selectedKeys={selected} size='sm' variant='outline'>\n                        <Toggle id='3d'>3d</Toggle>\n                        <Toggle id='7d'>7d</Toggle>\n                        <Toggle id='2w'>2w</Toggle>\n                        <Toggle id='1m'>1m</Toggle>\n                    </Toggle.Group>\n                </Card.Action>\n            </Card.Header>\n            <Card.Content>\n                <LineChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={engagementData}\n                    dataKey='label'\n                    xAxisProps={{ interval: showAllTicks ? 0 : undefined }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line-chart/line-chart-stacked-demo": {
    "component": "@/components/docs/charts/line-chart/line-chart-stacked-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, LineChart } from '@/components/ui'\n\nexport default function LineChartStackedDemo() {\n    const data = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>\n                    Tracks likes, comments, and shares during the most recent 7-day period.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <LineChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={data}\n                    dataKey='day'\n                    type='stacked'\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line-chart/line-chart-custom-legend-demo": {
    "component": "@/components/docs/charts/line-chart/line-chart-custom-legend-demo",
    "raw": "'use client'\n\nimport type { LegendPayload } from 'recharts'\nimport { IconHeartFilled, IconMessageFilled, IconUpload } from '@tabler/icons-react'\nimport { useMemo } from 'react'\nimport { Card, CardFooter, LineChart } from '@/components/ui'\n\nfunction CustomLegend({ payload }: { payload?: ReadonlyArray<LegendPayload> }) {\n    const icons: Record<string, React.ReactNode> = {\n        likes: <IconHeartFilled />,\n        comments: <IconMessageFilled />,\n        shares: <IconUpload />\n    }\n\n    return (\n        <CardFooter className='flex justify-center gap-4 pt-6 text-sm'>\n            {payload?.map((item) => {\n                const key = item.dataKey?.toString() ?? ''\n                return (\n                    <div className='flex items-center gap-2' key={key}>\n                        <span style={{ color: item.color }}>{icons[key]}</span>\n                        <span>{item.value}</span>\n                    </div>\n                )\n            })}\n        </CardFooter>\n    )\n}\n\nexport default function LineChartCustomLegendDemo() {\n    const data = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>Likes, comments, and shares for the recent week.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <LineChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={data}\n                    dataKey='day'\n                    legend={<CustomLegend />}\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line-chart/line-chart-custom-colors-demo": {
    "component": "@/components/docs/charts/line-chart/line-chart-custom-colors-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, LineChart } from '@/components/ui'\n\ntype EngagementPoint = {\n    day: string\n    likes: number\n    comments: number\n    shares: number\n}\n\nexport default function LineChartCustomColorsDemo() {\n    const engagementData: EngagementPoint[] = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>\n                    Tracks likes, comments, and shares during the most recent 7-day period.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <LineChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes', color: 'var(--color-pink-500)' },\n                        comments: { label: 'Comments', color: 'var(--color-blue-500)' },\n                        shares: { label: 'Shares', color: 'var(--color-emerald-500)' }\n                    }}\n                    data={engagementData}\n                    dataKey='day'\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line-chart/line-chart-custom-tooltip-demo": {
    "component": "@/components/docs/charts/line-chart/line-chart-custom-tooltip-demo",
    "raw": "'use client'\n\nimport type { TooltipProps as RechartsTooltipProps } from 'recharts'\nimport type { NameType, ValueType } from 'recharts/types/component/DefaultTooltipContent'\nimport { IconHeartFilled, IconMessageFilled, IconUpload } from '@tabler/icons-react'\nimport { useMemo } from 'react'\nimport { Card, LineChart } from '@/components/ui'\n\ninterface CustomTooltipProps extends Partial<RechartsTooltipProps<ValueType, NameType>> {\n    active?: boolean\n    payload?: {\n        name?: string\n        value?: number\n        dataKey?: string\n        color?: string\n    }[]\n    label?: string\n}\n\nfunction CustomTooltip({ active, payload, label }: CustomTooltipProps) {\n    if (!active || !payload?.length) return null\n\n    return (\n        <div className='inset-ring inset-ring-fg/20 rounded-2xl bg-bg/10 p-3 text-xs backdrop-blur-2xl'>\n            <div className='mb-2 font-medium text-muted-fg'>{label}</div>\n            <div className='space-y-1'>\n                {payload.map((entry) => (\n                    <div className='flex items-center justify-between gap-3' key={entry.dataKey}>\n                        <div className='flex items-center gap-2 text-muted-fg capitalize'>\n                            {entry.dataKey === 'likes' && <IconHeartFilled style={{ color: entry.color }} />}\n                            {entry.dataKey === 'comments' && <IconMessageFilled style={{ color: entry.color }} />}\n                            {entry.dataKey === 'shares' && <IconUpload style={{ color: entry.color }} />}\n                            <span>{entry.name}</span>\n                        </div>\n                        <span className='font-mono text-fg tabular-nums'>{entry.value}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default function LineChartCustomTooltipDemo() {\n    const data = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>Likes, comments, and shares for the recent week.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <LineChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={data}\n                    dataKey='day'\n                    tooltip={<CustomTooltip />}\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line-chart/line-chart-custom-format-demo": {
    "component": "@/components/docs/charts/line-chart/line-chart-custom-format-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, LineChart } from '@/components/ui'\n\nexport default function LineChartCustomFormatDemo() {\n    const data = useMemo(() => {\n        return Array.from({ length: 12 }, (_, i) => {\n            const month = new Date(0, i).toLocaleString('en-US', { month: 'short' })\n            const revenue = Math.floor(4000 + Math.random() * 1500)\n            const expenses = Math.floor(2000 + Math.random() * 1000)\n            return { month, revenue, expenses, net: revenue - expenses }\n        })\n    }, [])\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Net revenue by month</Card.Title>\n                <Card.Description>Revenue minus expenses to show monthly profitability.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <LineChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        revenue: { label: 'Revenue' },\n                        expenses: { label: 'Expenses' },\n                        net: { label: 'Net' }\n                    }}\n                    data={data}\n                    dataKey='month'\n                    tooltipProps={{\n                        formatter: (value: number, label: string) => (\n                            <span className='flex w-full justify-between gap-x-4 font-mono'>\n                                <span className='flex-1'>{label}</span>\n                                <span>\n                                    {' '}\n                                    {new Intl.NumberFormat('en-US', {\n                                        notation: 'compact',\n                                        compactDisplay: 'short'\n                                    }).format(value)}\n                                </span>\n                            </span>\n                        )\n                    }}\n                    type='stacked'\n                    valueFormatter={(value: number) =>\n                        new Intl.NumberFormat('en-US', {\n                            notation: 'compact',\n                            compactDisplay: 'short'\n                        }).format(value)\n                    }\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar-chart/bar-chart-demo": {
    "component": "@/components/docs/charts/bar-chart/bar-chart-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { BarChart, Card } from '@/components/ui'\n\ntype EngagementPoint = {\n    day: string\n    likes: number\n    comments: number\n    shares: number\n}\n\nexport default function BarChartDemo() {\n    const engagementData: EngagementPoint[] = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>\n                    Tracks likes, comments, and shares during the most recent 7-day period.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <BarChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={engagementData}\n                    dataKey='day'\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar-chart/bar-chart-custom-legend-demo": {
    "component": "@/components/docs/charts/bar-chart/bar-chart-custom-legend-demo",
    "raw": "'use client'\n\nimport type { LegendPayload } from 'recharts'\nimport { IconHeartFilled, IconMessageFilled, IconUpload } from '@tabler/icons-react'\nimport { useMemo } from 'react'\nimport { BarChart, Card, CardFooter } from '@/components/ui'\n\nfunction CustomLegend({ payload }: { payload?: ReadonlyArray<LegendPayload> }) {\n    const icons: Record<string, React.ReactNode> = {\n        likes: <IconHeartFilled />,\n        comments: <IconMessageFilled />,\n        shares: <IconUpload />\n    }\n\n    return (\n        <CardFooter className='flex justify-center gap-4 pt-6 text-sm'>\n            {payload?.map((item) => {\n                const key = item.dataKey?.toString() ?? ''\n                return (\n                    <div className='flex items-center gap-2' key={key}>\n                        <span style={{ color: item.color }}>{icons[key]}</span>\n                        <span>{item.value}</span>\n                    </div>\n                )\n            })}\n        </CardFooter>\n    )\n}\n\nexport default function BarChartCustomLegendDemo() {\n    const data = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>Likes, comments, and shares for the recent week.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <BarChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={data}\n                    dataKey='day'\n                    legend={<CustomLegend />}\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar-chart/bar-chart-custom-tooltip-demo": {
    "component": "@/components/docs/charts/bar-chart/bar-chart-custom-tooltip-demo",
    "raw": "'use client'\n\nimport type { TooltipProps as RechartsTooltipProps } from 'recharts'\nimport type { NameType, ValueType } from 'recharts/types/component/DefaultTooltipContent'\nimport { IconHeartFilled, IconMessageFilled, IconUpload } from '@tabler/icons-react'\nimport { useMemo } from 'react'\nimport { BarChart, Card } from '@/components/ui'\n\ninterface CustomTooltipProps extends Partial<RechartsTooltipProps<ValueType, NameType>> {\n    active?: boolean\n    payload?: {\n        name?: string\n        value?: number\n        dataKey?: string\n        color?: string\n    }[]\n    label?: string\n}\n\nfunction CustomTooltip({ active, payload, label }: CustomTooltipProps) {\n    if (!active || !payload?.length) return null\n\n    return (\n        <div className='inset-ring inset-ring-fg/20 rounded-2xl bg-bg/10 p-3 text-xs backdrop-blur-2xl'>\n            <div className='mb-2 font-medium text-muted-fg'>{label}</div>\n            <div className='space-y-1'>\n                {payload.map((entry) => (\n                    <div className='flex items-center justify-between gap-3' key={entry.dataKey}>\n                        <div className='flex items-center gap-2 text-muted-fg capitalize'>\n                            {entry.dataKey === 'likes' && <IconHeartFilled style={{ color: entry.color }} />}\n                            {entry.dataKey === 'comments' && <IconMessageFilled style={{ color: entry.color }} />}\n                            {entry.dataKey === 'shares' && <IconUpload style={{ color: entry.color }} />}\n                            <span>{entry.name}</span>\n                        </div>\n                        <span className='font-mono text-fg tabular-nums'>{entry.value}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default function BarChartCustomTooltipDemo() {\n    const data = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>Likes, comments, and shares for the recent week.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <BarChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={data}\n                    dataKey='day'\n                    tooltip={<CustomTooltip />}\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar-chart/bar-chart-controlled-demo": {
    "component": "@/components/docs/charts/bar-chart/bar-chart-controlled-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { useMemo, useState } from 'react'\nimport { BarChart, Card, Toggle } from '@/components/ui'\n\nexport default function BarChartControlledSmart() {\n    const [selected, setSelected] = useState<Set<Key>>(new Set(['7d']))\n    const selectedKey = Array.from(selected)[0] as string | undefined\n\n    const engagementData = useMemo(() => {\n        if (selectedKey === '1m') {\n            return Array.from({ length: 4 }, (_, i) => ({\n                label: `Week ${i + 1}`,\n                likes: Math.floor(400 + Math.random() * 300),\n                comments: Math.floor(100 + Math.random() * 100),\n                shares: Math.floor(50 + Math.random() * 50)\n            }))\n        }\n\n        if (selectedKey === '2w') {\n            return Array.from({ length: 2 }, (_, i) => ({\n                label: `Week ${i + 1}`,\n                likes: Math.floor(800 + Math.random() * 400),\n                comments: Math.floor(200 + Math.random() * 150),\n                shares: Math.floor(100 + Math.random() * 80)\n            }))\n        }\n\n        const lengthMap: Record<string, number> = { '3d': 3, '7d': 7 }\n        const length = lengthMap[selectedKey ?? '7d'] ?? 7\n\n        return Array.from({ length }, (_, i) => ({\n            label: `Day ${i + 1}`,\n            likes: Math.floor(100 + Math.random() * 300),\n            comments: Math.floor(20 + Math.random() * 80),\n            shares: Math.floor(10 + Math.random() * 50)\n        }))\n    }, [selectedKey])\n\n    const showAllTicks = selectedKey === '3d' || selectedKey === '7d'\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement</Card.Title>\n                <Card.Description>Likes, comments, and shares over a dynamic time range.</Card.Description>\n                <Card.Action>\n                    <Toggle.Group\n                        onSelectionChange={setSelected}\n                        selectedKeys={selected}\n                        selectionMode='single'\n                        size='sm'\n                        variant='outline'\n                    >\n                        <Toggle id='3d'>3d</Toggle>\n                        <Toggle id='7d'>7d</Toggle>\n                        <Toggle id='2w'>2w</Toggle>\n                        <Toggle id='1m'>1m</Toggle>\n                    </Toggle.Group>\n                </Card.Action>\n            </Card.Header>\n            <Card.Content>\n                <BarChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={engagementData}\n                    dataKey='label'\n                    xAxisProps={{ interval: showAllTicks ? 0 : undefined }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar-chart/bar-chart-stacked-demo": {
    "component": "@/components/docs/charts/bar-chart/bar-chart-stacked-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { BarChart, Card } from '@/components/ui'\n\nexport default function BarChartStackedDemo() {\n    const data = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>\n                    Tracks likes, comments, and shares during the most recent 7-day period.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <BarChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={data}\n                    dataKey='day'\n                    lineType='basis'\n                    type='stacked'\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar-chart/bar-chart-custom-colors-demo": {
    "component": "@/components/docs/charts/bar-chart/bar-chart-custom-colors-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { BarChart, Card } from '@/components/ui'\n\ntype EngagementPoint = {\n    day: string\n    likes: number\n    comments: number\n    shares: number\n}\n\nexport default function BarChartCustomColorsDemo() {\n    const engagementData: EngagementPoint[] = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>\n                    Tracks likes, comments, and shares during the most recent 7-day period.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <BarChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes', color: 'var(--color-pink-500)' },\n                        comments: { label: 'Comments', color: 'var(--color-blue-500)' },\n                        shares: { label: 'Shares', color: 'var(--color-emerald-500)' }\n                    }}\n                    data={engagementData}\n                    dataKey='day'\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar-chart/bar-chart-custom-format-demo": {
    "component": "@/components/docs/charts/bar-chart/bar-chart-custom-format-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { BarChart, Card } from '@/components/ui'\n\nexport default function BarChartCustomFormatDemo() {\n    const data = useMemo(() => {\n        return Array.from({ length: 12 }, (_, i) => {\n            const month = new Date(0, i).toLocaleString('en-US', { month: 'short' })\n            const revenue = Math.floor(4000 + Math.random() * 1500)\n            const expenses = Math.floor(2000 + Math.random() * 1000)\n            return { month, revenue, expenses, net: revenue - expenses }\n        })\n    }, [])\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Net revenue by month</Card.Title>\n                <Card.Description>Revenue minus expenses to show monthly profitability.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <BarChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        revenue: { label: 'Revenue' },\n                        expenses: { label: 'Expenses' },\n                        net: { label: 'Net' }\n                    }}\n                    data={data}\n                    dataKey='month'\n                    lineType='monotone'\n                    tooltipProps={{\n                        formatter: (value: number, label: string) => (\n                            <span className='flex w-full justify-between gap-x-4 font-mono'>\n                                <span className='flex-1'>{label}</span>\n                                <span>\n                                    {' '}\n                                    {new Intl.NumberFormat('en-US', {\n                                        notation: 'compact',\n                                        compactDisplay: 'short'\n                                    }).format(value)}\n                                </span>\n                            </span>\n                        )\n                    }}\n                    type='stacked'\n                    valueFormatter={(value: number) =>\n                        new Intl.NumberFormat('en-US', {\n                            notation: 'compact',\n                            compactDisplay: 'short'\n                        }).format(value)\n                    }\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie-chart/pie-chart-custom-colors-demo": {
    "component": "@/components/docs/charts/pie-chart/pie-chart-custom-colors-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, PieChart } from '@/components/ui'\n\nexport default function PieChartTrafficSourceDemo() {\n    const data = useMemo(\n        () => [\n            { name: 'Organic', amount: 1240 },\n            { name: 'Paid', amount: 880 },\n            { name: 'Referral', amount: 360 },\n            { name: 'Social', amount: 220 }\n        ],\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='text-center'>\n                <Card.Title>Traffic source breakdown</Card.Title>\n                <Card.Description>Where your website traffic is coming from.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <PieChart\n                    className='mx-auto h-56'\n                    config={{\n                        Organic: { label: 'Organic', color: 'var(--color-emerald-500)' },\n                        Paid: { label: 'Paid', color: 'var(--color-rose-500)' },\n                        Referral: { label: 'Referral', color: 'var(--color-sky-500)' },\n                        Social: { label: 'Social', color: 'var(--color-indigo-500)' }\n                    }}\n                    data={data}\n                    dataKey='amount'\n                    nameKey='name'\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie-chart/pie-chart-demo": {
    "component": "@/components/docs/charts/pie-chart/pie-chart-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, PieChart } from '@/components/ui'\n\nexport default function PieChartTrafficSourceDemo() {\n    const data = useMemo(\n        () => [\n            { name: 'Organic', amount: 1240 },\n            { name: 'Paid', amount: 880 },\n            { name: 'Referral', amount: 360 },\n            { name: 'Social', amount: 220 }\n        ],\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='text-center'>\n                <Card.Title>Traffic source breakdown</Card.Title>\n                <Card.Description>Where your website traffic is coming from.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <PieChart\n                    className='mx-auto h-56'\n                    config={{\n                        Organic: { label: 'Organic' },\n                        Paid: { label: 'Paid' },\n                        Referral: { label: 'Referral' },\n                        Social: { label: 'Social' }\n                    }}\n                    data={data}\n                    dataKey='amount'\n                    nameKey='name'\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie-chart/pie-chart-gap-demo": {
    "component": "@/components/docs/charts/pie-chart/pie-chart-gap-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, PieChart } from '@/components/ui'\n\nexport default function PieChartGapDemo() {\n    const data = useMemo(\n        () => [\n            { name: 'Organic', amount: 1240 },\n            { name: 'Paid', amount: 880 },\n            { name: 'Referral', amount: 360 },\n            { name: 'Social', amount: 220 }\n        ],\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='text-center'>\n                <Card.Title>Traffic source breakdown</Card.Title>\n                <Card.Description>Where your website traffic is coming from.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <PieChart\n                    className='mx-auto h-56'\n                    config={{\n                        Organic: { label: 'Organic' },\n                        Paid: { label: 'Paid' },\n                        Referral: { label: 'Referral' },\n                        Social: { label: 'Social' }\n                    }}\n                    data={data}\n                    dataKey='amount'\n                    nameKey='name'\n                    pieProps={{\n                        paddingAngle: 20,\n                        startOffset: 30\n                    }}\n                    showLabel\n                    valueFormatter={(v) => `${v} visits`}\n                    variant='donut'\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie-chart/pie-chart-donut-custom-label-demo": {
    "component": "@/components/docs/charts/pie-chart/pie-chart-donut-custom-label-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, PieChart } from '@/components/ui'\n\nexport default function PieChartDonutCustomLabelDemo() {\n    const data = useMemo(\n        () => [\n            { name: 'Rent', amount: 1200 },\n            { name: 'Groceries', amount: 450 },\n            { name: 'Utilities', amount: 200 },\n            { name: 'Entertainment', amount: 150 }\n        ],\n        []\n    )\n\n    const total = useMemo(() => data.reduce((sum, item) => sum + item.amount, 0), [data])\n\n    return (\n        <Card>\n            <Card.Header className='text-center'>\n                <Card.Title>Monthly spend breakdown</Card.Title>\n                <Card.Description>Shows where the money goes each month.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <PieChart\n                    className='mx-auto h-56'\n                    config={{\n                        Rent: { label: 'Rent' },\n                        Groceries: { label: 'Groceries' },\n                        Utilities: { label: 'Utilities' },\n                        Entertainment: { label: 'Entertainment' }\n                    }}\n                    data={data}\n                    dataKey='amount'\n                    label=''\n                    nameKey='name'\n                    showLabel\n                    valueFormatter={() => ''}\n                    variant='donut'\n                >\n                    <text\n                        className='fill-fg font-bold text-xl'\n                        dominantBaseline='middle'\n                        textAnchor='middle'\n                        x='50%'\n                        y='50%'\n                    >\n                        ${total.toLocaleString()}\n                    </text>\n                    <text\n                        className='fill-muted-fg text-xs'\n                        dominantBaseline='hanging'\n                        textAnchor='middle'\n                        x='50%'\n                        y='60%'\n                    >\n                        Total spent\n                    </text>\n                </PieChart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie-chart/pie-chart-donut-demo": {
    "component": "@/components/docs/charts/pie-chart/pie-chart-donut-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, PieChart } from '@/components/ui'\n\nexport default function PieChartDonutDemo() {\n    const data = useMemo(\n        () => [\n            { name: 'Rent', amount: 1200 },\n            { name: 'Groceries', amount: 450 },\n            { name: 'Utilities', amount: 200 },\n            { name: 'Entertainment', amount: 150 }\n        ],\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='text-center'>\n                <Card.Title>Monthly spend breakdown</Card.Title>\n                <Card.Description>Shows where the money goes each month.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <PieChart\n                    className='mx-auto h-56'\n                    config={{\n                        Rent: { label: 'Rent' },\n                        Groceries: { label: 'Groceries' },\n                        Utilities: { label: 'Utilities' },\n                        Entertainment: { label: 'Entertainment' }\n                    }}\n                    data={data}\n                    dataKey='amount'\n                    nameKey='name'\n                    valueFormatter={(v) => `$${v}`}\n                    variant='donut'\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie-chart/pie-chart-donut-label-demo": {
    "component": "@/components/docs/charts/pie-chart/pie-chart-donut-label-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { Card, PieChart } from '@/components/ui'\n\nexport default function PieChartDonutLabelDeviceDemo() {\n    const data = useMemo(\n        () => [\n            { name: 'Mobile', amount: 640 },\n            { name: 'Desktop', amount: 480 },\n            { name: 'Tablet', amount: 160 },\n            { name: 'Other', amount: 40 }\n        ],\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='text-center'>\n                <Card.Title>Device usage</Card.Title>\n                <Card.Description>Breakdown of users by device type.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <PieChart\n                    className='mx-auto h-56'\n                    config={{\n                        Mobile: { label: 'Mobile' },\n                        Desktop: { label: 'Desktop' },\n                        Tablet: { label: 'Tablet' },\n                        Other: { label: 'Other' }\n                    }}\n                    data={data}\n                    dataKey='amount'\n                    nameKey='name'\n                    showLabel\n                    valueFormatter={(v) => `${v} users`}\n                    variant='donut'\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie-chart/pie-chart-interactive-demo": {
    "component": "@/components/docs/charts/pie-chart/pie-chart-interactive-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { useMemo, useState } from 'react'\nimport { Card, PieChart, Toggle } from '@/components/ui'\n\nexport default function PieChartAudienceSegmentDemo() {\n    const data = useMemo(\n        () => [\n            { name: 'Unique visitors', code: 'UV', value: 2400 },\n            { name: 'Page views', code: 'PV', value: 5600 },\n            { name: 'Bounce rate', code: 'BR', value: 700 },\n            { name: 'Conversion rate', code: 'CR', value: 480 }\n        ],\n        []\n    )\n\n    const defaultCode = data[0]?.code\n    const [selected, setSelected] = useState<Set<Key>>(new Set(defaultCode ? [defaultCode] : []))\n    const selectedCode = [...selected][0] as string\n\n    return (\n        <Card>\n            <Card.Header className='text-center'>\n                <Card.Title>Audience insights</Card.Title>\n                <Card.Description>Engagement metrics by type</Card.Description>\n                <Card.Action>\n                    <Toggle.Group\n                        onSelectionChange={setSelected}\n                        selectedKeys={selected}\n                        selectionMode='single'\n                        size='sm'\n                        variant='outline'\n                    >\n                        {data.map((d) => (\n                            <Toggle className='rounded-lg' id={d.code} key={d.code}>\n                                {d.code}\n                            </Toggle>\n                        ))}\n                    </Toggle.Group>\n                </Card.Action>\n            </Card.Header>\n            <Card.Content>\n                <PieChart\n                    className='mx-auto h-64'\n                    config={{\n                        UV: { label: 'UV' },\n                        PV: { label: 'PV' },\n                        BR: { label: 'BR' },\n                        CR: { label: 'CR' }\n                    }}\n                    data={data}\n                    dataKey='value'\n                    nameKey='name'\n                    pieProps={{\n                        innerRadius: '50%',\n                        outerRadius: (dp: { code: string }) => (dp.code === selectedCode ? 110 : 90)\n                    }}\n                    showLabel\n                    valueFormatter={(v) => `${v.toLocaleString()} units`}\n                    variant='donut'\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area-chart/area-chart-demo": {
    "component": "@/components/docs/charts/area-chart/area-chart-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { AreaChart, Card } from '@/components/ui'\n\ntype EngagementPoint = {\n    day: string\n    likes: number\n    comments: number\n    shares: number\n}\n\nexport default function AreaChartDemo() {\n    const engagementData: EngagementPoint[] = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>\n                    Tracks likes, comments, and shares during the most recent 7-day period.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <AreaChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={engagementData}\n                    dataKey='day'\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area-chart/area-chart-custom-colors-demo": {
    "component": "@/components/docs/charts/area-chart/area-chart-custom-colors-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { AreaChart, Card } from '@/components/ui'\n\ntype EngagementPoint = {\n    day: string\n    likes: number\n    comments: number\n    shares: number\n}\n\nexport default function AreaChartCustomColorsDemo() {\n    const engagementData: EngagementPoint[] = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>\n                    Tracks likes, comments, and shares during the most recent 7-day period.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <AreaChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes', color: 'var(--color-pink-500)' },\n                        comments: { label: 'Comments', color: 'var(--color-blue-500)' },\n                        shares: { label: 'Shares', color: 'var(--color-emerald-500)' }\n                    }}\n                    data={engagementData}\n                    dataKey='day'\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area-chart/area-chart-custom-legend-demo": {
    "component": "@/components/docs/charts/area-chart/area-chart-custom-legend-demo",
    "raw": "'use client'\n\nimport type { LegendPayload } from 'recharts'\nimport { IconHeartFilled, IconMessageFilled, IconUpload } from '@tabler/icons-react'\nimport { useMemo } from 'react'\nimport { AreaChart, Card, CardFooter } from '@/components/ui'\n\nfunction CustomLegend({ payload }: { payload?: ReadonlyArray<LegendPayload> }) {\n    const icons: Record<string, React.ReactNode> = {\n        likes: <IconHeartFilled />,\n        comments: <IconMessageFilled />,\n        shares: <IconUpload />\n    }\n\n    return (\n        <CardFooter className='flex justify-center gap-4 pt-6 text-sm'>\n            {payload?.map((item) => {\n                const key = item.dataKey?.toString() ?? ''\n                return (\n                    <div className='flex items-center gap-2' key={key}>\n                        <span style={{ color: item.color }}>{icons[key]}</span>\n                        <span>{item.value}</span>\n                    </div>\n                )\n            })}\n        </CardFooter>\n    )\n}\n\nexport default function AreaChartCustomLegendDemo() {\n    const data = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>Likes, comments, and shares for the recent week.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <AreaChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={data}\n                    dataKey='day'\n                    legend={<CustomLegend />}\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area-chart/area-chart-custom-tooltip-demo": {
    "component": "@/components/docs/charts/area-chart/area-chart-custom-tooltip-demo",
    "raw": "'use client'\n\nimport type { TooltipProps as RechartsTooltipProps } from 'recharts'\nimport type { NameType, ValueType } from 'recharts/types/component/DefaultTooltipContent'\nimport { IconHeartFilled, IconMessageFilled, IconUpload } from '@tabler/icons-react'\nimport { useMemo } from 'react'\nimport { AreaChart, Card } from '@/components/ui'\n\ninterface CustomTooltipProps extends Partial<RechartsTooltipProps<ValueType, NameType>> {\n    active?: boolean\n    payload?: {\n        name?: string\n        value?: number\n        dataKey?: string\n        color?: string\n    }[]\n    label?: string\n}\n\nfunction CustomTooltip({ active, payload, label }: CustomTooltipProps) {\n    if (!active || !payload?.length) return null\n\n    return (\n        <div className='inset-ring inset-ring-fg/20 rounded-2xl bg-bg/10 p-3 text-xs backdrop-blur-2xl'>\n            <div className='mb-2 font-medium text-muted-fg'>{label}</div>\n            <div className='space-y-1'>\n                {payload.map((entry) => (\n                    <div className='flex items-center justify-between gap-3' key={entry.dataKey}>\n                        <div className='flex items-center gap-2 text-muted-fg capitalize'>\n                            {entry.dataKey === 'likes' && <IconHeartFilled style={{ color: entry.color }} />}\n                            {entry.dataKey === 'comments' && <IconMessageFilled style={{ color: entry.color }} />}\n                            {entry.dataKey === 'shares' && <IconUpload style={{ color: entry.color }} />}\n                            <span>{entry.name}</span>\n                        </div>\n                        <span className='font-mono text-fg tabular-nums'>{entry.value}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default function AreaChartCustomTooltipDemo() {\n    const data = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>Likes, comments, and shares for the recent week.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <AreaChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={data}\n                    dataKey='day'\n                    tooltip={<CustomTooltip />}\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area-chart/area-chart-stacked-demo": {
    "component": "@/components/docs/charts/area-chart/area-chart-stacked-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { AreaChart, Card } from '@/components/ui'\n\nexport default function AreaChartStackedDemo() {\n    const data = useMemo(\n        () =>\n            Array.from({ length: 7 }, (_, i) => ({\n                day: `Day ${i + 1}`,\n                likes: Math.floor(100 + Math.random() * 300),\n                comments: Math.floor(20 + Math.random() * 80),\n                shares: Math.floor(10 + Math.random() * 50)\n            })),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement last 7d</Card.Title>\n                <Card.Description>\n                    Tracks likes, comments, and shares during the most recent 7-day period.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <AreaChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={data}\n                    dataKey='day'\n                    lineType='basis'\n                    type='stacked'\n                    xAxisProps={{ interval: 0 }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area-chart/area-chart-custom-format-demo": {
    "component": "@/components/docs/charts/area-chart/area-chart-custom-format-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\nimport { AreaChart, Card } from '@/components/ui'\n\nexport default function AreaChartCustomFormatDemo() {\n    const data = useMemo(() => {\n        return Array.from({ length: 12 }, (_, i) => {\n            const month = new Date(0, i).toLocaleString('en-US', { month: 'short' })\n            const revenue = Math.floor(4000 + Math.random() * 1500)\n            const expenses = Math.floor(2000 + Math.random() * 1000)\n            return { month, revenue, expenses, net: revenue - expenses }\n        })\n    }, [])\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Net revenue by month</Card.Title>\n                <Card.Description>Revenue minus expenses to show monthly profitability.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <AreaChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        revenue: { label: 'Revenue' },\n                        expenses: { label: 'Expenses' },\n                        net: { label: 'Net' }\n                    }}\n                    data={data}\n                    dataKey='month'\n                    lineType='monotone'\n                    tooltipProps={{\n                        formatter: (value: number, label: string) => (\n                            <span className='flex w-full justify-between gap-x-4 font-mono'>\n                                <span className='flex-1'>{label}</span>\n                                <span>\n                                    {' '}\n                                    {new Intl.NumberFormat('en-US', {\n                                        notation: 'compact',\n                                        compactDisplay: 'short'\n                                    }).format(value)}\n                                </span>\n                            </span>\n                        )\n                    }}\n                    type='stacked'\n                    valueFormatter={(value: number) =>\n                        new Intl.NumberFormat('en-US', {\n                            notation: 'compact',\n                            compactDisplay: 'short'\n                        }).format(value)\n                    }\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area-chart/area-chart-controlled-demo": {
    "component": "@/components/docs/charts/area-chart/area-chart-controlled-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { useMemo, useState } from 'react'\nimport { AreaChart, Card, Toggle } from '@/components/ui'\n\nexport default function AreaChartControlledDemo() {\n    const [selected, setSelected] = useState<Set<Key>>(new Set(['7d']))\n    const selectedKey = Array.from(selected)[0] as string | undefined\n\n    const engagementData = useMemo(() => {\n        if (selectedKey === '1m') {\n            return Array.from({ length: 4 }, (_, i) => ({\n                label: `Week ${i + 1}`,\n                likes: Math.floor(400 + Math.random() * 300),\n                comments: Math.floor(100 + Math.random() * 100),\n                shares: Math.floor(50 + Math.random() * 50)\n            }))\n        }\n\n        if (selectedKey === '2w') {\n            return Array.from({ length: 2 }, (_, i) => ({\n                label: `Week ${i + 1}`,\n                likes: Math.floor(800 + Math.random() * 400),\n                comments: Math.floor(200 + Math.random() * 150),\n                shares: Math.floor(100 + Math.random() * 80)\n            }))\n        }\n\n        const lengthMap: Record<string, number> = { '3d': 3, '7d': 7 }\n        const length = lengthMap[selectedKey ?? '7d'] ?? 7\n\n        return Array.from({ length }, (_, i) => ({\n            label: `Day ${i + 1}`,\n            likes: Math.floor(100 + Math.random() * 300),\n            comments: Math.floor(20 + Math.random() * 80),\n            shares: Math.floor(10 + Math.random() * 50)\n        }))\n    }, [selectedKey])\n\n    const showAllTicks = selectedKey === '3d' || selectedKey === '7d'\n\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Engagement</Card.Title>\n                <Card.Description>Likes, comments, and shares over a dynamic time range.</Card.Description>\n                <Card.Action>\n                    <Toggle.Group onSelectionChange={setSelected} selectedKeys={selected} size='sm' variant='outline'>\n                        <Toggle id='3d'>3d</Toggle>\n                        <Toggle id='7d'>7d</Toggle>\n                        <Toggle id='2w'>2w</Toggle>\n                        <Toggle id='1m'>1m</Toggle>\n                    </Toggle.Group>\n                </Card.Action>\n            </Card.Header>\n            <Card.Content>\n                <AreaChart\n                    className='aspect-video h-56 min-h-[224px] sm:h-72 sm:min-h-[288px]'\n                    config={{\n                        likes: { label: 'Likes' },\n                        comments: { label: 'Comments' },\n                        shares: { label: 'Shares' }\n                    }}\n                    data={engagementData}\n                    dataKey='label'\n                    xAxisProps={{ interval: showAllTicks ? 0 : undefined }}\n                />\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "navigation/link/link-disabled-demo": {
    "component": "@/components/docs/navigation/link/link-disabled-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDisabledDemo() {\n    return (\n        <Link href='#' isDisabled>\n            Link\n        </Link>\n    )\n}\n"
  },
  "navigation/link/link-button-demo": {
    "component": "@/components/docs/navigation/link/link-button-demo",
    "raw": "'use client'\n\nimport { buttonStyle, Link } from '@/components/ui'\n\nexport default function LinkButtonDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Link className={buttonStyle()} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyle({ variant: 'secondary' })} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyle({ variant: 'destructive' })} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyle({ variant: 'outline' })} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyle({ variant: 'ghost' })} href='#'>\n                Link\n            </Link>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-demo": {
    "component": "@/components/docs/navigation/link/link-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDemo() {\n    return <Link href='#'>Link</Link>\n}\n"
  },
  "navigation/tabs/tabs-keyboard-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-keyboard-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\nimport { Tabs } from '@/components/ui'\n\nconst withArrowItems = [\n    { id: 1, title: 'Use', content: 'This is the first content' },\n    { id: 2, title: 'Left or Right Arrow', content: 'This is the second content' },\n    { id: 3, title: 'To Switch', content: 'This is the third content' },\n    { id: 4, title: 'The Tabs', content: 'This is the fourth content' }\n]\nconst manualItems = [\n    { id: 1, title: 'Use', content: 'This is the first content' },\n    { id: 2, title: 'Space or Enter', content: 'This is the second content' },\n    { id: 3, title: 'To Switch', content: 'This is the third content' },\n    { id: 4, title: 'The Tabs', content: 'This is the fourth content' }\n]\n\nexport default function TabsKeyboardDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tabs aria-label='Project Management'>\n                <Tabs.List items={withArrowItems}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={withArrowItems}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n            <Tabs aria-label='Project Management' keyboardActivation='manual'>\n                <Tabs.List items={manualItems}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={manualItems}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n        </div>\n    )\n}\n"
  },
  "navigation/tabs/tabs-collections-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-collections-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsCollectionsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n            <Collection items={items}>{(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}</Collection>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-disabled-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-disabled-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDisabledDemo() {\n    return (\n        <Tabs aria-label='Services' disabledKeys={['c', 'a']}>\n            <Tabs.List>\n                <Tabs.Label id='o'>Overview</Tabs.Label>\n                <Tabs.Label id='c'>Contact</Tabs.Label>\n                <Tabs.Label id='a'>About Us</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='o'>\n                Welcome to our service! Here, you’ll find a brief overview of what we offer, our mission, and how we\n                strive to provide value to our customers.\n            </Tabs.Content>\n            <Tabs.Content id='c'>\n                Get in touch with us through our contact page. We are here to help you with any inquiries, support\n                requests, or feedback you may have.\n            </Tabs.Content>\n            <Tabs.Content id='a'>\n                Learn more about our company, our history, and the team behind our success. We are dedicated to\n                delivering the best service to our customers.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-link-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-link-demo",
    "raw": "'use client'\n\nimport { IconBlocks, IconBook, IconColorSwatch, IconPalette } from '@tabler/icons-react'\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { url: '/', label: 'Home' },\n    { url: 'https://hq-ui.vercel.app/docs', label: 'Components', icon: IconBook },\n    { url: 'https://hq-ui.vercel.app/blocks', label: 'Blocks', icon: IconBlocks },\n    { url: 'https://hq-ui.vercel.app/colors', label: 'Colors', icon: IconPalette },\n    { url: 'https://hq-ui.vercel.app/themes', label: 'Themes', icon: IconColorSwatch }\n]\n\nexport default function TabsLinkDemo() {\n    return (\n        <Tabs aria-label='Navbar'>\n            <Tabs.List items={items}>\n                {(item) => (\n                    <Tabs.Label href={item.url} id={item.label}>\n                        {item.icon && <item.icon />}\n                        {item.label}\n                    </Tabs.Label>\n                )}\n            </Tabs.List>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-icons-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-icons-demo",
    "raw": "'use client'\n\nimport { IconBinoculars, IconCurrencyDollar, IconGift, IconMessageHeart } from '@tabler/icons-react'\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsIconsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List>\n                <Tabs.Label id='1'>\n                    <IconBinoculars />\n                    Overview\n                </Tabs.Label>\n                <Tabs.Label id='2'>\n                    <IconGift />\n                    Features\n                </Tabs.Label>\n                <Tabs.Label id='3'>\n                    <IconCurrencyDollar />\n                    Pricing\n                </Tabs.Label>\n                <Tabs.Label id='4'>\n                    <IconMessageHeart />\n                    Reviews\n                </Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='1'>This is the overview tab content.</Tabs.Content>\n            <Tabs.Content id='2'>Details about the features are listed here.</Tabs.Content>\n            <Tabs.Content id='3'>Find the pricing information on this tab.</Tabs.Content>\n            <Tabs.Content id='4'>Read user reviews and ratings here.</Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-controlled-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Collection, type Key } from 'react-aria-components'\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsControlledDemo() {\n    const [selected, setSelected] = useState<Key>(1)\n    return (\n        <div className='space-y-6'>\n            <Tabs aria-label='Project Management' onSelectionChange={setSelected} selectedKey={selected}>\n                <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={items}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "navigation/tabs/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsOrientationDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tabs aria-label='Project Management' orientation='vertical'>\n                <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={items}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n        </div>\n    )\n}\n"
  },
  "navigation/tabs/tabs-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List>\n                <Tabs.Label id='1'>Overview</Tabs.Label>\n                <Tabs.Label id='2'>Features</Tabs.Label>\n                <Tabs.Label id='3'>Pricing</Tabs.Label>\n                <Tabs.Label id='4'>Reviews</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='1'>This is the overview tab content.</Tabs.Content>\n            <Tabs.Content id='2'>Details about the features are listed here.</Tabs.Content>\n            <Tabs.Content id='3'>Find the pricing information on this tab.</Tabs.Content>\n            <Tabs.Content id='4'>Read user reviews and ratings here.</Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-collections-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-collections-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nconst urls = [\n    { id: 1, label: 'Home', href: '#' },\n    { id: 2, label: 'Docs', href: '#' },\n    { id: 3, label: 'Components' }\n]\n\nexport default function BreadcrumbsCollectionsDemo() {\n    return (\n        <Breadcrumbs items={urls}>\n            {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-menu-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-menu-demo",
    "raw": "'use client'\n\nimport { IconChevronDown } from '@tabler/icons-react'\nimport { Breadcrumbs, Menu } from '@/components/ui'\n\nexport default function BreadcrumbsMenuDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item>\n                <Menu>\n                    <Menu.Trigger className='inline-flex items-center'>\n                        Docs\n                        <IconChevronDown className='ml-1' />\n                    </Menu.Trigger>\n                    <Menu.Content>\n                        <Menu.Item href='/blocks'>Blocks</Menu.Item>\n                        <Menu.Item href='/icons'>Icons</Menu.Item>\n                        <Menu.Item href='/colors'>Colors</Menu.Item>\n                        <Menu.Item href='/themes'>Themes</Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item>Components</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-url-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-url-demo",
    "raw": "'use client'\n\nimport { usePathname } from 'next/navigation'\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsUrlDemo() {\n    const pathname = usePathname()\n    const urls = pathname\n        .split('/')\n        .filter((url) => url !== '')\n        .map((url, index) => {\n            return {\n                id: index,\n                label: url,\n                href: `/${url}`\n            }\n        })\n    return (\n        <Breadcrumbs items={urls}>\n            {(item) => (\n                <Breadcrumbs.Item className='capitalize' href={item.href}>\n                    {item.label}\n                </Breadcrumbs.Item>\n            )}\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-separator-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-separator-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nconst urls = [\n    { id: 1, label: 'Home', href: '#' },\n    { id: 2, label: 'Docs', href: '#' },\n    { id: 3, label: 'Components' }\n]\n\nexport default function BreadcrumbsSeparatorDemo() {\n    return (\n        <div className='space-y-4'>\n            <Breadcrumbs items={urls} separator='chevron'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n            <Breadcrumbs items={urls} separator='slash'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n            <Breadcrumbs items={urls} separator='dash'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n            <Breadcrumbs items={urls} separator='dot'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n        </div>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-icon-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-icon-demo",
    "raw": "'use client'\n\nimport { IconBook, IconBox, IconHome } from '@tabler/icons-react'\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsIconDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>\n                <IconHome />\n                Home\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>\n                <IconBook />\n                Docs\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item>\n                <IconBox />\n                Components\n            </Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-current-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-current-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsCurrentDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Docs</Breadcrumbs.Item>\n            <Breadcrumbs.Item className='data-current:text-blue-500'>Components</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Docs</Breadcrumbs.Item>\n            <Breadcrumbs.Item>Components</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/pagination/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-dynamic-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nconst pages = [\n    { page: 1, href: '#', current: false },\n    { page: 2, href: '#', current: false },\n    { page: 3, href: '#', current: true },\n    { page: 4, href: '#', current: false },\n    { page: 5, href: '#', current: false },\n    { page: 6, href: '#', current: false },\n    { page: 7, href: '#', current: false }\n]\n\nexport default function PaginationDynamicDemo() {\n    return (\n        <Pagination>\n            <Pagination.Item href='#' slot='first' />\n            <Pagination.Item href='#' slot='previous' />\n            <Pagination.Label className='lg:hidden' current={3} total={pages.length} />\n            <Pagination.Pages className='hidden lg:flex' items={pages}>\n                {(item) => (\n                    <Pagination.Item href={item.href} id={item.page} isCurrent={item.current}>\n                        {item.page}\n                    </Pagination.Item>\n                )}\n            </Pagination.Pages>\n            <Pagination.Item href='#' slot='next' />\n            <Pagination.Item href='#' slot='last' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-simple-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-simple-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nexport default function PaginationSimpleDemo() {\n    return (\n        <Pagination>\n            <Pagination.Item href='#' slot='first' />\n            <Pagination.Item href='#' slot='previous' />\n            <Pagination.Label current={2} total={10} />\n            <Pagination.Item href='#' slot='next' />\n            <Pagination.Item href='#' slot='last' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nexport default function PaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.Item href='#first' slot='first' />\n            <Pagination.Item href='#previous' slot='previous' />\n            <Pagination.Item href='#1'>1</Pagination.Item>\n            <Pagination.Item href='#2' isCurrent>\n                2\n            </Pagination.Item>\n            <Pagination.Item href='#3'>3</Pagination.Item>\n            <Pagination.Item slot='ellipsis' />\n            <Pagination.Item href='#6'>6</Pagination.Item>\n            <Pagination.Item href='#7'>7</Pagination.Item>\n            <Pagination.Item href='#next' slot='next' />\n            <Pagination.Item href='#last' slot='last' />\n        </Pagination>\n    )\n}\n"
  },
  "buttons/button/button-size-demo": {
    "component": "@/components/docs/buttons/button/button-size-demo",
    "raw": "import { Button } from '@/components/ui'\n\nexport default function ButtonSizeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button size='xs'>Extra Small</Button>\n            <Button size='sm'>Small</Button>\n            <Button>Medium</Button>\n            <Button size='lg'>Large</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-link-demo": {
    "component": "@/components/docs/buttons/button/button-link-demo",
    "raw": "'use client'\n\nimport { buttonStyle, Link } from '@/components/ui'\n\nexport default function ButtonLinkDemo() {\n    return (\n        <Link className={buttonStyle({ variant: 'destructive' })} href='#'>\n            Link\n        </Link>\n    )\n}\n"
  },
  "buttons/button/button-icon-demo": {
    "component": "@/components/docs/buttons/button/button-icon-demo",
    "raw": "import { IconBrandGithub } from '@tabler/icons-react'\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button size='xs'>\n                <IconBrandGithub />\n                Github\n            </Button>\n            <Button size='sm'>\n                <IconBrandGithub />\n                Github\n            </Button>\n            <Button>\n                <IconBrandGithub />\n                Github\n            </Button>\n            <Button size='lg'>\n                <IconBrandGithub />\n                Github\n            </Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-disabled-demo": {
    "component": "@/components/docs/buttons/button/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonDisabledDemo() {\n    return <Button isDisabled>Label</Button>\n}\n"
  },
  "buttons/button/button-loader-demo": {
    "component": "@/components/docs/buttons/button/button-loader-demo",
    "raw": "'use client'\n\nimport { IconCircleCheck, IconSend, IconTrash } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Button } from '@/components/ui'\n\nexport default function ButtonLoaderDemo() {\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const onPress = () => {\n        setLoading('loading')\n        setTimeout(() => setLoading('success'), 3000)\n        setTimeout(() => setLoading('idle'), 6000)\n    }\n\n    return (\n        <div className='flex items-center justify-center gap-2'>\n            <Button isPending={loading === 'loading'} onPress={onPress}>\n                {loading === 'success' ? <IconCircleCheck /> : <IconSend />}\n                {loading === 'loading' ? 'Sending...' : loading === 'success' ? 'Sent' : 'Send'}\n            </Button>\n            <Button\n                isPending={loading === 'loading'}\n                onPress={onPress}\n                variant={loading === 'success' ? 'default' : 'destructive'}\n            >\n                {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n            </Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-icon-only-demo": {
    "component": "@/components/docs/buttons/button/button-icon-only-demo",
    "raw": "'use client'\n\nimport { IconBrandNextjs } from '@tabler/icons-react'\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconOnlyDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button icon size='xs'>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon size='sm'>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon size='lg'>\n                <IconBrandNextjs />\n            </Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-basic-demo": {
    "component": "@/components/docs/buttons/button/button-basic-demo",
    "raw": "import { Button } from '@/components/ui'\n\nexport default function ButtonBasicDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button variant='default'>Primary</Button>\n            <Button variant='secondary'>Secondary</Button>\n            <Button variant='destructive'>Destructive</Button>\n            <Button variant='outline'>Outline</Button>\n            <Button variant='ghost'>Ghost</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { IconFolder } from '@tabler/icons-react'\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerFolderDemo() {\n    return (\n        <FileTrigger acceptDirectory>\n            <IconFolder />\n            Upload\n        </FileTrigger>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { IconCamera } from '@tabler/icons-react'\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerCameraDemo() {\n    return (\n        <FileTrigger>\n            <IconCamera />\n            Open a camera\n        </FileTrigger>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { IconUpload } from '@tabler/icons-react'\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerMultipleDemo() {\n    return (\n        <FileTrigger allowsMultiple>\n            <IconUpload />\n            Upload\n        </FileTrigger>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-avatar-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-avatar-demo",
    "raw": "'use client'\n\nimport type { DropEvent } from '@react-types/shared'\nimport { useState } from 'react'\nimport { isFileDropItem } from 'react-aria-components'\nimport { Avatar, DropZone, FileTrigger } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport default function FileTriggerAvatarDemo() {\n    const [droppedImage, setDroppedImage] = useState<string | null>(null)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    const onSelectHandler = async (e: FileList | null) => {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n\n    return (\n        <div className='flex items-center gap-2'>\n            <DropZone\n                className={cn('size-10 overflow-hidden rounded-full p-0')}\n                getDropOperation={(types) => (types.has('image/jpeg') || types.has('image/png') ? 'copy' : 'cancel')}\n                onDrop={onDropHandler}\n            >\n                <Avatar size='lg' src={droppedImage ?? ''} />\n                <input name='image' type='hidden' value={droppedImage ?? ''} />\n            </DropZone>\n            <FileTrigger acceptedFileTypes={['image/png', 'image/jpeg']} onSelect={onSelectHandler} size='sm'>\n                Upload avatar\n            </FileTrigger>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-variant-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-variant-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <FileTrigger variant='default'>Primary</FileTrigger>\n            <FileTrigger variant='secondary'>Secondary</FileTrigger>\n            <FileTrigger variant='destructive'>Destructive</FileTrigger>\n            <FileTrigger variant='outline'>Outline</FileTrigger>\n            <FileTrigger variant='ghost'>Ghost</FileTrigger>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-controlled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = useState<string[] | null>(null)\n    return (\n        <div className='flex flex-col space-y-6'>\n            <FileTrigger\n                allowsMultiple\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            >\n                Upload\n            </FileTrigger>\n            {file && <code>{JSON.stringify({ file }, null, 2)}</code>}\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    return <FileTrigger>Upload</FileTrigger>\n}\n"
  },
  "buttons/file-trigger/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    return <FileTrigger isDisabled>Upload</FileTrigger>\n}\n"
  },
  "buttons/toggle/toggle-size-icon-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-size-icon-demo",
    "raw": "'use client'\n\nimport { IconEye, IconEyeClosed } from '@tabler/icons-react'\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleSizeDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <Toggle icon size='xs'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon size='sm'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon size='md'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon size='lg'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-size-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-size-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleSizeDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <Toggle size='xs'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle size='sm'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle size='md'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle size='lg'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-controlled-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { IconBold, IconItalic, IconUnderline } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupControlledDemo() {\n    const [selected, setSelected] = useState(new Set<Key>(['bold']))\n\n    return (\n        <div className='flex flex-col items-center space-y-6'>\n            <Toggle.Group icon onSelectionChange={setSelected} selectedKeys={selected} selectionMode='multiple'>\n                <Toggle id='bold'>\n                    <IconBold />\n                </Toggle>\n                <Toggle id='italic'>\n                    <IconItalic />\n                </Toggle>\n                <Toggle id='underline'>\n                    <IconUnderline />\n                </Toggle>\n            </Toggle.Group>\n            <code>{JSON.stringify([...selected], null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-disabled-demo",
    "raw": "'use client'\n\nimport { IconPower } from '@tabler/icons-react'\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDisabledDemo() {\n    return (\n        <Toggle icon isDisabled>\n            <IconPower />\n        </Toggle>\n    )\n}\n"
  },
  "buttons/toggle/toggle-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-variant-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleVariantDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Toggle variant='default'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle variant='outline'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-orientation-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-orientation-demo",
    "raw": "import { IconCloud, IconCloudOff, IconLock, IconLockOpen, IconMoon, IconSun } from '@tabler/icons-react'\nimport { Toggle } from '@/components/ui'\n\nexport default function App() {\n    return (\n        <div>\n            <Toggle.Group orientation='vertical'>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconMoon /> : <IconSun />}\n                            {isSelected ? 'Dark' : 'Light'} Mode\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconLock /> : <IconLockOpen />}\n                            Secure Access {isSelected ? 'On' : 'Off'}\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconCloud /> : <IconCloudOff />}\n                            Always Sync\n                        </>\n                    )}\n                </Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-variant-demo",
    "raw": "'use client'\n\nimport { IconCloud, IconCloudOff, IconLock, IconLockOpen, IconMoon, IconSun } from '@tabler/icons-react'\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupVariantDemo() {\n    return (\n        <div className='flex flex-col space-y-6'>\n            <Toggle.Group defaultSelectedKeys={['left']} selectionMode='multiple' variant='default'>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconMoon /> : <IconSun />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconLock /> : <IconLockOpen />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconCloud /> : <IconCloudOff />)}</Toggle>\n            </Toggle.Group>\n            <Toggle.Group defaultSelectedKeys={['center']} selectionMode='multiple' variant='outline'>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconMoon /> : <IconSun />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconLock /> : <IconLockOpen />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconCloud /> : <IconCloudOff />)}</Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-demo",
    "raw": "'use client'\n\nimport { IconHeading, IconPilcrow } from '@tabler/icons-react'\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDemo() {\n    return (\n        <Toggle.Group>\n            <Toggle>\n                <IconPilcrow />\n                Paragraph\n            </Toggle>\n            <Toggle>\n                <IconHeading />\n                Heading\n            </Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-controlled-demo",
    "raw": "'use client'\n\nimport { IconLock, IconLockOpen } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleControlledDemo() {\n    const [isSelected, setSelected] = useState(false)\n    return (\n        <div className='flex flex-col items-center space-y-6'>\n            <Toggle icon isSelected={isSelected} onChange={setSelected}>\n                {({ isSelected }) => <>{isSelected ? <IconLock /> : <IconLockOpen />}</>}\n            </Toggle>\n            <code>{JSON.stringify({ isSelected }, null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-disabled-demo",
    "raw": "'use client'\n\nimport { IconAlignCenter, IconAlignLeft, IconAlignRight } from '@tabler/icons-react'\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDisabledDemo() {\n    return (\n        <Toggle.Group icon isDisabled>\n            <Toggle id='left'>\n                <IconAlignLeft />\n            </Toggle>\n            <Toggle id='center'>\n                <IconAlignCenter />\n            </Toggle>\n            <Toggle id='right'>\n                <IconAlignRight />\n            </Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDemo() {\n    return <Toggle>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n}\n"
  },
  "buttons/toggle/toggle-group-selection-mode-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-selection-mode-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustified,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconItalic,\n    IconStrikethrough,\n    IconUnderline\n} from '@tabler/icons-react'\nimport { Description, Toggle } from '@/components/ui'\n\nexport default function ToggleGroupSelectionModeDemo() {\n    return (\n        <div className='flex flex-col gap-2'>\n            <Description>Single</Description>\n            <Toggle.Group defaultSelectedKeys={['center']} selectionMode='single'>\n                <Toggle id='left'>\n                    <IconAlignLeft />\n                </Toggle>\n                <Toggle id='center'>\n                    <IconAlignCenter />\n                </Toggle>\n                <Toggle id='right'>\n                    <IconAlignRight />\n                </Toggle>\n                <Toggle id='justify'>\n                    <IconAlignJustified />\n                </Toggle>\n            </Toggle.Group>\n            <Description>Multiple</Description>\n            <Toggle.Group defaultSelectedKeys={['bold']} selectionMode='multiple'>\n                <Toggle id='bold'>\n                    <IconBold />\n                </Toggle>\n                <Toggle id='italic'>\n                    <IconItalic />\n                </Toggle>\n                <Toggle id='underline'>\n                    <IconUnderline />\n                </Toggle>\n                <Toggle id='strike'>\n                    <IconStrikethrough />\n                </Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "forms/form/form-custom-validation-demo": {
    "component": "@/components/docs/forms/form/form-custom-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function FormCustomValidationDemo() {\n    return (\n        <Form className='space-y-4' onSubmit={() => {}}>\n            <TextField\n                errorMessage={({ validationDetails }) =>\n                    validationDetails.valueMissing ? 'Fill the email, Please! 🥲' : ''\n                }\n                isRequired\n                label='Email'\n                placeholder='Enter your email'\n                type='email'\n            />\n            <TextField\n                isRequired\n                label='Password'\n                placeholder='Enter your password'\n                type='password'\n                validate={(v) => (v.length < 8 ? 'Must be at least 8 characters' : null)}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/form/form-builtin-validation-demo": {
    "component": "@/components/docs/forms/form/form-builtin-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function FormBuiltinValidationDemo() {\n    return (\n        <Form className='space-y-4' onSubmit={() => {}}>\n            <TextField isRequired label='Name' placeholder='Enter your name' />\n            <TextField isRequired label='Email' placeholder='Enter your email' type='email' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/form/form-realtime-validation-demo": {
    "component": "@/components/docs/forms/form/form-realtime-validation-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Form, TextField } from '@/components/ui'\n\nexport default function FormRealtimeValidationDemo() {\n    const [password, setPassword] = useState('')\n    const errors = []\n    if (password.length < 8) {\n        errors.push('At least 8 characters')\n    }\n    if ((password.match(/[A-Z]/g) ?? []).length < 2) {\n        errors.push('At least 2 upper case letters')\n    }\n    if ((password.match(/[^a-z]/gi) ?? []).length < 2) {\n        errors.push('At least 2 symbols')\n    }\n\n    return (\n        <Form onSubmit={() => {}}>\n            <TextField\n                errorMessage={errors}\n                isInvalid={!!errors.length}\n                label='Password'\n                onChange={setPassword}\n                placeholder='Enter your password'\n                type='password'\n                value={password}\n            />\n        </Form>\n    )\n}\n"
  },
  "forms/otp/otp-separator-demo": {
    "component": "@/components/docs/forms/otp/otp-separator-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpSeparatorDemo() {\n    return (\n        <OTP maxLength={6}>\n            <OTP.Group>\n                <OTP.Slot index={0} />\n                <OTP.Slot index={1} />\n                <OTP.Slot index={2} />\n            </OTP.Group>\n            <OTP.Separator />\n            <OTP.Group>\n                <OTP.Slot index={3} />\n                <OTP.Slot index={4} />\n                <OTP.Slot index={5} />\n            </OTP.Group>\n        </OTP>\n    )\n}\n"
  },
  "forms/otp/otp-demo": {
    "component": "@/components/docs/forms/otp/otp-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpDemo() {\n    return (\n        <div>\n            <OTP maxLength={6}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot index={index} key={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n        </div>\n    )\n}\n"
  },
  "forms/otp/otp-controlled-demo": {
    "component": "@/components/docs/forms/otp/otp-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpControlledDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <div className='space-y-2'>\n            <OTP maxLength={6} onChange={setValue} value={value}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot index={index} key={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n\n            <div className='text-center text-sm'>\n                {value === '' ? 'Enter your one-time password.' : `You entered: ${value}`}\n            </div>\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-demo": {
    "component": "@/components/docs/forms/textarea/textarea-demo",
    "raw": "import { Textarea } from '@/components/ui'\n\nexport default function TextareaDemo() {\n    return (\n        <div className='flex flex-col gap-2 sm:flex-row'>\n            <Textarea label='Basic' />\n            <Textarea isReadOnly label='Readonly' />\n            <Textarea isInvalid label='Invalid' />\n            <Textarea isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea/textarea-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\nimport { Button, Form, Textarea } from '@/components/ui'\n\nexport default function TextareaValidationDemo() {\n    const [value, setValue] = useState('')\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <Textarea\n                isRequired\n                label='About'\n                onChange={setValue}\n                validate={(v) => (v.length < 10 ? 'Must be at least 10 characters' : null)}\n                value={value}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/textarea/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaControlledDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <div className='space-y-2'>\n            <Textarea label='About' onChange={setValue} value={value} />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-autosize-demo": {
    "component": "@/components/docs/forms/textarea/textarea-autosize-demo",
    "raw": "import { Textarea } from '@/components/ui'\n\nexport default function TextareaAutosizeDemo() {\n    return <Textarea autoSize className='min-w-xs' label='About' />\n}\n"
  },
  "forms/number-field/number-field-controlled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldControlledDemo() {\n    const [value, setValue] = useState<number>(100)\n    return (\n        <div className='space-y-2'>\n            <NumberField label='Size' onChange={setValue} value={value} />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/number-field/number-field-validation-demo": {
    "component": "@/components/docs/forms/number-field/number-field-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\nimport { Button, Form, NumberField } from '@/components/ui'\n\nexport default function NumberFieldValidationDemo() {\n    const [value, setValue] = useState<number>()\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <NumberField\n                isRequired\n                label='Size'\n                onChange={setValue}\n                validate={(v) => (v < 100 ? 'Value must be greater than 100' : null)}\n                value={value}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/number-field/number-field-demo": {
    "component": "@/components/docs/forms/number-field/number-field-demo",
    "raw": "import { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDemo() {\n    return (\n        <div className='flex flex-col gap-2 sm:flex-row'>\n            <NumberField label='Basic' />\n            <NumberField isReadOnly label='Readonly' />\n            <NumberField isInvalid label='Invalid' />\n            <NumberField isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-demo",
    "raw": "import { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDemo() {\n    return (\n        <div className='space-y-4'>\n            <CheckboxGroup label='Basic'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n            <CheckboxGroup isReadOnly label='Readonly'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n            <CheckboxGroup isInvalid label='Invalid'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n            <CheckboxGroup isDisabled label='Disabled'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-validation-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\nimport { Button, Checkbox, CheckboxGroup, Form } from '@/components/ui'\n\nexport default function CheckboxValidationDemo() {\n    const [value, setValue] = useState<string[]>([])\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <CheckboxGroup\n                description='Please read and agree before continuing'\n                isRequired\n                label='Agreement'\n                onChange={setValue}\n                validate={(v) => (!v.includes('terms-conditions') ? 'Terms and conditions must be accepted' : null)}\n                value={value}\n            >\n                <Checkbox isRequired value='terms-conditions'>\n                    Terms and conditions (required)\n                </Checkbox>\n                <Checkbox value='privacy-policy'>Privacy policy</Checkbox>\n                <Checkbox value='cookie-policy'>Cookie policy</Checkbox>\n            </CheckboxGroup>\n            <Button type='submit'>Save</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-item-description-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-item-description-demo",
    "raw": "import { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupItemDescriptionDemo() {\n    return (\n        <CheckboxGroup label='Email Settings'>\n            <Checkbox description='Receive our newsletter once per week' value='newsletter'>\n                Newsletter\n            </Checkbox>\n            <Checkbox description='The best deals and sales for members' value='deals'>\n                Deals\n            </Checkbox>\n            <Checkbox description='Notifications about your orders' value='notifications'>\n                Notifications\n            </Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-description-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-description-demo",
    "raw": "import { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDescriptionDemo() {\n    return (\n        <CheckboxGroup description='Please read and agree before continuing' label='Agreement'>\n            <Checkbox value='terms-conditions'>Terms and conditions</Checkbox>\n            <Checkbox value='privacy-policy'>Privacy policy</Checkbox>\n            <Checkbox value='cookie-policy'>Cookie policy</Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-controlled-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupControlledDemo() {\n    const [values, setValues] = useState<string[]>([])\n    return (\n        <div className='space-y-2'>\n            <CheckboxGroup label='Agreement' onChange={setValues} value={values}>\n                <Checkbox value='terms-conditions'>Terms and conditions</Checkbox>\n                <Checkbox value='privacy-policy'>Privacy policy</Checkbox>\n                <Checkbox value='cookie-policy'>Cookie policy</Checkbox>\n            </CheckboxGroup>\n            <code>selected: {JSON.stringify(values)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-description-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDescriptionDemo() {\n    return (\n        <RadioGroup description='Choose a plan that fits your needs and budget' label='Plan'>\n            <Radio value='bronze'>Bronze</Radio>\n            <Radio value='silver'>Silver</Radio>\n            <Radio value='gold'>Gold</Radio>\n            <Radio value='platinum'>Platinum</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-orientation-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-orientation-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupOrientationDemo() {\n    return (\n        <RadioGroup label='Plan' orientation='horizontal'>\n            <Radio value='bronze'>Bronze</Radio>\n            <Radio value='silver'>Silver</Radio>\n            <Radio value='gold'>Gold</Radio>\n            <Radio value='platinum'>Platinum</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-validation-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\nimport { Button, Form, Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = useState<string>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(selected)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <RadioGroup isRequired label='Plan' onChange={setSelected} value={selected}>\n                <Radio value='bronze'>Bronze</Radio>\n                <Radio value='silver'>Silver</Radio>\n                <Radio value='gold'>Gold</Radio>\n                <Radio value='platinum'>Platinum</Radio>\n            </RadioGroup>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = useState('')\n    return (\n        <div className='space-y-4'>\n            <RadioGroup label='Plan' onChange={setSelected} value={selected}>\n                <Radio value='bronze'>Bronze</Radio>\n                <Radio value='silver'>Silver</Radio>\n                <Radio value='gold'>Gold</Radio>\n                <Radio value='platinum'>Platinum</Radio>\n            </RadioGroup>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-item-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-item-description-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupChildrenDescriptionDemo() {\n    return (\n        <RadioGroup label='Plan'>\n            <Radio description='Weekly subscription' value='bronze'>\n                Bronze\n            </Radio>\n            <Radio description='Monthly subscription' value='silver'>\n                Silver\n            </Radio>\n            <Radio description='Yearly subscription' value='gold'>\n                Gold\n            </Radio>\n            <Radio description='Lifetime subscription' value='platinum'>\n                Platinum\n            </Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-basic-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-basic-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupBasicDemo() {\n    return (\n        <div className='space-y-4'>\n            <RadioGroup label='Basic'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n            <RadioGroup isReadOnly label='Readonly'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n            <RadioGroup isInvalid label='Invalid'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n            <RadioGroup isDisabled label='Disabled'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-description-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-description-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDescriptionDemo() {\n    return (\n        <Checkbox\n            description='I have read and agree to the terms and conditions'\n            label='I accept terms and conditions'\n        />\n    )\n}\n"
  },
  "forms/checkbox/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-demo",
    "raw": "import { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDemo() {\n    return (\n        <div className='space-y-2'>\n            <Checkbox>Basic</Checkbox>\n            <Checkbox isIndeterminate>Indeterminate</Checkbox>\n            <Checkbox isReadOnly>Readonly</Checkbox>\n            <Checkbox isInvalid>Invalid</Checkbox>\n            <Checkbox isDisabled>Disabled</Checkbox>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxControlledDemo() {\n    const [selected, setSelection] = useState(false)\n    return (\n        <div className='space-y-2'>\n            <Checkbox isSelected={selected} onChange={setSelection} value='updates'>\n                Accept terms and conditions\n            </Checkbox>\n            <code>{JSON.stringify({ selected })}</code>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-validation-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\nimport { Button, Checkbox, Form } from '@/components/ui'\n\nexport default function CheckboxValidationDemo() {\n    const [value, setValue] = useState<boolean>(false)\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <Checkbox isRequired isSelected={value} onChange={setValue}>\n                I accept terms and conditions\n            </Checkbox>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/search-field/search-field-demo": {
    "component": "@/components/docs/forms/search-field/search-field-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDemo() {\n    return (\n        <div className='flex flex-col gap-2 sm:flex-row'>\n            <SearchField label='Basic' />\n            <SearchField isPending label='Pending' />\n            <SearchField isReadOnly label='Readonly' />\n            <SearchField isInvalid label='Invalid' />\n            <SearchField isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "forms/search-field/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field/search-field-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\nimport { Button, Form, SearchField } from '@/components/ui'\n\nexport default function SearchFieldValidationDemo() {\n    const [value, setValue] = useState<string>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <SearchField\n                isRequired\n                label='Search for Products'\n                onChange={setValue}\n                validate={(v) => (v.length < 3 ? 'Must be at least 3 characters' : null)}\n                value={value}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/search-field/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldControlledDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <div className='space-y-2'>\n            <SearchField className='mb-2' onChange={setValue} value={value} />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field/text-field-prefix-suffix-demo",
    "raw": "import { IconBrandTiktok } from '@tabler/icons-react'\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldPrefixSuffixDemo() {\n    return (\n        <div className='space-y-2'>\n            <TextField label='Tiktok' suffix={<IconBrandTiktok />} />\n            <TextField label='Sites' prefix='https://' suffix='.com' />\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field/text-field-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function TextFieldValidationDemo() {\n    const [value, setValue] = useState<string>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <TextField\n                isRequired\n                label='Name'\n                onChange={setValue}\n                validate={(v) => (v.length < 3 ? 'Must be at least 3 characters' : null)}\n                value={value}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/text-field/text-field-suffix-button-demo": {
    "component": "@/components/docs/forms/text-field/text-field-suffix-button-demo",
    "raw": "'use client'\n\nimport { IconUserPlus } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Button, Modal, TextField } from '@/components/ui'\n\nexport default function TextFieldSuffixButtonDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    return (\n        <>\n            <Modal.Content isOpen={open} onOpenChange={() => setOpen(false)}>\n                <Modal.Header>\n                    <Modal.Title>New User</Modal.Title>\n                    <Modal.Description>Create a new user account</Modal.Description>\n                </Modal.Header>\n                <Modal.Body className='space-y-4'>\n                    <TextField label='Name' placeholder='Name' />\n                    <TextField label='Email' placeholder='Email' type='email' />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button slot='close'>Add</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <TextField\n                label='Name'\n                suffix={\n                    <Button aria-label='Add New User' icon onPress={() => setOpen(true)} variant='ghost'>\n                        <IconUserPlus />\n                    </Button>\n                }\n            />\n        </>\n    )\n}\n"
  },
  "forms/text-field/text-field-demo": {
    "component": "@/components/docs/forms/text-field/text-field-demo",
    "raw": "import { TextField } from '@/components/ui'\n\nexport default function TextFieldDemo() {\n    return (\n        <div className='flex flex-col gap-2 sm:flex-row'>\n            <TextField label='Basic' />\n            <TextField isPending label='Pending' />\n            <TextField isReadOnly label='Readonly' />\n            <TextField isInvalid label='Invalid' />\n            <TextField isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldControlledDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <div className='space-y-2'>\n            <TextField label='Name' onChange={setValue} value={value} />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-visibility-demo": {
    "component": "@/components/docs/forms/text-field/text-field-visibility-demo",
    "raw": "import { TextField } from '@/components/ui'\n\nexport default function TextFieldVisibilityDemo() {\n    return <TextField label='Password' type='password' />\n}\n"
  },
  "pickers/multi-select/multi-select-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-demo",
    "raw": "'use client'\n\nimport { MultiSelect } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function MultiSelectDemo() {\n    return (\n        <div className='grid gap-2 sm:grid-cols-3'>\n            <MultiSelect items={items} label='Default'>\n                {(item) => {\n                    return <MultiSelect.Item>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <MultiSelect isInvalid items={items} label='Invalid'>\n                {(item) => {\n                    return <MultiSelect.Item>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <MultiSelect isDisabled items={items} label='Disabled'>\n                {(item) => {\n                    return <MultiSelect.Item>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n        </div>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-validation-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-validation-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { type FormEvent, useState } from 'react'\nimport { Button, Form, MultiSelect } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function MultiSelectDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([]))\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(Array.from(selected))\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <MultiSelect\n                errorMessage={Array.from(selected).length < 2 ? 'Select at least 2 distros' : undefined}\n                items={items}\n                label='Linux Distro'\n                onSelectionChange={setSelected}\n                selectedKeys={selected}\n            >\n                {(item) => {\n                    return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-controlled-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-controlled-demo",
    "raw": "'use client'\n\nimport type { Selection } from 'react-aria-components'\nimport { useState } from 'react'\nimport { MultiSelect } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function MultiSelectDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([2, 4]))\n    return (\n        <div className='space-y-6'>\n            <MultiSelect items={items} label='Linux Distro' onSelectionChange={setSelected} selectedKeys={selected}>\n                {(item) => {\n                    return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <code>selected: {JSON.stringify([...selected])}</code>\n        </div>\n    )\n}\n"
  },
  "pickers/select/select-demo": {
    "component": "@/components/docs/pickers/select/select-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectDemo() {\n    return (\n        <div className='grid gap-2 sm:grid-cols-3'>\n            <Select items={items} label='Default'>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Select isInvalid items={items} label='Invalid'>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Select isDisabled items={items} label='Disabled'>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n        </div>\n    )\n}\n"
  },
  "pickers/select/select-disabled-demo": {
    "component": "@/components/docs/pickers/select/select-disabled-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', available: true },\n    { id: 2, name: 'Debian', available: true },\n    { id: 3, name: 'Fedora', available: false },\n    { id: 4, name: 'Arch', available: false },\n    { id: 5, name: 'CentOS', available: false },\n    { id: 6, name: 'Gentoo', available: true },\n    { id: 7, name: 'OpenSuse', available: false },\n    { id: 8, name: 'Redhat', available: false },\n    { id: 9, name: 'FreeBSD', available: false },\n    { id: 10, name: 'NetBSD', available: true }\n]\n\nexport default function SelectDisabledItemDemo() {\n    return (\n        <Select items={items} label='Linux Distro'>\n            {(item) => (\n                <Select.Item id={item.id} isDisabled={!item.available}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-collections-demo": {
    "component": "@/components/docs/pickers/select/select-collections-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectDemo() {\n    return (\n        <Select items={items} label='Linux Distro'>\n            {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-controlled-demo": {
    "component": "@/components/docs/pickers/select/select-controlled-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { useState } from 'react'\nimport { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectControlledDemo() {\n    const [selected, setSelected] = useState<Key | null>('')\n    return (\n        <div className='space-y-6'>\n            <Select items={items} label='Linux Distro' onSelectionChange={setSelected} selectedKey={selected}>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "pickers/select/select-section-demo": {
    "component": "@/components/docs/pickers/select/select-section-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function SelectSectionDemo() {\n    return (\n        <Select items={items} label='Linux Distro'>\n            {(item) => (\n                <Select.Section items={item.distros} title={item.name}>\n                    {(distro) => <Select.Item id={distro.id}>{distro.name}</Select.Item>}\n                </Select.Section>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-searchable-demo": {
    "component": "@/components/docs/pickers/select/select-searchable-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function AutocompleteDemo() {\n    return (\n        <Select items={items} label='Default' searchable>\n            {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-with-avatar-demo": {
    "component": "@/components/docs/pickers/select/select-with-avatar-demo",
    "raw": "import { Avatar, Select } from '@/components/ui'\n\nexport default function SelectAvatarDemo() {\n    return (\n        <Select items={users} label='User'>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/select/select-item-details-demo": {
    "component": "@/components/docs/pickers/select/select-item-details-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function SelectItemDetailsDemo() {\n    return (\n        <Select items={items} label='Javascript Frameworks'>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <Select.Details description={item.description} label={item.name} />\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-with-icon-demo": {
    "component": "@/components/docs/pickers/select/select-with-icon-demo",
    "raw": "import {\n    IconBrandArc,\n    IconBrandChrome,\n    IconBrandEdge,\n    IconBrandFirefox,\n    IconBrandOpera,\n    IconBrandSafari\n} from '@tabler/icons-react'\nimport { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Chrome', icon: IconBrandChrome },\n    { id: 2, name: 'Firefox', icon: IconBrandFirefox },\n    { id: 3, name: 'Opera', icon: IconBrandOpera },\n    { id: 4, name: 'Arc', icon: IconBrandArc },\n    { id: 5, name: 'Edge', icon: IconBrandEdge },\n    { id: 6, name: 'Safari', icon: IconBrandSafari }\n]\n\nexport default function SelectWithIconDemo() {\n    return (\n        <Select items={items} label='Linux Distro'>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <item.icon />\n                    <Select.Label>{item.name}</Select.Label>\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-validation-demo": {
    "component": "@/components/docs/pickers/select/select-validation-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { type FormEvent, useState } from 'react'\nimport { Button, Form, Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectValidationDemo() {\n    const [value, setValue] = useState<Key | null>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <Select isRequired items={items} label='Linux Distro' onSelectionChange={setValue} selectedKey={value}>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-demo",
    "raw": "import { ComboBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function ComboBoxDemo() {\n    return (\n        <div className='grid gap-2 sm:grid-cols-4'>\n            <ComboBox items={items} label='Default'>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <ComboBox isReadOnly items={items} label='Readonly'>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <ComboBox isInvalid items={items} label='Invalid'>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <ComboBox isDisabled items={items} label='Disabled'>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n        </div>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-validation-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-validation-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { type FormEvent, useState } from 'react'\nimport { Button, ComboBox, Form } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function ComboBoxValidationDemo() {\n    const [value, setValue] = useState<Key | null>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <ComboBox isRequired items={items} label='Linux Distro' onSelectionChange={setValue} selectedKey={value}>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-section-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-section-demo",
    "raw": "import { ComboBox } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function ComboBoxSectionDemo() {\n    return (\n        <ComboBox items={items} label='Linux Distro'>\n            {(item) => (\n                <ComboBox.Section items={item.distros} title={item.name}>\n                    {(distro) => <ComboBox.Item id={distro.id}>{distro.name}</ComboBox.Item>}\n                </ComboBox.Section>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-disabled-demo",
    "raw": "import { ComboBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', available: true },\n    { id: 2, name: 'Debian', available: true },\n    { id: 3, name: 'Fedora', available: false },\n    { id: 4, name: 'Arch', available: false },\n    { id: 5, name: 'CentOS', available: false },\n    { id: 6, name: 'Gentoo', available: true },\n    { id: 7, name: 'OpenSuse', available: false },\n    { id: 8, name: 'Redhat', available: false },\n    { id: 9, name: 'FreeBSD', available: false },\n    { id: 10, name: 'NetBSD', available: true }\n]\n\nexport default function ComboBoxDisabledDemo() {\n    return (\n        <ComboBox items={items} label='Linux Distro'>\n            {(item) => (\n                <ComboBox.Item id={item.id} isDisabled={!item.available}>\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-avatar-demo",
    "raw": "import { Avatar, ComboBox } from '@/components/ui'\n\nexport default function ComboBoxAvatarDemo() {\n    return (\n        <ComboBox isRequired items={users} label='Users' placeholder='Select a user'>\n            {(item) => (\n                <ComboBox.Item id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/combo-box/combo-box-async-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-async-demo",
    "raw": "'use client'\n\nimport { IconSearch } from '@tabler/icons-react'\nimport { useAsyncList } from 'react-stately'\nimport { ComboBox } from '@/components/ui'\n\nexport default function ComboBoxAsyncDemo() {\n    const list = useAsyncList<{ title: string }>({\n        async load({ signal, filterText }) {\n            const res = await fetch(`https://dummyjson.com/posts/search?q=${filterText}`, {\n                signal\n            }).then((r) => r.json())\n            return {\n                items: res.posts\n            }\n        }\n    })\n    return (\n        <ComboBox\n            inputValue={list.filterText}\n            isPending={list.isLoading}\n            items={list.items}\n            onInputChange={list.setFilterText}\n            prefix={<IconSearch />}\n        >\n            {(item) => (\n                <ComboBox.Item id={item.title} key={item.title}>\n                    {item.title}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-controlled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-controlled-demo",
    "raw": "'use client'\n\nimport type { Key, Selection } from 'react-aria-components'\nimport { IconCheckbox, IconForms } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { ComboBox, Toggle } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ComboBoxControlledDemo() {\n    const [mode, setMode] = useState<Selection>(new Set(['selection']))\n    return (\n        <div className='space-y-4'>\n            <Toggle.Group onSelectionChange={setMode} selectedKeys={mode} selectionMode='single'>\n                <Toggle id='selection'>\n                    <IconCheckbox />\n                    Selection\n                </Toggle>\n                <Toggle id='input'>\n                    <IconForms />\n                    Input\n                </Toggle>\n            </Toggle.Group>\n            {Array.from(mode).includes('selection') ? <ComboBoxControlledSelected /> : <ComboBoxControlledInput />}\n        </div>\n    )\n}\n\nconst ComboBoxControlledInput = () => {\n    const [value, setValue] = useState<string>('')\n    return (\n        <div className='grid space-y-4'>\n            <ComboBox inputValue={value} items={items} label='Linux Distro' onInputChange={setValue}>\n                {(item) => (\n                    <ComboBox.Item id={item.id} textValue={item.name}>\n                        {item.name}\n                    </ComboBox.Item>\n                )}\n            </ComboBox>\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n\nconst ComboBoxControlledSelected = () => {\n    const [selected, setSelected] = useState<Key | null>(null)\n    return (\n        <div className='grid space-y-4'>\n            <ComboBox items={items} label='Linux Distro' onSelectionChange={setSelected} selectedKey={selected}>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "overlays/popover/popover-trigger-demo": {
    "component": "@/components/docs/overlays/popover/popover-trigger-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, Popover } from '@/components/ui'\n\nexport default function PopoverTriggerDemo() {\n    return (\n        <Popover>\n            <Popover.Trigger aria-label='Open Popover'>\n                <Avatar alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n            </Popover.Trigger>\n            <Popover.Content>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>We&apos;ll send you an email to log in.</Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-placement-demo": {
    "component": "@/components/docs/overlays/popover/popover-placement-demo",
    "raw": "'use client'\n\nimport type { PopoverProps } from 'react-aria-components'\nimport { Button, Popover } from '@/components/ui'\n\nconst placements: PopoverProps['placement'][] = [\n    'left top',\n    'top left',\n    'top',\n    'top right',\n    'right top',\n    'left',\n    'right',\n    'left bottom',\n    'bottom left',\n    'bottom',\n    'bottom right',\n    'right bottom'\n]\n\nexport default function PopoverPlacementDemo() {\n    return (\n        <div className='grid grid-cols-6 gap-2'>\n            {placements.map((place, i) => (\n                <Popover key={i}>\n                    <Button\n                        className='nth-10:col-span-2 nth-3:col-span-2 nth-6:col-span-3 nth-7:col-span-3 whitespace-normal py-5 text-[10px] sm:text-sm'\n                        size='xs'\n                        variant='outline'\n                    >\n                        {place}\n                    </Button>\n                    <Popover.Content className='min-w-64 p-4' placement={place}>\n                        Popover shown at <strong>{place}</strong>\n                    </Popover.Content>\n                </Popover>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/popover/popover-demo": {
    "component": "@/components/docs/overlays/popover/popover-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Popover, TextField } from '@/components/ui'\n\nexport default function PopoverDemo() {\n    return (\n        <Popover>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Popover.Content className='min-w-96'>\n                    <Popover.Header>\n                        <Popover.Title>Login</Popover.Title>\n                        <Popover.Description>Enter your credentials to sign in.</Popover.Description>\n                    </Popover.Header>\n                    <Popover.Body className='space-y-4'>\n                        <TextField isRequired label='Email' placeholder='Enter your email' type='email' />\n                        <TextField isRequired label='Password' placeholder='Enter your password' type='password' />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Popover.Body>\n                    <Popover.Footer>\n                        <Button type='submit'>Login</Button>\n                    </Popover.Footer>\n                </Popover.Content>\n            </Form>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-arrow-demo": {
    "component": "@/components/docs/overlays/popover/popover-arrow-demo",
    "raw": "'use client'\n\nimport { IconPointer } from '@tabler/icons-react'\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverArrowDemo() {\n    return (\n        <Popover>\n            <Button>\n                <IconPointer />\n            </Button>\n            <Popover.Content className='p-4' showArrow={false}>\n                This popover doesn&apos;t have an arrow\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-controlled-demo": {
    "component": "@/components/docs/overlays/popover/popover-controlled-demo",
    "raw": "'use client'\n\nimport { IconCircleCheck, IconTrash } from '@tabler/icons-react'\nimport { useRef, useState } from 'react'\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverControlledDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n    const triggerRef = useRef<HTMLButtonElement>(null)\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} ref={triggerRef} variant='destructive'>\n                Delete Account\n            </Button>\n            <Popover.Content isOpen={open} onOpenChange={setOpen} triggerRef={triggerRef}>\n                <Popover.Header>\n                    <Popover.Title>Confirm Deletion</Popover.Title>\n                    <Popover.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button onPress={() => setOpen(false)} variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        onPress={deleteAccount}\n                        variant={loading === 'success' ? 'default' : 'destructive'}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n                    </Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-without-arrow-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-without-arrow-demo",
    "raw": "'use client'\n\nimport { IconPointer } from '@tabler/icons-react'\nimport { Button, Tooltip } from '@/components/ui'\n\nexport default function TooltipWithoutArrowDemo() {\n    return (\n        <Tooltip>\n            <Button aria-label='Hover Me!'>\n                <IconPointer />\n            </Button>\n            <Tooltip.Content showArrow={false}>Hello, This is Tooltip!</Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-variant-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-variant-demo",
    "raw": "'use client'\n\nimport { IconPointer } from '@tabler/icons-react'\nimport { Button, Tooltip } from '@/components/ui'\n\nexport default function TooltipVariantDemo() {\n    return (\n        <Tooltip>\n            <Button aria-label='Hover Me!'>\n                <IconPointer />\n            </Button>\n            <Tooltip.Content isInverse>\n                This is a <strong>Tooltip</strong> with an <strong>inverse</strong> background.\n            </Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-demo",
    "raw": "'use client'\n\nimport { Tooltip } from '@/components/ui'\n\nexport default function TooltipDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger>Hover Me!</Tooltip.Trigger>\n            <Tooltip.Content>Hello, This is Tooltip!</Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-delay-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-delay-demo",
    "raw": "'use client'\n\nimport { Button, Tooltip } from '@/components/ui'\n\nconst delays = [0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000]\n\nexport default function TooltipDelayDemo() {\n    return (\n        <div className='flex gap-2'>\n            {delays.map((delay, i) => (\n                <Tooltip delay={delay} key={i}>\n                    <Button>\n                        {delay}\n                        {delay === 1500 && ' (default)'}\n                    </Button>\n                    <Tooltip.Content>\n                        This tooltip shown after <strong>{delay}</strong>ms.\n                    </Tooltip.Content>\n                </Tooltip>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-placement-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-placement-demo",
    "raw": "'use client'\n\nimport type { TooltipProps } from 'react-aria-components'\nimport { Button, Tooltip } from '@/components/ui'\n\nconst placements: TooltipProps['placement'][] = [\n    'left top',\n    'top left',\n    'top',\n    'top right',\n    'right top',\n    'left',\n    'right',\n    'left bottom',\n    'bottom left',\n    'bottom',\n    'bottom right',\n    'right bottom'\n]\n\nexport default function TooltipPlacementDemo() {\n    return (\n        <div className='grid grid-cols-2 gap-2 sm:grid-cols-3 lg:grid-cols-6 [&_.kbt32x]:w-full'>\n            {placements.map((place, i) => (\n                <Tooltip key={i}>\n                    <Button\n                        className='nth-10:col-span-2 nth-3:col-span-2 nth-6:col-span-3 nth-7:col-span-3'\n                        size='xs'\n                        variant='outline'\n                    >\n                        {place}\n                    </Button>\n                    <Tooltip.Content placement={place}>\n                        Tooltip shown at <strong>{place}</strong>.\n                    </Tooltip.Content>\n                </Tooltip>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/sheet/sheet-sticky-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetStickyDemo() {\n    return (\n        <Sheet>\n            <Button>Read</Button>\n            <Sheet.Content>\n                <Sheet.Header>\n                    <Sheet.Title>Terms of Use</Sheet.Title>\n                    <Sheet.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our services, you agree to be bound by\n                            these terms. If you do not agree to these terms, please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for maintaining the confidentiality\n                            of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that occur under your account. You\n                            must notify us immediately of any breach of security or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and policies in connection with\n                            your use of our services. This includes adhering to intellectual property laws and\n                            refraining from any unlawful behavior while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of our services by any means other\n                            than through the interface provided by us. Any form of hacking, bypassing, or circumventing\n                            our security protocols is strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any content from our services\n                            unless explicitly authorized by us. This includes engaging in activities such as scraping,\n                            data mining, or using automated systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse, or harm other users. This\n                            includes sending unsolicited messages, stalking, or engaging in any form of cyberbullying.\n                            We reserve the right to terminate accounts found in violation of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other intellectual property displayed on\n                            our services are the property of their respective owners. You may not use, copy, or\n                            distribute any content without prior written permission from the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a worldwide, royalty-free, non-exclusive\n                            license to use, distribute, modify, and display that content for the purpose of providing\n                            our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to allow us to use it in\n                            accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our services at any time, without\n                        notice, for any reason, including but not limited to a breach of these terms. Upon termination,\n                        your right to use our services will immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms that, by their nature, should\n                        survive termination shall remain in effect. This includes, but is not limited to, ownership\n                        provisions, warranty disclaimers, and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all times or without interruption. We\n                        are not liable for any downtime or technical issues that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided &quot;as is&quot; and &quot;as available&quot; without any warranties\n                        of any kind, whether express or implied. We do not warrant that our services will meet your\n                        requirements or that they will be error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental, special, consequential, or punitive\n                        damages arising out of or related to your use of our services. This includes, but is not limited\n                        to, damages for loss of profits, data, or other intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time. If a revision is material, we\n                        will provide at least 30 days&apos; notice prior to any new terms taking effect. What\n                        constitutes a material change will be determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the laws of [Your Jurisdiction],\n                        without regard to its conflict of law provisions. Any disputes arising from or relating to these\n                        terms shall be resolved in the courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at [Your Contact Information].\n                    </div>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Button slot='close' variant='outline'>\n                        Close\n                    </Button>\n                    <Button>Accept</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-position-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-position-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Button, Sheet } from '@/components/ui'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetPositionDemo() {\n    const [sheetSide, setSheetSide] = useState<Side>('left')\n    const [isOpen, setIsOpen] = useState(false)\n\n    const sides: Side[] = ['top', 'left', 'right', 'bottom']\n\n    const openSheet = (side: Side, open: boolean) => {\n        setSheetSide(side)\n        setIsOpen(open)\n    }\n\n    return (\n        <>\n            <div className='grid grid-cols-2 gap-2'>\n                {sides.map((side, i) => (\n                    <Button\n                        className='first:col-span-full last:col-span-full'\n                        key={i}\n                        onPress={() => openSheet(side, true)}\n                        variant='outline'\n                    >\n                        {side}\n                    </Button>\n                ))}\n            </div>\n            <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen} side={sheetSide}>\n                <Sheet.Header>\n                    <Sheet.Title>{sheetSide}</Sheet.Title>\n                    <Sheet.Description>The sheet will go from {sheetSide} side.</Sheet.Description>\n                </Sheet.Header>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-controlled-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-controlled-demo",
    "raw": "'use client'\n\nimport { IconCircleCheck, IconTrash } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetControlledDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='destructive'>\n                Delete Account\n            </Button>\n            <Sheet.Content isOpen={open} onOpenChange={setOpen}>\n                <Sheet.Header>\n                    <Sheet.Title>Confirm Deletion</Sheet.Title>\n                    <Sheet.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Footer>\n                    <Button onPress={() => setOpen(false)} variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        onPress={deleteAccount}\n                        variant={loading === 'success' ? 'default' : 'destructive'}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n                    </Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Sheet, TextField } from '@/components/ui'\n\nexport default function SheetDemo() {\n    return (\n        <Sheet>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Sheet.Content>\n                    <Sheet.Header>\n                        <Sheet.Title>Login</Sheet.Title>\n                        <Sheet.Description>Enter your credentials to sign in.</Sheet.Description>\n                    </Sheet.Header>\n                    <Sheet.Body className='space-y-4'>\n                        <TextField isRequired label='Email' placeholder='Enter your email' type='email' />\n                        <TextField isRequired label='Password' placeholder='Enter your password' type='password' />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Sheet.Body>\n                    <Sheet.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Sheet.Footer>\n                </Sheet.Content>\n            </Form>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { IconBan, IconRestore, IconTrash } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Button, Menu, Sheet } from '@/components/ui'\n\nexport default function SheetMenuDemo() {\n    const [state, setState] = useState<Key>('')\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const executeAction = (action: string) => {\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n            setState('')\n            alert(action)\n        }, 3000)\n    }\n\n    const actions = (t: Key) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this user?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Button>Options</Button>\n                <Menu.Content onAction={setState}>\n                    <Menu.Item id='delete' isDestructive>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='ban' isDestructive>\n                        <IconBan />\n                        <Menu.Label>Ban</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='restore'>\n                        <IconRestore />\n                        <Menu.Label>Restore</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Sheet.Content isOpen={state !== ''} onOpenChange={() => setState('')}>\n                <Sheet.Header>\n                    <Sheet.Title>{actions(state)?.title}</Sheet.Title>\n                    <Sheet.Description>{actions(state)?.description}</Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        isDisabled={loading}\n                        isPending={loading}\n                        onPress={actions(state)?.action}\n                        variant={state === 'restore' ? 'default' : 'destructive'}\n                    >\n                        {actions(state)?.confirmText}\n                    </Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-menu-demo",
    "raw": "'use client'\n\nimport {\n    IconBook,\n    IconBook2,\n    IconBrandGithub,\n    IconBrandGithubCopilot,\n    IconBuilding,\n    IconChartBar,\n    IconFileCode,\n    IconFilter,\n    IconGlobe,\n    IconHeart,\n    IconLogout,\n    IconMessage,\n    IconSettings,\n    IconStar,\n    IconUser,\n    IconUsers\n} from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Group, Menu as MenuPrimitive } from 'react-aria-components'\nimport { Avatar, Button, Checkbox, Description, Menu, Modal, Select, Sheet, TextField } from '@/components/ui'\n\nexport default function SheetMenuDemo() {\n    const [isOpen, setIsOpen] = useState(false)\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    return (\n        <>\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Modal.Header>\n                    <Modal.Title>Edit status</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='space-y-4'>\n                        <TextField label='Status' placeholder=\"What's your status?\" prefix={<IconBrandGithub />} />\n                        <Group>\n                            <Checkbox>Busy</Checkbox>\n                            <Description>\n                                When others mention you, assign you, or request your review, GitHub will let them know\n                                that you have limited availability.\n                            </Description>\n                        </Group>\n                        <Select label='Clear Status'>\n                            <Select.Item>Never</Select.Item>\n                            <Select.Item>in 30 Minutes</Select.Item>\n                            <Select.Item>in 1 Hour</Select.Item>\n                            <Select.Item>in 8 Hours</Select.Item>\n                            <Select.Item>after Today</Select.Item>\n                            <Select.Item>after a Week</Select.Item>\n                            <Select.Item>after a Month</Select.Item>\n                        </Select>\n                        <Select label='Visible to'>\n                            <Select.Item>Everyone</Select.Item>\n                            <Select.Item>Organization</Select.Item>\n                            <Select.Item>Public</Select.Item>\n                        </Select>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onPress={closeModal} variant='outline'>\n                        Clear Status\n                    </Button>\n                    <Button onPress={closeModal}>Set Status</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <Sheet>\n                <Sheet.Trigger aria-label='Open menu'>\n                    <Avatar alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n                </Sheet.Trigger>\n                <Sheet.Content closeButton={false}>\n                    <Sheet.Header className='sticky top-0 flex flex-row items-center bg-background p-4 sm:gap-3'>\n                        <Avatar alt='dq-alhq' size='xl' src='https://github.com/dq-alhq.png' />\n                        <div>\n                            <Sheet.Title>dq-alhq</Sheet.Title>\n                            <Sheet.Description>DQ Al-Haqqi</Sheet.Description>\n                        </div>\n                    </Sheet.Header>\n                    <Sheet.Body className='border-t px-0 sm:px-0'>\n                        <MenuPrimitive aria-label='Menu' className='divide-y'>\n                            <Menu.Section>\n                                <Menu.Item onAction={openModal}>\n                                    <IconBrandGithub />\n                                    <Menu.Label>Edit Status</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconUser />\n                                    <Menu.Label>Your profile</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBook />\n                                    <Menu.Label>Your repositories</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBrandGithubCopilot /> <Menu.Label>Your Copilot</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconChartBar /> <Menu.Label>Your projects</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconStar /> <Menu.Label>Your stars</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconFileCode /> <Menu.Label>Your gists</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBuilding /> <Menu.Label>Your organizations</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconGlobe /> <Menu.Label>Your enterprises</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconHeart />\n                                    <Menu.Label>Your sponsors</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconFilter /> <Menu.Label>Feature preview</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconSettings />\n                                    <Menu.Label>Settings</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconBook2 /> <Menu.Label>GitHub Docs</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconUsers /> <Menu.Label>GitHub Support</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconMessage /> <Menu.Label>GitHub Community</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconLogout /> <Menu.Label>Sign out</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                        </MenuPrimitive>\n                    </Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        </>\n    )\n}\n"
  },
  "overlays/drawer/drawer-controlled-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-controlled-demo",
    "raw": "'use client'\n\nimport { IconCircleCheck, IconTrash } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Button, Drawer } from '@/components/ui'\n\nexport default function DrawerControlledDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='destructive'>\n                Delete Account\n            </Button>\n            <Drawer.Content isOpen={open} onOpenChange={setOpen}>\n                <Drawer.Header>\n                    <Drawer.Title>Confirm Deletion</Drawer.Title>\n                    <Drawer.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Drawer.Description>\n                </Drawer.Header>\n                <Drawer.Footer>\n                    <Button onPress={() => setOpen(false)} variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        onPress={deleteAccount}\n                        variant={loading === 'success' ? 'default' : 'destructive'}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n                    </Button>\n                </Drawer.Footer>\n            </Drawer.Content>\n        </>\n    )\n}\n"
  },
  "overlays/drawer/drawer-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Drawer, Form, Link, TextField } from '@/components/ui'\n\nexport default function DrawerDemo() {\n    return (\n        <Drawer>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Drawer.Content>\n                    <Drawer.Header>\n                        <Drawer.Title>Login</Drawer.Title>\n                        <Drawer.Description>Enter your credentials to sign in.</Drawer.Description>\n                    </Drawer.Header>\n                    <Drawer.Body className='space-y-4'>\n                        <TextField isRequired label='Email' placeholder='Enter your email' type='email' />\n                        <TextField isRequired label='Password' placeholder='Enter your password' type='password' />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Drawer.Body>\n                    <Drawer.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Drawer.Footer>\n                </Drawer.Content>\n            </Form>\n        </Drawer>\n    )\n}\n"
  },
  "overlays/drawer/drawer-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { IconBan, IconRestore, IconTrash } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Button, Drawer, Menu } from '@/components/ui'\n\nexport default function DrawerMenuDemo() {\n    const [state, setState] = useState<Key>('')\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const executeAction = (action: string) => {\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n            setState('')\n            alert(action)\n        }, 3000)\n    }\n\n    const actions = (t: Key) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this user?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Button>Options</Button>\n                <Menu.Content onAction={setState}>\n                    <Menu.Item id='delete' isDestructive>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='ban' isDestructive>\n                        <IconBan />\n                        <Menu.Label>Ban</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='restore'>\n                        <IconRestore />\n                        <Menu.Label>Restore</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Drawer.Content isOpen={state !== ''} onOpenChange={() => setState('')}>\n                <Drawer.Header>\n                    <Drawer.Title>{actions(state)?.title}</Drawer.Title>\n                    <Drawer.Description>{actions(state)?.description}</Drawer.Description>\n                </Drawer.Header>\n                <Drawer.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        isDisabled={loading}\n                        isPending={loading}\n                        onPress={actions(state)?.action}\n                        variant={state === 'restore' ? 'default' : 'destructive'}\n                    >\n                        {actions(state)?.confirmText}\n                    </Button>\n                </Drawer.Footer>\n            </Drawer.Content>\n        </>\n    )\n}\n"
  },
  "overlays/drawer/drawer-position-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-position-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Button, Drawer } from '@/components/ui'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function DrawerPositionDemo() {\n    const [DrawerSide, setDrawerSide] = useState<Side>('left')\n    const [isOpen, setIsOpen] = useState(false)\n\n    const sides: Side[] = ['top', 'left', 'right', 'bottom']\n\n    const openDrawer = (side: Side, open: boolean) => {\n        setDrawerSide(side)\n        setIsOpen(open)\n    }\n\n    return (\n        <>\n            <div className='grid grid-cols-2 gap-2'>\n                {sides.map((side, i) => (\n                    <Button\n                        className='first:col-span-full last:col-span-full'\n                        key={i}\n                        onPress={() => openDrawer(side, true)}\n                        variant='outline'\n                    >\n                        {side}\n                    </Button>\n                ))}\n            </div>\n            <Drawer.Content isOpen={isOpen} onOpenChange={setIsOpen} side={DrawerSide}>\n                <Drawer.Header>\n                    <Drawer.Title>{DrawerSide}</Drawer.Title>\n                    <Drawer.Description>The Drawer will go from {DrawerSide} side.</Drawer.Description>\n                </Drawer.Header>\n            </Drawer.Content>\n        </>\n    )\n}\n"
  },
  "overlays/drawer/drawer-sticky-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Drawer } from '@/components/ui'\n\nexport default function DrawerStickyDemo() {\n    return (\n        <Drawer>\n            <Button>Read</Button>\n            <Drawer.Content>\n                <Drawer.Header>\n                    <Drawer.Title>Terms of Use</Drawer.Title>\n                    <Drawer.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Drawer.Description>\n                </Drawer.Header>\n                <Drawer.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our services, you agree to be bound by\n                            these terms. If you do not agree to these terms, please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for maintaining the confidentiality\n                            of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that occur under your account. You\n                            must notify us immediately of any breach of security or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and policies in connection with\n                            your use of our services. This includes adhering to intellectual property laws and\n                            refraining from any unlawful behavior while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of our services by any means other\n                            than through the interface provided by us. Any form of hacking, bypassing, or circumventing\n                            our security protocols is strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any content from our services\n                            unless explicitly authorized by us. This includes engaging in activities such as scraping,\n                            data mining, or using automated systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse, or harm other users. This\n                            includes sending unsolicited messages, stalking, or engaging in any form of cyberbullying.\n                            We reserve the right to terminate accounts found in violation of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other intellectual property displayed on\n                            our services are the property of their respective owners. You may not use, copy, or\n                            distribute any content without prior written permission from the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a worldwide, royalty-free, non-exclusive\n                            license to use, distribute, modify, and display that content for the purpose of providing\n                            our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to allow us to use it in\n                            accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our services at any time, without\n                        notice, for any reason, including but not limited to a breach of these terms. Upon termination,\n                        your right to use our services will immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms that, by their nature, should\n                        survive termination shall remain in effect. This includes, but is not limited to, ownership\n                        provisions, warranty disclaimers, and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all times or without interruption. We\n                        are not liable for any downtime or technical issues that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided &quot;as is&quot; and &quot;as available&quot; without any warranties\n                        of any kind, whether express or implied. We do not warrant that our services will meet your\n                        requirements or that they will be error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental, special, consequential, or punitive\n                        damages arising out of or related to your use of our services. This includes, but is not limited\n                        to, damages for loss of profits, data, or other intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time. If a revision is material, we\n                        will provide at least 30 days&apos; notice prior to any new terms taking effect. What\n                        constitutes a material change will be determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the laws of [Your Jurisdiction],\n                        without regard to its conflict of law provisions. Any disputes arising from or relating to these\n                        terms shall be resolved in the courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at [Your Contact Information].\n                    </div>\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Button slot='close' variant='outline'>\n                        Close\n                    </Button>\n                    <Button>Accept</Button>\n                </Drawer.Footer>\n            </Drawer.Content>\n        </Drawer>\n    )\n}\n"
  },
  "overlays/drawer/drawer-menu-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-menu-demo",
    "raw": "'use client'\n\nimport {\n    IconBook,\n    IconBook2,\n    IconBrandGithub,\n    IconBrandGithubCopilot,\n    IconBuilding,\n    IconChartBar,\n    IconFileCode,\n    IconFilter,\n    IconGlobe,\n    IconHeart,\n    IconLogout,\n    IconMessage,\n    IconSettings,\n    IconStar,\n    IconUser,\n    IconUsers\n} from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Group, Menu as MenuPrimitive } from 'react-aria-components'\nimport { Avatar, Button, Checkbox, Description, Drawer, Menu, Modal, Select, TextField } from '@/components/ui'\n\nexport default function DrawerMenuDemo() {\n    const [isOpen, setIsOpen] = useState(false)\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    return (\n        <>\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Modal.Header>\n                    <Modal.Title>Edit status</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='space-y-4'>\n                        <TextField label='Status' placeholder=\"What's your status?\" prefix={<IconBrandGithub />} />\n                        <Group>\n                            <Checkbox>Busy</Checkbox>\n                            <Description>\n                                When others mention you, assign you, or request your review, GitHub will let them know\n                                that you have limited availability.\n                            </Description>\n                        </Group>\n                        <Select label='Clear Status'>\n                            <Select.Item>Never</Select.Item>\n                            <Select.Item>in 30 Minutes</Select.Item>\n                            <Select.Item>in 1 Hour</Select.Item>\n                            <Select.Item>in 8 Hours</Select.Item>\n                            <Select.Item>after Today</Select.Item>\n                            <Select.Item>after a Week</Select.Item>\n                            <Select.Item>after a Month</Select.Item>\n                        </Select>\n                        <Select label='Visible to'>\n                            <Select.Item>Everyone</Select.Item>\n                            <Select.Item>Organization</Select.Item>\n                            <Select.Item>Public</Select.Item>\n                        </Select>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onPress={closeModal} variant='outline'>\n                        Clear Status\n                    </Button>\n                    <Button onPress={closeModal}>Set Status</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <Drawer>\n                <Drawer.Trigger aria-label='Open menu'>\n                    <Avatar alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n                </Drawer.Trigger>\n                <Drawer.Content>\n                    <Drawer.Header className='sticky top-0 flex flex-row items-center bg-background p-4 sm:gap-3'>\n                        <Avatar alt='dq-alhq' size='xl' src='https://github.com/dq-alhq.png' />\n                        <div>\n                            <Drawer.Title>dq-alhq</Drawer.Title>\n                            <Drawer.Description>DQ Al-Haqqi</Drawer.Description>\n                        </div>\n                    </Drawer.Header>\n                    <Drawer.Body className='border-t px-0 sm:px-0'>\n                        <MenuPrimitive aria-label='Menu' className='divide-y'>\n                            <Menu.Section>\n                                <Menu.Item onAction={openModal}>\n                                    <IconBrandGithub />\n                                    <Menu.Label>Edit Status</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconUser />\n                                    <Menu.Label>Your profile</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBook />\n                                    <Menu.Label>Your repositories</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBrandGithubCopilot /> <Menu.Label>Your Copilot</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconChartBar /> <Menu.Label>Your projects</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconStar /> <Menu.Label>Your stars</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconFileCode /> <Menu.Label>Your gists</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBuilding /> <Menu.Label>Your organizations</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconGlobe /> <Menu.Label>Your enterprises</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconHeart />\n                                    <Menu.Label>Your sponsors</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconFilter /> <Menu.Label>Feature preview</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconSettings />\n                                    <Menu.Label>Settings</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconBook2 /> <Menu.Label>GitHub Docs</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconUsers /> <Menu.Label>GitHub Support</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconMessage /> <Menu.Label>GitHub Community</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconLogout /> <Menu.Label>Sign out</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                        </MenuPrimitive>\n                    </Drawer.Body>\n                </Drawer.Content>\n            </Drawer>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-demo": {
    "component": "@/components/docs/overlays/modal/modal-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Modal, TextField } from '@/components/ui'\n\nexport default function ModalDemo() {\n    return (\n        <Modal>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>Login</Modal.Title>\n                        <Modal.Description>Enter your credentials to sign in.</Modal.Description>\n                    </Modal.Header>\n                    <Modal.Body className='space-y-4'>\n                        <TextField isRequired label='Email' placeholder='Enter your email' type='email' />\n                        <TextField isRequired label='Password' placeholder='Enter your password' type='password' />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Form>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-size-demo": {
    "component": "@/components/docs/overlays/modal/modal-size-demo",
    "raw": "'use client'\n\nimport { type ComponentProps, useState } from 'react'\nimport { Button, Modal } from '@/components/ui'\n\ntype Size = Pick<ComponentProps<typeof Modal.Content>, 'size'>['size']\nconst sizes: Size[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl', 'full']\n\nexport default function ModalSizeDemo() {\n    const [isOpen, setIsOpen] = useState(false)\n    const [modalSize, setModalSize] = useState<Size>('md')\n\n    const openModal = (size: Size, open: boolean) => {\n        setModalSize(size)\n        setIsOpen(open)\n    }\n    return (\n        <>\n            <div className='grid grid-cols-3 gap-2'>\n                {sizes.map((size, i) => (\n                    <Button\n                        className='last:col-span-full'\n                        key={i}\n                        onPress={() => openModal(size, true)}\n                        variant='outline'\n                    >\n                        {size}\n                    </Button>\n                ))}\n            </div>\n\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen} size={modalSize}>\n                <Modal.Header>\n                    <Modal.Title>Modal {modalSize}</Modal.Title>\n                    <Modal.Description>This won&apos;t affect on small screen</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button onPress={() => setIsOpen(false)} variant='outline'>\n                        Close\n                    </Button>\n                    <Button onPress={() => setIsOpen(false)}>Confirm</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal/modal-controlled-demo",
    "raw": "'use client'\n\nimport { IconCircleCheck, IconTrash } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalControlledDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='destructive'>\n                Delete Account\n            </Button>\n            <Modal.Content isOpen={open} onOpenChange={setOpen}>\n                <Modal.Header>\n                    <Modal.Title>Confirm Deletion</Modal.Title>\n                    <Modal.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button onPress={() => setOpen(false)} variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        onPress={deleteAccount}\n                        variant={loading === 'success' ? 'default' : 'destructive'}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport type { Key } from 'react-aria-components'\nimport { IconBan, IconRestore, IconTrash } from '@tabler/icons-react'\nimport { useState } from 'react'\nimport { Button, Menu, Modal } from '@/components/ui'\n\nexport default function ModalMenuDemo() {\n    const [state, setState] = useState<Key>('')\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const executeAction = (action: string) => {\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n            setState('')\n            alert(action)\n        }, 3000)\n    }\n\n    const actions = (t: Key) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this user?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Button>Options</Button>\n                <Menu.Content onAction={setState}>\n                    <Menu.Item id='delete' isDestructive>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='ban' isDestructive>\n                        <IconBan />\n                        <Menu.Label>Ban</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='restore'>\n                        <IconRestore />\n                        <Menu.Label>Restore</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Modal.Content isOpen={state !== ''} onOpenChange={() => setState('')}>\n                <Modal.Header>\n                    <Modal.Title>{actions(state)?.title}</Modal.Title>\n                    <Modal.Description>{actions(state)?.description}</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        isDisabled={loading}\n                        isPending={loading}\n                        onPress={actions(state)?.action}\n                        variant={state === 'restore' ? 'default' : 'destructive'}\n                    >\n                        {actions(state)?.confirmText}\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-sticky-demo": {
    "component": "@/components/docs/overlays/modal/modal-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalStickyDemo() {\n    return (\n        <Modal>\n            <Button>Open</Button>\n            <Modal.Content>\n                <Modal.Header>\n                    <Modal.Title>Terms of Use</Modal.Title>\n                    <Modal.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Body className='prose dark:prose-invert'>\n                    <p>\n                        Welcome to our Terms of Use. By accessing or using our services, you agree to be bound by these\n                        terms. If you do not agree to these terms, please refrain from using our services.\n                    </p>\n                    <h3> User Obligations</h3>\n                    <h4>Account Responsibility</h4>\n                    <p>\n                        When you create an account with us, you are responsible for maintaining the confidentiality of\n                        your account and password.\n                    </p>\n                    <p>\n                        You agree to accept responsibility for all activities that occur under your account. You must\n                        notify us immediately of any breach of security or unauthorized use of your account.\n                    </p>\n                    <h4>Compliance with Laws</h4>\n                    <p>\n                        You agree to comply with all applicable laws, regulations, and policies in connection with your\n                        use of our services. This includes adhering to intellectual property laws and refraining from\n                        any unlawful behavior while using our platform.\n                    </p>\n                    <h3> Prohibited Activities</h3>\n                    <p>\n                        You are not permitted to access or attempt to access any of our services by any means other than\n                        through the interface provided by us. Any form of hacking, bypassing, or circumventing our\n                        security protocols is strictly prohibited.\n                    </p>\n                    <h4>Misuse of Content</h4>\n                    <p>\n                        You agree not to misuse, reproduce, distribute, or modify any content from our services unless\n                        explicitly authorized by us. This includes engaging in activities such as scraping, data mining,\n                        or using automated systems to extract data.\n                    </p>\n                    <h4>Harassment and Abuse</h4>\n                    <p>\n                        You are prohibited from using our services to harass, abuse, or harm other users. This includes\n                        sending unsolicited messages, stalking, or engaging in any form of cyberbullying. We reserve the\n                        right to terminate accounts found in violation of this policy.\n                    </p>\n                    <h4>Ownership of Content</h4>\n                    <p>\n                        All content, trademarks, service marks, logos, and other intellectual property displayed on our\n                        services are the property of their respective owners. You may not use, copy, or distribute any\n                        content without prior written permission from the owner.\n                    </p>\n                    <h4>User-Generated Content</h4>\n                    <p>\n                        By submitting content to our services, you grant us a worldwide, royalty-free, non-exclusive\n                        license to use, distribute, modify, and display that content for the purpose of providing our\n                        services.\n                    </p>\n                    <p>\n                        You retain all ownership rights to your content but agree to allow us to use it in accordance\n                        with these terms.\n                    </p>\n                    <h3> Termination</h3>\n                    <h4>Right to Terminate</h4>\n                    We reserve the right to terminate or suspend your access to our services at any time, without\n                    notice, for any reason, including but not limited to a breach of these terms. Upon termination, your\n                    right to use our services will immediately cease.\n                    <h4>Effect of Termination</h4>\n                    Upon termination of your account, all provisions of these terms that, by their nature, should\n                    survive termination shall remain in effect. This includes, but is not limited to, ownership\n                    provisions, warranty disclaimers, and limitations of liability.\n                    <h3> Limitation of Liability</h3>\n                    <h4>Service Availability</h4>\n                    We do not guarantee that our services will be available at all times or without interruption. We are\n                    not liable for any downtime or technical issues that may prevent access to our services.\n                    <h4>No Warranties</h4>\n                    Our services are provided &quot;as is&quot; and &quot;as available&quot; without any warranties of\n                    any kind, whether express or implied. We do not warrant that our services will meet your\n                    requirements or that they will be error-free or secure.\n                    <h4>Limitation of Damages</h4>\n                    In no event shall we be liable for any indirect, incidental, special, consequential, or punitive\n                    damages arising out of or related to your use of our services. This includes, but is not limited to,\n                    damages for loss of profits, data, or other intangibles.\n                    <h3> Changes to These Terms</h3>\n                    We reserve the right to modify or replace these terms at any time. If a revision is material, we\n                    will provide at least 30 days&apos; notice prior to any new terms taking effect. What constitutes a\n                    material change will be determined at our sole discretion.\n                    <h3> Governing Law</h3>\n                    These terms shall be governed and construed in accordance with the laws of [Your Jurisdiction],\n                    without regard to its conflict of law provisions. Any disputes arising from or relating to these\n                    terms shall be resolved in the courts of [Your Jurisdiction].\n                    <h3> Contact Information</h3>\n                    If you have any questions about these terms, please contact us at [Your Contact Information].\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button slot='close'>Accept</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-nested-demo": {
    "component": "@/components/docs/overlays/modal/modal-nested-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Button, Form, Modal, Textarea, toast } from '@/components/ui'\n\nexport default function ModalNestedDemo() {\n    const [firstModal, setFirstModal] = useState<boolean>(false)\n    const [secondModal, setSecondModal] = useState<boolean>(false)\n    const [filled, setFilled] = useState(false)\n\n    return (\n        <>\n            <Button onPress={() => setFirstModal(true)}>Register</Button>\n\n            <Modal.Content\n                aria-label='Confirm Registration'\n                isOpen={firstModal}\n                onOpenChange={() => setFirstModal(false)}\n            >\n                <Modal.Header>\n                    <Modal.Title>Confirm Registration</Modal.Title>\n                    <Modal.Description>Please confirm your registration details.</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        onPress={() => {\n                            setSecondModal(true)\n                        }}\n                    >\n                        Confirm\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n\n            <Modal.Content\n                aria-label='Profile Setup'\n                isOpen={secondModal}\n                onOpenChange={(open) => {\n                    if (!open && !filled) {\n                        toast('Profile setup incomplete')\n                    }\n                    setSecondModal(open)\n                }}\n            >\n                <Modal.Header>\n                    <Modal.Title>Set Up Your Profile</Modal.Title>\n                    <Modal.Description>We need a bit more information before you can get started.</Modal.Description>\n                </Modal.Header>\n                <Form\n                    onSubmit={(e) => {\n                        e.preventDefault()\n                        toast.success('Profile setup complete')\n                        setSecondModal(false)\n                        setFirstModal(false)\n                    }}\n                >\n                    <Modal.Body>\n                        <Textarea\n                            isRequired\n                            label='Bio'\n                            onInput={() => setFilled(true)}\n                            placeholder='Tell us something about yourself'\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button slot='close' variant='outline'>\n                            Skip for now\n                        </Button>\n                        <Button type='submit'>Complete Setup</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-alert-demo": {
    "component": "@/components/docs/overlays/modal/modal-alert-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalAlertDemo() {\n    return (\n        <Modal>\n            <Button variant='destructive'>Delete</Button>\n            <Modal.Content role='alertdialog'>\n                <Modal.Header>\n                    <Modal.Title>Delete file</Modal.Title>\n                    <Modal.Description>This will permanently delete the selected file. Continue?</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button slot='close' variant='destructive'>\n                        Continue\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-validation-demo",
    "raw": "'use client'\n\nimport type { CalendarDate } from '@internationalized/date'\nimport { type FormEvent, useState } from 'react'\nimport { Button, DateField, Form } from '@/components/ui'\n\nexport default function DateFieldValidationDemo() {\n    const [value, setValue] = useState<CalendarDate>()\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='flex flex-col gap-4' onSubmit={onSubmit}>\n            <DateField isRequired label='Event date' onChange={(v) => setValue(v!)} value={value} />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-controlled-demo",
    "raw": "'use client'\n\nimport { type CalendarDate, getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { useState } from 'react'\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = useState<CalendarDate>(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DateField label='Event date' onChange={(newValue) => setValue(newValue!)} value={value} />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-2'>\n            <DateField label='Default' />\n            <DateField isReadOnly label='Readonly' />\n            <DateField isInvalid label='Invalid' />\n            <DateField isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-field/date-time-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-time-field-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\nimport { useState } from 'react'\nimport { DateField } from '@/components/ui'\n\nexport default function DateTimeFieldDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = useState(today)\n    return (\n        <DateField\n            hideTimeZone\n            hourCycle={24}\n            label='Event date'\n            onChange={(newValue) => setValue(newValue!)}\n            value={value}\n        />\n    )\n}\n"
  },
  "date-and-time/calendar/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from '@/components/ui'\n\nexport default function CalendarDemo() {\n    return <Calendar aria-label='Event date' />\n}\n"
  },
  "date-and-time/calendar/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/range-calendar-demo",
    "raw": "'use client'\n\nimport { RangeCalendar } from '@/components/ui'\n\nexport default function RangeCalendarDemo() {\n    return <RangeCalendar aria-label='Range Calendar' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport type { FormEvent } from 'react'\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useState } from 'react'\nimport { Button, DateRangePicker, Form } from '@/components/ui'\n\nexport default function DateRangePickerCustomValidationDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n\n    const [value, setValue] = useState({\n        start: now,\n        end: tomorrowWeek\n    })\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='flex flex-col gap-4' onSubmit={onSubmit}>\n            <DateRangePicker\n                defaultValue={{\n                    start: today(getLocalTimeZone()),\n                    end: today(getLocalTimeZone()).add({ weeks: 2 })\n                }}\n                label='Room Booking Dates'\n                onChange={(v) => setValue(v!)}\n                validate={(range) =>\n                    range?.end.compare(range.start) > 7 ? 'Maximum booking duration is 1 week.' : null\n                }\n                value={value}\n            />\n            <Button type='submit'>Book Room</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-validation-demo",
    "raw": "'use client'\n\nimport type { CalendarDate } from '@internationalized/date'\nimport { type FormEvent, useState } from 'react'\nimport { Button, DateRangePicker, Form } from '@/components/ui'\n\nexport default function DateRangePickerValidationDemo() {\n    const [value, setValue] = useState<{ start: CalendarDate; end: CalendarDate }>()\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='flex flex-col gap-4' onSubmit={onSubmit}>\n            <DateRangePicker isRequired label='Event date' onChange={(v) => setValue(v!)} value={value} />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDemo() {\n    return <DateRangePicker label='Event date' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDisabledDemo() {\n    return <DateRangePicker isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-time-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-time-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\nimport { useState } from 'react'\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const tomorrowWeek = today.add({ days: 12 })\n\n    const [value, setValue] = useState({\n        start: today,\n        end: tomorrowWeek\n    })\n    return (\n        <DateRangePicker\n            hideTimeZone\n            hourCycle={24}\n            label='Date time range'\n            onChange={(newValue) => setValue(newValue!)}\n            value={value}\n        />\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-controlled-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { useState } from 'react'\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    const [value, setValue] = useState({\n        start: now,\n        end: tomorrowWeek\n    })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>\n                    {value\n                        ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n                        : '-- to --'}\n                </p>\n                <p>{value ? `${value.start.toString()} to ${value.end.toString()}` : '-- to --'}</p>\n            </div>\n            <DateRangePicker label='Event date' onChange={(newValue) => setValue(newValue!)} value={value} />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, parseDate, startOfYear, today } from '@internationalized/date'\nimport { type FormEvent, useState } from 'react'\nimport { Button, DatePicker, Form } from '@/components/ui'\n\nexport default function DatePickerInvalidDemo() {\n    const ly = startOfYear(today(getLocalTimeZone()))\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = useState(parseDate(ly.toString()))\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='flex flex-col gap-4' onSubmit={onSubmit}>\n            <DatePicker\n                className='mb-2'\n                label='Delivery date'\n                onChange={(newValue) => setValue(newValue!)}\n                validate={(date) => (date < now ? 'Select a future date, please.' : null)}\n                value={value}\n            />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-required-demo",
    "raw": "'use client'\n\nimport type { CalendarDate } from '@internationalized/date'\nimport { type FormEvent, useState } from 'react'\nimport { Button, DatePicker, Form } from '@/components/ui'\n\nexport default function DatePickerValidationDemo() {\n    const [value, setValue] = useState<CalendarDate>()\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='flex flex-col gap-4' onSubmit={onSubmit}>\n            <DatePicker isRequired label='Event date' onChange={(v) => setValue(v!)} value={value} />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-time-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-time-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\nimport { useState } from 'react'\nimport { DatePicker } from '@/components/ui'\n\nexport default function DateTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = useState(today)\n\n    return (\n        <DatePicker\n            className='max-w-xs'\n            hideTimeZone\n            hourCycle={24}\n            label='Event date'\n            onChange={(newValue) => setValue(newValue!)}\n            value={value}\n        />\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDemo() {\n    return <DatePicker label='Event date' />\n}\n"
  },
  "date-and-time/date-picker/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-controlled-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { useState } from 'react'\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n\n    const [value, setValue] = useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DatePicker label='Event date' onChange={(newValue) => setValue(newValue!)} value={value} />\n        </div>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-controlled-demo",
    "raw": "'use client'\n\nimport { Time } from '@internationalized/date'\nimport { useState } from 'react'\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = useState(new Time(11, 45))\n    return (\n        <div className='space-y-6'>\n            <TimeField label='Event time' onChange={(v) => setValue(v!)} value={value} />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-validation-demo",
    "raw": "'use client'\n\nimport type { Time } from '@internationalized/date'\nimport { type FormEvent, useState } from 'react'\nimport { Button, Form, TimeField } from '@/components/ui'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = useState<Time>()\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='flex flex-col gap-4' onSubmit={onSubmit}>\n            <TimeField isRequired label='Event time' onChange={(v) => setValue(v!)} value={value} />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-hc-demo",
    "raw": "'use client'\n\nimport { Time } from '@internationalized/date'\nimport { useState } from 'react'\nimport { Switch, TimeField } from '@/components/ui'\n\nexport default function TimeFieldHcDemo() {\n    const [hc, setHc] = useState<12 | 24>(24)\n    const [value, setValue] = useState(new Time(13, 45))\n    return (\n        <>\n            <div className='absolute top-4 left-4 inline-flex min-w-32 flex-col gap-1'>\n                <Switch isSelected={hc === 24} onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}>\n                    {hc} hour\n                </Switch>\n            </div>\n            <TimeField hourCycle={hc} label='Event time' onChange={(newValue) => setValue(newValue!)} value={value} />\n        </>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-2'>\n            <TimeField label='Default' />\n            <TimeField isReadOnly label='Readonly' />\n            <TimeField isInvalid label='Invalid' />\n            <TimeField isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "statuses/skeleton/skeleton-demo": {
    "component": "@/components/docs/statuses/skeleton/skeleton-demo",
    "raw": "import { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton className='size-7' />\n                <div className='space-y-1'>\n                    <Skeleton className='h-3 w-56' />\n                    <Skeleton className='h-3 w-10' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/skeleton/skeleton-shape-demo": {
    "component": "@/components/docs/statuses/skeleton/skeleton-shape-demo",
    "raw": "import { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonShapeDemo() {\n    return (\n        <Card className='space-y-4 p-4'>\n            <div className='flex gap-2'>\n                <Skeleton className='size-9' shape='circle' />\n                <div className='space-y-1'>\n                    <Skeleton className='h-4 w-56' shape='circle' />\n                    <Skeleton className='h-4 w-10' shape='circle' />\n                </div>\n            </div>\n            <div className='flex gap-2'>\n                <Skeleton className='size-9' shape='square' />\n                <div className='space-y-1'>\n                    <Skeleton className='h-4 w-56' shape='square' />\n                    <Skeleton className='h-4 w-10' shape='square' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/sonner/sonner-manual-demo": {
    "component": "@/components/docs/statuses/sonner/sonner-manual-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\nimport { Button } from '@/components/ui'\n\nexport default function SonnerAutoDismissDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Button\n                onPress={() =>\n                    toast('Manually Close', {\n                        description: 'Click the action or cancel button to close',\n                        duration: Infinity,\n                        action: {\n                            label: 'Action',\n                            onClick: () => {\n                                toast.dismiss()\n                            }\n                        },\n                        cancel: {\n                            label: 'Close',\n                            onClick: () => {\n                                toast.dismiss()\n                            }\n                        }\n                    })\n                }\n            >\n                Manually Close\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Automatically Close', {\n                        description: 'Just leave it for 3 seconds'\n                    })\n                }\n            >\n                Automatically Close\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/sonner/sonner-demo": {
    "component": "@/components/docs/statuses/sonner/sonner-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\nimport { Button } from '@/components/ui'\n\nexport default function SonnerDemo() {\n    return <Button onPress={() => toast('This is Toast Message')}>Toast</Button>\n}\n"
  },
  "statuses/sonner/sonner-description-demo": {
    "component": "@/components/docs/statuses/sonner/sonner-description-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\nimport { Button } from '@/components/ui'\n\nexport default function SonnerDescriptionDemo() {\n    return (\n        <Button\n            onPress={() =>\n                toast('This is Toast Message', {\n                    description: 'And this is Message Description'\n                })\n            }\n        >\n            Toast\n        </Button>\n    )\n}\n"
  },
  "statuses/sonner/sonner-action-demo": {
    "component": "@/components/docs/statuses/sonner/sonner-action-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\nimport { Button } from '@/components/ui'\n\nexport default function SonnerActionDemo() {\n    return (\n        <div className='flex gap-3'>\n            <Button\n                onPress={() =>\n                    toast('Your post has been published!', {\n                        action: {\n                            label: 'View',\n                            onClick: () => alert('Viewed')\n                        }\n                    })\n                }\n            >\n                Action\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Your message has been sent!', {\n                        action: {\n                            label: 'View',\n                            onClick: () => alert('Viewed')\n                        },\n                        cancel: {\n                            label: 'Cancel',\n                            onClick: () => alert('Cancelled')\n                        }\n                    })\n                }\n            >\n                Do or Not\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Your data has been deleted!', {\n                        cancel: {\n                            label: 'Cancel',\n                            onClick: () => alert('Cancelled')\n                        }\n                    })\n                }\n            >\n                Cancel\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/sonner/sonner-status-demo": {
    "component": "@/components/docs/statuses/sonner/sonner-status-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\nimport { Button } from '@/components/ui'\n\nexport default function SonnerStatusDemo() {\n    return (\n        <div className='flex flex-wrap gap-3'>\n            <Button onPress={() => toast('Everything is fine')} variant='outline'>\n                Default\n            </Button>\n            <Button onPress={() => toast.error('The registration failed')} variant='outline'>\n                Error\n            </Button>\n            <Button onPress={() => toast.success('The registration was successful.')} variant='outline'>\n                Success\n            </Button>\n            <Button onPress={() => toast.warning('There was an issue during registration')} variant='outline'>\n                Warning\n            </Button>\n            <Button onPress={() => toast.info('Email is already registered.')} variant='outline'>\n                Info\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/meter/meter-demo": {
    "component": "@/components/docs/statuses/meter/meter-demo",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDemo() {\n    const [value, setValue] = useState(0)\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return <Meter label='Storage space' value={value} />\n}\n"
  },
  "statuses/meter/meter-decimal-format-demo": {
    "component": "@/components/docs/statuses/meter/meter-decimal-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDecimalFormatDemo() {\n    return (\n        <Meter\n            formatOptions={{\n                style: 'decimal',\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }}\n            label='Progress'\n            value={75.25}\n        />\n    )\n}\n"
  },
  "statuses/meter/meter-currency-format-demo": {
    "component": "@/components/docs/statuses/meter/meter-currency-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterCurrencyFormatDemo() {\n    return <Meter formatOptions={{ style: 'currency', currency: 'USD' }} label='Revenue' value={15} />\n}\n"
  },
  "statuses/note/note-title-description-demo": {
    "component": "@/components/docs/statuses/note/note-title-description-demo",
    "raw": "import { Note } from '@/components/ui'\n\nexport default function NoteTitleDescriptionDemo() {\n    return (\n        <div className='space-y-6'>\n            <Note>\n                <Note.Title>Heads up!</Note.Title>\n                <Note.Description>Change a few things up and try submitting again.</Note.Description>\n            </Note>\n            <Note variant='destructive'>\n                <Note.Title>Heads up!</Note.Title>\n                <Note.Description>Change a few things up and try submitting again.</Note.Description>\n            </Note>\n        </div>\n    )\n}\n"
  },
  "statuses/note/note-demo": {
    "component": "@/components/docs/statuses/note/note-demo",
    "raw": "import { Note } from '@/components/ui'\n\nexport default function NoteDemo() {\n    return <Note>Change a few things up and try submitting again.</Note>\n}\n"
  },
  "statuses/note/note-variant-demo": {
    "component": "@/components/docs/statuses/note/note-variant-demo",
    "raw": "'use client'\n\nimport { Note } from '@/components/ui'\n\nexport default function NoteVariantDemo() {\n    return (\n        <div className='flex flex-col gap-y-6'>\n            <Note>Default alert! Change a few things up and try submitting again.</Note>\n            <Note variant='destructive'>Destructive alert! Change a few things up and try submitting again.</Note>\n        </div>\n    )\n}\n"
  },
  "statuses/note/note-with-icon-demo": {
    "component": "@/components/docs/statuses/note/note-with-icon-demo",
    "raw": "import { IconInfoCircle } from '@tabler/icons-react'\nimport { Note } from '@/components/ui'\n\nexport default function NoteWithIconDemo() {\n    return (\n        <Note>\n            <IconInfoCircle />\n            <Note.Title>Heads up!</Note.Title>\n            <Note.Description>Change a few things up and try submitting again.</Note.Description>\n        </Note>\n    )\n}\n"
  },
  "statuses/progress/progress-variant-demo": {
    "component": "@/components/docs/statuses/progress/progress-variant-demo",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressVariantDemo() {\n    const [value, setValue] = useState(0)\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 75 ? prev + 1 : 75))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return (\n        <div className='space-y-4'>\n            <div className='flex gap-2'>\n                <Progress circle label='Default' value={value} variant='default' />\n                <Progress circle label='Secondary' value={value} variant='secondary' />\n                <Progress circle label='Destructive' value={value} variant='destructive' />\n            </div>\n            <div className='flex flex-col gap-2'>\n                <Progress label='Default' value={value} variant='default' />\n                <Progress label='Secondary' value={value} variant='secondary' />\n                <Progress label='Destructive' value={value} variant='destructive' />\n            </div>\n        </div>\n    )\n}\n"
  },
  "statuses/progress/progress-indeterminate-demo": {
    "component": "@/components/docs/statuses/progress/progress-indeterminate-demo",
    "raw": "'use client'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressIndeterminateDemo() {\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <Progress isIndeterminate label='Loading…' />\n            <Progress circle isIndeterminate label='Loading…' />\n        </div>\n    )\n}\n"
  },
  "statuses/progress/progress-controlled-demo": {
    "component": "@/components/docs/statuses/progress/progress-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Progress, Slider } from '@/components/ui'\n\nexport default function ProgressControlledDemo() {\n    const [value, setValue] = useState(10)\n\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <Progress circle label='Progress…' value={value} />\n            <Progress label='Progress…' value={value} />\n            <Slider label='Control' onChange={(v) => setValue(v as number)} value={value} />\n        </div>\n    )\n}\n"
  },
  "statuses/progress/progress-circle-demo": {
    "component": "@/components/docs/statuses/progress/progress-circle-demo",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressCircleDemo() {\n    const [value, setValue] = useState(0)\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress circle label='Loading…' value={value} />\n}\n"
  },
  "statuses/progress/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress/progress-bar-demo",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressBarDemo() {\n    const [value, setValue] = useState(0)\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress label='Loading…' value={value} />\n}\n"
  },
  "statuses/toast/toast-status-demo": {
    "component": "@/components/docs/statuses/toast/toast-status-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastStatusDemo() {\n    return (\n        <div className='flex flex-wrap gap-3'>\n            <Button onPress={() => toast('Everything is fine')} variant='outline'>\n                Default\n            </Button>\n            <Button onPress={() => toast.error('The registration failed')} variant='outline'>\n                Error\n            </Button>\n            <Button onPress={() => toast.success('The registration was successful.')} variant='outline'>\n                Success\n            </Button>\n            <Button onPress={() => toast.warning('There was an issue during registration')} variant='outline'>\n                Warning\n            </Button>\n            <Button onPress={() => toast.info('Email is already registered.')} variant='outline'>\n                Info\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-action-demo": {
    "component": "@/components/docs/statuses/toast/toast-action-demo",
    "raw": "'use client'\n\nimport { IconEye } from '@tabler/icons-react'\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastActionDemo() {\n    return (\n        <div className='flex gap-3'>\n            <Button\n                onPress={() =>\n                    toast('Your post has been published!', {\n                        action: () => alert('Viewed'),\n                        actionLabel: (\n                            <>\n                                <IconEye /> View\n                            </>\n                        )\n                    })\n                }\n            >\n                Action\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Your message has been sent!', {\n                        action: () => alert('Viewed'),\n                        actionLabel: (\n                            <>\n                                <IconEye /> View\n                            </>\n                        ),\n                        altAction: () => alert('Cancelled'),\n                        altActionLabel: 'Cancel'\n                    })\n                }\n            >\n                Do or Not\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Your data has been deleted!', {\n                        altAction: () => alert('Cancelled'),\n                        altActionLabel: 'Cancel'\n                    })\n                }\n            >\n                Cancel\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-description-demo": {
    "component": "@/components/docs/statuses/toast/toast-description-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastDescriptionDemo() {\n    return (\n        <Button\n            onPress={() =>\n                toast('This is Toast Message', {\n                    description: 'And this is Message Description'\n                })\n            }\n        >\n            Toast\n        </Button>\n    )\n}\n"
  },
  "statuses/toast/toast-manual-demo": {
    "component": "@/components/docs/statuses/toast/toast-manual-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastAutoDismissDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Button\n                onPress={() =>\n                    toast(\n                        'Manually Close',\n                        {\n                            description: 'Click the action or cancel button to close',\n                            actionLabel: 'Cancel',\n                            altActionLabel: 'Close'\n                        },\n                        { timeout: 0 }\n                    )\n                }\n            >\n                Manually Close\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Automatically Close', {\n                        description: 'Just leave it for 3 seconds',\n                        actionLabel: 'Cancel',\n                        altActionLabel: 'Close'\n                    })\n                }\n            >\n                Automatically Close\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-demo": {
    "component": "@/components/docs/statuses/toast/toast-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastDemo() {\n    return <Button onPress={() => toast('This is Toast Message')}>Toast</Button>\n}\n"
  },
  "statuses/badge/badge-demo": {
    "component": "@/components/docs/statuses/badge/badge-demo",
    "raw": "import { Badge } from '@/components/ui'\n\nexport default function BadgeDemo() {\n    return <Badge>Label</Badge>\n}\n"
  },
  "statuses/badge/badge-variant-demo": {
    "component": "@/components/docs/statuses/badge/badge-variant-demo",
    "raw": "'use client'\n\nimport { Badge, badgeStyle } from '@/components/ui'\n\ntype Appearance = keyof typeof badgeStyle.variants.variant\n\nexport default function BadgeVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(badgeStyle.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Badge variant={variant as Appearance}>{variant}</Badge>\n                </div>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/indicator/indicator-custom-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-custom-demo",
    "raw": "import { IconCheck, IconInfoCircle } from '@tabler/icons-react'\nimport { Avatar, Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\n\nexport default function IndicatorCustomDemo() {\n    return (\n        <div className='flex flex-wrap gap-6'>\n            <Indicator className='size-9 bg-amber-600 *:[svg]:size-6' text={<IconInfoCircle />}>\n                <Button variant='outline'>Warning</Button>\n            </Indicator>\n            <Indicator className='bg-green-700' text={<IconCheck />}>\n                <Button variant='outline'>Success</Button>\n            </Indicator>\n            <Indicator className='animate-pulse'>\n                <Avatar shape='square' src='https://i.pravatar.cc/77' />\n            </Indicator>\n        </div>\n    )\n}\n"
  },
  "statuses/indicator/indicator-variants-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-variants-demo",
    "raw": "import { IconBell } from '@tabler/icons-react'\nimport { Fragment } from 'react'\nimport { Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\n\nconst sizes = ['xs', 'sm', 'md', 'lg'] as const\nconst shapes = ['circle', 'square'] as const\nconst variants = ['primary', 'secondary', 'destructive', 'outline'] as const\n\nexport default function IndicatorVariantsDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-4'>\n            {sizes.map((size) => (\n                <Fragment key={size}>\n                    {shapes.map((shape) => (\n                        <Fragment key={shape}>\n                            {variants.map((variant) => (\n                                <Indicator key={variant} shape={shape} size={size} variant={variant}>\n                                    <Button icon variant='outline'>\n                                        <IconBell />\n                                    </Button>\n                                </Indicator>\n                            ))}\n                        </Fragment>\n                    ))}\n                </Fragment>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/indicator/indicator-inverse-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-inverse-demo",
    "raw": "import { Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\n\nconst variants = ['primary', 'secondary', 'destructive', 'outline'] as const\n\nexport default function IndicatorPositionDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-4'>\n            {variants.map((variant) => (\n                <Indicator key={variant} variant={variant}>\n                    <Button>{variant}</Button>\n                </Indicator>\n            ))}\n            {variants.map((variant) => (\n                <Indicator isInverse key={variant} variant={variant}>\n                    <Button>{variant}</Button>\n                </Indicator>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/indicator/indicator-text-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-text-demo",
    "raw": "import { IconBell, IconShoppingCart } from '@tabler/icons-react'\nimport { Avatar, Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\n\nexport default function IndicatorTextDemo() {\n    return (\n        <div className='flex flex-wrap gap-4'>\n            <Indicator text={<IconBell />}>\n                <Avatar shape='square' src='https://i.pravatar.cc/77' />\n            </Indicator>\n            <Indicator text='new'>\n                <Avatar shape='square' src='https://i.pravatar.cc/77' />\n            </Indicator>\n            <Indicator shape='square' text='99+'>\n                <Button icon variant='outline'>\n                    <IconShoppingCart />\n                </Button>\n            </Indicator>\n        </div>\n    )\n}\n"
  },
  "statuses/indicator/indicator-position-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-position-demo",
    "raw": "import { Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\n\nexport default function IndicatorInverseDemo() {\n    return (\n        <div className='flex flex-wrap gap-4'>\n            <Indicator position='top'>\n                <Button>Top</Button>\n            </Indicator>\n            <Indicator position='bottom'>\n                <Button>Bottom</Button>\n            </Indicator>\n        </div>\n    )\n}\n"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { DropZone, Label } from '@/components/ui'\n\nexport default function DropZoneDemo() {\n    const [dropped, setDropped] = useState(false)\n\n    return (\n        <DropZone onDrop={() => setDropped(true)}>\n            <Label>{dropped ? 'Item dropped!' : 'Drop an Item here'}</Label>\n        </DropZone>\n    )\n}\n"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport type { DropEvent } from '@react-types/shared'\nimport { IconPhoto } from '@tabler/icons-react'\nimport Image from 'next/image'\nimport { useState } from 'react'\nimport { isFileDropItem } from 'react-aria-components'\nimport { Description, DropZone, FileTrigger } from '@/components/ui'\n\nexport default function DropZoneAndFileTriggerDemo() {\n    const [droppedImage, setDroppedImage] = useState<string | null>(null)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    const onSelectHandler = async (e: FileList | null) => {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n\n    return (\n        <DropZone\n            getDropOperation={(types) => (types.has('image/jpeg') || types.has('image/png') ? 'copy' : 'cancel')}\n            onDrop={onDropHandler}\n        >\n            <div className='grid space-y-3'>\n                <div className='mx-auto grid size-12 place-content-center overflow-hidden rounded-full border bg-muted/70 group-drop-target:border-primary/70 group-drop-target:bg-ring'>\n                    {droppedImage ? (\n                        <Image\n                            alt='Uploaded Image'\n                            className='aspect-square size-full object-cover'\n                            height={20}\n                            src={droppedImage}\n                            width={20}\n                        />\n                    ) : (\n                        <IconPhoto className='size-5' />\n                    )}\n                </div>\n                <div className='flex justify-center'>\n                    <FileTrigger\n                        acceptedFileTypes={['image/png', 'image/jpeg']}\n                        allowsMultiple={false}\n                        onSelect={onSelectHandler}\n                    >\n                        Upload an image\n                    </FileTrigger>\n                </div>\n                <Description>Or drag and drop PNG, JPG, GIF up to 10MB</Description>\n            </div>\n            <input name='image' type='hidden' value={droppedImage ?? ''} />\n        </DropZone>\n    )\n}\n"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport type { ReactNode } from 'react'\nimport type { SeparatorProps } from 'react-aria-components'\nimport { Separator as RACSeparator } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\nconst Separator = ({ className, children, ...props }: SeparatorProps & { children?: ReactNode }) => {\n    return children ? (\n        <div\n            className={cn(\n                'text-muted-foreground text-sm leading-6 before:border-border after:border-muted',\n                props.orientation === 'vertical'\n                    ? 'mx-2 flex h-full flex-col items-center self-stretch before:mb-2 before:flex-1 before:border-l after:mt-2 after:flex-1 after:border-r'\n                    : 'my-2 flex h-px w-full items-center self-stretch before:mr-2 before:flex-1 before:border-t after:ml-2 after:flex-1 after:border-t',\n                className\n            )}\n        >\n            {children}\n        </div>\n    ) : (\n        <RACSeparator\n            {...props}\n            className={cn(\n                'shrink-0 bg-border',\n                props.orientation === 'vertical' ? 'h-full w-px' : 'h-px w-full',\n                className\n            )}\n        />\n    )\n}\n\nexport { Separator }\n"
  },
  "indicator": {
    "component": "@/components/ui/indicator",
    "raw": "'use client'\n\nimport type { ComponentPropsWithRef, ReactNode } from 'react'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst indicatorStyle = tv({\n    base: 'absolute right-0.5 left-auto z-10 inline-flex w-auto translate-x-1/2 select-none items-center justify-center whitespace-nowrap border-2 py-[3px]',\n    variants: {\n        variant: {\n            primary: '[--background:var(--color-primary)] [--foreground:var(--color-primary-foreground)]',\n            secondary: '[--background:var(--color-muted-foreground)] [--foreground:var(--color-muted)]',\n            destructive: '[--background:var(--color-destructive)] [--foreground:var(--color-border)]',\n            outline: '[--background:var(--color-background)] [--foreground:var(--color-foreground)]'\n        },\n        position: {\n            top: '-translate-y-1/2 top-0.5 bottom-auto',\n            bottom: 'top-auto bottom-0.5 translate-y-1/2'\n        },\n        isInverse: {\n            true: 'border-(--background) bg-(--foreground) text-(--background)',\n            false: 'border-(--foreground) bg-(--background) text-(--foreground)'\n        },\n        shape: {\n            circle: 'rounded-full',\n            square: 'rounded-md'\n        },\n        size: {\n            xs: 'size-3',\n            sm: 'size-4',\n            md: 'size-5',\n            lg: 'size-6'\n        },\n        isText: {\n            true: 'size-auto px-1.5 text-xs has-[svg]:px-[3px] *:[svg]:size-4 *:[svg]:shrink-0'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        position: 'top',\n        isInverse: false,\n        shape: 'circle',\n        size: 'sm'\n    }\n})\n\ninterface IndicatorProps extends ComponentPropsWithRef<'div'>, VariantProps<typeof indicatorStyle> {\n    text?: ReactNode\n}\n\nconst Indicator = ({ className, children, ...props }: IndicatorProps) => {\n    return (\n        <div className='relative inline-block w-fit'>\n            {children}\n            <span className={indicatorStyle({ className, isText: !!props.text, ...props })}>{props.text}</span>\n        </div>\n    )\n}\n\nexport { Indicator }\n"
  },
  "progress": {
    "component": "@/components/ui/progress",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\nimport { composeRenderProps, ProgressBar, type ProgressBarProps } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Label } from './form'\n\ninterface ProgressProps extends ProgressBarProps {\n    label?: string\n    ref?: Ref<HTMLDivElement>\n    circle?: boolean\n    variant?: 'default' | 'secondary' | 'destructive'\n}\n\nconst Progress = ({ label, ref, circle, variant = 'default', className, ...props }: ProgressProps) => {\n    return (\n        <>\n            <style>\n                {\n                    '@keyframes indeterminate { from { transform: translateX(-100%); } to { transform: translateX(250px); } }'\n                }\n            </style>\n            <ProgressBar\n                className={composeRenderProps(className, (className) => cn('flex flex-col gap-y-1.5', className))}\n                ref={ref}\n                {...props}\n            >\n                {({ percentage, valueText, isIndeterminate }) => (\n                    <>\n                        {circle ? (\n                            <svg\n                                aria-label={label ?? 'Progress'}\n                                className={cn(\n                                    'size-20 shrink-0',\n                                    variant === 'default' && 'text-primary',\n                                    variant === 'secondary' && 'text-foreground',\n                                    variant === 'destructive' && 'text-destructive',\n                                    className\n                                )}\n                                fill='none'\n                                viewBox='0 0 32 32'\n                            >\n                                <circle\n                                    cx='50%'\n                                    cy='50%'\n                                    r='calc(50% - 2px)'\n                                    stroke='currentColor'\n                                    strokeOpacity={0.25}\n                                    strokeWidth={3}\n                                />\n                                <circle\n                                    className={cn(\n                                        'origin-center',\n                                        isIndeterminate\n                                            ? 'animate-[spin_1s_cubic-bezier(0.4,_0,_0.2,_1)_infinite]'\n                                            : '-rotate-90'\n                                    )}\n                                    cx='50%'\n                                    cy='50%'\n                                    pathLength={100}\n                                    r='calc(50% - 2px)'\n                                    stroke='currentColor'\n                                    strokeDasharray='100 200'\n                                    strokeDashoffset={100 - (percentage ?? 30)}\n                                    strokeLinecap='round'\n                                    strokeWidth={3}\n                                    style={{ transition: 'stroke-dashoffset 0.1s linear' }}\n                                />\n                                {!isIndeterminate && (\n                                    <text\n                                        className='fill-current'\n                                        dy='.35em'\n                                        fontSize='calc(50% + 1px)'\n                                        textAnchor='middle'\n                                        x='50%'\n                                        y='50%'\n                                    >\n                                        {valueText}\n                                    </text>\n                                )}\n                            </svg>\n                        ) : (\n                            <>\n                                <div className='flex justify-between gap-2'>\n                                    {label && <Label>{label}</Label>}\n                                    {valueText && (\n                                        <span className='text-muted-foreground text-sm tabular-nums'>{valueText}</span>\n                                    )}\n                                </div>\n                                <div className='relative h-2 min-w-64 overflow-hidden rounded-lg bg-muted outline-hidden'>\n                                    <div\n                                        className={cn(\n                                            'absolute top-0 left-0 h-full rounded-full transition',\n                                            variant === 'default' && 'bg-primary',\n                                            variant === 'secondary' && 'bg-muted-foreground',\n                                            variant === 'destructive' && 'bg-destructive',\n                                            isIndeterminate && 'w-[120px]'\n                                        )}\n                                        style={{\n                                            width: `${percentage}%`,\n                                            animation: isIndeterminate\n                                                ? 'indeterminate 1.5s infinite ease-in-out'\n                                                : 'none',\n                                            transition: 'width 0.1s linear'\n                                        }}\n                                    />\n                                </div>\n                            </>\n                        )}\n                    </>\n                )}\n            </ProgressBar>\n        </>\n    )\n}\n\nexport { Progress }\n"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport type { ReactNode, RefObject } from 'react'\nimport type { VariantProps } from 'tailwind-variants'\nimport { FileTrigger as RACFileTrigger, type FileTriggerProps as RACFileTriggerProps } from 'react-aria-components'\nimport { Button, type buttonStyle } from './button'\n\ninterface FileTriggerProps extends RACFileTriggerProps, VariantProps<typeof buttonStyle> {\n    isDisabled?: boolean\n    ref?: RefObject<HTMLInputElement>\n}\n\nconst FileTrigger = ({\n    variant,\n    size,\n    ref,\n    isDisabled,\n    isPending,\n    children,\n    ...props\n}: Omit<FileTriggerProps, 'children'> & { children: ReactNode }) => {\n    return (\n        <RACFileTrigger ref={ref} {...props}>\n            <Button isDisabled={isDisabled} isPending={isPending} size={size} variant={variant}>\n                {children}\n            </Button>\n        </RACFileTrigger>\n    )\n}\n\nexport { FileTrigger }\nexport type { FileTriggerProps }\n"
  },
  "tree": {
    "component": "@/components/ui/tree",
    "raw": "'use client'\n\nimport type { TreeItemContentProps, TreeItemProps, TreeProps } from 'react-aria-components'\nimport { IconChevronRight } from '@tabler/icons-react'\nimport {\n    Button,\n    composeRenderProps,\n    Tree as RACTree,\n    TreeItem as RACTreeItem,\n    TreeItemContent\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\nconst Tree = <T extends object>({ className, ...props }: TreeProps<T>) => {\n    return (\n        <RACTree\n            className={composeRenderProps(className, (className) =>\n                cn('flex cursor-default flex-col gap-0.5 p-2 text-sm outline-hidden', className)\n            )}\n            {...props}\n        />\n    )\n}\n\nconst TreeItem = <T extends object>({ className, ...props }: TreeItemProps<T>) => {\n    return (\n        <RACTreeItem\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative flex items-center gap-1.5 rounded-lg p-1 py-2 text-sm outline-hidden',\n                    'pl-[calc((var(--tree-item-level)-1)*20px+32px)] has-child-items:pl-[calc((var(--tree-item-level)-1)*20px+8px)]',\n                    'focus-visible:ring-2 focus-visible:ring-ring',\n                    'selected:bg-primary/10 selected:text-primary',\n                    'disabled:opacity-50',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst ItemContent = ({ children, ...props }: TreeItemContentProps) => (\n    <TreeItemContent {...props}>\n        {(values) => (\n            <>\n                {values.hasChildItems && (\n                    <Button\n                        className='inline-flex size-4 items-center justify-center text-muted-foreground outline-hidden'\n                        slot='chevron'\n                    >\n                        <IconChevronRight\n                            className={cn('transition-transform', values.isExpanded && 'rotate-90')}\n                            data-slot='indicator'\n                        />\n                    </Button>\n                )}\n                {typeof children === 'function' ? children(values) : children}\n            </>\n        )}\n    </TreeItemContent>\n)\n\nTreeItem.Content = ItemContent\n\nexport { Tree, TreeItem }\nexport type { TreeItemProps, TreeProps }\n"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\n\nimport { IconCalendarFilled } from '@tabler/icons-react'\nimport {\n    Button,\n    composeRenderProps,\n    type DateValue,\n    DatePicker as RACDatePicker,\n    type DatePickerProps as RACDatePickerProps,\n    DateRangePicker as RACDateRangePicker,\n    type DateRangePickerProps as RACDateRangePickerProps\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Calendar, RangeCalendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\nimport { PopoverContent } from './popover'\n\ninterface DatePickerProps<T extends DateValue> extends RACDatePickerProps<T>, FieldProps {}\n\nconst DatePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DatePickerProps<T>) => {\n    return (\n        <RACDatePicker\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isOpen }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup className='min-w-40'>\n                        <DateInput className='w-full px-2 text-base lg:text-sm' />\n                        <Button className='mr-1 inline-flex size-8 cursor-pointer items-center justify-center rounded-lg outline-hidden'>\n                            <IconCalendarFilled\n                                aria-hidden\n                                className={cn('size-4', isOpen ? 'text-primary' : 'text-muted-foreground')}\n                            />\n                        </Button>\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                    <PopoverContent className='p-4' showArrow={false}>\n                        <Calendar />\n                        <Button\n                            className='mt-2 w-full rounded-lg border pressed:bg-accent p-2 text-center hover:bg-accent/90 sm:hidden'\n                            slot='close'\n                            type='button'\n                        >\n                            Close\n                        </Button>\n                    </PopoverContent>\n                </>\n            )}\n        </RACDatePicker>\n    )\n}\n\ninterface DateRangePickerProps<T extends DateValue> extends RACDateRangePickerProps<T>, FieldProps {}\n\nconst DateRangePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DateRangePickerProps<T>) => {\n    return (\n        <RACDateRangePicker\n            shouldCloseOnSelect={false}\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isOpen }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup className='w-auto min-w-40'>\n                        <DateInput className='px-2 text-base tabular-nums lg:text-sm' slot='start' />\n                        <span aria-hidden='true' className='flex-1 px-2 py-1.5 text-base tabular-nums lg:text-sm'>\n                            –\n                        </span>\n                        <DateInput className='flex-1 px-2 py-1.5 text-base tabular-nums lg:text-sm' slot='end' />\n                        <Button className='mr-1 inline-flex size-8 cursor-pointer items-center justify-center rounded-lg outline-hidden'>\n                            <IconCalendarFilled\n                                aria-hidden\n                                className={cn('size-4', isOpen ? 'text-primary' : 'text-muted-foreground')}\n                            />\n                        </Button>\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                    <PopoverContent showArrow={false}>\n                        <RangeCalendar />\n                        <Button\n                            className='mt-2 w-full rounded-lg border pressed:bg-accent p-2 text-center hover:bg-accent/90 sm:hidden'\n                            slot='close'\n                            type='button'\n                        >\n                            Close\n                        </Button>\n                    </PopoverContent>\n                </>\n            )}\n        </RACDateRangePicker>\n    )\n}\n\nexport { DatePicker, DateRangePicker }\n"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\n\nimport type { ComboBoxProps as RACComboboxProps } from 'react-aria-components'\nimport { IconChevronDown, IconLoader, IconX } from '@tabler/icons-react'\nimport { type ReactNode, type Ref, use } from 'react'\nimport {\n    Button,\n    ComboBoxStateContext,\n    composeRenderProps,\n    ListBox,\n    ComboBox as RACCombobox\n} from 'react-aria-components'\nimport { cn, fuzzyMatch } from '@/lib/utils'\nimport { Description, FieldError, FieldGroup, type FieldProps, Input, Label } from './form'\nimport { ListBoxDetails, ListBoxItem, ListBoxSection } from './list-box'\nimport { PopoverContent } from './popover'\n\ninterface ComboBoxProps<T extends object> extends Omit<RACComboboxProps<T>, 'children'>, FieldProps {\n    children: ReactNode | ((item: T) => ReactNode)\n    prefix?: ReactNode\n    isPending?: boolean\n    placeholder?: string\n    ref?: Ref<HTMLDivElement>\n}\n\nconst ComboBox = <T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    placeholder,\n    isPending,\n    className,\n    items,\n    ref,\n    ...props\n}: ComboBoxProps<T>) => (\n    <RACCombobox\n        className={composeRenderProps(className, (className) => cn('group/field flex flex-col gap-1.5', className))}\n        defaultFilter={fuzzyMatch}\n        menuTrigger='focus'\n        ref={ref}\n        {...props}\n    >\n        {label && <Label>{label}</Label>}\n        <FieldGroup isInvalid={props.isInvalid || !!errorMessage}>\n            {isPending ? (\n                <IconLoader className='ml-2 size-4 shrink-0 animate-spin text-muted-foreground' />\n            ) : props.prefix ? (\n                <span className='ml-2 shrink-0 text-muted-foreground has-[button]:ml-0 **:data-avatar:size-6'>\n                    {props.prefix}\n                </span>\n            ) : null}\n            <Input placeholder={placeholder ?? 'Choose an option or Input value'} />\n            {props.inputValue ? (\n                <ClearButton />\n            ) : (\n                <Button\n                    aria-label='Chevron'\n                    className='inline-flex items-center justify-center rounded-md text-muted-foreground outline-hidden'\n                >\n                    <IconChevronDown className='group-open/field:-rotate-180 mr-2 size-4 transition' />\n                </Button>\n            )}\n        </FieldGroup>\n        {description && <Description>{description}</Description>}\n        <FieldError>{errorMessage}</FieldError>\n        <PopoverContent isPicker respectScreen={false} showArrow={false} trigger='focus'>\n            <ListBox\n                aria-label='items'\n                className='grid w-full grid-cols-[auto_1fr_1.5rem] gap-y-1 overflow-y-auto rounded-md outline-hidden'\n                items={items}\n            >\n                {children}\n            </ListBox>\n        </PopoverContent>\n    </RACCombobox>\n)\n\nconst ClearButton = () => {\n    const state = use(ComboBoxStateContext)!\n    return (\n        <Button\n            aria-label='Clear'\n            className='inline-flex cursor-pointer items-center justify-center rounded-md text-muted-foreground outline-hidden hover:text-foreground'\n            onPress={() => {\n                state.setInputValue('')\n                state.setSelectedKey(null)\n                state.open()\n            }}\n            slot={null}\n        >\n            <IconX className='mr-2 size-4' />\n        </Button>\n    )\n}\n\nComboBox.Item = ListBoxItem\nComboBox.Section = ListBoxSection\nComboBox.ItemDetails = ListBoxDetails\n\nexport { ComboBox }\n"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport type { ComponentProps } from 'react'\nimport type { ButtonProps, DialogProps, DialogTriggerProps, ModalOverlayProps } from 'react-aria-components'\nimport { Button, Modal, DialogTrigger as SheetTrigger } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport {\n    Dialog,\n    DialogBody,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogOverlay,\n    DialogTitle,\n    DialogX,\n    sheetStyle\n} from './dialog'\n\nconst Sheet = (props: DialogTriggerProps) => {\n    return <SheetTrigger {...props} />\n}\n\ninterface SheetContentProps\n    extends Omit<ComponentProps<typeof Modal>, 'children'>,\n        Omit<ModalOverlayProps, 'className' | 'children'> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    closeButton?: boolean\n    side?: 'top' | 'bottom' | 'left' | 'right'\n    children?: DialogProps['children']\n}\n\nconst SheetContent = ({\n    side = 'right',\n    role = 'dialog',\n    closeButton = true,\n    className,\n    children,\n    ...props\n}: SheetContentProps) => {\n    const isDismissable = role !== 'alertdialog'\n    return (\n        <DialogOverlay isDismissable={isDismissable} {...props}>\n            <Modal\n                className={sheetStyle({\n                    side,\n                    className: side === 'top' || side === 'bottom' ? 'h-fit' : 'h-full'\n                })}\n                {...props}\n            >\n                <Dialog\n                    aria-label={props['aria-label'] ?? 'Sheet'}\n                    className={cn(\n                        'relative flex flex-col overflow-hidden outline-hidden',\n                        side === 'top' || side === 'bottom'\n                            ? 'max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))]'\n                            : 'h-full max-h-screen'\n                    )}\n                    role={role}\n                >\n                    {(values) => (\n                        <>\n                            {typeof children === 'function' ? children(values) : children}\n                            {closeButton && isDismissable && <DialogX />}\n                        </>\n                    )}\n                </Dialog>\n            </Modal>\n        </DialogOverlay>\n    )\n}\n\nSheet.Trigger = (props: ButtonProps) => <Button {...props} />\n\nSheet.Content = SheetContent\n\nSheet.Header = DialogHeader\nSheet.Title = DialogTitle\nSheet.Description = DialogDescription\nSheet.Body = DialogBody\nSheet.Footer = DialogFooter\n\nexport { Sheet, SheetContent }\n"
  },
  "toolbar": {
    "component": "@/components/ui/toolbar",
    "raw": "'use client'\n\nimport type { RefObject } from 'react'\nimport type { GroupProps, SeparatorProps, ToolbarProps } from 'react-aria-components'\nimport {\n    composeRenderProps,\n    Group,\n    Toolbar as RACToolbar,\n    Separator,\n    ToolbarContext,\n    useSlottedContext\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Toggle, ToggleGroupContext, type ToggleGroupContextProps, toggleGroupStyles } from './toggle'\n\nconst Toolbar = ({ orientation = 'horizontal', className, ...props }: ToolbarProps) => (\n    <ToolbarContext.Provider value={{ orientation }}>\n        <RACToolbar\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'group gap-2',\n                    orientation === 'vertical'\n                        ? 'grid items-start'\n                        : 'flex flex-row [-ms-overflow-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden',\n                    className\n                )\n            )}\n            orientation={orientation}\n            {...props}\n        />\n    </ToolbarContext.Provider>\n)\n\ninterface ToolbarGroupProps extends GroupProps, Omit<ToggleGroupContextProps, 'orientation'> {\n    ref?: RefObject<HTMLDivElement>\n}\n\nconst ToolbarGroup = ({ className, ref, variant = 'outline', gap, icon, size, ...props }: ToolbarGroupProps) => {\n    const { orientation } = useSlottedContext(ToolbarContext)!\n    return (\n        <ToggleGroupContext.Provider value={{ variant, gap, size, icon, orientation, isDisabled: props.isDisabled }}>\n            <Group\n                className={composeRenderProps(className, (className) =>\n                    cn(\n                        toggleGroupStyles({\n                            gap,\n                            orientation\n                        }),\n                        className\n                    )\n                )}\n                ref={ref}\n                {...props}\n            />\n        </ToggleGroupContext.Provider>\n    )\n}\n\nconst ToolbarSeparator = ({ className, ...props }: SeparatorProps) => {\n    const { orientation } = useSlottedContext(ToolbarContext)!\n    return (\n        <Separator\n            className={cn(\n                'bg-border',\n                orientation === 'horizontal' ? 'mx-1.5 min-h-8 w-px' : 'my-1.5 h-px w-fit min-w-8',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nToolbar.Group = ToolbarGroup\nToolbar.Separator = ToolbarSeparator\nToolbar.Item = Toggle\n\nexport { Toolbar }\n"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport type { TagGroupProps as RACTagGroupProps, TagListProps, TagProps } from 'react-aria-components'\nimport { IconX } from '@tabler/icons-react'\nimport { createContext, type ReactNode, type RefObject, useContext } from 'react'\nimport { Button, composeRenderProps, Tag as RACTag, TagGroup as RACTagGroup, TagList } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { cn } from '@/lib/utils'\nimport { badgeStyle } from './badge'\nimport { Description, Label } from './form'\n\ntype TagGroupStyles = {\n    variant: keyof Omit<typeof badgeStyle.variants.variant, 'outline'>\n}\n\nconst TagGroupContext = createContext<TagGroupStyles>({\n    variant: 'default'\n})\n\ninterface TagGroupProps extends Omit<RACTagGroupProps, 'children'> {\n    variant?: TagGroupStyles['variant']\n    errorMessage?: string\n    label?: string\n    description?: string\n    ref?: RefObject<HTMLDivElement>\n    className?: string\n}\n\nconst TagGroup = <T extends object>({\n    label,\n    description,\n    items,\n    className,\n    ref,\n    children,\n    renderEmptyState,\n    ...props\n}: TagGroupProps & TagListProps<T>) => {\n    return (\n        <RACTagGroup className={cn('flex flex-col flex-wrap gap-1.5', className)} ref={ref} {...props}>\n            {label && <Label>{label}</Label>}\n            <TagGroupContext.Provider\n                value={{\n                    variant: props.variant || 'default'\n                }}\n            >\n                <TagList\n                    className='flex flex-wrap gap-2 *:data-[slot=badge]:bg-primary'\n                    items={items}\n                    renderEmptyState={renderEmptyState}\n                >\n                    {children}\n                </TagList>\n            </TagGroupContext.Provider>\n            {description && <Description>{description}</Description>}\n        </RACTagGroup>\n    )\n}\n\nconst tagStyle = tv({\n    extend: badgeStyle,\n    variants: {\n        isSelected: { false: '!border-border !bg-transparent !text-muted-foreground' },\n        isFocusVisible: {\n            true: 'outline-0 ring-2 ring-ring/50 ring-offset-2'\n        },\n        isDisabled: { true: 'cursor-default opacity-50', false: 'cursor-pointer' },\n        allowsRemoving: { true: 'pr-1' }\n    }\n})\n\nconst Tag = (props: TagProps) => {\n    const textValue = typeof props.children === 'string' ? props.children : undefined\n    const groupContext = useContext(TagGroupContext)\n\n    return (\n        <RACTag\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(props.className, (className, renderProps) =>\n                tagStyle({\n                    ...renderProps,\n                    variant: groupContext.variant,\n                    className\n                })\n            )}\n        >\n            {({ allowsRemoving }) => {\n                return (\n                    <>\n                        {props.children as ReactNode}\n                        {allowsRemoving && (\n                            <Button\n                                className='-mr-0.5 grid size-3.5 place-content-center rounded-lg focus:outline-none focus-visible:ring-1 focus-visible:ring-ring/50'\n                                slot='remove'\n                            >\n                                <IconX className='size-3 shrink-0' />\n                            </Button>\n                        )}\n                    </>\n                )\n            }}\n        </RACTag>\n    )\n}\n\nTag.Group = TagGroup\nTag.List = TagList\n\nexport { Tag }\nexport type { TagGroupProps, TagGroupStyles }\n"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport type { ComponentProps, ReactNode } from 'react'\nimport {\n    Button,\n    composeRenderProps,\n    OverlayArrow,\n    Tooltip as RACTooltip,\n    type TooltipProps as RACTooltipProps,\n    TooltipTrigger as RACTooltipTrigger\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\ntype TooltipProps = ComponentProps<typeof RACTooltipTrigger>\nconst Tooltip = (props: TooltipProps) => <RACTooltipTrigger {...props} />\n\ninterface TooltipContentProps extends Omit<RACTooltipProps, 'children'> {\n    showArrow?: boolean\n    children: ReactNode\n    isInverse?: boolean\n}\n\nconst TooltipContent = ({\n    offset = 10,\n    showArrow = true,\n    isInverse = false,\n    className,\n    children,\n    ...props\n}: TooltipContentProps) => {\n    return (\n        <RACTooltip\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    isInverse ? 'bg-popover-foreground text-popover' : 'bg-popover text-popover-foreground',\n                    'group rounded-lg border px-2.5 py-1.5 text-sm will-change-transform',\n                    'entering:fade-in entering:animate-in',\n                    'exiting:fade-in exiting:direction-reverse exiting:animate-in',\n                    'entering:placement-top:slide-in-from-bottom-1 exiting:placement-top:slide-out-to-bottom-1',\n                    'entering:placement-bottom:slide-in-from-top-1 exiting:placement-bottom:slide-out-to-top-1',\n                    'entering:placement-left:slide-in-from-right-1 exiting:placement-left:slide-out-to-right-1',\n                    'entering:placement-right:slide-in-from-left-1 exiting:placement-right:slide-out-to-left-1',\n                    className\n                )\n            )}\n            offset={offset}\n        >\n            {showArrow && (\n                <OverlayArrow className='group'>\n                    <svg\n                        className={cn(\n                            'group-placement-left:-rotate-90 block group-placement-bottom:rotate-180 group-placement-right:rotate-90',\n                            isInverse ? 'fill-popover-foreground' : 'fill-popover stroke-border'\n                        )}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        width={12}\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            {children}\n        </RACTooltip>\n    )\n}\n\nTooltip.Trigger = Button\nTooltip.Content = TooltipContent\n\nexport { Tooltip }\n"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport type {\n    CellProps,\n    ColumnProps,\n    ColumnResizerProps,\n    TableHeaderProps as HeaderProps,\n    TableProps as RACTableProps,\n    RowProps,\n    TableBodyProps\n} from 'react-aria-components'\nimport { IconChevronDown, IconMenu } from '@tabler/icons-react'\nimport { createContext, type ReactNode, type Ref, use } from 'react'\nimport {\n    Button,\n    Cell,\n    Collection,\n    Column,\n    composeRenderProps,\n    ColumnResizer as RACColumnResizer,\n    Table as RACTable,\n    TableBody as RACTableBody,\n    TableHeader as RACTableHeader,\n    ResizableTableContainer,\n    Row,\n    useTableOptions\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Checkbox } from './checkbox'\n\ninterface TableProps extends RACTableProps {\n    className?: string\n    allowResize?: boolean\n}\n\nconst TableContext = createContext<TableProps>({\n    allowResize: false\n})\n\nconst useTableContext = () => use(TableContext)\n\nconst Root = (props: TableProps) => (\n    <RACTable className='w-full min-w-full caption-bottom border-spacing-0 text-sm outline-hidden' {...props} />\n)\n\nconst Table = ({ className, ...props }: TableProps) => {\n    return (\n        <TableContext.Provider value={props}>\n            <div className='relative w-full overflow-auto rounded-lg border' slot='table'>\n                {props.allowResize ? (\n                    <ResizableTableContainer className='overflow-auto'>\n                        <Root {...props} />\n                    </ResizableTableContainer>\n                ) : (\n                    <Root {...props} />\n                )}\n            </div>\n        </TableContext.Provider>\n    )\n}\n\ninterface TableHeaderProps<T extends object> extends HeaderProps<T> {\n    className?: string\n    ref?: Ref<HTMLTableSectionElement>\n}\n\nconst TableHeader = <T extends object>({ children, ref, className, columns, ...props }: TableHeaderProps<T>) => {\n    const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n    return (\n        <RACTableHeader className={cn('border-b text-foreground', className)} ref={ref} {...props}>\n            {allowsDragging && <Column className='w-0' />}\n            {selectionBehavior === 'toggle' && (\n                <Column className='w-0 pl-4'>{selectionMode === 'multiple' && <Checkbox slot='selection' />}</Column>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </RACTableHeader>\n    )\n}\n\nconst ColumnResizer = ({ className, ...props }: ColumnResizerProps) => (\n    <RACColumnResizer\n        {...props}\n        className={composeRenderProps(className, (className, { isResizing, resizableDirection }) =>\n            cn(\n                'absolute top-0 right-0 bottom-0 w-px touch-none px-1.5',\n                resizableDirection === 'left' && 'cursor-w-resize',\n                resizableDirection === 'right' && 'cursor-e-resize',\n                resizableDirection === 'both' && 'cursor-ew-resize',\n                isResizing ? '*:bg-primary' : '*:bg-muted',\n                className\n            )\n        )}\n    >\n        <div className='h-full w-px' />\n    </RACColumnResizer>\n)\n\nconst TableBody = <T extends object>(props: TableBodyProps<T>) => (\n    <RACTableBody\n        {...props}\n        className={cn(\n            '**:data-drop-target:py-2 **:data-drop-target:outline **:data-drop-target:outline-primary',\n            props.className\n        )}\n    />\n)\n\ninterface TableCellProps extends CellProps {\n    className?: string\n}\n\nconst TableCell = ({ children, className, ...props }: TableCellProps) => {\n    const { allowResize } = useTableContext()\n    return (\n        <Cell\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group whitespace-nowrap px-3 py-3 outline-hidden',\n                    'first:pl-6 last:pr-6',\n                    allowResize && 'overflow-hidden truncate',\n                    className\n                )\n            )}\n        >\n            {children}\n        </Cell>\n    )\n}\n\ninterface TableColumnProps extends ColumnProps {\n    className?: string\n    isResizable?: boolean\n}\n\nconst TableColumn = ({ isResizable = false, className, ...props }: TableColumnProps) => {\n    return (\n        <Column\n            {...props}\n            className={composeRenderProps(className, (className, { isResizing, allowsSorting }) =>\n                cn(\n                    'relative whitespace-nowrap p-3 text-left font-medium outline-hidden first:pl-6 last:pr-6 **:has-[slot=selection]:pr-0',\n                    isResizable && 'overflow-hidden truncate',\n                    isResizing && 'cursor-grabbing',\n                    allowsSorting && 'cursor-pointer',\n                    className\n                )\n            )}\n        >\n            {({ allowsSorting, sortDirection, isHovered }) => (\n                <div className='flex items-center gap-2'>\n                    {props.children as ReactNode}\n                    {allowsSorting && (\n                        <IconChevronDown\n                            className={cn(\n                                'size-3.5 shrink-0 text-muted-foreground transition-transform',\n                                sortDirection === 'ascending' ? '-rotate-180' : '',\n                                isHovered && 'text-primary'\n                            )}\n                        />\n                    )}\n                    {isResizable && <ColumnResizer />}\n                </div>\n            )}\n        </Column>\n    )\n}\n\ninterface TableRowProps<T extends object> extends RowProps<T> {\n    className?: string\n    ref?: Ref<HTMLTableRowElement>\n}\n\nconst TableRow = <T extends object>({ children, className, columns, id, ref, ...props }: TableRowProps<T>) => {\n    const { selectionBehavior, allowsDragging } = useTableOptions()\n    return (\n        <Row\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group relative cursor-default not-last:border-b',\n                    'href' in props && 'cursor-pointer',\n                    'selected:bg-muted hover:bg-muted/50',\n                    'focus-visible:bg-muted focus-visible:ring-2 focus-visible:ring-ring/50',\n                    'has-focus-visible:bg-muted has-focus-visible:outline-1 has-focus-visible:outline-ring',\n                    'disabled:pointer-events-none disabled:opacity-50',\n                    className\n                )\n            )}\n            id={id}\n            ref={ref}\n            {...props}\n        >\n            {allowsDragging && (\n                <Cell className='cursor-grab pr-0 outline-primary data-dragging:cursor-grabbing'>\n                    <Button className='py-1.5 pl-3.5' slot='drag'>\n                        <IconMenu />\n                    </Button>\n                </Cell>\n            )}\n            {selectionBehavior === 'toggle' && (\n                <Cell className='pl-4'>\n                    <span\n                        aria-hidden\n                        className='absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary/70 group-selected:block'\n                    />\n                    <Checkbox slot='selection' />\n                </Cell>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </Row>\n    )\n}\n\nTable.Body = TableBody\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Header = TableHeader\nTable.Row = TableRow\n\nexport { Table }\nexport type { TableBodyProps, TableCellProps, TableColumnProps, TableProps, TableRowProps }\n"
  },
  "user": {
    "component": "@/components/ui/user",
    "raw": "'use client'\n\nimport { Avatar, type AvatarProps } from './avatar'\n\ninterface UserProps extends Omit<AvatarProps, 'size'> {\n    name: string\n    description?: string\n    size?: 'md' | 'lg' | 'xl'\n}\n\nconst User = ({ name, description, size = 'lg', ...props }: UserProps) => {\n    const sizes: { avatar: 'lg' | 'md' | 'xl'; name: string; description: string } = {\n        avatar: 'lg',\n        name: 'text-sm',\n        description: 'text-xs'\n    }\n    switch (size) {\n        case 'md':\n            sizes.avatar = 'md'\n            sizes.name = 'text-sm'\n            sizes.description = 'text-xs'\n            break\n        case 'xl':\n            sizes.avatar = 'xl'\n            sizes.name = 'text-base'\n            sizes.description = 'text-sm'\n            break\n        default:\n            sizes.avatar = 'lg'\n            sizes.name = 'text-sm'\n            sizes.description = 'text-xs'\n            break\n    }\n    return (\n        <div className='inline-flex items-center justify-center gap-2 rounded-xl outline-none'>\n            <Avatar {...props} size={sizes.avatar} />\n            <div className='inline-flex flex-col items-start' data-user={true}>\n                <span className={`font-medium text-inherit ${sizes.name}`}>{name}</span>\n                {description && <span className={`text-muted-foreground ${sizes.description}`}>{description}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport { User }\n"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import { type HTMLAttributes, useId } from 'react'\nimport { cn } from '@/lib/utils'\n\ninterface SkeletonProps extends HTMLAttributes<HTMLDivElement> {\n    shape?: 'square' | 'circle'\n}\n\nconst Skeleton = ({ shape, className, ...props }: SkeletonProps) => {\n    const patternId = useId()\n    return (\n        <div\n            className={cn(\n                'relative shrink-0 animate-pulse overflow-hidden border',\n                shape === 'circle' ? 'rounded-full' : 'rounded-sm',\n                className\n            )}\n            style={{ opacity: 0.9 }}\n            {...props}\n        >\n            <svg className='absolute inset-0 size-full stroke-border' fill='none'>\n                <defs>\n                    <pattern height='10' id={patternId} patternUnits='userSpaceOnUse' width='10' x='0' y='0'>\n                        <path d='M-3 13 15-5M-5 5l18-18M-1 21 17 3' />\n                    </pattern>\n                </defs>\n                <rect fill={`url(#${patternId})`} height='100%' stroke='none' width='100%' />\n            </svg>\n        </div>\n    )\n}\n\nexport { Skeleton }\n"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\nimport type { ButtonProps as RACButtonProps } from 'react-aria-components'\nimport { IconLoader3 } from '@tabler/icons-react'\nimport { composeRenderProps, Button as RACButton } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst buttonStyle = tv({\n    base: [\n        'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium text-sm outline-hidden transition-all',\n        '**:[svg]:pointer-events-none **:[svg]:shrink-0',\n        'shadow-xs focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50',\n        'cursor-pointer disabled:pointer-events-none disabled:opacity-50'\n    ],\n    variants: {\n        variant: {\n            default: 'bg-primary pressed:bg-primary/80 text-primary-foreground shadow-xs hover:bg-primary/90',\n            destructive:\n                'bg-destructive pressed:bg-destructive/80 text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:bg-destructive/60 dark:focus-visible:ring-destructive/40',\n            outline:\n                'border bg-background pressed:bg-accent/80 text-foreground shadow-xs hover:bg-accent hover:text-accent-foreground dark:border-input dark:bg-input/30 dark:hover:bg-input/50',\n            secondary: 'bg-secondary pressed:bg-secondary/80 text-secondary-foreground shadow-xs hover:bg-secondary/80',\n            ghost: 'pressed:bg-accent/80 shadow-none hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50'\n        },\n        size: {\n            xs: \"gap-x-1.5 px-2 text-xs [--height:theme(spacing.6)] [--width:auto] [&_svg:not([class*='size-'])]:size-3.5\",\n            sm: \"gap-x-1.5 px-3 text-sm [--height:theme(spacing.8)] [--width:auto] [&_svg:not([class*='size-'])]:size-4\",\n            md: \"gap-x-2 px-4 text-sm [--height:theme(spacing.9)] [--width:auto] [&_svg:not([class*='size-'])]:size-4\",\n            lg: \"gap-x-2.5 px-5 text-base [--height:theme(spacing.10)] [--width:auto] [&_svg:not([class*='size-'])]:size-5\"\n        },\n        icon: {\n            true: 'h-(--height) w-(--height) shrink-0 px-0',\n            false: 'h-(--height) w-(--width)'\n        },\n        isPending: {\n            true: \"pointer-events-none cursor-default opacity-50 [&_svg:not([data-slot='loader'])]:hidden\"\n        }\n    },\n    defaultVariants: {\n        variant: 'default',\n        size: 'md'\n    }\n})\n\ninterface ButtonProps extends RACButtonProps, VariantProps<typeof buttonStyle> {\n    ref?: Ref<HTMLButtonElement>\n    isPending?: boolean\n}\n\nconst Button = ({ className, children, variant, size, icon, isPending, ...props }: ButtonProps) => (\n    <RACButton\n        className={composeRenderProps(className, (className) =>\n            buttonStyle({ variant, size, icon, isPending, className })\n        )}\n        {...props}\n    >\n        {(values) => (\n            <>\n                {isPending && <IconLoader3 className='animate-spin' data-slot='loader' />}\n                {typeof children === 'function' ? children(values) : children}\n            </>\n        )}\n    </RACButton>\n)\n\nexport { Button, buttonStyle }\n"
  },
  "color-slider": {
    "component": "@/components/ui/color-slider",
    "raw": "'use client'\n\nimport type { ColorSliderProps as RACColorSliderProps } from 'react-aria-components'\nimport { composeRenderProps, ColorSlider as RACColorSlider, SliderOutput, SliderTrack } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { ColorThumb } from './color-thumb'\nimport { Label } from './form'\n\ninterface ColorSliderProps extends RACColorSliderProps {\n    label?: string\n    showOutput?: boolean\n}\n\nconst ColorSlider = ({ showOutput = true, label, className, ...props }: ColorSliderProps) => {\n    return (\n        <RACColorSlider\n            {...props}\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'group/field relative flex flex-col items-center gap-2',\n                    orientation === 'horizontal' ? 'min-w-56 justify-between' : 'justify-center',\n                    className\n                )\n            )}\n            slot='color-slider'\n        >\n            {({ orientation }) => (\n                <>\n                    <div className='flex w-full items-center justify-between has-only:justify-center'>\n                        {label && <Label>{label}</Label>}\n                        {showOutput && <SliderOutput />}\n                    </div>\n                    <SliderTrack\n                        className={cn('rounded-lg', orientation === 'horizontal' ? 'h-6 w-full' : 'h-56 w-6')}\n                        style={({ defaultStyle }) => ({ ...defaultStyle })}\n                    >\n                        <ColorThumb />\n                    </SliderTrack>\n                </>\n            )}\n        </RACColorSlider>\n    )\n}\n\nexport { ColorSlider }\nexport type { ColorSliderProps }\n"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\nimport type { RadioGroupProps as RACRadioGroupProps, RadioProps as RACRadioProps } from 'react-aria-components'\nimport { composeRenderProps, Radio as RACRadio, RadioGroup as RACRadioGroup } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, Label } from './form'\n\ninterface RadioGroupProps extends RACRadioGroupProps, FieldProps {}\n\nconst RadioGroup = ({ label, description, errorMessage, className, children, ...props }: RadioGroupProps) => {\n    return (\n        <RACRadioGroup\n            {...props}\n            className={composeRenderProps(className, (className) => cn('group/field flex flex-col gap-2', className))}\n            isInvalid={!!errorMessage || props.isInvalid}\n        >\n            {(values) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <div\n                        className={cn(\n                            'flex',\n                            values.orientation === 'horizontal' ? 'flex-wrap gap-2 sm:gap-4' : 'flex-col gap-2'\n                        )}\n                    >\n                        {typeof children === 'function' ? children(values) : children}\n                    </div>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACRadioGroup>\n    )\n}\n\ninterface RadioProps extends RACRadioProps, Omit<FieldProps, 'errorMessage'> {\n    children?: ReactNode\n    ref?: Ref<HTMLLabelElement>\n}\n\nconst Radio = ({ label, description, className, children, ref, ...props }: RadioProps) => {\n    return (\n        <RACRadio\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group/box flex items-center gap-2',\n                    {\n                        'items-start': description\n                    },\n                    className\n                )\n            )}\n            ref={ref}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    <div\n                        className={cn(\n                            'size-4 shrink-0 rounded-full border bg-transparent transition dark:bg-input/30',\n                            'group-hover/box:border-primary/70',\n                            'group-focus/box:border-primary group-focus/box:group-has-invalid/box:border-destructive',\n                            'group-focus-visible/box:border-primary group-focus-visible/box:ring-[3px] group-focus-visible/box:ring-ring/50 group-focus-visible/box:group-has-invalid/box:border-destructive',\n                            'group-has-invalid/box:border-destructive/70 group-has-invalid/box:ring-destructive/20 group-has-invalid/box:group-hover/box:border-destructive/70',\n                            values.isSelected && 'border-[5px] border-primary group-has-invalid/box:border-destructive'\n                        )}\n                    />\n                    <div className='flex flex-col gap-y-1.5'>\n                        <span className='not-last:text-sm/4 text-sm'>{label ?? children}</span>\n                        {description && <Description>{description}</Description>}\n                    </div>\n                </>\n            )}\n        </RACRadio>\n    )\n}\n\nexport { Radio, RadioGroup }\n"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\n\nimport type { ListBoxItemProps, ListBoxSectionProps } from 'react-aria-components'\nimport { IconChevronLeft, IconChevronRight } from '@tabler/icons-react'\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport {\n    type ComponentPropsWithRef,\n    createContext,\n    type KeyboardEvent,\n    use,\n    useCallback,\n    useEffect,\n    useState\n} from 'react'\nimport { Button, composeRenderProps, ListBox, ListBoxItem, ListBoxSection } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselContextProps = {\n    carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n    api: ReturnType<typeof useEmblaCarousel>[1]\n    scrollPrev: () => void\n    scrollNext: () => void\n    canScrollPrev: boolean\n    canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = createContext<CarouselContextProps | null>(null)\n\nconst useCarousel = () => {\n    const context = use(CarouselContext)\n\n    if (!context) {\n        throw new Error('useCarousel must be used within a <Carousel />')\n    }\n\n    return context\n}\n\ninterface CarouselRootProps {\n    CarouselContent?: typeof CarouselContent\n    CarouselHandler?: typeof CarouselHandler\n    CarouselItem?: typeof CarouselItem\n}\n\ninterface CarouselProps extends CarouselRootProps, ComponentPropsWithRef<'div'> {\n    opts?: CarouselOptions\n    plugins?: CarouselPlugin\n    orientation?: 'horizontal' | 'vertical'\n    setApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = ({\n    orientation = 'horizontal',\n    opts,\n    setApi,\n    plugins,\n    className,\n    children,\n    ...props\n}: CarouselProps) => {\n    const [carouselRef, api] = useEmblaCarousel(\n        {\n            ...opts,\n            axis: orientation === 'horizontal' ? 'x' : 'y'\n        },\n        plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = useState(false)\n    const [canScrollNext, setCanScrollNext] = useState(false)\n\n    const onSelect = useCallback((api: CarouselApi) => {\n        if (!api) {\n            return\n        }\n\n        setCanScrollPrev(api.canScrollPrev())\n        setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = useCallback(() => {\n        api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = useCallback(() => {\n        api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = useCallback(\n        (event: KeyboardEvent<HTMLDivElement>) => {\n            if (event.key === 'ArrowLeft') {\n                event.preventDefault()\n                scrollPrev()\n            } else if (event.key === 'ArrowRight') {\n                event.preventDefault()\n                scrollNext()\n            }\n        },\n        [scrollPrev, scrollNext]\n    )\n\n    useEffect(() => {\n        if (!api || !setApi) {\n            return\n        }\n\n        setApi(api)\n    }, [api, setApi])\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        onSelect(api)\n        api.on('reInit', onSelect)\n        api.on('select', onSelect)\n\n        return () => {\n            api?.off('select', onSelect)\n        }\n    }, [api, onSelect])\n\n    return (\n        <CarouselContext.Provider\n            value={{\n                carouselRef,\n                api: api,\n                opts,\n                orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n                scrollPrev,\n                scrollNext,\n                canScrollPrev,\n                canScrollNext\n            }}\n        >\n            <div className={cn('relative', className)} onKeyDownCapture={handleKeyDown} role='region' {...props}>\n                {children}\n            </div>\n        </CarouselContext.Provider>\n    )\n}\n\nconst CarouselContent = <T extends object>({ className, ...props }: ListBoxSectionProps<T>) => {\n    const { carouselRef, orientation } = useCarousel()\n\n    return (\n        <ListBox\n            aria-label='Slides'\n            className='overflow-hidden'\n            layout={orientation === 'vertical' ? 'stack' : 'grid'}\n            orientation={orientation}\n            ref={carouselRef}\n        >\n            <ListBoxSection\n                className={cn('flex', orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col', className)}\n                {...props}\n            />\n        </ListBox>\n    )\n}\n\nconst CarouselItem = ({ className, ...props }: ListBoxItemProps) => {\n    const { orientation } = useCarousel()\n\n    return (\n        <ListBoxItem\n            aria-label={`Slide ${props.id}`}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group relative min-w-0 shrink-0 grow-0 basis-full outline-hidden',\n                    orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CarouselHandler = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { orientation, scrollPrev, canScrollPrev, scrollNext, canScrollNext } = useCarousel()\n    return (\n        <div\n            className={cn(\n                'relative z-10 my-4 flex items-center gap-x-2',\n                orientation === 'horizontal' ? 'justify-end' : 'justify-center',\n                className\n            )}\n            slot='carousel-handler'\n            {...props}\n        >\n            <Button\n                aria-label='Previous Slide'\n                className='inline-flex size-7 shrink-0 orientation-vertical:rotate-90 items-center justify-center rounded-md border bg-background pressed:bg-accent/80 pressed:text-accent-foreground text-foreground shadow-sm outline-hidden hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 focus-visible:ring-ring/50 disabled:pointer-events-none disabled:opacity-50'\n                data-handler='previous'\n                isDisabled={!canScrollPrev}\n                onPress={scrollPrev}\n            >\n                <IconChevronLeft />\n            </Button>\n            <Button\n                aria-label='Next Slide'\n                className='inline-flex size-7 shrink-0 orientation-vertical:rotate-90 items-center justify-center rounded-md border bg-background pressed:bg-accent/80 pressed:text-accent-foreground text-foreground shadow-sm outline-hidden hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 focus-visible:ring-ring/50 disabled:pointer-events-none disabled:opacity-50'\n                data-handler='next'\n                isDisabled={!canScrollNext}\n                onPress={scrollNext}\n            >\n                <IconChevronRight />\n            </Button>\n        </div>\n    )\n}\n\nCarousel.Content = CarouselContent\nCarousel.Handler = CarouselHandler\nCarousel.Item = CarouselItem\n\nexport { Carousel }\nexport type { CarouselApi }\n"
  },
  "sonner": {
    "component": "@/components/ui/sonner",
    "raw": "import { Toaster, type ToasterProps } from 'sonner'\nimport { useTheme } from '@/components/providers'\n\nconst Toast = ({ ...props }: ToasterProps) => {\n    const { theme = 'system' } = useTheme()\n    return (\n        <Toaster\n            className='toaster group'\n            richColors\n            theme={theme as ToasterProps['theme']}\n            toastOptions={{\n                className:\n                    '*:[svg]:self-start *:[svg]:shrink-0 font-sans rounded-lg! has-data-description:*:[svg]:mt-1 *:[svg]:mt-0.5 backdrop-blur-2xl'\n            }}\n            {...props}\n        />\n    )\n}\n\nexport { Toast }\nexport type { ToasterProps }\n"
  },
  "toast": {
    "component": "@/components/ui/toast",
    "raw": "'use client'\n\nimport type { ToastOptions } from 'react-aria-components'\nimport { IconAlertCircle, IconAlertTriangle, IconCircleCheck, IconInfoCircle, IconX } from '@tabler/icons-react'\nimport { type ReactNode, useCallback, useEffect, useState } from 'react'\nimport {\n    Button,\n    Text,\n    UNSTABLE_ToastContent as ToastContent,\n    UNSTABLE_Toast as Toaster,\n    UNSTABLE_ToastQueue as ToastQueue,\n    UNSTABLE_ToastRegion as ToastRegion\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\ninterface ToastContentProps {\n    title: string\n    description?: string\n    action?: () => void\n    actionLabel?: ReactNode\n    altAction?: () => void\n    altActionLabel?: ReactNode\n    type: 'default' | 'success' | 'error' | 'info' | 'warning'\n}\n\nconst queue = new ToastQueue<ToastContentProps>({\n    wrapUpdate(fn) {\n        if ('startViewTransition' in document) {\n            document.startViewTransition(() => fn())\n        } else fn()\n    },\n    maxVisibleToasts: 5\n})\n\nconst ToastProvider = () => {\n    const [isHovered, setIsHovered] = useState(false)\n    return (\n        <>\n            <style>{`\n                    .toast { view-transition-class: toast; }\n                    @media screen and (max-width: 768px) {\n                        ::view-transition-new(.toast):only-child { animation: slide-down 300ms; }\n                        ::view-transition-old(.toast):only-child { animation: slide-up 300ms; } \n                    }\n                    @media screen and (min-width: 768px) {\n                        ::view-transition-new(.toast):only-child { animation: slide-left 300ms; }\n                        ::view-transition-old(.toast):only-child { animation: slide-right 300ms; } \n                    }\n                    @keyframes slide-right { to { translate: 100% 0; opacity: 0; } }\n                    @keyframes slide-left { from { translate: 100% 0; opacity: 0; } }\n                    @keyframes slide-up { to { translate: 0 -100%; opacity: 0; } }\n                    @keyframes slide-down { from { translate: 0 -100%; opacity: 0; } }\n           `}</style>\n            <ToastRegion\n                className={cn(\n                    'fixed top-0 z-[9999] flex h-fit w-full flex-col-reverse items-center gap-3 p-4 sm:top-auto sm:right-2 sm:bottom-2 sm:w-fit sm:items-end'\n                )}\n                queue={queue}\n            >\n                {({ toast }) => (\n                    <Toaster\n                        className={cn('toast w-full will-change-transform sm:w-fit sm:min-w-xs')}\n                        key={toast.key}\n                        style={{\n                            viewTransitionName: toast.key\n                        }}\n                        toast={toast}\n                    >\n                        <div\n                            className={cn('flex flex-col gap-2 rounded-lg border p-4', {\n                                'border-success-border bg-success-background text-success-foreground **:data-loader:stroke-success-foreground':\n                                    toast.content.type === 'success',\n                                'border-error-border bg-error-background text-error-foreground **:data-loader:stroke-error-foreground':\n                                    toast.content.type === 'error',\n                                'border-info-border bg-info-background text-info-foreground **:data-loader:stroke-info-foreground':\n                                    toast.content.type === 'info',\n                                'border-warning-border bg-warning-background text-warning-foreground **:data-loader:stroke-warning-foreground':\n                                    toast.content.type === 'warning',\n                                'bg-background text-foreground': toast.content.type === 'default'\n                            })}\n                            key={toast.key}\n                            onMouseEnter={() => setIsHovered(true)}\n                            onMouseLeave={() => setIsHovered(false)}\n                            role='none'\n                        >\n                            <div\n                                className={cn('flex items-start gap-2', {\n                                    'items-center': !toast.content.description\n                                })}\n                            >\n                                {toast.content.type === 'success' ? (\n                                    <IconCircleCheck className='shrink-0' />\n                                ) : toast.content.type === 'error' ? (\n                                    <IconAlertCircle className='shrink-0' />\n                                ) : toast.content.type === 'info' ? (\n                                    <IconInfoCircle className='shrink-0' />\n                                ) : toast.content.type === 'warning' ? (\n                                    <IconAlertTriangle className='shrink-0' />\n                                ) : null}\n                                <ToastContent className='flex w-full flex-col'>\n                                    <Text className='font-medium text-sm tracking-tight' slot='title'>\n                                        {toast.content.title}\n                                    </Text>\n                                    {toast.content.description && (\n                                        <Text className='text-xs' slot='description'>\n                                            {toast.content.description}\n                                        </Text>\n                                    )}\n                                </ToastContent>\n                                <div className='-translate-y-1/2 absolute top-1 right-1 translate-x-1/2'>\n                                    <CountdownButton isPaused={isHovered} timeout={toast.timeout} />\n                                </div>\n                            </div>\n                            {(toast.content.action || toast.content.altAction) && (\n                                <div className='flex items-center justify-start gap-2'>\n                                    {toast.content.action && (\n                                        <Button\n                                            className={cn(\n                                                'flex cursor-pointer items-center justify-center gap-x-1.5 rounded-lg border px-2 py-1 text-sm outline-hidden pressed:brightness-90 backdrop-blur-2xl hover:brightness-80 focus-visible:ring-4 focus-visible:ring-ring *:[svg]:size-3',\n                                                {\n                                                    'border-green-500 bg-green-500 text-white':\n                                                        toast.content.type === 'success',\n                                                    'border-rose-500 bg-rose-500 text-white':\n                                                        toast.content.type === 'error',\n                                                    'border-blue-500 bg-blue-500 text-white':\n                                                        toast.content.type === 'info' ||\n                                                        toast.content.type === 'default',\n                                                    'border-amber-500 bg-amber-500 text-white':\n                                                        toast.content.type === 'warning'\n                                                }\n                                            )}\n                                            onPress={toast.content.action}\n                                            slot='close'\n                                        >\n                                            {toast.content.actionLabel || 'Action'}\n                                        </Button>\n                                    )}\n                                    {toast.content.altAction && (\n                                        <Button\n                                            className='flex cursor-pointer items-center justify-center gap-x-1.5 rounded-lg border bg-background pressed:bg-muted/60 px-2 py-1 text-foreground text-sm outline-hidden hover:bg-muted/40 focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-primary/20 *:[svg]:size-3'\n                                            onPress={toast.content.altAction}\n                                            slot='close'\n                                        >\n                                            {toast.content.altActionLabel || 'Cancel'}\n                                        </Button>\n                                    )}\n                                </div>\n                            )}\n                        </div>\n                    </Toaster>\n                )}\n            </ToastRegion>\n        </>\n    )\n}\n\ninterface TimeoutButtonProps {\n    timeout: number | undefined\n    isPaused?: boolean\n}\n\nconst CountdownButton = ({ timeout, isPaused }: TimeoutButtonProps) => {\n    const [timeLeft, setTimeLeft] = useState<number>(timeout ? timeout - 100 : -1)\n    const radius = 10\n    const circumference = 2 * Math.PI * radius\n\n    const calculateProgress = useCallback(() => {\n        return timeout && (timeLeft / timeout) * circumference\n    }, [timeLeft, timeout, circumference])\n\n    useEffect(() => {\n        if (timeLeft <= 0 || isPaused) return\n\n        const timer = setInterval(() => {\n            setTimeLeft((prevTimeLeft) => prevTimeLeft - 100)\n        }, 100)\n\n        return () => clearInterval(timer)\n    }, [isPaused, timeLeft])\n\n    return (\n        <Button\n            className='relative z-10 inline-flex size-6 shrink-0 cursor-pointer items-center justify-center rounded-full bg-background pressed:text-foreground text-muted-foreground shadow-sm outline-hidden hover:text-foreground focus-visible:ring-2 focus-visible:ring-ring dark:border'\n            slot='close'\n        >\n            <IconX className='size-3.5' />\n            {timeout ? (\n                <svg className='-rotate-90 absolute size-fit'>\n                    <circle cx='50%' cy='50%' fill='none' r={radius} stroke='current' strokeWidth='2' />\n                    <circle\n                        cx='50%'\n                        cy='50%'\n                        data-loader\n                        fill='none'\n                        r={radius}\n                        stroke='currentColor'\n                        strokeDasharray={circumference}\n                        strokeDashoffset={calculateProgress()}\n                        strokeLinecap='round'\n                        strokeWidth='2'\n                        style={{ transition: 'stroke-dashoffset 0.1s linear' }}\n                    />\n                </svg>\n            ) : null}\n        </Button>\n    )\n}\n\nconst toast = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'default' }, { ...options, timeout: options?.timeout ?? 3000 })\n\ntoast.success = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'success' }, { ...options, timeout: options?.timeout ?? 3000 })\n\ntoast.error = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'error' }, { ...options, timeout: options?.timeout ?? 3000 })\n\ntoast.info = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'info' }, { ...options, timeout: options?.timeout ?? 3000 })\n\ntoast.warning = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'warning' }, { ...options, timeout: options?.timeout ?? 3000 })\n\nexport { ToastProvider, toast }\n"
  },
  "drawer": {
    "component": "@/components/ui/drawer",
    "raw": "'use client'\n\nimport type { ButtonProps, DialogProps, DialogTriggerProps, ModalOverlayProps } from 'react-aria-components'\nimport { AnimatePresence, motion } from 'motion/react'\nimport { type ReactNode, use } from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogTrigger,\n    ModalOverlay,\n    OverlayTriggerStateContext,\n    Modal as RACModal\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { DialogBody, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from './dialog'\n\nconst Modal = motion.create(RACModal)\nconst Overlay = motion.create(ModalOverlay)\n\nconst Drawer = (props: DialogTriggerProps) => <DialogTrigger {...props} />\n\ninterface DrawerContentProps\n    extends Omit<ModalOverlayProps, 'className' | 'children' | 'isDismissable'>,\n        Pick<DialogProps, 'aria-label' | 'aria-labelledby' | 'role' | 'children' | 'className'> {\n    isFloating?: boolean\n    className?: string\n    style?: React.CSSProperties\n    side?: 'top' | 'bottom' | 'left' | 'right'\n    withNotch?: boolean\n}\n\nconst DrawerContent = ({\n    side = 'bottom',\n    isFloating = false,\n    withNotch = true,\n    children,\n    className,\n    ...props\n}: DrawerContentProps) => {\n    const state = use(OverlayTriggerStateContext)!\n\n    return (\n        <AnimatePresence>\n            {(props?.isOpen || state?.isOpen) && (\n                <Overlay\n                    animate={{\n                        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                        backdropFilter: 'blur(4px)'\n                    }}\n                    className='fixed inset-0 z-50 will-change-auto [--visual-viewport-vertical-padding:32px]'\n                    exit={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    initial={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    isDismissable\n                    isOpen={props?.isOpen || state?.isOpen}\n                    onOpenChange={props?.onOpenChange || state?.setOpen}\n                >\n                    {({ state }) => (\n                        <Modal\n                            animate={{ x: 0, y: 0 }}\n                            className={cn(\n                                'fixed max-h-full touch-none overflow-hidden bg-background align-middle text-foreground shadow-sm will-change-transform',\n                                side === 'top' &&\n                                    `${\n                                        isFloating\n                                            ? 'inset-x-2 top-2 rounded-lg border'\n                                            : 'inset-x-0 top-0 rounded-b-2xl border-b'\n                                    }`,\n                                side === 'right' &&\n                                    `w-full max-w-xs overflow-y-auto **:[[slot=header]]:text-left ${\n                                        isFloating\n                                            ? 'inset-y-2 right-2 rounded-lg border'\n                                            : 'inset-y-0 right-0 h-auto border-l'\n                                    }`,\n                                side === 'bottom' &&\n                                    `${\n                                        isFloating\n                                            ? 'inset-x-2 bottom-2 rounded-lg border'\n                                            : 'inset-x-0 bottom-0 rounded-t-2xl border-t'\n                                    }`,\n                                side === 'left' &&\n                                    `w-full max-w-xs overflow-y-auto **:[[slot=header]]:text-left ${\n                                        isFloating\n                                            ? 'inset-y-2 left-2 rounded-lg border'\n                                            : 'inset-y-0 left-0 h-auto border-r'\n                                    }`,\n                                className\n                            )}\n                            drag={side === 'left' || side === 'right' ? 'x' : 'y'}\n                            dragConstraints={{ top: 0, bottom: 0, left: 0, right: 0 }}\n                            dragElastic={{\n                                top: side === 'top' ? 1 : 0,\n                                bottom: side === 'bottom' ? 1 : 0,\n                                left: side === 'left' ? 1 : 0,\n                                right: side === 'right' ? 1 : 0\n                            }}\n                            dragPropagation\n                            dragTransition={{ bounceStiffness: 600, bounceDamping: 20 }}\n                            exit={{\n                                x: side === 'left' ? '-100%' : side === 'right' ? '100%' : 0,\n                                y: side === 'top' ? '-100%' : side === 'bottom' ? '100%' : 0\n                            }}\n                            initial={{\n                                x: side === 'left' ? '-100%' : side === 'right' ? '100%' : 0,\n                                y: side === 'top' ? '-100%' : side === 'bottom' ? '100%' : 0\n                            }}\n                            onDragEnd={(_, { offset, velocity }) => {\n                                if (side === 'bottom' && (velocity.y > 150 || offset.y > screen.height * 0.25)) {\n                                    state.close()\n                                }\n                                if (side === 'top' && (velocity.y < -150 || offset.y < screen.height * 0.25)) {\n                                    state.close()\n                                }\n                                if (side === 'left' && velocity.x < -150) {\n                                    state.close()\n                                }\n                                if (side === 'right' && velocity.x > 150) {\n                                    state.close()\n                                }\n                            }}\n                            transition={{ duration: 0.15, ease: 'easeInOut' }}\n                            whileDrag={{ cursor: 'grabbing' }}\n                        >\n                            <Dialog\n                                aria-label='Drawer'\n                                className={cn(\n                                    'relative flex flex-col overflow-hidden outline-hidden will-change-auto',\n                                    side === 'top' || side === 'bottom'\n                                        ? 'mx-auto max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] max-w-lg'\n                                        : 'h-full'\n                                )}\n                                role='dialog'\n                            >\n                                {withNotch && side === 'bottom' && (\n                                    <div className='notch sticky top-0 mx-auto mt-2.5 h-1.5 w-10 shrink-0 touch-pan-y rounded-full bg-foreground/20' />\n                                )}\n                                {children as ReactNode}\n                                {withNotch && side === 'top' && (\n                                    <div className='notch sticky bottom-0 mx-auto mb-2.5 h-1.5 w-10 shrink-0 touch-pan-y rounded-full bg-foreground/20' />\n                                )}\n                            </Dialog>\n                        </Modal>\n                    )}\n                </Overlay>\n            )}\n        </AnimatePresence>\n    )\n}\n\nDrawer.Trigger = (props: ButtonProps) => <Button {...props} />\n\nDrawer.Content = DrawerContent\n\nDrawer.Header = DialogHeader\nDrawer.Title = DialogTitle\nDrawer.Description = DialogDescription\nDrawer.Body = DialogBody\nDrawer.Footer = DialogFooter\n\nexport { Drawer }\nexport type { DrawerContentProps }\n"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "'use client'\n\nimport type { ComponentPropsWithRef } from 'react'\nimport { tv, type VariantProps } from 'tailwind-variants'\nimport { cn } from '@/lib/utils'\n\nconst badgeStyle = tv({\n    base: 'inline-flex w-fit shrink-0 items-center justify-center gap-1 overflow-hidden whitespace-nowrap rounded-md border px-2 py-0.5 font-medium text-xs transition-[color,box-shadow] focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50 aria-invalid:border-destructive aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 *:[svg]:pointer-events-none *:[svg]:size-3',\n    variants: {\n        variant: {\n            default: 'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n            secondary: 'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n            destructive:\n                'border-transparent bg-destructive text-white focus-visible:ring-destructive/20 dark:bg-destructive/60 dark:focus-visible:ring-destructive/40 [a&]:hover:bg-destructive/90',\n            outline: 'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground'\n        }\n    },\n    defaultVariants: {\n        variant: 'default'\n    }\n})\n\nconst Badge = ({ className, variant, ...props }: ComponentPropsWithRef<'span'> & VariantProps<typeof badgeStyle>) => (\n    <span className={cn(badgeStyle({ variant }), className)} data-slot='badge' {...props} />\n)\n\nexport { Badge, badgeStyle }\n"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\nimport {\n    composeRenderProps,\n    TimeField as RACTimeField,\n    type TimeFieldProps as RACTimeFieldProps,\n    type TimeValue\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\n\ninterface TimeFieldProps<T extends TimeValue> extends RACTimeFieldProps<T>, FieldProps {\n    prefix?: ReactNode\n    suffix?: ReactNode\n    ref?: Ref<HTMLDivElement>\n}\n\nconst TimeField = <T extends TimeValue>({\n    prefix,\n    suffix,\n    label,\n    className,\n    description,\n    errorMessage,\n    ref,\n    ...props\n}: TimeFieldProps<T>) => {\n    return (\n        <RACTimeField\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            isInvalid={props.isInvalid || !!errorMessage}\n            ref={ref}\n            {...props}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup isDisabled={isDisabled} isInvalid={isInvalid}>\n                        {prefix ? <span data-prefix={true}>{prefix}</span> : null}\n                        <DateInput className='flex w-fit min-w-28 justify-around whitespace-nowrap p-2 sm:text-sm' />\n                        {suffix ? <span data-suffix={true}>{suffix}</span> : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACTimeField>\n    )\n}\n\nexport { TimeField }\n"
  },
  "code": {
    "component": "@/components/ui/code",
    "raw": "'use client'\n\nimport { IconCheck, IconCopy } from '@tabler/icons-react'\nimport { useEffect, useState } from 'react'\nimport rehypePrettyCode, { type Theme } from 'rehype-pretty-code'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport { unified } from 'unified'\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\n\ninterface CodeProps {\n    lang?: string | { block?: string; inline?: string }\n    code: string\n    theme?: Theme | { light: Theme; dark: Theme }\n    className?: string\n    highlight?: number[] | string[]\n    lineNumbers?: boolean\n    filename?: string\n}\n\nconst Code = ({\n    lang = 'ts',\n    code,\n    theme = 'github-dark',\n    highlight,\n    lineNumbers = true,\n    filename,\n    className\n}: CodeProps) => {\n    const [copied, setCopied] = useState<boolean>(false)\n\n    const highlightLine = highlight?.join(',').replaceAll(' ', '')\n\n    async function copyToClipboard(text: string) {\n        try {\n            await navigator.clipboard.writeText(text)\n        } catch (err) {\n            console.error('Failed to copy: ', err)\n        }\n    }\n\n    const copyCode = async () => {\n        await copyToClipboard(code).then(() => {\n            setCopied(true)\n            setTimeout(() => setCopied(false), 2000)\n        })\n    }\n\n    const [formattedCode, setFormattedCode] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    useEffect(() => {\n        const processCode = async () => {\n            try {\n                const file = await unified()\n                    .use(remarkParse)\n                    .use(remarkRehype, { allowDangerousHtml: true })\n                    .use(rehypePrettyCode, {\n                        keepBackground: true,\n                        theme,\n                        defaultLang: lang\n                    })\n                    .use(rehypeStringify, { allowDangerousHtml: true })\n                    .process(\n                        `\\`\\`\\`${lang} ${lineNumbers && 'showLineNumbers'} ${filename ? `title=\"${filename}\"` : ''} \\{${highlightLine}\\}\\n${code}\\n\\`\\`\\``\n                    )\n                setFormattedCode(String(file))\n            } catch (err) {\n                setError('Failed to process code. Please check the configuration.')\n                console.error(err)\n            }\n        }\n        processCode().catch(console.error)\n    }, [code, theme, lang, highlightLine, filename, lineNumbers])\n\n    if (error) {\n        setFormattedCode(error)\n    }\n\n    return (\n        <div className={cn('relative overflow-hidden rounded-lg', className)}>\n            <CopyButton className='absolute top-1 right-1' copied={copied} onPress={copyCode} />\n            <style>\n                {`pre code[data-line-numbers] { counter-reset: line; } pre code[data-line-numbers] > [data-line]::before { counter-increment: line; content: counter(line); margin-right: 2rem; color: #71717b; display: inline-block; text-align: right; width: 1rem; } pre code[data-line-numbers-max-digits=\"2\"] > [data-line]::before { width: 2rem; } pre code[data-line-numbers-max-digits=\"3\"] > [data-line]::before { width: 3rem; } code, code span { color: var(--shiki-light); background-color: var(--shiki-light-background); } .dark { code, code span { color: var(--shiki-dark); background-color: var(--shiki-dark-background); } } [data-highlighted-line] { background: rgba(200, 200, 255, 0.2) !important; border-left-color: color-mix(in oklab, var(--primary) 80%, transparent) !important; }`}\n            </style>\n            <section\n                className='text-sm **:[code]:*:pr-12 **:[code]:*:pl-3 **:[code]:py-2.5 **:[code]:leading-relaxed **:[figcaption]:bg-foreground **:[figcaption]:p-3 **:[figcaption]:text-muted-foreground **:[pre]:overflow-auto'\n                dangerouslySetInnerHTML={{ __html: formattedCode }}\n            />\n        </div>\n    )\n}\n\nconst CopyButton = ({ copied, className, onPress }: { copied: boolean; className?: string; onPress?: () => void }) => (\n    <Button\n        aria-label={copied ? 'Copied' : 'Copy'}\n        className={className}\n        icon\n        onPress={onPress}\n        size='sm'\n        variant='outline'\n    >\n        <IconCopy\n            className={cn('size-4 rotate-0 scale-100 transition-all duration-200', copied && 'rotate-90 scale-0')}\n        />\n        <IconCheck\n            className={cn(\n                'absolute size-4 rotate-90 scale-0 transition-all duration-200',\n                copied && 'rotate-0 scale-100'\n            )}\n        />\n    </Button>\n)\n\nexport { Code, CopyButton }\n"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport type { SliderProps as RACSliderProps, SliderThumbProps, SliderTrackProps } from 'react-aria-components'\nimport { type HTMLAttributes, type Ref, use } from 'react'\nimport {\n    composeRenderProps,\n    Slider as RACSlider,\n    SliderThumb as RACSliderThumb,\n    SliderTrack as RACSliderTrack,\n    SliderOutput,\n    SliderStateContext\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, Label } from './form'\n\ninterface SliderProps extends RACSliderProps, FieldProps {\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Slider = ({ orientation = 'horizontal', className, ref, ...props }: SliderProps) => {\n    return (\n        <RACSlider\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'group/field relative flex touch-none select-none flex-col gap-y-3',\n                    orientation === 'horizontal' ? 'w-full min-w-56' : 'h-full min-h-56 w-1.5 items-center',\n                    className\n                )\n            )}\n            orientation={orientation}\n            ref={ref}\n            {...props}\n        >\n            {({ orientation, state }) => (\n                <>\n                    <div className='flex text-foreground'>\n                        {props.label && <Label>{props.label}</Label>}\n                        <SliderOutput\n                            className={cn(\n                                'text-muted-foreground text-sm tabular-nums',\n                                orientation === 'horizontal' ? 'ml-auto' : 'mx-auto'\n                            )}\n                        >\n                            {state.values.map((_, i) => state.getThumbValueLabel(i)).join(' – ')}\n                        </SliderOutput>\n                    </div>\n                    <SliderTrack>\n                        <SliderFiller />\n                        {state.values.map((_, i) => (\n                            <SliderThumb index={i} key={i} />\n                        ))}\n                    </SliderTrack>\n                    {props.description && <Description>{props.description}</Description>}\n                    <FieldError>{props.errorMessage}</FieldError>\n                </>\n            )}\n        </RACSlider>\n    )\n}\n\nconst SliderTrack = ({ className, ...props }: SliderTrackProps) => {\n    return (\n        <RACSliderTrack\n            {...props}\n            className={composeRenderProps(className, (className, { orientation, isDisabled }) =>\n                cn([\n                    'relative cursor-pointer rounded-full bg-muted',\n                    orientation === 'horizontal' ? 'h-1.5 w-full' : 'w-1.5 flex-1/2',\n                    isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer',\n                    className\n                ])\n            )}\n        />\n    )\n}\n\nconst SliderFiller = ({ className, ...props }: HTMLAttributes<HTMLDivElement>) => {\n    const state = use(SliderStateContext)\n    const { values, orientation, getThumbPercent } = state || {}\n\n    const getStyle = () => {\n        const percent0 = getThumbPercent ? getThumbPercent(0) * 100 : 0\n        const percent1 = getThumbPercent ? getThumbPercent(1) * 100 : 0\n\n        if (values?.length === 1) {\n            return orientation === 'horizontal' ? { width: `${percent0}%` } : { height: `${percent0}%` }\n        }\n        return orientation === 'horizontal'\n            ? { left: `${percent0}%`, width: `${Math.abs(percent0 - percent1)}%` }\n            : { bottom: `${percent0}%`, height: `${Math.abs(percent0 - percent1)}%` }\n    }\n\n    return (\n        <div\n            className={cn(\n                'pointer-events-none absolute rounded-full bg-primary',\n                orientation === 'horizontal' ? 'h-full' : 'bottom-0 w-full',\n                className\n            )}\n            style={getStyle()}\n            {...props}\n        />\n    )\n}\n\nconst SliderThumb = ({ className, ...props }: SliderThumbProps) => {\n    return (\n        <RACSliderThumb\n            {...props}\n            className={composeRenderProps(className, (className, { isFocusVisible, isDragging, isDisabled }) =>\n                cn(\n                    'top-1/2 left-1/2 size-5 rounded-full border border-border bg-background outline-hidden transition',\n                    isFocusVisible && 'border-primary ring-4 ring-ring',\n                    isDragging && 'cursor-grabbing border-primary ring-4 ring-ring',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n        />\n    )\n}\n\nexport { Slider }\n"
  },
  "description-list": {
    "component": "@/components/ui/description-list",
    "raw": "import type { ComponentPropsWithRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nconst DL = ({ className, ...props }: ComponentPropsWithRef<'dl'>) => {\n    return (\n        <dl\n            className={cn(\n                'grid grid-cols-1 text-base/6 sm:grid-cols-[min(50%,calc(var(--spacing)*80))_auto] sm:text-sm/6',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst DT = ({ className, ...props }: ComponentPropsWithRef<'dt'>) => {\n    return (\n        <dt\n            className={cn('col-start-1 border-t pt-3 text-muted-foreground first:border-none sm:py-3', className)}\n            {...props}\n        />\n    )\n}\n\nconst DD = ({ className, ...props }: ComponentPropsWithRef<'dd'>) => {\n    return (\n        <dd\n            className={cn('pt-1 pb-3 text-foreground sm:border-t sm:nth-2:border-none sm:py-3', className)}\n            {...props}\n        />\n    )\n}\n\nDL.T = DT\nDL.D = DD\n\nexport { DL }\n"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "import type { ComponentPropsWithRef } from 'react'\nimport { cn } from '@/lib/utils'\n\nconst Card = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return (\n        <div\n            className={cn(\n                'flex flex-col rounded-lg border bg-card text-card-foreground shadow-sm has-[table]:overflow-hidden not-has-[[slot=footer]]:**:[[slot=content]]:pb-6 **:[[slot=table]]:rounded-b-none **:[[slot=table]]:border-x-0',\n                className\n            )}\n            data-slot='card'\n            {...props}\n        />\n    )\n}\n\ninterface HeaderProps extends ComponentPropsWithRef<'div'> {\n    title?: string\n    description?: string\n}\n\nconst CardHeader = ({ className, title, description, children, ...props }: HeaderProps) => (\n    <div\n        className={cn(\n            'grid items-start gap-1.5 p-6 md:auto-rows-min md:grid-rows-[auto_auto] md:has-[[slot=action]]:grid-cols-[1fr_auto]',\n            className\n        )}\n        slot='header'\n        {...props}\n    >\n        {title && <CardTitle>{title}</CardTitle>}\n        {description && <CardDescription>{description}</CardDescription>}\n        {!title && typeof children === 'string' ? <CardTitle>{children}</CardTitle> : children}\n    </div>\n)\n\nconst CardTitle = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return (\n        <div className={cn('font-semibold text-lg leading-none tracking-tight', className)} slot='title' {...props} />\n    )\n}\n\nconst CardDescription = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return (\n        <div className={cn('text-muted-foreground text-sm md:row-start-2', className)} slot='description' {...props} />\n    )\n}\n\nconst CardAction = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return (\n        <div\n            className={cn(\n                'flex items-center gap-2 self-start justify-self-end md:col-start-2 md:row-span-2 md:row-start-1',\n                className\n            )}\n            slot='action'\n            {...props}\n        />\n    )\n}\n\nconst CardContent = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return <div className={cn('px-6 has-[table]:p-0', className)} slot='content' {...props} />\n}\n\nconst CardFooter = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return <div className={cn('flex items-center p-6', className)} slot='footer' {...props} />\n}\n\nCard.Content = CardContent\nCard.Description = CardDescription\nCard.Footer = CardFooter\nCard.Header = CardHeader\nCard.Title = CardTitle\nCard.Action = CardAction\n\nexport { Card, CardAction, CardContent, CardDescription, CardFooter, CardHeader, CardTitle }\n"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport type { ComponentProps } from 'react'\nimport type { ButtonProps, DialogProps, DialogTriggerProps, ModalOverlayProps } from 'react-aria-components'\nimport { Button, DialogTrigger, Modal as RACModal } from 'react-aria-components'\nimport {\n    Dialog,\n    DialogBody,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogOverlay,\n    DialogTitle,\n    DialogX,\n    modalStyle\n} from './dialog'\n\nconst Modal = (props: DialogTriggerProps) => <DialogTrigger {...props} />\n\ninterface ModalContentProps\n    extends Omit<ComponentProps<typeof RACModal>, 'children'>,\n        Omit<ModalOverlayProps, 'className' | 'children'> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    closeButton?: boolean\n    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | 'full'\n    children?: DialogProps['children']\n    className?: DialogProps['className']\n}\n\nconst ModalContent = ({\n    size = 'lg',\n    role = 'dialog',\n    closeButton = true,\n    className,\n    children,\n    ...props\n}: ModalContentProps) => {\n    const isDismissable = role !== 'alertdialog'\n    return (\n        <DialogOverlay isDismissable={isDismissable} {...props}>\n            <RACModal\n                className={modalStyle({\n                    size\n                })}\n                isDismissable={isDismissable}\n                {...props}\n            >\n                <Dialog aria-label={props['aria-label'] ?? 'Modal'} className={className} role={role}>\n                    {(values) => (\n                        <>\n                            {typeof children === 'function' ? children(values) : children}\n                            {closeButton && isDismissable && <DialogX />}\n                        </>\n                    )}\n                </Dialog>\n            </RACModal>\n        </DialogOverlay>\n    )\n}\n\nconst ModalTrigger = (props: ButtonProps) => <Button {...props} />\nModal.Trigger = ModalTrigger\n\nModal.Content = ModalContent\n\nModal.Header = DialogHeader\nModal.Title = DialogTitle\nModal.Description = DialogDescription\nModal.Footer = DialogFooter\nModal.Body = DialogBody\n\nexport { Modal, ModalContent }\nexport type { ModalContentProps }\n"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\nimport { IconLoader, IconSearch, IconX } from '@tabler/icons-react'\nimport {\n    Button,\n    composeRenderProps,\n    Input,\n    SearchField as RACSearchField,\n    type SearchFieldProps as RACSearchFieldProps\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\n\ninterface SearchFieldProps extends RACSearchFieldProps, FieldProps {\n    isPending?: boolean\n    placeholder?: string\n    ref?: Ref<HTMLDivElement>\n}\n\nconst SearchField = ({\n    className,\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    isPending,\n    ref,\n    ...props\n}: SearchFieldProps) => {\n    return (\n        <RACSearchField\n            aria-label={placeholder ?? props['aria-label'] ?? 'Search...'}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {({ isEmpty }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup isDisabled={props.isDisabled} isInvalid={props.isInvalid || !!errorMessage}>\n                        {isPending ? (\n                            <IconLoader className='ml-2 size-4 shrink-0 animate-spin text-muted-foreground' />\n                        ) : (\n                            <IconSearch className='ml-2 size-4 shrink-0 text-muted-foreground' />\n                        )}\n                        <Input\n                            className='[&::-webkit-search-cancel-button]:hidden'\n                            placeholder={placeholder ?? 'Search...'}\n                        />\n                        {!isEmpty && (\n                            <Button\n                                aria-label='Clear'\n                                className='mr-2 inline-flex cursor-pointer items-center justify-center rounded-md text-muted-foreground outline-offset-4'\n                                type='button'\n                            >\n                                <IconX aria-hidden />\n                            </Button>\n                        )}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACSearchField>\n    )\n}\n\nexport { SearchField }\n"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\nimport {\n    composeRenderProps,\n    type DateInputProps,\n    DateSegment,\n    type DateValue,\n    DateField as RACDateField,\n    type DateFieldProps as RACDateFieldProps,\n    DateInput as RACDateInput\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\n\ninterface DateFieldProps<T extends DateValue> extends RACDateFieldProps<T>, FieldProps {\n    prefix?: ReactNode\n    suffix?: ReactNode\n    ref?: Ref<HTMLDivElement>\n}\n\nconst DateField = <T extends DateValue>({\n    prefix,\n    suffix,\n    label,\n    description,\n    errorMessage,\n    className,\n    ref,\n    ...props\n}: DateFieldProps<T>) => {\n    return (\n        <RACDateField\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            isInvalid={props.isInvalid || !!errorMessage}\n            ref={ref}\n            {...props}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                {prefix ? <span data-slot='prefix'>{prefix}</span> : null}\n                <DateInput />\n                {suffix ? <span data-slot='suffix'>{suffix}</span> : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </RACDateField>\n    )\n}\n\nconst DateInput = ({ className, ...props }: Omit<DateInputProps, 'children'>) => {\n    return (\n        <RACDateInput\n            className={composeRenderProps(className, (className) =>\n                cn('bg-transparent p-2 text-base disabled:opacity-50 lg:text-sm', className)\n            )}\n            {...props}\n        >\n            {(segment) => (\n                <DateSegment\n                    className={cn(\n                        'inline shrink-0 rounded-sm p-0.5 type-literal:px-0 text-foreground tabular-nums tracking-wider caret-transparent outline-0 sm:text-sm sm:uppercase',\n                        segment.isPlaceholder && 'text-muted-foreground',\n                        'underline-offset-4 invalid:not-type-literal:text-destructive/70 focus:text-primary focus:underline invalid:focus:text-destructive'\n                    )}\n                    segment={segment}\n                />\n            )}\n        </RACDateInput>\n    )\n}\n\nexport { DateField, DateInput }\n"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "'use client'\n\nimport type { ComponentPropsWithRef } from 'react'\nimport { IconX } from '@tabler/icons-react'\nimport {\n    Button,\n    type ButtonProps,\n    composeRenderProps,\n    Heading,\n    type ModalOverlayProps,\n    Dialog as RACDialog,\n    type DialogProps as RACDialogProps,\n    type HeadingProps as RACHeadingProps,\n    ModalOverlay as RACModalOverlay,\n    type TextProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { cn } from '@/lib/utils'\n\nconst overlayStyle = tv({\n    base: [\n        'fixed inset-0 isolate z-50 bg-black/50 duration-200 [--visual-viewport-vertical-padding:32px]',\n        'entering:fade-in entering:animate-in entering:ease-out',\n        'exiting:fade-out exiting:animate-out exiting:ease-in'\n    ]\n})\n\nconst sheetStyle = tv({\n    base: [\n        'fixed z-50 bg-background shadow-lg transition',\n        'entering:animate-in entering:duration-300 entering:ease-out',\n        'exiting:animate-out exiting:duration-200 exiting:ease-in'\n    ],\n    variants: {\n        side: {\n            top: 'entering:slide-in-from-top exiting:slide-out-to-top inset-x-0 top-0 rounded-b-lg border-b',\n            bottom: 'entering:slide-in-from-bottom exiting:slide-out-to-bottom inset-x-0 bottom-0 rounded-t-lg border-t',\n            left: 'entering:slide-in-from-left exiting:slide-out-to-left inset-y-0 left-0 h-full w-3/4 rounded-r-lg border-r sm:max-w-sm',\n            right: 'entering:slide-in-from-right exiting:slide-out-to-right inset-y-0 right-0 h-full w-3/4 rounded-l-lg border-l sm:max-w-sm'\n        }\n    }\n})\n\nconst modalStyle = tv({\n    base: [\n        'sm:-translate-x-1/2 sm:-translate-y-1/2 absolute bottom-0 z-50 h-fit w-full rounded-t-lg bg-background shadow-lg transition duration-200 sm:fixed sm:top-1/2 sm:left-[50vw] sm:rounded-lg sm:border',\n        'entering:fade-in entering:zoom-in-95 entering:slide-in-from-bottom sm:entering:slide-in-from-bottom-0 entering:animate-in entering:ease-out',\n        'exiting:fade-out exiting:zoom-out-95 exiting:slide-out-to-bottom sm:exiting:slide-out-to-bottom-0 exiting:animate-out exiting:ease-in',\n        'ring-1 ring-border'\n    ],\n    variants: {\n        size: {\n            xs: 'sm:max-w-xs',\n            sm: 'sm:max-w-sm',\n            md: 'sm:max-w-md',\n            lg: 'sm:max-w-lg',\n            xl: 'sm:max-w-xl',\n            '2xl': 'sm:max-w-2xl',\n            '3xl': 'sm:max-w-3xl',\n            '4xl': 'sm:max-w-4xl',\n            '5xl': 'sm:max-w-5xl',\n            full: 'max-w-full'\n        }\n    }\n})\n\nconst popoverStyle = tv({\n    base: [\n        'group max-w-xs rounded-lg border bg-popover bg-clip-padding text-popover-foreground shadow-sm transition-transform sm:max-w-3xl sm:text-sm',\n        'entering:fade-in entering:zoom-in-95 entering:animate-in entering:duration-150',\n        'exiting:fade-out exiting:zoom-out-95 exiting:animate-out exiting:duration-100',\n        'entering:placement-left:slide-in-from-right-2 entering:placement-right:slide-in-from-left-2 entering:placement-top:slide-in-from-bottom-2 entering:placement-bottom:slide-in-from-top-2',\n        'exiting:placement-left:slide-out-to-right-2 exiting:placement-right:slide-out-to-left-2 exiting:placement-top:slide-out-to-bottom-2 exiting:placement-bottom:slide-out-to-top-2'\n    ],\n    variants: { isPicker: { true: 'max-h-72 min-w-(--trigger-width) max-w-(--trigger-width) overflow-y-auto p-1' } }\n})\n\nconst Dialog = ({ className, ...props }: RACDialogProps) => (\n    <RACDialog\n        aria-label='Dialog'\n        className={cn(\n            'relative flex max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] flex-col overflow-hidden outline-hidden',\n            className\n        )}\n        slot='dialog'\n        {...props}\n    />\n)\n\nconst DialogOverlay = ({ className, isDismissable = true, ...props }: ModalOverlayProps) => (\n    <RACModalOverlay\n        className={composeRenderProps(className, (className) => overlayStyle({ className }))}\n        isDismissable={isDismissable}\n        isKeyboardDismissDisabled={!isDismissable}\n        {...props}\n    />\n)\n\nconst DialogHeader = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return <div className={cn('flex flex-col p-4 text-center sm:text-left', className)} slot='header' {...props} />\n}\n\nconst DialogTitle = ({ className, ...props }: RACHeadingProps) => (\n    <Heading className={cn('font-semibold text-lg/8', className)} slot='title' {...props} />\n)\n\nconst DialogDescription = ({ className, ...props }: TextProps) => (\n    <p className={cn('text-muted-foreground text-sm', className)} slot='description' {...props} />\n)\n\nconst DialogBody = ({ className, ...props }: ComponentPropsWithRef<'div'>) => (\n    <div\n        className={cn(\n            'isolate flex max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] flex-col overflow-auto px-4 py-1 will-change-scroll',\n            className\n        )}\n        slot='body'\n        {...props}\n    />\n)\n\nconst DialogFooter = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return (\n        <div\n            className={cn(\n                'isolate mt-auto flex flex-col-reverse justify-center gap-2 p-4 sm:flex-row sm:justify-end',\n                className\n            )}\n            slot='footer'\n            {...props}\n        />\n    )\n}\n\nconst DialogX = (props: ButtonProps) => (\n    <Button\n        aria-label='Close'\n        className='absolute top-2 right-2 inline-flex size-8 shrink-0 cursor-pointer items-center justify-center rounded-md bg-background pressed:bg-muted/50 text-muted-foreground outline-hidden hover:bg-muted/40 focus-visible:ring-4 focus-visible:ring-ring'\n        slot='close'\n        {...props}\n    >\n        <IconX />\n    </Button>\n)\n\nexport {\n    Dialog,\n    DialogBody,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogOverlay,\n    DialogTitle,\n    DialogX,\n    modalStyle,\n    popoverStyle,\n    sheetStyle\n}\n"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\n\nimport type { CalendarProps, CalendarState, DateValue, RangeCalendarProps } from 'react-aria-components'\nimport { type CalendarDate, getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { IconChevronLeft, IconChevronRight } from '@tabler/icons-react'\nimport { type ComponentPropsWithRef, use } from 'react'\nimport {\n    Button,\n    CalendarCell,\n    CalendarGrid,\n    CalendarGridBody,\n    CalendarHeaderCell,\n    CalendarStateContext,\n    Heading,\n    Calendar as RACCalendar,\n    CalendarGridHeader as RACCalendarGridHeader,\n    RangeCalendar as RACRangeCalendar,\n    useLocale\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Menu } from './menu'\n\nconst Calendar = <T extends DateValue>(props: CalendarProps<T>) => {\n    const now = today(getLocalTimeZone())\n    return (\n        <RACCalendar {...props}>\n            <CalendarHeader />\n            <CalendarGrid className='w-full **:[td]:px-0 **:[td]:py-[1.5px]'>\n                <CalendarGridHeader />\n                <CalendarGridBody>\n                    {(date) => (\n                        <CalendarCell\n                            className={cn([\n                                'relative flex size-8 shrink-0 cursor-pointer items-center justify-center rounded-lg pressed:bg-accent outside-month:text-muted-foreground pressed:text-accent-foreground text-sm outline-hidden hover:bg-accent/90 hover:text-accent-foreground',\n                                'selected:bg-primary selected:text-primary-foreground selected:invalid:bg-destructive selected:invalid:text-destructive-foreground',\n                                'focus-visible:ring-2 focus-visible:ring-ring/50',\n                                'disabled:pointer-events-none disabled:opacity-50',\n                                date.compare(now) === 0 &&\n                                    'after:-translate-x-1/2 after:pointer-events-none after:absolute after:start-1/2 after:bottom-1 after:z-10 after:size-1 after:rounded-full after:bg-primary selected:after:bg-primary-foreground'\n                            ])}\n                            date={date}\n                        >\n                            {date.day}\n                        </CalendarCell>\n                    )}\n                </CalendarGridBody>\n            </CalendarGrid>\n        </RACCalendar>\n    )\n}\n\nconst RangeCalendar = <T extends DateValue>({ visibleDuration = { months: 1 }, ...props }: RangeCalendarProps<T>) => {\n    const now = today(getLocalTimeZone())\n    return (\n        <RACRangeCalendar visibleDuration={visibleDuration} {...props}>\n            <CalendarHeader isRange />\n            <div className='grid gap-2 overflow-auto md:flex'>\n                {Array.from({ length: visibleDuration?.months ?? 1 }).map((_, index) => {\n                    const id = index + 1\n                    return (\n                        <CalendarGrid\n                            className='w-full **:[td]:px-0 **:[td]:py-[1.5px] **:[td]:first:*:rounded-s-lg **:[td]:last:*:rounded-e-lg'\n                            key={index}\n                            offset={id >= 2 ? { months: id - 1 } : undefined}\n                        >\n                            <CalendarGridHeader />\n                            <CalendarGridBody>\n                                {(date) => (\n                                    <CalendarCell\n                                        className={cn([\n                                            'relative flex size-8 shrink-0 cursor-pointer items-center justify-center rounded-lg pressed:bg-accent outside-month:text-muted-foreground pressed:text-accent-foreground text-sm outline-hidden hover:bg-accent/90 hover:text-accent-foreground',\n                                            'selection-start:bg-primary selection-start:text-primary-foreground selection-start:invalid:bg-destructive selection-start:invalid:text-destructive-foreground',\n                                            'selection-end:bg-primary selection-end:text-primary-foreground selection-end:invalid:bg-destructive selection-end:invalid:text-destructive-foreground',\n                                            'selected:rounded-none selected:bg-accent selected:text-accent-foreground selected:selection-end:rounded-r-lg selected:selection-start:rounded-l-lg',\n                                            'focus-visible:ring-2 focus-visible:ring-ring/50',\n                                            'disabled:pointer-events-none disabled:opacity-50',\n                                            date.compare(now) === 0 &&\n                                                'after:-translate-x-1/2 after:pointer-events-none after:absolute after:start-1/2 after:bottom-1 after:mt-1 after:size-1 after:rounded after:bg-primary selected:selection-end:after:bg-primary-foreground selected:selection-start:after:bg-primary-foreground'\n                                        ])}\n                                        date={date}\n                                    >\n                                        {date.day}\n                                    </CalendarCell>\n                                )}\n                            </CalendarGridBody>\n                        </CalendarGrid>\n                    )\n                })}\n            </div>\n        </RACRangeCalendar>\n    )\n}\n\nconst CalendarHeader = ({ className, isRange, ...props }: ComponentPropsWithRef<'header'> & { isRange?: boolean }) => {\n    const { direction } = useLocale()\n    const state = use(CalendarStateContext)!\n\n    return (\n        <header\n            className={cn('flex w-full items-center justify-between gap-1.5 pt-1 pr-1 pb-5 pl-1.5 sm:pb-4', className)}\n            slot='calendar-header'\n            {...props}\n        >\n            <Button\n                className='inline-flex size-7 shrink-0 items-center justify-center rounded-md border border-border/40 bg-background pressed:bg-muted/50 text-muted-foreground shadow-sm outline-hidden hover:bg-muted/40 focus-visible:ring-2 focus-visible:ring-ring'\n                slot='previous'\n            >\n                {direction === 'rtl' ? <IconChevronRight /> : <IconChevronLeft />}\n            </Button>\n            {isRange ? (\n                <Heading className='font-normal text-sm' />\n            ) : (\n                <div className='flex items-center'>\n                    <SelectMonth state={state} />\n                    <SelectYear state={state} />\n                </div>\n            )}\n            <Button\n                className='inline-flex size-7 shrink-0 items-center justify-center rounded-md border border-border/40 bg-background pressed:bg-muted/50 text-muted-foreground shadow-sm outline-hidden hover:bg-muted/40 focus-visible:ring-2 focus-visible:ring-ring'\n                slot='next'\n            >\n                {direction === 'rtl' ? <IconChevronLeft /> : <IconChevronRight />}\n            </Button>\n        </header>\n    )\n}\n\nconst CalendarGridHeader = () => {\n    return (\n        <RACCalendarGridHeader>\n            {(day) => (\n                <CalendarHeaderCell className='pb-2 font-semibold text-muted-foreground text-sm sm:px-0 sm:py-0.5 lg:text-xs'>\n                    {day}\n                </CalendarHeaderCell>\n            )}\n        </RACCalendarGridHeader>\n    )\n}\n\nconst SelectMonth = ({ state }: { state: CalendarState }) => {\n    const months = []\n\n    const formatter = useDateFormatter({\n        month: 'long',\n        timeZone: state.timeZone\n    })\n\n    const numMonths = state.focusedDate.calendar.getMonthsInYear(state.focusedDate)\n    for (let i = 1; i <= numMonths; i++) {\n        const date = state.focusedDate.set({ month: i })\n        months.push(formatter.format(date.toDate(state.timeZone)))\n    }\n    const selectedMonth = state.focusedDate.month\n\n    return (\n        <Menu aria-label='Select month'>\n            <Menu.Trigger className='p-0.5 text-sm outline-primary' slot={null}>\n                {months[selectedMonth - 1]}\n            </Menu.Trigger>\n            <Menu.Content\n                items={months.map((month, i) => ({ id: i + 1, textValue: month }))}\n                onSelectionChange={(v) => state.setFocusedDate(state.focusedDate.set({ month: Number([...v][0]) }))}\n                selectedKeys={[selectedMonth]}\n                selectionMode='single'\n            >\n                {(item) => (\n                    <Menu.Item id={item.id} key={item.id} textValue={item.textValue}>\n                        <Menu.Label>{item.textValue}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst SelectYear = ({ state }: { state: CalendarState }) => {\n    const years: { value: CalendarDate; formatted: string }[] = []\n    const formatter = useDateFormatter({\n        year: 'numeric',\n        timeZone: state.timeZone\n    })\n\n    for (let i = -20; i <= 20; i++) {\n        const date = state.focusedDate.add({ years: i })\n        years.push({\n            value: date,\n            formatted: formatter.format(date.toDate(state.timeZone))\n        })\n    }\n\n    const selectedYear = state.focusedDate.year\n\n    return (\n        <Menu>\n            <Menu.Trigger className='p-0.5 text-sm outline-primary' slot={null}>\n                {years[selectedYear - years[0].value.year].formatted}\n            </Menu.Trigger>\n            <Menu.Content\n                aria-label='Select year'\n                items={years.map((year, i) => ({ id: i, textValue: year.formatted }))}\n                onSelectionChange={(value) => {\n                    state.setFocusedDate(state.focusedDate.set({ year: years[Number([...value][0])].value.year }))\n                }}\n                selectedKeys={[20]}\n                selectionMode='single'\n            >\n                {(item) => (\n                    <Menu.Item id={item.id} key={item.id} textValue={item.textValue}>\n                        <Menu.Label>{item.textValue}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nexport { Calendar, RangeCalendar }\n"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\n\nimport { Collection, type CollectionProps } from '@react-aria/collections'\nimport { IconUser } from '@tabler/icons-react'\nimport { type ComponentProps, useEffect, useState } from 'react'\nimport { tv, type VariantProps } from 'tailwind-variants'\nimport { cn } from '@/lib/utils'\n\ninterface AvatarGroupProps<T extends object> extends CollectionProps<T> {\n    className?: string\n}\n\nconst getInitials = (name: string): string =>\n    name.split(' ').slice(0, 2).length > 1\n        ? name\n              .split(' ')\n              .slice(0, 2)\n              .map((part) => part.charAt(0))\n              .join('')\n        : name.split('').slice(0, 2).join('')\n\nconst AvatarGroup = <T extends object>({ className, ...props }: AvatarGroupProps<T>) => {\n    return (\n        <div\n            className={cn(\n                '-space-x-2 flex items-center justify-center **:data-avatar:ring **:data-avatar:ring-border',\n                '**:data-avatar:transition-transform **:data-avatar:hover:z-30 **:data-avatar:hover:scale-110',\n                className\n            )}\n        >\n            <Collection {...props} />\n        </div>\n    )\n}\n\nconst avatarStyle = tv({\n    base: [\n        'inline-grid shrink-0 items-center justify-center align-middle *:col-start-1 *:row-start-1',\n        '-outline-offset-1 text-center outline-1 outline-foreground/20'\n    ],\n    variants: {\n        shape: {\n            square: 'rounded-lg *:rounded-lg',\n            circle: 'rounded-full *:rounded-full'\n        },\n        size: {\n            xs: 'size-6',\n            sm: 'size-7',\n            md: 'size-8',\n            lg: 'size-9',\n            xl: 'size-12',\n            '2xl': 'size-14',\n            '3xl': 'size-16',\n            '4xl': 'size-20',\n            '5xl': 'size-24'\n        }\n    },\n    defaultVariants: {\n        shape: 'circle',\n        size: 'lg'\n    }\n})\n\ninterface AvatarProps extends VariantProps<typeof avatarStyle> {\n    src?: string | undefined\n    alt?: string\n    className?: string\n}\n\nconst Avatar = ({ src, shape, size, alt, className, ...props }: AvatarProps & ComponentProps<'img'>) => {\n    const [error, setError] = useState(!src)\n\n    function handleError() {\n        setError(true)\n    }\n\n    useEffect(() => {\n        setError(!src)\n    }, [src])\n\n    if (error) {\n        return (\n            <span className={avatarStyle({ shape, size, className })} data-avatar={true}>\n                <FallbackImage alt={alt} />\n            </span>\n        )\n    }\n    return (\n        <img\n            alt={alt || 'Avatar'}\n            className={avatarStyle({ shape, size, className })}\n            data-avatar\n            onError={handleError}\n            src={src}\n            {...props}\n        />\n    )\n}\n\nconst FallbackImage = ({ alt }: { alt: string | undefined }) => {\n    return alt ? (\n        <svg\n            aria-hidden='true'\n            className='size-full select-none bg-background fill-current p-[5%] font-medium text-[48px] uppercase'\n            viewBox='0 0 100 100'\n        >\n            {alt && <title>{alt}</title>}\n            <text alignmentBaseline='middle' dominantBaseline='middle' dy='.125em' textAnchor='middle' x='50%' y='50%'>\n                {getInitials(alt)}\n            </text>\n        </svg>\n    ) : (\n        <IconUser className='size-full place-self-center bg-background p-1.5' />\n    )\n}\n\nexport { Avatar, AvatarGroup }\nexport type { AvatarProps }\n"
  },
  "container": {
    "component": "@/components/ui/container",
    "raw": "import type { ComponentPropsWithRef } from 'react'\nimport { cn } from '@/lib/utils'\n\ninterface ContainerProps extends ComponentPropsWithRef<'div'> {\n    constrained?: boolean\n}\n\nconst Container = ({ className, constrained = false, ref, ...props }: ContainerProps) => (\n    <div\n        className={cn(\n            'mx-auto w-full max-w-7xl lg:max-w-(--breakpoint-xl) 2xl:max-w-(--breakpoint-2xl)',\n            constrained ? 'sm:px-6 lg:px-8' : 'px-4 sm:px-6 lg:px-8',\n            className\n        )}\n        {...props}\n        ref={ref}\n    />\n)\n\nexport type { ContainerProps }\nexport { Container }\n"
  },
  "color-area": {
    "component": "@/components/ui/color-area",
    "raw": "'use client'\n\nimport type { ColorAreaProps } from 'react-aria-components'\nimport { composeRenderProps, ColorArea as RACColorArea } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { ColorThumb } from './color-thumb'\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n    return (\n        <RACColorArea\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn('min-h-56 min-w-56 rounded-lg bg-muted', isDisabled && 'opacity-50 grayscale-50', className)\n            )}\n            slot='color-area'\n            style={({ defaultStyle }) => ({ ...defaultStyle })}\n            {...props}\n        >\n            <ColorThumb />\n        </RACColorArea>\n    )\n}\n\nexport { ColorArea }\n"
  },
  "chart": {
    "component": "@/components/ui/chart",
    "raw": "'use client'\n\nimport type {\n    CartesianGridProps as CartesianGridPrimitiveProps,\n    CartesianGridProps,\n    LegendPayload,\n    LegendProps,\n    XAxisProps as XAxisPropsPrimitive,\n    YAxisProps as YAxisPrimitiveProps\n} from 'recharts'\nimport type { ContentType as LegendContentType } from 'recharts/types/component/DefaultLegendContent'\nimport type { NameType, Props as TooltipContentProps, ValueType } from 'recharts/types/component/DefaultTooltipContent'\nimport type { ContentType as TooltipContentType } from 'recharts/types/component/Tooltip'\nimport type { CurveType } from 'recharts/types/shape/Curve'\nimport {\n    type ComponentProps,\n    createContext,\n    Fragment,\n    type ReactElement,\n    startTransition,\n    use,\n    useCallback,\n    useId,\n    useMemo,\n    useState\n} from 'react'\nimport { composeRenderProps, ToggleButton, ToggleButtonGroup, type ToggleButtonGroupProps } from 'react-aria-components'\nimport {\n    Area,\n    AreaChart as AreaChartPrimitive,\n    Bar,\n    BarChart as BarChartPrimitive,\n    CartesianGrid as CartesianGridPrimitive,\n    Cell,\n    Legend as LegendPrimitive,\n    Line,\n    LineChart as LineChartPrimitive,\n    type LineProps,\n    Pie,\n    PieChart as PieChartPrimitive,\n    ResponsiveContainer,\n    Tooltip as TooltipPrimitive,\n    XAxis as XAxisPrimitive,\n    YAxis as YAxisPrimitive\n} from 'recharts'\nimport { cn } from '@/lib/utils'\nimport { Separator } from './separator'\n\ntype ChartType = 'default' | 'stacked' | 'percent'\ntype ChartLayout = 'horizontal' | 'vertical' | 'radial'\ntype IntervalType = 'preserveStartEnd' | 'equidistantPreserveStart'\n\nexport type ChartConfig = {\n    [k in string]: {\n        label?: React.ReactNode\n        icon?: React.ComponentType\n    } & (\n        | { color?: ChartColorKeys | (string & {}); theme?: never }\n        | { color?: never; theme: Record<keyof typeof THEMES, string> }\n    )\n}\n\nconst CHART_COLORS = {\n    'chart-1': 'var(--chart-1)',\n    'chart-2': 'var(--chart-2)',\n    'chart-3': 'var(--chart-3)',\n    'chart-4': 'var(--chart-4)',\n    'chart-5': 'var(--chart-5)'\n} as const\n\ntype ChartColorKeys = keyof typeof CHART_COLORS | (string & {})\n\nconst DEFAULT_COLORS = ['chart-1', 'chart-2', 'chart-3', 'chart-4', 'chart-5'] as const\n\ntype ChartContextProps = {\n    config: ChartConfig\n    data: Record<string, any>[]\n    layout: ChartLayout\n    dataKey: string\n    selectedLegend: string | null\n    onLegendSelect: (legendItem: string | null) => void\n}\n\nconst ChartContext = createContext<ChartContextProps | null>(null)\n\nexport function useChart() {\n    const context = use(ChartContext)\n\n    if (!context) {\n        throw new Error('useChart must be used within a <Chart />')\n    }\n\n    return context\n}\n\nexport function valueToPercent(value: number) {\n    return `${(value * 100).toFixed(0)}%`\n}\n\nconst constructCategoryColors = (\n    categories: string[],\n    colors: readonly ChartColorKeys[]\n): Map<string, ChartColorKeys> => {\n    const categoryColors = new Map<string, ChartColorKeys>()\n\n    categories.forEach((category, index) => {\n        const color = colors[index % colors.length]\n        if (color !== undefined) {\n            categoryColors.set(category, color)\n        }\n    })\n\n    return categoryColors\n}\n\nconst getColorValue = (color?: string): string => {\n    if (!color) {\n        return 'var(--chart-1)'\n    }\n\n    return CHART_COLORS[color as 'chart-1'] ?? color\n}\n\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n    if (typeof payload !== 'object' || payload === null) {\n        return undefined\n    }\n\n    const payloadPayload =\n        'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n            ? payload.payload\n            : undefined\n\n    let configLabelKey: string = key\n\n    if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n        configLabelKey = payload[key as keyof typeof payload] as string\n    } else if (\n        payloadPayload &&\n        key in payloadPayload &&\n        typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n    ) {\n        configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string\n    }\n\n    return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config]\n}\n\ninterface BaseChartProps<TValue extends ValueType, TName extends NameType>\n    extends React.HTMLAttributes<HTMLDivElement> {\n    config: ChartConfig\n    data: Record<string, any>[]\n    dataKey: string\n    colors?: readonly (ChartColorKeys | (string & {}))[]\n    type?: ChartType\n    lineType?: CurveType\n    intervalType?: IntervalType\n    layout?: ChartLayout\n    valueFormatter?: (value: number) => string\n\n    tooltip?: TooltipContentType<TValue, TName> | boolean\n    tooltipProps?: Omit<ChartTooltipProps<TValue, TName>, 'content'>\n\n    cartesianGridProps?: CartesianGridProps\n\n    legend?: LegendContentType | boolean\n    legendProps?: Omit<React.ComponentProps<typeof LegendPrimitive>, 'content' | 'ref'>\n\n    xAxisProps?: XAxisPropsPrimitive\n    yAxisProps?: YAxisPrimitiveProps\n\n    displayEdgeLabelsOnly?: boolean\n\n    hideGridLines?: boolean\n    hideXAxis?: boolean\n    hideYAxis?: boolean\n}\n\nconst Chart = ({\n    id,\n    className,\n    children,\n    config,\n    data,\n    dataKey,\n    ref,\n    layout = 'horizontal',\n    ...props\n}: Omit<React.ComponentProps<'div'>, 'children'> & {\n    config: ChartConfig\n    data: Record<string, any>[]\n    layout?: ChartLayout\n    dataKey: string\n    children: ReactElement | ((props: ChartContextProps) => ReactElement)\n}) => {\n    const uniqueId = useId()\n    const chartId = useMemo(() => `chart-${id || uniqueId.replace(/:/g, '')}`, [id, uniqueId])\n\n    const [selectedLegend, setSelectedLegend] = useState<string | null>(null)\n\n    const onLegendSelect = useCallback((legendItem: string | null) => {\n        setSelectedLegend(legendItem)\n    }, [])\n\n    const value = {\n        config,\n        selectedLegend,\n        onLegendSelect,\n        data,\n        dataKey,\n        layout\n    }\n\n    return (\n        <ChartContext.Provider value={value}>\n            <div\n                className={cn(\n                    'z-20 flex aspect-video w-full justify-center text-xs',\n                    \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/80 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-hidden [&_.recharts-surface]:outline-hidden\",\n                    className\n                )}\n                data-chart={chartId}\n                ref={ref}\n                {...props}\n            >\n                <ChartStyle config={config} id={chartId} />\n                <ResponsiveContainer height='100%' width='100%'>\n                    {typeof children === 'function' ? children(value) : children}\n                </ResponsiveContainer>\n            </div>\n        </ChartContext.Provider>\n    )\n}\n\nconst THEMES = { light: '', dark: '.dark' } as const\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n    const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color)\n\n    if (!colorConfig.length) {\n        return null\n    }\n\n    return (\n        <style\n            dangerouslySetInnerHTML={{\n                __html: Object.entries(THEMES)\n                    .map(\n                        ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n    .map(([key, itemConfig]) => {\n        const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color\n        return color ? `  --color-${key}: ${color};` : null\n    })\n    .join('\\n')}\n}\n`\n                    )\n                    .join('\\n')\n            }}\n        />\n    )\n}\n\ntype ChartTooltipProps<TValue extends ValueType, TName extends NameType> = React.ComponentProps<\n    typeof TooltipPrimitive<TValue, TName>\n>\n\nconst ChartTooltip = <TValue extends ValueType, TName extends NameType>(props: ChartTooltipProps<TValue, TName>) => {\n    const { layout } = useChart()\n\n    return (\n        <TooltipPrimitive\n            animationDuration={100}\n            cursor={{\n                stroke: 'var(--muted)',\n                strokeWidth: layout === 'radial' ? 0.1 : 1,\n                fill: 'var(--muted)',\n                fillOpacity: 0.5\n            }}\n            isAnimationActive={true}\n            offset={20}\n            position={{\n                y: layout === 'horizontal' ? 0 : undefined,\n                x: layout === 'vertical' ? 60 + 20 : undefined\n            }}\n            wrapperStyle={{ outline: 'none' }}\n            {...props}\n        />\n    )\n}\n\ntype ChartLegendProps = Omit<React.ComponentProps<typeof LegendPrimitive>, 'ref'>\n\nconst ChartLegend = (props: ChartLegendProps) => {\n    return <LegendPrimitive align='center' verticalAlign='bottom' {...props} />\n}\n\ninterface XAxisProps extends Omit<XAxisPropsPrimitive, 'ref'> {\n    displayEdgeLabelsOnly?: boolean\n    intervalType?: IntervalType\n}\n\nconst XAxis = ({\n    displayEdgeLabelsOnly,\n    className,\n    intervalType = 'preserveStartEnd',\n    minTickGap = 5,\n    domain = ['auto', 'auto'],\n    ...props\n}: XAxisProps) => {\n    const { dataKey, data, layout } = useChart()\n\n    return (\n        <XAxisPrimitive\n            axisLine={false}\n            className={cn('text-muted-foreground text-xs', className)}\n            dataKey={layout === 'horizontal' ? dataKey : undefined}\n            interval={displayEdgeLabelsOnly ? 'preserveStartEnd' : intervalType}\n            minTickGap={minTickGap}\n            tick={{\n                transform: layout === 'horizontal' ? 'translate(32, 6)' : undefined\n            }}\n            tickLine={false}\n            ticks={\n                displayEdgeLabelsOnly && data.length >= 2\n                    ? [data[0]?.[dataKey], data[data.length - 1]?.[dataKey]]\n                    : undefined\n            }\n            {...props}\n        />\n    )\n}\n\nconst YAxis = ({ className, width, domain = ['auto', 'auto'], type, ...props }: Omit<YAxisPrimitiveProps, 'ref'>) => {\n    const { layout, dataKey } = useChart()\n\n    return (\n        <YAxisPrimitive\n            axisLine={false}\n            className={cn('text-muted-foreground text-xs', className)}\n            dataKey={layout === 'horizontal' ? undefined : dataKey}\n            domain={domain}\n            interval={layout === 'horizontal' ? undefined : 'equidistantPreserveStart'}\n            tick={{\n                transform: layout === 'horizontal' ? 'translate(-3, 0)' : 'translate(0, 0)'\n            }}\n            tickLine={false}\n            type={type || layout === 'horizontal' ? 'number' : 'category'}\n            width={(width ?? layout === 'horizontal') ? 35 : 80}\n            {...props}\n        />\n    )\n}\n\nconst CartesianGrid = ({ className, ...props }: CartesianGridPrimitiveProps) => {\n    const { layout } = useChart()\n    return (\n        <CartesianGridPrimitive\n            className={cn('stroke-1 stroke-muted', className)}\n            horizontal={layout !== 'vertical'}\n            vertical={layout === 'vertical'}\n            {...props}\n        />\n    )\n}\n\nconst ChartTooltipContent = <TValue extends ValueType, TName extends NameType>({\n    payload,\n    className,\n    indicator = 'dot',\n    hideLabel = false,\n    hideIndicator = false,\n    label,\n    labelSeparator = true,\n    labelFormatter,\n    labelClassName,\n    formatter,\n    color,\n    nameKey,\n    labelKey,\n    ref\n}: TooltipContentProps<TValue, TName> &\n    React.ComponentProps<'div'> & {\n        hideLabel?: boolean\n        labelSeparator?: boolean\n        hideIndicator?: boolean\n        indicator?: 'line' | 'dot' | 'dashed'\n        nameKey?: string\n        labelKey?: string\n    }) => {\n    const { config } = useChart()\n\n    const tooltipLabel = useMemo(() => {\n        if (hideLabel || !payload?.length) {\n            return null\n        }\n\n        const [item] = payload\n\n        if (!item) {\n            return null\n        }\n\n        const key = `${labelKey || item.dataKey || item.name || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n        const value =\n            !labelKey && typeof label === 'string'\n                ? config[label as keyof typeof config]?.label || label\n                : itemConfig?.label\n\n        if (labelFormatter) {\n            return <div className={labelClassName}>{labelFormatter(value, payload)}</div>\n        }\n\n        if (!value) {\n            return null\n        }\n\n        return <div className={labelClassName}>{value}</div>\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])\n\n    if (!payload?.length) {\n        return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n    return (\n        <div\n            className={cn(\n                'inset-ring inset-ring-border grid min-w-[12rem] items-start rounded-lg bg-popover p-3 text-popover-foreground text-xs dark:inset-ring-foreground/10 dark:supports-[backdrop-blur]:bg-popover/70 dark:supports-[backdrop-blur]:backdrop-blur-xl',\n                className\n            )}\n            ref={ref}\n        >\n            {!nestLabel ? <span>{tooltipLabel}</span> : null}\n            {labelSeparator && <Separator className='mt-2 mb-2.5 bg-foreground/10' />}\n            <div className='grid gap-1.5'>\n                {payload.map((item, index) => {\n                    const key = `${nameKey || item.name || item.dataKey || 'value'}`\n                    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n                    const indicatorColor = color || item.payload.fill || item.color\n\n                    return (\n                        <div\n                            className={cn(\n                                'flex w-full flex-wrap items-stretch gap-2 *:data-[slot=icon]:size-2.5 *:data-[slot=icon]:text-muted-foreground',\n                                indicator === 'dot' && 'items-center'\n                            )}\n                            key={key}\n                        >\n                            {formatter && item?.value !== undefined && item.name ? (\n                                formatter(item.value, item.name, item, index, item.payload)\n                            ) : (\n                                <>\n                                    {itemConfig?.icon ? (\n                                        <itemConfig.icon />\n                                    ) : (\n                                        !hideIndicator && (\n                                            <div\n                                                className={cn(\n                                                    'shrink-0 rounded-full border-(--color-border) bg-(--color-bg)',\n                                                    indicator === 'dot' && 'size-2.5',\n                                                    indicator === 'line' && 'w-1',\n                                                    indicator === 'dashed' &&\n                                                        'w-0 border-[1.5px] border-dashed bg-transparent',\n                                                    nestLabel && indicator === 'dashed' && 'my-0.5'\n                                                )}\n                                                style={\n                                                    {\n                                                        '--color-bg': indicatorColor,\n                                                        '--color-border': indicatorColor\n                                                    } as React.CSSProperties\n                                                }\n                                            />\n                                        )\n                                    )}\n                                    <div\n                                        className={cn(\n                                            'flex flex-1 justify-between leading-none',\n                                            nestLabel ? 'items-end' : 'items-center'\n                                        )}\n                                    >\n                                        <div className='grid gap-1.5'>\n                                            {nestLabel ? tooltipLabel : null}\n                                            <span className='text-muted-foreground'>\n                                                {itemConfig?.label || item.name}\n                                            </span>\n                                        </div>\n\n                                        {item.value && (\n                                            <span className='font-medium font-mono text-foreground tabular-nums'>\n                                                {item.value.toString()}\n                                            </span>\n                                        )}\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\ntype ChartLegendContentProps = ToggleButtonGroupProps &\n    Pick<LegendProps, 'align' | 'verticalAlign'> & {\n        payload?: ReadonlyArray<LegendPayload>\n        hideIcon?: boolean\n        nameKey?: string\n        ref?: React.Ref<any>\n    }\n\nconst ChartLegendContent = ({\n    className,\n    hideIcon = false,\n    payload,\n    align = 'right',\n    verticalAlign = 'bottom',\n    nameKey,\n    ref\n}: ChartLegendContentProps) => {\n    const { config, selectedLegend, onLegendSelect } = useChart()\n\n    if (!payload?.length) {\n        return null\n    }\n\n    return (\n        <ToggleButtonGroup\n            className={composeRenderProps(className, (classname) =>\n                cn(\n                    'flex flex-wrap items-center gap-x-1',\n                    verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n                    align === 'right' ? 'justify-end' : align === 'left' ? 'justify-start' : 'justify-center',\n                    classname\n                )\n            )}\n            onSelectionChange={(v) => {\n                const key = [...v][0]?.toString() ?? null\n                onLegendSelect(key)\n            }}\n            ref={ref}\n            selectedKeys={selectedLegend ? [selectedLegend] : undefined}\n            selectionMode='single'\n        >\n            {payload.map((item: LegendPayload) => {\n                const key = `${nameKey || item.dataKey || 'value'}`\n                const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n                return (\n                    <ToggleButton\n                        aria-label={'Legend Item'}\n                        className={cn(\n                            '*:data-[slot=icon]:-mx-0.5 flex items-center gap-2 rounded-sm px-2 py-1 text-muted-foreground *:data-[slot=icon]:size-2.5 *:data-[slot=icon]:shrink-0 *:data-[slot=icon]:text-muted-foreground',\n                            'selected:bg-secondary/70 selected:text-secondary-foreground',\n                            'hover:bg-secondary/70 hover:text-secondary-foreground'\n                        )}\n                        id={key}\n                        key={key}\n                    >\n                        {itemConfig?.icon && !hideIcon ? (\n                            <itemConfig.icon data-slot='icon' />\n                        ) : (\n                            <div\n                                className='rounded-full'\n                                data-slot='icon'\n                                style={{\n                                    backgroundColor: item.color\n                                }}\n                            />\n                        )}\n                        {itemConfig?.label}\n                    </ToggleButton>\n                )\n            })}\n        </ToggleButtonGroup>\n    )\n}\n\ninterface AreaChartProps<TValue extends ValueType, TName extends NameType> extends BaseChartProps<TValue, TName> {\n    chartProps?: Omit<ComponentProps<typeof AreaChartPrimitive>, 'data' | 'stackOffset'>\n    areaProps?: Partial<ComponentProps<typeof Area>>\n    connectNulls?: boolean\n    fillType?: 'gradient' | 'solid' | 'none'\n    lineType?: CurveType\n}\n\nconst AreaChart = <TValue extends ValueType, TName extends NameType>({\n    data = [],\n    dataKey,\n    colors = DEFAULT_COLORS,\n    connectNulls = false,\n    type = 'default',\n    className,\n\n    fillType = 'gradient',\n    config,\n    children,\n\n    areaProps,\n\n    tooltip = true,\n    tooltipProps,\n\n    cartesianGridProps,\n\n    legend = true,\n    legendProps,\n\n    intervalType = 'equidistantPreserveStart',\n\n    valueFormatter = (value: number) => value.toString(),\n\n    displayEdgeLabelsOnly = false,\n    hideXAxis = false,\n    xAxisProps,\n\n    hideYAxis = false,\n    yAxisProps,\n\n    hideGridLines = false,\n    lineType = 'linear',\n    chartProps,\n    ...props\n}: AreaChartProps<TValue, TName>) => {\n    const categoryColors = constructCategoryColors(Object.keys(config), colors)\n    const stacked = type === 'stacked' || type === 'percent'\n    const areaId = useId()\n    const getFillContent = ({\n        fillType,\n        activeLegend,\n        category\n    }: {\n        fillType: AreaChartProps<TValue, TName>['fillType']\n        activeLegend: string | null\n        category: string\n    }) => {\n        const stopOpacity = activeLegend && activeLegend !== category ? 0.1 : 0.5\n\n        switch (fillType) {\n            case 'none':\n                return <stop stopColor='currentColor' stopOpacity={0} />\n            case 'gradient':\n                return (\n                    <>\n                        <stop offset='5%' stopColor='currentColor' stopOpacity={stopOpacity} />\n                        <stop offset='95%' stopColor='currentColor' stopOpacity={0} />\n                    </>\n                )\n            default:\n                return <stop stopColor='currentColor' stopOpacity={stopOpacity} />\n        }\n    }\n\n    return (\n        <Chart className={cn('h-56 w-full', className)} config={config} data={data} dataKey={dataKey} {...props}>\n            {({ onLegendSelect, selectedLegend }) => (\n                <AreaChartPrimitive\n                    data={data}\n                    margin={{\n                        bottom: 0,\n                        left: 0,\n                        right: 0,\n                        top: 5\n                    }}\n                    onClick={() => {\n                        onLegendSelect(null)\n                    }}\n                    stackOffset={type === 'percent' ? 'expand' : undefined}\n                    {...chartProps}\n                >\n                    {!hideGridLines && <CartesianGrid {...cartesianGridProps} strokeDasharray='3 3' />}\n                    <XAxis\n                        className='**:[text]:fill-muted-foreground'\n                        displayEdgeLabelsOnly={displayEdgeLabelsOnly}\n                        hide={hideXAxis}\n                        intervalType={intervalType}\n                        {...xAxisProps}\n                    />\n                    <YAxis\n                        className='**:[text]:fill-muted-foreground'\n                        hide={hideYAxis}\n                        tickFormatter={type === 'percent' ? valueToPercent : valueFormatter}\n                        {...yAxisProps}\n                    />\n\n                    {legend && (\n                        <ChartLegend\n                            content={typeof legend === 'boolean' ? <ChartLegendContent /> : legend}\n                            {...legendProps}\n                        />\n                    )}\n\n                    {tooltip && (\n                        <ChartTooltip\n                            content={\n                                typeof tooltip === 'boolean' ? <ChartTooltipContent accessibilityLayer /> : tooltip\n                            }\n                            {...tooltipProps}\n                        />\n                    )}\n\n                    {!children\n                        ? Object.entries(config).map(([category, values]) => {\n                              const categoryId = `${areaId}-${category.replace(/[^a-zA-Z0-9]/g, '')}`\n\n                              const strokeOpacity = selectedLegend && selectedLegend !== category ? 0.1 : 1\n\n                              return (\n                                  <Fragment key={categoryId}>\n                                      <defs>\n                                          <linearGradient\n                                              id={categoryId}\n                                              style={{\n                                                  color: getColorValue(values.color || categoryColors.get(category))\n                                              }}\n                                              x1='0'\n                                              x2='0'\n                                              y1='0'\n                                              y2='1'\n                                          >\n                                              {getFillContent({\n                                                  fillType,\n                                                  activeLegend: selectedLegend,\n                                                  category: category\n                                              })}\n                                          </linearGradient>\n                                      </defs>\n                                      <Area\n                                          connectNulls={connectNulls}\n                                          dataKey={category}\n                                          dot={false}\n                                          fill={`url(#${categoryId})`}\n                                          isAnimationActive={true}\n                                          name={category}\n                                          stackId={stacked ? 'stack' : undefined}\n                                          stroke={getColorValue(values.color || categoryColors.get(category))}\n                                          strokeLinecap='round'\n                                          strokeLinejoin='round'\n                                          style={{\n                                              strokeWidth: 2,\n                                              strokeOpacity\n                                          }}\n                                          type={lineType}\n                                          {...areaProps}\n                                      />\n                                  </Fragment>\n                              )\n                          })\n                        : children}\n                </AreaChartPrimitive>\n            )}\n        </Chart>\n    )\n}\n\ninterface BarChartProps<TValue extends ValueType, TName extends NameType> extends BaseChartProps<TValue, TName> {\n    barCategoryGap?: number\n    barRadius?: number\n    barGap?: number\n    barSize?: number\n    barProps?: Partial<React.ComponentProps<typeof Bar>>\n\n    chartProps?: Omit<ComponentProps<typeof BarChartPrimitive>, 'data' | 'stackOffset'>\n}\n\nconst BarChart = <TValue extends ValueType, TName extends NameType>({\n    data = [],\n    dataKey,\n    lineType = 'linear',\n    colors = DEFAULT_COLORS,\n    type = 'default',\n    className,\n    config,\n    children,\n    layout = 'horizontal',\n\n    tooltip = true,\n    tooltipProps,\n\n    legend = true,\n    legendProps,\n\n    intervalType = 'equidistantPreserveStart',\n\n    barCategoryGap = 5,\n    barGap,\n    barSize,\n    barRadius,\n    barProps,\n\n    valueFormatter = (value: number) => value.toString(),\n\n    displayEdgeLabelsOnly = false,\n    xAxisProps,\n    hideXAxis = false,\n\n    yAxisProps,\n    hideYAxis = false,\n\n    hideGridLines = false,\n    chartProps,\n    ...props\n}: BarChartProps<TValue, TName>) => {\n    const categoryColors = constructCategoryColors(Object.keys(config), colors)\n\n    const stacked = type === 'stacked' || type === 'percent'\n    return (\n        <Chart\n            className={cn('w-full', className)}\n            config={config}\n            data={data}\n            dataKey={dataKey}\n            layout={layout}\n            {...props}\n        >\n            {({ onLegendSelect, selectedLegend }) => (\n                <BarChartPrimitive\n                    barCategoryGap={barCategoryGap}\n                    barGap={barGap}\n                    barSize={barSize}\n                    data={data}\n                    layout={layout === 'radial' ? 'horizontal' : layout}\n                    margin={{\n                        bottom: 0,\n                        left: 5,\n                        right: 0,\n                        top: 5\n                    }}\n                    onClick={() => {\n                        onLegendSelect(null)\n                    }}\n                    stackOffset={type === 'percent' ? 'expand' : stacked ? 'sign' : undefined}\n                    {...chartProps}\n                >\n                    {!hideGridLines && <CartesianGrid strokeDasharray='4 4' />}\n                    <XAxis\n                        className='**:[text]:fill-muted-foreground'\n                        displayEdgeLabelsOnly={displayEdgeLabelsOnly}\n                        hide={hideXAxis}\n                        intervalType={intervalType}\n                        {...xAxisProps}\n                    />\n                    <YAxis\n                        className='**:[text]:fill-muted-foreground'\n                        hide={hideYAxis}\n                        tickFormatter={type === 'percent' ? valueToPercent : valueFormatter}\n                        {...yAxisProps}\n                    />\n\n                    {legend && (\n                        <ChartLegend\n                            content={typeof legend === 'boolean' ? <ChartLegendContent /> : legend}\n                            {...legendProps}\n                        />\n                    )}\n\n                    {tooltip && (\n                        <ChartTooltip\n                            content={\n                                typeof tooltip === 'boolean' ? <ChartTooltipContent accessibilityLayer /> : tooltip\n                            }\n                            {...tooltipProps}\n                        />\n                    )}\n\n                    {!children\n                        ? Object.entries(config).map(([category, values]) => {\n                              return (\n                                  <Bar\n                                      dataKey={category}\n                                      fill={getColorValue(values.color || categoryColors.get(category))}\n                                      fillOpacity={selectedLegend && selectedLegend !== category ? 0.1 : 1}\n                                      key={category}\n                                      name={category}\n                                      onClick={(_item, _number, event) => {\n                                          event.stopPropagation()\n\n                                          startTransition(() => {\n                                              onLegendSelect(category)\n                                          })\n                                      }}\n                                      radius={barRadius ?? (stacked ? undefined : 4)}\n                                      stackId={stacked ? 'stack' : undefined}\n                                      stroke={getColorValue(values.color || categoryColors.get(category))}\n                                      strokeOpacity={selectedLegend && selectedLegend !== category ? 0.2 : 0}\n                                      strokeWidth={1}\n                                      {...barProps}\n                                  />\n                              )\n                          })\n                        : children}\n                </BarChartPrimitive>\n            )}\n        </Chart>\n    )\n}\n\ninterface LineChartProps<TValue extends ValueType, TName extends NameType> extends BaseChartProps<TValue, TName> {\n    connectNulls?: boolean\n    lineProps?: LineProps\n    chartProps?: Omit<React.ComponentProps<typeof LineChartPrimitive>, 'data' | 'stackOffset'>\n}\n\nconst LineChart = <TValue extends ValueType, TName extends NameType>({\n    data = [],\n    dataKey,\n    colors = DEFAULT_COLORS,\n    connectNulls = false,\n    type = 'default',\n    className,\n    config,\n    children,\n\n    tooltip = true,\n    tooltipProps,\n\n    legend = true,\n    legendProps,\n\n    intervalType = 'equidistantPreserveStart',\n\n    valueFormatter = (value: number) => value.toString(),\n\n    displayEdgeLabelsOnly = false,\n    xAxisProps,\n    hideXAxis = false,\n\n    yAxisProps,\n    hideYAxis = false,\n\n    hideGridLines = false,\n    chartProps,\n    lineProps,\n    ...props\n}: LineChartProps<TValue, TName>) => {\n    const categoryColors = constructCategoryColors(Object.keys(config), colors)\n\n    return (\n        <Chart className={cn('w-full', className)} config={config} data={data} dataKey={dataKey} {...props}>\n            {({ onLegendSelect, selectedLegend }) => (\n                <LineChartPrimitive\n                    data={data}\n                    margin={{\n                        bottom: 0,\n                        left: 0,\n                        right: 0,\n                        top: 5\n                    }}\n                    onClick={() => {\n                        onLegendSelect(null)\n                    }}\n                    stackOffset={type === 'percent' ? 'expand' : undefined}\n                    {...chartProps}\n                >\n                    {!hideGridLines && <CartesianGrid strokeDasharray='4 4' />}\n                    <XAxis\n                        displayEdgeLabelsOnly={displayEdgeLabelsOnly}\n                        hide={hideXAxis}\n                        intervalType={intervalType}\n                        {...xAxisProps}\n                    />\n                    <YAxis\n                        hide={hideYAxis}\n                        tickFormatter={type === 'percent' ? valueToPercent : valueFormatter}\n                        {...yAxisProps}\n                    />\n\n                    {legend && (\n                        <ChartLegend\n                            content={typeof legend === 'boolean' ? <ChartLegendContent /> : legend}\n                            {...legendProps}\n                        />\n                    )}\n\n                    {tooltip && (\n                        <ChartTooltip\n                            content={\n                                typeof tooltip === 'boolean' ? <ChartTooltipContent accessibilityLayer /> : tooltip\n                            }\n                            {...tooltipProps}\n                        />\n                    )}\n\n                    {!children\n                        ? Object.entries(config).map(([category, values]) => {\n                              const strokeOpacity = selectedLegend && selectedLegend !== category ? 0.1 : 1\n\n                              return (\n                                  <Line\n                                      connectNulls={connectNulls}\n                                      dataKey={category}\n                                      dot={false}\n                                      key={category}\n                                      name={category}\n                                      stroke={getColorValue(values.color || categoryColors.get(category))}\n                                      strokeLinecap='round'\n                                      strokeLinejoin='round'\n                                      style={\n                                          {\n                                              strokeOpacity,\n                                              strokeWidth: 2,\n                                              '--line-color': getColorValue(\n                                                  values.color || categoryColors.get(category)\n                                              )\n                                          } as React.CSSProperties\n                                      }\n                                      type='linear'\n                                      {...lineProps}\n                                  />\n                              )\n                          })\n                        : children}\n                </LineChartPrimitive>\n            )}\n        </Chart>\n    )\n}\n\nconst sumNumericArray = (arr: number[]): number => arr.reduce((sum, num) => sum + num, 0)\n\nconst calculateDefaultLabel = (data: any[], valueKey: string): number =>\n    sumNumericArray(data.map((dataPoint) => dataPoint[valueKey]))\n\nconst parseLabelInput = (\n    labelInput: string | undefined,\n    valueFormatter: (value: number) => string,\n    data: any[],\n    valueKey: string\n): string => labelInput || valueFormatter(calculateDefaultLabel(data, valueKey))\n\ninterface PieChartProps<TValue extends ValueType, TName extends NameType>\n    extends Omit<\n        BaseChartProps<TValue, TName>,\n        | 'hideGridLines'\n        | 'hideXAxis'\n        | 'hideYAxis'\n        | 'xAxisProps'\n        | 'yAxisProps'\n        | 'displayEdgeLabelsOnly'\n        | 'legend'\n        | 'legendProps'\n    > {\n    variant?: 'pie' | 'donut'\n    nameKey?: string\n\n    chartProps?: Omit<ComponentProps<typeof PieChartPrimitive>, 'data' | 'stackOffset'>\n\n    label?: string\n    showLabel?: boolean\n    pieProps?: Omit<ComponentProps<typeof Pie>, 'data' | 'dataKey' | 'name'>\n}\n\nconst PieChart = <TValue extends ValueType, TName extends NameType>({\n    data = [],\n    dataKey,\n    colors = DEFAULT_COLORS,\n    className,\n    config,\n    children,\n    label,\n    showLabel,\n\n    tooltip = true,\n    tooltipProps,\n\n    variant = 'pie',\n    nameKey,\n\n    chartProps,\n\n    valueFormatter = (value: number) => value.toString(),\n    pieProps,\n    ...props\n}: PieChartProps<TValue, TName>) => {\n    const parsedLabelInput = parseLabelInput(label, valueFormatter, data, dataKey)\n\n    return (\n        <Chart\n            className={cn('aspect-square', className)}\n            config={config}\n            data={data}\n            dataKey={dataKey}\n            layout='radial'\n            {...props}\n        >\n            {({ onLegendSelect }) => (\n                <PieChartPrimitive\n                    data={data}\n                    margin={{\n                        bottom: 0,\n                        left: 0,\n                        right: 0,\n                        top: 0\n                    }}\n                    onClick={() => {\n                        onLegendSelect(null)\n                    }}\n                    {...chartProps}\n                >\n                    {showLabel && variant === 'donut' && (\n                        <text\n                            className='fill-foreground font-medium'\n                            dominantBaseline='middle'\n                            textAnchor='middle'\n                            x='50%'\n                            y='50%'\n                        >\n                            {parsedLabelInput}\n                        </text>\n                    )}\n                    <Pie\n                        cx={pieProps?.cx ?? '50%'}\n                        cy={pieProps?.cy ?? '50%'}\n                        data={data}\n                        dataKey={dataKey}\n                        endAngle={pieProps?.endAngle ?? -270}\n                        innerRadius={variant === 'donut' ? '50%' : '0%'}\n                        isAnimationActive\n                        name={nameKey}\n                        startAngle={pieProps?.startAngle ?? 90}\n                        strokeLinejoin='round'\n                        {...pieProps}\n                    >\n                        {data.map((_, index) => (\n                            <Cell\n                                fill={getColorValue(\n                                    config?.[data[index]?.code || data[index]?.name]?.color ??\n                                        colors[index % colors.length]\n                                )}\n                                key={`cell-${index}`}\n                            />\n                        ))}\n                    </Pie>\n\n                    {tooltip && (\n                        <ChartTooltip\n                            content={\n                                typeof tooltip === 'boolean' ? (\n                                    <ChartTooltipContent accessibilityLayer labelSeparator={false} />\n                                ) : (\n                                    tooltip\n                                )\n                            }\n                            {...tooltipProps}\n                        />\n                    )}\n\n                    {children}\n                </PieChartPrimitive>\n            )}\n        </Chart>\n    )\n}\n\nexport { Chart, BarChart, AreaChart, LineChart, PieChart }\nexport type { BarChartProps, AreaChartProps, LineChartProps, PieChartProps }\n"
  },
  "color-swatch-picker": {
    "component": "@/components/ui/color-swatch-picker",
    "raw": "'use client'\n\nimport type { ColorSwatchPickerItemProps, ColorSwatchPickerProps } from 'react-aria-components'\nimport { IconCircleCheck } from '@tabler/icons-react'\nimport {\n    ColorSwatchPickerItem,\n    composeRenderProps,\n    ColorSwatchPicker as RACColorSwatchPicker\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { ColorSwatch, isBrightColor } from './color-swatch'\n\nconst ColorSwatchPicker = ({ children, className, layout = 'grid', ...props }: ColorSwatchPickerProps) => {\n    return (\n        <RACColorSwatchPicker\n            className={composeRenderProps(className, (className) => cn('flex gap-1', className))}\n            layout={layout}\n            {...props}\n        >\n            {children}\n        </RACColorSwatchPicker>\n    )\n}\n\nconst SwatchPickerItem = ({ className, ...props }: ColorSwatchPickerItemProps) => {\n    return (\n        <ColorSwatchPickerItem\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative rounded-md outline-hidden disabled:opacity-50',\n                    'focus:ring-4 focus:ring-ring/50',\n                    'focus-visible:ring-4 focus-visible:ring-ring/50',\n                    'disabled:opacity-50',\n                    className\n                )\n            )}\n        >\n            {({ isSelected, color }) => (\n                <>\n                    <ColorSwatch />\n                    {isSelected && (\n                        <IconCircleCheck\n                            className='-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 size-5'\n                            style={{ color: isBrightColor(color.toString('hex')) ? '#3F3F46' : '#E4E4E7' }}\n                        />\n                    )}\n                </>\n            )}\n        </ColorSwatchPickerItem>\n    )\n}\n\nColorSwatchPicker.Item = SwatchPickerItem\n\nexport { ColorSwatchPicker }\n"
  },
  "otp": {
    "component": "@/components/ui/otp",
    "raw": "'use client'\n\nimport { IconCircle } from '@tabler/icons-react'\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { type ComponentProps, use } from 'react'\nimport { cn } from '@/lib/utils'\n\ntype OTPInputProps = ComponentProps<typeof OTPInput>\nconst OTP = ({ className, autoFocus = false, containerClassName, ref, ...props }: OTPInputProps) => (\n    <OTPInput\n        autoFocus={autoFocus}\n        className={cn('mt-auto h-[2.5rem] bg-destructive disabled:cursor-not-allowed', className)}\n        containerClassName={cn('flex items-center gap-2 has-disabled:opacity-50', containerClassName)}\n        data-1p-ignore\n        ref={ref}\n        {...props}\n    />\n)\n\ntype OTPGroupProps = ComponentProps<'div'>\nconst OTPGroup = ({ className, ref, ...props }: OTPGroupProps) => (\n    <div className={cn('flex items-center gap-x-1.5', className)} ref={ref} {...props} />\n)\n\ninterface OTPSlotProps extends ComponentProps<'div'> {\n    index: number\n}\n\nconst OTPSlot = ({ index, className, ref, ...props }: OTPSlotProps) => {\n    const OTPContext = use(OTPInputContext)\n    const slot = OTPContext.slots[index]\n\n    if (!slot) {\n        throw new Error('Slot not found')\n    }\n\n    const { char, hasFakeCaret, isActive } = slot\n\n    return (\n        <div\n            className={cn(\n                'relative flex size-9 items-center justify-center rounded-lg border bg-transparent text-sm tabular-nums shadow-xs transition-all dark:bg-input/30',\n                isActive && 'z-10 border-primary/70 ring-4 ring-ring/50',\n                className\n            )}\n            ref={ref}\n            {...props}\n        >\n            {char}\n            {hasFakeCaret && (\n                <div className='pointer-events-none absolute inset-0 flex items-center justify-center'>\n                    <div className='h-4 w-px animate-caret-blink bg-foreground duration-1000' />\n                </div>\n            )}\n        </div>\n    )\n}\n\ntype OTPSeparatorProps = ComponentProps<'div'>\nconst OTPSeparator = ({ ref, ...props }: OTPSeparatorProps) => (\n    <div ref={ref} {...props}>\n        <IconCircle className='size-2 fill-foreground' />\n    </div>\n)\n\nOTP.Group = OTPGroup\nOTP.Slot = OTPSlot\nOTP.Separator = OTPSeparator\n\nexport { OTP }\nexport type { OTPGroupProps, OTPSeparatorProps, OTPSlotProps }\n"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\n\nimport type { BreadcrumbProps, BreadcrumbsProps } from 'react-aria-components'\nimport { IconChevronRight, IconMinus, IconPointFilled, IconSlash } from '@tabler/icons-react'\nimport { createContext, type ReactNode, use } from 'react'\nimport { Breadcrumb, composeRenderProps, Link, Breadcrumbs as RACBreadcrumbs } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\ntype BreadcrumbsContextProps = {\n    separator?: 'chevron' | 'slash' | 'dash' | 'dot'\n}\n\nconst BreadcrumbsContext = createContext<BreadcrumbsContextProps>({\n    separator: 'chevron'\n})\n\nconst Breadcrumbs = <T extends object>({ className, ...props }: BreadcrumbsProps<T> & BreadcrumbsContextProps) => {\n    return (\n        <BreadcrumbsContext.Provider value={{ separator: props.separator }}>\n            <RACBreadcrumbs {...props} className={cn('flex items-center gap-1.5 **:[svg]:size-3.5', className)} />\n        </BreadcrumbsContext.Provider>\n    )\n}\n\ninterface BreadcrumbsItemProps extends BreadcrumbProps {\n    href?: string\n}\n\nconst BreadcrumbsItem = ({ href, className, ...props }: BreadcrumbsItemProps) => {\n    const { separator } = use(BreadcrumbsContext)\n\n    return (\n        <Breadcrumb\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'inline-flex items-center gap-2 text-muted-foreground text-sm data-current:text-foreground',\n                    className\n                )\n            )}\n        >\n            {(values) => (\n                <>\n                    {href ? (\n                        <Link\n                            className='inline-flex items-center gap-2 transition-colors hover:text-foreground'\n                            href={href}\n                        >\n                            {props.children}\n                        </Link>\n                    ) : (\n                        (props.children as ReactNode)\n                    )}\n                    {!values.isCurrent && <Separator separator={separator} />}\n                </>\n            )}\n        </Breadcrumb>\n    )\n}\n\nconst Separator = ({ separator = 'chevron' }: { separator?: BreadcrumbsContextProps['separator'] }) => {\n    return (\n        <span className='select-none *:text-muted-foreground'>\n            {separator === 'chevron' && <IconChevronRight />}\n            {separator === 'slash' && <IconSlash />}\n            {separator === 'dash' && <IconMinus />}\n            {separator === 'dot' && <IconPointFilled />}\n        </span>\n    )\n}\n\nBreadcrumbs.Item = BreadcrumbsItem\n\nexport { Breadcrumbs }\n"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport { composeRenderProps, type LinkProps, Link as RACLink } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\nconst Link = ({ className, ...props }: LinkProps) => {\n    return (\n        <RACLink\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative cursor-pointer rounded-lg text-sm outline-hidden transition',\n                    'focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2',\n                    'disabled:cursor-default disabled:opacity-50',\n                    className\n                )\n            )}\n        />\n    )\n}\n\nexport { Link }\n"
  },
  "header": {
    "component": "@/components/ui/header",
    "raw": "import type { ComponentPropsWithRef } from 'react'\nimport { cn } from '@/lib/utils'\n\ninterface HeaderProps extends ComponentPropsWithRef<'header'> {\n    title?: string\n    description?: string\n}\n\nconst Header = ({ title, description, className, children, ...props }: HeaderProps) => (\n    <header\n        className={cn(\n            'grid items-start gap-1.5 md:auto-rows-min md:grid-rows-[auto_auto] md:has-[[slot=action]]:grid-cols-[1fr_auto]',\n            className\n        )}\n        slot='header'\n        {...props}\n    >\n        {title && <HeaderTitle>{title}</HeaderTitle>}\n        {description && <HeaderDescription>{description}</HeaderDescription>}\n        {!title && typeof children === 'string' ? <HeaderTitle>{children}</HeaderTitle> : children}\n    </header>\n)\n\nconst HeaderTitle = ({ className, ...props }: ComponentPropsWithRef<'h3'>) => (\n    <h3 slot='title' {...props} className={cn('font-semibold text-lg leading-none tracking-tight', className)} />\n)\n\nconst HeaderDescription = ({ className, ...props }: ComponentPropsWithRef<'div'>) => (\n    <div className={cn('text-muted-foreground text-sm md:row-start-2', className)} slot='description' {...props} />\n)\n\nconst HeaderAction = ({ className, ...props }: ComponentPropsWithRef<'div'>) => (\n    <div\n        className={cn(\n            'flex items-center gap-2 self-start justify-self-end md:col-start-2 md:row-span-2 md:row-start-1',\n            className\n        )}\n        slot='action'\n        {...props}\n    />\n)\n\nHeader.Title = HeaderTitle\nHeader.Description = HeaderDescription\nHeader.Action = HeaderAction\n\nexport { Header }\n"
  },
  "keyboard": {
    "component": "@/components/ui/keyboard",
    "raw": "'use client'\n\nimport type { ComponentPropsWithRef } from 'react'\nimport { Keyboard as RACKeyboard } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\ntype ShortcutKeyResult = {\n    symbol: string\n    readable: string\n}\n\nconst shortcutKeyMap: Record<string, ShortcutKeyResult> = {\n    mod: { symbol: '⌘', readable: 'Command/Control' },\n    win: { symbol: '⌘', readable: 'Win' },\n    meta: { symbol: '⌘', readable: 'Meta' },\n    alt: { symbol: '⌥', readable: 'Option/Alt' },\n    shift: { symbol: '⇧', readable: 'Shift' },\n    space: { symbol: '␣', readable: 'Space' },\n    tab: { symbol: '⇥', readable: 'Tab' },\n    delete: { symbol: '⌫', readable: 'Delete' },\n    capslock: { symbol: '⇪', readable: 'Caps Lock' },\n    up: { symbol: '↑', readable: 'Up' },\n    right: { symbol: '→', readable: 'Right' },\n    down: { symbol: '↓', readable: 'Down' },\n    left: { symbol: '←', readable: 'Left' },\n    pageup: { symbol: '⇞', readable: 'Page Up' },\n    pagedown: { symbol: '⇟', readable: 'Page Down' },\n    home: { symbol: '↖', readable: 'Home' },\n    end: { symbol: '↘', readable: 'End' },\n    enter: { symbol: '↵', readable: 'Enter' },\n    esc: { symbol: '⎋', readable: 'Escape' },\n    fn: { symbol: 'Fn', readable: 'Function' }\n}\n\nconst getShortcutKey = (key: string): ShortcutKeyResult =>\n    shortcutKeyMap[key.toLowerCase()] || { symbol: key, readable: key }\n\nconst Keyboard = ({\n    keys,\n    className,\n    ref,\n    ...props\n}: ComponentPropsWithRef<typeof RACKeyboard> & { keys: string[] }) => {\n    if (!keys) return null\n    return (\n        <RACKeyboard\n            className={cn(\n                '!font-sans hidden w-fit space-x-0.5 justify-self-end rounded-sm border px-1.5 py-0.5 text-current/70 text-xs shadow group-hover:text-current group-focus:text-current group-disabled:opacity-50 sm:inline-flex rtl:space-x-reverse',\n                className\n            )}\n            ref={ref}\n            {...props}\n        >\n            {keys.map((key) => (\n                <abbr aria-label={getShortcutKey(key).readable} className='capitalize' key={key}>\n                    {getShortcutKey(key).symbol}\n                </abbr>\n            ))}\n        </RACKeyboard>\n    )\n}\n\nexport { Keyboard }\n"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\nimport {\n    composeRenderProps,\n    TextArea as RACTextArea,\n    TextField as RACTextField,\n    type TextFieldProps as RACTextFieldProps\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, fieldGroupStyle, Label } from './form'\n\ninterface TextareaProps extends RACTextFieldProps, FieldProps {\n    autoSize?: boolean\n    placeholder?: string\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Textarea = ({ className, placeholder, label, description, errorMessage, ref, ...props }: TextareaProps) => {\n    return (\n        <RACTextField\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {label && <Label>{label}</Label>}\n            <RACTextArea\n                className={cn(\n                    fieldGroupStyle(),\n                    'h-auto min-h-14 w-full min-w-0 rounded-lg border border-input bg-transparent p-2 text-base shadow-xs outline-hidden transition duration-200 sm:text-sm dark:bg-input/30',\n                    props.autoSize && 'field-sizing-content resize-none'\n                )}\n                placeholder={placeholder}\n            />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </RACTextField>\n    )\n}\n\nexport { Textarea }\n"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\n\nimport type { DropZoneProps } from 'react-aria-components'\nimport { composeRenderProps, DropZone as RACDropZone } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n    <RACDropZone\n        className={composeRenderProps(className, (className) =>\n            cn(\n                'group flex max-h-[200px] max-w-xl flex-col items-center justify-center gap-2 rounded-lg border border-dashed p-6 text-sm outline-hidden transition duration-200 has-[[slot=description]]:text-center',\n                'drop-target:border-primary drop-target:border-solid drop-target:bg-primary/10 drop-target:ring-4 drop-target:ring-ring/50 drop-target:[&_.text-muted-foreground]:text-primary',\n                'focus:border-primary/70 focus:outline-hidden focus:ring-4 focus:ring-ring/50 focus:invalid:border-destructive/70 focus:invalid:ring-destructive/50',\n                'focus-visible:ring-4 focus-visible:ring-ring/50',\n                className\n            )\n        )}\n        {...props}\n    />\n)\nexport { DropZone }\n"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport type { ReactNode } from 'react'\nimport type { GridListItemProps, GridListProps as RACGridListProps } from 'react-aria-components'\nimport { IconGripVertical } from '@tabler/icons-react'\nimport {\n    Button,\n    composeRenderProps,\n    GridList as RACGridList,\n    GridListItem as RACGridListItem\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Checkbox } from './checkbox'\n\ninterface GridListProps<T extends object> extends RACGridListProps<T> {\n    columns?: 1 | 2 | 3 | 4 | 5 | 6 | 'auto'\n    gap?: 0 | 1 | 2 | 3 | 4 | 5 | 6\n}\n\nconst GridList = <T extends object>({\n    children,\n    layout,\n    className,\n    columns = 1,\n    gap = 0,\n    ...props\n}: GridListProps<T>) => (\n    <RACGridList\n        aria-label={props['aria-label'] ?? 'Grid list'}\n        className={composeRenderProps(className, (className) =>\n            cn(\n                'group layout-stack:flex layout-stack:flex-col layout-stack:gap-0 layout-stack:divide-y layout-stack:rounded-lg layout-stack:border-y',\n                {\n                    'flex grow flex-wrap': columns === 'auto',\n                    'grid grid-cols-1': columns === 1,\n                    'grid grid-cols-2': columns === 2,\n                    'grid grid-cols-3': columns === 3,\n                    'grid grid-cols-4': columns === 4,\n                    'grid grid-cols-5': columns === 5,\n                    'grid grid-cols-6': columns === 6\n                },\n                {\n                    'gap-0': gap === 0,\n                    'gap-1': gap === 1,\n                    'gap-2': gap === 2,\n                    'gap-3': gap === 3,\n                    'gap-4': gap === 4,\n                    'gap-5': gap === 5,\n                    'gap-6': gap === 6\n                },\n                className\n            )\n        )}\n        layout={columns === 1 && gap === 0 ? 'stack' : 'grid'}\n        {...props}\n    >\n        {children}\n    </RACGridList>\n)\n\nconst GridListItem = ({ className, children, ...props }: GridListItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n    return (\n        <RACGridListItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(\n                className,\n                (className, { isHovered, isSelected, isFocusVisible, isDisabled }) =>\n                    cn(\n                        'flex select-none items-center gap-2 px-3 py-2 text-foreground outline-hidden sm:text-sm',\n                        'group-layout-grid:rounded-lg group-layout-grid:border',\n                        'group-layout-stack:border-x group-layout-stack:last:rounded-b-lg group-layout-stack:first:rounded-t-lg',\n                        isHovered && 'bg-primary/10',\n                        {\n                            'bg-primary/10 text-primary group-layout-grid:border-primary/70 group-layout-stack:border-x-primary/70':\n                                isSelected || isFocusVisible\n                        },\n                        isDisabled && 'text-muted-foreground',\n                        className\n                    )\n            )}\n        >\n            {({ selectionMode, selectionBehavior, allowsDragging, isDragging }) => (\n                <>\n                    {allowsDragging && (\n                        <Button\n                            className={cn('cursor-grab text-muted-foreground', isDragging && 'cursor-grabbing')}\n                            slot='drag'\n                        >\n                            <IconGripVertical />\n                        </Button>\n                    )}\n                    {selectionMode === 'multiple' && selectionBehavior === 'toggle' && <Checkbox slot='selection' />}\n                    {children as ReactNode}\n                </>\n            )}\n        </RACGridListItem>\n    )\n}\n\nGridList.Item = GridListItem\n\nexport { GridList }\n"
  },
  "spoiler": {
    "component": "@/components/ui/spoiler",
    "raw": "'use client'\n\nimport { IconChevronDown } from '@tabler/icons-react'\nimport { type ReactNode, useRef, useState } from 'react'\nimport { cn } from '@/lib/utils'\nimport { Button } from './button'\n\ninterface SpoilerProps {\n    initialHeight?: number\n    initialOpacity?: number\n    showMoreText?: string\n    showLessText?: string\n    gradientTransparency?: boolean\n    className?: string\n    children: ReactNode\n}\n\nfunction Spoiler({\n    children,\n    initialHeight = 0,\n    initialOpacity = 0,\n    showMoreText = 'Show More',\n    showLessText = 'Show Less',\n    gradientTransparency = true,\n    className\n}: SpoilerProps) {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const contentRef = useRef<HTMLDivElement>(null)\n    return (\n        <div className={cn('relative overflow-visible', className)}>\n            <div\n                className='overflow-hidden transition-all duration-300 ease-in-out'\n                ref={contentRef}\n                style={{\n                    maxHeight: isExpanded ? contentRef.current?.scrollHeight : initialHeight,\n                    opacity: isExpanded ? 1 : initialOpacity\n                }}\n            >\n                {children}\n            </div>\n            {gradientTransparency && (\n                <div\n                    className={cn(\n                        'absolute inset-0 rounded-lg bg-gradient-to-b from-transparent to-background',\n                        isExpanded && 'hidden'\n                    )}\n                />\n            )}\n            <Button\n                className={cn('-translate-x-1/2 -bottom-4 absolute left-1/2 w-fit')}\n                onPress={() => setIsExpanded(!isExpanded)}\n                size='sm'\n                variant='outline'\n            >\n                {isExpanded ? showLessText : showMoreText}\n                <IconChevronDown className={cn('size-4 transition', isExpanded && '-rotate-180')} />\n            </Button>\n        </div>\n    )\n}\n\nexport { Spoiler }\n"
  },
  "command": {
    "component": "@/components/ui/command",
    "raw": "'use client'\n\nimport type { AutocompleteProps, ButtonProps, MenuProps, ModalOverlayProps } from 'react-aria-components'\nimport { IconLoader, IconSearch } from '@tabler/icons-react'\nimport { useEffect, useState } from 'react'\nimport { Autocomplete, Button, Group, Input, Menu, TextField } from 'react-aria-components'\nimport { cn, fuzzyMatch } from '@/lib/utils'\nimport { Keyboard } from './keyboard'\nimport { MenuItem, MenuLabel, MenuSection, MenuSeparator } from './menu'\nimport { ModalContent } from './modal'\n\ninterface CommandProps<T> extends MenuProps<T>, Pick<AutocompleteProps, 'inputValue' | 'onInputChange'> {\n    isPending?: boolean\n}\n\nconst Command = <T extends object>({ ...props }: CommandProps<T>) => {\n    return (\n        <div className={cn('rounded-lg border', props.className)} data-command>\n            <Autocomplete filter={fuzzyMatch} inputValue={props.inputValue} onInputChange={props.onInputChange}>\n                <TextField aria-label='Search' autoFocus className='border-b p-1'>\n                    <Group className='flex items-center px-2'>\n                        {props.isPending ? (\n                            <IconLoader className='size-4 shrink-0 animate-spin text-muted-foreground' />\n                        ) : (\n                            <IconSearch className='size-4 shrink-0 text-muted-foreground' />\n                        )}\n                        <Input className='w-full p-2 outline-hidden' placeholder='Search...' />\n                    </Group>\n                </TextField>\n                <Menu\n                    className='grid w-full grid-cols-[auto_1fr_auto] gap-y-1 overflow-y-auto p-2 outline-hidden sm:max-h-[30rem]'\n                    renderEmptyState={() => (\n                        <div className='col-span-full p-4 text-center text-muted-foreground'>No results found</div>\n                    )}\n                    {...props}\n                />\n            </Autocomplete>\n        </div>\n    )\n}\n\ninterface CommandModalProps<T> extends CommandProps<T>, Pick<ModalOverlayProps, 'isOpen' | 'onOpenChange'> {\n    shortcut?: {\n        modifiers?: 'alt' | 'mod' | 'mod+alt' | 'mod+shift' | 'mod+alt+shift' | 'alt+shift'\n        key: string\n    }\n}\n\nconst CommandModal = <T extends object>({ shortcut, ...props }: CommandModalProps<T>) => {\n    const [shortcutOpen, setShortcutOpen] = useState<boolean>(false)\n\n    useEffect(() => {\n        if (!shortcut) return\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (\n                e.key === shortcut?.key &&\n                (shortcut.modifiers === 'alt'\n                    ? e.altKey\n                    : shortcut.modifiers === 'mod+alt'\n                      ? e.altKey && (e.ctrlKey || e.metaKey)\n                      : shortcut.modifiers === 'mod+shift'\n                        ? e.shiftKey && (e.ctrlKey || e.metaKey)\n                        : shortcut.modifiers === 'mod+alt+shift'\n                          ? e.altKey && e.shiftKey && (e.ctrlKey || e.metaKey)\n                          : shortcut.modifiers === 'alt+shift'\n                            ? e.altKey && e.shiftKey\n                            : e.ctrlKey || e.metaKey)\n            ) {\n                e.preventDefault()\n                if (props.onOpenChange) {\n                    return props.onOpenChange(!props.isOpen)\n                }\n                setShortcutOpen(!shortcutOpen)\n            } else if (e.key === 'Escape') {\n                e.preventDefault()\n                if (props.onOpenChange) {\n                    return props.onOpenChange(false)\n                }\n                setShortcutOpen(false)\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown)\n        return () => document.removeEventListener('keydown', handleKeyDown)\n    })\n\n    return (\n        <ModalContent\n            aria-label='Commands'\n            className='h-[70dvh] **:data-command:border-0 sm:h-auto sm:min-h-0'\n            isOpen={props.isOpen || shortcutOpen}\n            onOpenChange={props.onOpenChange || setShortcutOpen}\n        >\n            <Command {...props} />\n        </ModalContent>\n    )\n}\n\nconst CommandTrigger = (props: ButtonProps) => <Button {...props} />\n\nCommand.Modal = CommandModal\n\nCommand.Trigger = CommandTrigger\n\nCommand.Item = MenuItem\nCommand.Label = MenuLabel\nCommand.Section = MenuSection\nCommand.Separator = MenuSeparator\n\nCommand.Shortcut = Keyboard\n\nexport { Command }\n"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\nimport type {\n    FieldErrorProps,\n    FormProps,\n    GroupProps,\n    InputProps,\n    LabelProps,\n    TextProps,\n    ValidationResult\n} from 'react-aria-components'\nimport {\n    composeRenderProps,\n    Group,\n    FieldError as RACFieldError,\n    Form as RACForm,\n    Input as RACInput,\n    Label as RACLabel,\n    Text\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst fieldGroupStyle = tv({\n    base: [\n        'flex h-9 items-center rounded-md border border-input bg-transparent shadow-xs transition dark:bg-input/30',\n        'hover:border-ring group-invalid/field:hover:border-destructive/70!',\n        'focus-within:border-ring focus-within:ring-[3px] focus-within:ring-ring/50',\n        'group-open/field:border-ring group-open/field:ring-[3px] group-open/field:ring-ring/50',\n        'group-has-focus-visible/field:border-ring group-has-focus-visible/field:ring-[3px] group-has-focus-visible/field:ring-ring/50',\n        'group-has-focus-within/field:border-ring group-has-focus-within/field:ring-[3px] group-has-focus-within/field:ring-ring/50',\n        'group-has-focus/field:border-ring group-has-focus/field:ring-[3px] group-has-focus/field:ring-ring/50',\n        'group-invalid/field:group-open/field:ring-destructive/20 group-invalid/field:group-has-focus-visible/field:ring-destructive/20 group-invalid/field:group-has-focus-within/field:ring-destructive/20 group-invalid/field:group-has-focus/field:ring-destructive/20',\n        'group-invalid/field:group-open/field:border-destructive/70 group-invalid/field:group-has-focus-visible/field:border-destructive/70 group-invalid/field:group-has-focus-within/field:border-destructive/70 group-invalid/field:group-has-focus/field:border-destructive/70',\n        '**:[input]:w-full **:[input]:p-2 **:[input]:text-base **:[input]:outline-hidden sm:**:[input]:text-sm',\n        'disabled:pointer-events-none'\n    ]\n})\n\nconst labelStyle = tv({\n    base: [\n        'w-fit cursor-default font-medium text-foreground text-sm leading-none transition-colors focus:text-primary',\n        'group-open/field:text-primary group-has-focus-visible/field:text-primary group-has-focus-within/field:text-primary group-has-focus/field:text-primary group-has-pressed/field:text-primary',\n        'group-invalid/field:text-destructive! group-disabled/field:text-muted-foreground! group-has-invalid/field:text-destructive!',\n        'group-disabled/field:text-muted-foreground group-has-disabled/field:text-muted-foreground'\n    ]\n})\n\nconst descriptionStyle = tv({\n    base: 'text-pretty text-muted-foreground text-sm'\n})\n\nconst errorStyle = tv({\n    base: 'text-destructive text-sm/5'\n})\n\nconst Form = (props: FormProps) => <RACForm {...props} />\n\ninterface FieldProps {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string) | ReactNode\n}\n\nconst Label = ({ className, ...props }: LabelProps) => (\n    <RACLabel slot='label' {...props} className={labelStyle({ className })} />\n)\n\nconst Description = ({ className, ...props }: TextProps) => (\n    <Text {...props} className={descriptionStyle({ className })} slot='description' />\n)\n\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n    return Array.isArray(props.children) ? (\n        <RACFieldError {...props} className={composeRenderProps(className, (className) => errorStyle({ className }))}>\n            <ul className='list-inside list-disc'>\n                {props.children.map((child, index) => (\n                    <li key={index}>{child}</li>\n                ))}\n            </ul>\n        </RACFieldError>\n    ) : (\n        <RACFieldError {...props} className={composeRenderProps(className, (className) => errorStyle({ className }))} />\n    )\n}\n\nconst FieldGroup = ({ className, ref, ...props }: GroupProps & { ref?: Ref<HTMLDivElement> }) => {\n    return (\n        <Group\n            className={composeRenderProps(className, (className) => fieldGroupStyle({ className }))}\n            ref={ref}\n            {...props}\n        />\n    )\n}\n\nconst Input = ({ className, ref, ...props }: InputProps & { ref?: Ref<HTMLInputElement> }) => (\n    <RACInput ref={ref} {...props} />\n)\n\nexport {\n    Description,\n    FieldError,\n    FieldGroup,\n    Input,\n    Label,\n    descriptionStyle,\n    errorStyle,\n    fieldGroupStyle,\n    labelStyle,\n    type FieldProps\n}\n\nexport { Form }\n"
  },
  "toggle": {
    "component": "@/components/ui/toggle",
    "raw": "'use client'\n\nimport type { ToggleButtonGroupProps, ToggleButtonProps } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { createContext, type RefObject, use } from 'react'\nimport { composeRenderProps, ToggleButton, ToggleButtonGroup } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { cn } from '@/lib/utils'\n\ntype ToggleGroupContextProps = {\n    isDisabled?: boolean\n    gap?: 0 | 1 | 2 | 3 | 4\n    variant?: 'default' | 'outline'\n    orientation?: 'horizontal' | 'vertical'\n    size?: 'xs' | 'sm' | 'md' | 'lg'\n    icon?: boolean\n}\n\nconst ToggleGroupContext = createContext<ToggleGroupContextProps>({\n    gap: 0,\n    variant: 'default',\n    orientation: 'horizontal',\n    size: 'md',\n    icon: false\n})\n\ninterface ToggleGroupProps extends ToggleButtonGroupProps, ToggleGroupContextProps {\n    ref?: RefObject<HTMLDivElement>\n}\n\nconst toggleGroupStyles = tv({\n    variants: {\n        orientation: {\n            horizontal: 'flex flex-row [-ms-overflow-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden',\n            vertical: 'grid items-start'\n        },\n        gap: {\n            0: 'gap-0 rounded-md **:rounded-none',\n            1: 'gap-1',\n            2: 'gap-2',\n            3: 'gap-3',\n            4: 'gap-4'\n        }\n    },\n    defaultVariants: {\n        orientation: 'horizontal',\n        gap: 0\n    },\n    compoundVariants: [\n        {\n            gap: 0,\n            orientation: 'vertical',\n            className: '*:[button]:-mt-px *:[button]:first:rounded-t-md *:[button]:last:rounded-b-md'\n        },\n        {\n            gap: 0,\n            orientation: 'horizontal',\n            className: '*:-mr-px *:first:*:rounded-s-md *:first:rounded-s-md *:last:*:rounded-e-md *:last:rounded-e-md'\n        }\n    ]\n})\n\nconst ToggleGroup = ({\n    className,\n    ref,\n    variant,\n    gap,\n    icon,\n    size = 'md',\n    orientation = 'horizontal',\n    ...props\n}: ToggleGroupProps) => {\n    return (\n        <ToggleGroupContext.Provider value={{ variant, gap, orientation, size, icon, isDisabled: props.isDisabled }}>\n            <ToggleButtonGroup\n                className={composeRenderProps(className, (className) =>\n                    cn(\n                        toggleGroupStyles({\n                            gap,\n                            orientation\n                        }),\n                        className\n                    )\n                )}\n                orientation={orientation}\n                ref={ref}\n                {...props}\n            />\n        </ToggleGroupContext.Provider>\n    )\n}\n\nconst toggleStyles = tv({\n    base: [\n        \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md pressed:bg-accent selected:bg-accent font-medium pressed:text-accent-foreground selected:text-accent-foreground text-sm outline-none transition-[color,box-shadow] hover:bg-muted hover:text-muted-foreground focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50 disabled:pointer-events-none disabled:opacity-50 aria-invalid:border-destructive aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0\"\n    ],\n    variants: {\n        variant: {\n            default: 'bg-transparent',\n            outline: 'border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground'\n        },\n        noGap: { true: '' },\n        orientation: {\n            horizontal: 'inline-flex justify-center',\n            vertical: 'flex'\n        },\n        size: {\n            xs: 'gap-x-1.5 px-2 text-xs [--height:theme(spacing.6)] [--width:auto] **:[svg]:size-3.5',\n            sm: 'gap-x-1.5 px-3 text-sm [--height:theme(spacing.8)] [--width:auto] **:[svg]:size-4',\n            md: 'gap-x-2 px-4 text-sm [--height:theme(spacing.9)] [--width:auto] **:[svg]:size-4',\n            lg: 'gap-x-2.5 px-5 text-base [--height:theme(spacing.10)] [--width:auto] **:[svg]:size-5'\n        },\n        icon: {\n            true: 'h-(--height) w-(--height) shrink-0 justify-center px-0',\n            false: 'h-(--height) w-(--width)'\n        }\n    },\n    defaultVariants: {\n        variant: 'default',\n        size: 'sm'\n    },\n    compoundVariants: [\n        {\n            noGap: true,\n            orientation: 'vertical',\n            className: 'w-full'\n        }\n    ]\n})\n\ninterface ToggleProps extends ToggleButtonProps, VariantProps<typeof toggleStyles> {\n    ref?: RefObject<HTMLButtonElement>\n}\n\nconst Toggle = ({ className, variant, ref, ...props }: ToggleProps) => {\n    const { variant: groupvariant, gap, size, orientation, icon, isDisabled: isGroupDisabled } = use(ToggleGroupContext)\n    return (\n        <ToggleButton\n            className={composeRenderProps(className, (classname) =>\n                cn(\n                    toggleStyles({\n                        variant: variant ?? groupvariant,\n                        size: props.size ?? size,\n                        icon: props.icon ?? icon,\n                        orientation: orientation,\n                        noGap: gap === 0\n                    }),\n                    classname\n                )\n            )}\n            isDisabled={props.isDisabled ?? isGroupDisabled}\n            ref={ref}\n            {...props}\n        />\n    )\n}\n\nToggle.Group = ToggleGroup\n\nexport { Toggle, ToggleGroup, ToggleGroupContext, toggleGroupStyles }\nexport type { ToggleGroupContextProps }\n"
  },
  "context-menu": {
    "component": "@/components/ui/context-menu",
    "raw": "'use client'\n\nimport type { MenuProps } from 'react-aria-components'\nimport {\n    type ComponentPropsWithRef,\n    createContext,\n    createRef,\n    type Dispatch,\n    type MouseEvent,\n    type ReactNode,\n    type RefObject,\n    type SetStateAction,\n    use,\n    useRef,\n    useState\n} from 'react'\nimport { cn } from '@/lib/utils'\nimport { Menu, MenuContent } from './menu'\n\ninterface ContextMenuContextProps {\n    triggerRef: RefObject<HTMLDivElement | null>\n    contextMenuOffset: { offset: number; crossOffset: number } | null\n    setContextMenuOffset: Dispatch<SetStateAction<{ offset: number; crossOffset: number } | null>>\n}\n\nconst ContextMenuContext = createContext<ContextMenuContextProps>({\n    triggerRef: createRef(),\n    contextMenuOffset: null,\n    setContextMenuOffset: () => {}\n})\n\nconst useContextMenu = () => {\n    const context = use(ContextMenuContext)\n    if (!context) {\n        throw new Error('useContextMenu must be used within a ContextMenu')\n    }\n    return context\n}\n\ninterface ContextMenuProps {\n    children: ReactNode\n}\n\nconst ContextMenu = ({ children }: ContextMenuProps) => {\n    const [contextMenuOffset, setContextMenuOffset] = useState<{\n        offset: number\n        crossOffset: number\n    } | null>(null)\n    const triggerRef = useRef<HTMLDivElement>(null)\n    return (\n        <ContextMenuContext.Provider value={{ triggerRef, contextMenuOffset, setContextMenuOffset }}>\n            {children}\n        </ContextMenuContext.Provider>\n    )\n}\n\nconst ContextMenuTrigger = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { setContextMenuOffset, triggerRef } = useContextMenu()\n    const areaRef = useRef<HTMLDivElement>(null)\n\n    const onContextMenu = (e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault()\n        const rect = e.currentTarget.getBoundingClientRect()\n        triggerRef.current = areaRef.current\n        setContextMenuOffset({\n            offset: e.clientY - rect.bottom,\n            crossOffset: e.clientX - rect.left\n        })\n    }\n    return (\n        <div\n            aria-haspopup='menu'\n            className={cn('relative cursor-default select-none outline-hidden disabled:opacity-50', className)}\n            onContextMenu={onContextMenu}\n            ref={areaRef}\n            role='none'\n            {...props}\n        />\n    )\n}\n\ntype ContextMenuContentProps<T> = Omit<\n    MenuProps<T>,\n    'showArrow' | 'isOpen' | 'onOpenChange' | 'triggerRef' | 'placement' | 'shouldFlip' | 'className'\n>\n\nconst ContextMenuContent = <T extends object>(props: Omit<ContextMenuContentProps<T>, 'style'>) => {\n    const { contextMenuOffset, setContextMenuOffset, triggerRef } = useContextMenu()\n    return contextMenuOffset ? (\n        <MenuContent\n            aria-label={props['aria-label'] ?? 'Context Menu'}\n            crossOffset={contextMenuOffset?.crossOffset}\n            isOpen={!!contextMenuOffset}\n            offset={contextMenuOffset?.offset ?? 0}\n            onClose={() => setContextMenuOffset(null)}\n            onOpenChange={() => setContextMenuOffset(null)}\n            placement='bottom left'\n            triggerRef={triggerRef}\n            {...props}\n        />\n    ) : null\n}\n\nContextMenu.Trigger = ContextMenuTrigger\nContextMenu.Content = ContextMenuContent\n\nContextMenu.Item = Menu.Item\nContextMenu.Label = Menu.Label\nContextMenu.Separator = Menu.Separator\nContextMenu.Details = Menu.Details\nContextMenu.Section = Menu.Section\nContextMenu.Header = Menu.Header\n\nexport { ContextMenu }\n"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from '@tabler/icons-react'\nimport {\n    Button,\n    type ButtonProps,\n    composeRenderProps,\n    Input,\n    NumberField as RACNumberField,\n    type NumberFieldProps as RACNumberFieldProps\n} from 'react-aria-components'\nimport { useIsMobile } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\n\ninterface NumberFieldProps extends RACNumberFieldProps, FieldProps {\n    placeholder?: string\n    ref?: Ref<HTMLDivElement>\n}\n\nconst NumberField = ({ label, placeholder, description, className, errorMessage, ref, ...props }: NumberFieldProps) => {\n    const isMobile = useIsMobile()\n    return (\n        <RACNumberField\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup\n                className='overflow-hidden'\n                isDisabled={props.isDisabled}\n                isInvalid={props.isInvalid || !!errorMessage}\n            >\n                {isMobile && (\n                    <Stepper className='border-r' slot='decrement'>\n                        <IconMinus />\n                    </Stepper>\n                )}\n                <Input className='text-center tabular-nums sm:text-left' placeholder={placeholder} />\n                {isMobile ? (\n                    <Stepper className='border-s' slot='increment'>\n                        <IconPlus />\n                    </Stepper>\n                ) : (\n                    <div className='flex h-full flex-col divide-y border-s'>\n                        <Stepper className='h-5 w-7' slot='increment'>\n                            <IconChevronUp />\n                        </Stepper>\n                        <Stepper className='h-5 w-7' slot='decrement'>\n                            <IconChevronDown />\n                        </Stepper>\n                    </div>\n                )}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </RACNumberField>\n    )\n}\n\ninterface StepperProps extends ButtonProps {\n    slot: 'increment' | 'decrement'\n    className?: string\n}\n\nconst Stepper = ({ slot, className, ...props }: StepperProps) => {\n    return (\n        <Button\n            className={composeRenderProps(className, (className, { isDisabled, isPressed }) =>\n                cn(\n                    'flex size-12 items-center justify-center text-muted-foreground outline-hidden',\n                    isPressed &&\n                        'bg-accent text-accent-foreground group-has-invalid/field:bg-destructive group-has-invalid/field:text-destructive-foreground',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n            slot={slot}\n            {...props}\n        />\n    )\n}\n\nexport { NumberField }\n"
  },
  "sidebar": {
    "component": "@/components/ui/sidebar",
    "raw": "'use client'\n\nimport type {\n    ButtonProps,\n    DisclosureGroupProps,\n    DisclosurePanelProps,\n    DisclosureProps,\n    LinkProps,\n    TextProps\n} from 'react-aria-components'\nimport { IconChevronRight, IconMenu } from '@tabler/icons-react'\nimport {\n    type ComponentProps,\n    type ComponentPropsWithRef,\n    type CSSProperties,\n    createContext,\n    type HTMLAttributes,\n    type ReactNode,\n    use,\n    useCallback,\n    useEffect,\n    useMemo,\n    useState\n} from 'react'\nimport {\n    Button,\n    composeRenderProps,\n    DialogTrigger,\n    Disclosure,\n    DisclosureGroup,\n    DisclosurePanel,\n    Header,\n    Link,\n    OverlayArrow,\n    Popover,\n    Text\n} from 'react-aria-components'\nimport { useIsMobile } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\nimport { Sheet } from './sheet'\nimport { Tooltip } from './tooltip'\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar:state'\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst WIDTH = '16rem'\nconst WIDTH_DOCK = '3rem'\nconst WIDTH_FLOAT_DOCK = '4rem'\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b'\n\ntype SidebarContextProps = {\n    state: 'expanded' | 'collapsed'\n    open: boolean\n    setOpen: (open: boolean) => void\n    isMobile: boolean\n    toggleSidebar: () => void\n    variant: 'default' | 'float' | 'inset'\n    collapsible: 'dock' | 'hidden' | 'none'\n    isInverse?: boolean\n}\n\nconst SidebarContext = createContext<SidebarContextProps | null>(null)\n\nconst useSidebar = () => {\n    const context = use(SidebarContext)\n    if (!context) {\n        throw new Error('useSidebar must be used within a Sidebar.')\n    }\n    return context\n}\n\ninterface SidebarProviderProps extends ComponentProps<'div'> {\n    defaultOpen?: boolean\n    shortcut?: string\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n    isMobileOpen?: boolean\n    onMobileOpenChange?: (isMobileOpen: boolean) => void\n    variant?: 'default' | 'float' | 'inset'\n    collapsible?: 'dock' | 'hidden' | 'none'\n    isInverse?: boolean\n}\n\nconst Sidebar = ({\n    defaultOpen = true,\n    isOpen: openProp,\n    onOpenChange: setOpenProp,\n    isMobileOpen,\n    onMobileOpenChange,\n    className,\n    children,\n    shortcut = SIDEBAR_KEYBOARD_SHORTCUT,\n    variant = 'default',\n    collapsible = 'hidden',\n    isInverse = false,\n    ...props\n}: SidebarProviderProps) => {\n    const isMobile = useIsMobile()\n    const [internalOpenState, setInternalOpenState] = useState<boolean>(defaultOpen)\n\n    const open = openProp ?? internalOpenState\n    const setOpen = useCallback(\n        (value: boolean | ((value: boolean) => boolean)) => {\n            const openState = typeof value === 'function' ? value(open) : value\n            if (setOpenProp) {\n                setOpenProp(openState)\n            } else {\n                setInternalOpenState(openState)\n            }\n            cookieStore.set({\n                name: SIDEBAR_COOKIE_NAME,\n                value: String(openState),\n                expires: SIDEBAR_COOKIE_MAX_AGE,\n                path: '/'\n            })\n        },\n        [setOpenProp, open]\n    )\n\n    const toggleSidebar = useCallback(() => {\n        return isMobile ? onMobileOpenChange?.(!isMobileOpen) : setOpen((open) => !open)\n    }, [isMobile, setOpen, isMobileOpen, onMobileOpenChange])\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === shortcut && collapsible !== 'none' && (event.metaKey || event.ctrlKey)) {\n                event.preventDefault()\n                toggleSidebar()\n            }\n        }\n\n        window.addEventListener('keydown', handleKeyDown)\n        return () => window.removeEventListener('keydown', handleKeyDown)\n    }, [toggleSidebar, shortcut, collapsible])\n\n    const state = open ? 'expanded' : 'collapsed'\n\n    const contextValue = useMemo<SidebarContextProps>(\n        () => ({\n            state,\n            open,\n            setOpen,\n            isMobile,\n            isMobileOpen,\n            onMobileOpenChange,\n            toggleSidebar,\n            variant,\n            collapsible\n        }),\n        [state, open, setOpen, isMobile, isMobileOpen, onMobileOpenChange, toggleSidebar, variant, collapsible]\n    )\n\n    const collapsedHidden = state === 'collapsed' && collapsible === 'hidden'\n    const collapsedDock = state === 'collapsed' && collapsible === 'dock' && variant === 'default'\n    const collapsedFloatDock = state === 'collapsed' && variant === 'float' && collapsible === 'dock'\n    const collapsedInsetDock = state === 'collapsed' && variant === 'inset' && collapsible === 'dock'\n\n    return (\n        <SidebarContext value={contextValue}>\n            {collapsible === 'none' && !isMobile ? (\n                <div\n                    className={cn(\n                        'flex h-full min-h-screen flex-col border-r bg-sidebar text-sidebar-foreground',\n                        isInverse && 'dark',\n                        className\n                    )}\n                    style={{ width: WIDTH }}\n                >\n                    {children}\n                </div>\n            ) : isMobile ? (\n                <Sheet isOpen={isMobileOpen} onOpenChange={onMobileOpenChange} {...props}>\n                    <Sheet.Trigger className='absolute top-2 left-2.5 z-50 inline-flex size-9 shrink-0 items-center justify-center rounded-md bg-sidebar pressed:bg-accent/80 text-muted-foreground outline-hidden hover:bg-accent focus-visible:border-sidebar-ring focus-visible:ring-4 focus-visible:ring-sidebar-ring/50'>\n                        <IconMenu />\n                    </Sheet.Trigger>\n                    <Sheet.Content aria-label='Sidebar' className={isInverse ? 'dark' : ''} side='left'>\n                        {children}\n                    </Sheet.Content>\n                </Sheet>\n            ) : (\n                <div\n                    className={cn(\n                        'peer z-20 hidden bg-sidebar text-sidebar-foreground [--visual-viewport-vertical-padding:32px] md:block **:[svg]:shrink-0',\n                        isInverse && 'dark **:dark'\n                    )}\n                    data-open={open}\n                    data-variant={variant}\n                >\n                    <div\n                        className={cn(\n                            'sticky top-0 left-0 hidden backdrop-blur transition-[left,right,width] duration-200 ease-linear md:flex',\n                            variant === 'float' && 'p-2',\n                            variant === 'inset' && 'bg-sidebar p-2',\n                            variant === 'default' && !collapsedHidden && 'border-r',\n                            collapsedHidden && 'p-0'\n                        )}\n                        style={{\n                            width: collapsedDock\n                                ? WIDTH_DOCK\n                                : collapsedFloatDock\n                                  ? WIDTH_FLOAT_DOCK\n                                  : collapsedHidden\n                                    ? 0\n                                    : collapsedInsetDock\n                                      ? WIDTH_FLOAT_DOCK\n                                      : WIDTH\n                        }}\n                    >\n                        <div\n                            className={cn(\n                                'flex size-full min-h-svh flex-col text-sidebar-foreground',\n                                variant === 'inset' && 'min-h-[calc(100vh-1rem)]',\n                                variant === 'float' &&\n                                    'min-h-[calc(100vh-1rem)] rounded-lg border border-sidebar-border bg-sidebar',\n                                className\n                            )}\n                            data-sidebar='default'\n                        >\n                            {children}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </SidebarContext>\n    )\n}\n\nconst SidebarHeader = ({ className, ...props }: ComponentProps<'div'>) => {\n    const { state, variant, collapsible } = useSidebar()\n    const collapsed = state === 'collapsed'\n    return (\n        <div\n            className={cn(\n                'flex items-center gap-x-3 p-3 font-semibold *:[svg]:size-5',\n                collapsed && variant === 'float' && 'mt-1',\n                collapsed && 'mt-0.5 justify-center *:[[slot=label]]:hidden',\n                collapsed && collapsible === 'hidden' && 'hidden',\n                className\n            )}\n            data-sidebar-header='true'\n            {...props}\n        />\n    )\n}\n\nconst SidebarFooter = ({ className, ...props }: ComponentProps<'div'>) => {\n    const { state, isMobile, collapsible } = useSidebar()\n    const collapsed = state === 'collapsed' && !isMobile\n    const hidden = collapsed && collapsible === 'hidden'\n    return (\n        <div\n            className={cn(\n                'mt-auto flex flex-col overflow-hidden p-2',\n                '**:data-avatar:size-8 **:data-avatar:shrink-0',\n                collapsed && '**:data-user:hidden **:[button]:p-0 **:[svg]:hidden',\n                hidden && 'hidden',\n                className\n            )}\n            data-sidebar-footer='true'\n            {...props}\n        />\n    )\n}\n\nconst SidebarBody = ({ className, ...props }: HTMLAttributes<HTMLDivElement>) => (\n    <div\n        className={cn(\n            'isolate flex max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] flex-col space-y-4 overflow-y-auto overflow-x-hidden py-2 will-change-scroll',\n            className\n        )}\n        slot='body'\n        {...props}\n    />\n)\n\nconst SidebarSection = ({ className, ...props }: DisclosureGroupProps & { title?: string }) => {\n    const { state } = useSidebar()\n    return (\n        <section className={cn('col-span-full flex flex-col gap-y-1 px-2', className)} data-section={true}>\n            {state !== 'collapsed' && 'title' in props && (\n                <Header className='flex shrink-0 items-center rounded-lg px-2 font-medium text-sidebar-accent-foreground text-xs outline-hidden transition-[margin,opa] duration-200 ease-linear'>\n                    {props.title}\n                </Header>\n            )}\n            <DisclosureGroup\n                {...props}\n                allowsMultipleExpanded\n                className='group grid grid-cols-[auto_1fr_auto] gap-y-0.5'\n                data-section\n            >\n                {props.children}\n            </DisclosureGroup>\n        </section>\n    )\n}\n\ninterface SidebarItemProps\n    extends Omit<DisclosureProps, 'onClick'>,\n        Pick<LinkProps, 'href' | 'routerOptions' | 'onPress'> {\n    isCurrent?: boolean\n    tooltip?: ReactNode | string\n    badge?: string | number | undefined\n    style?: CSSProperties\n}\n\nconst SidebarItem = ({ className, isCurrent, ...props }: SidebarItemProps) => {\n    const { state, collapsible } = useSidebar()\n    const collapsedDock = state === 'collapsed' && collapsible === 'dock'\n\n    const renderMenuWithHref = (\n        <Link\n            className={cn(\n                'relative col-span-full cursor-pointer items-center rounded-lg text-sm outline-hidden',\n                'focus-visible:ring-2 focus-visible:ring-sidebar-ring/50 focus-visible:ring-offset-2',\n                'disabled:cursor-default disabled:opacity-50',\n                collapsedDock ? 'flex size-8 justify-center gap-2 p-0' : 'grid grid-cols-subgrid gap-x-3 px-2.5 py-2',\n                state === 'collapsed' && 'group-data-section:*:[[slot=label]]:hidden',\n                isCurrent\n                    ? 'bg-sidebar-primary text-sidebar-primary-foreground'\n                    : 'pressed:bg-sidebar-accent/80 pressed:text-sidebar-accent-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\n                className\n            )}\n            {...props}\n        >\n            {props.children as ReactNode}\n        </Link>\n    )\n\n    return 'href' in props && collapsedDock ? (\n        <Tooltip delay={100}>\n            {renderMenuWithHref}\n            <Tooltip.Content className='flex items-center gap-2' isInverse placement='right top'>\n                {props.children as ReactNode}\n            </Tooltip.Content>\n        </Tooltip>\n    ) : 'href' in props && !collapsedDock ? (\n        renderMenuWithHref\n    ) : state === 'expanded' ? (\n        <Disclosure\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative col-span-full grid grid-cols-subgrid items-center gap-x-3 gap-y-0.5 rounded-lg text-sm outline-hidden disabled:opacity-50 expanded:*:[button]:data-[slot=indicator]:rotate-90',\n                    className\n                )\n            )}\n            isExpanded\n            {...props}\n        />\n    ) : (\n        <DialogTrigger>{props.children as ReactNode}</DialogTrigger>\n    )\n}\n\nconst SidebarLabel = ({ className, ...props }: TextProps) => {\n    return <Text className={cn('col-start-2 line-clamp-1 text-left', className)} slot='label' {...props} />\n}\n\nconst SidebarSubItemTrigger = ({ children, className, ...props }: ButtonProps) => {\n    const { state, collapsible } = useSidebar()\n    const collapsedDock = state === 'collapsed' && collapsible === 'dock'\n    return (\n        <Button\n            slot='trigger'\n            {...props}\n            className={cn(\n                'col-span-full cursor-pointer items-center rounded-lg outline-hidden',\n                'pressed:bg-accent/80 pressed:text-sidebar-accent-foreground hover:bg-accent/90 hover:text-sidebar-accent-foreground',\n                collapsedDock ? 'flex size-8 justify-center p-0' : 'grid grid-cols-subgrid px-2.5 py-2 text-left',\n                'focus-visible:ring-2 focus-visible:ring-sidebar-ring/50 focus-visible:ring-offset-2',\n                'aria-expanded:*:data-[slot=indicator]:rotate-90',\n                state === 'collapsed' && '*:[[slot=label]]:hidden',\n                className\n            )}\n        >\n            {(values) => (\n                <>\n                    {typeof children === 'function' ? children(values) : children}\n                    {!collapsedDock && (\n                        <IconChevronRight\n                            className={cn('ml-auto size-3.5 text-inherit transition-transform')}\n                            data-slot='indicator'\n                        />\n                    )}\n                </>\n            )}\n        </Button>\n    )\n}\n\nconst SidebarSubItem = ({ children, className, ...props }: DisclosurePanelProps) => {\n    const { state, isMobile } = useSidebar()\n    return state === 'expanded' || isMobile ? (\n        <DisclosurePanel className={cn('col-span-full grid grid-cols-subgrid gap-y-0.5', className)} {...props}>\n            {children}\n        </DisclosurePanel>\n    ) : (\n        <Popover\n            className='group flex flex-col rounded-lg border bg-sidebar p-1 **:[[slot=label]]:hidden'\n            placement='right top'\n        >\n            <OverlayArrow className='group'>\n                <svg\n                    className='group-placement-left:-rotate-90 block fill-sidebar stroke-sidebar-border group-placement-bottom:rotate-180 group-placement-right:rotate-90'\n                    height={12}\n                    viewBox='0 0 12 12'\n                    width={12}\n                >\n                    <path d='M0 0 L6 6 L12 0' />\n                </svg>\n            </OverlayArrow>\n            {children}\n        </Popover>\n    )\n}\n\nconst SidebarTrigger = ({ children, ...props }: ComponentProps<typeof Button>) => {\n    const { toggleSidebar, variant, collapsible, isMobile, open } = useSidebar()\n    return (\n        !isMobile &&\n        collapsible !== 'none' && (\n            <Button\n                aria-label='Toggle Sidebar'\n                className={cn(\n                    'absolute z-50 inline-flex size-8 shrink-0 items-center justify-center rounded-md text-muted-foreground outline-hidden transition-transform',\n                    'hover:bg-accent hover:text-accent-foreground',\n                    'focus-visible:ring-4 focus-visible:ring-sidebar-ring/50',\n                    'pressed:bg-accent/80 pressed:text-sidebar-accent-foreground',\n                    variant === 'default' ? 'top-2 right-2' : 'top-4 right-4',\n                    open ? 'translate-x-0' : `${variant === 'default' ? 'translate-x-12' : 'translate-x-16'}`\n                )}\n                onPress={toggleSidebar}\n                {...props}\n            >\n                {children || <IconMenu className='size-4' />}\n            </Button>\n        )\n    )\n}\n\nconst SidebarRail = ({ className, ...props }: ButtonProps) => {\n    const { toggleSidebar, state, isMobile } = useSidebar()\n    return (\n        !isMobile && (\n            <Button\n                aria-label='Toggle Sidebar'\n                className={composeRenderProps(className, (className) =>\n                    cn(\n                        'fixed inset-y-0 max-h-full w-4 bg-transparent transition',\n                        state === 'collapsed' ? '-right-2' : 'right-0',\n                        state === 'collapsed' ? 'cursor-e-resize' : 'cursor-w-resize',\n                        'pressed:border-sidebar-primary pressed:border-r-2 hover:border-sidebar-primary hover:border-r-2',\n                        className\n                    )\n                )}\n                data-rail\n                excludeFromTabOrder\n                onPress={toggleSidebar}\n                slot={null}\n                {...props}\n            />\n        )\n    )\n}\n\nconst SidebarInset = ({ ...props }: ComponentProps<'main'>) => {\n    return (\n        <div\n            className={cn(\n                'relative flex h-dvh w-full flex-1 flex-col peer-data-[variant=inset]:bg-sidebar md:p-2',\n                'peer-data-[variant=default]:p-0 peer-data-[variant=default]:*:border-0',\n                'peer-data-[variant=float]:peer-data-[open=true]:pl-0',\n                'peer-data-[variant=inset]:peer-data-[open=true]:pl-0',\n                'peer-data-[open=false]:**:[[slot=nav]]:pl-12'\n            )}\n        >\n            <main\n                className='relative flex h-full max-h-full flex-1 flex-col overflow-auto rounded-lg bg-background md:border'\n                {...props}\n            />\n        </div>\n    )\n}\n\nconst SidebarNav = ({ className, ...props }: ComponentPropsWithRef<'nav'>) => {\n    return (\n        <nav\n            className={cn(\n                'isolate flex min-h-12 items-center justify-between gap-x-2 rounded-t-lg border-b bg-sidebar/60 px-4 text-sidebar-foreground backdrop-blur-lg md:w-full md:justify-start',\n                'sticky top-0 z-10'\n            )}\n            slot='nav'\n            {...props}\n        />\n    )\n}\n\nSidebar.Content = SidebarBody\nSidebar.Footer = SidebarFooter\nSidebar.Header = SidebarHeader\nSidebar.Item = SidebarItem\nSidebar.SubItem = SidebarSubItem\nSidebar.Label = SidebarLabel\nSidebar.SubItemTrigger = SidebarSubItemTrigger\nSidebar.Rail = SidebarRail\nSidebar.Section = SidebarSection\nSidebar.Trigger = SidebarTrigger\n\nexport { Sidebar, SidebarInset, SidebarNav }\n"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport type { CSSProperties, ReactNode, Ref } from 'react'\nimport type { ButtonProps, DialogTriggerProps, ModalOverlayProps, PopoverProps } from 'react-aria-components'\nimport {\n    Button,\n    composeRenderProps,\n    DialogTrigger,\n    Modal,\n    OverlayArrow,\n    Popover as RACPopover\n} from 'react-aria-components'\nimport { useIsMobile } from '@/lib/hooks'\nimport {\n    Dialog,\n    DialogBody,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogOverlay,\n    DialogTitle,\n    popoverStyle,\n    sheetStyle\n} from './dialog'\n\nconst Popover = (props: DialogTriggerProps) => <DialogTrigger {...props} />\n\ninterface PopoverContentProps\n    extends Omit<ModalOverlayProps, 'children' | 'className'>,\n        Omit<PopoverProps, 'children' | 'className'> {\n    style?: CSSProperties\n    showArrow?: boolean\n    respectScreen?: boolean\n    isPicker?: boolean\n    children: ReactNode\n    className?: string | ((values: { defaultClassName?: string }) => string)\n    ref?: Ref<HTMLDivElement>\n}\n\nconst PopoverContent = ({\n    showArrow = true,\n    className,\n    respectScreen = true,\n    isPicker = false,\n    children,\n    ...props\n}: PopoverContentProps) => {\n    const isMobile = useIsMobile()\n    return isMobile && respectScreen ? (\n        <DialogOverlay isDismissable {...props}>\n            <Modal\n                className={composeRenderProps(className, (className, renderProps) =>\n                    sheetStyle({ ...renderProps, side: 'bottom', className })\n                )}\n                {...props}\n            >\n                <Dialog aria-label={props['aria-label'] ?? 'Popover'} role='dialog'>\n                    {children}\n                </Dialog>\n            </Modal>\n        </DialogOverlay>\n    ) : (\n        <RACPopover\n            className={composeRenderProps(className, (className) => popoverStyle({ isPicker, className }))}\n            {...props}\n        >\n            {showArrow && (\n                <OverlayArrow className='group'>\n                    <svg\n                        className='group-placement-left:-rotate-90 block fill-popover stroke-border group-placement-bottom:rotate-180 group-placement-right:rotate-90'\n                        height={12}\n                        viewBox='0 0 12 12'\n                        width={12}\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            {children}\n        </RACPopover>\n    )\n}\n\nPopover.Trigger = (props: ButtonProps) => <Button {...props} />\n\nPopover.Content = PopoverContent\n\nPopover.Header = DialogHeader\nPopover.Title = DialogTitle\nPopover.Description = DialogDescription\nPopover.Body = DialogBody\nPopover.Footer = DialogFooter\n\nexport { Popover, PopoverContent }\n"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "'use client'\n\nimport type { Placement } from '@react-types/overlays'\nimport type { ReactNode } from 'react'\nimport type { ColorPickerProps as RACColorPickerProps } from 'react-aria-components'\nimport { Button, ColorPicker as RACColorPicker } from 'react-aria-components'\nimport { ColorArea } from './color-area'\nimport { ColorField } from './color-field'\nimport { ColorSlider } from './color-slider'\nimport { ColorSwatch } from './color-swatch'\nimport { Description, Label } from './form'\nimport { Popover, PopoverContent } from './popover'\n\nexport interface ColorPickerProps extends RACColorPickerProps {\n    label?: string\n    children?: ReactNode\n    showArrow?: boolean\n    isDisabled?: boolean\n    placement?: Placement\n    description?: string\n    trigger?: ReactNode\n}\n\nconst ColorPicker = ({\n    showArrow = false,\n    placement = 'bottom start',\n    label,\n    isDisabled,\n    children,\n    description,\n    ...props\n}: ColorPickerProps) => {\n    return (\n        <div className='group/field flex flex-col gap-y-2'>\n            <RACColorPicker {...props}>\n                <Popover>\n                    <Button className='flex cursor-pointer items-center gap-2 outline-hidden' isDisabled={isDisabled}>\n                        {props.trigger ?? (\n                            <>\n                                <ColorSwatch className='size-6' />\n                                {label && <Label className='ml-2'>{label}</Label>}\n                            </>\n                        )}\n                    </Button>\n                    <PopoverContent placement={placement} showArrow={showArrow}>\n                        <Popover.Body className='space-y-2 overflow-visible pb-4 sm:py-4'>\n                            {children || (\n                                <>\n                                    <ColorArea\n                                        className='w-full'\n                                        colorSpace='hsb'\n                                        xChannel='saturation'\n                                        yChannel='brightness'\n                                    />\n                                    <ColorSlider channel='hue' colorSpace='hsb' showOutput={false} />\n                                    <ColorField aria-label='Hex' />\n                                </>\n                            )}\n                        </Popover.Body>\n                    </PopoverContent>\n                </Popover>\n            </RACColorPicker>\n            {description && <Description>{description}</Description>}\n        </div>\n    )\n}\n\nexport { ColorPicker }\n"
  },
  "color-field": {
    "component": "@/components/ui/color-field",
    "raw": "'use client'\n\nimport type { ReactNode } from 'react'\nimport type { ColorFieldProps as RACColorFieldProps } from 'react-aria-components'\nimport type { FieldProps } from './form'\nimport { IconLoader3 } from '@tabler/icons-react'\nimport { composeRenderProps, ColorField as RACColorField } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { ColorPicker } from './color-picker'\nimport { ColorSwatch } from './color-swatch'\nimport { Description, FieldError, FieldGroup, Input, Label } from './form'\n\ninterface ColorFieldProps extends RACColorFieldProps, FieldProps {\n    prefix?: ReactNode\n    suffix?: ReactNode\n    placeholder?: string\n    isLoading?: boolean\n    withPicker?: boolean\n}\n\nconst ColorField = ({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    isLoading,\n    withPicker = true,\n    className,\n    ...props\n}: ColorFieldProps) => {\n    const value = props.value ?? props.defaultValue\n    return (\n        <RACColorField\n            aria-label={props['aria-label'] ?? 'Color field'}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field **:data-[slot=color-swatch]:-ml-0.5 flex w-full flex-col gap-y-1.5', className)\n            )}\n            {...props}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup isDisabled={isDisabled} isInvalid={isInvalid}>\n                        {props.prefix ? (\n                            <span className='ml-2 text-muted-foreground has-[button]:ml-0' data-prefix={true}>\n                                {props.prefix}\n                            </span>\n                        ) : null}\n                        {isLoading ? (\n                            <span className='ml-2 text-muted-foreground has-[button]:ml-0'>\n                                <IconLoader3 className='size-4 animate-spin' />\n                            </span>\n                        ) : null}\n                        <div className='flex w-full items-center'>\n                            {value && (\n                                <span className='ml-2'>\n                                    {withPicker ? (\n                                        <ColorPicker onChange={props.onChange} value={value.toString('hex')} />\n                                    ) : (\n                                        <ColorSwatch className='size-6' color={value.toString('hex')} />\n                                    )}\n                                </span>\n                            )}\n                            <Input placeholder={placeholder ?? '#000'} />\n                        </div>\n                        {props.suffix ? (\n                            <span className='mr-2 text-muted-foreground has-[button]:mr-0' data-suffix={true}>\n                                {props.suffix}\n                            </span>\n                        ) : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACColorField>\n    )\n}\n\nexport { ColorField }\nexport type { ColorFieldProps }\n"
  },
  "color-wheel": {
    "component": "@/components/ui/color-wheel",
    "raw": "'use client'\n\nimport {\n    ColorWheelTrack,\n    ColorWheel as RACColorWheel,\n    type ColorWheelProps as RACColorWheelProps\n} from 'react-aria-components'\nimport { ColorThumb } from './color-thumb'\n\nconst ColorWheel = (props: Omit<RACColorWheelProps, 'outerRadius' | 'innerRadius'>) => {\n    return (\n        <RACColorWheel {...props} innerRadius={70} outerRadius={100}>\n            <ColorWheelTrack className='disabled:opacity-50' style={({ defaultStyle }) => ({ ...defaultStyle })} />\n            <ColorThumb />\n        </RACColorWheel>\n    )\n}\n\nexport { ColorWheel }\n"
  },
  "collections": {
    "component": "@/components/ui/collections",
    "raw": "'use client'\n\nimport type { DragAndDropOptions, DropOperation } from 'react-aria-components'\nimport { DropIndicator, isTextDropItem, useDragAndDrop } from 'react-aria-components'\nimport { type ListData, type ListOptions, useListData as RACListData } from 'react-stately'\n\nconst useList = <T extends object>(options: ListOptions<T>) => RACListData(options)\nconst useDND = <T extends object>({\n    list,\n    operation = 'move'\n}: {\n    list: ListData<T & { name: string }>\n    operation?: DropOperation\n    DragAndDropOptions?: DragAndDropOptions\n}) =>\n    useDragAndDrop({\n        getItems: (items) =>\n            [...items].map((item) => ({\n                'text/plain': list.getItem(item)?.name ?? '',\n                'custom-app-type': JSON.stringify(list.getItem(item as string)!)\n            })),\n        onReorder: (e) => {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        },\n        acceptedDragTypes: ['custom-app-type'],\n        getDropOperation: () => operation,\n        onInsert: async (e) => {\n            const processedItems = await Promise.all(\n                e.items.filter(isTextDropItem).map(async (item) => JSON.parse(await item.getText('custom-app-type')))\n            )\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...processedItems)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...processedItems)\n            }\n        },\n        onRootDrop: async (e) => {\n            const processedItems = await Promise.all(\n                e.items.filter(isTextDropItem).map(async (item) => JSON.parse(await item.getText('custom-app-type')))\n            )\n            list.append(...processedItems)\n        },\n        onDragEnd: (e) => {\n            if (e.dropOperation === 'move' && !e.isInternal) {\n                list.remove(...e.keys)\n            }\n        },\n        renderDropIndicator: (e) => (\n            <DropIndicator\n                className={({ isDropTarget }) =>\n                    isDropTarget ? 'col-span-full rounded-md outline outline-primary' : ''\n                }\n                target={e}\n            />\n        ),\n        renderDragPreview: (items) => (\n            <ul className='w-full rounded-md bg-primary p-2 text-primary-foreground'>\n                {items.map((item, i) => (\n                    <li className='text-sm' key={i}>\n                        {i + 1}. {item['text/plain']}\n                    </li>\n                ))}\n            </ul>\n        )\n    })\n\nexport { useDND, useList }\n"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\nimport type {\n    CheckboxGroupProps as RACCheckboxGroupProps,\n    CheckboxProps as RACCheckboxProps\n} from 'react-aria-components'\nimport { IconCheck, IconMinus } from '@tabler/icons-react'\nimport { composeRenderProps, Checkbox as RACCheckbox, CheckboxGroup as RACCheckboxGroup } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, Label } from './form'\n\ninterface CheckboxGroupProps extends RACCheckboxGroupProps, FieldProps {}\n\nconst CheckboxGroup = ({ className, children, label, description, errorMessage, ...props }: CheckboxGroupProps) => {\n    return (\n        <RACCheckboxGroup\n            {...props}\n            className={composeRenderProps(className, (className) => cn('group/field flex flex-col gap-2', className))}\n        >\n            {(values) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    {typeof children === 'function' ? children(values) : children}\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACCheckboxGroup>\n    )\n}\n\ninterface CheckboxProps extends RACCheckboxProps, Omit<FieldProps, 'errorMessage'> {\n    children?: ReactNode\n    ref?: Ref<HTMLLabelElement>\n}\n\nconst Checkbox = ({ className, children, label, description, ref, ...props }: CheckboxProps) => {\n    return (\n        <RACCheckbox\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group/box flex items-center gap-2',\n                    {\n                        'items-start': description\n                    },\n                    className\n                )\n            )}\n            ref={ref}\n            {...props}\n        >\n            {({ isSelected, isIndeterminate }) => (\n                <>\n                    <div\n                        className={cn(\n                            'flex size-4 shrink-0 items-center justify-center rounded-xs border bg-transparent transition dark:bg-input/30',\n                            'border-input group-hover/box:border-primary/70 group-has-invalid/box:border-destructive/70',\n                            'group-selected/box:border-primary group-selected/box:bg-primary group-selected/box:text-primary-foreground group-selected/box:group-has-invalid/box:border-destructive/70 group-selected/box:group-has-invalid/box:bg-destructive group-selected/box:group-has-invalid/box:text-destructive-foreground dark:group-selected/box:bg-primary',\n                            'group-focus/box:border-primary group-focus/box:group-has-invalid/box:border-destructive/70',\n                            'group-focus-visible/box:ring-[3px] group-focus-visible/box:ring-ring/50 group-focus-visible/box:group-has-invalid/box:border-destructive/70 group-focus-visible/box:group-has-invalid/box:ring-destructive/20',\n                            className\n                        )}\n                    >\n                        {isIndeterminate ? (\n                            <IconMinus className='size-3' />\n                        ) : isSelected ? (\n                            <IconCheck className='size-3' />\n                        ) : null}\n                    </div>\n\n                    <div className='flex flex-col gap-y-1.5'>\n                        <span className='not-last:text-sm/4 text-sm'>{label ?? children}</span>\n                        {description && <Description>{description}</Description>}\n                    </div>\n                </>\n            )}\n        </RACCheckbox>\n    )\n}\n\nexport { Checkbox, CheckboxGroup }\n"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport type { ReactNode, RefObject } from 'react'\nimport { composeRenderProps, Switch as RACSwitch, type SwitchProps as RACSwitchProps } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Label } from './form'\n\ninterface SwitchProps extends RACSwitchProps {\n    ref?: RefObject<HTMLLabelElement>\n}\n\nconst Switch = ({ children, className, ref, ...props }: SwitchProps) => {\n    return (\n        <RACSwitch\n            className={composeRenderProps(className, (className) =>\n                cn('group/field inline-flex touch-none items-center sm:text-sm', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            <div\n                className={cn(\n                    'mr-2 inline-flex h-5 w-8 items-center rounded-full border bg-input px-0.5 shadow-xs transition',\n                    'group-focus-visible/field:border-ring group-focus-visible/field:ring-2 group-focus-visible/field:ring-ring/50 group-focus-visible/field:ring-offset-2',\n                    'group-hover/field:border-ring group-selected/field:bg-primary',\n                    'cursor-pointer group-disabled/field:cursor-default group-disabled/field:opacity-50'\n                )}\n            >\n                <span className='size-3.5 rounded-full border bg-primary-foreground transition-transform group-selected/field:translate-x-3' />\n            </div>\n            <Label>{children as ReactNode}</Label>\n        </RACSwitch>\n    )\n}\n\nexport { Switch }\n"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport type { ComponentPropsWithRef } from 'react'\nimport type {\n    ListBoxItemProps,\n    ListBoxProps,\n    ListBoxSectionProps,\n    SeparatorProps,\n    TextProps\n} from 'react-aria-components'\nimport { IconCheck, IconGripVertical } from '@tabler/icons-react'\nimport {\n    Collection,\n    composeRenderProps,\n    Header,\n    ListBox as RACListBox,\n    ListBoxItem as RACListBoxItem,\n    ListBoxSection as RACListBoxSection,\n    Separator,\n    Text\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { cn } from '@/lib/utils'\n\nconst listStyles = tv({\n    slots: {\n        sectionStyle: 'col-span-full mt-2 grid grid-cols-[auto_1fr] text-sm',\n        headerStyle: 'pointer-events-none col-span-full px-2 py-1 text-muted-foreground text-xs',\n        itemStyle: [\n            'group relative col-span-full grid grid-cols-subgrid items-center outline-hidden has-data-[slot=item-details]:items-start',\n            'select-none rounded-md px-2 py-1.5 text-base sm:text-sm/6',\n            '**:[svg]:mr-2 **:[svg]:size-3.5 has-data-[slot=item-details]:**:[svg]:my-1',\n            '**:data-avatar:*:size-6 **:data-avatar:mr-2 **:data-avatar:size-6 **:data-avatar:shrink-0',\n            'focus:bg-accent focus:text-accent-foreground focus:*:[.text-muted-foreground]:text-accent-foreground',\n            'hover:bg-accent/90 hover:text-accent-foreground hover:*:[.text-muted-foreground]:text-accent-foreground',\n            'selected:**:data-avatar:hidden selected:**:[svg]:not-data-[slot=checked]:hidden has-data-avatar:selected:**:[svg]:ml-1',\n            'dragging:cursor-grabbing dragging:outline dragging:outline-primary',\n            'disabled:pointer-events-none disabled:opacity-50'\n        ]\n    }\n})\n\nconst { sectionStyle, headerStyle, itemStyle } = listStyles()\n\nconst ListBox = <T extends object>({ className, ...props }: ListBoxProps<T>) => (\n    <RACListBox\n        {...props}\n        className={composeRenderProps(className, (className) =>\n            cn(\n                'grid w-full grid-cols-[auto_1fr_auto] gap-y-1 overflow-y-auto rounded-lg border p-1 outline-hidden',\n                className\n            )\n        )}\n    />\n)\n\nconst ListBoxItem = ({ children, className, ...props }: ListBoxItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <RACListBoxItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                itemStyle({\n                    className\n                })\n            )}\n        >\n            {(values) => (\n                <>\n                    {values.allowsDragging && (\n                        <IconGripVertical\n                            className={cn(\n                                'size-4 shrink-0 text-muted-foreground transition',\n                                values.isDragging && 'text-primary'\n                            )}\n                        />\n                    )}\n                    {values.isSelected && <IconCheck className='text-primary' data-slot='checked' />}\n                    {typeof children === 'string' ? (\n                        <Text className='col-start-2' slot='label'>\n                            {children}\n                        </Text>\n                    ) : (\n                        children\n                    )}\n                </>\n            )}\n        </RACListBoxItem>\n    )\n}\n\nconst ListBoxSection = <T extends object>({\n    className,\n    items,\n    children,\n    ...props\n}: ListBoxSectionProps<T> & { title?: string }) => (\n    <RACListBoxSection className={sectionStyle({ className })}>\n        {'title' in props && <Header className={headerStyle()}>{props.title}</Header>}\n        <Collection items={items}>{children}</Collection>\n    </RACListBoxSection>\n)\n\ninterface ListBoxDetailsProps extends TextProps {\n    label?: TextProps['children']\n    description?: TextProps['children']\n}\n\nconst ListBoxDetails = ({ label, description, ...props }: ListBoxDetailsProps) => {\n    const { children, title, ...restProps } = props\n\n    return (\n        <div className='col-start-2 flex flex-col gap-y-1' data-slot='item-details' {...restProps}>\n            {label && (\n                <Text className='font-medium sm:text-sm' slot='label'>\n                    {label}\n                </Text>\n            )}\n            {description && (\n                <Text className='text-muted-foreground text-xs' slot='description' {...restProps}>\n                    {description}\n                </Text>\n            )}\n            {!title && children}\n        </div>\n    )\n}\n\nconst ListBoxSeparator = ({ className, ...props }: SeparatorProps) => (\n    <Separator\n        className={cn('-mx-1 col-span-full my-1 h-px bg-muted', className)}\n        orientation='horizontal'\n        {...props}\n    />\n)\n\nconst ListBoxLabel = ({ className, ...props }: ComponentPropsWithRef<typeof Text>) => (\n    <Text className={cn('col-start-2', className)} slot='label' {...props} />\n)\n\nListBox.Section = ListBoxSection\nListBox.Details = ListBoxDetails\nListBox.Item = ListBoxItem\nListBox.Separator = ListBoxSeparator\nListBox.Label = ListBoxLabel\n\nexport {\n    ListBox,\n    ListBoxDetails,\n    ListBoxItem,\n    ListBoxLabel,\n    ListBoxSection,\n    ListBoxSeparator,\n    headerStyle,\n    itemStyle,\n    sectionStyle\n}\n"
  },
  "color-swatch": {
    "component": "@/components/ui/color-swatch",
    "raw": "'use client'\n\nimport type { ColorSwatchProps } from 'react-aria-components'\nimport { composeRenderProps, ColorSwatch as RACColorSwatch } from 'react-aria-components'\nimport { parseColor } from 'react-stately'\nimport { cn } from '@/lib/utils'\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n    const normalizeHex = hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (_m, r, g, b) => r + r + g + g + b + b)\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(normalizeHex)\n    return result\n        ? {\n              r: Number.parseInt(result[1]!, 16),\n              g: Number.parseInt(result[2]!, 16),\n              b: Number.parseInt(result[3]!, 16)\n          }\n        : null\n}\n\nconst hsbToRgb = (h: number, s: number, b: number): { r: number; g: number; b: number } => {\n    const saturation = s / 100\n    const brightness = b / 100\n    const k = (n: number) => (n + h / 60) % 6\n    const f = (n: number) => brightness * (1 - saturation * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n    return {\n        r: Math.round(255 * f(5)),\n        g: Math.round(255 * f(3)),\n        b: Math.round(255 * f(1))\n    }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n    const a = [r, g, b].map((v) => {\n        const normalized = v / 255\n        return normalized <= 0.03928 ? normalized / 12.92 : ((normalized + 0.055) / 1.055) ** 2.4\n    })\n    return a[0]! * 0.2126 + a[1]! * 0.7152 + a[2]! * 0.0722\n}\n\ntype HSBColor = {\n    hue: number\n    saturation: number\n    brightness: number\n}\n\nconst isBrightColor = (color: string | HSBColor): boolean => {\n    let r: number\n    let g: number\n    let b: number\n\n    if (typeof color === 'string') {\n        if (color.startsWith('#')) {\n            const rgb = hexToRgb(color)\n            if (rgb) {\n                r = rgb.r\n                g = rgb.g\n                b = rgb.b\n            } else {\n                return false\n            }\n        } else if (color.startsWith('rgb')) {\n            const rgbValues = color.match(/\\d+/g)\n            if (rgbValues) {\n                r = Number.parseInt(rgbValues[0]!, 10)\n                g = Number.parseInt(rgbValues[1]!, 10)\n                b = Number.parseInt(rgbValues[2]!, 10)\n            } else {\n                return false\n            }\n        } else {\n            const namedColors: Record<string, string> = {\n                white: '#ffffff',\n                black: '#000000'\n            }\n            const hex = namedColors[color.toLowerCase()]\n            if (hex) {\n                const rgb = hexToRgb(hex)\n                if (rgb) {\n                    r = rgb.r\n                    g = rgb.g\n                    b = rgb.b\n                } else {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n    } else if (typeof color === 'object' && 'hue' in color && 'saturation' in color && 'brightness' in color) {\n        const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n    } else {\n        return false\n    }\n\n    const lum = luminance(r, g, b)\n    return lum > 0.5\n}\n\nconst defaultColor = parseColor('hsl(216, 98%, 52%)')\n\nconst ColorSwatch = ({ className, ...props }: ColorSwatchProps) => {\n    const color = props.color?.toString() ?? ''\n    const ring = color ? isBrightColor(color) : false\n    return (\n        <RACColorSwatch\n            aria-label={props['aria-label'] ?? 'Color swatch'}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'size-8 shrink-0 rounded-md border outline-hidden',\n                    ring && 'inset-ring-1 inset-ring-foreground/10',\n                    className\n                )\n            )}\n            data-slot='color-swatch'\n            {...props}\n        />\n    )\n}\n\nexport { ColorSwatch, defaultColor, isBrightColor }\n"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport type { ComponentPropsWithRef, CSSProperties } from 'react'\nimport { IconCheck, IconChevronRight } from '@tabler/icons-react'\nimport {\n    Button,\n    type ButtonProps,\n    Collection,\n    composeRenderProps,\n    Header,\n    type MenuProps,\n    type MenuSectionProps,\n    type MenuTriggerProps,\n    PopoverContext,\n    type PopoverProps,\n    Menu as RACMenu,\n    MenuItem as RACMenuItem,\n    type MenuItemProps as RACMenuItemProps,\n    MenuSection as RACMenuSection,\n    MenuTrigger as RACMenuTrigger,\n    SubmenuTrigger,\n    useSlottedContext\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { headerStyle, itemStyle, ListBoxDetails, ListBoxLabel, ListBoxSeparator, sectionStyle } from './list-box'\nimport { PopoverContent } from './popover'\n\nconst Menu = ({ ...props }: MenuTriggerProps) => <RACMenuTrigger {...props} />\n\ninterface MenuContentProps<T>\n    extends MenuProps<T>,\n        Pick<\n            PopoverProps,\n            | 'placement'\n            | 'offset'\n            | 'crossOffset'\n            | 'arrowBoundaryOffset'\n            | 'triggerRef'\n            | 'isOpen'\n            | 'onOpenChange'\n            | 'shouldFlip'\n        > {\n    className?: string\n    style?: CSSProperties\n    respectScreen?: boolean\n}\n\nconst MenuContent = <T extends object>({ className, respectScreen = true, ...props }: MenuContentProps<T>) => {\n    const popoverContext = useSlottedContext(PopoverContext)!\n    const isSubmenuTrigger = popoverContext?.trigger === 'SubmenuTrigger'\n    const optimalOffset = isSubmenuTrigger ? 0 : 8\n    return (\n        <PopoverContent\n            offset={props.offset ?? optimalOffset}\n            respectScreen={respectScreen}\n            showArrow={false}\n            {...props}\n        >\n            <RACMenu\n                className={cn(\n                    'grid max-h-[calc(var(--visual-viewport-height)-10rem)] grid-cols-[auto_1fr_auto] overflow-auto rounded-lg p-1 outline-hidden sm:max-h-[inherit] sm:min-w-40',\n                    className\n                )}\n                {...props}\n            />\n        </PopoverContent>\n    )\n}\n\ninterface MenuItemProps extends RACMenuItemProps {\n    isDestructive?: boolean\n}\n\nconst MenuItem = ({ className, isDestructive = false, children, ...props }: MenuItemProps) => {\n    const textValue = props.textValue || (typeof children === 'string' ? children : undefined)\n    return (\n        <RACMenuItem\n            className={composeRenderProps(className, (className) =>\n                itemStyle({\n                    className: cn(\n                        isDestructive\n                            ? 'text-destructive **:text-destructive open:bg-destructive/10 open:text-destructive focus:bg-destructive/10 focus:text-destructive focus:**:text-destructive'\n                            : 'text-foreground',\n                        className\n                    )\n                })\n            )}\n            textValue={textValue}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {values.isSelected && <IconCheck className='mr-2 text-primary' data-slot='checked' />}\n                    {typeof children === 'function' ? children(values) : children}\n                    {values.hasSubmenu && <IconChevronRight className='ml-auto' data-slot='chevron' />}\n                </>\n            )}\n        </RACMenuItem>\n    )\n}\n\nconst MenuHeader = ({ className, ...props }: ComponentPropsWithRef<typeof Header>) => (\n    <Header\n        className={cn(\n            '-mx-1 col-span-full mb-1 touch-none border-b px-2.5 py-2 font-semibold text-base sm:px-3 sm:pb-2.5 sm:text-sm',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst MenuSection = <T extends object>({\n    className,\n    items,\n    children,\n    ...props\n}: MenuSectionProps<T> & { title?: string }) => {\n    return (\n        <RACMenuSection className={sectionStyle()} {...props}>\n            {'title' in props && <Header className={headerStyle()}>{props.title}</Header>}\n            <Collection items={items}>{children}</Collection>\n        </RACMenuSection>\n    )\n}\n\nconst MenuTrigger = (props: ButtonProps) => <Button {...props} />\n\nconst MenuLabel = ListBoxLabel\nconst MenuSeparator = ListBoxSeparator\nconst MenuDetails = ListBoxDetails\n\nMenu.Trigger = MenuTrigger\nMenu.Submenu = SubmenuTrigger\nMenu.Item = MenuItem\nMenu.Content = MenuContent\nMenu.Header = MenuHeader\nMenu.Section = MenuSection\nMenu.Details = MenuDetails\nMenu.Label = MenuLabel\nMenu.Separator = MenuSeparator\n\nexport { Menu, MenuContent, MenuDetails, MenuItem, MenuLabel, MenuSection, MenuSeparator }\nexport type { MenuContentProps }\n"
  },
  "multi-select": {
    "component": "@/components/ui/multi-select",
    "raw": "'use client'\n\nimport type { ComboBoxProps, GroupProps, Key, ListBoxProps, Selection } from 'react-aria-components'\nimport { IconChevronDown, IconX } from '@tabler/icons-react'\nimport {\n    Children,\n    isValidElement,\n    type KeyboardEvent,\n    type ReactNode,\n    type Ref,\n    useEffect,\n    useRef,\n    useState\n} from 'react'\nimport {\n    Button,\n    ComboBox,\n    composeRenderProps,\n    Group,\n    Input,\n    ListBox,\n    Tag,\n    TagGroup,\n    TagList\n} from 'react-aria-components'\nimport { cn, fuzzyMatch } from '@/lib/utils'\nimport { Description, FieldGroup, type FieldProps, Label } from './form'\nimport { ListBoxDetails, ListBoxItem, ListBoxSection } from './list-box'\nimport { PopoverContent } from './popover'\n\ninterface MultiSelectProps<T>\n    extends ListBoxProps<T>,\n        Pick<ComboBoxProps<T & { selectedKeys: Selection }>, 'isRequired' | 'validate' | 'validationBehavior'>,\n        FieldProps,\n        Pick<GroupProps, 'isDisabled' | 'isInvalid'> {\n    className?: string\n    errorMessage?: string\n    maxItems?: number\n    ref?: Ref<HTMLDivElement>\n}\n\nfunction mapToNewObject<T extends object>(array: T[]): { id: T[keyof T]; textValue: T[keyof T] }[] {\n    return array.map((item) => {\n        const idProperty = Object.keys(item).find((key) => key === 'id' || key === 'key')\n        const textProperty = Object.keys(item).find((key) => key !== 'id' && key !== 'key')\n        return {\n            id: item[idProperty as keyof T],\n            textValue: item[textProperty as keyof T]\n        }\n    })\n}\n\nconst MultiSelect = <T extends object>({\n    className,\n    maxItems = Number.POSITIVE_INFINITY,\n    children,\n    ref,\n    ...props\n}: MultiSelectProps<T>) => {\n    const triggerRef = useRef<HTMLDivElement>(null)\n    const inputRef = useRef<HTMLInputElement>(null)\n    const triggerButtonRef = useRef<HTMLButtonElement>(null)\n    const popoverRef = useRef<HTMLDivElement>(null)\n    const [inputValue, setInputValue] = useState('')\n    const [selectedKeys, onSelectionChange] = useState<Selection>(new Set(props.selectedKeys))\n\n    const isMax = [...selectedKeys].length >= maxItems\n\n    useEffect(() => {\n        setInputValue('')\n        return () => {\n            inputRef.current?.focus()\n        }\n    }, [props?.selectedKeys, selectedKeys])\n\n    const addItem = (e: Key | null) => {\n        if (!e || isMax) return\n        onSelectionChange?.((s) => new Set([...s, e!]))\n        // @ts-expect-error incompatible type Key and Selection\n        props.onSelectionChange?.((s) => new Set([...s, e!]))\n    }\n\n    const removeItem = (e: Set<Key>) => {\n        onSelectionChange?.((s) => new Set([...s].filter((i) => i !== e.values().next().value)))\n        props.onSelectionChange?.(\n            // @ts-expect-error incompatible type Key and Selection\n            (s) => new Set([...s].filter((i) => i !== e.values().next().value))\n        )\n    }\n\n    const onKeyDownCapture = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Backspace' && inputValue === '') {\n            onSelectionChange?.((s) => new Set([...s].slice(0, -1)))\n            // @ts-expect-error incompatible type Key and Selection\n            props.onSelectionChange?.((s) => new Set([...s].slice(0, -1)))\n        }\n    }\n\n    const parsedItems = props.items\n        ? mapToNewObject(props.items as T[])\n        : mapToNewObject(Children.map(children as ReactNode, (child) => isValidElement(child) && child.props) as T[])\n\n    const availableItemsToSelect = props.items\n        ? parsedItems.filter((item) => ![...selectedKeys].includes(item.id as Key))\n        : parsedItems\n\n    const filteredChildren = props.items\n        ? parsedItems.filter((item) => ![...selectedKeys].includes(item.id as Key))\n        : Children.map(children as ReactNode, (child) => isValidElement(child) && child.props)?.filter(\n              (item: T & any) => ![...selectedKeys].includes(item.id)\n          )\n    return (\n        <Group\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex h-fit flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n        >\n            {props.label && <Label onClick={() => inputRef.current?.focus()}>{props.label}</Label>}\n            <FieldGroup\n                className={cn(\n                    'flex h-fit min-h-9 flex-wrap items-center py-1 **:[input]:py-1',\n                    'group-has-invalid/field:group-has-focus/field:border-destructive group-has-invalid/field:group-has-open/field:border-destructive group-has-invalid/field:group-has-open/field:ring-invalid group-has-invalid/field:hover:border-destructive/70'\n                )}\n                isDisabled={props.isDisabled}\n                isInvalid={props.isInvalid || !!props.errorMessage}\n                ref={triggerRef}\n            >\n                {({ isInvalid, isDisabled }) => (\n                    <>\n                        <TagGroup aria-hidden aria-label='selected-items' onRemove={removeItem}>\n                            <TagList\n                                className='flex flex-1 flex-wrap gap-1 pl-2 empty:pl-0'\n                                items={[...selectedKeys].map((key) => ({\n                                    id: key,\n                                    textValue: parsedItems.find((item) => item.id === key)?.textValue as string\n                                }))}\n                            >\n                                {(item: { id: Key; textValue: Key }) => (\n                                    <Tag\n                                        className={({ isFocusVisible }) =>\n                                            cn(\n                                                'inline-flex items-center justify-between gap-1 rounded-md border px-2 py-0.5 text-sm outline-hidden',\n                                                isInvalid\n                                                    ? 'border-destructive/70 bg-destructive/10 text-destructive'\n                                                    : 'border-primary/70 bg-primary/10 text-primary',\n                                                isFocusVisible &&\n                                                    `ring-2 ${isInvalid ? 'ring-destructive/70' : 'ring-primary/70'}`\n                                            )\n                                        }\n                                        isDisabled={isDisabled}\n                                        textValue={item.textValue as string}\n                                    >\n                                        {item.textValue as string}\n                                        <Button\n                                            className='-mr-1 flex size-4 cursor-pointer items-center justify-center rounded-md pressed:bg-primary/70 pressed:text-primary-foreground outline-hidden hover:bg-primary hover:text-primary-foreground'\n                                            slot='remove'\n                                        >\n                                            <IconX className='size-3 shrink-0' />\n                                        </Button>\n                                    </Tag>\n                                )}\n                            </TagList>\n                        </TagGroup>\n                        <ComboBox\n                            aria-label='Search'\n                            className='flex-1 text-sm/5'\n                            defaultFilter={fuzzyMatch}\n                            inputValue={inputValue}\n                            isDisabled={isDisabled}\n                            isInvalid={isInvalid}\n                            isReadOnly={isMax}\n                            isRequired={props.isRequired}\n                            onInputChange={isMax ? () => {} : setInputValue}\n                            onSelectionChange={addItem}\n                            validate={props.validate}\n                            validationBehavior={props.validationBehavior}\n                        >\n                            <div className='flex flex-row items-center'>\n                                <Input\n                                    className='w-full text-sm/7 outline-hidden'\n                                    onFocus={() => triggerButtonRef.current?.click()}\n                                    onKeyDownCapture={onKeyDownCapture}\n                                    placeholder={\n                                        isMax\n                                            ? 'Max items reached'\n                                            : !availableItemsToSelect || !filteredChildren?.length\n                                              ? ''\n                                              : 'Pick some items'\n                                    }\n                                    ref={inputRef}\n                                />\n                                <Button\n                                    aria-label='Chevron'\n                                    className='mr-2 ml-auto inline-flex w-auto flex-1 items-center justify-center rounded-md text-muted-foreground outline-hidden'\n                                    ref={triggerButtonRef}\n                                >\n                                    <IconChevronDown className='group-has-open/field:-rotate-180 size-4 transition' />\n                                </Button>\n                            </div>\n                            <PopoverContent\n                                isPicker\n                                ref={popoverRef}\n                                respectScreen={false}\n                                showArrow={false}\n                                style={{\n                                    minWidth: triggerRef.current?.offsetWidth,\n                                    width: triggerRef.current?.offsetWidth\n                                }}\n                                trigger='focus'\n                                triggerRef={triggerRef}\n                            >\n                                <ListBox\n                                    className='grid w-full grid-cols-[auto_1fr_1.5rem_0.5rem_auto] gap-y-1 overflow-y-auto rounded-md outline-hidden'\n                                    items={(availableItemsToSelect as T[]) ?? props.items}\n                                    renderEmptyState={() => <div>No Items</div>}\n                                    selectionMode='multiple'\n                                    {...props}\n                                >\n                                    {filteredChildren?.map((item: any) => (\n                                        <MultiSelect.Item\n                                            id={item.id as Key}\n                                            key={item.id as Key}\n                                            textValue={item.textValue as string}\n                                        >\n                                            {item.textValue as string}\n                                        </MultiSelect.Item>\n                                    )) ?? children}\n                                </ListBox>\n                            </PopoverContent>\n                        </ComboBox>\n                    </>\n                )}\n            </FieldGroup>\n            {props.description && <Description>{props.description}</Description>}\n            {props.errorMessage && (\n                <Description className='text-destructive text-sm/5'>{props.errorMessage}</Description>\n            )}\n        </Group>\n    )\n}\n\nMultiSelect.Item = ListBoxItem\nMultiSelect.Section = ListBoxSection\nMultiSelect.ItemDetails = ListBoxDetails\n\nexport { MultiSelect }\n"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport { IconAlertCircle } from '@tabler/icons-react'\nimport { Meter as RACMeter, type MeterProps as RACMeterProps } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Label } from './form'\n\ninterface MeterProps extends RACMeterProps {\n    label?: string\n}\n\nconst Meter = ({ label, className, ...props }: MeterProps) => {\n    return (\n        <RACMeter\n            aria-label={props['aria-label'] ?? 'Meter'}\n            {...props}\n            className={cn('flex flex-col gap-y-1.5', className)}\n        >\n            {({ percentage, valueText }) => (\n                <>\n                    <div className='flex w-full justify-between gap-2'>\n                        {label && <Label>{label}</Label>}\n                        <span\n                            className={`flex items-center text-sm tabular-nums ${percentage >= 80 ? 'text-destructive' : 'text-muted-foreground'}`}\n                        >\n                            {percentage >= 80 && (\n                                <IconAlertCircle\n                                    aria-label='Alert'\n                                    className='mr-1 inline size-4 fill-invalid text-destructive'\n                                />\n                            )}\n                            {valueText}\n                        </span>\n                    </div>\n                    <div className='relative h-2 min-w-64 rounded-lg bg-muted outline-hidden'>\n                        <div\n                            className='absolute top-0 left-0 h-full rounded-full transition-[width,background-color]'\n                            style={{\n                                width: `${percentage}%`,\n                                backgroundColor: getColor(percentage)\n                            }}\n                        />\n                    </div>\n                </>\n            )}\n        </RACMeter>\n    )\n}\n\nconst getColor = (percentage: number) => {\n    if (percentage < 25) {\n        return 'blue'\n    }\n    if (percentage < 50) {\n        return 'green'\n    }\n    if (percentage < 75) {\n        return 'orange'\n    }\n    return 'var(--destructive)'\n}\n\nexport { Meter }\n"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport type { FieldProps } from './form'\nimport { IconEye, IconEyeClosed, IconLoader3 } from '@tabler/icons-react'\nimport { type ReactNode, type Ref, useState } from 'react'\nimport {\n    Button,\n    composeRenderProps,\n    Input,\n    TextField as RACTextField,\n    type TextFieldProps as RACTextFieldProps\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, FieldGroup, Label } from './form'\n\ninterface TextFieldProps extends RACTextFieldProps, FieldProps {\n    prefix?: ReactNode\n    suffix?: ReactNode\n    isPending?: boolean\n    placeholder?: string\n    ref?: Ref<HTMLInputElement>\n}\n\nconst TextField = ({\n    label,\n    placeholder,\n    description,\n    errorMessage,\n    className,\n    type,\n    ref,\n    ...props\n}: TextFieldProps) => {\n    const [masked, setMasked] = useState<boolean>(type === 'password')\n    const inputType = type === 'password' ? (masked ? 'password' : 'text') : type\n\n    return (\n        <RACTextField\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            type={inputType}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup\n                        data-loading={props.isPending ? 'true' : undefined}\n                        isDisabled={values.isDisabled}\n                        isInvalid={!!errorMessage || values.isInvalid}\n                    >\n                        {props.prefix ? (\n                            <span className='ml-2 text-muted-foreground has-[button]:ml-0' data-prefix>\n                                {props.prefix}\n                            </span>\n                        ) : null}\n                        <Input placeholder={placeholder} />\n                        {type === 'password' ? (\n                            <Button\n                                aria-label='Toggle visibility'\n                                className='mr-2 inline-flex items-center justify-center rounded-md p-0.5 text-muted-foreground focus-visible:text-primary focus-visible:outline-2 focus-visible:outline-ring'\n                                onPress={() => setMasked((e) => !e)}\n                                type='button'\n                            >\n                                <IconEye\n                                    aria-hidden\n                                    className={cn('size-4 scale-0 transition-transform', masked && 'scale-100')}\n                                />\n                                <IconEyeClosed\n                                    aria-hidden\n                                    className={cn(\n                                        'absolute size-4 scale-0 transition-transform',\n                                        !masked && 'scale-100'\n                                    )}\n                                />\n                            </Button>\n                        ) : props.isPending ? (\n                            <IconLoader3 className='mr-2 size-3.5 animate-spin text-muted-foreground' data-suffix />\n                        ) : props.suffix ? (\n                            <span className='mr-2 text-muted-foreground has-[button]:mr-0' data-suffix>\n                                {props.suffix}\n                            </span>\n                        ) : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACTextField>\n    )\n}\n\nexport { TextField }\n"
  },
  "navbar": {
    "component": "@/components/ui/navbar",
    "raw": "'use client'\n\nimport type { ButtonProps, LinkProps } from 'react-aria-components'\nimport { IconMenu } from '@tabler/icons-react'\nimport { type ComponentPropsWithRef, createContext, type Ref, use, useCallback, useMemo, useState } from 'react'\nimport { composeRenderProps, Link } from 'react-aria-components'\nimport { useIsMobile } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\nimport { Button } from './button'\nimport { Sheet } from './sheet'\n\nconst HEIGHT = '3.5rem'\n\ntype NavbarOptions = {\n    isSticky?: boolean\n    variant?: 'default' | 'float' | 'inset'\n}\n\ntype NavbarContextProps = {\n    open: boolean\n    setOpen: (open: boolean) => void\n    isCompact: boolean\n    toggleNavbar: () => void\n} & NavbarOptions\n\nconst NavbarContext = createContext<NavbarContextProps | null>(null)\n\nfunction useNavbar() {\n    const context = use(NavbarContext)\n    if (!context) {\n        throw new Error('useNavbar must be used within a Navbar.')\n    }\n\n    return context\n}\n\ninterface NavbarProps extends ComponentPropsWithRef<'header'>, NavbarOptions {\n    defaultOpen?: boolean\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n}\n\nconst Navbar = ({\n    children,\n    isOpen: openProp,\n    onOpenChange: setOpenProp,\n    defaultOpen = false,\n    className,\n    isSticky = false,\n    variant = 'default',\n    ...props\n}: NavbarProps) => {\n    const isCompact = useIsMobile()\n    const [_open, _setOpen] = useState(defaultOpen)\n    const open = openProp ?? _open\n\n    const setOpen = useCallback(\n        (value: boolean | ((value: boolean) => boolean)) => {\n            if (setOpenProp) {\n                return setOpenProp?.(typeof value === 'function' ? value(open) : value)\n            }\n\n            _setOpen(value)\n        },\n        [setOpenProp, open]\n    )\n\n    const toggleNavbar = useCallback(() => {\n        setOpen((open) => !open)\n    }, [setOpen])\n\n    const contextValue = useMemo<NavbarContextProps>(\n        () => ({\n            open,\n            setOpen,\n            isCompact,\n            toggleNavbar,\n            variant,\n            isSticky\n        }),\n        [open, setOpen, isCompact, toggleNavbar, variant, isSticky]\n    )\n    return (\n        <NavbarContext value={contextValue}>\n            <header\n                className={cn(\n                    'group/navbar [--navbar-breadcrumbs-height:0px] has-data-navbar-breadcrumbs:[--navbar-breadcrumbs-height:3rem]',\n                    'relative isolate flex w-full flex-col',\n                    isSticky && 'sticky top-0 z-50',\n                    variant === 'float' && 'px-2.5 pt-2',\n                    variant === 'inset' && 'min-h-dvh bg-sidebar',\n                    className\n                )}\n                data-navbar-variant={variant}\n                style={{\n                    // @ts-ignore\n                    '--navbar-height': HEIGHT\n                }}\n                {...props}\n            >\n                {children}\n            </header>\n        </NavbarContext>\n    )\n}\n\ninterface NavbarNavProps extends ComponentPropsWithRef<'div'> {\n    variant?: 'navbar' | 'float' | 'inset'\n    isSticky?: boolean\n    useDefaultResponsive?: boolean\n}\n\nconst NavbarNav = ({ useDefaultResponsive = true, className, ref, children, ...props }: NavbarNavProps) => {\n    const { isCompact, variant, open, setOpen } = useNavbar()\n\n    if (isCompact && useDefaultResponsive) {\n        return (\n            <Sheet isOpen={open} onOpenChange={setOpen} {...props}>\n                <Sheet.Trigger className='sr-only' />\n                <Sheet.Content aria-label='Compact Navbar' data-navbar='compact' side='left'>\n                    <Sheet.Body className='px-2 md:px-4'>{children}</Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        )\n    }\n\n    return (\n        <div\n            className={cn(\n                'group peer hidden w-full items-center px-4 md:flex md:px-0',\n                'h-(--navbar-height)',\n                '[&>div]:mx-auto [&>div]:w-full [&>div]:max-w-7xl [&>div]:items-center md:[&>div]:flex lg:[&>div]:max-w-(--breakpoint-xl) 2xl:[&>div]:max-w-(--breakpoint-2xl)',\n                variant === 'float' &&\n                    'mx-auto w-full max-w-7xl rounded-lg border border-sidebar-border bg-sidebar px-4 text-sidebar-foreground md:px-6 lg:max-w-(--breakpoint-xl) lg:px-8 2xl:max-w-(--breakpoint-2xl)',\n                variant === 'default' &&\n                    'border-sidebar-border border-b bg-sidebar text-sidebar-foreground sm:[&>div]:px-6 lg:[&>div]:px-8',\n                variant === 'inset' &&\n                    'mx-auto md:px-6 [&>div]:mx-auto [&>div]:w-full [&>div]:items-center md:[&>div]:flex',\n                className\n            )}\n            data-navbar-nav='true'\n            ref={ref}\n            {...props}\n        >\n            <div>{children}</div>\n        </div>\n    )\n}\n\ninterface NavbarTriggerProps extends ButtonProps {\n    ref?: Ref<HTMLButtonElement>\n}\n\nconst NavbarTrigger = ({ className, onPress, ref, ...props }: NavbarTriggerProps) => {\n    const { toggleNavbar } = useNavbar()\n    return (\n        <Button\n            aria-label={props['aria-label'] || 'Toggle Navbar'}\n            className={className}\n            data-navbar-trigger='true'\n            icon\n            onPress={(event) => {\n                onPress?.(event)\n                toggleNavbar()\n            }}\n            ref={ref}\n            variant='ghost'\n            {...props}\n        >\n            <IconMenu />\n            <span className='sr-only'>Toggle Navbar</span>\n        </Button>\n    )\n}\n\nconst NavbarSection = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { isCompact } = useNavbar()\n    return (\n        <div\n            className={cn('flex', isCompact ? 'flex-col gap-y-1' : 'flex-row items-center gap-x-3', className)}\n            data-navbar-section\n            {...props}\n        >\n            {'title' in props && <h4 className='-mx-2 my-4 px-5 font-medium text-sm md:hidden'>{props.title}</h4>}\n            {props.children}\n        </div>\n    )\n}\n\ninterface NavbarItemProps extends LinkProps {\n    isCurrent?: boolean\n}\n\nconst NavbarItem = ({ className, isCurrent, ...props }: NavbarItemProps) => (\n    <Link\n        aria-current={isCurrent ? 'page' : undefined}\n        className={composeRenderProps(className, (className) =>\n            cn(\n                'relative flex cursor-pointer items-center gap-x-2 rounded-md px-3 py-2 text-muted-foreground no-underline outline-hidden transition-colors md:text-sm',\n                '**:data-[slot=chevron]:size-4 **:data-[slot=chevron]:transition-transform',\n                '*:[svg]:-mx-0.5 *:[svg]:size-4 *:[svg]:shrink-0',\n                'pressed:text-sidebar-primary hover:text-sidebar-primary focus:text-sidebar-primary focus-visible:ring-2 focus-visible:ring-sidebar-ring/50 disabled:cursor-default disabled:opacity-50 pressed:**:data-[slot=chevron]:rotate-180',\n                isCurrent && 'pointer-events-none cursor-default bg-sidebar-accent text-sidebar-accent-foreground',\n                className\n            )\n        )}\n        data-navbar-item\n        {...props}\n    />\n)\n\nconst NavbarLogo = ({ className, ...props }: LinkProps) => {\n    return (\n        <Link\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative flex items-center gap-x-2 px-2 py-4 text-sidebar-foreground focus:outline-hidden focus-visible:outline-1 focus-visible:outline-sidebar-ring md:mr-4 md:px-0 md:py-0',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst NavbarFlex = ({ className, ref, ...props }: ComponentPropsWithRef<'div'>) => {\n    return <div className={cn('flex items-center gap-2', className)} ref={ref} {...props} />\n}\n\ninterface NavbarCompactProps extends ComponentPropsWithRef<'div'> {\n    variant?: 'float' | 'inset' | 'navbar'\n}\n\nconst NavbarCompact = ({ className, ref, ...props }: NavbarCompactProps) => {\n    const { variant } = useNavbar()\n    return (\n        <div\n            className={cn(\n                'flex justify-between bg-sidebar text-sidebar-foreground peer-has-[[data-navbar-variant=float]]:border peer-has-[[data-navbar-variant=float]]:border-sidebar-border md:hidden',\n                variant === 'float' && 'h-12 rounded-lg border px-3.5',\n                variant === 'inset' && 'h-14 border-b px-4',\n                variant === 'default' && 'h-14 border-b px-4',\n                className\n            )}\n            ref={ref}\n            {...props}\n        />\n    )\n}\n\nconst NavbarBreadcrumbs = ({ className, ref, children, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { variant } = useNavbar()\n    return (\n        <div\n            className={cn(\n                'flex h-(--navbar-breadcrumbs-height) items-center',\n                variant === 'default' &&\n                    'w-full border-sidebar-border border-b bg-sidebar text-sidebar-foreground *:max-w-7xl *:px-4 md:*:px-6 lg:*:max-w-(--breakpoint-xl) 2xl:*:max-w-(--breakpoint-2xl)',\n                variant === 'inset' &&\n                    'w-full rounded-lg rounded-b-none border-sidebar-border border-b px-4 md:mx-auto md:max-w-[calc(100vw-16px)] md:border md:px-6',\n                variant === 'float' &&\n                    'mx-auto w-full max-w-7xl rounded-lg bg-background px-2 text-foreground md:px-4 lg:max-w-(--breakpoint-xl) 2xl:max-w-(--breakpoint-2xl)',\n                className\n            )}\n            data-navbar-breadcrumbs={true}\n            ref={ref}\n            {...props}\n        >\n            <div className='mx-auto w-full'>{children}</div>\n        </div>\n    )\n}\n\nconst NavbarInset = ({ className, ref, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { variant } = useNavbar()\n    return (\n        <div\n            className={cn(\n                'relative flex w-full flex-col overflow-auto',\n                variant === 'default' &&\n                    'max-h-[calc(100vh-var(--navbar-height,0px)-var(--navbar-breadcrumbs-height,0px)-8px)]',\n                variant === 'inset' &&\n                    'max-h-[calc(100vh-var(--navbar-height,0px)-var(--navbar-breadcrumbs-height,0px))] overflow-auto bg-background pb-2 md:px-2',\n                variant === 'float' &&\n                    'h-[calc(100vh-var(--navbar-height,0px)-var(--navbar-breadcrumbs-height,0px)-8px)] bg-background pb-2 md:px-0',\n                className\n            )}\n            ref={ref}\n        >\n            <main\n                className={cn(\n                    'mx-auto flex size-full flex-1 grow flex-col',\n                    variant === 'inset' &&\n                        'max-h-fit overflow-auto border-sidebar-border bg-background px-4 shadow-sm md:rounded-lg md:border md:group-has-data-navbar-breadcrumbs/navbar:rounded-t-none md:group-has-data-navbar-breadcrumbs/navbar:border-t-0',\n                    variant === 'default' && 'overflow-auto',\n                    variant === 'float' && 'max-w-7xl lg:max-w-(--breakpoint-xl) 2xl:max-w-(--breakpoint-2xl)'\n                )}\n            >\n                {props.children}\n            </main>\n        </div>\n    )\n}\n\nNavbar.Nav = NavbarNav\nNavbar.Inset = NavbarInset\nNavbar.Compact = NavbarCompact\nNavbar.Flex = NavbarFlex\nNavbar.Trigger = NavbarTrigger\nNavbar.Logo = NavbarLogo\nNavbar.Item = NavbarItem\nNavbar.Breadcrumbs = NavbarBreadcrumbs\nNavbar.Section = NavbarSection\n\nexport { Navbar, NavbarBreadcrumbs, NavbarInset }\n"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "import type { ComponentPropsWithRef } from 'react'\nimport { cn } from '@/lib/utils'\n\ninterface NoteProps extends ComponentPropsWithRef<'div'> {\n    variant?: 'default' | 'destructive'\n}\n\nconst Note = ({ variant = 'default', className, children, ...props }: NoteProps) => (\n    <div\n        className={cn(\n            'relative grid w-full items-start gap-y-0.5 rounded-lg border px-4 py-3 text-sm has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] has-child-items:grid-cols-[0_1fr] has-[>svg]:gap-x-3 [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current',\n            variant === 'default' && 'bg-card text-card-foreground',\n            variant === 'destructive' &&\n                'bg-card text-destructive *:data-[slot=alert-description]:text-destructive/90 [&>svg]:text-current',\n            className\n        )}\n        data-slot='alert'\n        role='alert'\n        {...props}\n    >\n        {children}\n    </div>\n)\n\nconst NoteTitle = ({ className, ...props }: ComponentPropsWithRef<'h5'>) => (\n    <h5\n        className={cn('col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight', className)}\n        data-slot='alert-title'\n        {...props}\n    />\n)\n\nconst NoteDescription = ({ className, ...props }: ComponentPropsWithRef<'div'>) => (\n    <div\n        className={cn(\n            'col-start-2 grid justify-items-start gap-1 text-muted-foreground text-sm [&_p]:leading-relaxed',\n            className\n        )}\n        data-slot='alert-description'\n        {...props}\n    />\n)\n\nNote.Title = NoteTitle\nNote.Description = NoteDescription\n\nexport { Note }\n"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\nimport type { ReactNode, Ref } from 'react'\nimport type { SelectProps as RACSelectProps } from 'react-aria-components'\nimport { IconChevronDown, IconLoader, IconSearch, IconX } from '@tabler/icons-react'\nimport {\n    Autocomplete,\n    Button,\n    composeRenderProps,\n    Group,\n    Input,\n    ListBox,\n    Select as RACSelect,\n    SearchField,\n    SelectValue\n} from 'react-aria-components'\nimport { cn, fuzzyMatch } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, fieldGroupStyle, Label } from './form'\nimport { ListBoxDetails, ListBoxItem, ListBoxLabel, ListBoxSection } from './list-box'\nimport { PopoverContent } from './popover'\n\ninterface SelectProps<T extends object> extends Omit<RACSelectProps<T>, 'children'>, FieldProps {\n    className?: string\n    items?: Iterable<T>\n    children: ReactNode | ((item: T) => ReactNode)\n    prefix?: ReactNode\n    searchable?: boolean\n    isPending?: boolean\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Select = <T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    items,\n    searchable = false,\n    className,\n    ref,\n    ...props\n}: SelectProps<T>) => {\n    const renderOptions = (\n        <ListBox\n            aria-label='items'\n            className='grid w-full grid-cols-[auto_1fr_1.5rem_0.5rem_auto] gap-y-1 overflow-y-auto rounded-md outline-hidden'\n            items={items}\n            renderEmptyState={() => (\n                <div className='col-span-full p-4 text-center text-muted-foreground'>No results found</div>\n            )}\n        >\n            {children}\n        </ListBox>\n    )\n\n    return (\n        <RACSelect\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {label && <Label>{label}</Label>}\n            <Button\n                className={fieldGroupStyle({\n                    className:\n                        'w-full gap-x-2 p-2 text-base outline-hidden! **:data-placeholder:text-muted-foreground sm:text-sm'\n                })}\n            >\n                {props.prefix ? (\n                    <span className='ml-2 text-muted-foreground has-[button]:ml-0'>{props.prefix}</span>\n                ) : null}\n                <SelectValue className='**:data-avatar:-mx-0.5 grid grid-cols-[auto_1fr] items-center text-base **:data-avatar:mr-2 **:data-[slot=description]:hidden **:data-avatar:size-6 sm:text-sm **:[svg]:mr-2' />\n                <IconChevronDown\n                    className='group-open/field:-rotate-180 ml-auto size-4 text-muted-foreground transition'\n                    data-slot='chevron'\n                />\n            </Button>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <PopoverContent isPicker respectScreen={false} showArrow={false} trigger='focus'>\n                {searchable ? (\n                    <Autocomplete filter={fuzzyMatch}>\n                        <SearchField aria-label='Search' autoFocus className='-mx-1 -mt-1 mb-1 border-b'>\n                            {({ isEmpty }) => (\n                                <Group className='flex items-center px-2'>\n                                    {props.isPending ? (\n                                        <IconLoader className='size-4 shrink-0 animate-spin text-muted-foreground' />\n                                    ) : (\n                                        <IconSearch className='size-4 shrink-0 text-muted-foreground' />\n                                    )}\n                                    <Input\n                                        className='w-full p-2 text-sm outline-hidden [&::-webkit-search-cancel-button]:hidden'\n                                        placeholder='Search...'\n                                    />\n                                    {!isEmpty && (\n                                        <Button\n                                            aria-label='Clear'\n                                            className='mr-2 inline-flex items-center justify-center rounded-md text-muted-foreground outline-offset-4'\n                                            type='button'\n                                        >\n                                            <IconX aria-hidden />\n                                        </Button>\n                                    )}\n                                </Group>\n                            )}\n                        </SearchField>\n                        {renderOptions}\n                    </Autocomplete>\n                ) : (\n                    renderOptions\n                )}\n            </PopoverContent>\n        </RACSelect>\n    )\n}\n\nSelect.Item = ListBoxItem\nSelect.Details = ListBoxDetails\nSelect.Section = ListBoxSection\nSelect.Label = ListBoxLabel\n\nexport { Select }\n"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\nimport type {\n    TabListProps as RACTabListProps,\n    TabPanelProps as RACTabPanelProps,\n    TabProps as RACTabProps,\n    TabsProps as RACTabsProps\n} from 'react-aria-components'\nimport { composeRenderProps, Tab as RACTab, Tabs as RACTabs, TabList, TabPanel } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\ninterface TabsProps extends RACTabsProps {\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Tabs = ({ className, ref, ...props }: TabsProps) => {\n    return (\n        <RACTabs\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group/tabs grid orientation-horizontal:grid-cols-1 orientation-vertical:grid-cols-[auto_1fr] gap-2',\n                    className\n                )\n            )}\n            ref={ref}\n            {...props}\n        />\n    )\n}\n\ninterface TabListProps<T extends object> extends RACTabListProps<T> {\n    ref?: Ref<HTMLDivElement>\n}\n\nconst List = <T extends object>({ className, ref, ...props }: TabListProps<T>) => {\n    return (\n        <TabList\n            ref={ref}\n            {...props}\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'no-scrollbar inline-flex h-9 items-center justify-center rounded-lg bg-muted p-[3px] text-muted-foreground',\n                    orientation === 'horizontal' ? 'max-w-full items-center overflow-x-auto' : 'grid h-fit items-start',\n                    className\n                )\n            )}\n        />\n    )\n}\n\ninterface TabProps extends RACTabProps {\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Tab = ({ className, ref, ...props }: TabProps) => {\n    return (\n        <RACTab\n            ref={ref}\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'inline-flex h-[calc(100%-1px)] flex-1 select-none items-center justify-center gap-1.5 whitespace-nowrap rounded-md border border-transparent px-2 py-1 font-medium text-sm transition-[color,box-shadow]',\n                    'text-foreground dark:text-muted-foreground',\n                    \"[&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n                    'selected:bg-background selected:shadow-sm',\n                    'dark:selected:border-input dark:selected:bg-input/30 dark:selected:text-foreground',\n                    'focus-visible:border-ring focus-visible:outline-1 focus-visible:outline-ring focus-visible:ring-[3px] focus-visible:ring-ring/50',\n                    'disabled:pointer-events-none disabled:opacity-50',\n                    className\n                )\n            )}\n        />\n    )\n}\n\ninterface TabPanelProps extends RACTabPanelProps {\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Panel = ({ className, ref, ...props }: TabPanelProps) => {\n    return <TabPanel {...props} className={cn(className, 'flex-1 outline-hidden')} ref={ref} />\n}\n\nTabs.List = List\nTabs.Label = Tab\nTabs.Content = Panel\n\nexport { Tabs }\n"
  },
  "disclosure": {
    "component": "@/components/ui/disclosure",
    "raw": "'use client'\n\nimport { IconChevronDown } from '@tabler/icons-react'\nimport { type Ref, use, useRef } from 'react'\nimport {\n    Button,\n    type ButtonProps,\n    composeRenderProps,\n    type DisclosurePanelProps,\n    DisclosureStateContext,\n    Disclosure as RACDisclosure,\n    DisclosureGroup as RACDisclosureGroup,\n    type DisclosureGroupProps as RACDisclosureGroupProps,\n    DisclosurePanel as RACDisclosurePanel,\n    type DisclosureProps as RACDisclosureProps\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\ninterface AccordionProps extends RACDisclosureGroupProps {\n    ref?: Ref<HTMLDivElement>\n    hideIndicator?: boolean\n}\n\nconst DisclosureGroup = ({ children, ref, className, ...props }: AccordionProps) => {\n    return (\n        <RACDisclosureGroup\n            data-slot='disclosure-group'\n            ref={ref}\n            {...props}\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'space-y-1',\n                    props.hideIndicator && '**:data-[slot=indicator]:text-transparent',\n                    isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer',\n                    className\n                )\n            )}\n        >\n            {(values) => <>{typeof children === 'function' ? children(values) : children}</>}\n        </RACDisclosureGroup>\n    )\n}\n\ninterface CollapsibleProps extends RACDisclosureProps {\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Disclosure = ({ className, ref, children, ...props }: CollapsibleProps) => {\n    return (\n        <RACDisclosure\n            data-slot='disclosure'\n            ref={ref}\n            {...props}\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'group w-full border-b last:border-b-0',\n                    isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer',\n                    className\n                )\n            )}\n        >\n            {(values) => (typeof children === 'function' ? children(values) : children)}\n        </RACDisclosure>\n    )\n}\n\ninterface DisclosureTriggerProps extends ButtonProps {\n    ref?: Ref<HTMLButtonElement>\n}\n\nconst DisclosureTrigger = ({ className, children, ref, ...props }: DisclosureTriggerProps) => {\n    return (\n        <Button\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'flex w-full flex-1 items-start justify-between gap-4 rounded-md py-4 text-left font-medium text-sm outline-none transition-all',\n                    'aria-expanded:**:data-[slot=indicator]:rotate-180 **:[svg]:size-4 **:[svg]:shrink-0',\n                    'focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-ring',\n                    'disabled:cursor-default disabled:opacity-50',\n                    className\n                )\n            )}\n            ref={ref}\n            slot='trigger'\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof children === 'function' ? children(values) : children}\n                    <IconChevronDown className='text-muted-foreground transition-transform' data-slot='indicator' />\n                </>\n            )}\n        </Button>\n    )\n}\nconst DisclosurePanel = ({ className, children, ...props }: DisclosurePanelProps) => {\n    const { isExpanded } = use(DisclosureStateContext)!\n    const contentRef = useRef<HTMLDivElement>(null)\n    return (\n        <RACDisclosurePanel\n            className={cn('overflow-hidden text-sm')}\n            data-slot='disclosure-content'\n            style={{\n                height: isExpanded ? contentRef?.current?.scrollHeight : 0,\n                transition: 'height 0.2s ease-in-out'\n            }}\n            {...props}\n        >\n            <div className={cn('pt-0 pb-4', className)} ref={contentRef}>\n                {children}\n            </div>\n        </RACDisclosurePanel>\n    )\n}\nconst Accordion = (props: AccordionProps) => <DisclosureGroup {...props} />\nAccordion.Item = Disclosure\nAccordion.Trigger = DisclosureTrigger\nAccordion.Content = DisclosurePanel\n\nconst Collapsible = (props: CollapsibleProps) => <Disclosure {...props} />\nCollapsible.Trigger = DisclosureTrigger\nCollapsible.Content = DisclosurePanel\n\nexport { Accordion, Collapsible }\n"
  },
  "color-thumb": {
    "component": "@/components/ui/color-thumb",
    "raw": "'use client'\n\nimport { type ColorThumbProps, composeRenderProps, ColorThumb as RACColorThumb } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\nconst ColorThumb = ({ className, ...props }: ColorThumbProps) => {\n    return (\n        <RACColorThumb\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'top-[50%] left-[50%] size-6 rounded-full border-2 border-white [box-shadow:0_0_0_1px_black,_inset_0_0_0_1px_black]',\n                    'focus-visible:size-8',\n                    'dragging:bg-muted-foreground',\n                    'disabled:opacity-50',\n                    className\n                )\n            )}\n            style={({ defaultStyle }) => ({ ...defaultStyle })}\n        />\n    )\n}\n\nexport { ColorThumb }\n"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport type { ReactNode, RefObject } from 'react'\nimport type { ListBoxItemProps, ListBoxProps, ListBoxSectionProps, TextProps } from 'react-aria-components'\nimport { IconChevronLeft, IconChevronRight, IconChevronsLeft, IconChevronsRight, IconDots } from '@tabler/icons-react'\nimport { composeRenderProps, ListBox, ListBoxItem, ListBoxSection, Text } from 'react-aria-components'\nimport { cn } from '@/lib/utils'\n\ninterface PaginationProps<T> extends ListBoxProps<T> {\n    ref?: RefObject<HTMLDivElement>\n}\n\nconst Pagination = <T extends object>({ className, ref, ...props }: PaginationProps<T>) => {\n    return (\n        <ListBox\n            aria-label={props['aria-label'] || 'Pagination'}\n            className={composeRenderProps(className, (className) =>\n                cn('group -space-x-px flex *:first:rounded-l-lg *:last:rounded-r-lg', className)\n            )}\n            layout='grid'\n            orientation='horizontal'\n            ref={ref}\n            {...props}\n        />\n    )\n}\n\ninterface PaginationPagesProps<T> extends ListBoxSectionProps<T> {\n    ref?: RefObject<HTMLElement>\n}\n\nconst PaginationPages = <T extends object>({ className, ref, ...props }: PaginationPagesProps<T>) => (\n    <ListBoxSection\n        ref={ref}\n        {...props}\n        className={cn('-space-x-px flex only:*:last:rounded-r-lg only:*:first:rounded-l-lg', className)}\n    />\n)\n\ninterface PaginationItemProps extends ListBoxItemProps {\n    children?: ReactNode\n    className?: string\n    isCurrent?: boolean\n    slot?: 'ellipsis' | 'page' | 'last' | 'first' | 'previous' | 'next'\n}\n\nconst PaginationItem = ({ slot = 'page', className, isCurrent, children, ...props }: PaginationItemProps) => {\n    const textValue = slot === 'page' ? children?.toString() : slot\n    return (\n        <ListBoxItem\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'inline-flex size-9 cursor-pointer items-center justify-center gap-x-2 whitespace-nowrap border font-medium text-sm outline-hidden transition',\n                    'pressed:bg-accent/80 pressed:text-accent-foreground hover:bg-accent hover:text-accent-foreground',\n                    'focus-visible:z-10 focus-visible:border-primary/70 focus-visible:ring-4 focus-visible:ring-ring/50',\n                    isCurrent\n                        ? 'pointer-events-none bg-primary text-primary-foreground'\n                        : 'disabled:cursor-default disabled:opacity-50',\n                    className\n                )\n            )}\n            isDisabled={props.isDisabled || slot === 'ellipsis'}\n            textValue={textValue}\n            {...props}\n        >\n            {slot === 'ellipsis' ? (\n                <IconDots />\n            ) : slot === 'first' ? (\n                <IconChevronsLeft />\n            ) : slot === 'last' ? (\n                <IconChevronsRight />\n            ) : slot === 'previous' ? (\n                <IconChevronLeft />\n            ) : slot === 'next' ? (\n                <IconChevronRight />\n            ) : (\n                children\n            )}\n        </ListBoxItem>\n    )\n}\n\ninterface PaginationLabelProps extends Omit<TextProps, 'onClick'> {\n    current: number | string\n    total?: number | string\n}\n\nconst PaginationLabel = ({ className, current, total, ...props }: PaginationLabelProps) => (\n    <ListBoxItem\n        className={cn(\n            'inline-flex h-9 select-none items-center justify-center gap-x-2 whitespace-nowrap border px-4 font-medium text-muted-foreground text-sm outline-hidden transition',\n            className\n        )}\n        isDisabled\n        textValue={`${String(current)}/${String(total)}`}\n        {...props}\n    >\n        <Text className='text-primary'>{current}</Text>\n        {total && (\n            <>\n                <span>/</span>\n                <Text>{total}</Text>\n            </>\n        )}\n    </ListBoxItem>\n)\n\nPagination.Item = PaginationItem\nPagination.Pages = PaginationPages\nPagination.Label = PaginationLabel\n\nexport { Pagination }\n"
  }
}