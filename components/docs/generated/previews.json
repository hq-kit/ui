{
  "buttons/button/button-shape-demo": {
    "component": "@/components/docs/buttons/button/button-shape-demo",
    "raw": "import { Button } from '@/components/ui'\n\nexport default function ButtonShapeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button shape='square'>Rounded</Button>\n            <Button shape='circle'>Circle</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-loader-demo": {
    "component": "@/components/docs/buttons/button/button-loader-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonLoaderDemo() {\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const onPress = () => {\n        setLoading('loading')\n        setTimeout(() => setLoading('success'), 3000)\n        setTimeout(() => setLoading('idle'), 6000)\n    }\n\n    return (\n        <Button\n            isPending={loading === 'loading'}\n            variant={loading === 'success' ? 'primary' : 'danger'}\n            onPress={onPress}\n        >\n            {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n            {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n        </Button>\n    )\n}\n"
  },
  "buttons/button/button-icon-only-demo": {
    "component": "@/components/docs/buttons/button/button-icon-only-demo",
    "raw": "'use client'\n\nimport { IconBrandNextjs } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconOnlyDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button icon size='xs'>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon size='sm'>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon size='lg'>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon shape='circle' size='xs'>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon shape='circle' size='sm'>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon shape='circle'>\n                <IconBrandNextjs />\n            </Button>\n            <Button icon shape='circle' size='lg'>\n                <IconBrandNextjs />\n            </Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-link-demo": {
    "component": "@/components/docs/buttons/button/button-link-demo",
    "raw": "'use client'\n\nimport { Link, buttonStyle } from '@/components/ui'\n\nexport default function ButtonLinkDemo() {\n    return (\n        <Link className={buttonStyle({ variant: 'danger' })} href='#'>\n            Link\n        </Link>\n    )\n}\n"
  },
  "buttons/button/button-basic-demo": {
    "component": "@/components/docs/buttons/button/button-basic-demo",
    "raw": "import { Button } from '@/components/ui'\n\nexport default function ButtonBasicDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button variant='primary'>Primary</Button>\n            <Button variant='secondary'>Secondary</Button>\n            <Button variant='outline'>Outline</Button>\n            <Button variant='ghost'>Ghost</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-icon-demo": {
    "component": "@/components/docs/buttons/button/button-icon-demo",
    "raw": "import { IconBrandGithub } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button size='xs'>\n                <IconBrandGithub />\n                Github\n            </Button>\n            <Button size='sm'>\n                <IconBrandGithub />\n                Github\n            </Button>\n            <Button>\n                <IconBrandGithub />\n                Github\n            </Button>\n            <Button size='lg'>\n                <IconBrandGithub />\n                Github\n            </Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-disabled-demo": {
    "component": "@/components/docs/buttons/button/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonDisabledDemo() {\n    return <Button isDisabled>Label</Button>\n}\n"
  },
  "buttons/button/button-size-demo": {
    "component": "@/components/docs/buttons/button/button-size-demo",
    "raw": "import { Button } from '@/components/ui'\n\nexport default function ButtonSizeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <Button size='xs'>Extra Small</Button>\n            <Button size='sm'>Small</Button>\n            <Button>Medium</Button>\n            <Button size='lg'>Large</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { IconFolder } from 'hq-icons'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerFolderDemo() {\n    return (\n        <FileTrigger acceptDirectory>\n            <IconFolder />\n            Upload\n        </FileTrigger>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-avatar-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-avatar-demo",
    "raw": "'use client'\n\nimport type { DropEvent } from '@react-types/shared'\nimport { useState } from 'react'\nimport { isFileDropItem } from 'react-aria-components'\n\nimport { Avatar, DropZone, FileTrigger } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport default function FileTriggerAvatarDemo() {\n    const [droppedImage, setDroppedImage] = useState<string | null>(null)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    const onSelectHandler = async (e: FileList | null) => {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n\n    return (\n        <div className='flex items-center gap-2'>\n            <DropZone\n                getDropOperation={(types) => (types.has('image/jpeg') || types.has('image/png') ? 'copy' : 'cancel')}\n                onDrop={onDropHandler}\n                className={cn('size-10 overflow-hidden rounded-full p-0')}\n            >\n                <Avatar src={droppedImage ?? ''} size='lg' />\n                <input type='hidden' name='image' value={droppedImage ?? ''} />\n            </DropZone>\n            <FileTrigger size='sm' acceptedFileTypes={['image/png', 'image/jpeg']} onSelect={onSelectHandler}>\n                Upload avatar\n            </FileTrigger>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-variant-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-variant-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            <FileTrigger variant='primary'>Primary</FileTrigger>\n            <FileTrigger variant='secondary'>Secondary</FileTrigger>\n            <FileTrigger variant='danger'>Danger</FileTrigger>\n            <FileTrigger variant='outline'>Outline</FileTrigger>\n            <FileTrigger variant='ghost'>Ghost</FileTrigger>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-controlled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = useState<string[] | null>(null)\n    return (\n        <div className='flex flex-col space-y-6'>\n            <FileTrigger\n                allowsMultiple\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            >\n                Upload\n            </FileTrigger>\n            {file && <code>{JSON.stringify({ file }, null, 2)}</code>}\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { IconUpload } from 'hq-icons'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerMultipleDemo() {\n    return (\n        <FileTrigger allowsMultiple>\n            <IconUpload />\n            Upload\n        </FileTrigger>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { IconCamera } from 'hq-icons'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerCameraDemo() {\n    return (\n        <FileTrigger>\n            <IconCamera />\n            Open a camera\n        </FileTrigger>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    return <FileTrigger isDisabled>Upload</FileTrigger>\n}\n"
  },
  "buttons/file-trigger/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    return <FileTrigger>Upload</FileTrigger>\n}\n"
  },
  "buttons/toggle/toggle-group-selection-mode-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-selection-mode-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustify,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconItalic,\n    IconStrikethrough,\n    IconUnderline\n} from 'hq-icons'\n\nimport { Description, Toggle } from '@/components/ui'\n\nexport default function ToggleGroupSelectionModeDemo() {\n    return (\n        <div className='flex flex-col gap-2'>\n            <Description>Single</Description>\n            <Toggle.Group defaultSelectedKeys={['center']} selectionMode='single'>\n                <Toggle id='left'>\n                    <IconAlignLeft />\n                </Toggle>\n                <Toggle id='center'>\n                    <IconAlignCenter />\n                </Toggle>\n                <Toggle id='right'>\n                    <IconAlignRight />\n                </Toggle>\n                <Toggle id='justify'>\n                    <IconAlignJustify />\n                </Toggle>\n            </Toggle.Group>\n            <Description>Multiple</Description>\n            <Toggle.Group defaultSelectedKeys={['bold']} selectionMode='multiple'>\n                <Toggle id='bold'>\n                    <IconBold />\n                </Toggle>\n                <Toggle id='italic'>\n                    <IconItalic />\n                </Toggle>\n                <Toggle id='underline'>\n                    <IconUnderline />\n                </Toggle>\n                <Toggle id='strike'>\n                    <IconStrikethrough />\n                </Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-controlled-demo",
    "raw": "'use client'\n\nimport { IconBold, IconItalic, IconUnderline } from 'hq-icons'\nimport { useState } from 'react'\nimport type { Key } from 'react-aria-components'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupControlledDemo() {\n    const [selected, setSelected] = useState(new Set<Key>(['bold']))\n\n    return (\n        <div className='flex flex-col items-center space-y-6'>\n            <Toggle.Group icon selectionMode='multiple' selectedKeys={selected} onSelectionChange={setSelected}>\n                <Toggle id='bold'>\n                    <IconBold />\n                </Toggle>\n                <Toggle id='italic'>\n                    <IconItalic />\n                </Toggle>\n                <Toggle id='underline'>\n                    <IconUnderline />\n                </Toggle>\n            </Toggle.Group>\n            <code>{JSON.stringify([...selected], null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-size-icon-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-size-icon-demo",
    "raw": "'use client'\n\nimport { IconEye, IconEyeClosed } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleSizeDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <Toggle icon size='xs'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon size='sm'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon size='md'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon size='lg'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon shape='circle' size='xs'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon shape='circle' size='sm'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon shape='circle' size='md'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle icon shape='circle' size='lg'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-controlled-demo",
    "raw": "'use client'\n\nimport { IconLock, IconLockOpen } from 'hq-icons'\nimport { useState } from 'react'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleControlledDemo() {\n    const [isSelected, setSelected] = useState(false)\n    return (\n        <div className='flex flex-col items-center space-y-6'>\n            <Toggle icon isSelected={isSelected} onChange={setSelected}>\n                {({ isSelected }) => <>{isSelected ? <IconLock /> : <IconLockOpen />}</>}\n            </Toggle>\n            <code>{JSON.stringify({ isSelected }, null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-demo",
    "raw": "'use client'\n\nimport { IconHeading, IconParagraph } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDemo() {\n    return (\n        <Toggle.Group>\n            <Toggle>\n                <IconParagraph />\n                Paragraph\n            </Toggle>\n            <Toggle>\n                <IconHeading />\n                Heading\n            </Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-disabled-demo",
    "raw": "'use client'\n\nimport { IconPower } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDisabledDemo() {\n    return (\n        <Toggle icon isDisabled>\n            <IconPower />\n        </Toggle>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-variant-demo",
    "raw": "'use client'\n\nimport { IconCloud, IconCloudOff, IconLock, IconLockOpen, IconMoon, IconSun } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupVariantDemo() {\n    return (\n        <div className='flex flex-col space-y-6'>\n            <Toggle.Group variant='solid' defaultSelectedKeys={['left']} selectionMode='multiple'>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconMoon /> : <IconSun />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconLock /> : <IconLockOpen />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconCloud /> : <IconCloudOff />)}</Toggle>\n            </Toggle.Group>\n            <Toggle.Group variant='outline' defaultSelectedKeys={['center']} selectionMode='multiple'>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconMoon /> : <IconSun />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconLock /> : <IconLockOpen />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconCloud /> : <IconCloudOff />)}</Toggle>\n            </Toggle.Group>\n            <Toggle.Group variant='ghost' defaultSelectedKeys={['right']} selectionMode='multiple'>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconMoon /> : <IconSun />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconLock /> : <IconLockOpen />)}</Toggle>\n                <Toggle>{({ isSelected }) => (isSelected ? <IconCloud /> : <IconCloudOff />)}</Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-size-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-size-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleSizeDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <Toggle size='xs'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle size='sm'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle size='md'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle size='lg'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-shape-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-shape-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleShapeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Toggle shape='square'>{({ isSelected }) => <>{isSelected ? 'Squared' : 'Square'}</>}</Toggle>\n            <Toggle shape='circle'>{({ isSelected }) => <>{isSelected ? 'Circled' : 'Circle'}</>}</Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDemo() {\n    return <Toggle>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n}\n"
  },
  "buttons/toggle/toggle-group-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-disabled-demo",
    "raw": "'use client'\n\nimport { IconAlignCenter, IconAlignLeft, IconAlignRight } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDisabledDemo() {\n    return (\n        <Toggle.Group icon isDisabled>\n            <Toggle id='left'>\n                <IconAlignLeft />\n            </Toggle>\n            <Toggle id='center'>\n                <IconAlignCenter />\n            </Toggle>\n            <Toggle id='right'>\n                <IconAlignRight />\n            </Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-orientation-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-orientation-demo",
    "raw": "import { IconCloud, IconCloudOff, IconLock, IconLockOpen, IconMoon, IconSun } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function App() {\n    return (\n        <div>\n            <Toggle.Group orientation='vertical'>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconMoon /> : <IconSun />}\n                            {isSelected ? 'Dark' : 'Light'} Mode\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconLock /> : <IconLockOpen />}\n                            Secure Access {isSelected ? 'On' : 'Off'}\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconCloud /> : <IconCloudOff />}\n                            Always Sync\n                        </>\n                    )}\n                </Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-variant-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleVariantDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Toggle variant='solid'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle variant='outline'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle variant='ghost'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n        </div>\n    )\n}\n"
  },
  "media/carousel/carousel-autoplay-demo": {
    "component": "@/components/docs/media/carousel/carousel-autoplay-demo",
    "raw": "'use client'\n\nimport Autoplay from 'embla-carousel-autoplay'\nimport { useRef } from 'react'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselAutoplayDemo() {\n    const plugin = useRef(Autoplay({ delay: 1000, stopOnInteraction: true }))\n\n    return (\n        <Carousel\n            onMouseEnter={plugin.current.stop}\n            onMouseLeave={plugin.current.reset}\n            plugins={[plugin.current]}\n            opts={{\n                loop: true,\n                align: 'center'\n            }}\n            className='w-full max-w-xs'\n        >\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title className='line-clamp-1 sm:text-lg'>{item.title}</Card.Title>\n                                <Card.Description className='line-clamp-2'>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description: 'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "media/carousel/carousel-demo": {
    "component": "@/components/docs/media/carousel/carousel-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Carousel } from '@/components/ui'\n\nexport default function CarouselDemo() {\n    return (\n        <Carousel className='w-full max-w-xs'>\n            <Carousel.Content>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/61/400/300'\n                        alt='image 1'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/62/400/300'\n                        alt='image 2'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/63/400/300'\n                        alt='image 3'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/64/400/300'\n                        alt='image 4'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/65/400/300'\n                        alt='image 5'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/66/400/300'\n                        alt='image 6'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/61/400/300'\n                        alt='image 7'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n            </Carousel.Content>\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-options-demo": {
    "component": "@/components/docs/media/carousel/carousel-options-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOptionsDemo() {\n    return (\n        <Carousel\n            opts={{\n                align: 'center',\n                loop: true\n            }}\n            className='w-full max-w-2xl'\n        >\n            <Carousel.Content items={Array.from({ length: 16 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item id={id} className='basis-1/2 lg:basis-1/3'>\n                        <Card className='flex aspect-square items-center justify-center'>\n                            <Card.Title>{id}</Card.Title>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-with-collection-demo": {
    "component": "@/components/docs/media/carousel/carousel-with-collection-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselWithCollectionDemo() {\n    return (\n        <Carousel className='w-full max-w-xs'>\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <Card className='p-1'>\n                            <Image\n                                className='h-40 rounded-lg object-cover object-center'\n                                src={`https://picsum.photos/id/${item.id}/400/300`}\n                                alt={`image ${item.id}`}\n                                width={400}\n                                height={300}\n                            />\n                            <Card.Header className='p-3'>\n                                <Card.Title className='line-clamp-1 sm:text-lg'>{item.title}</Card.Title>\n                                <Card.Description className='line-clamp-2'>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description: 'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    }\n]\n"
  },
  "media/carousel/carousel-api-demo": {
    "component": "@/components/docs/media/carousel/carousel-api-demo",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Button } from 'react-aria-components'\n\nimport { Card, Carousel, type CarouselApi } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport default function CarouselDApiDemo() {\n    const [api, setApi] = useState<CarouselApi>()\n    const [current, setCurrent] = useState(0)\n    const [count, setCount] = useState(0)\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n        setCount(api.scrollSnapList().length)\n        setCurrent(api.selectedScrollSnap() + 1)\n        api.on('select', () => {\n            setCurrent(api.selectedScrollSnap() + 1)\n        })\n    }, [api])\n\n    const handleSelect = (index: number) => {\n        if (api) {\n            api.scrollTo(index)\n            setCurrent(index + 1)\n        }\n    }\n\n    return (\n        <Carousel setApi={setApi} className='w-full max-w-sm'>\n            <Carousel.Content items={Array.from({ length: 10 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item id={id}>\n                        <Card>\n                            <Card.Content className='flex aspect-square items-center justify-center p-6'>\n                                <span className='font-semibold text-4xl'>{id}</span>\n                            </Card.Content>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n            <div className='flex items-center justify-between'>\n                <div className='flex gap-1 py-2 text-center text-muted-fg text-sm'>\n                    {Array.from({ length: 10 }).map((_, index) => (\n                        <Button\n                            className={cn(\n                                'size-3 rounded-full transition',\n                                current === index + 1 ? 'bg-primary' : 'bg-muted hover:bg-primary/50'\n                            )}\n                            aria-label={`Slide ${current} of ${count}`}\n                            onPress={() => handleSelect(index)}\n                            key={index}\n                        />\n                    ))}\n                </div>\n\n                <Carousel.Handler />\n            </div>\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-orientation-demo": {
    "component": "@/components/docs/media/carousel/carousel-orientation-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOrientationDemo() {\n    return (\n        <Carousel orientation='vertical'>\n            <Carousel.Content items={items} className='h-32'>\n                {(item) => (\n                    <Carousel.Item className='basis-1/2 md:basis-1/3'>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title>{item.title}</Card.Title>\n                                <Card.Description>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler />\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description: 'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "media/user/user-basic-demo": {
    "component": "@/components/docs/media/user/user-basic-demo",
    "raw": "import { User } from '@/components/ui'\n\nexport default function UserBasicDemo() {\n    return <User src='https://github.com/dq-alhq.png' name='DQ Al Haqqi' description='@dq-alhq' />\n}\n"
  },
  "media/user/user-size-demo": {
    "component": "@/components/docs/media/user/user-size-demo",
    "raw": "import { User } from '@/components/ui'\n\nexport default function UserSizeDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <User name='John Doe' size='md' description='Admin' />\n            <User name='John Doe' size='lg' description='Admin' />\n            <User name='John Doe' size='xl' description='Admin' />\n        </div>\n    )\n}\n"
  },
  "media/user/user-shape-demo": {
    "component": "@/components/docs/media/user/user-shape-demo",
    "raw": "import { User } from '@/components/ui'\n\nexport default function UserShapeDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <User name='John Doe' shape='circle' description='Admin' />\n            <User name='John Doe' shape='square' description='Admin' />\n        </div>\n    )\n}\n"
  },
  "media/avatar/avatar-group-demo": {
    "component": "@/components/docs/media/avatar/avatar-group-demo",
    "raw": "import { Avatar, AvatarGroup } from '@/components/ui'\n\nexport default function AvatarGroupDemo() {\n    return (\n        <AvatarGroup aria-label='avatar-group'>\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=61' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=62' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=63' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=64' />\n            <Avatar alt='Sample Image' src='https://i.pravatar.cc/150?img=65' />\n        </AvatarGroup>\n    )\n}\n"
  },
  "media/avatar/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar/avatar-fallback-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarFallbackDemo() {\n    return <Avatar />\n}\n"
  },
  "media/avatar/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar/avatar-initials-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarInitialsDemo() {\n    return <Avatar alt='Diqi Al Haqqi' />\n}\n"
  },
  "media/avatar/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar/avatar-shape-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarShapeDemo() {\n    return <Avatar shape='square' alt='Diqi Al-Haqqi' src='https://github.com/dq-alhq.png' />\n}\n"
  },
  "media/avatar/avatar-size-demo": {
    "component": "@/components/docs/media/avatar/avatar-size-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarSizeDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Avatar alt='avatar-sm' size='xs' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-sm' size='sm' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-md' size='md' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-lg' size='lg' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-xl' size='xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-2xl' size='2xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-3xl' size='3xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-4xl' size='4xl' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-5xl' size='5xl' src='https://github.com/dq-alhq.png' />\n        </div>\n    )\n}\n"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { DropZone, Label } from '@/components/ui'\n\nexport default function DropZoneDemo() {\n    const [dropped, setDropped] = useState(false)\n\n    return (\n        <DropZone onDrop={() => setDropped(true)}>\n            <Label>{dropped ? 'Item dropped!' : 'Drop an Item here'}</Label>\n        </DropZone>\n    )\n}\n"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconImage } from 'hq-icons'\nimport Image from 'next/image'\nimport { isFileDropItem } from 'react-aria-components'\n\nimport { Description, DropZone, FileTrigger } from '@/components/ui'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function DropZoneAndFileTriggerDemo() {\n    const [droppedImage, setDroppedImage] = useState<string | null>(null)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    const onSelectHandler = async (e: FileList | null) => {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n\n    return (\n        <DropZone\n            getDropOperation={(types) => (types.has('image/jpeg') || types.has('image/png') ? 'copy' : 'cancel')}\n            onDrop={onDropHandler}\n        >\n            <div className='grid space-y-3'>\n                <div className='mx-auto grid size-12 place-content-center overflow-hidden rounded-full border bg-muted/70 group-drop-target:border-primary/70 group-drop-target:bg-ring'>\n                    {droppedImage ? (\n                        <Image\n                            width={20}\n                            height={20}\n                            alt='Uploaded Image'\n                            src={droppedImage}\n                            className='aspect-square size-full object-cover'\n                        />\n                    ) : (\n                        <IconImage className='size-5' />\n                    )}\n                </div>\n                <div className='flex justify-center'>\n                    <FileTrigger\n                        acceptedFileTypes={['image/png', 'image/jpeg']}\n                        allowsMultiple={false}\n                        onSelect={onSelectHandler}\n                    >\n                        Upload an image\n                    </FileTrigger>\n                </div>\n                <Description>Or drag and drop PNG, JPG, GIF up to 10MB</Description>\n            </div>\n            <input type='hidden' name='image' value={droppedImage ?? ''} />\n        </DropZone>\n    )\n}\n"
  },
  "statuses/badge/badge-variant-demo": {
    "component": "@/components/docs/statuses/badge/badge-variant-demo",
    "raw": "'use client'\n\nimport { Badge, badgeStyle } from '@/components/ui'\n\ntype Appearance = keyof typeof badgeStyle.variants.variant\n\nexport default function BadgeVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(badgeStyle.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Badge variant={variant as Appearance}>{variant}</Badge>\n                </div>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/badge/badge-demo": {
    "component": "@/components/docs/statuses/badge/badge-demo",
    "raw": "import { Badge } from '@/components/ui'\n\nexport default function BadgeDemo() {\n    return <Badge variant='primary'>Label</Badge>\n}\n"
  },
  "statuses/indicator/indicator-position-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-position-demo",
    "raw": "import { Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\n\nexport default function IndicatorInverseDemo() {\n    return (\n        <div className='flex flex-wrap gap-4'>\n            <Indicator position='top'>\n                <Button>Top</Button>\n            </Indicator>\n            <Indicator position='bottom'>\n                <Button>Bottom</Button>\n            </Indicator>\n        </div>\n    )\n}\n"
  },
  "statuses/indicator/indicator-inverse-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-inverse-demo",
    "raw": "import { Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\n\nconst variants = ['primary', 'secondary', 'danger', 'outline'] as const\n\nexport default function IndicatorPositionDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-4'>\n            {variants.map((variant) => (\n                <Indicator key={variant} variant={variant}>\n                    <Button>{variant}</Button>\n                </Indicator>\n            ))}\n            {variants.map((variant) => (\n                <Indicator key={variant} variant={variant} isInverse>\n                    <Button>{variant}</Button>\n                </Indicator>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/indicator/indicator-text-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-text-demo",
    "raw": "import { Avatar, Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\nimport { IconBell, IconShoppingCart } from 'hq-icons'\n\nexport default function IndicatorTextDemo() {\n    return (\n        <div className='flex flex-wrap gap-4'>\n            <Indicator text={<IconBell />}>\n                <Avatar shape='square' src='https://i.pravatar.cc/77' />\n            </Indicator>\n            <Indicator text='new'>\n                <Avatar shape='square' src='https://i.pravatar.cc/77' />\n            </Indicator>\n            <Indicator text='99+' shape='square'>\n                <Button icon variant='outline'>\n                    <IconShoppingCart />\n                </Button>\n            </Indicator>\n        </div>\n    )\n}\n"
  },
  "statuses/indicator/indicator-variants-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-variants-demo",
    "raw": "import { Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\nimport { IconBell } from 'hq-icons'\nimport { Fragment } from 'react'\n\nconst sizes = ['xs', 'sm', 'md', 'lg'] as const\nconst shapes = ['circle', 'square'] as const\nconst variants = ['primary', 'secondary', 'danger', 'outline'] as const\n\nexport default function IndicatorVariantsDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-4'>\n            {sizes.map((size) => (\n                <Fragment key={size}>\n                    {shapes.map((shape) => (\n                        <Fragment key={shape}>\n                            {variants.map((variant) => (\n                                <Indicator key={variant} size={size} shape={shape} variant={variant}>\n                                    <Button variant='outline' icon>\n                                        <IconBell />\n                                    </Button>\n                                </Indicator>\n                            ))}\n                        </Fragment>\n                    ))}\n                </Fragment>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/indicator/indicator-custom-demo": {
    "component": "@/components/docs/statuses/indicator/indicator-custom-demo",
    "raw": "import { Avatar, Button } from '@/components/ui'\nimport { Indicator } from '@/components/ui/indicator'\nimport { IconCheck, IconInfo } from 'hq-icons'\n\nexport default function IndicatorCustomDemo() {\n    return (\n        <div className='flex flex-wrap gap-6'>\n            <Indicator className='size-9 bg-amber-600 *:[svg]:size-6' text={<IconInfo />}>\n                <Button variant='outline'>Warning</Button>\n            </Indicator>\n            <Indicator className='bg-green-700' text={<IconCheck />}>\n                <Button variant='outline'>Success</Button>\n            </Indicator>\n            <Indicator className='animate-pulse'>\n                <Avatar shape='square' src='https://i.pravatar.cc/77' />\n            </Indicator>\n        </div>\n    )\n}\n"
  },
  "statuses/skeleton/skeleton-demo": {
    "component": "@/components/docs/statuses/skeleton/skeleton-demo",
    "raw": "import { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton className='size-7' />\n                <div className='space-y-1'>\n                    <Skeleton className='h-3 w-56' />\n                    <Skeleton className='h-3 w-10' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/skeleton/skeleton-shape-demo": {
    "component": "@/components/docs/statuses/skeleton/skeleton-shape-demo",
    "raw": "import { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonShapeDemo() {\n    return (\n        <Card className='space-y-4 p-4'>\n            <div className='flex gap-2'>\n                <Skeleton shape='circle' className='size-9' />\n                <div className='space-y-1'>\n                    <Skeleton shape='circle' className='h-4 w-56' />\n                    <Skeleton shape='circle' className='h-4 w-10' />\n                </div>\n            </div>\n            <div className='flex gap-2'>\n                <Skeleton shape='square' className='size-9' />\n                <div className='space-y-1'>\n                    <Skeleton shape='square' className='h-4 w-56' />\n                    <Skeleton shape='square' className='h-4 w-10' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/toast/toast-description-demo": {
    "component": "@/components/docs/statuses/toast/toast-description-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastDescriptionDemo() {\n    return (\n        <Button\n            onPress={() =>\n                toast('This is Toast Message', {\n                    description: 'And this is Message Description'\n                })\n            }\n        >\n            Toast\n        </Button>\n    )\n}\n"
  },
  "statuses/toast/toast-status-demo": {
    "component": "@/components/docs/statuses/toast/toast-status-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastStatusDemo() {\n    return (\n        <div className='flex flex-wrap gap-3'>\n            <Button variant='outline' onPress={() => toast('Everything is fine')}>\n                Default\n            </Button>\n            <Button variant='outline' onPress={() => toast.error('The registration failed')}>\n                Error\n            </Button>\n            <Button variant='outline' onPress={() => toast.success('The registration was successful.')}>\n                Success\n            </Button>\n            <Button variant='outline' onPress={() => toast.warning('There was an issue during registration')}>\n                Warning\n            </Button>\n            <Button variant='outline' onPress={() => toast.info('Email is already registered.')}>\n                Info\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-manual-demo": {
    "component": "@/components/docs/statuses/toast/toast-manual-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastAutoDismissDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Button\n                onPress={() =>\n                    toast(\n                        'Manually Close',\n                        {\n                            description: 'Click the action or cancel button to close',\n                            actionLabel: 'Cancel',\n                            altActionLabel: 'Close'\n                        },\n                        { timeout: 0 }\n                    )\n                }\n            >\n                Manually Close\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Automatically Close', {\n                        description: 'Just leave it for 3 seconds',\n                        actionLabel: 'Cancel',\n                        altActionLabel: 'Close'\n                    })\n                }\n            >\n                Automatically Close\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-action-demo": {
    "component": "@/components/docs/statuses/toast/toast-action-demo",
    "raw": "'use client'\n\nimport { IconEye } from 'hq-icons'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastActionDemo() {\n    return (\n        <div className='flex gap-3'>\n            <Button\n                onPress={() =>\n                    toast('Your post has been published!', {\n                        action: () => alert('Viewed'),\n                        actionLabel: (\n                            <>\n                                <IconEye /> View\n                            </>\n                        )\n                    })\n                }\n            >\n                Action\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Your message has been sent!', {\n                        action: () => alert('Viewed'),\n                        actionLabel: (\n                            <>\n                                <IconEye /> View\n                            </>\n                        ),\n                        altAction: () => alert('Cancelled'),\n                        altActionLabel: 'Cancel'\n                    })\n                }\n            >\n                Do or Not\n            </Button>\n            <Button\n                onPress={() =>\n                    toast('Your data has been deleted!', {\n                        altAction: () => alert('Cancelled'),\n                        altActionLabel: 'Cancel'\n                    })\n                }\n            >\n                Cancel\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-demo": {
    "component": "@/components/docs/statuses/toast/toast-demo",
    "raw": "'use client'\n\nimport { Button, toast } from '@/components/ui'\n\nexport default function ToastDemo() {\n    return <Button onPress={() => toast('This is Toast Message')}>Toast</Button>\n}\n"
  },
  "statuses/progress/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress/progress-bar-demo",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressBarDemo() {\n    const [value, setValue] = useState(0)\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress label='Loading…' value={value} />\n}\n"
  },
  "statuses/progress/progress-variant-demo": {
    "component": "@/components/docs/statuses/progress/progress-variant-demo",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressVariantDemo() {\n    const [value, setValue] = useState(0)\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 75 ? prev + 1 : 75))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return (\n        <div className='space-y-4'>\n            <div className='flex gap-2'>\n                <Progress circle label='Primary' value={value} variant='primary' />\n                <Progress circle label='Secondary' value={value} variant='secondary' />\n                <Progress circle label='Danger' value={value} variant='danger' />\n                <Progress circle label='Dark' value={value} variant='dark' />\n            </div>\n            <div className='flex flex-col gap-2'>\n                <Progress label='Primary' value={value} variant='primary' />\n                <Progress label='Secondary' value={value} variant='secondary' />\n                <Progress label='Danger' value={value} variant='danger' />\n                <Progress label='Dark' value={value} variant='dark' />\n            </div>\n        </div>\n    )\n}\n"
  },
  "statuses/progress/progress-circle-demo": {
    "component": "@/components/docs/statuses/progress/progress-circle-demo",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressCircleDemo() {\n    const [value, setValue] = useState(0)\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress circle label='Loading…' value={value} />\n}\n"
  },
  "statuses/progress/progress-controlled-demo": {
    "component": "@/components/docs/statuses/progress/progress-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Progress, Slider } from '@/components/ui'\n\nexport default function ProgressControlledDemo() {\n    const [value, setValue] = useState(10)\n\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <Progress circle label='Progress…' value={value} />\n            <Progress label='Progress…' value={value} />\n            <Slider label='Control' value={value} onChange={(v) => setValue(v as number)} />\n        </div>\n    )\n}\n"
  },
  "statuses/progress/progress-indeterminate-demo": {
    "component": "@/components/docs/statuses/progress/progress-indeterminate-demo",
    "raw": "'use client'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressIndeterminateDemo() {\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <Progress label='Loading…' isIndeterminate />\n            <Progress circle label='Loading…' isIndeterminate />\n        </div>\n    )\n}\n"
  },
  "statuses/meter/meter-decimal-format-demo": {
    "component": "@/components/docs/statuses/meter/meter-decimal-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDecimalFormatDemo() {\n    return (\n        <Meter\n            formatOptions={{\n                style: 'decimal',\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }}\n            label='Progress'\n            value={75.25}\n        />\n    )\n}\n"
  },
  "statuses/meter/meter-demo": {
    "component": "@/components/docs/statuses/meter/meter-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\nimport { useEffect, useState } from 'react'\n\nexport default function MeterDemo() {\n    const [value, setValue] = useState(0)\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return <Meter label='Storage space' value={value} />\n}\n"
  },
  "statuses/meter/meter-currency-format-demo": {
    "component": "@/components/docs/statuses/meter/meter-currency-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterCurrencyFormatDemo() {\n    return <Meter label='Revenue' formatOptions={{ style: 'currency', currency: 'USD' }} value={15} />\n}\n"
  },
  "statuses/note/note-variant-demo": {
    "component": "@/components/docs/statuses/note/note-variant-demo",
    "raw": "'use client'\n\nimport { Note } from '@/components/ui'\n\nexport default function NoteVariantDemo() {\n    return (\n        <div className='space-y-6'>\n            <Note>Default alert! Change a few things up and try submitting again.</Note>\n            <Note variant='danger'>Danger alert! Change a few things up and try submitting again.</Note>\n            <Note variant='outline'>Outline alert! Change a few things up and try submitting again.</Note>\n        </div>\n    )\n}\n"
  },
  "statuses/note/note-title-description-demo": {
    "component": "@/components/docs/statuses/note/note-title-description-demo",
    "raw": "import { Note } from '@/components/ui'\n\nexport default function NoteTitleDescriptionDemo() {\n    return (\n        <div className='space-y-6'>\n            <Note>\n                <Note.Title>Heads up!</Note.Title>\n                <Note.Description>Change a few things up and try submitting again.</Note.Description>\n            </Note>\n            <Note variant='danger'>\n                <Note.Title>Heads up!</Note.Title>\n                <Note.Description>Change a few things up and try submitting again.</Note.Description>\n            </Note>\n            <Note variant='outline'>\n                <Note.Title>Heads up!</Note.Title>\n                <Note.Description>Change a few things up and try submitting again.</Note.Description>\n            </Note>\n        </div>\n    )\n}\n"
  },
  "statuses/note/note-with-icon-demo": {
    "component": "@/components/docs/statuses/note/note-with-icon-demo",
    "raw": "import { Note } from '@/components/ui'\nimport { IconInfo } from 'hq-icons'\n\nexport default function NoteWithIconDemo() {\n    return (\n        <Note>\n            <IconInfo />\n            <Note.Title>Heads up!</Note.Title>\n            <Note.Description>Change a few things up and try submitting again.</Note.Description>\n        </Note>\n    )\n}\n"
  },
  "statuses/note/note-demo": {
    "component": "@/components/docs/statuses/note/note-demo",
    "raw": "import { Note } from '@/components/ui'\n\nexport default function NoteDemo() {\n    return <Note>Change a few things up and try submitting again.</Note>\n}\n"
  },
  "forms/search-field/search-field-demo": {
    "component": "@/components/docs/forms/search-field/search-field-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDemo() {\n    return (\n        <div className='flex flex-col gap-2 sm:flex-row'>\n            <SearchField label='Basic' />\n            <SearchField isPending label='Pending' />\n            <SearchField isReadOnly label='Readonly' />\n            <SearchField isInvalid label='Invalid' />\n            <SearchField isDisabled label='Disabled' />\n        </div>\n    )\n}\n"
  },
  "forms/search-field/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field/search-field-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, Form, SearchField } from '@/components/ui'\n\nexport default function SearchFieldValidationDemo() {\n    const [value, setValue] = useState<string>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <SearchField\n                isRequired\n                validate={(v) => (v.length < 3 ? 'Must be at least 3 characters' : null)}\n                value={value}\n                onChange={setValue}\n                label='Search for Products'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/search-field/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldControlledDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <div className='space-y-2'>\n            <SearchField value={value} onChange={setValue} className='mb-2' />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-item-description-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-item-description-demo",
    "raw": "import { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupItemDescriptionDemo() {\n    return (\n        <CheckboxGroup label='Email Settings'>\n            <Checkbox value='newsletter' description='Receive our newsletter once per week'>\n                Newsletter\n            </Checkbox>\n            <Checkbox value='deals' description='The best deals and sales for members'>\n                Deals\n            </Checkbox>\n            <Checkbox value='notifications' description='Notifications about your orders'>\n                Notifications\n            </Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-validation-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, Checkbox, CheckboxGroup, Form } from '@/components/ui'\n\nexport default function CheckboxValidationDemo() {\n    const [value, setValue] = useState<string[]>([])\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <CheckboxGroup\n                onChange={setValue}\n                value={value}\n                isRequired\n                validate={(v) => (!v.includes('terms-conditions') ? 'Terms and conditions must be accepted' : null)}\n                label='Agreement'\n                description='Please read and agree before continuing'\n            >\n                <Checkbox isRequired value='terms-conditions'>\n                    Terms and conditions (required)\n                </Checkbox>\n                <Checkbox value='privacy-policy'>Privacy policy</Checkbox>\n                <Checkbox value='cookie-policy'>Cookie policy</Checkbox>\n            </CheckboxGroup>\n            <Button type='submit'>Save</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-controlled-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupControlledDemo() {\n    const [values, setValues] = useState<string[]>([])\n    return (\n        <div className='space-y-2'>\n            <CheckboxGroup value={values} onChange={setValues} label='Agreement'>\n                <Checkbox value='terms-conditions'>Terms and conditions</Checkbox>\n                <Checkbox value='privacy-policy'>Privacy policy</Checkbox>\n                <Checkbox value='cookie-policy'>Cookie policy</Checkbox>\n            </CheckboxGroup>\n            <code>selected: {JSON.stringify(values)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-description-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-description-demo",
    "raw": "import { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDescriptionDemo() {\n    return (\n        <CheckboxGroup label='Agreement' description='Please read and agree before continuing'>\n            <Checkbox value='terms-conditions'>Terms and conditions</Checkbox>\n            <Checkbox value='privacy-policy'>Privacy policy</Checkbox>\n            <Checkbox value='cookie-policy'>Cookie policy</Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox-group/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox-group/checkbox-group-demo",
    "raw": "import { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDemo() {\n    return (\n        <div className='space-y-4'>\n            <CheckboxGroup label='Basic'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n            <CheckboxGroup isReadOnly label='Readonly'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n            <CheckboxGroup isInvalid label='Invalid'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n            <CheckboxGroup isDisabled label='Disabled'>\n                <Checkbox value='1'>Option 1</Checkbox>\n                <Checkbox value='2'>Option 2</Checkbox>\n            </CheckboxGroup>\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaControlledDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <div className='space-y-2'>\n            <Textarea value={value} onChange={setValue} label='About' />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-demo": {
    "component": "@/components/docs/forms/textarea/textarea-demo",
    "raw": "import { Textarea } from '@/components/ui'\n\nexport default function TextareaDemo() {\n    return (\n        <div className='flex flex-col gap-2 sm:flex-row'>\n            <Textarea label='Basic' />\n            <Textarea label='Readonly' isReadOnly />\n            <Textarea label='Invalid' isInvalid />\n            <Textarea label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-autosize-demo": {
    "component": "@/components/docs/forms/textarea/textarea-autosize-demo",
    "raw": "import { Textarea } from '@/components/ui'\n\nexport default function TextareaAutosizeDemo() {\n    return <Textarea className='min-w-xs' autoSize label='About' />\n}\n"
  },
  "forms/textarea/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea/textarea-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, Form, Textarea } from '@/components/ui'\n\nexport default function TextareaValidationDemo() {\n    const [value, setValue] = useState('')\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <Textarea\n                isRequired\n                validate={(v) => (v.length < 10 ? 'Must be at least 10 characters' : null)}\n                value={value}\n                onChange={setValue}\n                label='About'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-description-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-description-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDescriptionDemo() {\n    return (\n        <Checkbox\n            label='I accept terms and conditions'\n            description='I have read and agree to the terms and conditions'\n        />\n    )\n}\n"
  },
  "forms/checkbox/checkbox-validation-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, Checkbox, Form } from '@/components/ui'\n\nexport default function CheckboxValidationDemo() {\n    const [value, setValue] = useState<boolean>(false)\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <Checkbox isRequired isSelected={value} onChange={setValue}>\n                I accept terms and conditions\n            </Checkbox>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxControlledDemo() {\n    const [selected, setSelection] = useState(false)\n    return (\n        <div className='space-y-2'>\n            <Checkbox isSelected={selected} onChange={setSelection} value='updates'>\n                Accept terms and conditions\n            </Checkbox>\n            <code>{JSON.stringify({ selected })}</code>\n        </div>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-demo",
    "raw": "import { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDemo() {\n    return (\n        <div className='space-y-2'>\n            <Checkbox>Basic</Checkbox>\n            <Checkbox isIndeterminate>Indeterminate</Checkbox>\n            <Checkbox isReadOnly>Readonly</Checkbox>\n            <Checkbox isInvalid>Invalid</Checkbox>\n            <Checkbox isDisabled>Disabled</Checkbox>\n        </div>\n    )\n}\n"
  },
  "forms/form/form-builtin-validation-demo": {
    "component": "@/components/docs/forms/form/form-builtin-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function FormBuiltinValidationDemo() {\n    return (\n        <Form onSubmit={() => {}} className='space-y-4'>\n            <TextField isRequired label='Name' placeholder='Enter your name' />\n            <TextField isRequired label='Email' placeholder='Enter your email' type='email' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/form/form-custom-validation-demo": {
    "component": "@/components/docs/forms/form/form-custom-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function FormCustomValidationDemo() {\n    return (\n        <Form onSubmit={() => {}} className='space-y-4'>\n            <TextField\n                isRequired\n                label='Email'\n                placeholder='Enter your email'\n                type='email'\n                errorMessage={({ validationDetails }) =>\n                    validationDetails.valueMissing ? 'Fill the email, Please! 🥲' : ''\n                }\n            />\n            <TextField\n                isRequired\n                validate={(v) => (v.length < 8 ? 'Must be at least 8 characters' : null)}\n                label='Password'\n                placeholder='Enter your password'\n                type='password'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/form/form-realtime-validation-demo": {
    "component": "@/components/docs/forms/form/form-realtime-validation-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Form, TextField } from '@/components/ui'\n\nexport default function FormRealtimeValidationDemo() {\n    const [password, setPassword] = useState('')\n    const errors = []\n    if (password.length < 8) {\n        errors.push('At least 8 characters')\n    }\n    if ((password.match(/[A-Z]/g) ?? []).length < 2) {\n        errors.push('At least 2 upper case letters')\n    }\n    if ((password.match(/[^a-z]/gi) ?? []).length < 2) {\n        errors.push('At least 2 symbols')\n    }\n\n    return (\n        <Form onSubmit={() => {}}>\n            <TextField\n                isInvalid={!!errors.length}\n                label='Password'\n                placeholder='Enter your password'\n                type='password'\n                errorMessage={errors}\n                value={password}\n                onChange={setPassword}\n            />\n        </Form>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-basic-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-basic-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupBasicDemo() {\n    return (\n        <div className='space-y-4'>\n            <RadioGroup label='Basic'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n            <RadioGroup isReadOnly label='Readonly'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n            <RadioGroup isInvalid label='Invalid'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n            <RadioGroup isDisabled label='Disabled'>\n                <Radio value='1'>Option 1</Radio>\n                <Radio value='2'>Option 2</Radio>\n            </RadioGroup>\n        </div>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-description-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDescriptionDemo() {\n    return (\n        <RadioGroup label='Plan' description='Choose a plan that fits your needs and budget'>\n            <Radio value='bronze'>Bronze</Radio>\n            <Radio value='silver'>Silver</Radio>\n            <Radio value='gold'>Gold</Radio>\n            <Radio value='platinum'>Platinum</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-orientation-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-orientation-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupOrientationDemo() {\n    return (\n        <RadioGroup orientation='horizontal' label='Plan'>\n            <Radio value='bronze'>Bronze</Radio>\n            <Radio value='silver'>Silver</Radio>\n            <Radio value='gold'>Gold</Radio>\n            <Radio value='platinum'>Platinum</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-validation-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, Form, Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = useState<string>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(selected)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <RadioGroup isRequired label='Plan' value={selected} onChange={setSelected}>\n                <Radio value='bronze'>Bronze</Radio>\n                <Radio value='silver'>Silver</Radio>\n                <Radio value='gold'>Gold</Radio>\n                <Radio value='platinum'>Platinum</Radio>\n            </RadioGroup>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = useState('')\n    return (\n        <div className='space-y-4'>\n            <RadioGroup label='Plan' value={selected} onChange={setSelected}>\n                <Radio value='bronze'>Bronze</Radio>\n                <Radio value='silver'>Silver</Radio>\n                <Radio value='gold'>Gold</Radio>\n                <Radio value='platinum'>Platinum</Radio>\n            </RadioGroup>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-item-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-item-description-demo",
    "raw": "import { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupChildrenDescriptionDemo() {\n    return (\n        <RadioGroup label='Plan'>\n            <Radio value='bronze' description='Weekly subscription'>\n                Bronze\n            </Radio>\n            <Radio value='silver' description='Monthly subscription'>\n                Silver\n            </Radio>\n            <Radio value='gold' description='Yearly subscription'>\n                Gold\n            </Radio>\n            <Radio value='platinum' description='Lifetime subscription'>\n                Platinum\n            </Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/number-field/number-field-demo": {
    "component": "@/components/docs/forms/number-field/number-field-demo",
    "raw": "import { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDemo() {\n    return (\n        <div className='flex flex-col gap-2 sm:flex-row'>\n            <NumberField label='Basic' />\n            <NumberField label='Readonly' isReadOnly />\n            <NumberField label='Invalid' isInvalid />\n            <NumberField label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "forms/number-field/number-field-controlled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldControlledDemo() {\n    const [value, setValue] = useState<number>(100)\n    return (\n        <div className='space-y-2'>\n            <NumberField label='Size' value={value} onChange={setValue} />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/number-field/number-field-validation-demo": {
    "component": "@/components/docs/forms/number-field/number-field-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, Form, NumberField } from '@/components/ui'\n\nexport default function NumberFieldValidationDemo() {\n    const [value, setValue] = useState<number>()\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <NumberField\n                isRequired\n                validate={(v) => (v < 100 ? 'Value must be greater than 100' : null)}\n                label='Size'\n                value={value}\n                onChange={setValue}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/otp/otp-controlled-demo": {
    "component": "@/components/docs/forms/otp/otp-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpControlledDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <div className='space-y-2'>\n            <OTP maxLength={6} value={value} onChange={setValue}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot key={index} index={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n\n            <div className='text-center text-sm'>\n                {value === '' ? <>Enter your one-time password.</> : <>You entered: {value}</>}\n            </div>\n        </div>\n    )\n}\n"
  },
  "forms/otp/otp-separator-demo": {
    "component": "@/components/docs/forms/otp/otp-separator-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpSeparatorDemo() {\n    return (\n        <OTP maxLength={6}>\n            <OTP.Group>\n                <OTP.Slot index={0} />\n                <OTP.Slot index={1} />\n                <OTP.Slot index={2} />\n            </OTP.Group>\n            <OTP.Separator />\n            <OTP.Group>\n                <OTP.Slot index={3} />\n                <OTP.Slot index={4} />\n                <OTP.Slot index={5} />\n            </OTP.Group>\n        </OTP>\n    )\n}\n"
  },
  "forms/otp/otp-demo": {
    "component": "@/components/docs/forms/otp/otp-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpDemo() {\n    return (\n        <div>\n            <OTP maxLength={6}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot key={index} index={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n        </div>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-demo",
    "raw": "'use client'\n\nimport { SelectionBox } from '@/components/ui'\n\nexport default function SelectionBoxDemo() {\n    return (\n        <div className='space-y-4'>\n            <SelectionBox label='Basic'>\n                <SelectionBox.Item value='1'>Option 1</SelectionBox.Item>\n                <SelectionBox.Item value='2'>Option 2</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox isReadOnly label='Readonly'>\n                <SelectionBox.Item value='1'>Option 1</SelectionBox.Item>\n                <SelectionBox.Item value='2'>Option 2</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox isInvalid label='Invalid'>\n                <SelectionBox.Item value='1'>Option 1</SelectionBox.Item>\n                <SelectionBox.Item value='2'>Option 2</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox isDisabled label='Disabled'>\n                <SelectionBox.Item value='1'>Option 1</SelectionBox.Item>\n                <SelectionBox.Item value='2'>Option 2</SelectionBox.Item>\n            </SelectionBox>\n        </div>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-controlled-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-controlled-demo",
    "raw": "'use client'\n\nimport { IconBrandArch, IconBrandDebian, IconBrandFedora, IconBrandUbuntu } from 'hq-icons'\nimport { useState } from 'react'\n\nimport { SelectionBox } from '@/components/ui'\n\nexport default function SelectionBoxControlledDemo() {\n    const [singleValue, setSingleValue] = useState<string>('')\n    const [multiValue, setMultiValue] = useState<string[]>([])\n    return (\n        <div className='flex flex-col gap-4'>\n            <SelectionBox\n                orientation='horizontal'\n                selectionMode='single'\n                label='Linux Distro'\n                value={singleValue}\n                onChange={setSingleValue}\n            >\n                <SelectionBox.Item prefix={<IconBrandUbuntu />} value='ubuntu'>\n                    Ubuntu\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandDebian />} value='debian'>\n                    Debian\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandFedora />} value='fedora'>\n                    Fedora\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandArch />} value='arch'>\n                    Arch\n                </SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox\n                orientation='horizontal'\n                selectionMode='multiple'\n                label='Linux Distro'\n                value={multiValue}\n                onChange={setMultiValue}\n            >\n                <SelectionBox.Item prefix={<IconBrandUbuntu />} value='ubuntu'>\n                    Ubuntu\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandDebian />} value='debian'>\n                    Debian\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandFedora />} value='fedora'>\n                    Fedora\n                </SelectionBox.Item>\n                <SelectionBox.Item prefix={<IconBrandArch />} value='arch'>\n                    Arch\n                </SelectionBox.Item>\n            </SelectionBox>\n            <code>single_value: {JSON.stringify(singleValue)}</code>\n            <code>multi_value: {JSON.stringify(multiValue)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-orientation-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-orientation-demo",
    "raw": "import { SelectionBox } from '@/components/ui'\n\nexport default function SelectionBoxDemo() {\n    return (\n        <div className='space-y-6'>\n            <SelectionBox orientation='horizontal' label='Plan'>\n                <SelectionBox.Item value='bronze'>Bronze</SelectionBox.Item>\n                <SelectionBox.Item value='silver'>Silver</SelectionBox.Item>\n                <SelectionBox.Item value='gold'>Gold</SelectionBox.Item>\n                <SelectionBox.Item value='platinum'>Platinum</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox orientation='vertical' label='Plan'>\n                <SelectionBox.Item value='bronze'>Bronze</SelectionBox.Item>\n                <SelectionBox.Item value='silver'>Silver</SelectionBox.Item>\n                <SelectionBox.Item value='gold'>Gold</SelectionBox.Item>\n                <SelectionBox.Item value='platinum'>Platinum</SelectionBox.Item>\n            </SelectionBox>\n        </div>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-mode-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-mode-demo",
    "raw": "import { SelectionBox } from '@/components/ui'\n\nexport default function CheckboxGroupDescriptionDemo() {\n    return (\n        <div className='space-y-6'>\n            <SelectionBox selectionMode='single' label='Plan'>\n                <SelectionBox.Item value='bronze'>Bronze</SelectionBox.Item>\n                <SelectionBox.Item value='silver'>Silver</SelectionBox.Item>\n                <SelectionBox.Item value='gold'>Gold</SelectionBox.Item>\n                <SelectionBox.Item value='platinum'>Platinum</SelectionBox.Item>\n            </SelectionBox>\n            <SelectionBox selectionMode='multiple' label='Plan'>\n                <SelectionBox.Item value='bronze'>Bronze</SelectionBox.Item>\n                <SelectionBox.Item value='silver'>Silver</SelectionBox.Item>\n                <SelectionBox.Item value='gold'>Gold</SelectionBox.Item>\n                <SelectionBox.Item value='platinum'>Platinum</SelectionBox.Item>\n            </SelectionBox>\n        </div>\n    )\n}\n"
  },
  "forms/selection-box/selection-box-prefix-demo": {
    "component": "@/components/docs/forms/selection-box/selection-box-prefix-demo",
    "raw": "import { IconBrandArch, IconBrandDebian, IconBrandFedora, IconBrandUbuntu } from 'hq-icons'\n\nimport { SelectionBox } from '@/components/ui'\n\nexport default function SelectionBoxPrefixDemo() {\n    return (\n        <SelectionBox selectionMode='multiple' label='Linux Distro'>\n            <SelectionBox.Item prefix={<IconBrandUbuntu />} value='ubuntu'>\n                Ubuntu\n            </SelectionBox.Item>\n            <SelectionBox.Item prefix={<IconBrandDebian />} value='debian'>\n                Debian\n            </SelectionBox.Item>\n            <SelectionBox.Item prefix={<IconBrandFedora />} value='fedora'>\n                Fedora\n            </SelectionBox.Item>\n            <SelectionBox.Item prefix={<IconBrandArch />} value='arch'>\n                Arch\n            </SelectionBox.Item>\n        </SelectionBox>\n    )\n}\n"
  },
  "forms/text-field/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldControlledDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <div className='space-y-2'>\n            <TextField value={value} onChange={setValue} label='Name' />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field/text-field-prefix-suffix-demo",
    "raw": "import { IconBrandTiktok } from 'hq-icons'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldPrefixSuffixDemo() {\n    return (\n        <div className='space-y-2'>\n            <TextField label='Tiktok' suffix={<IconBrandTiktok />} />\n            <TextField label='Sites' prefix='https://' suffix='.com' />\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-demo": {
    "component": "@/components/docs/forms/text-field/text-field-demo",
    "raw": "import { TextField } from '@/components/ui'\n\nexport default function TextFieldDemo() {\n    return (\n        <div className='flex flex-col gap-2 sm:flex-row'>\n            <TextField label='Basic' />\n            <TextField isPending label='Pending' />\n            <TextField label='Readonly' isReadOnly />\n            <TextField label='Invalid' isInvalid />\n            <TextField label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field/text-field-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function TextFieldValidationDemo() {\n    const [value, setValue] = useState<string>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <TextField\n                isRequired\n                validate={(v) => (v.length < 3 ? 'Must be at least 3 characters' : null)}\n                label='Name'\n                value={value}\n                onChange={setValue}\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/text-field/text-field-suffix-button-demo": {
    "component": "@/components/docs/forms/text-field/text-field-suffix-button-demo",
    "raw": "'use client'\n\nimport { IconUserPlus } from 'hq-icons'\nimport { useState } from 'react'\n\nimport { Button, Modal, TextField } from '@/components/ui'\n\nexport default function TextFieldSuffixButtonDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    return (\n        <>\n            <Modal.Content isOpen={open} onOpenChange={() => setOpen(false)}>\n                <Modal.Header>\n                    <Modal.Title>New User</Modal.Title>\n                    <Modal.Description>Create a new user account</Modal.Description>\n                </Modal.Header>\n                <Modal.Body className='space-y-4'>\n                    <TextField label='Name' placeholder='Name' />\n                    <TextField label='Email' placeholder='Email' type='email' />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button slot='close'>Add</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <TextField\n                label='Name'\n                suffix={\n                    <Button aria-label='Add New User' onPress={() => setOpen(true)} icon variant='ghost'>\n                        <IconUserPlus />\n                    </Button>\n                }\n            />\n        </>\n    )\n}\n"
  },
  "forms/text-field/text-field-visibility-demo": {
    "component": "@/components/docs/forms/text-field/text-field-visibility-demo",
    "raw": "import { TextField } from '@/components/ui'\n\nexport default function TextFieldVisibilityDemo() {\n    return <TextField type='password' label='Password' />\n}\n"
  },
  "forms/rich-text-field/rich-text-field-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-demo",
    "raw": "import { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldDemo() {\n    return <RichTextField label='Content' />\n}\n"
  },
  "forms/rich-text-field/rich-text-field-controlled-html-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-controlled-html-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldControlledMarkdownDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <>\n            <RichTextField returnType='html' value={value} onChange={setValue} label='Content' className='mb-2' />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/rich-text-field/rich-text-field-controlled-markdown-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-controlled-markdown-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldControlledMarkdownDemo() {\n    const [value, setValue] = useState('')\n    return (\n        <>\n            <RichTextField returnType='markdown' value={value} onChange={setValue} label='Content' className='mb-2' />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/rich-text-field/rich-text-field-disabled-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-disabled-demo",
    "raw": "import { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldDemo() {\n    return <RichTextField isDisabled label='Content (Disabled)' />\n}\n"
  },
  "surfaces/card/card-action-demo": {
    "component": "@/components/docs/surfaces/card/card-action-demo",
    "raw": "import { IconUserPlus } from 'hq-icons'\n\nimport { Button, Card, SearchField } from '@/components/ui'\n\nexport default function CardActionDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n                <Card.Action>\n                    <SearchField placeholder='Search users' />\n                    <Button>\n                        <IconUserPlus /> New User\n                    </Button>\n                </Card.Action>\n            </Card.Header>\n        </Card>\n    )\n}\n"
  },
  "surfaces/card/card-demo": {
    "component": "@/components/docs/surfaces/card/card-demo",
    "raw": "import { Button, Card } from '@/components/ui'\n\nexport default function CardDemo() {\n    return (\n        <Card className='max-w-lg'>\n            <Card.Header>\n                <Card.Title>Monthly Report</Card.Title>\n                <Card.Description>Financial summary for June</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                The monthly financial report shows a 15% increase in revenue compared to last month.\n            </Card.Content>\n            <Card.Footer>\n                <Button>View Details</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/card/card-table-demo": {
    "component": "@/components/docs/surfaces/card/card-table-demo",
    "raw": "import { IconEllipsisVertical, IconEye, IconPencil, IconTrash } from 'hq-icons'\n\nimport { Card, Menu, Pagination, Table } from '@/components/ui'\n\nexport default function CardTableDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Table aria-label='Users'>\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column isRowHeader>Name</Table.Column>\n                        <Table.Column>Gender</Table.Column>\n                        <Table.Column>Age</Table.Column>\n                        <Table.Column>Occupation</Table.Column>\n                        <Table.Column />\n                    </Table.Header>\n                    <Table.Body items={users}>\n                        {(item) => (\n                            <Table.Row id={item.id}>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.name}</Table.Cell>\n                                <Table.Cell>{item.gender}</Table.Cell>\n                                <Table.Cell>{item.age}</Table.Cell>\n                                <Table.Cell>{item.occupation}</Table.Cell>\n                                <Table.Cell className='flex justify-end'>\n                                    <Menu>\n                                        <Menu.Trigger>\n                                            <IconEllipsisVertical />\n                                        </Menu.Trigger>\n                                        <Menu.Content placement='left top'>\n                                            <Menu.Item>\n                                                <IconEye />\n                                                <Menu.Label>View</Menu.Label>\n                                            </Menu.Item>\n                                            <Menu.Item>\n                                                <IconPencil />\n                                                <Menu.Label>Edit</Menu.Label>\n                                            </Menu.Item>\n                                            <Menu.Separator />\n                                            <Menu.Item isDanger>\n                                                <IconTrash />\n                                                <Menu.Label>Delete</Menu.Label>\n                                            </Menu.Item>\n                                        </Menu.Content>\n                                    </Menu>\n                                </Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n            <Card.Footer className='flex-col justify-between gap-2 md:flex-row'>\n                <div className='text-muted-fg text-sm'>Showing 1 to 10 of 50 entries</div>\n                <Pagination>\n                    <Pagination.Item slot='first' href='#first' />\n                    <Pagination.Item slot='previous' href='#previous' />\n                    <Pagination.Label className='lg:hidden' current={2} total={5} />\n                    <Pagination.Pages className='hidden lg:flex'>\n                        <Pagination.Item href='#1'>1</Pagination.Item>\n                        <Pagination.Item isCurrent href='#2'>\n                            2\n                        </Pagination.Item>\n                        <Pagination.Item href='#3'>3</Pagination.Item>\n                        <Pagination.Item slot='ellipsis' />\n                        <Pagination.Item href='#5'>5</Pagination.Item>\n                    </Pagination.Pages>\n                    <Pagination.Item slot='next' href='#next' />\n                    <Pagination.Item slot='last' href='#last' />\n                </Pagination>\n            </Card.Footer>\n        </Card>\n    )\n}\n\nconst users = [\n    {\n        id: 1,\n        name: 'John Doe',\n        gender: 'Male',\n        age: 30,\n        occupation: 'Software Engineer'\n    },\n    {\n        id: 2,\n        name: 'Jane Smith',\n        gender: 'Female',\n        age: 25,\n        occupation: 'Marketing Manager'\n    },\n    {\n        id: 3,\n        name: 'Bob Johnson',\n        gender: 'Male',\n        age: 40,\n        occupation: 'Doctor'\n    },\n    {\n        id: 4,\n        name: 'Emily Chen',\n        gender: 'Female',\n        age: 28,\n        occupation: 'Teacher'\n    },\n    {\n        id: 5,\n        name: 'Michael Brown',\n        gender: 'Male',\n        age: 35,\n        occupation: 'Lawyer'\n    },\n    {\n        id: 6,\n        name: 'Sarah Lee',\n        gender: 'Female',\n        age: 32,\n        occupation: 'Designer'\n    },\n    {\n        id: 7,\n        name: 'Kevin White',\n        gender: 'Male',\n        age: 45,\n        occupation: 'CEO'\n    },\n    {\n        id: 8,\n        name: 'Lisa Nguyen',\n        gender: 'Female',\n        age: 29,\n        occupation: 'Engineer'\n    },\n    {\n        id: 9,\n        name: 'David Kim',\n        gender: 'Male',\n        age: 38,\n        occupation: 'Consultant'\n    },\n    {\n        id: 10,\n        name: 'Hannah Patel',\n        gender: 'Female',\n        age: 26,\n        occupation: 'Writer'\n    }\n]\n"
  },
  "surfaces/card/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card/card-login-form-demo",
    "raw": "import { Button, Card, Checkbox, Link, TextField } from '@/components/ui'\n\nexport default function CardLoginFormDemo() {\n    return (\n        <Card className='mx-auto max-w-md'>\n            <Card.Header>\n                <Card.Title>Login</Card.Title>\n                <Card.Description>Don&apos;t loose the level, just keep on going.</Card.Description>\n            </Card.Header>\n            <Card.Content className='space-y-6'>\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <TextField isRequired label='Password' type='password' placeholder='Enter your password' />\n                <div className='flex items-center justify-between'>\n                    <Checkbox>Remember me</Checkbox>\n                    <Link href='#'>Forgot password?</Link>\n                </div>\n            </Card.Content>\n            <Card.Footer>\n                <Button className='w-full'>Login</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/spoiler/spoiler-initial-demo": {
    "component": "@/components/docs/surfaces/spoiler/spoiler-initial-demo",
    "raw": "import Image from 'next/image'\n\nimport { Spoiler } from '@/components/ui'\n\nexport default function SpoilerInitialDemo() {\n    return (\n        <Spoiler initialHeight={128} initialOpacity={0.5} showMoreText='Reveal' showLessText='Hide'>\n            <Image\n                className='rounded-lg'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </Spoiler>\n    )\n}\n"
  },
  "surfaces/spoiler/spoiler-demo": {
    "component": "@/components/docs/surfaces/spoiler/spoiler-demo",
    "raw": "import Image from 'next/image'\n\nimport { Spoiler } from '@/components/ui'\n\nexport default function SpoilerDemo() {\n    return (\n        <Spoiler>\n            <Image\n                className='rounded-lg'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </Spoiler>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-heading-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-heading-demo",
    "raw": "import { DL, Header } from '@/components/ui'\n\nexport default function DescriptionListHeadingDemo() {\n    return (\n        <div>\n            <Header title='PC Gaming' description='PC Gaming' />\n            <DL>\n                <DL.T>Processor</DL.T>\n                <DL.D>Intel Core i7-12700K</DL.D>\n                <DL.T>Memory</DL.T>\n                <DL.D>32GB DDR5 4800MHz</DL.D>\n                <DL.T>Storage</DL.T>\n                <DL.D>1TB SSD M.2 NVMe</DL.D>\n                <DL.T>Graphics Card</DL.T>\n                <DL.D>RTX 4090 24GB</DL.D>\n            </DL>\n        </div>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-demo",
    "raw": "import { DL } from '@/components/ui/description-list'\n\nexport default function DescriptionListDemo() {\n    return (\n        <DL>\n            <DL.T>Product Name</DL.T>\n            <DL.D>PC Gaming Mid End</DL.D>\n            <DL.T>Processor</DL.T>\n            <DL.D>Intel Core i7-12700K</DL.D>\n            <DL.T>Memory</DL.T>\n            <DL.D>32GB DDR5 4800MHz</DL.D>\n            <DL.T>Storage</DL.T>\n            <DL.D>1TB SSD M.2 NVMe</DL.D>\n            <DL.T>Graphics Card</DL.T>\n            <DL.D>RTX 4090 24GB</DL.D>\n        </DL>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-card-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-card-demo",
    "raw": "import { Button, Card, DL } from '@/components/ui'\n\nexport default function DescriptionListCardDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>PC Gaming</Card.Title>\n                <Card.Description>Here are some features of this product.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <DL>\n                    <DL.T>Processor</DL.T>\n                    <DL.D>Intel Core i7-12700K</DL.D>\n                    <DL.T>Memory</DL.T>\n                    <DL.D>32GB DDR5 4800MHz</DL.D>\n                    <DL.T>Storage</DL.T>\n                    <DL.D>1TB SSD M.2 NVMe</DL.D>\n                    <DL.T>Graphics Card</DL.T>\n                    <DL.D>RTX 4090 24GB</DL.D>\n                </DL>\n            </Card.Content>\n            <Card.Footer>\n                <Button>Buy Now</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/code/code-language-demo": {
    "component": "@/components/docs/surfaces/code/code-language-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = `<?php\n\nuse Illuminate\\\\Support\\\\Facades\\\\Route;\nuse Inertia\\\\Inertia;\n\nRoute::get('/', function () {\n    return Inertia::render('welcome');\n})->name('home');\n\nRoute::middleware(['auth', 'verified'])->group(function () {\n    Route::get('dashboard', function () {\n        return Inertia::render('dashboard');\n    })->name('dashboard');\n});`\n\nexport default function CodeLanguageDemo() {\n    return <Code code={code} filename='routes/web.php' lang='php' />\n}\n"
  },
  "surfaces/code/code-highlight-demo": {
    "component": "@/components/docs/surfaces/code/code-highlight-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = `import { Provider } from './providers'\n \nconst appElement = (\n  <Providers>\n    <App {...props} />\n  </Providers>\n)`\n\nexport default function CodeHighlightDemo() {\n    return <Code code={code} highlight={['1', '4-6']} />\n}\n"
  },
  "surfaces/code/code-block-demo": {
    "component": "@/components/docs/surfaces/code/code-block-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = `export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )`\n\nexport default function CodeBlockDemo() {\n    return <Code code={code} />\n}\n"
  },
  "surfaces/code/code-theme-demo": {
    "component": "@/components/docs/surfaces/code/code-theme-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Key } from 'react-aria-components'\nimport type { Theme } from 'rehype-pretty-code'\n\nimport { Code, Select } from '@/components/ui'\n\nconst themes = [\n    'andromeeda',\n    'aurora-x',\n    'ayu-dark',\n    'catppuccin-frappe',\n    'catppuccin-latte',\n    'catppuccin-macchiato',\n    'catppuccin-mocha',\n    'dark-plus',\n    'dracula',\n    'dracula-soft',\n    'everforest-dark',\n    'everforest-light',\n    'github-dark',\n    'github-dark-default',\n    'github-dark-dimmed',\n    'github-dark-high-contrast',\n    'github-light',\n    'github-light-default',\n    'github-light-high-contrast',\n    'gruvbox-dark-hard',\n    'gruvbox-dark-medium',\n    'gruvbox-dark-soft',\n    'gruvbox-light-hard',\n    'gruvbox-light-medium',\n    'gruvbox-light-soft',\n    'houston',\n    'kanagawa-dragon',\n    'kanagawa-lotus',\n    'kanagawa-wave',\n    'laserwave',\n    'light-plus',\n    'material-theme',\n    'material-theme-darker',\n    'material-theme-lighter',\n    'material-theme-ocean',\n    'material-theme-palenight',\n    'min-dark',\n    'min-light',\n    'monokai',\n    'night-owl',\n    'nord',\n    'one-dark-pro',\n    'one-light',\n    'plastic',\n    'poimandres',\n    'red',\n    'rose-pine',\n    'rose-pine-dawn',\n    'rose-pine-moon',\n    'slack-dark',\n    'slack-ochin',\n    'snazzy-light',\n    'solarized-dark',\n    'solarized-light',\n    'synthwave-84',\n    'tokyo-night',\n    'vesper',\n    'vitesse-black',\n    'vitesse-dark',\n    'vitesse-light'\n].map((t) => ({ id: t, name: t }))\n\nconst code = `export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )`\n\nexport default function CodeThemeDemo() {\n    const [theme, setTheme] = useState<Key | null>('dracula')\n    return (\n        <div className='space-y-4'>\n            <Select label='Theme' searchable selectedKey={theme} onSelectionChange={setTheme} items={themes}>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Code code={code} theme={theme as Theme} />\n        </div>\n    )\n}\n"
  },
  "surfaces/code/code-filename-demo": {
    "component": "@/components/docs/surfaces/code/code-filename-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = `export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )`\n\nexport default function CodeFilenameDemo() {\n    return <Code code={code} filename='src/app/layout.tsx' />\n}\n"
  },
  "surfaces/code/code-snippet-demo": {
    "component": "@/components/docs/surfaces/code/code-snippet-demo",
    "raw": "import { Code } from '@/components/ui'\n\nconst code = 'npx hq-kit@latest init'\n\nexport default function CodeSnippetDemo() {\n    return <Code code={code} lang='bash' />\n}\n"
  },
  "surfaces/separator/separator-demo": {
    "component": "@/components/docs/surfaces/separator/separator-demo",
    "raw": "import { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return (\n        <div className='flex flex-col items-center gap-2'>\n            <div>Content Above</div>\n            <Separator />\n            <div>Content Below</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/separator/separator-button-demo": {
    "component": "@/components/docs/surfaces/separator/separator-button-demo",
    "raw": "import { Button, Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return (\n        <div className='flex flex-col items-center gap-6'>\n            <div>Content Above</div>\n            <Separator>\n                <Button shape='circle' variant='outline'>\n                    Show More\n                </Button>\n            </Separator>\n            <div>Content Below</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/separator/separator-text-demo": {
    "component": "@/components/docs/surfaces/separator/separator-text-demo",
    "raw": "import { Separator } from '@/components/ui'\n\nexport default function SeparatorTextDemo() {\n    return (\n        <div className='flex flex-col items-center gap-2'>\n            <div>Content Above</div>\n            <Separator>OR</Separator>\n            <div>Content Below</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/separator/separator-orientation-demo": {
    "component": "@/components/docs/surfaces/separator/separator-orientation-demo",
    "raw": "import { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return (\n        <div className='flex h-24 items-center gap-2'>\n            <div>Content Left</div>\n            <Separator orientation='vertical'>OR</Separator>\n            <div>Content Right</div>\n        </div>\n    )\n}\n"
  },
  "surfaces/header/header-basic-demo": {
    "component": "@/components/docs/surfaces/header/header-basic-demo",
    "raw": "import { Header } from '@/components/ui'\n\nexport default function HeaderBasicDemo() {\n    return <Header title='Users' description='Manage users, groups, and roles.' />\n}\n"
  },
  "surfaces/header/header-action-demo": {
    "component": "@/components/docs/surfaces/header/header-action-demo",
    "raw": "import { Header } from '@/components/ui'\nimport { Button } from '@/components/ui/button'\nimport { SearchField } from '@/components/ui/search-field'\nimport { IconUserPlus } from 'hq-icons'\n\nexport default function HeaderActionDemo() {\n    return (\n        <Header title='Users' description='Manage users, groups, and roles.'>\n            <Header.Action>\n                <SearchField placeholder='Search users' />\n                <Button>\n                    <IconUserPlus /> New User\n                </Button>\n            </Header.Action>\n        </Header>\n    )\n}\n"
  },
  "pickers/select/select-with-avatar-demo": {
    "component": "@/components/docs/pickers/select/select-with-avatar-demo",
    "raw": "import { Avatar, Select } from '@/components/ui'\n\nexport default function SelectAvatarDemo() {\n    return (\n        <Select label='User' items={users}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/select/select-section-demo": {
    "component": "@/components/docs/pickers/select/select-section-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function SelectSectionDemo() {\n    return (\n        <Select label='Linux Distro' items={items}>\n            {(item) => (\n                <Select.Section title={item.name} items={item.distros}>\n                    {(distro) => <Select.Item id={distro.id}>{distro.name}</Select.Item>}\n                </Select.Section>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-demo": {
    "component": "@/components/docs/pickers/select/select-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectDemo() {\n    return (\n        <div className='grid gap-2 sm:grid-cols-3'>\n            <Select label='Default' items={items}>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Select label='Invalid' items={items} isInvalid>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Select label='Disabled' items={items} isDisabled>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n        </div>\n    )\n}\n"
  },
  "pickers/select/select-controlled-demo": {
    "component": "@/components/docs/pickers/select/select-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectControlledDemo() {\n    const [selected, setSelected] = useState<Key | null>('')\n    return (\n        <div className='space-y-6'>\n            <Select selectedKey={selected} onSelectionChange={setSelected} label='Linux Distro' items={items}>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "pickers/select/select-collections-demo": {
    "component": "@/components/docs/pickers/select/select-collections-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectDemo() {\n    return (\n        <Select label='Linux Distro' items={items}>\n            {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-with-icon-demo": {
    "component": "@/components/docs/pickers/select/select-with-icon-demo",
    "raw": "import { IconBrandArch, IconBrandDebian, IconBrandFedora, IconBrandRedhat, IconBrandUbuntu } from 'hq-icons'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectWithIconDemo() {\n    return (\n        <Select label='Linux Distro'>\n            <Select.Item id='ubuntu' textValue='Ubuntu'>\n                <IconBrandUbuntu />\n                Ubuntu\n            </Select.Item>\n            <Select.Item id='debian' textValue='Debian'>\n                <IconBrandDebian />\n                Debian\n            </Select.Item>\n            <Select.Item id='fedora' textValue='Fedora'>\n                <IconBrandFedora />\n                Fedora\n            </Select.Item>\n            <Select.Item id='arch' textValue='Arch'>\n                <IconBrandArch />\n                Arch\n            </Select.Item>\n            <Select.Item id='red-hat' textValue='RedHat'>\n                <IconBrandRedhat />\n                RedHat\n            </Select.Item>\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-validation-demo": {
    "component": "@/components/docs/pickers/select/select-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Button, Form, Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function SelectValidationDemo() {\n    const [value, setValue] = useState<Key | null>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form onSubmit={onSubmit} className='space-y-4'>\n            <Select label='Linux Distro' items={items} selectedKey={value} onSelectionChange={setValue} isRequired>\n                {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n            </Select>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/select/select-item-details-demo": {
    "component": "@/components/docs/pickers/select/select-item-details-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function SelectItemDetailsDemo() {\n    return (\n        <Select label='Javascript Frameworks' items={items}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <Select.Details label={item.name} description={item.description} />\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-disabled-demo": {
    "component": "@/components/docs/pickers/select/select-disabled-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', available: true },\n    { id: 2, name: 'Debian', available: true },\n    { id: 3, name: 'Fedora', available: false },\n    { id: 4, name: 'Arch', available: false },\n    { id: 5, name: 'CentOS', available: false },\n    { id: 6, name: 'Gentoo', available: true },\n    { id: 7, name: 'OpenSuse', available: false },\n    { id: 8, name: 'Redhat', available: false },\n    { id: 9, name: 'FreeBSD', available: false },\n    { id: 10, name: 'NetBSD', available: true }\n]\n\nexport default function SelectDisabledItemDemo() {\n    return (\n        <Select label='Linux Distro' items={items}>\n            {(item) => (\n                <Select.Item id={item.id} isDisabled={!item.available}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-searchable-demo": {
    "component": "@/components/docs/pickers/select/select-searchable-demo",
    "raw": "import { Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function AutocompleteDemo() {\n    return (\n        <Select label='Default' items={items} searchable>\n            {(item) => <Select.Item id={item.id}>{item.name}</Select.Item>}\n        </Select>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-controlled-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { MultiSelect } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function MultiSelectDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([2, 4]))\n    return (\n        <div className='space-y-6'>\n            <MultiSelect label='Linux Distro' selectedKeys={selected} onSelectionChange={setSelected} items={items}>\n                {(item) => {\n                    return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <code>selected: {JSON.stringify([...selected])}</code>\n        </div>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-validation-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Button, Form, MultiSelect } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function MultiSelectDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([]))\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(Array.from(selected))\n    }\n    return (\n        <Form className='space-y-4' onSubmit={onSubmit}>\n            <MultiSelect\n                errorMessage={Array.from(selected).length < 2 ? 'Select at least 2 distros' : undefined}\n                label='Linux Distro'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => {\n                    return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-demo",
    "raw": "'use client'\n\nimport { MultiSelect } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function MultiSelectDemo() {\n    return (\n        <div className='grid gap-2 sm:grid-cols-3'>\n            <MultiSelect label='Default' items={items}>\n                {(item) => {\n                    return <MultiSelect.Item>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <MultiSelect label='Invalid' items={items} isInvalid>\n                {(item) => {\n                    return <MultiSelect.Item>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n            <MultiSelect label='Disabled' items={items} isDisabled>\n                {(item) => {\n                    return <MultiSelect.Item>{item.name}</MultiSelect.Item>\n                }}\n            </MultiSelect>\n        </div>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-controlled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-controlled-demo",
    "raw": "'use client'\n\nimport { IconSquareCheckBig, IconTextCursorInput } from 'hq-icons'\nimport { useState } from 'react'\nimport type { Key, Selection } from 'react-aria-components'\n\nimport { ComboBox, Toggle } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ComboBoxControlledDemo() {\n    const [mode, setMode] = useState<Selection>(new Set(['selection']))\n    return (\n        <div className='space-y-4'>\n            <Toggle.Group selectionMode='single' selectedKeys={mode} onSelectionChange={setMode}>\n                <Toggle id='selection'>\n                    <IconSquareCheckBig />\n                    Selection\n                </Toggle>\n                <Toggle id='input'>\n                    <IconTextCursorInput />\n                    Input\n                </Toggle>\n            </Toggle.Group>\n            {Array.from(mode).includes('selection') ? <ComboBoxControlledSelected /> : <ComboBoxControlledInput />}\n        </div>\n    )\n}\n\nconst ComboBoxControlledInput = () => {\n    const [value, setValue] = useState<string>('')\n    return (\n        <div className='grid space-y-4'>\n            <ComboBox label='Linux Distro' inputValue={value} onInputChange={setValue} items={items}>\n                {(item) => (\n                    <ComboBox.Item id={item.id} textValue={item.name}>\n                        {item.name}\n                    </ComboBox.Item>\n                )}\n            </ComboBox>\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n\nconst ComboBoxControlledSelected = () => {\n    const [selected, setSelected] = useState<Key | null>(null)\n    return (\n        <div className='grid space-y-4'>\n            <ComboBox label='Linux Distro' selectedKey={selected} onSelectionChange={setSelected} items={items}>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-validation-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Button, ComboBox, Form } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function ComboBoxValidationDemo() {\n    const [value, setValue] = useState<Key | null>('')\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form onSubmit={onSubmit} className='space-y-4'>\n            <ComboBox label='Linux Distro' items={items} selectedKey={value} onSelectionChange={setValue} isRequired>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-demo",
    "raw": "import { ComboBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'Redhat' }\n]\n\nexport default function ComboBoxDemo() {\n    return (\n        <div className='grid gap-2 sm:grid-cols-4'>\n            <ComboBox label='Default' items={items}>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <ComboBox label='Readonly' items={items} isReadOnly>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <ComboBox label='Invalid' items={items} isInvalid>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n            <ComboBox label='Disabled' items={items} isDisabled>\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n        </div>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-section-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-section-demo",
    "raw": "import { ComboBox } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function ComboBoxSectionDemo() {\n    return (\n        <ComboBox label='Linux Distro' items={items}>\n            {(item) => (\n                <ComboBox.Section title={item.name} items={item.distros}>\n                    {(distro) => <ComboBox.Item id={distro.id}>{distro.name}</ComboBox.Item>}\n                </ComboBox.Section>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-disabled-demo",
    "raw": "import { ComboBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', available: true },\n    { id: 2, name: 'Debian', available: true },\n    { id: 3, name: 'Fedora', available: false },\n    { id: 4, name: 'Arch', available: false },\n    { id: 5, name: 'CentOS', available: false },\n    { id: 6, name: 'Gentoo', available: true },\n    { id: 7, name: 'OpenSuse', available: false },\n    { id: 8, name: 'Redhat', available: false },\n    { id: 9, name: 'FreeBSD', available: false },\n    { id: 10, name: 'NetBSD', available: true }\n]\n\nexport default function ComboBoxDisabledDemo() {\n    return (\n        <ComboBox label='Linux Distro' items={items}>\n            {(item) => (\n                <ComboBox.Item id={item.id} isDisabled={!item.available}>\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-avatar-demo",
    "raw": "import { Avatar, ComboBox } from '@/components/ui'\n\nexport default function ComboBoxAvatarDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users} isRequired>\n            {(item) => (\n                <ComboBox.Item id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/combo-box/combo-box-async-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-async-demo",
    "raw": "'use client'\n\nimport { IconSearch } from 'hq-icons'\nimport { useAsyncList } from 'react-stately'\n\nimport { ComboBox } from '@/components/ui'\n\nexport default function ComboBoxAsyncDemo() {\n    const list = useAsyncList<{ title: string }>({\n        async load({ signal, filterText }) {\n            const res = await fetch(`https://dummyjson.com/posts/search?q=${filterText}`, {\n                signal\n            }).then((r) => r.json())\n            return {\n                items: res.posts\n            }\n        }\n    })\n    return (\n        <ComboBox\n            items={list.items}\n            onInputChange={list.setFilterText}\n            inputValue={list.filterText}\n            isPending={list.isLoading}\n            prefix={<IconSearch />}\n        >\n            {(item) => (\n                <ComboBox.Item key={item.title} id={item.title}>\n                    {item.title}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "colors/color-field/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field/color-field-with-prefix-demo",
    "raw": "'use client'\n\nimport { IconPalette, IconSwatchBook } from 'hq-icons'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldWithPrefixSuffixDemo() {\n    return (\n        <div className='space-y-4'>\n            <ColorField label='Color' prefix={<IconSwatchBook />} placeholder='#FAFAFA' />\n            <ColorField label='Color' suffix={<IconSwatchBook />} placeholder='#FAFAFA' />\n            <ColorField label='Color' prefix={<IconSwatchBook />} suffix={<IconPalette />} placeholder='#FAFAFA' />\n        </div>\n    )\n}\n"
  },
  "colors/color-field/color-field-demo": {
    "component": "@/components/docs/colors/color-field/color-field-demo",
    "raw": "'use client'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <ColorField placeholder='#FAFAFA' label='Default' />\n            <ColorField placeholder='#FAFAFA' label='Readonly' isReadOnly />\n            <ColorField placeholder='#FAFAFA' label='Invalid' isInvalid />\n            <ColorField placeholder='#FAFAFA' label='Disabled' isDisabled />\n            <ColorField placeholder='#FAFAFA' label='Loading' isLoading />\n        </div>\n    )\n}\n"
  },
  "colors/color-field/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field/color-field-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { type Color, parseColor } from 'react-aria-components'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldControlledDemo() {\n    const [color, setColor] = useState<Color | null>(parseColor('#FAFAFA'))\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <ColorField value={color} label='Color' onChange={setColor} />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-with-slider-demo": {
    "component": "@/components/docs/colors/color-area/color-area-with-slider-demo",
    "raw": "'use client'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorSlider } from '@/components/ui'\nimport { useState } from 'react'\n\nexport default function ColorAreaWithSliderDemo() {\n    const [color, setColor] = useState(parseColor('hsl(50, 100%, 50%)'))\n    return (\n        <div className='flex flex-col gap-y-2'>\n            <ColorArea value={color} onChange={setColor} xChannel='saturation' yChannel='lightness' />\n            <ColorSlider label='Fill Color' channel='hue' value={color} onChange={setColor} />\n            <ColorField label='Current Color' withPicker={false} value={color.toString('hex')} />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area/color-area-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { type ColorSpace, type Key, parseColor } from 'react-aria-components'\nimport type { ColorChannel } from 'react-stately'\n\nimport { ColorArea, SelectionBox } from '@/components/ui'\nimport { Select } from '@/components/ui/select'\n\nconst RGBchannels = ['red', 'green', 'blue'].map((channel) => ({ channel }))\nconst HSLchannels = ['hue', 'saturation', 'lightness'].map((channel) => ({ channel }))\nconst HSBchannels = ['hue', 'saturation', 'brightness'].map((channel) => ({ channel }))\n\nexport default function ColorAreaControlledDemo() {\n    const [color, setColor] = useState(parseColor('hsl(0, 100%, 50%)'))\n    const [colorSpace, setColorSpace] = useState<Key | null>('rgb')\n    const [xChannel, setXChannel] = useState<Key | null>(colorSpace === 'rgb' ? 'red' : 'hue')\n    const [yChannel, setYChannel] = useState<Key | null>(colorSpace === 'rgb' ? 'green' : 'saturation')\n\n    return (\n        <div className='flex flex-col items-center gap-2'>\n            <SelectionBox\n                className='w-full'\n                label='Color Spaces'\n                selectionMode='single'\n                orientation='horizontal'\n                value={colorSpace}\n                onChange={(v) => {\n                    setColorSpace(v)\n                    setXChannel(v === 'rgb' ? 'red' : 'hue')\n                    setYChannel(v === 'rgb' ? 'green' : 'saturation')\n                }}\n            >\n                <SelectionBox.Item value='rgb'>RGB</SelectionBox.Item>\n                <SelectionBox.Item value='hsl'>HSL</SelectionBox.Item>\n                <SelectionBox.Item value='hsb'>HSB</SelectionBox.Item>\n            </SelectionBox>\n            <Select\n                label='X Channel'\n                className='w-full'\n                selectedKey={xChannel}\n                onSelectionChange={(v) => setXChannel(v)}\n                items={colorSpace === 'rgb' ? RGBchannels : colorSpace === 'hsl' ? HSLchannels : HSBchannels}\n            >\n                {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n            </Select>\n            <Select\n                label='Y Channel'\n                className='w-full'\n                selectedKey={yChannel}\n                onSelectionChange={(v) => setYChannel(v)}\n                items={colorSpace === 'rgb' ? RGBchannels : colorSpace === 'hsl' ? HSLchannels : HSBchannels}\n            >\n                {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n            </Select>\n            <ColorArea\n                value={color}\n                onChange={setColor}\n                xChannel={xChannel as ColorChannel}\n                yChannel={yChannel as ColorChannel}\n                colorSpace={colorSpace as ColorSpace}\n            />\n            <pre>{JSON.stringify({ color }, null, 2)}</pre>\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area/color-area-channel-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Key } from 'react-aria-components'\nimport type { ColorChannel } from 'react-stately'\n\nimport { ColorArea, Select } from '@/components/ui'\n\nconst channels = ['red', 'green', 'blue', 'alpha'].map((channel) => ({ channel }))\n\nexport default function ColorAreaChannelDemo() {\n    const [xChannel, setXChannel] = useState<Key | null>('red')\n    const [yChannel, setYChannel] = useState<Key | null>('blue')\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <div className='flex w-full flex-col gap-2 sm:flex-row'>\n                <Select\n                    label='X Channel'\n                    className='w-full'\n                    selectedKey={xChannel}\n                    onSelectionChange={(v) => setXChannel(v)}\n                    items={channels}\n                >\n                    {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n                </Select>\n                <Select\n                    label='Y Channel'\n                    className='w-full'\n                    selectedKey={yChannel}\n                    onSelectionChange={(v) => setYChannel(v)}\n                    items={channels}\n                >\n                    {(item) => <Select.Item id={item.channel}>{item.channel}</Select.Item>}\n                </Select>\n            </div>\n            <ColorArea xChannel={xChannel as ColorChannel} yChannel={yChannel as ColorChannel} />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-demo": {
    "component": "@/components/docs/colors/color-area/color-area-demo",
    "raw": "'use client'\n\nimport { ColorArea } from '@/components/ui'\n\nexport default function ColorAreaDemo() {\n    return (\n        <div className='flex gap-4'>\n            <div className='space-y-1.5'>\n                <span>Default</span>\n                <ColorArea />\n            </div>\n            <div className='space-y-1.5'>\n                <span>Disabled</span>\n                <ColorArea isDisabled />\n            </div>\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area/color-area-space-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { ColorSpace, Key } from 'react-aria-components'\n\nimport { ColorArea, Select } from '@/components/ui'\n\nconst spaces = ['rgb', 'hsb', 'hsl'].map((space) => ({ space }))\n\nexport default function ColorAreaSpaceDemo() {\n    const [colorSpace, setColorSpace] = useState<Key | null>('rgb')\n    return (\n        <div className='flex flex-col gap-4'>\n            <Select\n                className='w-full'\n                label='Color Space'\n                selectedKey={colorSpace}\n                onSelectionChange={setColorSpace}\n                items={spaces}\n            >\n                {(item) => <Select.Item id={item.space}>{item.space}</Select.Item>}\n            </Select>\n            <ColorArea colorSpace={colorSpace as ColorSpace} />\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDemo() {\n    return (\n        <div className='space-y-4'>\n            <ColorSlider label='Default' channel='hue' defaultValue={'hsl(0, 100%, 50%)'} />\n            <ColorSlider label='Disabled' channel='hue' isDisabled defaultValue={'hsl(0, 100%, 50%)'} />\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-vertical-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-vertical-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderVerticalDemo() {\n    return (\n        <div className='flex items-center justify-center'>\n            <ColorSlider\n                orientation='vertical'\n                aria-label='Fill Color'\n                channel='hue'\n                defaultValue='hsl(0, 100%, 50%)'\n            />\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-controlled-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { ColorSlider, defaultColor } from '@/components/ui'\n\nexport default function ColorSliderControlledDemo() {\n    const [color, setColor] = useState(defaultColor)\n    return (\n        <div className='flex flex-col gap-2'>\n            <ColorSlider channel='hue' value={color} onChange={setColor} />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-with-label-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderWithLabelDemo() {\n    return <ColorSlider label='Color Customizer' channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n"
  },
  "colors/color-wheel/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-demo",
    "raw": "'use client'\n\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelDemo() {\n    return (\n        <div className='flex gap-4'>\n            <div className='space-y-1.5'>\n                <span>Default</span>\n                <ColorWheel aria-label='Color' />\n            </div>\n            <div className='space-y-1.5'>\n                <span>Disabled</span>\n                <ColorWheel aria-label='Color' isDisabled />\n            </div>\n        </div>\n    )\n}\n"
  },
  "colors/color-wheel/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelControlledDemo() {\n    const [color, setColor] = useState(parseColor('hsl(0, 100%, 50%)'))\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <ColorWheel aria-label='Background color' value={color} onChange={setColor} />\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-disabled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDisabledDemo() {\n    const [color, setColor] = useState(parseColor('hsl(216, 98%, 52%)'))\n    return <ColorPicker isDisabled label='Color Picker' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-description-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithDescriptionDemo() {\n    const [color, setColor] = useState(defaultColor)\n    return (\n        <ColorPicker\n            label='Theme Color'\n            description='Snag a color for the app theme'\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n"
  },
  "colors/color-picker/color-picker-dynamic-label-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-dynamic-label-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = useState(defaultColor)\n    return <ColorPicker label={color.toString('hex')} value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-label-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = useState(defaultColor)\n    return <ColorPicker label='Theme Color' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-swatch-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport type { Color } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorPicker, ColorSlider, ColorSwatchPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerEnableSwatchDemo() {\n    const [color, setColor] = useState(defaultColor)\n    const colorChangeHandler = (v: Color) => {\n        setColor(v)\n    }\n    return (\n        <ColorPicker value={color} onChange={(v) => colorChangeHandler(v)}>\n            <ColorArea colorSpace='hsb' xChannel='saturation' yChannel='brightness' />\n            <ColorSlider colorSpace='hsb' channel='hue' />\n            <ColorField aria-label='Hex color' />\n            <ColorSwatchPicker aria-label='Color swatch picker' layout='grid' className='flex flex-wrap gap-2'>\n                {colors.map((color) => (\n                    <ColorSwatchPicker.Item key={color} color={color} />\n                ))}\n            </ColorSwatchPicker>\n        </ColorPicker>\n    )\n}\n\nconst colors = ['#f59e0b', '#84cc16', '#0d6efd', '#ec4899', '#f43f5e', '#d4b990', '#b19f73', '#9370db', '#7d60df']\n"
  },
  "colors/color-picker/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-combination-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorPicker, ColorSlider, Select } from '@/components/ui'\n\nexport default function ColorPickerCombinationDemo() {\n    const [space, setSpace] = useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker label='Color picker' defaultValue='#0d6efd'>\n            <section className='space-y-2 sm:max-w-56'>\n                <ColorArea colorSpace={space} />\n                <div className='5 space-y-0'>\n                    {getColorChannels(space).map((channel) => (\n                        <ColorSlider showOutput={false} key={channel} colorSpace={space} channel={channel} />\n                    ))}\n                </div>\n                <Select\n                    aria-label='Color space'\n                    selectedKey={space}\n                    onSelectionChange={(s) => setSpace(s as ColorSpace)}\n                >\n                    {['rgb', 'hsb', 'hsl'].map((s) => (\n                        <Select.Item key={s} id={s} textValue={s}>\n                            {s}\n                        </Select.Item>\n                    ))}\n                </Select>\n                <div className='flex gap-2'>\n                    {getColorChannels(space).map((channel) => (\n                        <ColorField key={channel} colorSpace={space} channel={channel} className='w-full' />\n                    ))}\n                </div>\n            </section>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-selection-format-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorPicker, Select, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n    const [color, setColor] = useState(defaultColor)\n    const [isHexFormat, setIsHexFormat] = useState(false)\n    const [space, setSpace] = useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker label={color.toString(space)} value={color} onChange={setColor}>\n            <section className='space-y-2'>\n                <ColorArea />\n                <Select\n                    aria-label='Color Space'\n                    selectedKey={space}\n                    defaultSelectedKey={space}\n                    onSelectionChange={(s) => {\n                        setSpace(s as ColorSpace)\n                        setIsHexFormat(s === 'hex')\n                    }}\n                >\n                    {['rgb', 'hex', 'hsl', 'hsb'].map((s) => (\n                        <Select.Item key={s} id={s} textValue={s}>\n                            {s}\n                        </Select.Item>\n                    ))}\n                </Select>\n                {isHexFormat ? (\n                    <ColorField aria-label='Hex color' colorSpace={space} />\n                ) : getColorChannels(space).length > 0 ? (\n                    <div className='flex gap-2 sm:max-w-56'>\n                        {getColorChannels(space).map((channel) => (\n                            <ColorField colorSpace={space} channel={channel} key={channel} />\n                        ))}\n                    </div>\n                ) : null}\n            </section>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-demo",
    "raw": "'use client'\n\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDemo() {\n    return (\n        <div className='flex gap-6'>\n            <ColorPicker label='Default' />\n            <ColorPicker label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerControlledDemo() {\n    const [color, setColor] = useState(defaultColor)\n\n    return (\n        <div className='flex flex-col items-center gap-4'>\n            <ColorPicker value={color} onChange={setColor} />\n            <code>{JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = useState(parseColor('#0d6efd'))\n    return (\n        <ColorSwatchPicker\n            aria-label='Pick color'\n            value={value}\n            onChange={setValue}\n            className='grid grid-cols-3 gap-2 lg:grid-cols-6'\n        >\n            <ColorSwatchPicker.Item color='#fafafa' />\n            <ColorSwatchPicker.Item color='#84cc16' />\n            <ColorSwatchPicker.Item color='#0d6efd' />\n            <ColorSwatchPicker.Item color='#ec4899' />\n            <ColorSwatchPicker.Item color='#f43f5e' />\n        </ColorSwatchPicker>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-item-disabled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker, Description } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                value={value}\n                onChange={setValue}\n                className='flex justify-center gap-2'\n            >\n                <ColorSwatchPicker.Item isDisabled color='#f59e0b' />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item isDisabled color='#ec4899' />\n                <ColorSwatchPicker.Item isDisabled color='#f43f5e' />\n            </ColorSwatchPicker>\n\n            <Description>{value.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [color, setColor] = useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                value={color}\n                onChange={setColor}\n                className='flex justify-center gap-2'\n            >\n                <ColorSwatchPicker.Item color='#f59e0b' />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item color='#ec4899' />\n                <ColorSwatchPicker.Item color='#f43f5e' />\n            </ColorSwatchPicker>\n            <code>color: {JSON.stringify(color)}</code>\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-delay-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-delay-demo",
    "raw": "'use client'\n\nimport { Button, Tooltip } from '@/components/ui'\n\nconst delays = [0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000]\n\nexport default function TooltipDelayDemo() {\n    return (\n        <div className='flex gap-2'>\n            {delays.map((delay, i) => (\n                <Tooltip key={i} delay={delay}>\n                    <Button>\n                        {delay}\n                        {delay === 1500 && ' (default)'}\n                    </Button>\n                    <Tooltip.Content>\n                        This tooltip shown after <strong>{delay}</strong>ms.\n                    </Tooltip.Content>\n                </Tooltip>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-placement-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-placement-demo",
    "raw": "'use client'\n\nimport type { TooltipProps } from 'react-aria-components'\n\nimport { Button, Tooltip } from '@/components/ui'\n\nconst placements: TooltipProps['placement'][] = [\n    'left top',\n    'top left',\n    'top',\n    'top right',\n    'right top',\n    'left',\n    'right',\n    'left bottom',\n    'bottom left',\n    'bottom',\n    'bottom right',\n    'right bottom'\n]\n\nexport default function TooltipPlacementDemo() {\n    return (\n        <div className='grid grid-cols-2 gap-2 sm:grid-cols-3 lg:grid-cols-6 [&_.kbt32x]:w-full'>\n            {placements.map((place, i) => (\n                <Tooltip key={i}>\n                    <Button\n                        size='xs'\n                        variant='outline'\n                        className='nth-10:col-span-2 nth-3:col-span-2 nth-6:col-span-3 nth-7:col-span-3'\n                    >\n                        {place}\n                    </Button>\n                    <Tooltip.Content placement={place}>\n                        Tooltip shown at <strong>{place}</strong>.\n                    </Tooltip.Content>\n                </Tooltip>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-variant-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-variant-demo",
    "raw": "'use client'\n\nimport { IconSquareMousePointer } from 'hq-icons'\n\nimport { Button, Tooltip } from '@/components/ui'\n\nexport default function TooltipVariantDemo() {\n    return (\n        <Tooltip>\n            <Button aria-label='Hover Me!'>\n                <IconSquareMousePointer />\n            </Button>\n            <Tooltip.Content isInverse>\n                This is a <strong>Tooltip</strong> with an <strong>inverse</strong> background.\n            </Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-demo",
    "raw": "'use client'\n\nimport { Tooltip } from '@/components/ui'\n\nexport default function TooltipDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger>Hover Me!</Tooltip.Trigger>\n            <Tooltip.Content>Hello, This is Tooltip!</Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-without-arrow-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-without-arrow-demo",
    "raw": "'use client'\n\nimport { IconSquareMousePointer } from 'hq-icons'\n\nimport { Button, Tooltip } from '@/components/ui'\n\nexport default function TooltipWithoutArrowDemo() {\n    return (\n        <Tooltip>\n            <Button aria-label='Hover Me!'>\n                <IconSquareMousePointer />\n            </Button>\n            <Tooltip.Content showArrow={false}>Hello, This is Tooltip!</Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/sheet/sheet-sticky-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetStickyDemo() {\n    return (\n        <Sheet>\n            <Button>Read</Button>\n            <Sheet.Content>\n                <Sheet.Header>\n                    <Sheet.Title>Terms of Use</Sheet.Title>\n                    <Sheet.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our services, you agree to be bound by\n                            these terms. If you do not agree to these terms, please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for maintaining the confidentiality\n                            of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that occur under your account. You\n                            must notify us immediately of any breach of security or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and policies in connection with\n                            your use of our services. This includes adhering to intellectual property laws and\n                            refraining from any unlawful behavior while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of our services by any means other\n                            than through the interface provided by us. Any form of hacking, bypassing, or circumventing\n                            our security protocols is strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any content from our services\n                            unless explicitly authorized by us. This includes engaging in activities such as scraping,\n                            data mining, or using automated systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse, or harm other users. This\n                            includes sending unsolicited messages, stalking, or engaging in any form of cyberbullying.\n                            We reserve the right to terminate accounts found in violation of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other intellectual property displayed on\n                            our services are the property of their respective owners. You may not use, copy, or\n                            distribute any content without prior written permission from the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a worldwide, royalty-free, non-exclusive\n                            license to use, distribute, modify, and display that content for the purpose of providing\n                            our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to allow us to use it in\n                            accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our services at any time, without\n                        notice, for any reason, including but not limited to a breach of these terms. Upon termination,\n                        your right to use our services will immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms that, by their nature, should\n                        survive termination shall remain in effect. This includes, but is not limited to, ownership\n                        provisions, warranty disclaimers, and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all times or without interruption. We\n                        are not liable for any downtime or technical issues that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided &quot;as is&quot; and &quot;as available&quot; without any warranties\n                        of any kind, whether express or implied. We do not warrant that our services will meet your\n                        requirements or that they will be error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental, special, consequential, or punitive\n                        damages arising out of or related to your use of our services. This includes, but is not limited\n                        to, damages for loss of profits, data, or other intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time. If a revision is material, we\n                        will provide at least 30 days&apos; notice prior to any new terms taking effect. What\n                        constitutes a material change will be determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the laws of [Your Jurisdiction],\n                        without regard to its conflict of law provisions. Any disputes arising from or relating to these\n                        terms shall be resolved in the courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at [Your Contact Information].\n                    </div>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Button slot='close' variant='outline'>\n                        Close\n                    </Button>\n                    <Button>Accept</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Sheet, TextField } from '@/components/ui'\n\nexport default function SheetDemo() {\n    return (\n        <Sheet>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Sheet.Content>\n                    <Sheet.Header>\n                        <Sheet.Title>Login</Sheet.Title>\n                        <Sheet.Description>Enter your credentials to sign in.</Sheet.Description>\n                    </Sheet.Header>\n                    <Sheet.Body className='space-y-4'>\n                        <TextField isRequired type='email' label='Email' placeholder='Enter your email' />\n                        <TextField isRequired label='Password' type='password' placeholder='Enter your password' />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Sheet.Body>\n                    <Sheet.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Sheet.Footer>\n                </Sheet.Content>\n            </Form>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-position-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-position-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Button, Sheet } from '@/components/ui'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetPositionDemo() {\n    const [sheetSide, setSheetSide] = useState<Side>('left')\n    const [isOpen, setIsOpen] = useState(false)\n\n    const sides: Side[] = ['top', 'left', 'right', 'bottom']\n\n    const openSheet = (side: Side, open: boolean) => {\n        setSheetSide(side)\n        setIsOpen(open)\n    }\n\n    return (\n        <>\n            <div className='grid grid-cols-2 gap-2'>\n                {sides.map((side, i) => (\n                    <Button\n                        variant='outline'\n                        onPress={() => openSheet(side, true)}\n                        key={i}\n                        className='first:col-span-full last:col-span-full'\n                    >\n                        {side}\n                    </Button>\n                ))}\n            </div>\n            <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen} side={sheetSide}>\n                <Sheet.Header>\n                    <Sheet.Title>{sheetSide}</Sheet.Title>\n                    <Sheet.Description>The sheet will go from {sheetSide} side.</Sheet.Description>\n                </Sheet.Header>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-controlled-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-controlled-demo",
    "raw": "'use client'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\nimport { useState } from 'react'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetControlledDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Sheet.Content isOpen={open} onOpenChange={setOpen}>\n                <Sheet.Header>\n                    <Sheet.Title>Confirm Deletion</Sheet.Title>\n                    <Sheet.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Footer>\n                    <Button variant='outline' onPress={() => setOpen(false)}>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        variant={loading === 'success' ? 'primary' : 'danger'}\n                        onPress={deleteAccount}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n                    </Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport {\n    IconBook,\n    IconBookOpen,\n    IconBrandGithub,\n    IconBrandGithubCopilot,\n    IconBuilding,\n    IconChartBar,\n    IconFileCode,\n    IconFilter,\n    IconGlobe,\n    IconHeart,\n    IconLogOut,\n    IconMessage,\n    IconSettings,\n    IconStar,\n    IconUser,\n    IconUsers\n} from 'hq-icons'\nimport { Group, Menu as MenuPrimitive } from 'react-aria-components'\n\nimport { Avatar, Button, Checkbox, Description, Menu, Modal, Select, Sheet, TextField } from '@/components/ui'\n\nexport default function SheetMenuDemo() {\n    const [isOpen, setIsOpen] = useState(false)\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    return (\n        <>\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Modal.Header>\n                    <Modal.Title>Edit status</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='space-y-4'>\n                        <TextField prefix={<IconBrandGithub />} label='Status' placeholder=\"What's your status?\" />\n                        <Group>\n                            <Checkbox>Busy</Checkbox>\n                            <Description>\n                                When others mention you, assign you, or request your review, GitHub will let them know\n                                that you have limited availability.\n                            </Description>\n                        </Group>\n                        <Select label='Clear Status'>\n                            <Select.Item>Never</Select.Item>\n                            <Select.Item>in 30 Minutes</Select.Item>\n                            <Select.Item>in 1 Hour</Select.Item>\n                            <Select.Item>in 8 Hours</Select.Item>\n                            <Select.Item>after Today</Select.Item>\n                            <Select.Item>after a Week</Select.Item>\n                            <Select.Item>after a Month</Select.Item>\n                        </Select>\n                        <Select label='Visible to'>\n                            <Select.Item>Everyone</Select.Item>\n                            <Select.Item>Organization</Select.Item>\n                            <Select.Item>Public</Select.Item>\n                        </Select>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={closeModal}>\n                        Clear Status\n                    </Button>\n                    <Button onPress={closeModal}>Set Status</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <Sheet>\n                <Sheet.Trigger aria-label='Open menu'>\n                    <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' />\n                </Sheet.Trigger>\n                <Sheet.Content closeButton={false}>\n                    <Sheet.Header className='sticky top-0 flex flex-row items-center bg-background p-4 sm:gap-3'>\n                        <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' size='xl' />\n                        <div>\n                            <Sheet.Title>dq-alhq</Sheet.Title>\n                            <Sheet.Description>DQ Al-Haqqi</Sheet.Description>\n                        </div>\n                    </Sheet.Header>\n                    <Sheet.Body className='border-t px-0 sm:px-0'>\n                        <MenuPrimitive aria-label='Menu' className='divide-y'>\n                            <Menu.Section>\n                                <Menu.Item onAction={openModal}>\n                                    <IconBrandGithub />\n                                    <Menu.Label>Edit Status</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconUser />\n                                    <Menu.Label>Your profile</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBook />\n                                    <Menu.Label>Your repositories</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBrandGithubCopilot /> <Menu.Label>Your Copilot</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconChartBar /> <Menu.Label>Your projects</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconStar /> <Menu.Label>Your stars</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconFileCode /> <Menu.Label>Your gists</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBuilding /> <Menu.Label>Your organizations</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconGlobe /> <Menu.Label>Your enterprises</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconHeart />\n                                    <Menu.Label>Your sponsors</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconFilter /> <Menu.Label>Feature preview</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconSettings />\n                                    <Menu.Label>Settings</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconBookOpen /> <Menu.Label>GitHub Docs</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconUsers /> <Menu.Label>GitHub Support</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconMessage /> <Menu.Label>GitHub Community</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconLogOut /> <Menu.Label>Sign out</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                        </MenuPrimitive>\n                    </Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconBan, IconRotateCcw, IconTrash } from 'hq-icons'\nimport type { Key } from 'react-aria-components'\n\nimport { Button, Menu, Sheet } from '@/components/ui'\n\nexport default function SheetMenuDemo() {\n    const [state, setState] = useState<Key>('')\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const executeAction = (action: string) => {\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n            setState('')\n            alert(action)\n        }, 3000)\n    }\n\n    const actions = (t: Key) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this user?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Button>Options</Button>\n                <Menu.Content onAction={setState}>\n                    <Menu.Item id='delete' isDanger>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='ban' isDanger>\n                        <IconBan />\n                        <Menu.Label>Ban</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='restore'>\n                        <IconRotateCcw />\n                        <Menu.Label>Restore</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Sheet.Content isOpen={state !== ''} onOpenChange={() => setState('')}>\n                <Sheet.Header>\n                    <Sheet.Title>{actions(state)?.title}</Sheet.Title>\n                    <Sheet.Description>{actions(state)?.description}</Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant={state === 'restore' ? 'primary' : 'danger'}\n                        isDisabled={loading}\n                        isPending={loading}\n                        onPress={actions(state)?.action}\n                    >\n                        {actions(state)?.confirmText}\n                    </Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/drawer/drawer-sticky-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Drawer } from '@/components/ui'\n\nexport default function DrawerStickyDemo() {\n    return (\n        <Drawer>\n            <Button>Read</Button>\n            <Drawer.Content>\n                <Drawer.Header>\n                    <Drawer.Title>Terms of Use</Drawer.Title>\n                    <Drawer.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Drawer.Description>\n                </Drawer.Header>\n                <Drawer.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our services, you agree to be bound by\n                            these terms. If you do not agree to these terms, please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for maintaining the confidentiality\n                            of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that occur under your account. You\n                            must notify us immediately of any breach of security or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and policies in connection with\n                            your use of our services. This includes adhering to intellectual property laws and\n                            refraining from any unlawful behavior while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of our services by any means other\n                            than through the interface provided by us. Any form of hacking, bypassing, or circumventing\n                            our security protocols is strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any content from our services\n                            unless explicitly authorized by us. This includes engaging in activities such as scraping,\n                            data mining, or using automated systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse, or harm other users. This\n                            includes sending unsolicited messages, stalking, or engaging in any form of cyberbullying.\n                            We reserve the right to terminate accounts found in violation of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other intellectual property displayed on\n                            our services are the property of their respective owners. You may not use, copy, or\n                            distribute any content without prior written permission from the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a worldwide, royalty-free, non-exclusive\n                            license to use, distribute, modify, and display that content for the purpose of providing\n                            our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to allow us to use it in\n                            accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our services at any time, without\n                        notice, for any reason, including but not limited to a breach of these terms. Upon termination,\n                        your right to use our services will immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms that, by their nature, should\n                        survive termination shall remain in effect. This includes, but is not limited to, ownership\n                        provisions, warranty disclaimers, and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all times or without interruption. We\n                        are not liable for any downtime or technical issues that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided &quot;as is&quot; and &quot;as available&quot; without any warranties\n                        of any kind, whether express or implied. We do not warrant that our services will meet your\n                        requirements or that they will be error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental, special, consequential, or punitive\n                        damages arising out of or related to your use of our services. This includes, but is not limited\n                        to, damages for loss of profits, data, or other intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time. If a revision is material, we\n                        will provide at least 30 days&apos; notice prior to any new terms taking effect. What\n                        constitutes a material change will be determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the laws of [Your Jurisdiction],\n                        without regard to its conflict of law provisions. Any disputes arising from or relating to these\n                        terms shall be resolved in the courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at [Your Contact Information].\n                    </div>\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Button slot='close' variant='outline'>\n                        Close\n                    </Button>\n                    <Button>Accept</Button>\n                </Drawer.Footer>\n            </Drawer.Content>\n        </Drawer>\n    )\n}\n"
  },
  "overlays/drawer/drawer-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconBan, IconRotateCcw, IconTrash } from 'hq-icons'\nimport type { Key } from 'react-aria-components'\n\nimport { Button, Drawer, Menu } from '@/components/ui'\n\nexport default function DrawerMenuDemo() {\n    const [state, setState] = useState<Key>('')\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const executeAction = (action: string) => {\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n            setState('')\n            alert(action)\n        }, 3000)\n    }\n\n    const actions = (t: Key) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this user?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Button>Options</Button>\n                <Menu.Content onAction={setState}>\n                    <Menu.Item id='delete' isDanger>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='ban' isDanger>\n                        <IconBan />\n                        <Menu.Label>Ban</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='restore'>\n                        <IconRotateCcw />\n                        <Menu.Label>Restore</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Drawer.Content isOpen={state !== ''} onOpenChange={() => setState('')}>\n                <Drawer.Header>\n                    <Drawer.Title>{actions(state)?.title}</Drawer.Title>\n                    <Drawer.Description>{actions(state)?.description}</Drawer.Description>\n                </Drawer.Header>\n                <Drawer.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant={state === 'restore' ? 'primary' : 'danger'}\n                        isDisabled={loading}\n                        isPending={loading}\n                        onPress={actions(state)?.action}\n                    >\n                        {actions(state)?.confirmText}\n                    </Button>\n                </Drawer.Footer>\n            </Drawer.Content>\n        </>\n    )\n}\n"
  },
  "overlays/drawer/drawer-menu-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport {\n    IconBook,\n    IconBookOpen,\n    IconBrandGithub,\n    IconBrandGithubCopilot,\n    IconBuilding,\n    IconChartBar,\n    IconFileCode,\n    IconFilter,\n    IconGlobe,\n    IconHeart,\n    IconLogOut,\n    IconMessage,\n    IconSettings,\n    IconStar,\n    IconUser,\n    IconUsers\n} from 'hq-icons'\nimport { Group, Menu as MenuPrimitive } from 'react-aria-components'\n\nimport { Avatar, Button, Checkbox, Description, Drawer, Menu, Modal, Select, TextField } from '@/components/ui'\n\nexport default function DrawerMenuDemo() {\n    const [isOpen, setIsOpen] = useState(false)\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    return (\n        <>\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Modal.Header>\n                    <Modal.Title>Edit status</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='space-y-4'>\n                        <TextField prefix={<IconBrandGithub />} label='Status' placeholder=\"What's your status?\" />\n                        <Group>\n                            <Checkbox>Busy</Checkbox>\n                            <Description>\n                                When others mention you, assign you, or request your review, GitHub will let them know\n                                that you have limited availability.\n                            </Description>\n                        </Group>\n                        <Select label='Clear Status'>\n                            <Select.Item>Never</Select.Item>\n                            <Select.Item>in 30 Minutes</Select.Item>\n                            <Select.Item>in 1 Hour</Select.Item>\n                            <Select.Item>in 8 Hours</Select.Item>\n                            <Select.Item>after Today</Select.Item>\n                            <Select.Item>after a Week</Select.Item>\n                            <Select.Item>after a Month</Select.Item>\n                        </Select>\n                        <Select label='Visible to'>\n                            <Select.Item>Everyone</Select.Item>\n                            <Select.Item>Organization</Select.Item>\n                            <Select.Item>Public</Select.Item>\n                        </Select>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={closeModal}>\n                        Clear Status\n                    </Button>\n                    <Button onPress={closeModal}>Set Status</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <Drawer>\n                <Drawer.Trigger aria-label='Open menu'>\n                    <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' />\n                </Drawer.Trigger>\n                <Drawer.Content>\n                    <Drawer.Header className='sticky top-0 flex flex-row items-center bg-background p-4 sm:gap-3'>\n                        <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' size='xl' />\n                        <div>\n                            <Drawer.Title>dq-alhq</Drawer.Title>\n                            <Drawer.Description>DQ Al-Haqqi</Drawer.Description>\n                        </div>\n                    </Drawer.Header>\n                    <Drawer.Body className='border-t px-0 sm:px-0'>\n                        <MenuPrimitive aria-label='Menu' className='divide-y'>\n                            <Menu.Section>\n                                <Menu.Item onAction={openModal}>\n                                    <IconBrandGithub />\n                                    <Menu.Label>Edit Status</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconUser />\n                                    <Menu.Label>Your profile</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBook />\n                                    <Menu.Label>Your repositories</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBrandGithubCopilot /> <Menu.Label>Your Copilot</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconChartBar /> <Menu.Label>Your projects</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconStar /> <Menu.Label>Your stars</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconFileCode /> <Menu.Label>Your gists</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBuilding /> <Menu.Label>Your organizations</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconGlobe /> <Menu.Label>Your enterprises</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconHeart />\n                                    <Menu.Label>Your sponsors</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconFilter /> <Menu.Label>Feature preview</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconSettings />\n                                    <Menu.Label>Settings</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconBookOpen /> <Menu.Label>GitHub Docs</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconUsers /> <Menu.Label>GitHub Support</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconMessage /> <Menu.Label>GitHub Community</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconLogOut /> <Menu.Label>Sign out</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                        </MenuPrimitive>\n                    </Drawer.Body>\n                </Drawer.Content>\n            </Drawer>\n        </>\n    )\n}\n"
  },
  "overlays/drawer/drawer-position-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-position-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Button, Drawer } from '@/components/ui'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function DrawerPositionDemo() {\n    const [DrawerSide, setDrawerSide] = useState<Side>('left')\n    const [isOpen, setIsOpen] = useState(false)\n\n    const sides: Side[] = ['top', 'left', 'right', 'bottom']\n\n    const openDrawer = (side: Side, open: boolean) => {\n        setDrawerSide(side)\n        setIsOpen(open)\n    }\n\n    return (\n        <>\n            <div className='grid grid-cols-2 gap-2'>\n                {sides.map((side, i) => (\n                    <Button\n                        variant='outline'\n                        onPress={() => openDrawer(side, true)}\n                        key={i}\n                        className='first:col-span-full last:col-span-full'\n                    >\n                        {side}\n                    </Button>\n                ))}\n            </div>\n            <Drawer.Content isOpen={isOpen} onOpenChange={setIsOpen} side={DrawerSide}>\n                <Drawer.Header>\n                    <Drawer.Title>{DrawerSide}</Drawer.Title>\n                    <Drawer.Description>The Drawer will go from {DrawerSide} side.</Drawer.Description>\n                </Drawer.Header>\n            </Drawer.Content>\n        </>\n    )\n}\n"
  },
  "overlays/drawer/drawer-controlled-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-controlled-demo",
    "raw": "'use client'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\nimport { useState } from 'react'\n\nimport { Button, Drawer } from '@/components/ui'\n\nexport default function DrawerControlledDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Drawer.Content isOpen={open} onOpenChange={setOpen}>\n                <Drawer.Header>\n                    <Drawer.Title>Confirm Deletion</Drawer.Title>\n                    <Drawer.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Drawer.Description>\n                </Drawer.Header>\n                <Drawer.Footer>\n                    <Button variant='outline' onPress={() => setOpen(false)}>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        variant={loading === 'success' ? 'primary' : 'danger'}\n                        onPress={deleteAccount}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n                    </Button>\n                </Drawer.Footer>\n            </Drawer.Content>\n        </>\n    )\n}\n"
  },
  "overlays/drawer/drawer-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Drawer, Form, Link, TextField } from '@/components/ui'\n\nexport default function DrawerDemo() {\n    return (\n        <Drawer>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Drawer.Content>\n                    <Drawer.Header>\n                        <Drawer.Title>Login</Drawer.Title>\n                        <Drawer.Description>Enter your credentials to sign in.</Drawer.Description>\n                    </Drawer.Header>\n                    <Drawer.Body className='space-y-4'>\n                        <TextField isRequired type='email' label='Email' placeholder='Enter your email' />\n                        <TextField isRequired label='Password' type='password' placeholder='Enter your password' />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Drawer.Body>\n                    <Drawer.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Drawer.Footer>\n                </Drawer.Content>\n            </Form>\n        </Drawer>\n    )\n}\n"
  },
  "overlays/popover/popover-controlled-demo": {
    "component": "@/components/docs/overlays/popover/popover-controlled-demo",
    "raw": "'use client'\n\nimport { useRef, useState } from 'react'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverControlledDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n    const triggerRef = useRef<HTMLButtonElement>(null)\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button ref={triggerRef} onPress={() => setOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Popover.Content triggerRef={triggerRef} isOpen={open} onOpenChange={setOpen}>\n                <Popover.Header>\n                    <Popover.Title>Confirm Deletion</Popover.Title>\n                    <Popover.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button variant='outline' onPress={() => setOpen(false)}>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        variant={loading === 'success' ? 'primary' : 'danger'}\n                        onPress={deleteAccount}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n                    </Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </>\n    )\n}\n"
  },
  "overlays/popover/popover-placement-demo": {
    "component": "@/components/docs/overlays/popover/popover-placement-demo",
    "raw": "'use client'\n\nimport type { PopoverProps } from 'react-aria-components'\n\nimport { Button, Popover } from '@/components/ui'\n\nconst placements: PopoverProps['placement'][] = [\n    'left top',\n    'top left',\n    'top',\n    'top right',\n    'right top',\n    'left',\n    'right',\n    'left bottom',\n    'bottom left',\n    'bottom',\n    'bottom right',\n    'right bottom'\n]\n\nexport default function PopoverPlacementDemo() {\n    return (\n        <div className='grid grid-cols-6 gap-2'>\n            {placements.map((place, i) => (\n                <Popover key={i}>\n                    <Button\n                        size='xs'\n                        variant='outline'\n                        className='nth-10:col-span-2 nth-3:col-span-2 nth-6:col-span-3 nth-7:col-span-3 whitespace-normal py-5 text-[10px] sm:text-sm'\n                    >\n                        {place}\n                    </Button>\n                    <Popover.Content placement={place} className='min-w-64 p-4'>\n                        Popover shown at <strong>{place}</strong>\n                    </Popover.Content>\n                </Popover>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/popover/popover-trigger-demo": {
    "component": "@/components/docs/overlays/popover/popover-trigger-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, Popover } from '@/components/ui'\n\nexport default function PopoverTriggerDemo() {\n    return (\n        <Popover>\n            <Popover.Trigger aria-label='Open Popover'>\n                <Avatar alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n            </Popover.Trigger>\n            <Popover.Content>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>We&apos;ll send you an email to log in.</Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-demo": {
    "component": "@/components/docs/overlays/popover/popover-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Popover, TextField } from '@/components/ui'\n\nexport default function PopoverDemo() {\n    return (\n        <Popover>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Popover.Content className='min-w-96'>\n                    <Popover.Header>\n                        <Popover.Title>Login</Popover.Title>\n                        <Popover.Description>Enter your credentials to sign in.</Popover.Description>\n                    </Popover.Header>\n                    <Popover.Body className='space-y-4'>\n                        <TextField isRequired type='email' label='Email' placeholder='Enter your email' />\n                        <TextField isRequired label='Password' type='password' placeholder='Enter your password' />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Popover.Body>\n                    <Popover.Footer>\n                        <Button type='submit'>Login</Button>\n                    </Popover.Footer>\n                </Popover.Content>\n            </Form>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-arrow-demo": {
    "component": "@/components/docs/overlays/popover/popover-arrow-demo",
    "raw": "'use client'\n\nimport { IconMousePointerClick } from 'hq-icons'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverArrowDemo() {\n    return (\n        <Popover>\n            <Button>\n                <IconMousePointerClick />\n            </Button>\n            <Popover.Content showArrow={false} className='p-4'>\n                This popover doesn&apos;t have an arrow\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/modal/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconBan, IconRotateCcw, IconTrash } from 'hq-icons'\nimport type { Key } from 'react-aria-components'\n\nimport { Button, Menu, Modal } from '@/components/ui'\n\nexport default function ModalMenuDemo() {\n    const [state, setState] = useState<Key>('')\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const executeAction = (action: string) => {\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n            setState('')\n            alert(action)\n        }, 3000)\n    }\n\n    const actions = (t: Key) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this user?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Button>Options</Button>\n                <Menu.Content onAction={setState}>\n                    <Menu.Item id='delete' isDanger>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='ban' isDanger>\n                        <IconBan />\n                        <Menu.Label>Ban</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='restore'>\n                        <IconRotateCcw />\n                        <Menu.Label>Restore</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Modal.Content isOpen={state !== ''} onOpenChange={() => setState('')}>\n                <Modal.Header>\n                    <Modal.Title>{actions(state)?.title}</Modal.Title>\n                    <Modal.Description>{actions(state)?.description}</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant={state === 'restore' ? 'primary' : 'danger'}\n                        isDisabled={loading}\n                        isPending={loading}\n                        onPress={actions(state)?.action}\n                    >\n                        {actions(state)?.confirmText}\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-size-demo": {
    "component": "@/components/docs/overlays/modal/modal-size-demo",
    "raw": "'use client'\n\nimport { type ComponentProps, useState } from 'react'\n\nimport { Button, Modal } from '@/components/ui'\n\ntype Size = Pick<ComponentProps<typeof Modal.Content>, 'size'>['size']\nconst sizes: Size[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl', 'full']\n\nexport default function ModalSizeDemo() {\n    const [isOpen, setIsOpen] = useState(false)\n    const [modalSize, setModalSize] = useState<Size>('md')\n\n    const openModal = (size: Size, open: boolean) => {\n        setModalSize(size)\n        setIsOpen(open)\n    }\n    return (\n        <>\n            <div className='grid grid-cols-3 gap-2'>\n                {sizes.map((size, i) => (\n                    <Button\n                        variant='outline'\n                        key={i}\n                        onPress={() => openModal(size, true)}\n                        className='last:col-span-full'\n                    >\n                        {size}\n                    </Button>\n                ))}\n            </div>\n\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen} size={modalSize}>\n                <Modal.Header>\n                    <Modal.Title>Modal {modalSize}</Modal.Title>\n                    <Modal.Description>This won&apos;t affect on small screen</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)}>\n                        Close\n                    </Button>\n                    <Button onPress={() => setIsOpen(false)}>Confirm</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-demo": {
    "component": "@/components/docs/overlays/modal/modal-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Modal, TextField } from '@/components/ui'\n\nexport default function ModalDemo() {\n    return (\n        <Modal>\n            <Button>Login</Button>\n            <Form onSubmit={() => {}}>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>Login</Modal.Title>\n                        <Modal.Description>Enter your credentials to sign in.</Modal.Description>\n                    </Modal.Header>\n                    <Modal.Body className='space-y-4'>\n                        <TextField isRequired type='email' label='Email' placeholder='Enter your email' />\n                        <TextField isRequired label='Password' type='password' placeholder='Enter your password' />\n                        <div className='flex items-center justify-between'>\n                            <Checkbox name='remember-me'>Remember me</Checkbox>\n                            <Link href='#'>Forgot password?</Link>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button slot='close' variant='outline'>\n                            Cancel\n                        </Button>\n                        <Button type='submit'>Login</Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Form>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-alert-demo": {
    "component": "@/components/docs/overlays/modal/modal-alert-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalAlertDemo() {\n    return (\n        <Modal>\n            <Button variant='danger'>Delete</Button>\n            <Modal.Content role='alertdialog'>\n                <Modal.Header>\n                    <Modal.Title>Delete file</Modal.Title>\n                    <Modal.Description>This will permanently delete the selected file. Continue?</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button slot='close' variant='danger'>\n                        Continue\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal/modal-controlled-demo",
    "raw": "'use client'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\nimport { useState } from 'react'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalControlledDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await new Promise((resolve) => setTimeout(resolve, 2000))\n        setLoading('success')\n        await new Promise((resolve) => setTimeout(resolve, 500))\n        setLoading('idle')\n        setOpen(false)\n    }\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Modal.Content isOpen={open} onOpenChange={setOpen}>\n                <Modal.Header>\n                    <Modal.Title>Confirm Deletion</Modal.Title>\n                    <Modal.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={() => setOpen(false)}>\n                        Cancel\n                    </Button>\n                    <Button\n                        isPending={loading === 'loading'}\n                        variant={loading === 'success' ? 'primary' : 'danger'}\n                        onPress={deleteAccount}\n                    >\n                        {loading === 'success' ? <IconCircleCheck /> : <IconTrash />}\n                        {loading === 'loading' ? 'Deleting...' : loading === 'success' ? 'Deleted' : 'Delete'}\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-nested-demo": {
    "component": "@/components/docs/overlays/modal/modal-nested-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, Textarea, toast } from '@/components/ui'\nimport { useState } from 'react'\n\nexport default function ModalNestedDemo() {\n    const [firstModal, setFirstModal] = useState<boolean>(false)\n    const [secondModal, setSecondModal] = useState<boolean>(false)\n    const [filled, setFilled] = useState(false)\n\n    return (\n        <>\n            <Button onPress={() => setFirstModal(true)}>Register</Button>\n\n            <Modal.Content\n                isOpen={firstModal}\n                onOpenChange={() => setFirstModal(false)}\n                aria-label='Confirm Registration'\n            >\n                <Modal.Header>\n                    <Modal.Title>Confirm Registration</Modal.Title>\n                    <Modal.Description>Please confirm your registration details.</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button\n                        onPress={() => {\n                            setSecondModal(true)\n                        }}\n                    >\n                        Confirm\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n\n            <Modal.Content\n                isOpen={secondModal}\n                onOpenChange={(open) => {\n                    if (!open && !filled) {\n                        toast('Profile setup incomplete')\n                    }\n                    setSecondModal(open)\n                }}\n                aria-label='Profile Setup'\n            >\n                <Modal.Header>\n                    <Modal.Title>Set Up Your Profile</Modal.Title>\n                    <Modal.Description>We need a bit more information before you can get started.</Modal.Description>\n                </Modal.Header>\n                <Form\n                    onSubmit={(e) => {\n                        e.preventDefault()\n                        toast.success('Profile setup complete')\n                        setSecondModal(false)\n                        setFirstModal(false)\n                    }}\n                >\n                    <Modal.Body>\n                        <Textarea\n                            isRequired\n                            label='Bio'\n                            placeholder='Tell us something about yourself'\n                            onInput={() => setFilled(true)}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button slot='close' variant='outline'>\n                            Skip for now\n                        </Button>\n                        <Button type='submit'>Complete Setup</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-sticky-demo": {
    "component": "@/components/docs/overlays/modal/modal-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalStickyDemo() {\n    return (\n        <Modal>\n            <Button>Open</Button>\n            <Modal.Content>\n                <Modal.Header>\n                    <Modal.Title>Terms of Use</Modal.Title>\n                    <Modal.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Body className='prose dark:prose-invert'>\n                    <p>\n                        Welcome to our Terms of Use. By accessing or using our services, you agree to be bound by these\n                        terms. If you do not agree to these terms, please refrain from using our services.\n                    </p>\n                    <h3> User Obligations</h3>\n                    <h4>Account Responsibility</h4>\n                    <p>\n                        When you create an account with us, you are responsible for maintaining the confidentiality of\n                        your account and password.\n                    </p>\n                    <p>\n                        You agree to accept responsibility for all activities that occur under your account. You must\n                        notify us immediately of any breach of security or unauthorized use of your account.\n                    </p>\n                    <h4>Compliance with Laws</h4>\n                    <p>\n                        You agree to comply with all applicable laws, regulations, and policies in connection with your\n                        use of our services. This includes adhering to intellectual property laws and refraining from\n                        any unlawful behavior while using our platform.\n                    </p>\n                    <h3> Prohibited Activities</h3>\n                    <p>\n                        You are not permitted to access or attempt to access any of our services by any means other than\n                        through the interface provided by us. Any form of hacking, bypassing, or circumventing our\n                        security protocols is strictly prohibited.\n                    </p>\n                    <h4>Misuse of Content</h4>\n                    <p>\n                        You agree not to misuse, reproduce, distribute, or modify any content from our services unless\n                        explicitly authorized by us. This includes engaging in activities such as scraping, data mining,\n                        or using automated systems to extract data.\n                    </p>\n                    <h4>Harassment and Abuse</h4>\n                    <p>\n                        You are prohibited from using our services to harass, abuse, or harm other users. This includes\n                        sending unsolicited messages, stalking, or engaging in any form of cyberbullying. We reserve the\n                        right to terminate accounts found in violation of this policy.\n                    </p>\n                    <h4>Ownership of Content</h4>\n                    <p>\n                        All content, trademarks, service marks, logos, and other intellectual property displayed on our\n                        services are the property of their respective owners. You may not use, copy, or distribute any\n                        content without prior written permission from the owner.\n                    </p>\n                    <h4>User-Generated Content</h4>\n                    <p>\n                        By submitting content to our services, you grant us a worldwide, royalty-free, non-exclusive\n                        license to use, distribute, modify, and display that content for the purpose of providing our\n                        services.\n                    </p>\n                    <p>\n                        You retain all ownership rights to your content but agree to allow us to use it in accordance\n                        with these terms.\n                    </p>\n                    <h3> Termination</h3>\n                    <h4>Right to Terminate</h4>\n                    We reserve the right to terminate or suspend your access to our services at any time, without\n                    notice, for any reason, including but not limited to a breach of these terms. Upon termination, your\n                    right to use our services will immediately cease.\n                    <h4>Effect of Termination</h4>\n                    Upon termination of your account, all provisions of these terms that, by their nature, should\n                    survive termination shall remain in effect. This includes, but is not limited to, ownership\n                    provisions, warranty disclaimers, and limitations of liability.\n                    <h3> Limitation of Liability</h3>\n                    <h4>Service Availability</h4>\n                    We do not guarantee that our services will be available at all times or without interruption. We are\n                    not liable for any downtime or technical issues that may prevent access to our services.\n                    <h4>No Warranties</h4>\n                    Our services are provided &quot;as is&quot; and &quot;as available&quot; without any warranties of\n                    any kind, whether express or implied. We do not warrant that our services will meet your\n                    requirements or that they will be error-free or secure.\n                    <h4>Limitation of Damages</h4>\n                    In no event shall we be liable for any indirect, incidental, special, consequential, or punitive\n                    damages arising out of or related to your use of our services. This includes, but is not limited to,\n                    damages for loss of profits, data, or other intangibles.\n                    <h3> Changes to These Terms</h3>\n                    We reserve the right to modify or replace these terms at any time. If a revision is material, we\n                    will provide at least 30 days&apos; notice prior to any new terms taking effect. What constitutes a\n                    material change will be determined at our sole discretion.\n                    <h3> Governing Law</h3>\n                    These terms shall be governed and construed in accordance with the laws of [Your Jurisdiction],\n                    without regard to its conflict of law provisions. Any disputes arising from or relating to these\n                    terms shall be resolved in the courts of [Your Jurisdiction].\n                    <h3> Contact Information</h3>\n                    If you have any questions about these terms, please contact us at [Your Contact Information].\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button slot='close' variant='outline'>\n                        Cancel\n                    </Button>\n                    <Button slot='close'>Accept</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-controlled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleControlledDemo() {\n    const [expanded, setExpanded] = useState(false)\n\n    return (\n        <div className='space-y-6'>\n            <Collapsible isExpanded={expanded} onExpandedChange={setExpanded}>\n                <Collapsible.Trigger>System Requirements</Collapsible.Trigger>\n                <Collapsible.Content>Details about system requirements here.</Collapsible.Content>\n            </Collapsible>\n            <code>{JSON.stringify({ expanded }, null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-disabled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-disabled-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDisabledDemo() {\n    return (\n        <Collapsible isDisabled>\n            <Collapsible.Trigger>System Requirements</Collapsible.Trigger>\n            <Collapsible.Content>Details about system requirements here.</Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDemo() {\n    return (\n        <Collapsible>\n            <Collapsible.Trigger>System Requirements</Collapsible.Trigger>\n            <Collapsible.Content>Details about system requirements here.</Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/menu/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu/menu-with-icon-demo",
    "raw": "'use client'\n\nimport { IconEye, IconPencil } from 'hq-icons'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuWithIconDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <IconEye />\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <IconPencil />\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-section-level-demo": {
    "component": "@/components/docs/collections/menu/menu-section-level-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconClipboard,\n    IconCopy,\n    IconItalic,\n    IconScissors,\n    IconUnderline\n} from 'hq-icons'\nimport { useState } from 'react'\nimport type { Selection } from 'react-aria-components'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSectionLevelDemo() {\n    const [style, setStyle] = useState<Selection>(new Set(['bold']))\n    const [align, setAlign] = useState<Selection>(new Set(['left']))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Section title='Actions'>\n                    <Menu.Item textValue='Cut'>\n                        <IconScissors />\n                        <Menu.Label>Cut</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item textValue='Copy'>\n                        <IconCopy />\n                        <Menu.Label>Copy</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item textValue='Paste'>\n                        <IconClipboard />\n                        <Menu.Label>Paste</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n                <Menu.Separator />\n                <Menu.Section\n                    selectionMode='multiple'\n                    selectedKeys={style}\n                    onSelectionChange={setStyle}\n                    title='Text style'\n                >\n                    <Menu.Item id='bold' textValue='Bold'>\n                        <IconBold />\n                        <Menu.Label>Bold</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='italic' textValue='Italic'>\n                        <IconItalic />\n                        <Menu.Label>Italic</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='underline' textValue='Underline'>\n                        <IconUnderline />\n                        <Menu.Label>Underline</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n                <Menu.Separator />\n                <Menu.Section\n                    selectionMode='single'\n                    selectedKeys={align}\n                    onSelectionChange={setAlign}\n                    title='Text alignment'\n                >\n                    <Menu.Item id='left' textValue='Left'>\n                        <IconAlignLeft />\n                        <Menu.Label>Left</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='center' textValue='Cente'>\n                        <IconAlignCenter />\n                        <Menu.Label>Center</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='right' textValue='Right'>\n                        <IconAlignRight />\n                        <Menu.Label>Right</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-disabled-demo": {
    "component": "@/components/docs/collections/menu/menu-disabled-demo",
    "raw": "'use client'\n\nimport { IconEye, IconPencil, IconTrash } from 'hq-icons'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDisabledDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <Menu>\n                <Menu.Trigger>Disabled by Item</Menu.Trigger>\n                <Menu.Content>\n                    <Menu.Item>\n                        <IconEye />\n                        <Menu.Label>View</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item isDisabled>\n                        <IconPencil />\n                        <Menu.Label>Edit</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item isDanger isDisabled>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n            <Menu>\n                <Menu.Trigger>Disabled by Key</Menu.Trigger>\n                <Menu.Content disabledKeys={['edit', 'delete']}>\n                    <Menu.Item id='view'>\n                        <IconEye />\n                        <Menu.Label>View</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='edit'>\n                        <IconPencil />\n                        <Menu.Label>Edit</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='delete' isDanger>\n                        <IconTrash />\n                        <Menu.Label>Delete</Menu.Label>\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </div>\n    )\n}\n"
  },
  "collections/menu/multiple-menu-demo": {
    "component": "@/components/docs/collections/menu/multiple-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Recent Files' },\n    { id: 2, name: 'Downloads' },\n    { id: 3, name: 'Documents' },\n    { id: 4, name: 'Music' },\n    { id: 5, name: 'Pictures' },\n    { id: 6, name: 'Videos' }\n]\n\nexport default function MultipleMenuDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1, 2]))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => (\n                    <Menu.Item id={item.id} textValue={item.name}>\n                        <Menu.Label>{item.name}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-section-demo": {
    "component": "@/components/docs/collections/menu/menu-section-demo",
    "raw": "'use client'\n\nimport { IconBrandArch, IconBrandDebian, IconBrandFedora, IconBrandUbuntu } from 'hq-icons'\n\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        icon: IconBrandDebian,\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        icon: IconBrandUbuntu,\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        icon: IconBrandFedora,\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        icon: IconBrandArch,\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function MenuSectionDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content items={items}>\n                {(item) => (\n                    <Menu.Section title={item.name} items={item.distros}>\n                        {(distro) => (\n                            <Menu.Item textValue={distro.name}>\n                                <item.icon />\n                                <Menu.Label>{distro.name}</Menu.Label>\n                            </Menu.Item>\n                        )}\n                    </Menu.Section>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-danger-demo": {
    "component": "@/components/docs/collections/menu/menu-danger-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDangerDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item isDanger>\n                    <Menu.Label>Delete</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/single-menu-demo": {
    "component": "@/components/docs/collections/menu/single-menu-demo",
    "raw": "'use client'\n\nimport type { Placement } from '@react-types/overlays'\nimport { useState } from 'react'\nimport type { Selection } from 'react-aria-components'\n\nimport { Menu } from '@/components/ui'\n\nconst placements = [\n    { position: 'bottom' },\n    { position: 'bottom left' },\n    { position: 'bottom right' },\n    { position: 'bottom start' },\n    { position: 'bottom end' },\n    { position: 'top' },\n    { position: 'top left' },\n    { position: 'top right' },\n    { position: 'top start' },\n    { position: 'top end' },\n    { position: 'left' },\n    { position: 'left top' },\n    { position: 'left bottom' },\n    { position: 'start' },\n    { position: 'start top' },\n    { position: 'start bottom' },\n    { position: 'right' },\n    { position: 'right top' },\n    { position: 'right bottom' },\n    { position: 'end' },\n    { position: 'end top' },\n    { position: 'end bottom' }\n]\n\nexport default function SingleMenuDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set(['bottom']))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content\n                placement={Array.from(selected)[0] as Placement}\n                selectionMode='single'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={placements}\n            >\n                {(item) => (\n                    <Menu.Item id={item.position}>\n                        <Menu.Label>{item.position}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-collection-demo": {
    "component": "@/components/docs/collections/menu/menu-collection-demo",
    "raw": "'use client'\n\nimport {\n    IconBrandArch,\n    IconBrandDebian,\n    IconBrandFedora,\n    IconBrandMint,\n    IconBrandRedhat,\n    IconBrandUbuntu\n} from 'hq-icons'\n\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Debian', icon: IconBrandDebian },\n    { id: 2, name: 'Ubuntu', icon: IconBrandUbuntu },\n    { id: 3, name: 'Fedora', icon: IconBrandFedora },\n    { id: 4, name: 'Arch', icon: IconBrandArch },\n    { id: 5, name: 'Mint', icon: IconBrandMint },\n    { id: 6, name: 'Red Hat', icon: IconBrandRedhat }\n]\n\nexport default function MenuCollectionDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content items={items}>\n                {(item) => (\n                    <Menu.Item id={item.id}>\n                        <item.icon />\n                        <Menu.Label>{item.name}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-item-details-demo": {
    "component": "@/components/docs/collections/menu/menu-item-details-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Selection } from 'react-aria-components'\n\nimport { Menu } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function MenuItemDetailsDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1]))\n\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content items={items} selectionMode='single' selectedKeys={selected} onSelectionChange={setSelected}>\n                {(item) => (\n                    <Menu.Item id={item.id} textValue={item.name}>\n                        <Menu.Details label={item.name} description={item.description} />\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-header-demo": {
    "component": "@/components/docs/collections/menu/menu-header-demo",
    "raw": "'use client'\n\nimport { IconCircleUser, IconLogOut, IconSettings } from 'hq-icons'\n\nimport { Avatar, Menu } from '@/components/ui'\n\nexport default function MenuHeaderDemo() {\n    return (\n        <>\n            <Menu>\n                <Menu.Trigger>\n                    <Avatar className='size-10' src='https://github.com/dq-alhq.png' />\n                </Menu.Trigger>\n                <Menu.Content placement='bottom' className='min-w-64'>\n                    <Menu.Header>\n                        <span className='block'>DQ Al-Haqqi</span>\n                        <span className='font-normal text-muted-fg'>@dq-alhq</span>\n                    </Menu.Header>\n                    <Menu.Item>\n                        <IconCircleUser />\n                        Profile\n                    </Menu.Item>\n                    <Menu.Item>\n                        <IconSettings />\n                        Settings\n                    </Menu.Item>\n                    <Menu.Separator />\n                    <Menu.Item isDanger>\n                        <IconLogOut />\n                        Log out\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </>\n    )\n}\n"
  },
  "collections/menu/menu-sub-demo": {
    "component": "@/components/docs/collections/menu/menu-sub-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSubDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Submenu>\n                    <Menu.Item>\n                        <Menu.Label>Options</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Content>\n                        <Menu.Item>\n                            <Menu.Label>Edit</Menu.Label>\n                        </Menu.Item>\n                        <Menu.Submenu>\n                            <Menu.Item isDanger>\n                                <Menu.Label>Delete</Menu.Label>\n                            </Menu.Item>\n                            <Menu.Content>\n                                <Menu.Item>\n                                    <Menu.Label>For Everyone</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Submenu>\n                                    <Menu.Item>\n                                        <Menu.Label>For Me</Menu.Label>\n                                    </Menu.Item>\n                                    <Menu.Content>\n                                        <Menu.Item>\n                                            <Menu.Label>Permanently</Menu.Label>\n                                        </Menu.Item>\n                                        <Menu.Item>\n                                            <Menu.Label>Temporary</Menu.Label>\n                                        </Menu.Item>\n                                    </Menu.Content>\n                                </Menu.Submenu>\n                            </Menu.Content>\n                        </Menu.Submenu>\n                    </Menu.Content>\n                </Menu.Submenu>\n                <Menu.Item>\n                    <Menu.Label>Help</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-basic-demo": {
    "component": "@/components/docs/collections/menu/menu-basic-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuBasicDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-respect-screen-demo": {
    "component": "@/components/docs/collections/menu/menu-respect-screen-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuRespectScreenDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content respectScreen={false}>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/table/table-sorting-demo": {
    "component": "@/components/docs/collections/table/table-sorting-demo",
    "raw": "'use client'\n\nimport { useAsyncList } from '@react-stately/data'\nimport { IconLoader } from 'hq-icons'\n\nimport { Table } from '@/components/ui'\n\ninterface Character {\n    title: string\n    director: number\n    producer: number\n    release_date: number\n}\n\nexport default function TableSortingDemo() {\n    const list = useAsyncList<Character>({\n        async load({ signal }) {\n            const res = await fetch('https://swapi.py4e.com/api/films', {\n                signal\n            })\n            const json = await res.json()\n            return {\n                items: json.results\n            }\n        },\n        async sort({ items, sortDescriptor }) {\n            return {\n                items: items.sort((a, b) => {\n                    // @ts-expect-error unknown-type\n                    const first = a[sortDescriptor.column]\n                    // @ts-expect-error unknown-type\n                    const second = b[sortDescriptor.column]\n                    let cmp = (Number.parseInt(first) || first) < (Number.parseInt(second) || second) ? -1 : 1\n                    if (sortDescriptor.direction === 'descending') {\n                        cmp *= -1\n                    }\n                    return cmp\n                })\n            }\n        }\n    })\n    return (\n        <Table\n            aria-label='Movies'\n            selectionMode='multiple'\n            sortDescriptor={list.sortDescriptor}\n            onSortChange={list.sort}\n        >\n            <Table.Header>\n                <Table.Column id='title' isRowHeader>\n                    Title\n                </Table.Column>\n                <Table.Column id='director' allowsSorting>\n                    Director\n                </Table.Column>\n                <Table.Column id='producer'>Producer</Table.Column>\n                <Table.Column id='release_date' allowsSorting>\n                    Release Date\n                </Table.Column>\n            </Table.Header>\n            <Table.Body\n                items={list.items}\n                renderEmptyState={() => (\n                    <div className='grid place-content-center p-10'>\n                        <IconLoader className='animate-spin' />\n                    </div>\n                )}\n            >\n                {(item) => (\n                    <Table.Row id={item.title}>\n                        <Table.Cell>{item.title}</Table.Cell>\n                        <Table.Cell>{item.director}</Table.Cell>\n                        <Table.Cell>{item.producer}</Table.Cell>\n                        <Table.Cell>{item.release_date}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/table/table-drag-demo": {
    "component": "@/components/docs/collections/table/table-drag-demo",
    "raw": "'use client'\n\nimport { Table, useDND, useList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\n\nexport default function TableDragDemo() {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n    return (\n        <Table aria-label='Pokemons' selectionMode='multiple' dragAndDropHooks={dragAndDropHooks}>\n            <Table.Header>\n                <Table.Column>#</Table.Column>\n                <Table.Column isRowHeader>Name</Table.Column>\n                <Table.Column>Type</Table.Column>\n                <Table.Column>Level</Table.Column>\n            </Table.Header>\n            <Table.Body items={list.items}>\n                {(item) => (\n                    <Table.Row>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.type}</Table.Cell>\n                        <Table.Cell>{item.level}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/table/table-demo": {
    "component": "@/components/docs/collections/table/table-demo",
    "raw": "'use client'\n\nimport { Table } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\nexport default function TableDemo() {\n    return (\n        <Table aria-label='Pokemons'>\n            <Table.Header>\n                <Table.Column className='w-0'>#</Table.Column>\n                <Table.Column isRowHeader>Name</Table.Column>\n                <Table.Column>Type</Table.Column>\n                <Table.Column>Level</Table.Column>\n            </Table.Header>\n            <Table.Body items={items}>\n                {(item) => (\n                    <Table.Row>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.type}</Table.Cell>\n                        <Table.Cell>{item.level}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/table/table-filtering-demo": {
    "component": "@/components/docs/collections/table/table-filtering-demo",
    "raw": "'use client'\n\nimport { useAsyncList } from '@react-stately/data'\n\nimport { Card, SearchField, Table } from '@/components/ui'\n\ninterface Character {\n    title: string\n    director: number\n    producer: number\n    release_date: number\n}\n\nexport default function TableFilteringDemo() {\n    const list = useAsyncList<Character>({\n        async load({ signal, filterText }) {\n            const res = await fetch(`https://swapi.py4e.com/api/films/?search=${filterText}`, {\n                signal\n            })\n            const json = await res.json()\n            return {\n                items: json.results\n            }\n        },\n        async sort({ items, sortDescriptor }) {\n            return {\n                items: items.sort((a, b) => {\n                    // @ts-expect-error unknown-type\n                    const first = a[sortDescriptor.column]\n                    // @ts-expect-error unknown-type\n                    const second = b[sortDescriptor.column]\n                    let cmp = (Number.parseInt(first) || first) < (Number.parseInt(second) || second) ? -1 : 1\n                    if (sortDescriptor.direction === 'descending') {\n                        cmp *= -1\n                    }\n                    return cmp\n                })\n            }\n        }\n    })\n    return (\n        <Card>\n            <Card.Header>\n                <SearchField\n                    isPending={list.isLoading}\n                    label='Search Movies'\n                    placeholder='Type to search...'\n                    value={list.filterText}\n                    onChange={list.setFilterText}\n                />\n            </Card.Header>\n            <Card.Content>\n                <Table aria-label='Movies' selectionMode='multiple'>\n                    <Table.Header>\n                        <Table.Column id='title' isRowHeader>\n                            Title\n                        </Table.Column>\n                        <Table.Column id='director'>Director</Table.Column>\n                        <Table.Column id='producer'>Producer</Table.Column>\n                        <Table.Column id='release_date'>Release Date</Table.Column>\n                    </Table.Header>\n                    <Table.Body\n                        items={list.items}\n                        renderEmptyState={() => (\n                            <div className='col-span-full p-4 text-center text-muted-fg'>No items found</div>\n                        )}\n                    >\n                        {(item) => (\n                            <Table.Row id={item.title}>\n                                <Table.Cell>{item.title}</Table.Cell>\n                                <Table.Cell>{item.director}</Table.Cell>\n                                <Table.Cell>{item.producer}</Table.Cell>\n                                <Table.Cell>{item.release_date}</Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "collections/table/table-bulk-demo": {
    "component": "@/components/docs/collections/table/table-bulk-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Table } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\nexport default function TableBulkDemo() {\n    const [selectedKeys, setSelectedKeys] = useState<Selection>(new Set())\n    return (\n        <div className='space-y-6'>\n            <Table\n                aria-label='Books'\n                selectionMode='multiple'\n                selectedKeys={selectedKeys}\n                onSelectionChange={setSelectedKeys}\n            >\n                <Table.Header>\n                    <Table.Column className='w-0'>#</Table.Column>\n                    <Table.Column isRowHeader>Name</Table.Column>\n                    <Table.Column>Type</Table.Column>\n                    <Table.Column>Level</Table.Column>\n                </Table.Header>\n                <Table.Body items={items}>\n                    {(item) => (\n                        <Table.Row>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.type}</Table.Cell>\n                            <Table.Cell>{item.level}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n            <code>selected: {JSON.stringify(Array.from(selectedKeys))}</code>\n        </div>\n    )\n}\n"
  },
  "collections/table/table-resize-demo": {
    "component": "@/components/docs/collections/table/table-resize-demo",
    "raw": "'use client'\n\nimport { Table } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n]\n\nexport default function TableResizeDemo() {\n    return (\n        <Table allowResize aria-label='Pokemons'>\n            <Table.Header>\n                <Table.Column className='max-w-8'>#</Table.Column>\n                <Table.Column isRowHeader isResizable>\n                    Name\n                </Table.Column>\n                <Table.Column isResizable>Type</Table.Column>\n                <Table.Column>Level</Table.Column>\n            </Table.Header>\n            <Table.Body items={items}>\n                {(item) => (\n                    <Table.Row>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.type}</Table.Cell>\n                        <Table.Cell>{item.level}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-drag-between-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-drag-between-demo",
    "raw": "'use client'\n\nimport { GridList, useDND, useList } from '@/components/ui'\n\nfunction DNDList({ items }: { items: { id: string; type: string; name: string }[] }) {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <GridList\n            selectedKeys={list.selectedKeys}\n            onSelectionChange={list.setSelectedKeys}\n            dragAndDropHooks={dragAndDropHooks}\n            items={list.items}\n            renderEmptyState={() => (\n                <div className='col-span-full flex items-center justify-center text-muted-fg'>Drop items here</div>\n            )}\n            aria-label='Linux Distros'\n        >\n            {(item) => <GridList.Item>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n\nexport default function GridListDragBetween() {\n    return (\n        <div className='grid grid-cols-2 gap-4'>\n            <DNDList\n                items={[\n                    { id: '1', type: 'file', name: 'Adobe Photoshop' },\n                    { id: '2', type: 'file', name: 'Adobe XD' },\n                    { id: '3', type: 'folder', name: 'Documents' },\n                    { id: '4', type: 'file', name: 'Adobe InDesign' },\n                    { id: '5', type: 'folder', name: 'Utilities' },\n                    { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n                ]}\n            />\n            <DNDList\n                items={[\n                    { id: '7', type: 'folder', name: 'Pictures' },\n                    { id: '8', type: 'file', name: 'Adobe Fresco' },\n                    { id: '9', type: 'folder', name: 'Apps' },\n                    { id: '10', type: 'file', name: 'Adobe Illustrator' },\n                    { id: '11', type: 'file', name: 'Adobe Lightroom' },\n                    { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n                ]}\n            />\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-layout-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-layout-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Key } from 'react-aria-components'\n\nimport { GridList, Select } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListLayoutDemo() {\n    const [columns, setColumns] = useState<Key | null>(2)\n    const [gap, setGap] = useState<Key | null>(4)\n\n    return (\n        <div className='flex flex-col gap-4'>\n            <div className='flex w-full gap-2'>\n                <Select\n                    id='columns'\n                    className='w-full'\n                    label='Columns'\n                    selectedKey={columns}\n                    onSelectionChange={setColumns}\n                >\n                    <Select.Item id={1}>1</Select.Item>\n                    <Select.Item id={2}>2</Select.Item>\n                    <Select.Item id={3}>3</Select.Item>\n                    <Select.Item id={4}>4</Select.Item>\n                    <Select.Item id={5}>5</Select.Item>\n                    <Select.Item id={6}>6</Select.Item>\n                </Select>\n                <Select id='gap' className='w-full' label='Gap' selectedKey={gap} onSelectionChange={setGap}>\n                    <Select.Item id={0}>0</Select.Item>\n                    <Select.Item id={2}>2</Select.Item>\n                    <Select.Item id={4}>4</Select.Item>\n                    <Select.Item id={6}>6</Select.Item>\n                </Select>\n            </div>\n            <GridList\n                selectionMode='multiple'\n                items={items}\n                aria-label='Linux Distros'\n                columns={columns as 1 | 2 | 3 | 4 | 5 | 6}\n                gap={gap as 0 | 2 | 4 | 6}\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListDemo() {\n    return (\n        <GridList selectionMode='single' items={items} aria-label='Linux Distros'>\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-rearrange-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-rearrange-demo",
    "raw": "'use client'\n\nimport { GridList, useDND, useList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListRearrangeDemo() {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <GridList\n            aria-label='Linux Distros'\n            selectionMode='multiple'\n            items={list.items}\n            dragAndDropHooks={dragAndDropHooks}\n        >\n            {(item) => (\n                <GridList.Item key={item.id} textValue={item.name}>\n                    {item.name}\n                </GridList.Item>\n            )}\n        </GridList>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-selection-mode-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-selection-mode-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { GridList, Radio, RadioGroup } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListMultipleDemo() {\n    const [selectionMode, setSelectionMode] = useState<string>('multiple')\n    return (\n        <div className='space-y-6'>\n            <RadioGroup\n                orientation='horizontal'\n                label='Selection mode'\n                value={selectionMode}\n                onChange={setSelectionMode}\n            >\n                <Radio value='none'>None</Radio>\n                <Radio value='single'>Single</Radio>\n                <Radio value='multiple'>Multiple</Radio>\n            </RadioGroup>\n\n            <GridList\n                items={items}\n                aria-label='Select items'\n                selectionMode={selectionMode as 'none' | 'single' | 'multiple'}\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Selection } from 'react-aria-components'\n\nimport { GridList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function GridListControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([]))\n    return (\n        <div className='space-y-6'>\n            <GridList\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n                aria-label='Linux Distros'\n                selectionMode='multiple'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n            <code>{JSON.stringify([...selected], null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "collections/grid-list/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-disabled-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\nexport default function GridListDisabledDemo() {\n    return (\n        <GridList disabledKeys={[1, 3]} items={items} aria-label='Linux Distros' selectionMode='multiple'>\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-href-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', url: '#' },\n    { id: 2, name: 'Debian', url: '#' },\n    { id: 3, name: 'Fedora', url: '#' },\n    { id: 4, name: 'Arch', url: '#' }\n]\n\nexport default function TagGroupControlledDemo() {\n    return (\n        <Tag.Group label='Linux Distros' items={items}>\n            {(item) => (\n                <Tag id={item.name} href={item.url}>\n                    {item.name}\n                </Tag>\n            )}\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\n\nexport default function TagGroupDemo() {\n    return (\n        <Tag.Group label='Linux Distros' selectionMode='multiple' items={items}>\n            {(item) => <Tag>{item.name}</Tag>}\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Tag } from '@/components/ui'\n\nexport default function TagGroupWithRemoveDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: 1, name: 'Ubuntu' },\n            { id: 2, name: 'Debian' },\n            { id: 3, name: 'Fedora' },\n            { id: 4, name: 'Arch' }\n        ]\n    })\n\n    return (\n        <Tag.Group\n            label='Linux Distros'\n            selectionMode='multiple'\n            onRemove={(keys) => list.remove(...keys)}\n            items={list.items}\n        >\n            {(item) => <Tag>{item.name}</Tag>}\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-variant-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-variant-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\nexport default function TagGroupVariantDemo() {\n    return (\n        <div className='max-w-sm space-y-6'>\n            <Tag.Group variant='primary' label='Primary' items={items} selectionMode='multiple'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group variant='secondary' label='Secondary' items={items} selectionMode='multiple'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n            <Tag.Group variant='danger' label='Danger' items={items} selectionMode='multiple'>\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-disabled-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu', active: true },\n    { id: 2, name: 'Debian', active: false },\n    { id: 3, name: 'Fedora', active: true },\n    { id: 4, name: 'Arch', active: false }\n]\n\nexport default function TagGroupDisabledDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tag.Group\n                disabledKeys={items.filter((item) => !item.active).map((item) => item.id)}\n                label='Disabled Key'\n                selectionMode='multiple'\n                items={items}\n            >\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n\n            <Tag.Group label='Disabled by Tag' selectionMode='multiple' items={items}>\n                {(item) => <Tag isDisabled={!item.active}>{item.name}</Tag>}\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Selection } from 'react-aria-components'\n\nimport { Tag } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' }\n]\n\nexport default function TagGroupControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([]))\n    return (\n        <div className='space-y-6'>\n            <Tag.Group\n                label='Linux Distros'\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => <Tag>{item.name}</Tag>}\n            </Tag.Group>\n\n            <pre>{JSON.stringify([...selected], null, 2)}</pre>\n        </div>\n    )\n}\n"
  },
  "collections/tree/tree-selection-mode-demo": {
    "component": "@/components/docs/collections/tree/tree-selection-mode-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Key } from 'react-aria-components'\n\nimport { Select, Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeSelectionModeDemo() {\n    const [selectionMode, setSelectionMode] = useState<Key | null>('multiple')\n\n    return (\n        <div className='space-y-6'>\n            <Select label='Selection mode' selectedKey={selectionMode} onSelectionChange={setSelectionMode}>\n                <Select.Item id='none'>None</Select.Item>\n                <Select.Item id='single'>Single</Select.Item>\n                <Select.Item id='multiple'>Multiple</Select.Item>\n            </Select>\n            <Tree\n                selectionBehavior='toggle'\n                className='w-full'\n                aria-label='Files'\n                selectionMode={selectionMode as 'none' | 'single' | 'multiple'}\n            >\n                <TreeItem id='documents' textValue='Documents'>\n                    <TreeItem.Content>Documents</TreeItem.Content>\n                    <TreeItem id='project' textValue='Project'>\n                        <TreeItem.Content>Project</TreeItem.Content>\n                        <TreeItem id='report' textValue='Weekly Report'>\n                            <TreeItem.Content>Weekly Report</TreeItem.Content>\n                        </TreeItem>\n                    </TreeItem>\n                </TreeItem>\n                <TreeItem id='photos' textValue='Photos'>\n                    <TreeItem.Content>Photos</TreeItem.Content>\n                    <TreeItem id='one' textValue='Image 1'>\n                        <TreeItem.Content>Image 1</TreeItem.Content>\n                    </TreeItem>\n                    <TreeItem id='two' textValue='Image 2'>\n                        <TreeItem.Content>Image 2</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </Tree>\n        </div>\n    )\n}\n"
  },
  "collections/tree/tree-with-icon-demo": {
    "component": "@/components/docs/collections/tree/tree-with-icon-demo",
    "raw": "'use client'\n\nimport { IconFileImage, IconFileText, IconFolder, IconFolderOpen } from 'hq-icons'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeWithIconDemo() {\n    return (\n        <Tree className='w-full' aria-label='Files'>\n            <TreeItem id='documents' textValue='Documents'>\n                <TreeItem.Content>\n                    {({ isExpanded }) => (\n                        <>\n                            {isExpanded ? <IconFolderOpen /> : <IconFolder />}\n                            Documents\n                        </>\n                    )}\n                </TreeItem.Content>\n                <TreeItem id='project' textValue='Project'>\n                    <TreeItem.Content>\n                        {({ isExpanded }) => (\n                            <>\n                                {isExpanded ? <IconFolderOpen /> : <IconFolder />}\n                                Project\n                            </>\n                        )}\n                    </TreeItem.Content>\n                    <TreeItem id='report' textValue='Weekly Report'>\n                        <TreeItem.Content>\n                            <IconFileText />\n                            Weekly Report\n                        </TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </TreeItem>\n            <TreeItem id='photos' textValue='Photos'>\n                <TreeItem.Content>\n                    {({ isExpanded }) => (\n                        <>\n                            {isExpanded ? <IconFolderOpen /> : <IconFolder />}\n                            Photos\n                        </>\n                    )}\n                </TreeItem.Content>\n                <TreeItem id='one' textValue='Image 1'>\n                    <TreeItem.Content>\n                        <IconFileImage />\n                        Image 1\n                    </TreeItem.Content>\n                </TreeItem>\n                <TreeItem id='two' textValue='Image 2'>\n                    <TreeItem.Content>\n                        <IconFileImage />\n                        Image 2\n                    </TreeItem.Content>\n                </TreeItem>\n            </TreeItem>\n        </Tree>\n    )\n}\n"
  },
  "collections/tree/tree-collections-demo": {
    "component": "@/components/docs/collections/tree/tree-collections-demo",
    "raw": "'use client'\n\nimport {\n    IconArchive,\n    IconDisc,\n    IconFile,\n    IconFileImage,\n    IconFileMusic,\n    IconFileText,\n    IconFileVideo,\n    IconFolder,\n    IconFolderOpen\n} from 'hq-icons'\nimport { Collection } from 'react-aria-components'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeCollectionsDemo() {\n    const renderItem = (item: FileNode, i: number) => (\n        <TreeItem key={i} textValue={item.file}>\n            <TreeItem.Content>\n                {({ isExpanded, hasChildItems }) => (\n                    <>\n                        {isExpanded ? (\n                            <IconFolderOpen />\n                        ) : hasChildItems ? (\n                            <IconFolder />\n                        ) : (\n                            <FileIcon ext={item.file.substring(item.file.lastIndexOf('.') + 1)} />\n                        )}\n                        {item.file}\n                    </>\n                )}\n            </TreeItem.Content>\n            {item.children && (\n                <Collection items={item.children}>{item.children.map((file, i) => renderItem(file, i))}</Collection>\n            )}\n        </TreeItem>\n    )\n\n    return (\n        <Tree className='w-full' aria-label='Files' selectionMode='multiple' items={files}>\n            {files.map((file, i) => renderItem(file, i))}\n        </Tree>\n    )\n}\n\nexport type FileNode = {\n    file: string\n    children?: FileNode[]\n}\n\nconst files: FileNode[] = [\n    {\n        file: 'Downloads',\n        children: [\n            {\n                file: 'Compressed',\n                children: [\n                    { file: 'laravel.zip' },\n                    { file: 'react.zip' },\n                    { file: 'nextjs.rar' },\n                    { file: 'ubuntu.iso' }\n                ]\n            },\n            {\n                file: 'Docs',\n                children: [{ file: 'resume.pdf' }, { file: 'cv.pdf' }]\n            },\n            {\n                file: 'Programs',\n                children: [{ file: 'chrome.exe' }, { file: 'vscode.deb' }]\n            }\n        ]\n    },\n    {\n        file: 'Documents',\n        children: [\n            {\n                file: 'Thesis',\n                children: [\n                    { file: 'Bab 1.docx' },\n                    { file: 'Bab 2.docx' },\n                    { file: 'Bab 3.docx' },\n                    { file: 'Cover.docx' }\n                ]\n            },\n            { file: 'Secret.txt' },\n            { file: 'Project.jpg' }\n        ]\n    },\n    {\n        file: 'Music',\n        children: [\n            { file: 'The Beatles.mp3' },\n            { file: 'Led Zeppelin.mp3' },\n            { file: 'Pink Floyd.mp3' },\n            { file: 'Queen.wav' },\n            { file: 'The Rolling Stones.mp3' },\n            { file: 'The Who.wav' }\n        ]\n    },\n    {\n        file: 'Videos',\n        children: [\n            {\n                file: 'Mission Impossible',\n                children: [\n                    { file: 'Mission Impossible 1.mp4' },\n                    { file: 'Mission Impossible 2.mp4' },\n                    { file: 'Mission Impossible 3.mp4' }\n                ]\n            },\n            { file: 'Star Wars.mp4' },\n            { file: 'Avengers - Endgame.mkv' }\n        ]\n    }\n]\n\nconst FileIcon = ({ ext }: { ext: string }) => {\n    let Icon: any\n    switch (ext) {\n        case 'jpg':\n        case 'png':\n            Icon = IconFileImage\n            break\n        case 'txt':\n        case 'docx':\n        case 'pdf':\n            Icon = IconFileText\n            break\n        case 'mp3':\n        case 'wav':\n            Icon = IconFileMusic\n            break\n        case 'mp4':\n        case 'mkv':\n            Icon = IconFileVideo\n            break\n        case 'zip':\n        case 'rar':\n            Icon = IconArchive\n            break\n        case 'iso':\n            Icon = IconDisc\n            break\n        default:\n            Icon = IconFile\n            break\n    }\n    return <Icon />\n}\n"
  },
  "collections/tree/tree-demo": {
    "component": "@/components/docs/collections/tree/tree-demo",
    "raw": "'use client'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeDemo() {\n    return (\n        <Tree className='w-full' aria-label='Files'>\n            <TreeItem id='documents' textValue='Documents'>\n                <TreeItem.Content>Documents</TreeItem.Content>\n                <TreeItem id='project' textValue='Project'>\n                    <TreeItem.Content>Projects</TreeItem.Content>\n                    <TreeItem id='report' textValue='Weekly Report'>\n                        <TreeItem.Content>Weekly Report</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </TreeItem>\n            <TreeItem id='photos' textValue='Photos'>\n                <TreeItem.Content>Photos</TreeItem.Content>\n                <TreeItem id='one' textValue='Image 1'>\n                    <TreeItem.Content>Image 1</TreeItem.Content>\n                </TreeItem>\n                <TreeItem id='two' textValue='Image 2'>\n                    <TreeItem.Content>Image 2</TreeItem.Content>\n                </TreeItem>\n            </TreeItem>\n        </Tree>\n    )\n}\n"
  },
  "collections/tree/tree-controlled-demo": {
    "component": "@/components/docs/collections/tree/tree-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Selection } from 'react-aria-components'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([]))\n    return (\n        <div className='space-y-6'>\n            <Tree\n                className='w-full'\n                aria-label='Files'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                selectionMode='multiple'\n            >\n                <TreeItem id='documents' textValue='Documents'>\n                    <TreeItem.Content>Documents</TreeItem.Content>\n                    <TreeItem id='project' textValue='Project'>\n                        <TreeItem.Content>Projects</TreeItem.Content>\n                        <TreeItem id='report' textValue='Weekly Report'>\n                            <TreeItem.Content>Weekly Report</TreeItem.Content>\n                        </TreeItem>\n                    </TreeItem>\n                </TreeItem>\n                <TreeItem id='photos' textValue='Photos'>\n                    <TreeItem.Content>Photos</TreeItem.Content>\n                    <TreeItem id='one' textValue='Image 1'>\n                        <TreeItem.Content>Image 1</TreeItem.Content>\n                    </TreeItem>\n                    <TreeItem id='two' textValue='Image 2'>\n                        <TreeItem.Content>Image 2</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </Tree>\n\n            <pre>{JSON.stringify([...selected], null, 2)}</pre>\n        </div>\n    )\n}\n"
  },
  "collections/tree/tree-disabled-demo": {
    "component": "@/components/docs/collections/tree/tree-disabled-demo",
    "raw": "'use client'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeDisabledDemo() {\n    return (\n        <Tree className='w-full' aria-label='Files'>\n            <TreeItem id='documents' textValue='Documents'>\n                <TreeItem.Content>Documents</TreeItem.Content>\n                <TreeItem id='project' textValue='Project'>\n                    <TreeItem.Content>Projects</TreeItem.Content>\n                    <TreeItem id='report' textValue='Weekly Report'>\n                        <TreeItem.Content>Weekly Report</TreeItem.Content>\n                    </TreeItem>\n                </TreeItem>\n            </TreeItem>\n            <TreeItem id='photos' textValue='Photos' isDisabled>\n                <TreeItem.Content>Photos</TreeItem.Content>\n                <TreeItem id='one' textValue='Image 1'>\n                    <TreeItem.Content>Image 1</TreeItem.Content>\n                </TreeItem>\n                <TreeItem id='two' textValue='Image 2'>\n                    <TreeItem.Content>Image 2</TreeItem.Content>\n                </TreeItem>\n            </TreeItem>\n        </Tree>\n    )\n}\n"
  },
  "collections/accordion/accordion-default-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-default-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionGroupDefaultExpandDemo() {\n    return (\n        <Accordion defaultExpandedKeys={[2]}>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>Personal Information</Accordion.Trigger>\n                <Accordion.Content>Personal information form here.</Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>Billing Address</Accordion.Trigger>\n                <Accordion.Content>Billing address form here.</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/accordion/accordion-allow-multiple-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-allow-multiple-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionAllowMultipleExpandDemo() {\n    return (\n        <Accordion allowsMultipleExpanded>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>Personal Information</Accordion.Trigger>\n                <Accordion.Content>Personal information form here.</Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>Billing Address</Accordion.Trigger>\n                <Accordion.Content>Billing address form here.</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/accordion/accordion-disabled-demo": {
    "component": "@/components/docs/collections/accordion/accordion-disabled-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDisabledDemo() {\n    return (\n        <Accordion>\n            {faqs.map((item, index) => (\n                <Accordion.Item isDisabled={index === 2} key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'Do you offer gift wrapping options?',\n        a: 'Yes, we provide gift wrapping services for a small additional charge at checkout.'\n    },\n    {\n        q: 'Can I return a gift card?',\n        a: 'Sorry, gift cards are non-refundable and cannot be returned.'\n    },\n    {\n        q: 'What are your store hours?',\n        a: 'Our store is open from 9 AM to 9 PM on weekdays and 10 AM to 6 PM on weekends.'\n    },\n    {\n        q: 'Do you have a loyalty program?',\n        a: 'Yes, we have a loyalty program where you can earn points for every purchase and redeem them for discounts.'\n    },\n    {\n        q: 'How do I update my billing information?',\n        a: 'You can update your billing information through your account settings on our website.'\n    },\n    {\n        q: 'Are there any discounts for bulk orders?',\n        a: 'Yes, we offer discounts on bulk orders. Please contact our sales team for more details.'\n    }\n]\n"
  },
  "collections/accordion/accordion-demo": {
    "component": "@/components/docs/collections/accordion/accordion-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>Personal Information</Accordion.Trigger>\n                <Accordion.Content>Personal information form here.</Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>Billing Address</Accordion.Trigger>\n                <Accordion.Content>Billing address form here.</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/list-box/list-box-controlled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Selection } from 'react-aria-components'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1]))\n    return (\n        <div className='space-y-6'>\n            <ListBox\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n                aria-label='Linux Distros'\n                selectionMode='multiple'\n            >\n                {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n            </ListBox>\n\n            <code>{JSON.stringify([...selected], null, 2)}</code>\n        </div>\n    )\n}\n"
  },
  "collections/list-box/list-box-section-demo": {
    "component": "@/components/docs/collections/list-box/list-box-section-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    {\n        id: '1',\n        name: 'Debian',\n        distros: [\n            {\n                id: '1-1',\n                name: 'MX'\n            },\n            {\n                id: '1-2',\n                name: 'Kali'\n            },\n            {\n                id: '1-3',\n                name: 'Deepin'\n            }\n        ]\n    },\n    {\n        id: '2',\n        name: 'Ubuntu',\n        distros: [\n            {\n                id: '2-1',\n                name: 'Mint'\n            },\n            {\n                id: '2-2',\n                name: 'KDE Neon'\n            },\n            {\n                id: '2-3',\n                name: 'Zorin'\n            }\n        ]\n    },\n    {\n        id: '3',\n        name: 'Fedora',\n        distros: [\n            {\n                id: '3-1',\n                name: 'CentOS'\n            },\n            {\n                id: '3-2',\n                name: 'Alma'\n            },\n            {\n                id: '3-3',\n                name: 'Nobara'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Arch',\n        distros: [\n            {\n                id: '4-1',\n                name: 'Endeavour'\n            },\n            {\n                id: '4-2',\n                name: 'Garuda'\n            },\n            {\n                id: '4-3',\n                name: 'CachyOS'\n            }\n        ]\n    }\n]\n\nexport default function ListBoxSectionDemo() {\n    return (\n        <ListBox items={items} aria-label='Bands' selectionMode='multiple'>\n            {(item) => (\n                <ListBox.Section className='grid w-full gap-1' id={item.id} title={item.name} items={item.distros}>\n                    {(distro) => <ListBox.Item id={distro.id}>{distro.name}</ListBox.Item>}\n                </ListBox.Section>\n            )}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-filtering-demo": {
    "component": "@/components/docs/collections/list-box/list-box-filtering-demo",
    "raw": "'use client'\n\nimport { Autocomplete } from 'react-aria-components'\n\nimport { ListBox, SearchField } from '@/components/ui'\nimport { fuzzyMatch } from '@/lib/utils'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function AutocompleteListBoxDemo() {\n    return (\n        <Autocomplete filter={fuzzyMatch}>\n            <SearchField className='mb-2' />\n            <ListBox items={items} selectionMode='multiple' aria-label='Linux Distros'>\n                {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n            </ListBox>\n        </Autocomplete>\n    )\n}\n"
  },
  "collections/list-box/list-box-disabled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-disabled-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxDisabledDemo() {\n    return (\n        <ListBox disabledKeys={[1, 3]} items={items} aria-label='Linux Distros' selectionMode='multiple'>\n            {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { ListBox, useDND, useList } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxRearrangeDemo() {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <ListBox\n            aria-label='Linux Distros'\n            selectionMode='multiple'\n            items={list.items}\n            dragAndDropHooks={dragAndDropHooks}\n        >\n            {(item) => <ListBox.Item key={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-demo": {
    "component": "@/components/docs/collections/list-box/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxDemo() {\n    return (\n        <ListBox items={items} selectionMode='single' aria-label='Linux Distros'>\n            {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-drag-between-demo": {
    "component": "@/components/docs/collections/list-box/list-box-drag-between-demo",
    "raw": "'use client'\n\nimport { ListBox, useDND, useList } from '@/components/ui'\n\nfunction DNDList({ items }: { items: { id: string; type: string; name: string }[] }) {\n    const list = useList({ initialItems: items })\n    const { dragAndDropHooks } = useDND({ list, operation: 'move' })\n\n    return (\n        <ListBox\n            selectedKeys={list.selectedKeys}\n            onSelectionChange={list.setSelectedKeys}\n            dragAndDropHooks={dragAndDropHooks}\n            items={list.items}\n            renderEmptyState={() => (\n                <div className='col-span-full flex items-center justify-center text-muted-fg'>Drop items here</div>\n            )}\n            aria-label='Linux Distros'\n        >\n            {(item) => <ListBox.Item>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n\nexport default function ListBoxDragBetween() {\n    return (\n        <div className='flex gap-4'>\n            <DNDList\n                items={[\n                    { id: '1', type: 'file', name: 'Adobe Photoshop' },\n                    { id: '2', type: 'file', name: 'Adobe XD' },\n                    { id: '3', type: 'folder', name: 'Documents' },\n                    { id: '4', type: 'file', name: 'Adobe InDesign' },\n                    { id: '5', type: 'folder', name: 'Utilities' },\n                    { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n                ]}\n            />\n            <DNDList\n                items={[\n                    { id: '7', type: 'folder', name: 'Pictures' },\n                    { id: '8', type: 'file', name: 'Adobe Fresco' },\n                    { id: '9', type: 'folder', name: 'Apps' },\n                    { id: '10', type: 'file', name: 'Adobe Illustrator' },\n                    { id: '11', type: 'file', name: 'Adobe Lightroom' },\n                    { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n                ]}\n            />\n        </div>\n    )\n}\n"
  },
  "collections/list-box/list-box-selection-mode-demo": {
    "component": "@/components/docs/collections/list-box/list-box-selection-mode-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { ListBox, Radio, RadioGroup } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function ListBoxMultipleDemo() {\n    const [selectionMode, setSelectionMode] = useState<string>('multiple')\n    return (\n        <div className='space-y-6'>\n            <RadioGroup\n                orientation='horizontal'\n                label='Selection mode'\n                value={selectionMode}\n                onChange={setSelectionMode}\n            >\n                <Radio value='none'>None</Radio>\n                <Radio value='single'>Single</Radio>\n                <Radio value='multiple'>Multiple</Radio>\n            </RadioGroup>\n\n            <ListBox\n                items={items}\n                aria-label='Select items'\n                selectionMode={selectionMode as 'none' | 'single' | 'multiple'}\n            >\n                {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n            </ListBox>\n        </div>\n    )\n}\n"
  },
  "collections/list-box/list-box-item-details-demo": {
    "component": "@/components/docs/collections/list-box/list-box-item-details-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { Selection } from 'react-aria-components'\n\nimport { ListBox } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function ListBoxItemDetailsDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1]))\n    return (\n        <ListBox\n            selectedKeys={selected}\n            onSelectionChange={setSelected}\n            items={items}\n            aria-label='Javascript Frameworks'\n            selectionMode='single'\n        >\n            {(item) => (\n                <ListBox.Item id={item.id} textValue={item.name}>\n                    <ListBox.Details label={item.name} description={item.description} />\n                </ListBox.Item>\n            )}\n        </ListBox>\n    )\n}\n"
  },
  "date-and-time/calendar/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from '@/components/ui'\n\nexport default function CalendarDemo() {\n    return <Calendar aria-label='Event date' />\n}\n"
  },
  "date-and-time/calendar/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/range-calendar-demo",
    "raw": "'use client'\n\nimport { RangeCalendar } from '@/components/ui'\n\nexport default function RangeCalendarDemo() {\n    return <RangeCalendar aria-label='Range Calendar' />\n}\n"
  },
  "date-and-time/date-field/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-controlled-demo",
    "raw": "'use client'\n\nimport { type CalendarDate, getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { useState } from 'react'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = useState<CalendarDate>(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DateField value={value} onChange={(newValue) => setValue(newValue!)} label='Event date' />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-field/date-time-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-time-field-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateTimeFieldDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = useState(today)\n    return (\n        <DateField\n            hideTimeZone\n            hourCycle={24}\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            label='Event date'\n        />\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-validation-demo",
    "raw": "'use client'\n\nimport type { CalendarDate } from '@internationalized/date'\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, DateField, Form } from '@/components/ui'\n\nexport default function DateFieldValidationDemo() {\n    const [value, setValue] = useState<CalendarDate>()\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DateField isRequired label='Event date' value={value} onChange={(v) => setValue(v!)} />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-2'>\n            <DateField label='Default' />\n            <DateField label='Readonly' isReadOnly />\n            <DateField label='Invalid' isInvalid />\n            <DateField label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-required-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\nimport type { CalendarDate } from '@internationalized/date'\n\nexport default function DatePickerValidationDemo() {\n    const [value, setValue] = useState<CalendarDate>()\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DatePicker isRequired value={value} onChange={(v) => setValue(v!)} label='Event date' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, startOfYear, today } from '@internationalized/date'\n\nexport default function DatePickerInvalidDemo() {\n    const ly = startOfYear(today(getLocalTimeZone()))\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = useState(parseDate(ly.toString()))\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DatePicker\n                validate={(date) => (date < now ? 'Select a future date, please.' : null)}\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Delivery date'\n                className='mb-2'\n            />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDemo() {\n    return <DatePicker label='Event date' />\n}\n"
  },
  "date-and-time/date-picker/date-time-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-time-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = useState(today)\n\n    return (\n        <DatePicker\n            hideTimeZone\n            hourCycle={24}\n            className='max-w-xs'\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            label='Event date'\n        />\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DatePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n\n    const [value, setValue] = useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DatePicker value={value} onChange={(newValue) => setValue(newValue!)} label='Event date' />\n        </div>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, Form, TimeField } from '@/components/ui'\nimport type { Time } from '@internationalized/date'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = useState<Time>()\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <TimeField label='Event time' isRequired value={value} onChange={(v) => setValue(v!)} />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-hc-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Switch, TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldHcDemo() {\n    const [hc, setHc] = useState<12 | 24>(24)\n    const [value, setValue] = useState(new Time(13, 45))\n    return (\n        <>\n            <div className='absolute top-4 left-4 inline-flex min-w-32 flex-col gap-1'>\n                <Switch isSelected={hc === 24} onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}>\n                    {hc} hour\n                </Switch>\n            </div>\n            <TimeField value={value} onChange={(newValue) => setValue(newValue!)} hourCycle={hc} label='Event time' />\n        </>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldDemo() {\n    return (\n        <div className='grid grid-cols-4 gap-2'>\n            <TimeField label='Default' />\n            <TimeField label='Readonly' isReadOnly />\n            <TimeField label='Invalid' isInvalid />\n            <TimeField label='Disabled' isDisabled />\n        </div>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-controlled-demo",
    "raw": "'use client'\n\nimport { Time } from '@internationalized/date'\nimport { useState } from 'react'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = useState(new Time(11, 45))\n    return (\n        <div className='space-y-6'>\n            <TimeField label='Event time' value={value} onChange={(v) => setValue(v!)} />\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDisabledDemo() {\n    return <DateRangePicker isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport type { FormEvent } from 'react'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\n\nexport default function DateRangePickerCustomValidationDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n\n    const [value, setValue] = useState({\n        start: now,\n        end: tomorrowWeek\n    })\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DateRangePicker\n                label='Room Booking Dates'\n                validate={(range) =>\n                    range?.end.compare(range.start) > 7 ? 'Maximum booking duration is 1 week.' : null\n                }\n                defaultValue={{\n                    start: today(getLocalTimeZone()),\n                    end: today(getLocalTimeZone()).add({ weeks: 2 })\n                }}\n                value={value}\n                onChange={(v) => setValue(v!)}\n            />\n            <Button type='submit'>Book Room</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-time-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-time-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\nimport { useState } from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const tomorrowWeek = today.add({ days: 12 })\n\n    const [value, setValue] = useState({\n        start: today,\n        end: tomorrowWeek\n    })\n    return (\n        <DateRangePicker\n            hideTimeZone\n            label='Date time range'\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            hourCycle={24}\n        />\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-controlled-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { useState } from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    const [value, setValue] = useState({\n        start: now,\n        end: tomorrowWeek\n    })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>\n                    {value\n                        ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n                        : '-- to --'}\n                </p>\n                <p>{value ? `${value.start.toString()} to ${value.end.toString()}` : '-- to --'}</p>\n            </div>\n            <DateRangePicker value={value} onChange={(newValue) => setValue(newValue!)} label='Event date' />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-validation-demo",
    "raw": "'use client'\n\nimport { type FormEvent, useState } from 'react'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\nimport type { CalendarDate } from '@internationalized/date'\n\nexport default function DateRangePickerValidationDemo() {\n    const [value, setValue] = useState<{ start: CalendarDate; end: CalendarDate }>()\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        alert(value)\n    }\n\n    return (\n        <Form onSubmit={onSubmit} className='flex flex-col gap-4'>\n            <DateRangePicker isRequired label='Event date' value={value} onChange={(v) => setValue(v!)} />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDemo() {\n    return <DateRangePicker label='Event date' />\n}\n"
  },
  "charts/line/line-chart-dots-color-demo": {
    "component": "@/components/docs/charts/line/line-chart-dots-color-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Dot, Line, LineChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { department: 'Marketing', expenses: 275, fill: 'var(--color-marketing)' },\n    { department: 'Sales', expenses: 200, fill: 'var(--color-sales)' },\n    { department: 'IT', expenses: 187, fill: 'var(--color-it)' },\n    { department: 'HR', expenses: 173, fill: 'var(--color-hr)' },\n    { department: 'Operations', expenses: 90, fill: 'var(--color-operations)' }\n]\n\nconst chartConfig = {\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    },\n    marketing: {\n        label: 'Marketing',\n        color: 'var(--chart-1)'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-2)'\n    },\n    it: {\n        label: 'IT',\n        color: 'var(--chart-3)'\n    },\n    hr: {\n        label: 'HR',\n        color: 'var(--chart-4)'\n    },\n    operations: {\n        label: 'Operations',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsColorDemo() {\n    return (\n        <Card>\n            <Card.Header title='Departmental Expenses Overview' description='Jan - Jun 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 24,\n                            left: 24,\n                            right: 24\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' nameKey='expenses' hideLabel />}\n                        />\n                        <Line\n                            dataKey='expenses'\n                            type='natural'\n                            stroke='var(--color-expenses)'\n                            strokeWidth={2}\n                            dot={({ payload, ...props }) => {\n                                return (\n                                    <Dot\n                                        key={payload.department}\n                                        r={5}\n                                        cx={props.cx}\n                                        cy={props.cy}\n                                        fill={payload.fill}\n                                        stroke={payload.fill}\n                                    />\n                                )\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-multiple-demo": {
    "component": "@/components/docs/charts/line/line-chart-multiple-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'short' })\n    return {\n        month,\n        revenue: Math.floor(Math.random() * 300 + 200),\n        expenses: Math.floor(Math.random() * 150 + 50)\n    }\n})\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Revenue and Expenses Trend'\n                description='Monthly trends for revenue and expenses over the last 24 months'\n                className='items-center pb-0'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <Line\n                            dataKey='revenue'\n                            type='monotone'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                        <Line\n                            dataKey='expenses'\n                            type='monotone'\n                            stroke='var(--color-expenses)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-custom-dots-demo": {
    "component": "@/components/docs/charts/line/line-chart-custom-dots-demo",
    "raw": "'use client'\n\nimport { IconBadgeDollar } from 'hq-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nconst chartData = months.map((month) => ({\n    month,\n    sales: Math.floor(Math.random() * 300) + 150,\n    profit: Math.floor(Math.random() * 150) + 50\n}))\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartCustomDotsDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Monthly Sales & Profit'\n                description='Visualizing Monthly Sales & Profit for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Line\n                            dataKey='sales'\n                            type='natural'\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                            dot={({ cx, cy, payload }) => {\n                                const r = 24\n                                return (\n                                    <IconBadgeDollar\n                                        className='text-(--color-profit)'\n                                        key={payload.month}\n                                        x={cx - r / 2}\n                                        y={cy - r / 2}\n                                        width={r}\n                                        height={r}\n                                        fill='var(--bg)'\n                                        stroke='var(--color-sales)'\n                                    />\n                                )\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-linear-demo": {
    "component": "@/components/docs/charts/line/line-chart-linear-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 73 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 250 },\n    { month: 'Aug', revenue: 320 },\n    { month: 'Sep', revenue: 280 },\n    { month: 'Oct', revenue: 350 },\n    { month: 'Nov', revenue: 400 },\n    { month: 'Dec', revenue: 450 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header title='Annual Revenue Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Line\n                            dataKey='revenue'\n                            type='linear'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-basic-demo": {
    "component": "@/components/docs/charts/line/line-chart-basic-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 1500 },\n    { month: 'Feb', revenue: 3200 },\n    { month: 'Mar', revenue: 2900 },\n    { month: 'Apr', revenue: 2100 },\n    { month: 'May', revenue: 4000 },\n    { month: 'Jun', revenue: 3700 },\n    { month: 'Jul', revenue: 4300 },\n    { month: 'Aug', revenue: 4900 },\n    { month: 'Sep', revenue: 4700 },\n    { month: 'Oct', revenue: 5200 },\n    { month: 'Nov', revenue: 6000 },\n    { month: 'Dec', revenue: 7200 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Revenue Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-controlled-demo": {
    "component": "@/components/docs/charts/line/line-chart-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig, Toggle } from '@/components/ui'\n\nconst generateChartData = (startDate: string, endDate: string) => {\n    const result = []\n    const currentDate = new Date(startDate)\n\n    while (currentDate <= new Date(endDate)) {\n        const date = currentDate.toISOString().split('T')[0]\n        result.push({\n            date,\n            revenue: Math.floor(Math.random() * 5000), // Random revenue value\n            expenses: Math.floor(Math.random() * 3000) // Random expenses value\n        })\n        currentDate.setDate(currentDate.getDate() + 1)\n    }\n\n    return result\n}\n\nconst chartData = generateChartData('2024-04-01', '2024-06-30')\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartControlledDemo() {\n    const [activeChart, setActiveChart] = useState<keyof typeof chartConfig>('revenue')\n\n    return (\n        <Card>\n            <Card.Header className='flex flex-row items-center justify-between'>\n                <div className='space-y-1'>\n                    <Card.Title>Revenue vs Expenses</Card.Title>\n                    <Card.Description>Tracking daily revenue and expenses over the last 3 months</Card.Description>\n                </div>\n                <div className='flex gap-x-1'>\n                    {['revenue', 'expenses'].map((key) => {\n                        const chart = key as keyof typeof chartConfig\n                        return (\n                            <Toggle\n                                key={chart}\n                                isSelected={activeChart === chart}\n                                onPress={() => setActiveChart(chart)}\n                            >\n                                {chartConfig[chart].label}\n                            </Toggle>\n                        )\n                    })}\n                </div>\n            </Card.Header>\n            <Card.Content className='px-2 sm:p-6'>\n                <Chart config={chartConfig} className='aspect-auto h-[250px] w-full'>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            minTickGap={32}\n                            tickFormatter={(value) => {\n                                const date = new Date(value)\n                                return date.toLocaleDateString('en-US', {\n                                    month: 'short',\n                                    day: 'numeric'\n                                })\n                            }}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    className='w-[150px]'\n                                    nameKey='views'\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString('en-US', {\n                                            month: 'short',\n                                            day: 'numeric',\n                                            year: 'numeric'\n                                        })\n                                    }}\n                                />\n                            }\n                        />\n                        <Line\n                            dataKey={activeChart}\n                            type='monotone'\n                            stroke={`var(--color-${activeChart})`}\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-dots-demo": {
    "component": "@/components/docs/charts/line/line-chart-dots-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186, profit: 80 },\n    { month: 'Feb', revenue: 305, profit: 200 },\n    { month: 'Mar', revenue: 237, profit: 120 },\n    { month: 'Apr', revenue: 73, profit: 190 },\n    { month: 'May', revenue: 209, profit: 130 },\n    { month: 'Jun', revenue: 214, profit: 140 },\n    { month: 'Jul', revenue: 240, profit: 160 },\n    { month: 'Aug', revenue: 250, profit: 170 },\n    { month: 'Sep', revenue: 260, profit: 180 },\n    { month: 'Oct', revenue: 275, profit: 190 },\n    { month: 'Nov', revenue: 290, profit: 200 },\n    { month: 'Dec', revenue: 300, profit: 220 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Revenue and Profit' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-revenue)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-step-demo": {
    "component": "@/components/docs/charts/line/line-chart-step-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 12 }, (_, index) => {\n    const date = new Date(2024, index)\n    const month = date.toLocaleDateString('en-US', { month: 'short' })\n    return {\n        month,\n        sales: Math.floor(Math.random() * 300 + 150)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartStepDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Sales Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Line dataKey='sales' type='step' stroke='var(--color-sales)' strokeWidth={2} dot={false} />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-custom-label-demo": {
    "component": "@/components/docs/charts/line/line-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, LabelList, Line, LineChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { platform: 'Instagram', users: 275, fill: 'var(--color-instagram)' },\n    { platform: 'TikTok', users: 200, fill: 'var(--color-tiktok)' },\n    { platform: 'Twitter', users: 187, fill: 'var(--color-twitter)' },\n    { platform: 'LinkedIn', users: 173, fill: 'var(--color-linkedin)' },\n    { platform: 'Other', users: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    users: {\n        label: 'Users',\n        color: 'var(--chart-2)'\n    },\n    Instagram: {\n        label: 'Instagram',\n        color: 'var(--chart-1)'\n    },\n    TikTok: {\n        label: 'TikTok',\n        color: 'var(--chart-2)'\n    },\n    Twitter: {\n        label: 'Twitter',\n        color: 'var(--chart-3)'\n    },\n    LinkedIn: {\n        label: 'LinkedIn',\n        color: 'var(--chart-4)'\n    },\n    Other: {\n        label: 'Other',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header title='Platform User Growth' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 24,\n                            left: 24,\n                            right: 24\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' nameKey='users' hideLabel />}\n                        />\n                        <Line\n                            dataKey='users'\n                            type='natural'\n                            stroke='var(--color-users)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-users)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-fg'\n                                fontSize={12}\n                                dataKey='platform'\n                                formatter={(value: keyof typeof chartConfig) => chartConfig[value]?.label}\n                            />\n                        </Line>\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-label-demo": {
    "component": "@/components/docs/charts/line/line-chart-label-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, LabelList, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186, expenses: 80 },\n    { month: 'Feb', revenue: 305, expenses: 200 },\n    { month: 'Mar', revenue: 237, expenses: 120 },\n    { month: 'Apr', revenue: 73, expenses: 190 },\n    { month: 'May', revenue: 209, expenses: 130 },\n    { month: 'Jun', revenue: 214, expenses: 140 },\n    { month: 'Jul', revenue: 260, expenses: 160 },\n    { month: 'Aug', revenue: 320, expenses: 180 },\n    { month: 'Sep', revenue: 280, expenses: 150 },\n    { month: 'Oct', revenue: 350, expenses: 200 },\n    { month: 'Nov', revenue: 400, expenses: 210 },\n    { month: 'Dec', revenue: 450, expenses: 230 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header title='Annual Revenue & Expenses Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 20,\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-revenue)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList position='top' offset={12} className='fill-fg' fontSize={12} />\n                        </Line>\n                        <Line\n                            dataKey='expenses'\n                            type='natural'\n                            stroke='var(--color-expenses)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-expenses)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList position='top' offset={12} className='fill-fg' fontSize={12} />\n                        </Line>\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-icons-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-icons-demo",
    "raw": "'use client'\n\nimport { IconCircleDollar, IconShoppingCart } from 'hq-icons'\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 500 + 100),\n        expenses: Math.floor(Math.random() * 300 + 50)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)',\n        icon: IconShoppingCart\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)',\n        icon: IconCircleDollar\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartIconsDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Financial Overview'\n                description='Sales and expenses for the past 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar dataKey='sales' stackId='a' fill='var(--color-sales)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='expenses' stackId='a' fill='var(--color-expenses)' radius={[4, 4, 0, 0]} />\n                        <Chart.Tooltip content={<Chart.TooltipContent hideLabel />} cursor={false} defaultIndex={1} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-no-indicator-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-no-indicator-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        revenue: Math.floor(Math.random() * 500 + 300),\n        cost: Math.floor(Math.random() * 300 + 150)\n    }\n})\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    cost: {\n        label: 'Cost',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartNoIndicatorDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Revenue and Costs'\n                description='Tracking revenue and costs over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar dataKey='revenue' stackId='a' fill='var(--color-revenue)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='cost' stackId='a' fill='var(--color-cost)' radius={[4, 4, 0, 0]} />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent hideIndicator />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-no-label-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-no-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        products: Math.floor(Math.random() * 600 + 200),\n        services: Math.floor(Math.random() * 400 + 100)\n    }\n})\n\nconst chartConfig = {\n    products: {\n        label: 'Products',\n        color: 'var(--chart-1)'\n    },\n    services: {\n        label: 'Services',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartNoLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Products and Services Data'\n                description='Displaying products and services data over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar dataKey='products' stackId='a' fill='var(--color-products)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='services' stackId='a' fill='var(--color-services)' radius={[4, 4, 0, 0]} />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent hideIndicator hideLabel />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-custom-label-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { date: '2024-07-15', sales: 450, profit: 300 },\n    { date: '2024-07-16', sales: 380, profit: 420 },\n    { date: '2024-07-17', sales: 520, profit: 120 },\n    { date: '2024-07-18', sales: 140, profit: 550 },\n    { date: '2024-07-19', sales: 600, profit: 350 },\n    { date: '2024-07-20', sales: 480, profit: 400 }\n]\n\nconst chartConfig = {\n    metrics: {\n        label: 'Metrics'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Weekly Performance Metrics'\n                description='Analyzing sales and profit trends for Jul 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => {\n                                return new Date(value).toLocaleDateString('en-US', {\n                                    weekday: 'short'\n                                })\n                            }}\n                        />\n                        <Bar dataKey='sales' stackId='a' fill='var(--color-sales)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='profit' stackId='a' fill='var(--color-profit)' radius={[4, 4, 0, 0]} />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent labelKey='metrics' indicator='line' />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-advance-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-advance-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        coffee: Math.floor(Math.random() * 50 + 50),\n        snacks: Math.floor(Math.random() * 100 + 100)\n    }\n})\n\nconst chartConfig = {\n    coffee: {\n        label: 'Coffee',\n        color: 'var(--chart-1)'\n    },\n    snacks: {\n        label: 'Snacks',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartAdvanceDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Coffee & Snacks Expenses'\n                description='Tracking expenses on coffee and snacks for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar dataKey='coffee' stackId='a' fill='var(--color-coffee)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='snacks' stackId='a' fill='var(--color-snacks)' radius={[4, 4, 0, 0]} />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    hideLabel\n                                    className='w-[180px]'\n                                    formatter={(value, name, item, index) => (\n                                        <>\n                                            <div\n                                                className='size-2.5 shrink-0 rounded-[2px] bg-(--color-bg)'\n                                                style={\n                                                    {\n                                                        '--color-bg': `var(--color-${name})`\n                                                    } as React.CSSProperties\n                                                }\n                                            />\n                                            {chartConfig[name as keyof typeof chartConfig]?.label || name}\n                                            <div className='ml-auto flex items-baseline gap-0.5 font-medium font-mono text-foreground tabular-nums'>\n                                                {value}\n                                                <span className='font-normal text-muted-fg'>USD</span>\n                                            </div>\n                                            {/* Add this after the last item */}\n                                            {index === 1 && (\n                                                <div className='mt-1.5 flex basis-full items-center border-t pt-1.5 font-medium text-foreground text-xs'>\n                                                    Total\n                                                    <div className='ml-auto flex items-baseline gap-0.5 font-medium font-mono text-foreground tabular-nums'>\n                                                        {item.payload.coffee + item.payload.snacks}\n                                                        <span className='font-normal text-muted-fg'>USD</span>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-label-formatter-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-label-formatter-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 500 + 200),\n        profit: Math.floor(Math.random() * 300 + 100)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartLabelFormatterDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Financial Trends'\n                description='Sales and profit data for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar dataKey='sales' stackId='a' fill='var(--color-sales)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='profit' stackId='a' fill='var(--color-profit)' radius={[4, 4, 0, 0]} />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString('en-US', {\n                                            month: 'long',\n                                            year: 'numeric'\n                                        })\n                                    }}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-line-indicator-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-line-indicator-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 500 + 200),\n        profit: Math.floor(Math.random() * 300 + 100)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartLineIndicatorDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Sales and Profit'\n                description='Sales and profit trends for the past 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar dataKey='sales' stackId='a' fill='var(--color-sales)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='profit' stackId='a' fill='var(--color-profit)' radius={[4, 4, 0, 0]} />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent indicator='line' />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-default-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-default-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        groceries: Math.floor(Math.random() * 300 + 100),\n        utilities: Math.floor(Math.random() * 400 + 200)\n    }\n})\n\nconst chartConfig = {\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-1)'\n    },\n    utilities: {\n        label: 'Utilities',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartAdvanceDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Expense Breakdown'\n                description='Analyzing grocery and utility expenses for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar dataKey='groceries' stackId='a' fill='var(--color-groceries)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='utilities' stackId='a' fill='var(--color-utilities)' radius={[4, 4, 0, 0]} />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    hideLabel\n                                    className='w-[180px]'\n                                    formatter={(value, name, item, index) => (\n                                        <>\n                                            <div\n                                                className='size-2.5 shrink-0 rounded-[2px] bg-[--color-bg]'\n                                                style={\n                                                    {\n                                                        '--color-bg': `var(--color-${name})`\n                                                    } as React.CSSProperties\n                                                }\n                                            />\n                                            {chartConfig[name as keyof typeof chartConfig]?.label || name}\n                                            <div className='ml-auto flex items-baseline gap-0.5 font-medium font-mono text-foreground tabular-nums'>\n                                                {value}\n                                                <span className='font-normal text-muted-fg'>USD</span>\n                                            </div>\n                                            {index === 1 && (\n                                                <div className='mt-1.5 flex basis-full items-center border-t pt-1.5 font-medium text-foreground text-xs'>\n                                                    Total\n                                                    <div className='ml-auto flex items-baseline gap-0.5 font-medium font-mono text-foreground tabular-nums'>\n                                                        {item.payload.groceries + item.payload.utilities}\n                                                        <span className='font-normal text-muted-fg'>USD</span>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-formatter-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-formatter-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 1000 + 200),\n        profit: Math.floor(Math.random() * 500 + 100)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartFormatterDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Sales and Profit'\n                description='Visualizing data for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar dataKey='sales' stackId='a' fill='var(--color-sales)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='profit' stackId='a' fill='var(--color-profit)' radius={[4, 4, 0, 0]} />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    hideLabel\n                                    formatter={(value, name) => (\n                                        <div className='flex min-w-[130px] items-center text-muted-fg text-xs'>\n                                            {chartConfig[name as keyof typeof chartConfig]?.label || name}\n                                            <div className='ml-auto flex items-baseline gap-0.5 font-medium font-mono text-foreground tabular-nums'>\n                                                {value}\n                                                <span className='font-normal text-muted-fg'>USD</span>\n                                            </div>\n                                        </div>\n                                    )}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-active-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-active-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, Rectangle, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { os: 'Windows', users: 320, fill: 'var(--chart-1)' },\n    { os: 'MacOS', users: 200, fill: 'var(--chart-2)' },\n    { os: 'Linux', users: 150, fill: 'var(--chart-3)' },\n    { os: 'Android', users: 250, fill: 'var(--chart-4)' },\n    { os: 'iOS', users: 180, fill: 'var(--chart-5)' },\n    { os: 'ChromeOS', users: 90, fill: 'var(--chart-1)' },\n    { os: 'Ubuntu', users: 130, fill: 'var(--chart-2)' },\n    { os: 'Fedora', users: 100, fill: 'var(--chart-3)' },\n    { os: 'FreeBSD', users: 60, fill: 'var(--chart-5)' }\n]\n\nconst chartConfig = {\n    users: {\n        label: 'Users'\n    },\n    windows: {\n        label: 'Windows',\n        color: 'var(--chart-1)'\n    },\n    macos: {\n        label: 'MacOS',\n        color: 'var(--chart-2)'\n    },\n    linux: {\n        label: 'Linux',\n        color: 'var(--chart-3)'\n    },\n    android: {\n        label: 'Android',\n        color: 'var(--chart-4)'\n    },\n    ios: {\n        label: 'iOS',\n        color: 'var(--chart-5)'\n    },\n    chromeos: {\n        label: 'ChromeOS',\n        color: 'var(--chart-1)'\n    },\n    ubuntu: {\n        label: 'Ubuntu',\n        color: 'var(--chart-2)'\n    },\n    fedora: {\n        label: 'Fedora',\n        color: 'var(--chart-3)'\n    },\n    harmonyos: {\n        label: 'HarmonyOS',\n        color: 'var(--chart-4)'\n    },\n    freebsd: {\n        label: 'FreeBSD',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartActiveDemo() {\n    return (\n        <Card>\n            <Card.Header title='Operating System Usage' description='User distribution by OS in 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='os'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) =>\n                                chartConfig[value.toLowerCase() as keyof typeof chartConfig]?.label\n                            }\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Bar\n                            dataKey='users'\n                            strokeWidth={2}\n                            radius={8}\n                            activeIndex={1}\n                            activeBar={({ ...props }) => {\n                                return (\n                                    <Rectangle\n                                        {...props}\n                                        fillOpacity={0.8}\n                                        stroke={props.payload.fill}\n                                        strokeDasharray={4}\n                                        strokeDashoffset={4}\n                                    />\n                                )\n                            }}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-controlled-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-controlled-demo",
    "raw": "'use client'\n\nimport { useMemo, useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig, Select } from '@/components/ui'\n\nconst chartData = Array.from({ length: 50 }, (_, index) => {\n    const date = new Date(2024, 0, 1 + index)\n    return {\n        date: date.toISOString().split('T')[0],\n        sales: Math.floor(Math.random() * 1000 + 500),\n        revenue: Math.floor(Math.random() * 3000 + 1500)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartControlledDemo() {\n    const [activeChart, setActiveChart] = useState<Key | null>('sales')\n\n    const total = useMemo(\n        () => ({\n            sales: chartData.reduce((acc, curr) => acc + curr.sales, 0),\n            revenue: chartData.reduce((acc, curr) => acc + curr.revenue, 0)\n        }),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='flex-row items-center justify-between'>\n                <div className='space-y-1'>\n                    <Card.Title>Business Overview</Card.Title>\n                    <Card.Description>Displaying total sales and revenue for the last 50 days</Card.Description>\n                </div>\n                <div>\n                    <Select\n                        aria-label='Select a chart'\n                        selectedKey={activeChart}\n                        onSelectionChange={setActiveChart}\n                        className='sm:min-w-40'\n                    >\n                        {['sales', 'revenue'].map((key) => {\n                            const chart = key as keyof typeof chartConfig\n                            return (\n                                <Select.Item\n                                    key={chart}\n                                    data-active={activeChart === chart}\n                                    id={key}\n                                    textValue={chartConfig[chart].label}\n                                >\n                                    <Select.Details\n                                        label={chartConfig[chart].label}\n                                        description={total[key as keyof typeof total].toLocaleString()}\n                                    />\n                                </Select.Item>\n                            )\n                        })}\n                    </Select>\n                </div>\n            </Card.Header>\n            <Card.Content className='px-2 sm:p-6'>\n                <Chart config={chartConfig} className='aspect-auto h-[250px] w-full'>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            minTickGap={32}\n                            tickFormatter={(value) => {\n                                const date = new Date(value)\n                                return date.toLocaleDateString('en-US', {\n                                    month: 'short',\n                                    day: 'numeric'\n                                })\n                            }}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    className='w-[150px]'\n                                    nameKey='views'\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString('en-US', {\n                                            month: 'short',\n                                            day: 'numeric',\n                                            year: 'numeric'\n                                        })\n                                    }}\n                                />\n                            }\n                        />\n                        <Bar dataKey={activeChart as keyof typeof chartConfig} fill={`var(--color-${activeChart})`} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-label-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst surveyData = [\n    { category: 'Customer Support', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 }\n]\n\nconst chartConfig = {\n    satisfaction: {\n        label: 'Satisfaction',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header title='Customer Satisfaction Survey' description='Satisfaction scores by category' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={surveyData}\n                        margin={{\n                            top: 20\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='category' tickLine={false} tickMargin={10} axisLine={false} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Bar dataKey='satisfaction' fill='var(--color-satisfaction)' radius={8}>\n                            <LabelList position='top' offset={12} className='fill-fg' fontSize={12} />\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-mixed-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-mixed-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, Legend, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    {\n        browser: 'chrome',\n        visitors: 275,\n        bounceRate: 40,\n        avgSession: 5.6,\n        fill: 'var(--color-chrome)'\n    },\n    {\n        browser: 'safari',\n        visitors: 200,\n        bounceRate: 35,\n        avgSession: 6.3,\n        fill: 'var(--color-safari)'\n    },\n    {\n        browser: 'firefox',\n        visitors: 187,\n        bounceRate: 45,\n        avgSession: 4.2,\n        fill: 'var(--color-firefox)'\n    },\n    { browser: 'edge', visitors: 173, bounceRate: 30, avgSession: 5.0, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, bounceRate: 50, avgSession: 3.7, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors',\n        color: 'var(--chart-1)'\n    },\n    bounceRate: {\n        label: 'Bounce Rate (%)',\n        color: 'var(--chart-2)'\n    },\n    avgSession: {\n        label: 'Avg Session (min)',\n        color: 'var(--chart-3)'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'var(--chart-1)'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'var(--chart-2)'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'var(--chart-3)'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'var(--chart-4)'\n    },\n    other: {\n        label: 'Other',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartGroupedDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Browser Metrics'\n                description='Grouped data for visitors, bounce rate, and average session duration'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        layout='vertical'\n                        margin={{\n                            left: 0\n                        }}\n                    >\n                        <CartesianGrid horizontal={false} />\n                        <YAxis\n                            dataKey='browser'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => chartConfig[value as keyof typeof chartConfig]?.label}\n                        />\n                        <XAxis type='number' hide />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Legend />\n                        <Bar dataKey='visitors' layout='vertical' fill='var(--color-chrome)' radius={5} />\n                        <Bar dataKey='bounceRate' layout='vertical' fill='var(--color-safari)' radius={5} />\n                        <Bar dataKey='avgSession' layout='vertical' fill='var(--color-firefox)' radius={5} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-horizontal-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-horizontal-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst performanceData = [\n    { dataCenter: 'New York', uptime: 99.9 },\n    { dataCenter: 'San Francisco', uptime: 97.5 },\n    { dataCenter: 'Singapore', uptime: 98.7 },\n    { dataCenter: 'London', uptime: 95.3 },\n    { dataCenter: 'Tokyo', uptime: 94.8 },\n    { dataCenter: 'Sydney', uptime: 99.9 },\n    { dataCenter: 'Seoul', uptime: 97.5 }\n]\n\nconst chartConfig = {\n    uptime: {\n        label: 'Uptime (%)',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartHorizontalDemo() {\n    return (\n        <Card>\n            <Card.Header title='Data Center Uptime' description='Uptime percentage by region for Q1 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={performanceData}\n                        layout='vertical'\n                        margin={{\n                            left: -20\n                        }}\n                    >\n                        <XAxis type='number' dataKey='uptime' hide />\n                        <YAxis dataKey='dataCenter' type='category' tickLine={false} tickMargin={10} axisLine={false} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Bar dataKey='uptime' fill='var(--color-uptime)' radius={5} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-multiple-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 12 }, (_, i) => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    return {\n        month: months[i],\n        sales: 1000 + Math.floor(Math.random() * 300), // Random value for Sales\n        expenses: 800 + Math.floor(Math.random() * 400), // Random value for Expenses\n        profit: 200 + Math.floor(Math.random() * 900) // Random value for Profit\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-4)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Sales vs Expenses'\n                description='The chart shows the sales and expenses for the last year.'\n                className='items-center pb-4'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='max-h-[250px] w-full'>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} tickMargin={10} axisLine={false} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='dashed' />} />\n                        <Bar dataKey='sales' fill='var(--color-sales)' radius={4} />\n                        <Bar dataKey='expenses' fill='var(--color-expenses)' radius={4} />\n                        <Bar dataKey='profit' fill='var(--color-profit)' radius={4} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-negative-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-negative-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, Cell, LabelList } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', profitLoss: 1200 },\n    { month: 'Feb', profitLoss: 1500 },\n    { month: 'Mar', profitLoss: -700 },\n    { month: 'Apr', profitLoss: 2000 },\n    { month: 'May', profitLoss: -1500 },\n    { month: 'Jun', profitLoss: 1700 },\n    { month: 'Jul', profitLoss: -1200 },\n    { month: 'Aug', profitLoss: 1900 },\n    { month: 'Sep', profitLoss: -1400 },\n    { month: 'Oct', profitLoss: -1800 },\n    { month: 'Nov', profitLoss: 2100 },\n    { month: 'Dec', profitLoss: 1600 }\n]\n\nconst chartConfig = {\n    profitLoss: {\n        label: 'Profit/Loss'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartNegativeDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Profit and Loss' description='January - December 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel hideIndicator />} />\n                        <Bar dataKey='profitLoss'>\n                            <LabelList position='top' dataKey='month' fillOpacity={1} />\n                            {chartData.map((item) => (\n                                <Cell\n                                    key={item.month}\n                                    fill={item.profitLoss > 0 ? 'var(--chart-1)' : 'var(--chart-2)'}\n                                />\n                            ))}\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-basic-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-basic-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst salesData = Array.from({ length: 48 }, (_, index) => {\n    const month = new Date(new Date().getFullYear() - 4, Math.floor(index / 2)).toLocaleDateString('en-US', {\n        month: 'short'\n    })\n    const startDay = index % 2 === 0 ? 1 : 15\n    const endDay = index % 2 === 0 ? 14 : 28\n    return {\n        period: `${month} ${startDay} - ${month} ${endDay}`,\n        revenue: Math.floor(Math.random() * 5000 + 2000)\n    }\n})\n\nconst salesConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Biweekly Revenue'\n                description='Revenue breakdown every 2 weeks (Jan - Dec 2024)'\n                className='items-center pb-0'\n            />\n            <Card.Content>\n                <Chart config={salesConfig}>\n                    <BarChart accessibilityLayer data={salesData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='period' tickLine={false} tickMargin={10} axisLine={false} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Bar dataKey='revenue' fill='var(--color-revenue)' radius={0} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-horizontal-label-inset-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-horizontal-label-inset-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, Rectangle, XAxis, YAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    {\n        country: 'United States',\n        count: 45000,\n        percentage: 45.0\n    },\n    {\n        country: 'Canada',\n        count: 34000,\n        percentage: 18.0\n    },\n    {\n        country: 'United Kingdom',\n        count: 30000,\n        percentage: 12.0\n    },\n    {\n        country: 'Germany',\n        count: 25000,\n        percentage: 9.0\n    },\n    {\n        country: 'Australia',\n        count: 22000,\n        percentage: 7.5\n    },\n    {\n        country: 'France',\n        count: 18000,\n        percentage: 6.0\n    },\n    {\n        country: 'Japan',\n        count: 15000,\n        percentage: 4.5\n    },\n    {\n        country: 'Brazil',\n        count: 13000,\n        percentage: 5.0\n    },\n    {\n        country: 'Indonesia',\n        count: 10030,\n        percentage: 6.0\n    }\n]\n\nconst chartConfig = {\n    count: {\n        label: 'Count',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartHorizontalLabelInsetDemo() {\n    return (\n        <Card className='h-full w-full'>\n            <Card.Header>\n                <Card.Title>Traffic by Country</Card.Title>\n                <Card.Description>Since Aug 17, 2014</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart config={chartConfig} className='aspect-[15/11] sm:aspect-[17/11]'>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        layout='vertical'\n                        barSize={30}\n                        margin={{ left: 0, right: 0 }}\n                    >\n                        <YAxis dataKey='name' type='category' hide />\n                        <XAxis dataKey='count' type='number' hide />\n                        <Bar\n                            dataKey='count'\n                            layout='vertical'\n                            fill='var(--color-count)'\n                            background={{ radius: 6, fill: 'var(--chart-1)', opacity: 0.2 }}\n                            radius={6}\n                            shape={({ ...props }) => (\n                                <>\n                                    <Rectangle {...props} />\n                                    <text x={props.x + 10} y={props.y + 20} fill='white'>\n                                        {props.country}\n                                    </text>\n                                    <text\n                                        x={props.background.width - 10}\n                                        y={props.y + 20}\n                                        textAnchor='end'\n                                        fill='var(--fg)'\n                                    >\n                                        {props.count.toLocaleString()} ({props.percentage.toFixed(1)}%)\n                                    </text>\n                                </>\n                            )}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='dot' />} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-custom-label-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst projectData = [\n    { team: 'Engineering', completed: 42, ongoing: 15 },\n    { team: 'Design', completed: 30, ongoing: 5 },\n    { team: 'Marketing', completed: 25, ongoing: 10 },\n    { team: 'Sales', completed: 20, ongoing: 8 },\n    { team: 'Support', completed: 35, ongoing: 12 },\n    { team: 'Engineering', completed: 42, ongoing: 15 },\n    { team: 'Design', completed: 30, ongoing: 5 },\n    { team: 'Marketing', completed: 25, ongoing: 10 },\n    { team: 'Sales', completed: 20, ongoing: 8 },\n    { team: 'Support', completed: 35, ongoing: 12 },\n    { team: 'Engineering', completed: 42, ongoing: 15 },\n    { team: 'Design', completed: 30, ongoing: 5 }\n]\n\nconst chartConfig = {\n    completed: {\n        label: 'Completed',\n        color: 'var(--chart-1)'\n    },\n    ongoing: {\n        label: 'Ongoing',\n        color: 'var(--chart-2)'\n    },\n    label: {\n        color: 'var(--bg)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header title='Team Project Status' description='Completed vs Ongoing Projects by Team' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={projectData}\n                        layout='vertical'\n                        margin={{\n                            right: 16\n                        }}\n                    >\n                        <CartesianGrid horizontal={false} />\n                        <YAxis dataKey='team' type='category' tickLine={false} tickMargin={10} axisLine={false} />\n                        <XAxis dataKey='completed' type='number' hide />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <Bar dataKey='completed' layout='vertical' fill='var(--color-completed)' radius={4}>\n                            <LabelList\n                                dataKey='team'\n                                position='insideLeft'\n                                offset={8}\n                                className='fill-(--color-label)'\n                                fontSize={12}\n                            />\n                            <LabelList\n                                dataKey='completed'\n                                position='right'\n                                offset={8}\n                                className='fill-fg'\n                                fontSize={12}\n                            />\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-stacked-legend-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-stacked-legend-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 3200, expenses: 2400 },\n    { month: 'Feb', revenue: 2800, expenses: 2000 },\n    { month: 'Mar', revenue: 3500, expenses: 2700 },\n    { month: 'Apr', revenue: 3000, expenses: 2200 },\n    { month: 'May', revenue: 3600, expenses: 2800 },\n    { month: 'Jun', revenue: 3400, expenses: 2600 },\n    { month: 'Jul', revenue: 3900, expenses: 3100 },\n    { month: 'Aug', revenue: 4100, expenses: 3300 },\n    { month: 'Sep', revenue: 3700, expenses: 2900 },\n    { month: 'Oct', revenue: 4200, expenses: 3400 },\n    { month: 'Nov', revenue: 4000, expenses: 3100 },\n    { month: 'Dec', revenue: 4300, expenses: 3500 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartStackedLegendDemo() {\n    return (\n        <Card>\n            <Card.Header title='Biweekly Revenue' description='Revenue breakdown every 2 weeks (Jan - Dec 2024)' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Chart.Tooltip content={<Chart.TooltipContent hideLabel />} />\n                        <Chart.Legend content={<Chart.LegendContent />} />\n                        <Bar dataKey='revenue' stackId='a' fill='var(--chart-1)' radius={[0, 0, 4, 4]} />\n                        <Bar dataKey='expenses' stackId='a' fill='var(--chart-2)' radius={[4, 4, 0, 0]} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-step-demo": {
    "component": "@/components/docs/charts/area/area-chart-step-demo",
    "raw": "'use client'\n\nimport { IconChartArea } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst enrollmentData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        newEnrollments: Math.floor(Math.random() * 20 + 40)\n    }\n})\n\nconst enrollmentConfig = {\n    newEnrollments: {\n        label: 'New Enrollments',\n        color: 'var(--chart-1)',\n        icon: IconChartArea\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStepDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Enrollment Growth'\n                description='Monthly student enrollments over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={enrollmentConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={enrollmentData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Area\n                            dataKey='newEnrollments'\n                            type='step'\n                            fill='var(--color-newEnrollments)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-newEnrollments)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-icon-demo": {
    "component": "@/components/docs/charts/area/area-chart-icon-demo",
    "raw": "'use client'\n\nimport { IconShoppingBag, IconStore } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst revenueData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        ecommerce: Math.floor(Math.random() * 5000 + 10000),\n        retail: Math.floor(Math.random() * 3000 + 7000)\n    }\n})\n\nconst revenueConfig = {\n    ecommerce: {\n        label: 'E-Commerce',\n        color: 'var(--chart-1)',\n        icon: IconShoppingBag\n    },\n    retail: {\n        label: 'Retail',\n        color: 'var(--chart-2)',\n        icon: IconStore\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartIconDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Revenue Overview'\n                description='Monthly revenue comparison between E-Commerce and Retail over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={revenueConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={revenueData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <Area\n                            dataKey='retail'\n                            type='natural'\n                            fill='var(--color-retail)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-retail)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='ecommerce'\n                            type='natural'\n                            fill='var(--color-ecommerce)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-ecommerce)'\n                            stackId='a'\n                        />\n                        <Chart.Legend content={<Chart.LegendContent />} />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-basic-demo": {
    "component": "@/components/docs/charts/area/area-chart-basic-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst salesData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        revenue: Math.floor(Math.random() * 5000 + 2000)\n    }\n})\n\nconst salesConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Revenue Trends'\n                description='Monthly revenue for the last 24 months'\n                className='items-center pb-0'\n            />\n            <Card.Content>\n                <Chart config={salesConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={salesData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <Area\n                            dataKey='revenue'\n                            type='natural'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-revenue)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-gradient-demo": {
    "component": "@/components/docs/charts/area/area-chart-gradient-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst salesData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        online: Math.floor(Math.random() * 2000 + 3000),\n        inStore: Math.floor(Math.random() * 1000 + 1500)\n    }\n})\n\nconst chartConfig = {\n    online: {\n        label: 'Online Sales',\n        color: 'var(--chart-1)'\n    },\n    inStore: {\n        label: 'In-Store Sales',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartGradientDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Sales Channel Analysis'\n                description='Monthly comparison of online and in-store sales over the last 24 months'\n                className='items-center pb-4'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='max-h-[250px] w-full'>\n                    <AreaChart\n                        accessibilityLayer\n                        data={salesData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <defs>\n                            <linearGradient id='fillOnline' x1='0' y1='0' x2='0' y2='1'>\n                                <stop offset='5%' stopColor='var(--color-online)' stopOpacity={0.8} />\n                                <stop offset='95%' stopColor='var(--color-online)' stopOpacity={0.1} />\n                            </linearGradient>\n                            <linearGradient id='fillInStore' x1='0' y1='0' x2='0' y2='1'>\n                                <stop offset='5%' stopColor='var(--color-inStore)' stopOpacity={0.8} />\n                                <stop offset='95%' stopColor='var(--color-inStore)' stopOpacity={0.1} />\n                            </linearGradient>\n                        </defs>\n                        <Area\n                            dataKey='inStore'\n                            type='natural'\n                            fill='url(#fillInStore)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-inStore)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='online'\n                            type='natural'\n                            fill='url(#fillOnline)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-online)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-axes-demo": {
    "component": "@/components/docs/charts/area/area-chart-axes-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis, YAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'var(--chart-1)'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartAxesDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Axes</Card.Title>\n                <Card.Description>Showing total visitors for the last 6 months</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: -20,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <YAxis tickLine={false} axisLine={false} tickMargin={8} tickCount={3} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='var(--color-mobile)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-linear-demo": {
    "component": "@/components/docs/charts/area/area-chart-linear-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst visitorData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        uniqueVisitors: Math.floor(Math.random() * 500 + 1000)\n    }\n})\n\nconst visitorConfig = {\n    uniqueVisitors: {\n        label: 'Unique Visitors',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Visitor Insights'\n                description='Monthly unique visitors over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={visitorConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={visitorData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='dot' hideLabel />} />\n                        <Area\n                            dataKey='uniqueVisitors'\n                            type='linear'\n                            fill='var(--color-uniqueVisitors)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-uniqueVisitors)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-legend-demo": {
    "component": "@/components/docs/charts/area/area-chart-legend-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst salesData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        wholesale: Math.floor(Math.random() * 1000 + 500),\n        retail: Math.floor(Math.random() * 1000 + 1500)\n    }\n})\n\nconst salesConfig = {\n    wholesale: {\n        label: 'Wholesale',\n        color: 'var(--chart-1)'\n    },\n    retail: {\n        label: 'Retail',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Overview'\n                description='Distribution of wholesale and retail sales over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={salesConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={salesData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <Area\n                            dataKey='retail'\n                            type='natural'\n                            fill='var(--color-retail)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-retail)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='wholesale'\n                            type='natural'\n                            fill='var(--color-wholesale)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-wholesale)'\n                            stackId='a'\n                        />\n                        <Chart.Legend content={<Chart.LegendContent />} />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-stacked-expanded-demo": {
    "component": "@/components/docs/charts/area/area-chart-stacked-expanded-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst trafficData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        organic: Math.floor(Math.random() * 100 + 150),\n        paid: Math.floor(Math.random() * 50 + 100),\n        referral: Math.floor(Math.random() * 50 + 50)\n    }\n})\n\nconst trafficConfig = {\n    organic: {\n        label: 'Organic',\n        color: 'var(--chart-1)'\n    },\n    paid: {\n        label: 'Paid',\n        color: 'var(--chart-2)'\n    },\n    referral: {\n        label: 'Referral',\n        color: 'var(--chart-3)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedExpandedDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Traffic Analysis'\n                description='Distribution of traffic sources over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={trafficConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={trafficData}\n                        margin={{\n                            left: 20,\n                            right: 20,\n                            top: 20\n                        }}\n                        stackOffset='expand'\n                    >\n                        <CartesianGrid vertical={false} strokeDasharray='3 3' />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor content={<Chart.TooltipContent indicator='line' />} />\n                        <Area\n                            dataKey='referral'\n                            type='monotone'\n                            fill='var(--chart-3)'\n                            fillOpacity={0.1}\n                            stroke='var(--chart-3)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='paid'\n                            type='monotone'\n                            fill='var(--chart-2)'\n                            fillOpacity={0.4}\n                            stroke='var(--chart-2)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='organic'\n                            type='monotone'\n                            fill='var(--chart-1)'\n                            fillOpacity={0.4}\n                            stroke='var(--chart-1)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-stacked-demo": {
    "component": "@/components/docs/charts/area/area-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst engagementData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        likes: Math.floor(Math.random() * 50 + 100),\n        comments: Math.floor(Math.random() * 30 + 40)\n    }\n})\n\nconst engagementConfig = {\n    likes: {\n        label: 'Likes',\n        color: 'var(--chart-1)'\n    },\n    comments: {\n        label: 'Comments',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Audience Engagement Analysis'\n                description='Tracking monthly likes and comments over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={engagementConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={engagementData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='dot' />} />\n                        <Area\n                            dataKey='comments'\n                            type='natural'\n                            fill='var(--color-comments)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-comments)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='likes'\n                            type='natural'\n                            fill='var(--color-likes)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-likes)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-none-separator-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-none-separator-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { manufacturer: 'Tesla', marketShare: 275, fill: 'var(--color-tesla)' },\n    { manufacturer: 'Rivian', marketShare: 200, fill: 'var(--color-rivian)' },\n    { manufacturer: 'Ford', marketShare: 187, fill: 'var(--color-ford)' },\n    { manufacturer: 'Lucid Motors', marketShare: 173, fill: 'var(--color-lucid)' },\n    { manufacturer: 'Others', marketShare: 90, fill: 'var(--color-others)' }\n]\n\nconst chartConfig = {\n    marketShare: {\n        label: 'Market Share'\n    },\n    tesla: {\n        label: 'Tesla',\n        color: 'var(--chart-1)'\n    },\n    rivian: {\n        label: 'Rivian',\n        color: 'var(--chart-2)'\n    },\n    ford: {\n        label: 'Ford',\n        color: 'var(--chart-3)'\n    },\n    lucid: {\n        label: 'Lucid Motors',\n        color: 'var(--chart-4)'\n    },\n    others: {\n        label: 'Others',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartNoneSeparatorDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0' title='Market Share' description='January - June 2024' />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Pie data={chartData} dataKey='marketShare' nameKey='manufacturer' stroke='0' />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-donut-active-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-donut-active-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart, Sector } from 'recharts'\nimport type { PieSectorDataItem } from 'recharts/types/polar/Pie'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 500, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 300, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 450, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 200, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 100, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutActiveDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Allocation by Category'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Pie\n                            data={chartData}\n                            dataKey='sales'\n                            nameKey='category'\n                            innerRadius={60}\n                            strokeWidth={5}\n                            activeIndex={0}\n                            activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                                <Sector {...props} outerRadius={outerRadius + 10} />\n                            )}\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-label-list-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-label-list-demo",
    "raw": "'use client'\n\nimport { LabelList, Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { manufacturer: 'Tesla', marketShare: 500, fill: 'var(--color-tesla)' },\n    { manufacturer: 'Rivian', marketShare: 150, fill: 'var(--color-rivian)' },\n    { manufacturer: 'Ford', marketShare: 200, fill: 'var(--color-ford)' },\n    { manufacturer: 'Lucid Motors', marketShare: 120, fill: 'var(--color-lucid)' },\n    { manufacturer: 'Others', marketShare: 80, fill: 'var(--color-others)' }\n]\n\nconst chartConfig = {\n    marketShare: {\n        label: 'Market Share'\n    },\n    tesla: {\n        label: 'Tesla',\n        color: 'var(--chart-1)'\n    },\n    rivian: {\n        label: 'Rivian',\n        color: 'var(--chart-2)'\n    },\n    ford: {\n        label: 'Ford',\n        color: 'var(--chart-3)'\n    },\n    lucid: {\n        label: 'Lucid Motors',\n        color: 'var(--chart-4)'\n    },\n    others: {\n        label: 'Others',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLabelListDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='EV Market Share by Manufacturer'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px] [&_.recharts-text]:fill-bg'>\n                    <PieChart>\n                        <Chart.Tooltip content={<Chart.TooltipContent nameKey='marketShare' hideLabel />} />\n                        <Pie data={chartData} dataKey='marketShare'>\n                            <LabelList\n                                dataKey='manufacturer'\n                                className='fill-bg'\n                                stroke='none'\n                                fontSize={12}\n                                formatter={(value: keyof typeof chartConfig) => chartConfig[value]?.label}\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-donut-with-text-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-donut-with-text-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\n\nimport { Label, Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 275, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 287, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 173, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 190, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutWithTextDemo() {\n    const totalSales = useMemo(() => {\n        return chartData.reduce((acc, curr) => acc + curr.sales, 0)\n    }, [])\n\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Sales Allocation by Category</Card.Title>\n                <Card.Description>Jan - Jun 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Pie data={chartData} dataKey='sales' nameKey='category' innerRadius={60} strokeWidth={5}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg font-bold text-3xl'\n                                                >\n                                                    {totalSales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Sales\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-legend-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-legend-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { region: 'tesla', visitors: 275, fill: 'var(--color-tesla)' },\n    { region: 'rivian', visitors: 200, fill: 'var(--color-rivian)' },\n    { region: 'ford', visitors: 187, fill: 'var(--color-ford)' },\n    { region: 'lucid', visitors: 173, fill: 'var(--color-lucid)' },\n    { region: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    tesla: {\n        label: 'Tesla',\n        color: 'var(--chart-1)'\n    },\n    rivian: {\n        label: 'Rivian',\n        color: 'var(--chart-2)'\n    },\n    ford: {\n        label: 'Ford',\n        color: 'var(--chart-3)'\n    },\n    lucid: {\n        label: 'Lucid',\n        color: 'var(--chart-4)'\n    },\n    other: {\n        label: 'Other',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='EV Market'\n                description='Showing total visitors for the first half of 2024 by region'\n                className='items-center pb-0'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[300px]'>\n                    <PieChart>\n                        <Pie data={chartData} dataKey='visitors' />\n                        <Chart.Legend\n                            content={<Chart.LegendContent nameKey='region' />}\n                            className='-translate-y-2 flex-wrap gap-2 *:basis-1/4 *:justify-center'\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-stacked-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst northAmericaData = [\n    { region: 'North America', sales: 500, fill: 'var(--color-north-america)' },\n    { region: 'Europe', sales: 300, fill: 'var(--color-europe)' },\n    { region: 'Asia', sales: 400, fill: 'var(--color-asia)' },\n    { region: 'Africa', sales: 150, fill: 'var(--color-africa)' },\n    { region: 'South America', sales: 100, fill: 'var(--color-south-america)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    northAmerica: {\n        label: 'North America',\n        color: 'var(--chart-1)'\n    },\n    europe: {\n        label: 'Europe',\n        color: 'var(--chart-2)'\n    },\n    asia: {\n        label: 'Asia',\n        color: 'var(--chart-3)'\n    },\n    africa: {\n        label: 'Africa',\n        color: 'var(--chart-4)'\n    },\n    southAmerica: {\n        label: 'South America',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartStackedDemo() {\n    return (\n        <Card>\n            <Card.Header title='Sales Distribution by Region' description='January - June 2024' />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    labelKey='sales'\n                                    nameKey='region'\n                                    indicator='line'\n                                    labelFormatter={(_, payload) => {\n                                        return chartConfig[payload?.[0]?.dataKey as keyof typeof chartConfig].label\n                                    }}\n                                />\n                            }\n                        />\n                        <Pie data={northAmericaData} dataKey='sales' outerRadius={60} />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-custom-label-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Sales', amount: 275, fill: 'var(--color-sales)' },\n    { category: 'Marketing', amount: 200, fill: 'var(--color-marketing)' },\n    { category: 'IT', amount: 187, fill: 'var(--color-it)' },\n    { category: 'HR', amount: 173, fill: 'var(--color-hr)' },\n    { category: 'Operations', amount: 90, fill: 'var(--color-operations)' }\n]\n\nconst chartConfig = {\n    amount: {\n        label: 'Amount'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    marketing: {\n        label: 'Marketing',\n        color: 'var(--chart-2)'\n    },\n    it: {\n        label: 'IT',\n        color: 'var(--chart-3)'\n    },\n    hr: {\n        label: 'HR',\n        color: 'var(--chart-4)'\n    },\n    operations: {\n        label: 'Operations',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Departmental Budget Allocation</Card.Title>\n                <Card.Description>Jan - Jun 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px] px-0'>\n                    <PieChart>\n                        <Chart.Tooltip content={<Chart.TooltipContent nameKey='amount' hideLabel />} />\n                        <Pie\n                            data={chartData}\n                            dataKey='amount'\n                            labelLine={false}\n                            label={({ payload, ...props }) => {\n                                return (\n                                    <text\n                                        cx={props.cx}\n                                        cy={props.cy}\n                                        x={props.x}\n                                        y={props.y}\n                                        textAnchor={props.textAnchor}\n                                        dominantBaseline={props.dominantBaseline}\n                                        fill='var(--fg)'\n                                    >\n                                        {payload.amount}\n                                    </text>\n                                )\n                            }}\n                            nameKey='category'\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-basic-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-basic-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Sales', amount: 275, fill: 'var(--color-sales)' },\n    { category: 'Marketing', amount: 200, fill: 'var(--color-marketing)' },\n    { category: 'IT', amount: 187, fill: 'var(--color-it)' },\n    { category: 'HR', amount: 173, fill: 'var(--color-hr)' },\n    { category: 'Operations', amount: 90, fill: 'var(--color-operations)' }\n]\n\nconst chartConfig = {\n    amount: {\n        label: 'Amount'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    marketing: {\n        label: 'Marketing',\n        color: 'var(--chart-2)'\n    },\n    it: {\n        label: 'IT',\n        color: 'var(--chart-3)'\n    },\n    hr: {\n        label: 'HR',\n        color: 'var(--chart-4)'\n    },\n    operations: {\n        label: 'Operations',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Departmental Budget Allocation</Card.Title>\n                <Card.Description>Jan - Jun 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Pie data={chartData} dataKey='amount' nameKey='category' />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-label-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-label-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 275, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 187, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 173, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 90, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Allocation by Category'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px] pb-0 [&_.recharts-pie-label-text]:fill-fg'\n                >\n                    <PieChart>\n                        <Chart.Tooltip content={<Chart.TooltipContent hideLabel />} />\n                        <Pie data={chartData} dataKey='sales' label nameKey='category' />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-controlled-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-controlled-demo",
    "raw": "'use client'\n\nimport { useMemo, useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Label, Pie, PieChart, Sector } from 'recharts'\nimport type { PieSectorDataItem } from 'recharts/types/polar/Pie'\n\nimport { Card, Chart, type ChartConfig, ChartStyle, Select } from '@/components/ui'\n\nconst data = [\n    { month: 'january', sales: 3186, fill: 'var(--color-january)' },\n    { month: 'february', sales: 2305, fill: 'var(--color-february)' },\n    { month: 'march', sales: 4237, fill: 'var(--color-march)' },\n    { month: 'april', sales: 4173, fill: 'var(--color-april)' },\n    { month: 'may', sales: 5209, fill: 'var(--color-may)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    sales: {\n        label: 'Sales'\n    },\n    profit: {\n        label: 'Profit'\n    },\n    january: {\n        label: 'January',\n        color: 'var(--chart-1)'\n    },\n    february: {\n        label: 'February',\n        color: 'var(--chart-2)'\n    },\n    march: {\n        label: 'March',\n        color: 'var(--chart-3)'\n    },\n    april: {\n        label: 'April',\n        color: 'var(--chart-4)'\n    },\n    may: {\n        label: 'May',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartControlledDemo() {\n    const id = 'pie-interactive'\n    const [activeMonth, setActiveMonth] = useState<Key | null>(data[0]?.month)\n\n    const activeIndex = useMemo(() => data.findIndex((item) => item.month === activeMonth), [activeMonth])\n    const months = useMemo(() => data.map((item) => item.month), [])\n\n    return (\n        <Card data-chart={id} className='flex flex-col'>\n            <ChartStyle id={id} config={config} />\n            <Card.Header className='flex-row items-start space-y-0 pb-0'>\n                <div className='grid w-full gap-1'>\n                    <Card.Title className='capitalize'>{activeMonth}</Card.Title>\n                    <Card.Description>\n                        The total sales for the month is{' '}\n                        <strong className='font-semibold'>{data[activeIndex]?.sales.toLocaleString()}</strong>\n                    </Card.Description>\n                </div>\n                <Select\n                    selectedKey={activeMonth}\n                    onSelectionChange={setActiveMonth}\n                    className='ml-auto'\n                    aria-label='Select a value'\n                >\n                    {months.map((key) => {\n                        const _config = config[key as keyof typeof config]\n\n                        if (!_config) {\n                            return null\n                        }\n\n                        return (\n                            <Select.Item key={key} id={key}>\n                                {_config?.label}\n                            </Select.Item>\n                        )\n                    })}\n                </Select>\n            </Card.Header>\n            <Card.Content className='flex flex-1 justify-center pb-0'>\n                <Chart id={id} config={config} className='mx-auto aspect-square w-full max-w-[315px]'>\n                    <PieChart>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Pie\n                            data={data}\n                            dataKey='sales'\n                            nameKey='month'\n                            innerRadius={60}\n                            strokeWidth={5}\n                            activeIndex={activeIndex}\n                            activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                                <g>\n                                    <Sector {...props} outerRadius={outerRadius + 10} />\n                                    <Sector {...props} outerRadius={outerRadius + 25} innerRadius={outerRadius + 12} />\n                                </g>\n                            )}\n                        >\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg font-semibold text-2xl'\n                                                >\n                                                    {data[activeIndex]?.sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-donut-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-donut-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 275, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 187, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 173, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 90, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Allocation by Category'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <Pie data={chartData} dataKey='sales' nameKey='category' innerRadius={60} />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-grid-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-grid-demo",
    "raw": "'use client'\n\nimport { PolarGrid, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 320, fill: 'var(--color-electronics)' },\n    { category: 'Furniture', sales: 250, fill: 'var(--color-furniture)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Sports', sales: 180, fill: 'var(--color-sports)' },\n    { category: 'Books', sales: 100, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-2)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-3)'\n    },\n    sports: {\n        label: 'Sports',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function RadialBarChartGridDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Category Sales Overview'\n                description='Visualizing sales distribution across categories for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart data={chartData} innerRadius={30} outerRadius={100}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel nameKey='category' />} />\n                        <PolarGrid gridType='circle' />\n                        <RadialBar dataKey='sales' />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-basic-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-basic-demo",
    "raw": "'use client'\n\nimport { RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 320, fill: 'var(--color-electronics)' },\n    { category: 'Furniture', sales: 250, fill: 'var(--color-furniture)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Sports', sales: 180, fill: 'var(--color-sports)' },\n    { category: 'Books', sales: 100, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-2)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-3)'\n    },\n    sports: {\n        label: 'Sports',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function RadialBarChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Category Sales Overview'\n                description='Visualizing sales distribution across categories for the year 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart data={chartData} innerRadius={30} outerRadius={110}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel nameKey='category' />} />\n                        <RadialBar dataKey='sales' background />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-text-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-text-demo",
    "raw": "'use client'\n\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [{ product: 'Laptops', sales: 200, fill: 'var(--color-laptops)' }]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    laptops: {\n        label: 'Laptops',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function ProductSalesOverview() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Laptop Sales Performance'\n                description='Tracking sales data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart data={chartData} startAngle={0} endAngle={250} innerRadius={80} outerRadius={110}>\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-bg'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='sales' background cornerRadius={10} />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg font-bold text-4xl'\n                                                >\n                                                    {chartData[0]?.sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Sales\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-shape-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-shape-demo",
    "raw": "'use client'\n\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [{ category: 'Electronics', sales: 1260, fill: 'var(--color-electronics)' }]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function SalesPerformance() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Electronics Sales Performance'\n                description='Sales data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart data={chartData} endAngle={100} innerRadius={80} outerRadius={140}>\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-bg'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='sales' background />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg font-bold text-4xl'\n                                                >\n                                                    {chartData[0]?.sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Sales\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-label-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-label-demo",
    "raw": "'use client'\n\nimport { LabelList, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Apples', quantity: 320, fill: 'var(--color-apples)' },\n    { category: 'Oranges', quantity: 250, fill: 'var(--color-oranges)' },\n    { category: 'Bananas', quantity: 200, fill: 'var(--color-bananas)' },\n    { category: 'Grapes', quantity: 180, fill: 'var(--color-grapes)' },\n    { category: 'Berries', quantity: 100, fill: 'var(--color-berries)' }\n]\n\nconst chartConfig = {\n    quantity: {\n        label: 'Quantity'\n    },\n    apples: {\n        label: 'Apples',\n        color: 'var(--chart-1)'\n    },\n    oranges: {\n        label: 'Oranges',\n        color: 'var(--chart-2)'\n    },\n    bananas: {\n        label: 'Bananas',\n        color: 'var(--chart-3)'\n    },\n    grapes: {\n        label: 'Grapes',\n        color: 'var(--chart-4)'\n    },\n    berries: {\n        label: 'Berries',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function SalesDistribution() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Fruit Sales Distribution'\n                description='Sales data of various fruit categories for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart data={chartData} startAngle={-90} endAngle={380} innerRadius={30} outerRadius={110}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel nameKey='category' />} />\n                        <RadialBar dataKey='quantity' background>\n                            <LabelList\n                                position='insideStart'\n                                dataKey='category'\n                                className='fill-white capitalize mix-blend-luminosity'\n                                fontSize={11}\n                            />\n                        </RadialBar>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-stacked-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Label, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [{ month: 'January', sales: 1260, profit: 570 }]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function SalesPerformanceOverview() {\n    const totalRevenue = chartData[0]?.sales + chartData[0]?.profit\n\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Monthly Revenue Distribution'\n                description='Visualizing sales and profit for Jan - Dec 2024'\n            />\n            <Card.Content className='flex flex-1 items-center pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square w-full max-w-[250px]'>\n                    <RadialBarChart data={chartData} endAngle={180} innerRadius={80} outerRadius={130}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text x={viewBox.cx} y={viewBox.cy} textAnchor='middle'>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) - 16}\n                                                    className='fill-fg font-bold text-2xl'\n                                                >\n                                                    {totalRevenue.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 4}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Total Revenue\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                        <RadialBar\n                            dataKey='sales'\n                            stackId='a'\n                            cornerRadius={5}\n                            fill='var(--color-sales)'\n                            className='stroke-2 stroke-transparent'\n                        />\n                        <RadialBar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            stackId='a'\n                            cornerRadius={5}\n                            className='stroke-2 stroke-transparent'\n                        />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-circle-filled-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-circle-filled-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186 },\n    { month: 'Feb', sales: 285 },\n    { month: 'Mar', sales: 237 },\n    { month: 'Apr', sales: 203 },\n    { month: 'May', sales: 209 },\n    { month: 'Jun', sales: 264 },\n    { month: 'Jul', sales: 290 },\n    { month: 'Aug', sales: 310 },\n    { month: 'Sep', sales: 320 },\n    { month: 'Oct', sales: 330 },\n    { month: 'Nov', sales: 350 },\n    { month: 'Dec', sales: 370 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridCircleFilledDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Monthly Sales Overview'\n                description='Displaying sales data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarGrid className='fill-[--color-sales] opacity-20' gridType='circle' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.5} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-lines-only-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-lines-only-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186, profit: 160 },\n    { month: 'Feb', revenue: 185, profit: 170 },\n    { month: 'Mar', revenue: 207, profit: 180 },\n    { month: 'Apr', revenue: 173, profit: 160 },\n    { month: 'May', revenue: 160, profit: 190 },\n    { month: 'Jun', revenue: 174, profit: 204 },\n    { month: 'Jul', revenue: 190, profit: 210 },\n    { month: 'Aug', revenue: 200, profit: 220 },\n    { month: 'Sep', revenue: 210, profit: 230 },\n    { month: 'Oct', revenue: 220, profit: 240 },\n    { month: 'Nov', revenue: 230, profit: 250 },\n    { month: 'Dec', revenue: 240, profit: 260 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartLinesOnlyDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Revenue vs Profit'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid radialLines={false} />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0}\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                        />\n                        <Radar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            fillOpacity={0}\n                            stroke='var(--color-profit)'\n                            strokeWidth={2}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-dots-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-dots-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 273 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 220 },\n    { month: 'Aug', revenue: 230 },\n    { month: 'Sep', revenue: 240 },\n    { month: 'Oct', revenue: 250 },\n    { month: 'Nov', revenue: 260 },\n    { month: 'Dec', revenue: 270 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center'>\n                <Card.Title>Monthly Revenue Radar Chart</Card.Title>\n                <Card.Description>Displaying revenue trends for Jan - Dec 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-radius-axis-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-radius-axis-demo",
    "raw": "'use client'\n\nimport { PolarGrid, PolarRadiusAxis, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 230, profit: 150 },\n    { month: 'Aug', sales: 250, profit: 160 },\n    { month: 'Sep', sales: 270, profit: 170 },\n    { month: 'Oct', sales: 290, profit: 180 },\n    { month: 'Nov', sales: 310, profit: 190 },\n    { month: 'Dec', sales: 330, profit: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartRadiusAxisDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales and Profit Analysis'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' labelKey='month' />}\n                        />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                        <PolarRadiusAxis angle={60} stroke='var(--fg)' orientation='middle' axisLine={false} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-icons-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-icons-demo",
    "raw": "'use client'\n\nimport { IconBadgeDollar, IconShoppingBag } from 'hq-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 250, profit: 150 },\n    { month: 'Aug', sales: 270, profit: 160 },\n    { month: 'Sep', sales: 290, profit: 170 },\n    { month: 'Oct', sales: 310, profit: 180 },\n    { month: 'Nov', sales: 330, profit: 190 },\n    { month: 'Dec', sales: 350, profit: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)',\n        icon: IconShoppingBag\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)',\n        icon: IconBadgeDollar\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartIconsDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales and Profit'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: -40,\n                            bottom: -10\n                        }}\n                    >\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                        <Chart.Legend className='mt-8' content={<Chart.LegendContent />} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-multiple-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 230, profit: 150 },\n    { month: 'Aug', sales: 250, profit: 160 },\n    { month: 'Sep', sales: 270, profit: 170 },\n    { month: 'Oct', sales: 290, profit: 180 },\n    { month: 'Nov', sales: 310, profit: 190 },\n    { month: 'Dec', sales: 330, profit: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales and Profit Comparison'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-legend-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-legend-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, expenses: 80 },\n    { month: 'Feb', sales: 305, expenses: 200 },\n    { month: 'Mar', sales: 237, expenses: 120 },\n    { month: 'Apr', sales: 73, expenses: 190 },\n    { month: 'May', sales: 209, expenses: 130 },\n    { month: 'Jun', sales: 214, expenses: 140 },\n    { month: 'Jul', sales: 230, expenses: 150 },\n    { month: 'Aug', sales: 250, expenses: 160 },\n    { month: 'Sep', sales: 270, expenses: 170 },\n    { month: 'Oct', sales: 290, expenses: 180 },\n    { month: 'Nov', sales: 310, expenses: 190 },\n    { month: 'Dec', sales: 330, expenses: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales vs Expenses'\n                description='Comparing data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: -40,\n                            bottom: -10\n                        }}\n                    >\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='expenses' fill='var(--color-expenses)' />\n                        <Chart.Legend className='mt-8' content={<Chart.LegendContent />} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-circle-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-circle-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', profit: 186 },\n    { month: 'Feb', profit: 305 },\n    { month: 'Mar', profit: 237 },\n    { month: 'Apr', profit: 273 },\n    { month: 'May', profit: 209 },\n    { month: 'Jun', profit: 214 },\n    { month: 'Jul', profit: 220 },\n    { month: 'Aug', profit: 230 },\n    { month: 'Sep', profit: 240 },\n    { month: 'Oct', profit: 250 },\n    { month: 'Nov', profit: 260 },\n    { month: 'Dec', profit: 270 }\n]\n\nconst chartConfig = {\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function Component() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Profit Distribution'\n                description='Profit trends displayed for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <PolarGrid gridType='circle' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-circle-no-lines-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-circle-no-lines-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 203 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 220 },\n    { month: 'Aug', revenue: 250 },\n    { month: 'Sep', revenue: 270 },\n    { month: 'Oct', revenue: 290 },\n    { month: 'Nov', revenue: 310 },\n    { month: 'Dec', revenue: 330 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function Component() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Monthly Revenue Breakdown'\n                description='Revenue data displayed for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <PolarGrid gridType='circle' radialLines={false} />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-basic-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-basic-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 186 },\n    { category: 'Clothing', sales: 305 },\n    { category: 'Groceries', sales: 237 },\n    { category: 'Furniture', sales: 273 },\n    { category: 'Toys', sales: 209 },\n    { category: 'Beauty', sales: 214 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='By Category'\n                description='Sales performance by category (Jan - Jun 2024)'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarAngleAxis dataKey='category' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-custom-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-custom-demo",
    "raw": "'use client'\n\nimport { PolarGrid, PolarRadiusAxis, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, expenses: 80 },\n    { month: 'Feb', sales: 305, expenses: 200 },\n    { month: 'Mar', sales: 237, expenses: 120 },\n    { month: 'Apr', sales: 73, expenses: 190 },\n    { month: 'May', sales: 209, expenses: 130 },\n    { month: 'Jun', sales: 214, expenses: 140 },\n    { month: 'Jul', sales: 230, expenses: 150 },\n    { month: 'Aug', sales: 250, expenses: 170 },\n    { month: 'Sep', sales: 270, expenses: 180 },\n    { month: 'Oct', sales: 290, expenses: 200 },\n    { month: 'Nov', sales: 310, expenses: 220 },\n    { month: 'Dec', sales: 330, expenses: 250 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function Component() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales vs Expenses'\n                description='Comparing sales and expenses for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' labelKey='month' />}\n                        />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='expenses' fill='var(--color-expenses)' />\n                        <PolarRadiusAxis angle={60} stroke='var(--fg)' orientation='middle' axisLine={false} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-custom-label-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 45000, expenses: 30000 },\n    { month: 'Feb', revenue: 50000, expenses: 32000 },\n    { month: 'Mar', revenue: 47000, expenses: 31000 },\n    { month: 'Apr', revenue: 52000, expenses: 35000 },\n    { month: 'May', revenue: 48000, expenses: 33000 },\n    { month: 'Jun', revenue: 51000, expenses: 34000 },\n    { month: 'Jul', revenue: 53000, expenses: 36000 },\n    { month: 'Aug', revenue: 55000, expenses: 37000 },\n    { month: 'Sep', revenue: 54000, expenses: 35000 },\n    { month: 'Oct', revenue: 56000, expenses: 38000 },\n    { month: 'Nov', revenue: 58000, expenses: 39000 },\n    { month: 'Dec', revenue: 60000, expenses: 40000 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Monthly Financial Overview'\n                description='Revenue and expenses for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }}\n                    >\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator='line' />} />\n                        <PolarAngleAxis\n                            dataKey='month'\n                            tick={({ x, y, textAnchor, index, ...props }) => {\n                                const data = chartData[index]!\n\n                                return (\n                                    <text\n                                        x={x}\n                                        y={index === 0 ? y - 10 : y}\n                                        textAnchor={textAnchor}\n                                        fontSize={13}\n                                        fontWeight={500}\n                                        {...props}\n                                    >\n                                        <tspan>{data.revenue}</tspan>\n                                        <tspan className='fill-muted-fg'>/</tspan>\n                                        <tspan>{data.expenses}</tspan>\n                                        <tspan x={x} dy={'1rem'} fontSize={12} className='fill-muted-fg'>\n                                            {data.month}\n                                        </tspan>\n                                    </text>\n                                )\n                            }}\n                        />\n\n                        <PolarGrid />\n                        <Radar dataKey='revenue' fill='var(--color-revenue)' fillOpacity={0.6} />\n                        <Radar dataKey='expenses' fill='var(--color-expenses)' />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-filled-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-filled-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 285 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 203 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 264 },\n    { month: 'Jul', revenue: 290 },\n    { month: 'Aug', revenue: 310 },\n    { month: 'Sep', revenue: 330 },\n    { month: 'Oct', revenue: 350 },\n    { month: 'Nov', revenue: 370 },\n    { month: 'Dec', revenue: 390 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridFilledDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Revenue Radar Chart'\n                description='Revenue data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <PolarGrid className='fill-[--color-revenue] opacity-20' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar dataKey='revenue' fill='var(--color-revenue)' fillOpacity={0.5} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-none-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-none-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 273 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 250 },\n    { month: 'Aug', revenue: 270 },\n    { month: 'Sep', revenue: 290 },\n    { month: 'Oct', revenue: 310 },\n    { month: 'Nov', revenue: 330 },\n    { month: 'Dec', revenue: 350 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridNoneDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Revenue Growth'\n                description='Revenue trends for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/scatter/scatter-chart-basic-demo": {
    "component": "@/components/docs/charts/scatter/scatter-chart-basic-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Scatter, ScatterChart, XAxis, YAxis, ZAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = Array.from({ length: 30 }, (_, index) => ({\n    x: Math.floor(Math.random() * 500 + 50),\n    y: Math.floor(Math.random() * 30000 + 2000),\n    z: Math.floor(Math.random() * 200 + 10),\n    store: `Store ${index + 1}`\n}))\n\nconst chartConfig = {\n    performance: {\n        label: 'Store Performance',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function StorePerformanceAnalysis() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Store Performance Analysis'\n                description='Insights into revenue, footfall, and average order value across stores'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='max-h-min min-h-32'>\n                    <ScatterChart>\n                        <CartesianGrid strokeDasharray='3 3' />\n                        <XAxis type='number' dataKey='x' name='Footfall' unit='k' tickLine={false} axisLine={false} />\n                        <YAxis type='number' dataKey='y' name='Revenue' unit='$' tickLine={false} axisLine={false} />\n                        <ZAxis type='number' dataKey='z' name='Avg Order Value' unit='$' />\n                        <Chart.Tooltip content={<Chart.TooltipContent indicator='dashed' />} />\n                        <Scatter data={data} fill='var(--chart-1)' />\n                    </ScatterChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "controls/command/command-async-demo": {
    "component": "@/components/docs/controls/command/command-async-demo",
    "raw": "'use client'\n\nimport { useAsyncList } from 'react-stately'\n\nimport { Command } from '@/components/ui'\n\nexport default function CommandSeparatorDemo() {\n    const list = useAsyncList<{ title: string }>({\n        async load({ signal, filterText }) {\n            const res = await fetch(`https://dummyjson.com/posts/search?q=${filterText}`, {\n                signal\n            }).then((r) => r.json())\n            return {\n                items: res.posts\n            }\n        }\n    })\n    return (\n        <Command\n            items={list.items}\n            onInputChange={list.setFilterText}\n            inputValue={list.filterText}\n            isPending={list.isLoading}\n        >\n            {(item) => (\n                <Command.Item key={item.title} id={item.title} textValue={item.title}>\n                    <Command.Label>{item.title}</Command.Label>\n                </Command.Item>\n            )}\n        </Command>\n    )\n}\n"
  },
  "controls/command/command-demo": {
    "component": "@/components/docs/controls/command/command-demo",
    "raw": "'use client'\n\nimport { IconHome, IconLayoutDashboard, IconPackage, IconPalette, IconShapes } from 'hq-icons'\n\nimport { Command } from '@/components/ui'\n\nexport default function CommandDemo() {\n    return (\n        <Command>\n            <Command.Item textValue='home'>\n                <IconHome />\n                <Command.Label>Home</Command.Label>\n            </Command.Item>\n            <Command.Item textValue='documenation'>\n                <IconPackage />\n                <Command.Label>Documentation</Command.Label>\n            </Command.Item>\n            <Command.Item textValue='blocks'>\n                <IconLayoutDashboard />\n                <Command.Label>Blocks</Command.Label>\n            </Command.Item>\n            <Command.Item textValue='icons'>\n                <IconShapes />\n                <Command.Label>Icons</Command.Label>\n            </Command.Item>\n            <Command.Item textValue='colors'>\n                <IconPalette />\n                <Command.Label>Colors</Command.Label>\n            </Command.Item>\n        </Command>\n    )\n}\n"
  },
  "controls/command/command-section-demo": {
    "component": "@/components/docs/controls/command/command-section-demo",
    "raw": "'use client'\n\nimport { Avatar, Command } from '@/components/ui'\n\nexport default function CommandSectionDemo() {\n    return (\n        <Command>\n            <Command.Section title='Pages'>\n                <Command.Item textValue='home'>\n                    <Command.Label>Home</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='documenation'>\n                    <Command.Label>Documentation</Command.Label>\n                </Command.Item>\n            </Command.Section>\n            <Command.Separator />\n            <Command.Section title='Users' items={users}>\n                {(item) => (\n                    <Command.Item id={item.id} textValue={item.name}>\n                        <Avatar src={item.image_url} />\n                        <Command.Label>{item.name}</Command.Label>\n                    </Command.Item>\n                )}\n            </Command.Section>\n        </Command>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "controls/command/command-trigger-by-keyboard-demo": {
    "component": "@/components/docs/controls/command/command-trigger-by-keyboard-demo",
    "raw": "'use client'\n\nimport { IconHome, IconLayoutDashboard, IconPackage, IconPalette, IconShapes } from 'hq-icons'\nimport { useState } from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandTriggerByKeyboardDemo() {\n    const [open, setOpen] = useState<boolean>(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setOpen(true)}>\n                <Command.Shortcut keys={['meta', '/']} />\n            </Button>\n            <Command.Modal isOpen={open} onOpenChange={setOpen} shortcut={{ key: '/' }}>\n                <Command.Item textValue='home'>\n                    <IconHome />\n                    <Command.Label>Home</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='documenation'>\n                    <IconPackage />\n                    <Command.Label>Documentation</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='blocks'>\n                    <IconLayoutDashboard />\n                    <Command.Label>Blocks</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='icons'>\n                    <IconShapes />\n                    <Command.Label>Icons</Command.Label>\n                </Command.Item>\n                <Command.Item textValue='colors'>\n                    <IconPalette />\n                    <Command.Label>Colors</Command.Label>\n                </Command.Item>\n            </Command.Modal>\n        </>\n    )\n}\n"
  },
  "controls/command/command-controlled-demo": {
    "component": "@/components/docs/controls/command/command-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Command } from '@/components/ui'\n\nconst items = [\n    { id: 1, name: 'Ubuntu' },\n    { id: 2, name: 'Debian' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'CentOS' },\n    { id: 6, name: 'Gentoo' },\n    { id: 7, name: 'OpenSuse' },\n    { id: 8, name: 'Redhat' },\n    { id: 9, name: 'FreeBSD' },\n    { id: 10, name: 'NetBSD' }\n]\n\nexport default function CommandControlledDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set([1]))\n    return (\n        <div className='space-y-6'>\n            <Command\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n                aria-label='Linux Distros'\n                selectionMode='multiple'\n            >\n                {(item) => (\n                    <Command.Item id={item.id} textValue={item.name}>\n                        <Command.Label>{item.name}</Command.Label>\n                    </Command.Item>\n                )}\n            </Command>\n\n            <code>{JSON.stringify({ selected: [...selected] })}</code>\n        </div>\n    )\n}\n"
  },
  "controls/command/command-danger-item-demo": {
    "component": "@/components/docs/controls/command/command-danger-item-demo",
    "raw": "'use client'\n\nimport { Command } from '@/components/ui'\n\nexport default function CommandDangerItemDemo() {\n    return (\n        <Command>\n            <Command.Item>System Shutdown</Command.Item>\n            <Command.Item isDanger>Format Disk</Command.Item>\n            <Command.Item>Restart Service</Command.Item>\n            <Command.Item>Empty Trash</Command.Item>\n            <Command.Item>Overwrite File</Command.Item>\n            <Command.Item isDanger>Reset Factory Settings</Command.Item>\n            <Command.Item>Disconnect Network</Command.Item>\n        </Command>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-variants-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-variants-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconCamera,\n    IconCameraOff,\n    IconEye,\n    IconImage,\n    IconImageOff,\n    IconItalic,\n    IconLink,\n    IconLinkOff,\n    IconPencil,\n    IconUnderline\n} from 'hq-icons'\n\nimport { Toolbar } from '@/components/ui'\n\nexport default function ToolbarVariantsDemo() {\n    return (\n        <Toolbar aria-label='Toolbars'>\n            <Toolbar.Group icon variant='solid' aria-label='Text Formatting Options'>\n                <Toolbar.Item aria-label='Bold'>\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Italic'>\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Underline'>\n                    <IconUnderline />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group icon variant='outline' aria-label='Alignment'>\n                <Toolbar.Item aria-label='Align Left'>\n                    <IconAlignLeft />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Center'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Right'>\n                    <IconAlignRight />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group icon variant='ghost' aria-label='Objects'>\n                <Toolbar.Item aria-label='Image'>\n                    {({ isSelected }) => (isSelected ? <IconImage /> : <IconImageOff />)}\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Link'>\n                    {({ isSelected }) => (isSelected ? <IconLink /> : <IconLinkOff />)}\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Camera'>\n                    {({ isSelected }) => (isSelected ? <IconCamera /> : <IconCameraOff />)}\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group variant='outline' aria-label='Mode'>\n                <Toolbar.Item aria-label='View'>\n                    <IconEye />\n                    View\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Edit'>\n                    <IconPencil />\n                    Edit\n                </Toolbar.Item>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-disabled-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-disabled-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignJustify,\n    IconAlignRight,\n    IconCamera,\n    IconImage,\n    IconPencil,\n    IconPencilRuler,\n    IconPointer\n} from 'hq-icons'\n\nimport { Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDisabledDemo() {\n    return (\n        <Toolbar aria-label='Toolbox'>\n            <Toolbar.Group icon aria-label='Toolbox'>\n                <Toggle isDisabled aria-label='Cursor'>\n                    <IconPointer />\n                </Toggle>\n                <Toggle aria-label='Pencil Box'>\n                    <IconPencil />\n                </Toggle>\n                <Toggle aria-label='Pencil Box'>\n                    <IconPencilRuler />\n                </Toggle>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group icon isDisabled aria-label='Gallery'>\n                <Toolbar.Item aria-label='Camera'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery'>\n                    <IconImage />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group icon aria-label='Alignment'>\n                <Toggle aria-label='Align Right'>\n                    <IconAlignRight />\n                </Toggle>\n                <Toggle aria-label='Align Justify'>\n                    <IconAlignJustify />\n                </Toggle>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-orientation-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-orientation-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustify,\n    IconAlignLeft,\n    IconCamera,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconEllipsisVertical,\n    IconImage,\n    IconLayoutGrid,\n    IconLink,\n    IconPencil,\n    IconPencilRuler,\n    IconPointer\n} from 'hq-icons'\n\nimport { Menu, Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarOrientationDemo() {\n    return (\n        <Toolbar aria-label='Toolbox' orientation='vertical'>\n            <Toolbar.Group icon aria-label='Toolbox'>\n                <Toolbar.Item aria-label='Cursor'>\n                    <IconPointer />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Pencil Box'>\n                    <IconPencil />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Pencil Box'>\n                    <IconPencilRuler />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group icon aria-label='Gallery'>\n                <Toolbar.Item aria-label='Camera'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery'>\n                    <IconImage />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group icon aria-label='Alignment'>\n                <Toggle aria-label='Align Left'>\n                    <IconAlignLeft />\n                </Toggle>\n                <Toolbar.Item aria-label='Align Center'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify'>\n                    <IconAlignJustify />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group icon>\n                <Menu>\n                    <Toolbar.Item aria-label='Other options'>\n                        <IconEllipsisVertical />\n                    </Toolbar.Item>\n                    <Menu.Content placement='right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconImage />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustify,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconChevronDown,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconImage,\n    IconItalic,\n    IconLayoutGrid,\n    IconLink,\n    IconStrikethrough,\n    IconUnderline\n} from 'hq-icons'\n\nimport { Checkbox, Menu, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDemo() {\n    return (\n        <Toolbar aria-label='Toolbars'>\n            <Toolbar.Group icon aria-label='Text Formatting Options'>\n                <Toolbar.Item aria-label='Bold'>\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Italic'>\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Underline'>\n                    <IconUnderline />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Strikethrough'>\n                    <IconStrikethrough />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group icon aria-label='Alignment'>\n                <Toolbar.Item aria-label='Align Left'>\n                    <IconAlignLeft />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Center'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Right'>\n                    <IconAlignRight />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify'>\n                    <IconAlignJustify />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group>\n                <Menu>\n                    <Toolbar.Item aria-label='Other options'>\n                        Options...\n                        <IconChevronDown />\n                    </Toolbar.Item>\n                    <Menu.Content placement='bottom right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconImage />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n            <Checkbox>Spell Check</Checkbox>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/slider/slider-step-demo": {
    "component": "@/components/docs/controls/slider/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderStepDemo() {\n    return <Slider step={10} description='Step in 10' label='Step Slider' />\n}\n"
  },
  "controls/slider/slider-controlled-demo": {
    "component": "@/components/docs/controls/slider/slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderControlledDemo() {\n    const [temperature, setTemperature] = React.useState<number>(31)\n    const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n    return (\n        <div className='space-y-6'>\n            <Slider\n                value={temperature}\n                onChange={(v) => setTemperature(v as number)}\n                label='Temperature'\n                description={`Current temperature: ${temperature ?? '-'}`}\n            />\n            <Slider\n                value={saturation}\n                onChange={(v) => setSaturation(v as number[])}\n                label='Saturation'\n                description={`Current saturation: ${saturation ?? '-'}`}\n            />\n        </div>\n    )\n}\n"
  },
  "controls/slider/slider-disabled-demo": {
    "component": "@/components/docs/controls/slider/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDisabledDemo() {\n    return <Slider isDisabled label='Volume' />\n}\n"
  },
  "controls/slider/slider-range-demo": {
    "component": "@/components/docs/controls/slider/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderRangeDemo() {\n    return <Slider defaultValue={[25, 75]} label='Slider Range' />\n}\n"
  },
  "controls/slider/slider-demo": {
    "component": "@/components/docs/controls/slider/slider-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDemo() {\n    return <Slider label='Volume' />\n}\n"
  },
  "controls/slider/slider-orientation-demo": {
    "component": "@/components/docs/controls/slider/slider-orientation-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Card, Description, Slider } from '@/components/ui'\n\nexport default function SliderOrientationDemo() {\n    const [equalizer, setEqualizer] = useState({\n        subBass: 40,\n        bass: 50,\n        lowMid: 60,\n        mid: 70,\n        highMid: 65,\n        presence: 75,\n        brilliance: 80\n    })\n\n    const handleSliderChange = (name: string, value: number) => {\n        setEqualizer((prev) => ({ ...prev, [name]: value }))\n    }\n\n    return (\n        <Card className='p-4'>\n            <div className='flex justify-center gap-4 [&>*]:w-6'>\n                <Slider\n                    aria-label='Sub Bass'\n                    value={equalizer.subBass}\n                    onChange={(newValue) => handleSliderChange('subBass', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Bass'\n                    value={equalizer.bass}\n                    onChange={(newValue) => handleSliderChange('bass', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Low Mid'\n                    value={equalizer.lowMid}\n                    onChange={(newValue) => handleSliderChange('lowMid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Mid'\n                    value={equalizer.mid}\n                    onChange={(newValue) => handleSliderChange('mid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='High Mid'\n                    value={equalizer.highMid}\n                    onChange={(newValue) => handleSliderChange('highMid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Presence'\n                    value={equalizer.presence}\n                    onChange={(newValue) => handleSliderChange('presence', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Brilliance'\n                    value={equalizer.brilliance}\n                    onChange={(newValue) => handleSliderChange('brilliance', newValue as number)}\n                    orientation='vertical'\n                />\n            </div>\n            <Description className='mt-6 block text-center'>Equilizer</Description>\n        </Card>\n    )\n}\n"
  },
  "controls/keyboard/keyboard-menu-demo": {
    "component": "@/components/docs/controls/keyboard/keyboard-menu-demo",
    "raw": "'use client'\n\nimport { Keyboard, Menu } from '@/components/ui'\n\nexport default function KeyboardMenuDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Options</Menu.Trigger>\n            <Menu.Content>\n                <Menu.Item>\n                    <Menu.Label>Copy</Menu.Label>\n                    <Keyboard keys={['mod', 'c']} />\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Cut</Menu.Label>\n                    <Keyboard keys={['mod', 'x']} />\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Paste</Menu.Label>\n                    <Keyboard keys={['mod', 'v']} />\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "controls/keyboard/keyboard-command-demo": {
    "component": "@/components/docs/controls/keyboard/keyboard-command-demo",
    "raw": "'use client'\n\nimport { IconFolderTree, IconPanelLeftClose, IconSettings, IconX } from 'hq-icons'\n\nimport { Command, Keyboard } from '@/components/ui'\n\nexport default function KeyboardCommandDemo() {\n    return (\n        <Command>\n            <Command.Item textValue='explorer'>\n                <IconFolderTree />\n                <Command.Label>Explorer</Command.Label>\n                <Keyboard keys={['mod', 'shift', 'e']} />\n            </Command.Item>\n            <Command.Item textValue='hide sidebar'>\n                <IconPanelLeftClose />\n                <Command.Label>Hide Sidebar</Command.Label>\n                <Keyboard keys={['mod', 'b']} />\n            </Command.Item>\n            <Command.Item textValue='settings'>\n                <IconSettings />\n                <Command.Label>Settings</Command.Label>\n                <Keyboard keys={['mod', ',']} />\n            </Command.Item>\n            <Command.Item textValue='quit'>\n                <IconX />\n                <Command.Label>Quit</Command.Label>\n                <Keyboard keys={['alt', 'F4']} />\n            </Command.Item>\n        </Command>\n    )\n}\n"
  },
  "controls/keyboard/keyboard-tooltip-demo": {
    "component": "@/components/docs/controls/keyboard/keyboard-tooltip-demo",
    "raw": "'use client'\n\nimport { IconBold } from 'hq-icons'\n\nimport { Keyboard, Tooltip } from '@/components/ui'\n\nexport default function KeyboardTooltipDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger>\n                <IconBold />\n            </Tooltip.Trigger>\n            <Tooltip.Content>\n                <span className='mr-4'>Bold</span>\n                <Keyboard keys={['mod', 'b']} />\n            </Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "controls/keyboard/keyboard-basic-demo": {
    "component": "@/components/docs/controls/keyboard/keyboard-basic-demo",
    "raw": "import { Keyboard } from '@/components/ui'\n\nexport default function KeyboardBasicDemo() {\n    return <Keyboard keys={['mod', 'shift', 'k']} />\n}\n"
  },
  "controls/switch/switch-demo": {
    "component": "@/components/docs/controls/switch/switch-demo",
    "raw": "'use client'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    return (\n        <div className='grid grid-cols-3 gap-3'>\n            <Switch>Default</Switch>\n            <Switch isReadOnly>Read Only</Switch>\n            <Switch isDisabled>Disabled</Switch>\n        </div>\n    )\n}\n"
  },
  "controls/switch/switch-controlled-demo": {
    "component": "@/components/docs/controls/switch/switch-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchControlledDemo() {\n    const [value, setValue] = React.useState<boolean>(false)\n    return (\n        <div className='flex flex-col gap-6'>\n            <Switch isSelected={value} onChange={setValue} value='selected'>\n                Switch\n            </Switch>\n\n            <code>value: {JSON.stringify(value)}</code>\n        </div>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-disabled-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-disabled-demo",
    "raw": "'use client'\n\nimport { IconEye, IconPencil, IconTrash } from 'hq-icons'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDisabledDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <ContextMenu>\n                <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                    Disabled by Item\n                </ContextMenu.Trigger>\n                <ContextMenu.Content>\n                    <ContextMenu.Item>\n                        <IconEye />\n                        <ContextMenu.Label>View</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item isDisabled>\n                        <IconPencil />\n                        <ContextMenu.Label>Edit</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item isDanger isDisabled>\n                        <IconTrash />\n                        <ContextMenu.Label>Delete</ContextMenu.Label>\n                    </ContextMenu.Item>\n                </ContextMenu.Content>\n            </ContextMenu>\n            <ContextMenu>\n                <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                    Disabled by Key\n                </ContextMenu.Trigger>\n                <ContextMenu.Content disabledKeys={['edit', 'delete']}>\n                    <ContextMenu.Item id='view'>\n                        <IconEye />\n                        <ContextMenu.Label>View</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item id='edit'>\n                        <IconPencil />\n                        <ContextMenu.Label>Edit</ContextMenu.Label>\n                    </ContextMenu.Item>\n                    <ContextMenu.Item id='delete' isDanger>\n                        <IconTrash />\n                        <ContextMenu.Label>Delete</ContextMenu.Label>\n                    </ContextMenu.Item>\n                </ContextMenu.Content>\n            </ContextMenu>\n        </div>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-with-icon-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-with-icon-demo",
    "raw": "'use client'\n\nimport { IconCopy, IconFolder, IconHighlighter, IconTrash, IconUpload } from 'hq-icons'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuWithIconDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Options'>\n                <ContextMenu.Item>\n                    <IconFolder />\n                    Open\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconHighlighter />\n                    Rename\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconCopy />\n                    Duplicate\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconUpload />\n                    Share\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>\n                    <IconTrash />\n                    Delete\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-demo",
    "raw": "'use client'\n\nimport { ContextMenu, Keyboard } from '@/components/ui'\n\nexport default function ContextMenuDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Context menu'>\n                <ContextMenu.Item>Back</ContextMenu.Item>\n                <ContextMenu.Item isDisabled>Forward</ContextMenu.Item>\n                <ContextMenu.Item>Reload</ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>Bookmark</ContextMenu.Item>\n                <ContextMenu.Item>Save as</ContextMenu.Item>\n                <ContextMenu.Item>\n                    Select all\n                    <Keyboard keys={['⌘', 'A']} />\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>View source</ContextMenu.Item>\n                <ContextMenu.Item>Inspect Accessibility</ContextMenu.Item>\n                <ContextMenu.Item>Inspect</ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-danger-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-danger-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDangerDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item>\n                    <ContextMenu.Label>View</ContextMenu.Label>\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <ContextMenu.Label>Edit</ContextMenu.Label>\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>\n                    <ContextMenu.Label>Delete</ContextMenu.Label>\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-separator-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-separator-demo",
    "raw": "'use client'\n\nimport { IconCircleUser, IconLogOut, IconSettings } from 'hq-icons'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuSeparatorDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content aria-label='Context menu'>\n                <ContextMenu.Header>\n                    <span className='block'>DQ Al-Haqqi</span>\n                    <span className='font-normal text-muted-fg'>@dq-alhq</span>\n                </ContextMenu.Header>\n                <ContextMenu.Item>\n                    <IconCircleUser />\n                    Profile\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconSettings />\n                    Settings\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>\n                    <IconLogOut />\n                    Log out\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-item-details-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-item-details-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nconst items = [\n    {\n        id: 1,\n        name: 'React',\n        description: 'Component-based JavaScript library'\n    },\n    {\n        id: 2,\n        name: 'Angular',\n        description: 'Comprehensive TypeScript-based framework'\n    },\n    {\n        id: 3,\n        name: 'Vue.Js',\n        description: 'Flexible and progressive UI framework'\n    }\n]\n\nexport default function ContextMenuItemDetailsDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger className='flex items-center justify-center rounded-lg border border-dashed p-10'>\n                <p className='hidden sm:flex'>Right click here!</p>\n                <p className='flex sm:hidden'>Hold your finger here!</p>\n            </ContextMenu.Trigger>\n            <ContextMenu.Content items={items} aria-label='Bands'>\n                {(item) => (\n                    <ContextMenu.Item id={item.id} textValue={item.name}>\n                        <ContextMenu.Details label={item.name} description={item.description} />\n                    </ContextMenu.Item>\n                )}\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-menu-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-menu-demo",
    "raw": "'use client'\n\nimport { IconChevronDown } from 'hq-icons'\n\nimport { Breadcrumbs, Menu } from '@/components/ui'\n\nexport default function BreadcrumbsMenuDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item>\n                <Menu>\n                    <Menu.Trigger className='inline-flex items-center'>\n                        Docs\n                        <IconChevronDown className='ml-1' />\n                    </Menu.Trigger>\n                    <Menu.Content>\n                        <Menu.Item href='/blocks'>Blocks</Menu.Item>\n                        <Menu.Item href='/icons'>Icons</Menu.Item>\n                        <Menu.Item href='/colors'>Colors</Menu.Item>\n                        <Menu.Item href='/themes'>Themes</Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item>Components</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Docs</Breadcrumbs.Item>\n            <Breadcrumbs.Item>Components</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-current-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-current-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsCurrentDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Docs</Breadcrumbs.Item>\n            <Breadcrumbs.Item className='data-current:text-blue-500'>Components</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-url-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-url-demo",
    "raw": "'use client'\n\nimport { usePathname } from 'next/navigation'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsUrlDemo() {\n    const pathname = usePathname()\n    const urls = pathname\n        .split('/')\n        .filter((url) => url !== '')\n        .map((url, index) => {\n            return {\n                id: index,\n                label: url,\n                href: `/${url}`\n            }\n        })\n    return (\n        <Breadcrumbs items={urls}>\n            {(item) => (\n                <Breadcrumbs.Item className='capitalize' href={item.href}>\n                    {item.label}\n                </Breadcrumbs.Item>\n            )}\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-collections-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-collections-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nconst urls = [\n    { id: 1, label: 'Home', href: '#' },\n    { id: 2, label: 'Docs', href: '#' },\n    { id: 3, label: 'Components' }\n]\n\nexport default function BreadcrumbsCollectionsDemo() {\n    return (\n        <Breadcrumbs items={urls}>\n            {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-icon-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-icon-demo",
    "raw": "'use client'\n\nimport { IconBook, IconBox, IconHome } from 'hq-icons'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsIconDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>\n                <IconHome />\n                Home\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>\n                <IconBook />\n                Docs\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item>\n                <IconBox />\n                Components\n            </Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-separator-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-separator-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nconst urls = [\n    { id: 1, label: 'Home', href: '#' },\n    { id: 2, label: 'Docs', href: '#' },\n    { id: 3, label: 'Components' }\n]\n\nexport default function BreadcrumbsSeparatorDemo() {\n    return (\n        <div className='space-y-4'>\n            <Breadcrumbs items={urls} separator='chevron'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n            <Breadcrumbs items={urls} separator='slash'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n            <Breadcrumbs items={urls} separator='dash'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n            <Breadcrumbs items={urls} separator='dot'>\n                {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n            </Breadcrumbs>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-button-demo": {
    "component": "@/components/docs/navigation/link/link-button-demo",
    "raw": "'use client'\n\nimport { Link, buttonStyle } from '@/components/ui'\n\nexport default function LinkButtonDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Link className={buttonStyle()} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyle({ variant: 'secondary' })} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyle({ variant: 'danger' })} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyle({ variant: 'outline' })} href='#'>\n                Link\n            </Link>\n            <Link className={buttonStyle({ variant: 'ghost', shape: 'circle' })} href='#'>\n                Link\n            </Link>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-disabled-demo": {
    "component": "@/components/docs/navigation/link/link-disabled-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDisabledDemo() {\n    return (\n        <Link isDisabled href='#'>\n            Link\n        </Link>\n    )\n}\n"
  },
  "navigation/link/link-demo": {
    "component": "@/components/docs/navigation/link/link-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDemo() {\n    return <Link href='#'>Link</Link>\n}\n"
  },
  "navigation/pagination/pagination-simple-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-simple-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nexport default function PaginationSimpleDemo() {\n    return (\n        <Pagination>\n            <Pagination.Item slot='first' href='#' />\n            <Pagination.Item slot='previous' href='#' />\n            <Pagination.Label current={2} total={10} />\n            <Pagination.Item slot='next' href='#' />\n            <Pagination.Item slot='last' href='#' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-shape-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-shape-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nexport default function PaginationShapeDemo() {\n    return (\n        <Pagination shape='circle'>\n            <Pagination.Item slot='first' href='#first' />\n            <Pagination.Item slot='previous' href='#previous' />\n            <Pagination.Pages>\n                <Pagination.Item href='#1'>1</Pagination.Item>\n                <Pagination.Item href='#2' isCurrent>\n                    2\n                </Pagination.Item>\n                <Pagination.Item href='#3'>3</Pagination.Item>\n                <Pagination.Item slot='ellipsis' />\n                <Pagination.Item href='#6'>6</Pagination.Item>\n                <Pagination.Item href='#7'>7</Pagination.Item>\n            </Pagination.Pages>\n            <Pagination.Item slot='next' href='#next' />\n            <Pagination.Item slot='last' href='#last' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-dynamic-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nconst pages = [\n    { page: 1, href: '#', current: false },\n    { page: 2, href: '#', current: false },\n    { page: 3, href: '#', current: true },\n    { page: 4, href: '#', current: false },\n    { page: 5, href: '#', current: false },\n    { page: 6, href: '#', current: false },\n    { page: 7, href: '#', current: false }\n]\n\nexport default function PaginationDynamicDemo() {\n    return (\n        <Pagination>\n            <Pagination.Item slot='first' href='#' />\n            <Pagination.Item slot='previous' href='#' />\n            <Pagination.Label className='lg:hidden' current={3} total={pages.length} />\n            <Pagination.Pages items={pages} className='hidden lg:flex'>\n                {(item) => (\n                    <Pagination.Item id={item.page} href={item.href} isCurrent={item.current}>\n                        {item.page}\n                    </Pagination.Item>\n                )}\n            </Pagination.Pages>\n            <Pagination.Item slot='next' href='#' />\n            <Pagination.Item slot='last' href='#' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-demo",
    "raw": "import { Pagination } from '@/components/ui'\n\nexport default function PaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.Item slot='first' href='#first' />\n            <Pagination.Item slot='previous' href='#previous' />\n            <Pagination.Item href='#1'>1</Pagination.Item>\n            <Pagination.Item href='#2' isCurrent>\n                2\n            </Pagination.Item>\n            <Pagination.Item href='#3'>3</Pagination.Item>\n            <Pagination.Item slot='ellipsis' />\n            <Pagination.Item href='#6'>6</Pagination.Item>\n            <Pagination.Item href='#7'>7</Pagination.Item>\n            <Pagination.Item slot='next' href='#next' />\n            <Pagination.Item slot='last' href='#last' />\n        </Pagination>\n    )\n}\n"
  },
  "navigation/tabs/tabs-variant-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-variant-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tabs aria-label='Project Management' variant='primary'>\n                <Tabs.List>\n                    <Tabs.Label id='1'>Overview</Tabs.Label>\n                    <Tabs.Label id='2'>Features</Tabs.Label>\n                    <Tabs.Label id='3'>Pricing</Tabs.Label>\n                    <Tabs.Label id='4'>Reviews</Tabs.Label>\n                </Tabs.List>\n            </Tabs>\n            <Tabs aria-label='Project Management' variant='secondary'>\n                <Tabs.List>\n                    <Tabs.Label id='1'>Overview</Tabs.Label>\n                    <Tabs.Label id='2'>Features</Tabs.Label>\n                    <Tabs.Label id='3'>Pricing</Tabs.Label>\n                    <Tabs.Label id='4'>Reviews</Tabs.Label>\n                </Tabs.List>\n            </Tabs>\n            <Tabs aria-label='Project Management' variant='tertiary'>\n                <Tabs.List>\n                    <Tabs.Label id='1'>Overview</Tabs.Label>\n                    <Tabs.Label id='2'>Features</Tabs.Label>\n                    <Tabs.Label id='3'>Pricing</Tabs.Label>\n                    <Tabs.Label id='4'>Reviews</Tabs.Label>\n                </Tabs.List>\n            </Tabs>\n        </div>\n    )\n}\n"
  },
  "navigation/tabs/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsOrientationDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tabs orientation='vertical' aria-label='Project Management'>\n                <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={items}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n            <Tabs orientation='vertical' aria-label='Project Management' variant='secondary'>\n                <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={items}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n            <Tabs orientation='vertical' aria-label='Project Management' variant='tertiary'>\n                <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={items}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n        </div>\n    )\n}\n"
  },
  "navigation/tabs/tabs-disabled-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-disabled-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDisabledDemo() {\n    return (\n        <Tabs disabledKeys={['c', 'a']} aria-label='Services'>\n            <Tabs.List>\n                <Tabs.Label id='o'>Overview</Tabs.Label>\n                <Tabs.Label id='c'>Contact</Tabs.Label>\n                <Tabs.Label id='a'>About Us</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='o'>\n                Welcome to our service! Here, you’ll find a brief overview of what we offer, our mission, and how we\n                strive to provide value to our customers.\n            </Tabs.Content>\n            <Tabs.Content id='c'>\n                Get in touch with us through our contact page. We are here to help you with any inquiries, support\n                requests, or feedback you may have.\n            </Tabs.Content>\n            <Tabs.Content id='a'>\n                Learn more about our company, our history, and the team behind our success. We are dedicated to\n                delivering the best service to our customers.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-icons-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-icons-demo",
    "raw": "'use client'\n\nimport { IconBadgeDollar, IconBinoculars, IconGift, IconMessageHeart } from 'hq-icons'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsIconsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List>\n                <Tabs.Label id='1'>\n                    <IconBinoculars />\n                    Overview\n                </Tabs.Label>\n                <Tabs.Label id='2'>\n                    <IconGift />\n                    Features\n                </Tabs.Label>\n                <Tabs.Label id='3'>\n                    <IconBadgeDollar />\n                    Pricing\n                </Tabs.Label>\n                <Tabs.Label id='4'>\n                    <IconMessageHeart />\n                    Reviews\n                </Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='1'>This is the overview tab content.</Tabs.Content>\n            <Tabs.Content id='2'>Details about the features are listed here.</Tabs.Content>\n            <Tabs.Content id='3'>Find the pricing information on this tab.</Tabs.Content>\n            <Tabs.Content id='4'>Read user reviews and ratings here.</Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-collections-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-collections-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsCollectionsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n            <Collection items={items}>{(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}</Collection>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-keyboard-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-keyboard-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst withArrowItems = [\n    { id: 1, title: 'Use', content: 'This is the first content' },\n    { id: 2, title: 'Left or Right Arrow', content: 'This is the second content' },\n    { id: 3, title: 'To Switch', content: 'This is the third content' },\n    { id: 4, title: 'The Tabs', content: 'This is the fourth content' }\n]\nconst manualItems = [\n    { id: 1, title: 'Use', content: 'This is the first content' },\n    { id: 2, title: 'Space or Enter', content: 'This is the second content' },\n    { id: 3, title: 'To Switch', content: 'This is the third content' },\n    { id: 4, title: 'The Tabs', content: 'This is the fourth content' }\n]\n\nexport default function TabsKeyboardDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tabs aria-label='Project Management'>\n                <Tabs.List items={withArrowItems}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={withArrowItems}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n            <Tabs keyboardActivation='manual' aria-label='Project Management'>\n                <Tabs.List items={manualItems}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={manualItems}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n        </div>\n    )\n}\n"
  },
  "navigation/tabs/tabs-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List>\n                <Tabs.Label id='1'>Overview</Tabs.Label>\n                <Tabs.Label id='2'>Features</Tabs.Label>\n                <Tabs.Label id='3'>Pricing</Tabs.Label>\n                <Tabs.Label id='4'>Reviews</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='1'>This is the overview tab content.</Tabs.Content>\n            <Tabs.Content id='2'>Details about the features are listed here.</Tabs.Content>\n            <Tabs.Content id='3'>Find the pricing information on this tab.</Tabs.Content>\n            <Tabs.Content id='4'>Read user reviews and ratings here.</Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-controlled-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport { Collection, type Key } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsControlledDemo() {\n    const [selected, setSelected] = useState<Key>(1)\n    return (\n        <div className='space-y-6'>\n            <Tabs aria-label='Project Management' selectedKey={selected} onSelectionChange={setSelected}>\n                <Tabs.List items={items}>{(item) => <Tabs.Label>{item.title}</Tabs.Label>}</Tabs.List>\n                <Collection items={items}>\n                    {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n                </Collection>\n            </Tabs>\n            <code>selected: {JSON.stringify(selected)}</code>\n        </div>\n    )\n}\n"
  },
  "navigation/tabs/tabs-link-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-link-demo",
    "raw": "'use client'\n\nimport { IconBlocks, IconBookCopy, IconPalette, IconShapes, IconSwatchBook } from 'hq-icons'\n\nimport { Tabs } from '@/components/ui'\n\nconst items = [\n    { url: '/', label: 'Home' },\n    { url: 'https://hq-ui.vercel.app/docs', label: 'Components', icon: IconBookCopy },\n    { url: 'https://hq-ui.vercel.app/blocks', label: 'Blocks', icon: IconBlocks },\n    { url: 'https://hq-ui.vercel.app/icons', label: 'Icons', icon: IconShapes },\n    { url: 'https://hq-ui.vercel.app/colors', label: 'Colors', icon: IconPalette },\n    { url: 'https://hq-ui.vercel.app/themes', label: 'Themes', icon: IconSwatchBook }\n]\n\nexport default function TabsLinkDemo() {\n    return (\n        <Tabs aria-label='Navbar'>\n            <Tabs.List items={items}>\n                {(item) => (\n                    <Tabs.Label id={item.label} href={item.url}>\n                        {item.icon && <item.icon />}\n                        {item.label}\n                    </Tabs.Label>\n                )}\n            </Tabs.List>\n        </Tabs>\n    )\n}\n"
  },
  "indicator": {
    "component": "@/components/ui/indicator",
    "raw": "'use client'\n\nimport type { ComponentPropsWithRef, ReactNode } from 'react'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nconst indicatorStyle = tv({\n    base: 'absolute right-0.5 left-auto z-10 inline-flex w-auto translate-x-1/2 select-none items-center justify-center whitespace-nowrap border-2 py-[3px]',\n    variants: {\n        variant: {\n            primary: '[--bg:var(--color-primary)] [--fg:var(--color-primary-fg)]',\n            secondary: '[--bg:var(--color-muted-fg)] [--fg:var(--color-muted)]',\n            danger: '[--bg:var(--color-danger)] [--fg:var(--color-danger-fg)]',\n            outline: '[--bg:var(--color-bg)] [--fg:var(--color-fg)]'\n        },\n        position: {\n            top: '-translate-y-1/2 top-0.5 bottom-auto',\n            bottom: 'top-auto bottom-0.5 translate-y-1/2'\n        },\n        isInverse: {\n            true: 'border-(--bg) bg-(--fg) text-(--bg)',\n            false: 'border-(--fg) bg-(--bg) text-(--fg)'\n        },\n        shape: {\n            circle: 'rounded-full',\n            square: 'rounded-md'\n        },\n        size: {\n            xs: 'size-3',\n            sm: 'size-4',\n            md: 'size-5',\n            lg: 'size-6'\n        },\n        isText: {\n            true: 'size-auto px-1.5 text-xs has-[svg]:px-[3px] *:[svg]:size-4 *:[svg]:shrink-0'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        position: 'top',\n        isInverse: false,\n        shape: 'circle',\n        size: 'sm'\n    }\n})\n\ninterface IndicatorProps extends ComponentPropsWithRef<'div'>, VariantProps<typeof indicatorStyle> {\n    text?: ReactNode\n}\n\nconst Indicator = ({ className, children, ...props }: IndicatorProps) => {\n    return (\n        <div className='relative inline-block w-fit'>\n            {children}\n            <span className={indicatorStyle({ className, isText: !!props.text, ...props })}>{props.text}</span>\n        </div>\n    )\n}\n\nexport { Indicator }\n"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from 'hq-icons'\nimport {\n    Button,\n    type ButtonProps,\n    Input,\n    NumberField as RACNumberField,\n    type NumberFieldProps as RACNumberFieldProps,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { useIsMobile } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\n\ninterface NumberFieldProps extends RACNumberFieldProps, FieldProps {\n    placeholder?: string\n    ref?: Ref<HTMLDivElement>\n}\n\nconst NumberField = ({ label, placeholder, description, className, errorMessage, ref, ...props }: NumberFieldProps) => {\n    const isMobile = useIsMobile()\n    return (\n        <RACNumberField\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup\n                isInvalid={props.isInvalid || !!errorMessage}\n                isDisabled={props.isDisabled}\n                className='overflow-hidden'\n            >\n                {isMobile && (\n                    <Stepper className='border-r' slot='decrement'>\n                        <IconMinus />\n                    </Stepper>\n                )}\n                <Input className='text-center tabular-nums sm:text-left' placeholder={placeholder} />\n                {isMobile ? (\n                    <Stepper className='border-s' slot='increment'>\n                        <IconPlus />\n                    </Stepper>\n                ) : (\n                    <div className='flex h-full flex-col divide-y border-s'>\n                        <Stepper slot='increment' className='size-5'>\n                            <IconChevronUp />\n                        </Stepper>\n                        <Stepper slot='decrement' className='size-5'>\n                            <IconChevronDown />\n                        </Stepper>\n                    </div>\n                )}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </RACNumberField>\n    )\n}\n\ninterface StepperProps extends ButtonProps {\n    slot: 'increment' | 'decrement'\n    className?: string\n}\n\nconst Stepper = ({ slot, className, ...props }: StepperProps) => {\n    return (\n        <Button\n            className={composeRenderProps(className, (className, { isDisabled, isPressed }) =>\n                cn(\n                    'flex size-12 items-center justify-center text-muted-fg outline-hidden',\n                    isPressed &&\n                        'bg-primary text-primary-fg group-has-invalid/field:bg-danger group-has-invalid/field:text-danger-fg',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n            slot={slot}\n            {...props}\n        />\n    )\n}\n\nexport { NumberField }\n"
  },
  "tree": {
    "component": "@/components/ui/tree",
    "raw": "'use client'\n\nimport { IconChevronRight } from 'hq-icons'\nimport type { TreeItemContentProps, TreeItemProps, TreeProps } from 'react-aria-components'\nimport {\n    Button,\n    Tree as RACTree,\n    TreeItem as RACTreeItem,\n    TreeItemContent,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst Tree = <T extends object>({ className, ...props }: TreeProps<T>) => {\n    return (\n        <RACTree\n            className={composeRenderProps(className, (className) =>\n                cn('flex cursor-default flex-col gap-0.5 p-2 text-sm outline-hidden', className)\n            )}\n            {...props}\n        />\n    )\n}\n\nconst TreeItem = <T extends object>({ className, ...props }: TreeItemProps<T>) => {\n    return (\n        <RACTreeItem\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative flex items-center gap-1.5 rounded-lg p-1 py-2 text-sm outline-hidden',\n                    'pl-[calc((var(--tree-item-level)-1)*20px+32px)] has-child-items:pl-[calc((var(--tree-item-level)-1)*20px+8px)]',\n                    'focus-visible:ring-2 focus-visible:ring-ring',\n                    'selected:bg-primary/10 selected:text-primary',\n                    'disabled:opacity-50',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst ItemContent = ({ children, ...props }: TreeItemContentProps) => (\n    <TreeItemContent {...props}>\n        {(values) => (\n            <>\n                {values.hasChildItems && (\n                    <Button\n                        slot='chevron'\n                        className='inline-flex size-4 items-center justify-center text-muted-fg outline-hidden'\n                    >\n                        <IconChevronRight\n                            data-slot='indicator'\n                            className={cn('transition-transform', values.isExpanded && 'rotate-90')}\n                        />\n                    </Button>\n                )}\n                {typeof children === 'function' ? children(values) : children}\n            </>\n        )}\n    </TreeItemContent>\n)\n\nTreeItem.Content = ItemContent\n\nexport { Tree, TreeItem }\nexport type { TreeItemProps, TreeProps }\n"
  },
  "sidebar": {
    "component": "@/components/ui/sidebar",
    "raw": "'use client'\n\nimport { IconChevronRight, IconMenu } from 'hq-icons'\nimport {\n    type CSSProperties,\n    type ComponentProps,\n    type ComponentPropsWithRef,\n    type HTMLAttributes,\n    type ReactNode,\n    createContext,\n    use,\n    useCallback,\n    useEffect,\n    useMemo,\n    useState\n} from 'react'\nimport type {\n    ButtonProps,\n    DisclosureGroupProps,\n    DisclosurePanelProps,\n    DisclosureProps,\n    LinkProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Button,\n    DialogTrigger,\n    Disclosure,\n    DisclosureGroup,\n    DisclosurePanel,\n    Header,\n    Link,\n    OverlayArrow,\n    Popover,\n    Text,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { useIsMobile } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\nimport { Sheet } from './sheet'\nimport { Tooltip } from './tooltip'\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar:state'\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst WIDTH = '16rem'\nconst WIDTH_DOCK = '3rem'\nconst WIDTH_FLOAT_DOCK = '4rem'\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b'\n\ntype SidebarContextProps = {\n    state: 'expanded' | 'collapsed'\n    open: boolean\n    setOpen: (open: boolean) => void\n    isMobile: boolean\n    toggleSidebar: () => void\n    variant: 'default' | 'float' | 'inset'\n    collapsible: 'dock' | 'hidden' | 'none'\n    isInverse?: boolean\n}\n\nconst SidebarContext = createContext<SidebarContextProps | null>(null)\n\nconst useSidebar = () => {\n    const context = use(SidebarContext)\n    if (!context) {\n        throw new Error('useSidebar must be used within a Sidebar.')\n    }\n    return context\n}\n\ninterface SidebarProviderProps extends ComponentProps<'div'> {\n    defaultOpen?: boolean\n    shortcut?: string\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n    isMobileOpen?: boolean\n    onMobileOpenChange?: (isMobileOpen: boolean) => void\n    variant?: 'default' | 'float' | 'inset'\n    collapsible?: 'dock' | 'hidden' | 'none'\n    isInverse?: boolean\n}\n\nconst Sidebar = ({\n    defaultOpen = true,\n    isOpen: openProp,\n    onOpenChange: setOpenProp,\n    isMobileOpen,\n    onMobileOpenChange,\n    className,\n    children,\n    shortcut = SIDEBAR_KEYBOARD_SHORTCUT,\n    variant = 'default',\n    collapsible = 'hidden',\n    isInverse = false,\n    ...props\n}: SidebarProviderProps) => {\n    const isMobile = useIsMobile()\n    const [internalOpenState, setInternalOpenState] = useState<boolean>(defaultOpen)\n\n    const open = openProp ?? internalOpenState\n    const setOpen = useCallback(\n        (value: boolean | ((value: boolean) => boolean)) => {\n            const openState = typeof value === 'function' ? value(open) : value\n            if (setOpenProp) {\n                setOpenProp(openState)\n            } else {\n                setInternalOpenState(openState)\n            }\n            document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n        },\n        [setOpenProp, open]\n    )\n\n    const toggleSidebar = useCallback(() => {\n        return isMobile ? onMobileOpenChange?.(!isMobileOpen) : setOpen((open) => !open)\n    }, [isMobile, setOpen, isMobileOpen, onMobileOpenChange])\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === shortcut && collapsible !== 'none' && (event.metaKey || event.ctrlKey)) {\n                event.preventDefault()\n                toggleSidebar()\n            }\n        }\n\n        window.addEventListener('keydown', handleKeyDown)\n        return () => window.removeEventListener('keydown', handleKeyDown)\n    }, [toggleSidebar, shortcut, collapsible])\n\n    const state = open ? 'expanded' : 'collapsed'\n\n    const contextValue = useMemo<SidebarContextProps>(\n        () => ({\n            state,\n            open,\n            setOpen,\n            isMobile,\n            isMobileOpen,\n            onMobileOpenChange,\n            toggleSidebar,\n            variant,\n            collapsible\n        }),\n        [state, open, setOpen, isMobile, isMobileOpen, onMobileOpenChange, toggleSidebar, variant, collapsible]\n    )\n\n    const collapsedHidden = state === 'collapsed' && collapsible === 'hidden'\n    const collapsedDock = state === 'collapsed' && collapsible === 'dock' && variant === 'default'\n    const collapsedFloatDock = state === 'collapsed' && variant === 'float' && collapsible === 'dock'\n    const collapsedInsetDock = state === 'collapsed' && variant === 'inset' && collapsible === 'dock'\n\n    return (\n        <SidebarContext value={contextValue}>\n            {collapsible === 'none' && !isMobile ? (\n                <div\n                    style={{ width: WIDTH }}\n                    className={cn(\n                        'flex h-full min-h-screen flex-col border-r bg-bg text-fg',\n                        isInverse && 'dark',\n                        className\n                    )}\n                >\n                    {children}\n                </div>\n            ) : isMobile ? (\n                <Sheet isOpen={isMobileOpen} onOpenChange={onMobileOpenChange} {...props}>\n                    <Sheet.Trigger className='absolute top-2 left-2.5 z-50 inline-flex size-9 shrink-0 items-center justify-center rounded-md bg-bg pressed:bg-muted/50 text-muted-fg outline-hidden hover:bg-muted/40 focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-ring'>\n                        <IconMenu />\n                    </Sheet.Trigger>\n                    <Sheet.Content className={isInverse ? 'dark' : ''} aria-label='Sidebar' side='left'>\n                        {children}\n                    </Sheet.Content>\n                </Sheet>\n            ) : (\n                <div\n                    data-variant={variant}\n                    data-open={open}\n                    className={cn(\n                        'peer z-20 hidden bg-bg text-fg [--visual-viewport-vertical-padding:32px] **:data-[slot=icon]:shrink-0 md:block',\n                        isInverse && 'dark **:dark'\n                    )}\n                >\n                    <div\n                        style={{\n                            width: collapsedDock\n                                ? WIDTH_DOCK\n                                : collapsedFloatDock\n                                  ? WIDTH_FLOAT_DOCK\n                                  : collapsedHidden\n                                    ? 0\n                                    : collapsedInsetDock\n                                      ? WIDTH_FLOAT_DOCK\n                                      : WIDTH\n                        }}\n                        className={cn(\n                            'sticky top-0 left-0 hidden backdrop-blur transition-[left,right,width] duration-200 ease-linear md:flex',\n                            variant === 'float' && 'p-2',\n                            variant === 'inset' && 'bg-primary/5 p-2',\n                            variant === 'default' && !collapsedHidden && 'border-r',\n                            collapsedHidden && 'p-0'\n                        )}\n                    >\n                        <div\n                            data-sidebar='default'\n                            className={cn(\n                                'flex size-full min-h-svh flex-col text-fg',\n                                variant === 'inset' && 'min-h-[calc(100vh-1rem)]',\n                                variant === 'float' && 'min-h-[calc(100vh-1rem)] rounded-lg border bg-primary/5',\n                                className\n                            )}\n                        >\n                            {children}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </SidebarContext>\n    )\n}\n\nconst SidebarHeader = ({ className, ...props }: ComponentProps<'div'>) => {\n    const { state, variant, collapsible } = useSidebar()\n    const collapsed = state === 'collapsed'\n    return (\n        <div\n            data-sidebar-header='true'\n            className={cn(\n                'flex items-center gap-x-3 p-3 font-semibold *:[svg]:size-5',\n                collapsed && variant === 'float' && 'mt-1',\n                collapsed && 'mt-0.5 justify-center *:[[slot=label]]:hidden',\n                collapsed && collapsible === 'hidden' && 'hidden',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst SidebarFooter = ({ className, ...props }: ComponentProps<'div'>) => {\n    const { state, isMobile, collapsible } = useSidebar()\n    const collapsed = state === 'collapsed' && !isMobile\n    const hidden = collapsed && collapsible === 'hidden'\n    return (\n        <div\n            data-sidebar-footer='true'\n            className={cn(\n                'mt-auto flex flex-col overflow-hidden p-2',\n                '**:data-avatar:size-8 **:data-avatar:shrink-0',\n                collapsed && '**:data-[slot=icon]:hidden **:data-user:hidden **:[button]:p-0',\n                hidden && 'hidden',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst SidebarBody = ({ className, ...props }: HTMLAttributes<HTMLDivElement>) => (\n    <div\n        slot='body'\n        className={cn(\n            'isolate flex max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] flex-col space-y-4 overflow-y-auto overflow-x-hidden py-2 will-change-scroll',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst SidebarSection = ({ className, ...props }: DisclosureGroupProps & { title?: string }) => {\n    const { state } = useSidebar()\n    return (\n        <section data-section={true} className={cn('col-span-full flex flex-col gap-y-1 px-2', className)}>\n            {state !== 'collapsed' && 'title' in props && (\n                <Header className='flex shrink-0 items-center rounded-lg px-2 font-medium text-muted-fg text-xs outline-hidden transition-[margin,opa] duration-200 ease-linear'>\n                    {props.title}\n                </Header>\n            )}\n            <DisclosureGroup\n                {...props}\n                data-section\n                allowsMultipleExpanded\n                className='group grid grid-cols-[auto_1fr_auto] gap-y-0.5'\n            >\n                {props.children}\n            </DisclosureGroup>\n        </section>\n    )\n}\n\ninterface SidebarItemProps extends DisclosureProps, Pick<LinkProps, 'href' | 'routerOptions' | 'onPress'> {\n    isCurrent?: boolean\n    tooltip?: ReactNode | string\n    badge?: string | number | undefined\n    style?: CSSProperties\n}\n\nconst SidebarItem = ({ className, isCurrent, ...props }: SidebarItemProps) => {\n    const { state, collapsible } = useSidebar()\n    const collapsedDock = state === 'collapsed' && collapsible === 'dock'\n\n    const renderMenuWithHref = (\n        <Link\n            className={cn(\n                'relative col-span-full cursor-pointer items-center rounded-lg text-sm outline-hidden',\n                'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n                'pressed:bg-primary/10 pressed:text-primary',\n                'hover:bg-primary/10 hover:text-primary',\n                'disabled:cursor-default disabled:opacity-50',\n                collapsedDock ? 'flex size-8 justify-center gap-2 p-0' : 'grid grid-cols-subgrid gap-x-3 px-2.5 py-2',\n                state === 'collapsed' && 'group-data-section:*:[[slot=label]]:hidden',\n                isCurrent && 'bg-primary/10 text-primary',\n                className\n            )}\n            {...props}\n        >\n            {props.children as ReactNode}\n        </Link>\n    )\n\n    return 'href' in props && collapsedDock ? (\n        <Tooltip delay={100}>\n            {renderMenuWithHref}\n            <Tooltip.Content placement='right top' isInverse className='flex items-center gap-2'>\n                {props.children as ReactNode}\n            </Tooltip.Content>\n        </Tooltip>\n    ) : 'href' in props && !collapsedDock ? (\n        renderMenuWithHref\n    ) : state === 'expanded' ? (\n        <Disclosure\n            isExpanded\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative col-span-full grid grid-cols-subgrid items-center gap-x-3 gap-y-0.5 rounded-lg text-sm outline-hidden disabled:opacity-50 expanded:*:[button]:data-[slot=indicator]:rotate-90',\n                    className\n                )\n            )}\n            {...props}\n        />\n    ) : (\n        <DialogTrigger>{props.children as ReactNode}</DialogTrigger>\n    )\n}\n\nconst SidebarLabel = ({ className, ...props }: TextProps) => {\n    return <Text slot='label' className={cn('col-start-2 line-clamp-1 text-left', className)} {...props} />\n}\n\nconst SidebarSubItemTrigger = ({ children, className, ...props }: ButtonProps) => {\n    const { state, collapsible } = useSidebar()\n    const collapsedDock = state === 'collapsed' && collapsible === 'dock'\n    return (\n        <Button\n            slot='trigger'\n            {...props}\n            className={cn(\n                'col-span-full cursor-pointer items-center rounded-lg outline-hidden',\n                'pressed:bg-primary/10 pressed:text-primary hover:bg-primary/10 hover:text-primary',\n                collapsedDock ? 'flex size-8 justify-center p-0' : 'grid grid-cols-subgrid px-2.5 py-2 text-left',\n                'focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2',\n                'aria-expanded:*:data-[slot=indicator]:rotate-90',\n                state === 'collapsed' && '*:[[slot=label]]:hidden',\n                className\n            )}\n        >\n            {(values) => (\n                <>\n                    {typeof children === 'function' ? children(values) : children}\n                    {!collapsedDock && (\n                        <IconChevronRight\n                            data-slot='indicator'\n                            className={cn('ml-auto size-3.5 text-muted-fg transition-transform')}\n                        />\n                    )}\n                </>\n            )}\n        </Button>\n    )\n}\n\nconst SidebarSubItem = ({ children, className, ...props }: DisclosurePanelProps) => {\n    const { state, isMobile } = useSidebar()\n    return state === 'expanded' || isMobile ? (\n        <DisclosurePanel className={cn('col-span-full grid grid-cols-subgrid gap-y-0.5', className)} {...props}>\n            {children}\n        </DisclosurePanel>\n    ) : (\n        <Popover\n            placement='right top'\n            className='group flex flex-col rounded-lg border bg-bg p-1 **:[[slot=label]]:hidden'\n        >\n            <OverlayArrow className='group'>\n                <svg\n                    width={12}\n                    height={12}\n                    viewBox='0 0 12 12'\n                    className='group-placement-left:-rotate-90 block fill-bg stroke-muted group-placement-bottom:rotate-180 group-placement-right:rotate-90'\n                >\n                    <path d='M0 0 L6 6 L12 0' />\n                </svg>\n            </OverlayArrow>\n            {children}\n        </Popover>\n    )\n}\n\nconst SidebarTrigger = ({ children, ...props }: ComponentProps<typeof Button>) => {\n    const { toggleSidebar, variant, collapsible, isMobile, open } = useSidebar()\n    return (\n        !isMobile &&\n        collapsible !== 'none' && (\n            <Button\n                aria-label='Toggle Sidebar'\n                onPress={toggleSidebar}\n                className={cn(\n                    'absolute z-50 inline-flex size-8 shrink-0 items-center justify-center rounded-md text-muted-fg outline-hidden transition-transform',\n                    'hover:bg-muted/40',\n                    'focus-visible:ring-4 focus-visible:ring-ring',\n                    'pressed:bg-muted/50',\n                    variant === 'default' ? 'top-2 right-2' : 'top-4 right-4',\n                    open ? 'translate-x-0' : `${variant === 'default' ? 'translate-x-12' : 'translate-x-16'}`\n                )}\n                {...props}\n            >\n                {children || <IconMenu className='size-4' />}\n            </Button>\n        )\n    )\n}\n\nconst SidebarRail = ({ className, ...props }: ButtonProps) => {\n    const { toggleSidebar, state, isMobile } = useSidebar()\n    return (\n        !isMobile && (\n            <Button\n                data-rail\n                slot={null}\n                aria-label='Toggle Sidebar'\n                excludeFromTabOrder\n                onPress={toggleSidebar}\n                className={composeRenderProps(className, (className) =>\n                    cn(\n                        'fixed inset-y-0 max-h-full w-4 bg-transparent transition',\n                        state === 'collapsed' ? '-right-2' : 'right-0',\n                        state === 'collapsed' ? 'cursor-e-resize' : 'cursor-w-resize',\n                        'pressed:border-primary pressed:border-r-2 hover:border-primary hover:border-r-2',\n                        className\n                    )\n                )}\n                {...props}\n            />\n        )\n    )\n}\n\nconst SidebarInset = ({ ...props }: ComponentProps<'main'>) => {\n    return (\n        <div\n            className={cn(\n                'relative flex h-dvh w-full flex-1 flex-col peer-data-[variant=inset]:bg-primary/5 md:p-2',\n                'peer-data-[variant=default]:p-0 peer-data-[variant=default]:*:border-0',\n                'peer-data-[variant=float]:peer-data-[open=true]:pl-0',\n                'peer-data-[variant=inset]:peer-data-[open=true]:pl-0',\n                'peer-data-[open=false]:**:[[slot=nav]]:pl-12'\n            )}\n        >\n            <main\n                className='relative flex h-full max-h-full flex-1 flex-col overflow-auto rounded-lg bg-bg md:border'\n                {...props}\n            />\n        </div>\n    )\n}\n\nconst SidebarNav = ({ className, ...props }: ComponentPropsWithRef<'nav'>) => {\n    return (\n        <nav\n            slot='nav'\n            className={cn(\n                'isolate flex min-h-12 items-center justify-between gap-x-2 rounded-t-lg border-b bg-bg/60 px-4 text-fg backdrop-blur-lg md:w-full md:justify-start',\n                'sticky top-0 z-10'\n            )}\n            {...props}\n        />\n    )\n}\n\nSidebar.Content = SidebarBody\nSidebar.Footer = SidebarFooter\nSidebar.Header = SidebarHeader\nSidebar.Item = SidebarItem\nSidebar.SubItem = SidebarSubItem\nSidebar.Label = SidebarLabel\nSidebar.SubItemTrigger = SidebarSubItemTrigger\nSidebar.Rail = SidebarRail\nSidebar.Section = SidebarSection\nSidebar.Trigger = SidebarTrigger\n\nexport { Sidebar, SidebarInset, SidebarNav }\n"
  },
  "progress": {
    "component": "@/components/ui/progress",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\nimport { ProgressBar, type ProgressBarProps, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from './form'\n\ninterface ProgressProps extends ProgressBarProps {\n    label?: string\n    ref?: Ref<HTMLDivElement>\n    circle?: boolean\n    variant?: 'primary' | 'secondary' | 'danger' | 'dark'\n}\n\nconst Progress = ({ label, ref, circle, variant = 'primary', className, ...props }: ProgressProps) => {\n    return (\n        <>\n            <style>\n                {\n                    '@keyframes indeterminate { from { transform: translateX(-100%); } to { transform: translateX(250px); } }'\n                }\n            </style>\n            <ProgressBar\n                ref={ref}\n                className={composeRenderProps(className, (className) => cn('flex flex-col gap-y-1.5', className))}\n                {...props}\n            >\n                {({ percentage, valueText, isIndeterminate }) => (\n                    <>\n                        {circle ? (\n                            <svg\n                                aria-label={label ?? 'Progress'}\n                                className={cn(\n                                    'size-20 shrink-0',\n                                    `text-${variant === 'dark' ? 'fg' : variant}`,\n                                    className\n                                )}\n                                viewBox='0 0 32 32'\n                                fill='none'\n                            >\n                                <circle\n                                    cx='50%'\n                                    cy='50%'\n                                    r='calc(50% - 2px)'\n                                    strokeWidth={3}\n                                    stroke='currentColor'\n                                    strokeOpacity={0.25}\n                                />\n                                <circle\n                                    cx='50%'\n                                    cy='50%'\n                                    r='calc(50% - 2px)'\n                                    strokeWidth={3}\n                                    stroke='currentColor'\n                                    pathLength={100}\n                                    strokeDasharray='100 200'\n                                    strokeDashoffset={100 - (percentage ?? 30)}\n                                    strokeLinecap='round'\n                                    style={{ transition: 'stroke-dashoffset 0.1s linear' }}\n                                    className={cn(\n                                        'origin-center',\n                                        isIndeterminate\n                                            ? 'animate-[spin_1s_cubic-bezier(0.4,_0,_0.2,_1)_infinite]'\n                                            : '-rotate-90'\n                                    )}\n                                />\n                                {!isIndeterminate && (\n                                    <text\n                                        x='50%'\n                                        y='50%'\n                                        textAnchor='middle'\n                                        dy='.35em'\n                                        fontSize='calc(50% + 1px)'\n                                        className='fill-current'\n                                    >\n                                        {valueText}\n                                    </text>\n                                )}\n                            </svg>\n                        ) : (\n                            <>\n                                <div className='flex justify-between gap-2'>\n                                    {label && <Label>{label}</Label>}\n                                    {valueText && (\n                                        <span className='text-muted-fg text-sm tabular-nums'>{valueText}</span>\n                                    )}\n                                </div>\n                                <div className='relative h-2 min-w-64 overflow-hidden rounded-lg bg-muted outline-hidden'>\n                                    <div\n                                        style={{\n                                            width: `${percentage}%`,\n                                            animation: isIndeterminate\n                                                ? 'indeterminate 1.5s infinite ease-in-out'\n                                                : 'none',\n                                            transition: 'width 0.1s linear'\n                                        }}\n                                        className={cn(\n                                            'absolute top-0 left-0 h-full rounded-full transition',\n                                            variant === 'primary' && 'bg-primary',\n                                            variant === 'secondary' && 'bg-secondary',\n                                            variant === 'danger' && 'bg-danger',\n                                            variant === 'dark' && 'bg-fg',\n                                            isIndeterminate && 'w-[120px]'\n                                        )}\n                                    />\n                                </div>\n                            </>\n                        )}\n                    </>\n                )}\n            </ProgressBar>\n        </>\n    )\n}\n\nexport { Progress }\n"
  },
  "chart": {
    "component": "@/components/ui/chart",
    "raw": "'use client'\n\nimport {\n    type CSSProperties,\n    type ComponentProps,\n    type ComponentType,\n    type ReactNode,\n    createContext,\n    use,\n    useId,\n    useMemo\n} from 'react'\n\nimport { Legend, type LegendProps, ResponsiveContainer, Tooltip } from 'recharts'\n\nimport { cn } from '@/lib/utils'\n\nconst THEMES = { light: '', dark: '.dark' } as const\n\ntype ChartConfig = {\n    [k in string]: {\n        label?: ReactNode\n        icon?: ComponentType\n    } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> })\n}\n\ntype ChartContextProps = {\n    config: ChartConfig\n}\n\nconst ChartContext = createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n    const context = use(ChartContext)\n\n    if (!context) {\n        throw new Error('useChart must be used within a <Chart />')\n    }\n\n    return context\n}\n\nconst Chart = ({\n    id,\n    className,\n    children,\n    config,\n    ref,\n    ...props\n}: ComponentProps<'div'> & {\n    config: ChartConfig\n    children: ComponentProps<typeof ResponsiveContainer>['children']\n}) => {\n    const uniqueId = useId()\n    const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n    return (\n        <ChartContext.Provider value={{ config }}>\n            <div\n                data-chart={chartId}\n                ref={ref}\n                className={cn(\n                    \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-fg [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/80 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-hidden [&_.recharts-surface]:outline-hidden\",\n                    className\n                )}\n                {...props}\n            >\n                <ChartStyle id={chartId} config={config} />\n                <ResponsiveContainer>{children}</ResponsiveContainer>\n            </div>\n        </ChartContext.Provider>\n    )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n    const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color)\n\n    if (!colorConfig.length) {\n        return null\n    }\n\n    return (\n        <style\n            dangerouslySetInnerHTML={{\n                __html: Object.entries(THEMES)\n                    .map(\n                        ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n    .map(([key, itemConfig]) => {\n        const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color\n        return color ? `  --color-${key}: ${color};` : null\n    })\n    .join('\\n')}\n}\n`\n                    )\n                    .join('\\n')\n            }}\n        />\n    )\n}\n\nconst ChartTooltip = Tooltip\n\nconst ChartTooltipContent = ({\n    active,\n    payload,\n    className,\n    indicator = 'dot',\n    hideLabel = false,\n    hideIndicator = false,\n    label,\n    labelFormatter,\n    labelClassName,\n    formatter,\n    color,\n    nameKey,\n    labelKey,\n    ref\n}: ComponentProps<typeof Tooltip> &\n    ComponentProps<'div'> & {\n        hideLabel?: boolean\n        hideIndicator?: boolean\n        indicator?: 'line' | 'dot' | 'dashed'\n        nameKey?: string\n        labelKey?: string\n    }) => {\n    const { config } = useChart()\n\n    const tooltipLabel = useMemo(() => {\n        if (hideLabel || !payload?.length) {\n            return null\n        }\n\n        const [item] = payload\n\n        if (!item) {\n            return null\n        }\n\n        const key = `${labelKey || item.dataKey || item.name || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n        const value =\n            !labelKey && typeof label === 'string'\n                ? config[label as keyof typeof config]?.label || label\n                : itemConfig?.label\n\n        if (labelFormatter) {\n            return <div className={labelClassName}>{labelFormatter(value, payload)}</div>\n        }\n\n        if (!value) {\n            return null\n        }\n\n        return <div className={labelClassName}>{value}</div>\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])\n\n    if (!active || !payload?.length) {\n        return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'grid min-w-[12rem] items-start gap-1.5 rounded-lg border bg-bg px-3 py-2 text-fg text-xs shadow-xl',\n                className\n            )}\n        >\n            {!nestLabel ? tooltipLabel : null}\n            <div className='grid gap-1.5'>\n                {payload.map((item, index) => {\n                    const key = `${nameKey || item.name || item.dataKey || 'value'}`\n                    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n                    const indicatorColor = color || item.payload.fill || item.color\n\n                    return (\n                        <div\n                            key={item.dataKey}\n                            className={cn(\n                                'flex w-full flex-wrap items-stretch gap-2 *:data-[slot=icon]:size-2.5 *:data-[slot=icon]:text-muted-fg',\n                                indicator === 'dot' && 'items-center'\n                            )}\n                        >\n                            {formatter && item?.value !== undefined && item.name ? (\n                                formatter(item.value, item.name, item, index, item.payload)\n                            ) : (\n                                <>\n                                    {itemConfig?.icon ? (\n                                        <itemConfig.icon />\n                                    ) : (\n                                        !hideIndicator && (\n                                            <div\n                                                className={cn(\n                                                    'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',\n                                                    indicator === 'dot' && 'size-2.5',\n                                                    indicator === 'line' && 'w-1',\n                                                    indicator === 'dashed' &&\n                                                        'w-0 border-[1.5px] border-dashed bg-transparent',\n                                                    nestLabel && indicator === 'dashed' && 'my-0.5'\n                                                )}\n                                                style={\n                                                    {\n                                                        '--color-bg': indicatorColor,\n                                                        '--color-border': indicatorColor\n                                                    } as CSSProperties\n                                                }\n                                            />\n                                        )\n                                    )}\n                                    <div\n                                        className={cn(\n                                            'flex flex-1 justify-between leading-none',\n                                            nestLabel ? 'items-end' : 'items-center'\n                                        )}\n                                    >\n                                        <div className='grid gap-1.5'>\n                                            {nestLabel ? tooltipLabel : null}\n                                            <span className='text-muted-fg'>{itemConfig?.label || item.name}</span>\n                                        </div>\n                                        {item.value && (\n                                            <span className='font-medium font-mono text-fg tabular-nums'>\n                                                {item.value.toLocaleString()}\n                                            </span>\n                                        )}\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nconst ChartLegend = Legend\n\nconst ChartLegendContent = ({\n    className,\n    hideIcon = false,\n    payload,\n    verticalAlign = 'bottom',\n    nameKey,\n    ref\n}: ComponentProps<'div'> &\n    Pick<LegendProps, 'payload' | 'verticalAlign'> & {\n        hideIcon?: boolean\n        nameKey?: string\n    }) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n        return null\n    }\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'flex items-center justify-center gap-4',\n                verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n                className\n            )}\n        >\n            {payload.map((item) => {\n                const key = `${nameKey || item.dataKey || 'value'}`\n                const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n                return (\n                    <div\n                        key={item.value}\n                        className={cn(\n                            'flex items-center gap-1.5 *:data-[slot=icon]:size-3 *:data-[slot=icon]:text-muted-fg'\n                        )}\n                    >\n                        {itemConfig?.icon && !hideIcon ? (\n                            <itemConfig.icon />\n                        ) : (\n                            <div\n                                className='h-2 w-2 shrink-0 rounded-[2px]'\n                                style={{\n                                    backgroundColor: item.color\n                                }}\n                            />\n                        )}\n                        {itemConfig?.label}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n    if (typeof payload !== 'object' || payload === null) {\n        return undefined\n    }\n\n    const payloadPayload =\n        'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n            ? payload.payload\n            : undefined\n\n    let configLabelKey: string = key\n\n    if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n        configLabelKey = payload[key as keyof typeof payload] as string\n    } else if (\n        payloadPayload &&\n        key in payloadPayload &&\n        typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n    ) {\n        configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string\n    }\n\n    return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config]\n}\n\nChart.Legend = ChartLegend\nChart.Tooltip = ChartTooltip\nChart.LegendContent = ChartLegendContent\nChart.TooltipContent = ChartTooltipContent\n\nexport { Chart, ChartStyle }\nexport type { ChartConfig }\n"
  },
  "color-wheel": {
    "component": "@/components/ui/color-wheel",
    "raw": "'use client'\n\nimport {\n    ColorWheelTrack,\n    ColorWheel as RACColorWheel,\n    type ColorWheelProps as RACColorWheelProps\n} from 'react-aria-components'\n\nimport { ColorThumb } from './color-thumb'\n\nconst ColorWheel = (props: Omit<RACColorWheelProps, 'outerRadius' | 'innerRadius'>) => {\n    return (\n        <RACColorWheel {...props} outerRadius={100} innerRadius={70}>\n            <ColorWheelTrack className='disabled:opacity-50' style={({ defaultStyle }) => ({ ...defaultStyle })} />\n            <ColorThumb />\n        </RACColorWheel>\n    )\n}\n\nexport { ColorWheel }\n"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\nimport { IconChevronDown, IconLoader, IconSearch, IconX } from 'hq-icons'\nimport type { ReactNode, Ref } from 'react'\nimport type { SelectProps as RACSelectProps } from 'react-aria-components'\nimport {\n    Autocomplete,\n    Button,\n    Group,\n    Input,\n    ListBox,\n    Select as RACSelect,\n    SearchField,\n    SelectValue,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn, fuzzyMatch } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, Label, fieldGroupStyle } from './form'\nimport { ListBoxDetails, ListBoxItem, ListBoxLabel, ListBoxSection } from './list-box'\nimport { PopoverContent } from './popover'\n\ninterface SelectProps<T extends object> extends Omit<RACSelectProps<T>, 'children'>, FieldProps {\n    className?: string\n    items?: Iterable<T>\n    children: ReactNode | ((item: T) => ReactNode)\n    prefix?: ReactNode\n    searchable?: boolean\n    isPending?: boolean\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Select = <T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    items,\n    searchable = false,\n    className,\n    ref,\n    ...props\n}: SelectProps<T>) => {\n    const renderOptions = (\n        <ListBox\n            renderEmptyState={() => <div className='col-span-full p-4 text-center text-muted-fg'>No results found</div>}\n            aria-label='items'\n            items={items}\n            className='grid w-full grid-cols-[auto_1fr_1.5rem_0.5rem_auto] gap-y-1 overflow-y-auto rounded-md outline-hidden'\n        >\n            {children}\n        </ListBox>\n    )\n\n    return (\n        <RACSelect\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5 **:data-placeholder:text-muted-fg', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {label && <Label>{label}</Label>}\n            <Button className={cn(fieldGroupStyle(), 'w-full gap-x-2 p-2 text-base sm:text-sm')}>\n                {props.prefix ? <span className='ml-2 text-muted-fg has-[button]:ml-0'>{props.prefix}</span> : null}\n                <SelectValue className='**:data-avatar:-mx-0.5 grid grid-cols-[auto_1fr] items-center text-base **:data-[slot=icon]:mr-2 **:data-avatar:mr-2 **:data-[slot=description]:hidden **:data-avatar:size-6 sm:text-sm' />\n                <IconChevronDown\n                    data-slot='chevron'\n                    className='group-open/field:-rotate-180 ml-auto size-4 text-muted-fg transition'\n                />\n            </Button>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <PopoverContent respectScreen={false} showArrow={false} trigger='focus' isPicker>\n                {searchable ? (\n                    <Autocomplete filter={fuzzyMatch}>\n                        <SearchField autoFocus className='-mx-1 -mt-1 mb-1 border-b' aria-label='Search'>\n                            {({ isEmpty }) => (\n                                <Group className='flex items-center px-2'>\n                                    {props.isPending ? (\n                                        <IconLoader className='size-4 shrink-0 animate-spin text-muted-fg' />\n                                    ) : (\n                                        <IconSearch className='size-4 shrink-0 text-muted-fg' />\n                                    )}\n                                    <Input\n                                        className='w-full p-2 text-sm outline-hidden [&::-webkit-search-cancel-button]:hidden'\n                                        placeholder='Search...'\n                                    />\n                                    {!isEmpty && (\n                                        <Button\n                                            type='button'\n                                            aria-label='Clear'\n                                            className='mr-2 inline-flex items-center justify-center rounded-md text-muted-fg outline-offset-4'\n                                        >\n                                            <IconX aria-hidden />\n                                        </Button>\n                                    )}\n                                </Group>\n                            )}\n                        </SearchField>\n                        {renderOptions}\n                    </Autocomplete>\n                ) : (\n                    renderOptions\n                )}\n            </PopoverContent>\n        </RACSelect>\n    )\n}\n\nSelect.Item = ListBoxItem\nSelect.Details = ListBoxDetails\nSelect.Section = ListBoxSection\nSelect.Label = ListBoxLabel\n\nexport { Select }\n"
  },
  "spoiler": {
    "component": "@/components/ui/spoiler",
    "raw": "'use client'\n\nimport { IconChevronDown } from 'hq-icons'\nimport { type ReactNode, useRef, useState } from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from './button'\n\ninterface SpoilerProps {\n    initialHeight?: number\n    initialOpacity?: number\n    showMoreText?: string\n    showLessText?: string\n    gradientTransparency?: boolean\n    className?: string\n    children: ReactNode\n}\n\nfunction Spoiler({\n    children,\n    initialHeight = 0,\n    initialOpacity = 0,\n    showMoreText = 'Show More',\n    showLessText = 'Show Less',\n    gradientTransparency = true,\n    className\n}: SpoilerProps) {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const contentRef = useRef<HTMLDivElement>(null)\n    return (\n        <div className={cn('relative overflow-visible', className)}>\n            <div\n                ref={contentRef}\n                className='overflow-hidden transition-all duration-300 ease-in-out'\n                style={{\n                    maxHeight: isExpanded ? contentRef.current?.scrollHeight : initialHeight,\n                    opacity: isExpanded ? 1 : initialOpacity\n                }}\n            >\n                {children}\n            </div>\n            {gradientTransparency && (\n                <div\n                    className={cn(\n                        'absolute inset-0 rounded-lg bg-gradient-to-b from-transparent to-bg',\n                        isExpanded && 'hidden'\n                    )}\n                />\n            )}\n            <Button\n                variant='outline'\n                size='sm'\n                className={cn('-translate-x-1/2 -bottom-4 absolute left-1/2 w-fit')}\n                onPress={() => setIsExpanded(!isExpanded)}\n            >\n                {isExpanded ? showLessText : showMoreText}\n                <IconChevronDown className={cn('size-4 transition', isExpanded && '-rotate-180')} />\n            </Button>\n        </div>\n    )\n}\n\nexport { Spoiler }\n"
  },
  "color-swatch-picker": {
    "component": "@/components/ui/color-swatch-picker",
    "raw": "'use client'\n\nimport { IconCircleCheck } from 'hq-icons'\nimport type { ColorSwatchPickerItemProps, ColorSwatchPickerProps } from 'react-aria-components'\nimport {\n    ColorSwatchPickerItem,\n    ColorSwatchPicker as RACColorSwatchPicker,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { ColorSwatch, isBrightColor } from './color-swatch'\n\nconst ColorSwatchPicker = ({ children, className, layout = 'grid', ...props }: ColorSwatchPickerProps) => {\n    return (\n        <RACColorSwatchPicker\n            layout={layout}\n            className={composeRenderProps(className, (className) => cn('flex gap-1', className))}\n            {...props}\n        >\n            {children}\n        </RACColorSwatchPicker>\n    )\n}\n\nconst SwatchPickerItem = ({ className, ...props }: ColorSwatchPickerItemProps) => {\n    return (\n        <ColorSwatchPickerItem\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative rounded-lg outline-hidden disabled:opacity-50',\n                    'focus:ring-4 focus:ring-ring',\n                    'focus-visible:ring-4 focus-visible:ring-ring',\n                    'disabled:opacity-50',\n                    className\n                )\n            )}\n        >\n            {({ isSelected, color }) => (\n                <>\n                    <ColorSwatch />\n                    {isSelected && (\n                        <IconCircleCheck\n                            style={{ color: isBrightColor(color.toString('hex')) ? '#3F3F46' : '#E4E4E7' }}\n                            className='-translate-x-1/2 -translate-y-1/2 absolute top-1/2 left-1/2 size-5'\n                        />\n                    )}\n                </>\n            )}\n        </ColorSwatchPickerItem>\n    )\n}\n\nColorSwatchPicker.Item = SwatchPickerItem\n\nexport { ColorSwatchPicker }\n"
  },
  "multi-select": {
    "component": "@/components/ui/multi-select",
    "raw": "'use client'\n\nimport {\n    Children,\n    type KeyboardEvent,\n    type ReactNode,\n    type Ref,\n    isValidElement,\n    useEffect,\n    useRef,\n    useState\n} from 'react'\n\nimport { IconChevronDown, IconX } from 'hq-icons'\nimport type { ComboBoxProps, GroupProps, Key, ListBoxProps, Selection } from 'react-aria-components'\nimport {\n    Button,\n    ComboBox,\n    Group,\n    Input,\n    ListBox,\n    Tag,\n    TagGroup,\n    TagList,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn, fuzzyMatch } from '@/lib/utils'\nimport { Description, FieldGroup, type FieldProps, Label } from './form'\nimport { ListBoxDetails, ListBoxItem, ListBoxSection } from './list-box'\nimport { PopoverContent } from './popover'\n\ninterface MultiSelectProps<T>\n    extends ListBoxProps<T>,\n        Pick<ComboBoxProps<T & { selectedKeys: Selection }>, 'isRequired' | 'validate' | 'validationBehavior'>,\n        FieldProps,\n        Pick<GroupProps, 'isDisabled' | 'isInvalid'> {\n    className?: string\n    errorMessage?: string\n    maxItems?: number\n    ref?: Ref<HTMLDivElement>\n}\n\nfunction mapToNewObject<T extends object>(array: T[]): { id: T[keyof T]; textValue: T[keyof T] }[] {\n    return array.map((item) => {\n        const idProperty = Object.keys(item).find((key) => key === 'id' || key === 'key')\n        const textProperty = Object.keys(item).find((key) => key !== 'id' && key !== 'key')\n        return {\n            id: item[idProperty as keyof T],\n            textValue: item[textProperty as keyof T]\n        }\n    })\n}\n\nconst MultiSelect = <T extends object>({\n    className,\n    maxItems = Number.POSITIVE_INFINITY,\n    children,\n    ref,\n    ...props\n}: MultiSelectProps<T>) => {\n    const triggerRef = useRef<HTMLDivElement>(null)\n    const inputRef = useRef<HTMLInputElement>(null)\n    const triggerButtonRef = useRef<HTMLButtonElement>(null)\n    const popoverRef = useRef<HTMLDivElement>(null)\n    const [inputValue, setInputValue] = useState('')\n    const [selectedKeys, onSelectionChange] = useState<Selection>(new Set(props.selectedKeys))\n\n    const isMax = [...selectedKeys].length >= maxItems\n\n    useEffect(() => {\n        setInputValue('')\n        return () => {\n            inputRef.current?.focus()\n        }\n    }, [props?.selectedKeys, selectedKeys])\n\n    const addItem = (e: Key | null) => {\n        if (!e || isMax) return\n        onSelectionChange?.((s) => new Set([...s, e!]))\n        // @ts-expect-error incompatible type Key and Selection\n        props.onSelectionChange?.((s) => new Set([...s, e!]))\n    }\n\n    const removeItem = (e: Set<Key>) => {\n        onSelectionChange?.((s) => new Set([...s].filter((i) => i !== e.values().next().value)))\n        props.onSelectionChange?.(\n            // @ts-expect-error incompatible type Key and Selection\n            (s) => new Set([...s].filter((i) => i !== e.values().next().value))\n        )\n    }\n\n    const onKeyDownCapture = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Backspace' && inputValue === '') {\n            onSelectionChange?.((s) => new Set([...s].slice(0, -1)))\n            // @ts-expect-error incompatible type Key and Selection\n            props.onSelectionChange?.((s) => new Set([...s].slice(0, -1)))\n        }\n    }\n\n    const parsedItems = props.items\n        ? mapToNewObject(props.items as T[])\n        : mapToNewObject(Children.map(children as ReactNode, (child) => isValidElement(child) && child.props) as T[])\n\n    const availableItemsToSelect = props.items\n        ? parsedItems.filter((item) => ![...selectedKeys].includes(item.id as Key))\n        : parsedItems\n\n    const filteredChildren = props.items\n        ? parsedItems.filter((item) => ![...selectedKeys].includes(item.id as Key))\n        : Children.map(children as ReactNode, (child) => isValidElement(child) && child.props)?.filter(\n              (item: T & any) => ![...selectedKeys].includes(item.id)\n          )\n    return (\n        <Group\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex h-fit flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n        >\n            {props.label && <Label onClick={() => inputRef.current?.focus()}>{props.label}</Label>}\n            <FieldGroup\n                ref={triggerRef}\n                isDisabled={props.isDisabled}\n                isInvalid={props.isInvalid || !!props.errorMessage}\n                className={cn(\n                    'flex h-fit min-h-9 flex-wrap items-center py-1 **:[input]:py-1',\n                    'group-has-invalid/field:group-has-focus/field:border-danger group-has-invalid/field:group-has-open/field:border-danger group-has-invalid/field:group-has-open/field:ring-invalid group-has-invalid/field:hover:border-danger/70'\n                )}\n            >\n                {({ isInvalid, isDisabled }) => (\n                    <>\n                        <TagGroup onRemove={removeItem} aria-hidden aria-label='selected-items'>\n                            <TagList\n                                className='flex flex-1 flex-wrap gap-1 pl-2 empty:pl-0'\n                                items={[...selectedKeys].map((key) => ({\n                                    id: key,\n                                    textValue: parsedItems.find((item) => item.id === key)?.textValue as string\n                                }))}\n                            >\n                                {(item: { id: Key; textValue: Key }) => (\n                                    <Tag\n                                        isDisabled={isDisabled}\n                                        className={({ isFocusVisible }) =>\n                                            cn(\n                                                'inline-flex items-center justify-between gap-1 rounded-md border px-2 py-0.5 text-sm outline-hidden',\n                                                isInvalid\n                                                    ? 'border-danger/70 bg-danger/10 text-danger'\n                                                    : 'border-primary/70 bg-primary/10 text-primary',\n                                                isFocusVisible &&\n                                                    `ring-2 ${isInvalid ? 'ring-danger/70' : 'ring-primary/70'}`\n                                            )\n                                        }\n                                        textValue={item.textValue as string}\n                                    >\n                                        {item.textValue as string}\n                                        <Button\n                                            slot='remove'\n                                            className='-mr-1 flex size-4 cursor-pointer items-center justify-center rounded-md pressed:bg-primary/70 pressed:text-primary-fg outline-hidden hover:bg-primary hover:text-primary-fg'\n                                        >\n                                            <IconX className='size-3 shrink-0' />\n                                        </Button>\n                                    </Tag>\n                                )}\n                            </TagList>\n                        </TagGroup>\n                        <ComboBox\n                            defaultFilter={fuzzyMatch}\n                            isRequired={props.isRequired}\n                            validate={props.validate}\n                            validationBehavior={props.validationBehavior}\n                            isInvalid={isInvalid}\n                            isReadOnly={isMax}\n                            isDisabled={isDisabled}\n                            className='flex-1 text-sm/5'\n                            aria-label='Search'\n                            onSelectionChange={addItem}\n                            inputValue={inputValue}\n                            onInputChange={isMax ? () => {} : setInputValue}\n                        >\n                            <div className='flex flex-row items-center'>\n                                <Input\n                                    onFocus={() => triggerButtonRef.current?.click()}\n                                    ref={inputRef}\n                                    onKeyDownCapture={onKeyDownCapture}\n                                    placeholder={\n                                        isMax\n                                            ? 'Max items reached'\n                                            : !availableItemsToSelect || !filteredChildren?.length\n                                              ? ''\n                                              : 'Pick some items'\n                                    }\n                                    className='w-full text-sm/7 outline-hidden'\n                                />\n                                <Button\n                                    ref={triggerButtonRef}\n                                    aria-label='Chevron'\n                                    className='mr-2 ml-auto inline-flex w-auto flex-1 items-center justify-center rounded-md text-muted-fg outline-hidden'\n                                >\n                                    <IconChevronDown className='group-has-open/field:-rotate-180 size-4 transition' />\n                                </Button>\n                            </div>\n                            <PopoverContent\n                                ref={popoverRef}\n                                respectScreen={false}\n                                showArrow={false}\n                                triggerRef={triggerRef}\n                                trigger='focus'\n                                isPicker\n                                style={{\n                                    minWidth: triggerRef.current?.offsetWidth,\n                                    width: triggerRef.current?.offsetWidth\n                                }}\n                            >\n                                <ListBox\n                                    className='grid w-full grid-cols-[auto_1fr_1.5rem_0.5rem_auto] gap-y-1 overflow-y-auto rounded-md outline-hidden'\n                                    selectionMode='multiple'\n                                    renderEmptyState={() => <div>No Items</div>}\n                                    items={(availableItemsToSelect as T[]) ?? props.items}\n                                    {...props}\n                                >\n                                    {filteredChildren?.map((item: any) => (\n                                        <MultiSelect.Item\n                                            key={item.id as Key}\n                                            id={item.id as Key}\n                                            textValue={item.textValue as string}\n                                        >\n                                            {item.textValue as string}\n                                        </MultiSelect.Item>\n                                    )) ?? children}\n                                </ListBox>\n                            </PopoverContent>\n                        </ComboBox>\n                    </>\n                )}\n            </FieldGroup>\n            {props.description && <Description>{props.description}</Description>}\n            {props.errorMessage && <Description className='text-danger text-sm/5'>{props.errorMessage}</Description>}\n        </Group>\n    )\n}\n\nMultiSelect.Item = ListBoxItem\nMultiSelect.Section = ListBoxSection\nMultiSelect.ItemDetails = ListBoxDetails\n\nexport { MultiSelect }\n"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\n\nimport { IconCalendarDays } from 'hq-icons'\nimport {\n    Button,\n    type DateValue,\n    DatePicker as RACDatePicker,\n    type DatePickerProps as RACDatePickerProps,\n    DateRangePicker as RACDateRangePicker,\n    type DateRangePickerProps as RACDateRangePickerProps,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Calendar, RangeCalendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\nimport { PopoverContent } from './popover'\n\ninterface DatePickerProps<T extends DateValue> extends RACDatePickerProps<T>, FieldProps {}\n\nconst DatePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DatePickerProps<T>) => {\n    return (\n        <RACDatePicker\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isOpen }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup className='min-w-40'>\n                        <DateInput className='w-full px-2 text-base lg:text-sm' />\n                        <Button className='mr-1 inline-flex size-8 cursor-pointer items-center justify-center rounded-lg outline-hidden'>\n                            <IconCalendarDays\n                                aria-hidden\n                                className={cn('size-4', isOpen ? 'text-primary' : 'text-muted-fg')}\n                            />\n                        </Button>\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                    <PopoverContent showArrow={false} className='p-4'>\n                        <Calendar />\n                        <Button\n                            type='button'\n                            slot='close'\n                            className='mt-2 w-full rounded-lg border pressed:bg-muted/50 p-2 text-center hover:bg-muted/40 sm:hidden'\n                        >\n                            Close\n                        </Button>\n                    </PopoverContent>\n                </>\n            )}\n        </RACDatePicker>\n    )\n}\n\ninterface DateRangePickerProps<T extends DateValue> extends RACDateRangePickerProps<T>, FieldProps {}\n\nconst DateRangePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DateRangePickerProps<T>) => {\n    return (\n        <RACDateRangePicker\n            shouldCloseOnSelect={false}\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n        >\n            {({ isOpen }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup className='w-auto min-w-40'>\n                        <DateInput slot='start' className='px-2 text-base tabular-nums lg:text-sm' />\n                        <span aria-hidden='true' className='flex-1 px-2 py-1.5 text-base tabular-nums lg:text-sm'>\n                            –\n                        </span>\n                        <DateInput slot='end' className='flex-1 px-2 py-1.5 text-base tabular-nums lg:text-sm' />\n                        <Button className='mr-1 inline-flex size-8 cursor-pointer items-center justify-center rounded-lg outline-hidden'>\n                            <IconCalendarDays\n                                aria-hidden\n                                className={cn('size-4', isOpen ? 'text-primary' : 'text-muted-fg')}\n                            />\n                        </Button>\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                    <PopoverContent showArrow={false}>\n                        <RangeCalendar />\n                        <Button\n                            type='button'\n                            slot='close'\n                            className='mt-2 w-full rounded-lg border pressed:bg-primary/50 p-2 text-center hover:bg-primary/40 sm:hidden'\n                        >\n                            Close\n                        </Button>\n                    </PopoverContent>\n                </>\n            )}\n        </RACDateRangePicker>\n    )\n}\n\nexport { DatePicker, DateRangePicker }\n"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "import type { ComponentPropsWithRef } from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst Card = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return (\n        <div\n            data-slot='card'\n            className={cn(\n                'flex flex-col rounded-lg border bg-bg text-fg shadow-xs has-[table]:overflow-hidden not-has-[[slot=footer]]:**:[[slot=content]]:pb-6 **:[[slot=table]]:rounded-b-none **:[[slot=table]]:border-x-0',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\ninterface HeaderProps extends ComponentPropsWithRef<'div'> {\n    title?: string\n    description?: string\n}\n\nconst CardHeader = ({ className, title, description, children, ...props }: HeaderProps) => (\n    <div\n        slot='header'\n        className={cn(\n            'grid items-start gap-1.5 p-6 md:auto-rows-min md:grid-rows-[auto_auto] md:has-[[slot=action]]:grid-cols-[1fr_auto]',\n            className\n        )}\n        {...props}\n    >\n        {title && <CardTitle>{title}</CardTitle>}\n        {description && <CardDescription>{description}</CardDescription>}\n        {!title && typeof children === 'string' ? <CardTitle>{children}</CardTitle> : children}\n    </div>\n)\n\nconst CardTitle = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return (\n        <div slot='title' className={cn('font-semibold text-lg leading-none tracking-tight', className)} {...props} />\n    )\n}\n\nconst CardDescription = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return <div slot='description' className={cn('text-muted-fg text-sm md:row-start-2', className)} {...props} />\n}\n\nconst CardAction = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return (\n        <div\n            slot='action'\n            className={cn(\n                'flex items-center gap-2 self-start justify-self-end md:col-start-2 md:row-span-2 md:row-start-1',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CardContent = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return <div slot='content' className={cn('px-6 has-[table]:p-0', className)} {...props} />\n}\n\nconst CardFooter = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return <div slot='footer' className={cn('flex items-center p-6', className)} {...props} />\n}\n\nCard.Content = CardContent\nCard.Description = CardDescription\nCard.Footer = CardFooter\nCard.Header = CardHeader\nCard.Title = CardTitle\nCard.Action = CardAction\n\nexport { Card, CardAction, CardContent, CardDescription, CardFooter, CardHeader, CardTitle }\n"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport type {\n    TabListProps as RACTabListProps,\n    TabPanelProps as RACTabPanelProps,\n    TabProps as RACTabProps,\n    TabsProps as RACTabsProps\n} from 'react-aria-components'\nimport { Tab as RACTab, Tabs as RACTabs, TabList, TabPanel, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport type { Ref } from 'react'\n\ninterface TabsProps extends RACTabsProps {\n    ref?: Ref<HTMLDivElement>\n    variant?: 'primary' | 'secondary' | 'tertiary'\n}\nconst Tabs = ({ className, ref, ...props }: TabsProps) => {\n    return (\n        <RACTabs\n            data-variant={props.variant ?? 'primary'}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group/tabs grid orientation-horizontal:grid-cols-1 orientation-vertical:grid-cols-[auto_1fr] gap-2',\n                    className\n                )\n            )}\n            ref={ref}\n            {...props}\n        />\n    )\n}\n\ninterface TabListProps<T extends object> extends RACTabListProps<T> {\n    ref?: Ref<HTMLDivElement>\n}\nconst List = <T extends object>({ className, ref, ...props }: TabListProps<T>) => {\n    return (\n        <TabList\n            ref={ref}\n            {...props}\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'no-scrollbar rounded-lg bg-bg p-1 text-muted-fg group-data-[variant=primary]/tabs:border',\n                    orientation === 'horizontal'\n                        ? 'group-data-[variant=tertiary]/tabs:-space-x-[1px] flex w-full items-center overflow-x-auto group-data-[variant=secondary]/tabs:rounded-b-none group-data-[variant=secondary]/tabs:border-b group-data-[variant=secondary]/tabs:pb-0'\n                        : 'group-data-[variant=tertiary]/tabs:-space-y-[1px] grid h-fit items-start group-data-[variant=secondary]/tabs:rounded-l-none group-data-[variant=secondary]/tabs:border-l group-data-[variant=secondary]/tabs:pl-0',\n                    className\n                )\n            )}\n        />\n    )\n}\n\ninterface TabProps extends RACTabProps {\n    ref?: Ref<HTMLButtonElement>\n}\n\nconst Tab = ({ className, ref, ...props }: TabProps) => {\n    return (\n        <RACTab\n            ref={ref}\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative inline-flex cursor-pointer items-center gap-x-2 whitespace-nowrap px-3 py-1 font-medium text-sm outline-hidden transition',\n                    'group-data-[variant=primary]/tabs:rounded-md group-data-[variant=secondary]/tabs:rounded-b-none group-data-[variant=secondary]/tabs:border-transparent group-data-[variant=secondary]/tabs:group-orientation-horizontal/tabs:border-b-2 group-data-[variant=secondary]/tabs:group-orientation-vertical/tabs:border-l-2',\n                    'selected:group-data-[variant=primary]/tabs:bg-primary/10 selected:group-data-[variant=primary]/tabs:text-primary',\n                    'selected:group-data-[variant=secondary]/tabs:border-primary selected:group-data-[variant=secondary]/tabs:text-primary',\n                    'group-data-[variant=tertiary]/tabs:rounded-md group-data-[variant=tertiary]/tabs:border group-data-[variant=tertiary]/tabs:border-transparent group-data-[variant=tertiary]/tabs:group-orientation-vertical/tabs:rounded-r-none group-data-[variant=tertiary]/tabs:group-orientation-horizontal/tabs:rounded-b-none group-data-[variant=tertiary]/tabs:group-orientation-vertical/tabs:border-r-primary group-data-[variant=tertiary]/tabs:group-orientation-horizontal/tabs:border-b-primary',\n                    'selected:group-data-[variant=tertiary]/tabs:border-primary selected:group-data-[variant=tertiary]/tabs:text-primary selected:group-data-[variant=tertiary]/tabs:group-orientation-vertical/tabs:border-r-transparent selected:group-data-[variant=tertiary]/tabs:group-orientation-horizontal/tabs:border-b-transparent',\n                    'focus-visible:text-primary focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n                    'disabled:opacity-50',\n                    className\n                )\n            )}\n        />\n    )\n}\n\ninterface TabPanelProps extends RACTabPanelProps {\n    ref?: Ref<HTMLDivElement>\n}\nconst Panel = ({ className, ref, ...props }: TabPanelProps) => {\n    return <TabPanel {...props} ref={ref} className={cn(className, 'flex-1 text-fg text-sm outline-hidden')} />\n}\n\nTabs.List = List\nTabs.Label = Tab\nTabs.Content = Panel\n\nexport { Tabs }\n"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport type { ReactNode, RefObject } from 'react'\nimport { Switch as RACSwitch, type SwitchProps as RACSwitchProps, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from './form'\n\ninterface SwitchProps extends RACSwitchProps {\n    ref?: RefObject<HTMLLabelElement>\n}\n\nconst Switch = ({ children, className, ref, ...props }: SwitchProps) => {\n    return (\n        <RACSwitch\n            ref={ref}\n            className={composeRenderProps(className, (className) =>\n                cn('group/switch inline-flex touch-none items-center sm:text-sm', className)\n            )}\n            {...props}\n        >\n            <div\n                className={cn(\n                    'mr-2 inline-flex h-5 w-8 items-center rounded-full border bg-muted px-0.5 transition',\n                    'group-focus-visible/switch:border-primary group-focus-visible/switch:ring-2 group-focus-visible/switch:ring-ring group-focus-visible/switch:ring-offset-2',\n                    'group-hover/switch:border-primary/70 group-selected/switch:bg-primary',\n                    'cursor-pointer group-disabled/switch:cursor-default group-disabled/switch:opacity-50'\n                )}\n            >\n                <span className='size-3.5 rounded-full bg-primary-fg shadow-sm transition-transform group-selected/switch:translate-x-3' />\n            </div>\n            <Label>{children as ReactNode}</Label>\n        </RACSwitch>\n    )\n}\n\nexport { Switch }\n"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport { IconCheck, IconChevronRight } from 'hq-icons'\nimport type { CSSProperties, ComponentPropsWithRef } from 'react'\nimport {\n    type ButtonProps,\n    type MenuProps,\n    type MenuSectionProps,\n    type MenuTriggerProps,\n    type PopoverProps,\n    type MenuItemProps as RACMenuItemProps,\n    composeRenderProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Collection,\n    Header,\n    PopoverContext,\n    Menu as RACMenu,\n    MenuItem as RACMenuItem,\n    MenuSection as RACMenuSection,\n    MenuTrigger as RACMenuTrigger,\n    SubmenuTrigger,\n    useSlottedContext\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { ListBoxDetails, ListBoxLabel, ListBoxSeparator, headerStyle, itemStyle, sectionStyle } from './list-box'\nimport { PopoverContent } from './popover'\n\nconst Menu = ({ ...props }: MenuTriggerProps) => <RACMenuTrigger {...props} />\n\ninterface MenuContentProps<T>\n    extends MenuProps<T>,\n        Pick<\n            PopoverProps,\n            | 'placement'\n            | 'offset'\n            | 'crossOffset'\n            | 'arrowBoundaryOffset'\n            | 'triggerRef'\n            | 'isOpen'\n            | 'onOpenChange'\n            | 'shouldFlip'\n        > {\n    className?: string\n    style?: CSSProperties\n    respectScreen?: boolean\n}\n\nconst MenuContent = <T extends object>({ className, respectScreen = true, ...props }: MenuContentProps<T>) => {\n    const popoverContext = useSlottedContext(PopoverContext)!\n    const isSubmenuTrigger = popoverContext?.trigger === 'SubmenuTrigger'\n    const optimalOffset = isSubmenuTrigger ? 0 : 8\n    return (\n        <PopoverContent\n            showArrow={false}\n            respectScreen={respectScreen}\n            offset={props.offset ?? optimalOffset}\n            {...props}\n        >\n            <RACMenu\n                className={cn(\n                    'grid max-h-[calc(var(--visual-viewport-height)-10rem)] grid-cols-[auto_1fr_auto] overflow-auto rounded-lg p-1 outline-hidden sm:max-h-[inherit] sm:min-w-40',\n                    className\n                )}\n                {...props}\n            />\n        </PopoverContent>\n    )\n}\n\ninterface MenuItemProps extends RACMenuItemProps {\n    isDanger?: boolean\n}\n\nconst MenuItem = ({ className, isDanger = false, children, ...props }: MenuItemProps) => {\n    const textValue = props.textValue || (typeof children === 'string' ? children : undefined)\n    return (\n        <RACMenuItem\n            className={composeRenderProps(className, (className) =>\n                itemStyle({\n                    className: cn(\n                        isDanger\n                            ? 'text-danger **:text-danger open:bg-danger/10 open:text-danger focus:bg-danger/10 focus:text-danger focus:**:text-danger'\n                            : 'text-fg',\n                        className\n                    )\n                })\n            )}\n            textValue={textValue}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {values.isSelected && <IconCheck className='mr-2 text-success' data-slot='checked' />}\n                    {typeof children === 'function' ? children(values) : children}\n                    {values.hasSubmenu && <IconChevronRight data-slot='chevron' className='ml-auto' />}\n                </>\n            )}\n        </RACMenuItem>\n    )\n}\n\nconst MenuHeader = ({ className, ...props }: ComponentPropsWithRef<typeof Header>) => (\n    <Header\n        className={cn(\n            '-mx-1 col-span-full mb-1 touch-none border-b px-2.5 py-2 font-semibold text-base sm:px-3 sm:pb-2.5 sm:text-sm',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst MenuSection = <T extends object>({\n    className,\n    items,\n    children,\n    ...props\n}: MenuSectionProps<T> & { title?: string }) => {\n    return (\n        <RACMenuSection className={sectionStyle()} {...props}>\n            {'title' in props && <Header className={headerStyle()}>{props.title}</Header>}\n            <Collection items={items}>{children}</Collection>\n        </RACMenuSection>\n    )\n}\n\nconst MenuTrigger = (props: ButtonProps) => <Button {...props} />\n\nconst MenuLabel = ListBoxLabel\nconst MenuSeparator = ListBoxSeparator\nconst MenuDetails = ListBoxDetails\n\nMenu.Trigger = MenuTrigger\nMenu.Submenu = SubmenuTrigger\nMenu.Item = MenuItem\nMenu.Content = MenuContent\nMenu.Header = MenuHeader\nMenu.Section = MenuSection\nMenu.Details = MenuDetails\nMenu.Label = MenuLabel\nMenu.Separator = MenuSeparator\n\nexport { Menu, MenuItem, MenuContent, MenuSection, MenuLabel, MenuSeparator, MenuDetails }\nexport type { MenuContentProps }\n"
  },
  "context-menu": {
    "component": "@/components/ui/context-menu",
    "raw": "'use client'\n\nimport {\n    type ComponentPropsWithRef,\n    type Dispatch,\n    type MouseEvent,\n    type ReactNode,\n    type RefObject,\n    type SetStateAction,\n    createContext,\n    createRef,\n    use,\n    useRef,\n    useState\n} from 'react'\n\nimport type { MenuProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Menu, MenuContent } from './menu'\n\ninterface ContextMenuContextProps {\n    triggerRef: RefObject<HTMLDivElement | null>\n    contextMenuOffset: { offset: number; crossOffset: number } | null\n    setContextMenuOffset: Dispatch<SetStateAction<{ offset: number; crossOffset: number } | null>>\n}\n\nconst ContextMenuContext = createContext<ContextMenuContextProps>({\n    triggerRef: createRef(),\n    contextMenuOffset: null,\n    setContextMenuOffset: () => {}\n})\n\nconst useContextMenu = () => {\n    const context = use(ContextMenuContext)\n    if (!context) {\n        throw new Error('useContextMenu must be used within a ContextMenu')\n    }\n    return context\n}\n\ninterface ContextMenuProps {\n    children: ReactNode\n}\n\nconst ContextMenu = ({ children }: ContextMenuProps) => {\n    const [contextMenuOffset, setContextMenuOffset] = useState<{\n        offset: number\n        crossOffset: number\n    } | null>(null)\n    const triggerRef = useRef<HTMLDivElement>(null)\n    return (\n        <ContextMenuContext.Provider value={{ triggerRef, contextMenuOffset, setContextMenuOffset }}>\n            {children}\n        </ContextMenuContext.Provider>\n    )\n}\n\nconst ContextMenuTrigger = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { setContextMenuOffset, triggerRef } = useContextMenu()\n    const areaRef = useRef<HTMLDivElement>(null)\n\n    const onContextMenu = (e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault()\n        const rect = e.currentTarget.getBoundingClientRect()\n        triggerRef.current = areaRef.current\n        setContextMenuOffset({\n            offset: e.clientY - rect.bottom,\n            crossOffset: e.clientX - rect.left\n        })\n    }\n    return (\n        <div\n            className={cn('relative cursor-default select-none outline-hidden disabled:opacity-50', className)}\n            aria-haspopup='menu'\n            ref={areaRef}\n            onContextMenu={onContextMenu}\n            {...props}\n        />\n    )\n}\n\ntype ContextMenuContentProps<T> = Omit<\n    MenuProps<T>,\n    'showArrow' | 'isOpen' | 'onOpenChange' | 'triggerRef' | 'placement' | 'shouldFlip' | 'className'\n>\n\nconst ContextMenuContent = <T extends object>(props: Omit<ContextMenuContentProps<T>, 'style'>) => {\n    const { contextMenuOffset, setContextMenuOffset, triggerRef } = useContextMenu()\n    return contextMenuOffset ? (\n        <MenuContent\n            aria-label={props['aria-label'] ?? 'Context Menu'}\n            isOpen={!!contextMenuOffset}\n            offset={contextMenuOffset?.offset ?? 0}\n            crossOffset={contextMenuOffset?.crossOffset}\n            triggerRef={triggerRef}\n            placement='bottom left'\n            onOpenChange={() => setContextMenuOffset(null)}\n            onClose={() => setContextMenuOffset(null)}\n            {...props}\n        />\n    ) : null\n}\n\nContextMenu.Trigger = ContextMenuTrigger\nContextMenu.Content = ContextMenuContent\n\nContextMenu.Item = Menu.Item\nContextMenu.Label = Menu.Label\nContextMenu.Separator = Menu.Separator\nContextMenu.Details = Menu.Details\nContextMenu.Section = Menu.Section\nContextMenu.Header = Menu.Header\n\nexport { ContextMenu }\n"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\n\nimport {\n    type DateInputProps,\n    DateSegment,\n    type DateValue,\n    DateField as RACDateField,\n    type DateFieldProps as RACDateFieldProps,\n    DateInput as RACDateInput,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\n\ninterface DateFieldProps<T extends DateValue> extends RACDateFieldProps<T>, FieldProps {\n    prefix?: ReactNode\n    suffix?: ReactNode\n    ref?: Ref<HTMLDivElement>\n}\n\nconst DateField = <T extends DateValue>({\n    prefix,\n    suffix,\n    label,\n    description,\n    errorMessage,\n    className,\n    ref,\n    ...props\n}: DateFieldProps<T>) => {\n    return (\n        <RACDateField\n            isInvalid={props.isInvalid || !!errorMessage}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                {prefix ? <span data-slot='prefix'>{prefix}</span> : null}\n                <DateInput />\n                {suffix ? <span data-slot='suffix'>{suffix}</span> : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </RACDateField>\n    )\n}\n\nconst DateInput = ({ className, ...props }: Omit<DateInputProps, 'children'>) => {\n    return (\n        <RACDateInput\n            className={composeRenderProps(className, (className) =>\n                cn('bg-transparent p-2 text-base disabled:opacity-50 lg:text-sm', className)\n            )}\n            {...props}\n        >\n            {(segment) => (\n                <DateSegment\n                    segment={segment}\n                    className={cn(\n                        'inline shrink-0 rounded-sm p-0.5 type-literal:px-0 text-fg tabular-nums tracking-wider caret-transparent outline-0 sm:text-sm sm:uppercase',\n                        segment.isPlaceholder && 'text-muted-fg',\n                        'focus:font-bold focus:text-primary',\n                        'invalid:not-type-literal:text-danger invalid:focus:text-primary-fg'\n                    )}\n                />\n            )}\n        </RACDateInput>\n    )\n}\n\nexport { DateField, DateInput }\n"
  },
  "drawer": {
    "component": "@/components/ui/drawer",
    "raw": "'use client'\n\nimport { AnimatePresence, motion } from 'motion/react'\nimport { use } from 'react'\nimport type { ButtonProps, DialogProps, DialogTriggerProps, ModalOverlayProps } from 'react-aria-components'\nimport {\n    Button,\n    Dialog,\n    DialogTrigger,\n    ModalOverlay,\n    OverlayTriggerStateContext,\n    Modal as RACModal\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { DialogBody, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from './dialog'\n\nconst Modal = motion.create(RACModal)\nconst Overlay = motion.create(ModalOverlay)\n\nconst Drawer = (props: DialogTriggerProps) => <DialogTrigger {...props} />\n\ninterface DrawerContentProps\n    extends Omit<ModalOverlayProps, 'className' | 'children' | 'isDismissable'>,\n        Pick<DialogProps, 'aria-label' | 'aria-labelledby' | 'role' | 'children' | 'className'> {\n    isFloating?: boolean\n    className?: string\n    style?: React.CSSProperties\n    side?: 'top' | 'bottom' | 'left' | 'right'\n    withNotch?: boolean\n}\n\nconst DrawerContent = ({\n    side = 'bottom',\n    isFloating = false,\n    withNotch = true,\n    children,\n    className,\n    ...props\n}: DrawerContentProps) => {\n    const state = use(OverlayTriggerStateContext)!\n\n    return (\n        <AnimatePresence>\n            {(props?.isOpen || state?.isOpen) && (\n                <Overlay\n                    isDismissable\n                    isOpen={props?.isOpen || state?.isOpen}\n                    onOpenChange={props?.onOpenChange || state?.setOpen}\n                    initial={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    animate={{\n                        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                        backdropFilter: 'blur(4px)'\n                    }}\n                    exit={{ backgroundColor: 'rgba(0, 0, 0, 0)', backdropFilter: 'blur(0px)' }}\n                    className='fixed inset-0 z-50 will-change-auto [--visual-viewport-vertical-padding:32px]'\n                >\n                    {({ state }) => (\n                        <Modal\n                            className={cn(\n                                'fixed max-h-full touch-none overflow-hidden bg-bg align-middle text-fg shadow-sm will-change-transform',\n                                side === 'top' &&\n                                    `${\n                                        isFloating\n                                            ? 'inset-x-2 top-2 rounded-lg border'\n                                            : 'inset-x-0 top-0 rounded-b-2xl border-b'\n                                    }`,\n                                side === 'right' &&\n                                    `w-full max-w-xs overflow-y-auto **:[[slot=header]]:text-left ${\n                                        isFloating\n                                            ? 'inset-y-2 right-2 rounded-lg border'\n                                            : 'inset-y-0 right-0 h-auto border-l'\n                                    }`,\n                                side === 'bottom' &&\n                                    `${\n                                        isFloating\n                                            ? 'inset-x-2 bottom-2 rounded-lg border'\n                                            : 'inset-x-0 bottom-0 rounded-t-2xl border-t'\n                                    }`,\n                                side === 'left' &&\n                                    `w-full max-w-xs overflow-y-auto **:[[slot=header]]:text-left ${\n                                        isFloating\n                                            ? 'inset-y-2 left-2 rounded-lg border'\n                                            : 'inset-y-0 left-0 h-auto border-r'\n                                    }`,\n                                className\n                            )}\n                            initial={{\n                                x: side === 'left' ? '-100%' : side === 'right' ? '100%' : 0,\n                                y: side === 'top' ? '-100%' : side === 'bottom' ? '100%' : 0\n                            }}\n                            animate={{ x: 0, y: 0 }}\n                            exit={{\n                                x: side === 'left' ? '-100%' : side === 'right' ? '100%' : 0,\n                                y: side === 'top' ? '-100%' : side === 'bottom' ? '100%' : 0\n                            }}\n                            drag={side === 'left' || side === 'right' ? 'x' : 'y'}\n                            whileDrag={{ cursor: 'grabbing' }}\n                            dragConstraints={{ top: 0, bottom: 0, left: 0, right: 0 }}\n                            dragTransition={{ bounceStiffness: 600, bounceDamping: 20 }}\n                            transition={{ duration: 0.15, ease: 'easeInOut' }}\n                            onDragEnd={(_, { offset, velocity }) => {\n                                if (side === 'bottom' && (velocity.y > 150 || offset.y > screen.height * 0.25)) {\n                                    state.close()\n                                }\n                                if (side === 'top' && (velocity.y < -150 || offset.y < screen.height * 0.25)) {\n                                    state.close()\n                                }\n                                if (side === 'left' && velocity.x < -150) {\n                                    state.close()\n                                }\n                                if (side === 'right' && velocity.x > 150) {\n                                    state.close()\n                                }\n                            }}\n                            dragElastic={{\n                                top: side === 'top' ? 1 : 0,\n                                bottom: side === 'bottom' ? 1 : 0,\n                                left: side === 'left' ? 1 : 0,\n                                right: side === 'right' ? 1 : 0\n                            }}\n                            dragPropagation\n                        >\n                            <Dialog\n                                aria-label='Drawer'\n                                role='dialog'\n                                className={cn(\n                                    'relative flex flex-col overflow-hidden outline-hidden will-change-auto',\n                                    side === 'top' || side === 'bottom'\n                                        ? 'mx-auto max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] max-w-lg'\n                                        : 'h-full'\n                                )}\n                            >\n                                {withNotch && side === 'bottom' && (\n                                    <div className='notch sticky top-0 mx-auto mt-2.5 h-1.5 w-10 shrink-0 touch-pan-y rounded-full bg-fg/20' />\n                                )}\n                                {children as React.ReactNode}\n                                {withNotch && side === 'top' && (\n                                    <div className='notch sticky bottom-0 mx-auto mb-2.5 h-1.5 w-10 shrink-0 touch-pan-y rounded-full bg-fg/20' />\n                                )}\n                            </Dialog>\n                        </Modal>\n                    )}\n                </Overlay>\n            )}\n        </AnimatePresence>\n    )\n}\n\nDrawer.Trigger = (props: ButtonProps) => <Button {...props} />\n\nDrawer.Content = DrawerContent\n\nDrawer.Header = DialogHeader\nDrawer.Title = DialogTitle\nDrawer.Description = DialogDescription\nDrawer.Body = DialogBody\nDrawer.Footer = DialogFooter\n\nexport { Drawer }\nexport type { DrawerContentProps }\n"
  },
  "keyboard": {
    "component": "@/components/ui/keyboard",
    "raw": "'use client'\n\nimport { Keyboard as RACKeyboard } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport type { ComponentPropsWithRef } from 'react'\n\ntype ShortcutKeyResult = {\n    symbol: string\n    readable: string\n}\n\nconst shortcutKeyMap: Record<string, ShortcutKeyResult> = {\n    mod: { symbol: '⌘', readable: 'Command/Control' },\n    win: { symbol: '⌘', readable: 'Win' },\n    meta: { symbol: '⌘', readable: 'Meta' },\n    alt: { symbol: '⌥', readable: 'Option/Alt' },\n    shift: { symbol: '⇧', readable: 'Shift' },\n    space: { symbol: '␣', readable: 'Space' },\n    tab: { symbol: '⇥', readable: 'Tab' },\n    delete: { symbol: '⌫', readable: 'Delete' },\n    capslock: { symbol: '⇪', readable: 'Caps Lock' },\n    up: { symbol: '↑', readable: 'Up' },\n    right: { symbol: '→', readable: 'Right' },\n    down: { symbol: '↓', readable: 'Down' },\n    left: { symbol: '←', readable: 'Left' },\n    pageup: { symbol: '⇞', readable: 'Page Up' },\n    pagedown: { symbol: '⇟', readable: 'Page Down' },\n    home: { symbol: '↖', readable: 'Home' },\n    end: { symbol: '↘', readable: 'End' },\n    enter: { symbol: '↵', readable: 'Enter' },\n    esc: { symbol: '⎋', readable: 'Escape' },\n    fn: { symbol: 'Fn', readable: 'Function' }\n}\n\nconst getShortcutKey = (key: string): ShortcutKeyResult =>\n    shortcutKeyMap[key.toLowerCase()] || { symbol: key, readable: key }\n\nconst Keyboard = ({\n    keys,\n    className,\n    ref,\n    ...props\n}: ComponentPropsWithRef<typeof RACKeyboard> & { keys: string[] }) => {\n    if (!keys) return null\n    return (\n        <RACKeyboard\n            ref={ref}\n            className={cn(\n                '!font-sans hidden w-fit space-x-0.5 justify-self-end rounded-sm border px-1.5 py-0.5 text-current/70 text-xs shadow group-hover:text-current group-focus:text-current group-disabled:opacity-50 sm:inline-flex rtl:space-x-reverse',\n                className\n            )}\n            {...props}\n        >\n            {keys.map((key) => (\n                <abbr className='capitalize' key={key} aria-label={getShortcutKey(key).readable}>\n                    {getShortcutKey(key).symbol}\n                </abbr>\n            ))}\n        </RACKeyboard>\n    )\n}\n\nexport { Keyboard }\n"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport { IconCircleAlert } from 'hq-icons'\nimport { Meter as RACMeter, type MeterProps as RACMeterProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from './form'\n\ninterface MeterProps extends RACMeterProps {\n    label?: string\n}\n\nconst Meter = ({ label, className, ...props }: MeterProps) => {\n    return (\n        <RACMeter {...props} className={cn('flex flex-col gap-y-1.5', className)}>\n            {({ percentage, valueText }) => (\n                <>\n                    <div className='flex w-full justify-between gap-2'>\n                        {label && <Label>{label}</Label>}\n                        <span\n                            className={`flex items-center text-sm tabular-nums ${percentage >= 80 ? 'text-danger' : 'text-muted-fg'}`}\n                        >\n                            {percentage >= 80 && (\n                                <IconCircleAlert\n                                    aria-label='Alert'\n                                    className='mr-1 inline size-4 fill-invalid text-danger'\n                                />\n                            )}\n                            {valueText}\n                        </span>\n                    </div>\n                    <div className='relative h-2 min-w-64 rounded-lg bg-muted outline-hidden'>\n                        <div\n                            className='absolute top-0 left-0 h-full rounded-full transition-[width,background-color]'\n                            style={{\n                                width: `${percentage}%`,\n                                backgroundColor: getColor(percentage)\n                            }}\n                        />\n                    </div>\n                </>\n            )}\n        </RACMeter>\n    )\n}\n\nconst getColor = (percentage: number) => {\n    if (percentage < 25) {\n        return 'blue'\n    }\n    if (percentage < 50) {\n        return 'green'\n    }\n    if (percentage < 75) {\n        return 'orange'\n    }\n    return 'var(--danger)'\n}\n\nexport { Meter }\n"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport { type ReactNode, type RefObject, createContext, useContext } from 'react'\n\nimport { IconX } from 'hq-icons'\nimport type { TagGroupProps as RACTagGroupProps, TagListProps, TagProps } from 'react-aria-components'\nimport { Button, Tag as RACTag, TagGroup as RACTagGroup, TagList, composeRenderProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\nimport { badgeStyle } from './badge'\nimport { Description, Label } from './form'\n\ntype TagGroupStyles = {\n    variant: keyof Omit<typeof badgeStyle.variants.variant, 'outline'>\n}\n\nconst TagGroupContext = createContext<TagGroupStyles>({\n    variant: 'primary'\n})\n\ninterface TagGroupProps extends Omit<RACTagGroupProps, 'children'> {\n    variant?: TagGroupStyles['variant']\n    errorMessage?: string\n    label?: string\n    description?: string\n    ref?: RefObject<HTMLDivElement>\n    className?: string\n}\n\nconst TagGroup = <T extends object>({\n    label,\n    description,\n    items,\n    className,\n    ref,\n    children,\n    renderEmptyState,\n    ...props\n}: TagGroupProps & TagListProps<T>) => {\n    return (\n        <RACTagGroup ref={ref} className={cn('flex flex-col flex-wrap', className)} {...props}>\n            {label && <Label className='mb-1'>{label}</Label>}\n            <TagGroupContext.Provider\n                value={{\n                    variant: props.variant || 'primary'\n                }}\n            >\n                <TagList\n                    items={items}\n                    renderEmptyState={renderEmptyState}\n                    className='flex flex-wrap gap-2 *:data-badge:bg-primary'\n                >\n                    {children}\n                </TagList>\n            </TagGroupContext.Provider>\n            {description && <Description>{description}</Description>}\n        </RACTagGroup>\n    )\n}\n\nconst tagStyle = tv({\n    extend: badgeStyle,\n    variants: {\n        isSelected: { false: '!bg-(--bg)/10 !text-(--bg)' },\n        isFocusVisible: {\n            true: 'outline-0 ring-2 ring-primary ring-offset-2'\n        },\n        isDisabled: { true: 'cursor-default opacity-50', false: 'cursor-pointer' },\n        allowsRemoving: { true: 'pr-1' }\n    }\n})\n\nconst Tag = (props: TagProps) => {\n    const textValue = typeof props.children === 'string' ? props.children : undefined\n    const groupContext = useContext(TagGroupContext)\n\n    return (\n        <RACTag\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(props.className, (className, renderProps) =>\n                tagStyle({\n                    ...renderProps,\n                    variant: groupContext.variant,\n                    className\n                })\n            )}\n        >\n            {({ allowsRemoving }) => {\n                return (\n                    <>\n                        {props.children as ReactNode}\n                        {allowsRemoving && (\n                            <Button\n                                slot='remove'\n                                className='-mr-0.5 grid size-3.5 place-content-center rounded-lg focus:outline-none focus-visible:ring-1 focus-visible:ring-primary'\n                            >\n                                <IconX className='size-3 shrink-0' />\n                            </Button>\n                        )}\n                    </>\n                )\n            }}\n        </RACTag>\n    )\n}\n\nTag.Group = TagGroup\nTag.List = TagList\n\nexport { Tag }\nexport type { TagGroupProps, TagGroupStyles }\n"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport type { ComponentProps } from 'react'\n\nimport type { ButtonProps, DialogProps, DialogTriggerProps, ModalOverlayProps } from 'react-aria-components'\nimport { Button, DialogTrigger, Modal as RACModal } from 'react-aria-components'\n\nimport {\n    Dialog,\n    DialogBody,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogOverlay,\n    DialogTitle,\n    DialogX,\n    modalStyle\n} from './dialog'\n\nconst Modal = (props: DialogTriggerProps) => <DialogTrigger {...props} />\n\ninterface ModalContentProps\n    extends Omit<ComponentProps<typeof RACModal>, 'children'>,\n        Omit<ModalOverlayProps, 'className' | 'children'> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    closeButton?: boolean\n    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | 'full'\n    children?: DialogProps['children']\n    className?: DialogProps['className']\n}\n\nconst ModalContent = ({\n    size = 'lg',\n    role = 'dialog',\n    closeButton = true,\n    className,\n    children,\n    ...props\n}: ModalContentProps) => {\n    const isDismissable = role !== 'alertdialog'\n    return (\n        <DialogOverlay isDismissable={isDismissable} {...props}>\n            <RACModal\n                isDismissable={isDismissable}\n                className={modalStyle({\n                    size\n                })}\n                {...props}\n            >\n                <Dialog role={role} aria-label={props['aria-label'] ?? 'Modal'} className={className}>\n                    {(values) => (\n                        <>\n                            {typeof children === 'function' ? children(values) : children}\n                            {closeButton && isDismissable && <DialogX />}\n                        </>\n                    )}\n                </Dialog>\n            </RACModal>\n        </DialogOverlay>\n    )\n}\n\nconst ModalTrigger = (props: ButtonProps) => <Button {...props} />\nModal.Trigger = ModalTrigger\n\nModal.Content = ModalContent\n\nModal.Header = DialogHeader\nModal.Title = DialogTitle\nModal.Description = DialogDescription\nModal.Footer = DialogFooter\nModal.Body = DialogBody\n\nexport { Modal, ModalContent }\nexport type { ModalContentProps }\n"
  },
  "navbar": {
    "component": "@/components/ui/navbar",
    "raw": "'use client'\n\nimport { type ComponentPropsWithRef, type Ref, createContext, use, useCallback, useMemo, useState } from 'react'\n\nimport { IconMenu } from 'hq-icons'\nimport type { ButtonProps, LinkProps } from 'react-aria-components'\nimport { Link, composeRenderProps } from 'react-aria-components'\n\nimport { useIsMobile } from '@/lib/hooks'\nimport { cn } from '@/lib/utils'\nimport { Button } from './button'\nimport { Sheet } from './sheet'\n\nconst HEIGHT = '3.5rem'\n\ntype NavbarOptions = {\n    isSticky?: boolean\n    variant?: 'default' | 'float' | 'inset'\n}\n\ntype NavbarContextProps = {\n    open: boolean\n    setOpen: (open: boolean) => void\n    isCompact: boolean\n    toggleNavbar: () => void\n} & NavbarOptions\n\nconst NavbarContext = createContext<NavbarContextProps | null>(null)\n\nfunction useNavbar() {\n    const context = use(NavbarContext)\n    if (!context) {\n        throw new Error('useNavbar must be used within a Navbar.')\n    }\n\n    return context\n}\n\ninterface NavbarProps extends ComponentPropsWithRef<'header'>, NavbarOptions {\n    defaultOpen?: boolean\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n}\n\nconst Navbar = ({\n    children,\n    isOpen: openProp,\n    onOpenChange: setOpenProp,\n    defaultOpen = false,\n    className,\n    isSticky = false,\n    variant = 'default',\n    ...props\n}: NavbarProps) => {\n    const isCompact = useIsMobile()\n    const [_open, _setOpen] = useState(defaultOpen)\n    const open = openProp ?? _open\n\n    const setOpen = useCallback(\n        (value: boolean | ((value: boolean) => boolean)) => {\n            if (setOpenProp) {\n                return setOpenProp?.(typeof value === 'function' ? value(open) : value)\n            }\n\n            _setOpen(value)\n        },\n        [setOpenProp, open]\n    )\n\n    const toggleNavbar = useCallback(() => {\n        setOpen((open) => !open)\n    }, [setOpen])\n\n    const contextValue = useMemo<NavbarContextProps>(\n        () => ({\n            open,\n            setOpen,\n            isCompact,\n            toggleNavbar,\n            variant,\n            isSticky\n        }),\n        [open, setOpen, isCompact, toggleNavbar, variant, isSticky]\n    )\n    return (\n        <NavbarContext value={contextValue}>\n            <header\n                data-navbar-variant={variant}\n                style={{\n                    // @ts-ignore\n                    '--navbar-height': HEIGHT\n                }}\n                className={cn(\n                    'group/navbar [--navbar-breadcrumbs-height:0px] has-data-navbar-breadcrumbs:[--navbar-breadcrumbs-height:3rem]',\n                    'relative isolate flex w-full flex-col',\n                    isSticky && 'sticky top-0 z-50',\n                    variant === 'float' && 'px-2.5 pt-2',\n                    variant === 'inset' && 'min-h-dvh bg-bg',\n                    className\n                )}\n                {...props}\n            >\n                {children}\n            </header>\n        </NavbarContext>\n    )\n}\n\ninterface NavbarNavProps extends ComponentPropsWithRef<'div'> {\n    variant?: 'navbar' | 'float' | 'inset'\n    isSticky?: boolean\n    useDefaultResponsive?: boolean\n}\n\nconst NavbarNav = ({ useDefaultResponsive = true, className, ref, children, ...props }: NavbarNavProps) => {\n    const { isCompact, variant, open, setOpen } = useNavbar()\n\n    if (isCompact && useDefaultResponsive) {\n        return (\n            <Sheet isOpen={open} onOpenChange={setOpen} {...props}>\n                <Sheet.Trigger className='sr-only' />\n                <Sheet.Content side='left' aria-label='Compact Navbar' data-navbar='compact'>\n                    <Sheet.Body className='px-2 md:px-4'>{children}</Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        )\n    }\n\n    return (\n        <div\n            data-navbar-nav='true'\n            ref={ref}\n            className={cn(\n                'group peer hidden w-full items-center px-4 md:flex md:px-0',\n                'h-(--navbar-height)',\n                '[&>div]:mx-auto [&>div]:w-full [&>div]:max-w-7xl [&>div]:items-center md:[&>div]:flex lg:[&>div]:max-w-(--breakpoint-xl) 2xl:[&>div]:max-w-(--breakpoint-2xl)',\n                variant === 'float' &&\n                    'mx-auto w-full max-w-7xl rounded-lg border bg-bg px-4 text-fg md:px-6 lg:max-w-(--breakpoint-xl) lg:px-8 2xl:max-w-(--breakpoint-2xl)',\n                variant === 'default' && 'border-b bg-bg text-fg sm:[&>div]:px-6 lg:[&>div]:px-8',\n                variant === 'inset' &&\n                    'mx-auto md:px-6 [&>div]:mx-auto [&>div]:w-full [&>div]:items-center md:[&>div]:flex',\n                className\n            )}\n            {...props}\n        >\n            <div>{children}</div>\n        </div>\n    )\n}\n\ninterface NavbarTriggerProps extends ButtonProps {\n    ref?: Ref<HTMLButtonElement>\n}\nconst NavbarTrigger = ({ className, onPress, ref, ...props }: NavbarTriggerProps) => {\n    const { toggleNavbar } = useNavbar()\n    return (\n        <Button\n            ref={ref}\n            data-navbar-trigger='true'\n            variant='ghost'\n            aria-label={props['aria-label'] || 'Toggle Navbar'}\n            icon\n            className={className}\n            onPress={(event) => {\n                onPress?.(event)\n                toggleNavbar()\n            }}\n            {...props}\n        >\n            <IconMenu />\n            <span className='sr-only'>Toggle Navbar</span>\n        </Button>\n    )\n}\n\nconst NavbarSection = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { isCompact } = useNavbar()\n    return (\n        <div\n            data-navbar-section\n            className={cn('flex', isCompact ? 'flex-col gap-y-1' : 'flex-row items-center gap-x-3', className)}\n            {...props}\n        >\n            {'title' in props && <h4 className='-mx-2 my-4 px-5 font-medium text-sm md:hidden'>{props.title}</h4>}\n            {props.children}\n        </div>\n    )\n}\n\ninterface NavbarItemProps extends LinkProps {\n    isCurrent?: boolean\n}\n\nconst NavbarItem = ({ className, isCurrent, ...props }: NavbarItemProps) => (\n    <Link\n        data-navbar-item\n        aria-current={isCurrent ? 'page' : undefined}\n        className={composeRenderProps(className, (className) =>\n            cn(\n                'relative flex cursor-pointer items-center gap-x-2 rounded-md px-3 py-2 text-muted-fg no-underline outline-hidden transition-colors md:text-sm',\n                '**:data-[slot=chevron]:size-4 **:data-[slot=chevron]:transition-transform',\n                '*:data-[slot=icon]:-mx-0.5 *:data-[slot=icon]:size-4 *:data-[slot=icon]:shrink-0',\n                'pressed:text-primary hover:text-primary focus:text-primary focus-visible:ring-2 focus-visible:ring-ring disabled:cursor-default disabled:opacity-50 pressed:**:data-[slot=chevron]:rotate-180',\n                isCurrent && 'pointer-events-none cursor-default bg-primary/10 text-primary',\n                className\n            )\n        )}\n        {...props}\n    />\n)\n\nconst NavbarLogo = ({ className, ...props }: LinkProps) => {\n    return (\n        <Link\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative flex items-center gap-x-2 px-2 py-4 text-fg focus:outline-hidden focus-visible:outline-1 focus-visible:outline-primary md:mr-4 md:px-0 md:py-0',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst NavbarFlex = ({ className, ref, ...props }: ComponentPropsWithRef<'div'>) => {\n    return <div ref={ref} className={cn('flex items-center gap-2', className)} {...props} />\n}\n\ninterface NavbarCompactProps extends ComponentPropsWithRef<'div'> {\n    variant?: 'float' | 'inset' | 'navbar'\n}\nconst NavbarCompact = ({ className, ref, ...props }: NavbarCompactProps) => {\n    const { variant } = useNavbar()\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'flex justify-between bg-bg text-fg peer-has-[[data-navbar-variant=float]]:border md:hidden',\n                variant === 'float' && 'h-12 rounded-lg border px-3.5',\n                variant === 'inset' && 'h-14 border-b px-4',\n                variant === 'default' && 'h-14 border-b px-4',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst NavbarBreadcrumbs = ({ className, ref, children, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { variant } = useNavbar()\n    return (\n        <div\n            data-navbar-breadcrumbs={true}\n            ref={ref}\n            className={cn(\n                'flex h-(--navbar-breadcrumbs-height) items-center',\n                variant === 'default' &&\n                    'w-full border-b bg-bg text-fg *:max-w-7xl *:px-4 md:*:px-6 lg:*:max-w-(--breakpoint-xl) 2xl:*:max-w-(--breakpoint-2xl)',\n                variant === 'inset' &&\n                    'w-full rounded-lg rounded-b-none border-b px-4 md:mx-auto md:max-w-[calc(100vw-16px)] md:border md:px-6',\n                variant === 'float' &&\n                    'mx-auto w-full max-w-7xl rounded-lg bg-bg px-2 text-fg md:px-4 lg:max-w-(--breakpoint-xl) 2xl:max-w-(--breakpoint-2xl)',\n                className\n            )}\n            {...props}\n        >\n            <div className='mx-auto w-full'>{children}</div>\n        </div>\n    )\n}\n\nconst NavbarInset = ({ className, ref, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { variant } = useNavbar()\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'relative flex h-[calc(100vh-var(--navbar-height,0px)-var(--navbar-breadcrumbs-height,0px))] w-full flex-col overflow-auto',\n                variant === 'inset' && 'bg-bg pb-2 md:px-2',\n                variant === 'float' &&\n                    'h-[calc(100vh-var(--navbar-height,0px)-var(--navbar-breadcrumbs-height,0px)-8px)] bg-bg pb-2 md:px-2',\n                className\n            )}\n        >\n            <main\n                className={cn(\n                    'mx-auto flex size-full flex-1 grow flex-col',\n                    variant === 'inset' &&\n                        'bg-bg px-4 shadow-sm md:rounded-lg md:border md:group-has-data-navbar-breadcrumbs/navbar:rounded-t-none md:group-has-data-navbar-breadcrumbs/navbar:border-t-0',\n                    variant === 'default' &&\n                        'max-w-7xl overflow-auto px-4 lg:max-w-(--breakpoint-xl) 2xl:max-w-(--breakpoint-2xl)',\n                    variant === 'float' && 'max-w-7xl lg:max-w-(--breakpoint-xl) 2xl:max-w-(--breakpoint-2xl)'\n                )}\n            >\n                {props.children}\n            </main>\n        </div>\n    )\n}\n\nNavbar.Nav = NavbarNav\nNavbar.Inset = NavbarInset\nNavbar.Compact = NavbarCompact\nNavbar.Flex = NavbarFlex\nNavbar.Trigger = NavbarTrigger\nNavbar.Logo = NavbarLogo\nNavbar.Item = NavbarItem\nNavbar.Breadcrumbs = NavbarBreadcrumbs\nNavbar.Section = NavbarSection\n\nexport { Navbar, NavbarInset, NavbarBreadcrumbs }\n"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "'use client'\n\nimport { IconX } from 'hq-icons'\nimport type { ComponentPropsWithRef } from 'react'\nimport {\n    Button,\n    type ButtonProps,\n    Heading,\n    type ModalOverlayProps,\n    Dialog as RACDialog,\n    type DialogProps as RACDialogProps,\n    type HeadingProps as RACHeadingProps,\n    ModalOverlay as RACModalOverlay,\n    type TextProps,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { tv } from 'tailwind-variants'\n\nconst overlayStyle = tv({\n    base: [\n        'fixed inset-0 isolate z-50 bg-black/20 backdrop-blur-sm [--visual-viewport-vertical-padding:32px]',\n        'entering:fade-in entering:animate-in entering:duration-300 entering:ease-out',\n        'exiting:fade-out exiting:animate-out exiting:duration-200 exiting:ease-in'\n    ]\n})\n\nconst sheetStyle = tv({\n    base: [\n        'fixed z-50 bg-bg shadow-lg transition',\n        'entering:animate-in entering:duration-300 entering:ease-out',\n        'exiting:animate-out exiting:duration-200 exiting:ease-in'\n    ],\n    variants: {\n        side: {\n            top: 'entering:slide-in-from-top exiting:slide-out-to-top inset-x-0 top-0 rounded-b-lg border-b',\n            bottom: 'entering:slide-in-from-bottom exiting:slide-out-to-bottom inset-x-0 bottom-0 rounded-t-lg border-t',\n            left: 'entering:slide-in-from-left exiting:slide-out-to-left inset-y-0 left-0 h-full w-3/4 rounded-r-lg border-r sm:max-w-sm',\n            right: 'entering:slide-in-from-right exiting:slide-out-to-right inset-y-0 right-0 h-full w-3/4 rounded-l-lg border-l sm:max-w-sm'\n        }\n    }\n})\n\nconst modalStyle = tv({\n    base: [\n        'sm:-translate-x-1/2 sm:-translate-y-1/2 absolute bottom-0 z-50 h-fit w-full rounded-t-lg bg-bg shadow-lg transition sm:fixed sm:top-1/2 sm:left-[50vw] sm:rounded-lg',\n        'entering:fade-in entering:zoom-in-95 entering:slide-in-from-bottom sm:entering:slide-in-from-bottom-0 entering:animate-in entering:duration-300 entering:ease-out',\n        'exiting:fade-out exiting:zoom-out-95 exiting:slide-out-to-bottom sm:exiting:slide-out-to-bottom-0 exiting:animate-out exiting:duration-200 exiting:ease-in',\n        'ring-1 ring-border'\n    ],\n    variants: {\n        size: {\n            xs: 'sm:max-w-xs',\n            sm: 'sm:max-w-sm',\n            md: 'sm:max-w-md',\n            lg: 'sm:max-w-lg',\n            xl: 'sm:max-w-xl',\n            '2xl': 'sm:max-w-2xl',\n            '3xl': 'sm:max-w-3xl',\n            '4xl': 'sm:max-w-4xl',\n            '5xl': 'sm:max-w-5xl',\n            full: 'max-w-full'\n        }\n    }\n})\n\nconst popoverStyle = tv({\n    base: [\n        'group max-w-xs rounded-lg bg-bg bg-clip-padding text-fg shadow-xs ring-1 ring-border transition-transform sm:max-w-3xl sm:text-sm',\n        'entering:fade-in entering:zoom-in-95 entering:animate-in entering:duration-150',\n        'exiting:fade-out exiting:zoom-out-95 exiting:animate-out exiting:duration-100',\n        'entering:placement-left:slide-in-from-right-2 entering:placement-right:slide-in-from-left-2 entering:placement-top:slide-in-from-bottom-2 entering:placement-bottom:slide-in-from-top-2',\n        'exiting:placement-left:slide-out-to-right-2 exiting:placement-right:slide-out-to-left-2 exiting:placement-top:slide-out-to-bottom-2 exiting:placement-bottom:slide-out-to-top-2'\n    ],\n    variants: { isPicker: { true: 'max-h-72 min-w-(--trigger-width) max-w-(--trigger-width) overflow-y-auto p-1' } }\n})\n\nconst Dialog = ({ className, ...props }: RACDialogProps) => (\n    <RACDialog\n        slot='dialog'\n        aria-label='Dialog'\n        className={cn(\n            'relative flex max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] flex-col overflow-hidden outline-hidden',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst DialogOverlay = ({ className, isDismissable = true, ...props }: ModalOverlayProps) => (\n    <RACModalOverlay\n        isDismissable={isDismissable}\n        isKeyboardDismissDisabled={!isDismissable}\n        className={composeRenderProps(className, (className) => overlayStyle({ className }))}\n        {...props}\n    />\n)\n\nconst DialogHeader = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return <div slot='header' className={cn('flex flex-col p-4 text-center sm:text-left', className)} {...props} />\n}\n\nconst DialogTitle = ({ className, ...props }: RACHeadingProps) => (\n    <Heading slot='title' className={cn('font-semibold text-lg/8', className)} {...props} />\n)\n\nconst DialogDescription = ({ className, ...props }: TextProps) => (\n    <p slot='description' className={cn('text-muted-fg text-sm', className)} {...props} />\n)\n\nconst DialogBody = ({ className, ...props }: ComponentPropsWithRef<'div'>) => (\n    <div\n        slot='body'\n        className={cn(\n            'isolate flex max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))] flex-col overflow-auto px-4 py-1 will-change-scroll',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst DialogFooter = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    return (\n        <div\n            slot='footer'\n            className={cn(\n                'isolate mt-auto flex flex-col-reverse justify-center gap-2 p-4 sm:flex-row sm:justify-end',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst DialogX = (props: ButtonProps) => (\n    <Button\n        slot='close'\n        aria-label='Close'\n        className='absolute top-2 right-2 inline-flex size-8 shrink-0 cursor-pointer items-center justify-center rounded-md bg-bg pressed:bg-muted/50 text-muted-fg outline-hidden hover:bg-muted/40 focus-visible:ring-4 focus-visible:ring-ring'\n        {...props}\n    >\n        <IconX />\n    </Button>\n)\n\nexport { Dialog, DialogOverlay, DialogHeader, DialogTitle, DialogDescription, DialogBody, DialogFooter, DialogX }\nexport { sheetStyle, modalStyle, popoverStyle }\n"
  },
  "color-field": {
    "component": "@/components/ui/color-field",
    "raw": "'use client'\n\nimport type { ReactNode } from 'react'\n\nimport { IconLoaderPinwheel } from 'hq-icons'\nimport type { ColorFieldProps as RACColorFieldProps } from 'react-aria-components'\nimport { ColorField as RACColorField, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { ColorPicker } from './color-picker'\nimport { ColorSwatch } from './color-swatch'\nimport { Description, FieldError, FieldGroup, Input, Label } from './form'\nimport type { FieldProps } from './form'\n\ninterface ColorFieldProps extends RACColorFieldProps, FieldProps {\n    prefix?: ReactNode\n    suffix?: ReactNode\n    placeholder?: string\n    isLoading?: boolean\n    withPicker?: boolean\n}\n\nconst ColorField = ({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    isLoading,\n    withPicker = true,\n    className,\n    ...props\n}: ColorFieldProps) => {\n    const value = props.value ?? props.defaultValue\n    return (\n        <RACColorField\n            aria-label={props['aria-label'] ?? 'Color field'}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field **:data-[slot=color-swatch]:-ml-0.5 flex w-full flex-col gap-y-1.5', className)\n            )}\n            {...props}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup isDisabled={isDisabled} isInvalid={isInvalid}>\n                        {props.prefix ? (\n                            <span data-prefix={true} className='ml-2 text-muted-fg has-[button]:ml-0'>\n                                {props.prefix}\n                            </span>\n                        ) : null}\n                        {isLoading ? (\n                            <span className='ml-2 text-muted-fg has-[button]:ml-0'>\n                                <IconLoaderPinwheel className='size-4 animate-spin' />\n                            </span>\n                        ) : null}\n                        <div className='flex w-full items-center'>\n                            {value && (\n                                <span className='ml-2'>\n                                    {withPicker ? (\n                                        <ColorPicker onChange={props.onChange} value={value.toString('hex')} />\n                                    ) : (\n                                        <ColorSwatch className='size-6' color={value.toString('hex')} />\n                                    )}\n                                </span>\n                            )}\n                            <Input placeholder={placeholder ?? '#000'} />\n                        </div>\n                        {props.suffix ? (\n                            <span data-suffix={true} className='mr-2 text-muted-fg has-[button]:mr-0'>\n                                {props.suffix}\n                            </span>\n                        ) : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACColorField>\n    )\n}\n\nexport { ColorField }\nexport type { ColorFieldProps }\n"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport { type HTMLAttributes, type Ref, use } from 'react'\nimport type { SliderProps as RACSliderProps, SliderThumbProps, SliderTrackProps } from 'react-aria-components'\nimport {\n    Slider as RACSlider,\n    SliderThumb as RACSliderThumb,\n    SliderTrack as RACSliderTrack,\n    SliderOutput,\n    SliderStateContext,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, Label } from './form'\n\ninterface SliderProps extends RACSliderProps, FieldProps {\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Slider = ({ orientation = 'horizontal', className, ref, ...props }: SliderProps) => {\n    return (\n        <RACSlider\n            orientation={orientation}\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'group/field relative flex touch-none select-none flex-col gap-y-3',\n                    orientation === 'horizontal' ? 'w-full min-w-56' : 'h-full min-h-56 w-1.5 items-center',\n                    className\n                )\n            )}\n            ref={ref}\n            {...props}\n        >\n            {({ orientation, state }) => (\n                <>\n                    <div className='flex text-fg'>\n                        {props.label && <Label>{props.label}</Label>}\n                        <SliderOutput\n                            className={cn(\n                                'text-muted-fg text-sm tabular-nums',\n                                orientation === 'horizontal' ? 'ml-auto' : 'mx-auto'\n                            )}\n                        >\n                            {state.values.map((_, i) => state.getThumbValueLabel(i)).join(' – ')}\n                        </SliderOutput>\n                    </div>\n                    <SliderTrack>\n                        <SliderFiller />\n                        {state.values.map((_, i) => (\n                            <SliderThumb key={i} index={i} />\n                        ))}\n                    </SliderTrack>\n                    {props.description && <Description>{props.description}</Description>}\n                    <FieldError>{props.errorMessage}</FieldError>\n                </>\n            )}\n        </RACSlider>\n    )\n}\n\nconst SliderTrack = ({ className, ...props }: SliderTrackProps) => {\n    return (\n        <RACSliderTrack\n            {...props}\n            className={composeRenderProps(className, (className, { orientation, isDisabled }) =>\n                cn([\n                    'relative cursor-pointer rounded-full bg-muted',\n                    orientation === 'horizontal' ? 'h-1.5 w-full' : 'w-1.5 flex-1/2',\n                    isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer',\n                    className\n                ])\n            )}\n        />\n    )\n}\n\nconst SliderFiller = ({ className, ...props }: HTMLAttributes<HTMLDivElement>) => {\n    const state = use(SliderStateContext)\n    const { values, orientation, getThumbPercent } = state || {}\n\n    const getStyle = () => {\n        const percent0 = getThumbPercent ? getThumbPercent(0) * 100 : 0\n        const percent1 = getThumbPercent ? getThumbPercent(1) * 100 : 0\n\n        if (values?.length === 1) {\n            return orientation === 'horizontal' ? { width: `${percent0}%` } : { height: `${percent0}%` }\n        }\n        return orientation === 'horizontal'\n            ? { left: `${percent0}%`, width: `${Math.abs(percent0 - percent1)}%` }\n            : { bottom: `${percent0}%`, height: `${Math.abs(percent0 - percent1)}%` }\n    }\n\n    return (\n        <div\n            className={cn(\n                'pointer-events-none absolute rounded-full bg-primary',\n                orientation === 'horizontal' ? 'h-full' : 'bottom-0 w-full',\n                className\n            )}\n            style={getStyle()}\n            {...props}\n        />\n    )\n}\n\nconst SliderThumb = ({ className, ...props }: SliderThumbProps) => {\n    return (\n        <RACSliderThumb\n            {...props}\n            className={composeRenderProps(className, (className, { isFocusVisible, isDragging, isDisabled }) =>\n                cn(\n                    'top-1/2 left-1/2 size-5 rounded-full border border-muted bg-bg outline-hidden transition',\n                    isFocusVisible && 'border-primary ring-4 ring-ring',\n                    isDragging && 'cursor-grabbing border-primary ring-4 ring-ring',\n                    isDisabled && 'opacity-50',\n                    className\n                )\n            )}\n        />\n    )\n}\n\nexport { Slider }\n"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\n\nimport type {\n    FieldErrorProps,\n    FormProps,\n    GroupProps,\n    InputProps,\n    LabelProps,\n    TextProps,\n    ValidationResult\n} from 'react-aria-components'\nimport {\n    Group,\n    FieldError as RACFieldError,\n    Form as RACForm,\n    Input as RACInput,\n    Label as RACLabel,\n    Text,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { tv } from 'tailwind-variants'\n\nconst fieldGroupStyle = tv({\n    base: [\n        'flex h-9 items-center rounded-md border transition',\n        'hover:border-primary/70 group-invalid/field:hover:border-danger/70!',\n        'focus-within:border-primary focus-within:ring-4 focus-within:ring-ring',\n        'group-open/field:border-primary group-open/field:ring-4 group-open/field:ring-ring',\n        'group-has-focus-visible/field:border-primary group-has-focus-visible/field:ring-4 group-has-focus-visible/field:ring-ring',\n        'group-has-focus-within/field:border-primary group-has-focus-within/field:ring-4 group-has-focus-within/field:ring-ring',\n        'group-has-focus/field:border-primary group-has-focus/field:ring-4 group-has-focus/field:ring-ring',\n        'group-invalid/field:group-open/field:ring-invalid group-invalid/field:group-has-focus-visible/field:ring-invalid group-invalid/field:group-has-focus-within/field:ring-invalid group-invalid/field:group-has-focus/field:ring-invalid',\n        'group-invalid/field:group-open/field:border-danger group-invalid/field:group-has-focus-visible/field:border-danger group-invalid/field:group-has-focus-within/field:border-danger group-invalid/field:group-has-focus/field:border-danger',\n        '**:[input]:w-full **:[input]:p-2 **:[input]:text-base **:[input]:outline-hidden sm:**:[input]:text-sm',\n        'disabled:pointer-events-none'\n    ]\n})\n\nconst labelStyle = tv({\n    base: [\n        'w-fit cursor-default font-medium text-fg text-sm leading-none transition-colors',\n        'group-open/field:text-primary group-has-focus-visible/field:text-primary group-has-focus-within/field:text-primary group-has-focus/field:text-primary',\n        'group-invalid/field:text-danger! group-disabled/field:text-muted-fg! group-has-invalid/field:text-danger!',\n        'group-disabled/field:text-muted-fg group-has-disabled/field:text-muted-fg'\n    ]\n})\n\nconst descriptionStyle = tv({\n    base: 'text-pretty text-muted-fg text-sm'\n})\n\nconst errorStyle = tv({\n    base: 'text-danger text-sm/5'\n})\n\nconst Form = (props: FormProps) => <RACForm {...props} />\n\ninterface FieldProps {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string) | ReactNode\n}\n\nconst Label = ({ className, ...props }: LabelProps) => (\n    <RACLabel slot='label' {...props} className={labelStyle({ className })} />\n)\n\nconst Description = ({ className, ...props }: TextProps) => (\n    <Text {...props} slot='description' className={descriptionStyle({ className })} />\n)\n\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n    return Array.isArray(props.children) ? (\n        <RACFieldError {...props} className={composeRenderProps(className, (className) => errorStyle({ className }))}>\n            <ul className='list-inside list-disc'>\n                {props.children.map((child, index) => (\n                    <li key={index}>{child}</li>\n                ))}\n            </ul>\n        </RACFieldError>\n    ) : (\n        <RACFieldError {...props} className={composeRenderProps(className, (className) => errorStyle({ className }))} />\n    )\n}\n\nconst FieldGroup = ({ className, ref, ...props }: GroupProps & { ref?: Ref<HTMLDivElement> }) => {\n    return (\n        <Group\n            ref={ref}\n            className={composeRenderProps(className, (className) => fieldGroupStyle({ className }))}\n            {...props}\n        />\n    )\n}\n\nconst Input = ({ className, ref, ...props }: InputProps & { ref?: Ref<HTMLInputElement> }) => (\n    <RACInput ref={ref} {...props} />\n)\n\nexport {\n    Description,\n    FieldError,\n    FieldGroup,\n    Input,\n    Label,\n    descriptionStyle,\n    errorStyle,\n    fieldGroupStyle,\n    labelStyle,\n    type FieldProps\n}\n\nexport { Form }\n"
  },
  "disclosure": {
    "component": "@/components/ui/disclosure",
    "raw": "'use client'\n\nimport { type Ref, use, useRef } from 'react'\n\nimport { IconChevronDown } from 'hq-icons'\nimport {\n    type ButtonProps,\n    type DisclosurePanelProps,\n    DisclosureStateContext,\n    type DisclosureGroupProps as RACDisclosureGroupProps,\n    type DisclosureProps as RACDisclosureProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Disclosure as RACDisclosure,\n    DisclosureGroup as RACDisclosureGroup,\n    DisclosurePanel as RACDisclosurePanel,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ninterface AccordionProps extends RACDisclosureGroupProps {\n    ref?: Ref<HTMLDivElement>\n    hideIndicator?: boolean\n}\nconst DisclosureGroup = ({ children, ref, className, ...props }: AccordionProps) => {\n    return (\n        <RACDisclosureGroup\n            ref={ref}\n            data-slot='disclosure-group'\n            {...props}\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'space-y-1',\n                    props.hideIndicator && '**:data-[slot=indicator]:text-transparent',\n                    isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer',\n                    className\n                )\n            )}\n        >\n            {(values) => <>{typeof children === 'function' ? children(values) : children}</>}\n        </RACDisclosureGroup>\n    )\n}\n\ninterface CollapsibleProps extends RACDisclosureProps {\n    ref?: Ref<HTMLDivElement>\n}\nconst Disclosure = ({ className, ref, children, ...props }: CollapsibleProps) => {\n    return (\n        <RACDisclosure\n            ref={ref}\n            data-slot='disclosure'\n            {...props}\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn(\n                    'group w-full border-b last:border-b-0',\n                    isDisabled ? 'cursor-default opacity-50' : 'cursor-pointer',\n                    className\n                )\n            )}\n        >\n            {(values) => (typeof children === 'function' ? children(values) : children)}\n        </RACDisclosure>\n    )\n}\n\ninterface DisclosureTriggerProps extends ButtonProps {\n    ref?: Ref<HTMLButtonElement>\n}\nconst DisclosureTrigger = ({ className, children, ref, ...props }: DisclosureTriggerProps) => {\n    return (\n        <Button\n            ref={ref}\n            slot='trigger'\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'flex w-full flex-1 items-start justify-between gap-4 rounded-md py-4 text-left font-medium text-sm outline-none transition-all',\n                    'aria-expanded:**:data-[slot=indicator]:rotate-180 **:[svg]:size-4 **:[svg]:shrink-0',\n                    'focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-ring',\n                    'disabled:cursor-default disabled:opacity-50',\n                    className\n                )\n            )}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof children === 'function' ? children(values) : children}\n                    <IconChevronDown data-slot='indicator' className='text-muted-fg transition-transform' />\n                </>\n            )}\n        </Button>\n    )\n}\nconst DisclosurePanel = ({ className, children, ...props }: DisclosurePanelProps) => {\n    const { isExpanded } = use(DisclosureStateContext)!\n    const contentRef = useRef<HTMLDivElement>(null)\n    return (\n        <RACDisclosurePanel\n            data-slot='disclosure-content'\n            style={{\n                height: isExpanded ? contentRef?.current?.scrollHeight : 0,\n                transition: 'height 0.2s ease-in-out'\n            }}\n            className={cn('overflow-hidden text-sm')}\n            {...props}\n        >\n            <div ref={contentRef} className={cn('pt-0 pb-4', className)}>\n                {children}\n            </div>\n        </RACDisclosurePanel>\n    )\n}\nconst Accordion = (props: AccordionProps) => <DisclosureGroup {...props} />\nAccordion.Item = Disclosure\nAccordion.Trigger = DisclosureTrigger\nAccordion.Content = DisclosurePanel\n\nconst Collapsible = (props: CollapsibleProps) => <Disclosure {...props} />\nCollapsible.Trigger = DisclosureTrigger\nCollapsible.Content = DisclosurePanel\n\nexport { Accordion, Collapsible }\n"
  },
  "color-slider": {
    "component": "@/components/ui/color-slider",
    "raw": "'use client'\n\nimport { ColorSlider as RACColorSlider, SliderOutput, SliderTrack, composeRenderProps } from 'react-aria-components'\nimport type { ColorSliderProps as RACColorSliderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { ColorThumb } from './color-thumb'\nimport { Label } from './form'\n\ninterface ColorSliderProps extends RACColorSliderProps {\n    label?: string\n    showOutput?: boolean\n}\n\nconst ColorSlider = ({ showOutput = true, label, className, ...props }: ColorSliderProps) => {\n    return (\n        <RACColorSlider\n            {...props}\n            slot='color-slider'\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'group/field relative flex flex-col items-center gap-2',\n                    orientation === 'horizontal' ? 'min-w-56 justify-between' : 'justify-center',\n                    className\n                )\n            )}\n        >\n            {({ orientation }) => (\n                <>\n                    <div className='flex w-full items-center justify-between has-only:justify-center'>\n                        {label && <Label>{label}</Label>}\n                        {showOutput && <SliderOutput />}\n                    </div>\n                    <SliderTrack\n                        className={cn('rounded-lg', orientation === 'horizontal' ? 'h-6 w-full' : 'h-56 w-6')}\n                        style={({ defaultStyle }) => ({ ...defaultStyle })}\n                    >\n                        <ColorThumb />\n                    </SliderTrack>\n                </>\n            )}\n        </RACColorSlider>\n    )\n}\n\nexport { ColorSlider }\nexport type { ColorSliderProps }\n"
  },
  "color-swatch": {
    "component": "@/components/ui/color-swatch",
    "raw": "'use client'\n\nimport type { ColorSwatchProps } from 'react-aria-components'\nimport { ColorSwatch as RACColorSwatch, composeRenderProps } from 'react-aria-components'\nimport { parseColor } from 'react-stately'\n\nimport { cn } from '@/lib/utils'\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n    const normalizeHex = hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (_m, r, g, b) => r + r + g + g + b + b)\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(normalizeHex)\n    return result\n        ? {\n              r: Number.parseInt(result[1]!, 16),\n              g: Number.parseInt(result[2]!, 16),\n              b: Number.parseInt(result[3]!, 16)\n          }\n        : null\n}\n\nconst hsbToRgb = (h: number, s: number, b: number): { r: number; g: number; b: number } => {\n    const saturation = s / 100\n    const brightness = b / 100\n    const k = (n: number) => (n + h / 60) % 6\n    const f = (n: number) => brightness * (1 - saturation * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n    return {\n        r: Math.round(255 * f(5)),\n        g: Math.round(255 * f(3)),\n        b: Math.round(255 * f(1))\n    }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n    const a = [r, g, b].map((v) => {\n        const normalized = v / 255\n        return normalized <= 0.03928 ? normalized / 12.92 : ((normalized + 0.055) / 1.055) ** 2.4\n    })\n    return a[0]! * 0.2126 + a[1]! * 0.7152 + a[2]! * 0.0722\n}\n\ntype HSBColor = {\n    hue: number\n    saturation: number\n    brightness: number\n}\n\nconst isBrightColor = (color: string | HSBColor): boolean => {\n    let r: number\n    let g: number\n    let b: number\n\n    if (typeof color === 'string') {\n        if (color.startsWith('#')) {\n            const rgb = hexToRgb(color)\n            if (rgb) {\n                r = rgb.r\n                g = rgb.g\n                b = rgb.b\n            } else {\n                return false\n            }\n        } else if (color.startsWith('rgb')) {\n            const rgbValues = color.match(/\\d+/g)\n            if (rgbValues) {\n                r = Number.parseInt(rgbValues[0]!, 10)\n                g = Number.parseInt(rgbValues[1]!, 10)\n                b = Number.parseInt(rgbValues[2]!, 10)\n            } else {\n                return false\n            }\n        } else {\n            const namedColors: Record<string, string> = {\n                white: '#ffffff',\n                black: '#000000'\n            }\n            const hex = namedColors[color.toLowerCase()]\n            if (hex) {\n                const rgb = hexToRgb(hex)\n                if (rgb) {\n                    r = rgb.r\n                    g = rgb.g\n                    b = rgb.b\n                } else {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n    } else if (typeof color === 'object' && 'hue' in color && 'saturation' in color && 'brightness' in color) {\n        const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n    } else {\n        return false\n    }\n\n    const lum = luminance(r, g, b)\n    return lum > 0.5\n}\n\nconst defaultColor = parseColor('hsl(216, 98%, 52%)')\n\nconst ColorSwatch = ({ className, ...props }: ColorSwatchProps) => {\n    const color = props.color?.toString() ?? ''\n    const ring = color ? isBrightColor(color) : false\n    return (\n        <RACColorSwatch\n            data-slot='color-swatch'\n            aria-label={props['aria-label'] ?? 'Color swatch'}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'size-8 shrink-0 rounded-md border outline-hidden',\n                    ring && 'inset-ring-1 inset-ring-fg/10',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nexport { ColorSwatch, defaultColor, isBrightColor }\n"
  },
  "toast": {
    "component": "@/components/ui/toast",
    "raw": "'use client'\n\nimport { type ReactNode, useCallback, useEffect, useState } from 'react'\n\nimport { IconCircleAlert, IconCircleCheck, IconInfo, IconTriangleAlert, IconX } from 'hq-icons'\nimport type { ToastOptions } from 'react-aria-components'\nimport {\n    Button,\n    Text,\n    UNSTABLE_ToastContent as ToastContent,\n    UNSTABLE_ToastQueue as ToastQueue,\n    UNSTABLE_ToastRegion as ToastRegion,\n    UNSTABLE_Toast as Toaster\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ninterface ToastContentProps {\n    title: string\n    description?: string\n    action?: () => void\n    actionLabel?: ReactNode\n    altAction?: () => void\n    altActionLabel?: ReactNode\n    type: 'default' | 'success' | 'error' | 'info' | 'warning'\n}\n\nconst queue = new ToastQueue<ToastContentProps>({\n    wrapUpdate(fn) {\n        if ('startViewTransition' in document) {\n            document.startViewTransition(() => fn())\n        } else fn()\n    },\n    maxVisibleToasts: 5\n})\n\nconst ToastProvider = () => {\n    const [isHovered, setIsHovered] = useState(false)\n    return (\n        <>\n            <style>{`\n                    .toast { view-transition-class: toast; }\n                    @media screen and (max-width: 768px) {\n                        ::view-transition-new(.toast):only-child { animation: slide-down 300ms; }\n                        ::view-transition-old(.toast):only-child { animation: slide-up 300ms; } \n                    }\n                    @media screen and (min-width: 768px) {\n                        ::view-transition-new(.toast):only-child { animation: slide-left 300ms; }\n                        ::view-transition-old(.toast):only-child { animation: slide-right 300ms; } \n                    }\n                    @keyframes slide-right { to { translate: 100% 0; opacity: 0; } }\n                    @keyframes slide-left { from { translate: 100% 0; opacity: 0; } }\n                    @keyframes slide-up { to { translate: 0 -100%; opacity: 0; } }\n                    @keyframes slide-down { from { translate: 0 -100%; opacity: 0; } }\n           `}</style>\n            <ToastRegion\n                className={cn(\n                    'fixed top-0 z-[9999] flex h-fit w-full flex-col-reverse items-center gap-3 p-4 sm:top-auto sm:right-2 sm:bottom-2 sm:w-fit sm:items-end'\n                )}\n                queue={queue}\n            >\n                {({ toast }) => (\n                    <Toaster\n                        style={{\n                            viewTransitionName: toast.key\n                        }}\n                        key={toast.key}\n                        toast={toast}\n                        className={cn('toast w-full will-change-transform sm:w-fit sm:min-w-xs')}\n                    >\n                        <div\n                            onMouseEnter={() => setIsHovered(true)}\n                            onMouseLeave={() => setIsHovered(false)}\n                            key={toast.key}\n                            className={cn('flex flex-col gap-2 rounded-lg border p-4', {\n                                'border-green-500/20 bg-[#ecfdf3] text-[#008a2e] **:data-loader:stroke-green-500 dark:bg-[#001f0f] dark:text-[#59f39d]':\n                                    toast.content.type === 'success',\n                                'border-rose-500/20 bg-[#fff0f0] text-[#e60000] **:data-loader:stroke-rose-500 dark:bg-[#2d0607] dark:text-[#ff9ea1] ':\n                                    toast.content.type === 'error',\n                                'border-blue-500/30 bg-[#f0f8ff] text-[#0973dc] **:data-loader:stroke-blue-500 dark:bg-[#000d1f] dark:text-[#5896f3]':\n                                    toast.content.type === 'info',\n                                'border-amber-500/40 bg-[#fffcf0] text-[#dc7609] **:data-loader:stroke-amber-500 dark:bg-[#1d1f00] dark:text-[#f3cf58]':\n                                    toast.content.type === 'warning',\n                                'bg-bg text-fg': toast.content.type === 'default'\n                            })}\n                        >\n                            <div\n                                className={cn('flex items-start gap-2', {\n                                    'items-center': !toast.content.description\n                                })}\n                            >\n                                {toast.content.type === 'success' ? (\n                                    <IconCircleCheck className='shrink-0' />\n                                ) : toast.content.type === 'error' ? (\n                                    <IconCircleAlert className='shrink-0' />\n                                ) : toast.content.type === 'info' ? (\n                                    <IconInfo className='shrink-0' />\n                                ) : toast.content.type === 'warning' ? (\n                                    <IconTriangleAlert className='shrink-0' />\n                                ) : null}\n                                <ToastContent className='flex w-full flex-col'>\n                                    <Text slot='title' className='font-medium text-sm tracking-tight'>\n                                        {toast.content.title}\n                                    </Text>\n                                    {toast.content.description && (\n                                        <Text slot='description' className='text-xs'>\n                                            {toast.content.description}\n                                        </Text>\n                                    )}\n                                </ToastContent>\n                                <div className='-translate-y-1/2 absolute top-1 right-1 translate-x-1/2'>\n                                    <CountdownButton isPaused={isHovered} timeout={toast.timeout} />\n                                </div>\n                            </div>\n                            {(toast.content.action || toast.content.altAction) && (\n                                <div className='flex items-center justify-start gap-2'>\n                                    {toast.content.action && (\n                                        <Button\n                                            onPress={toast.content.action}\n                                            slot='close'\n                                            className={cn(\n                                                'flex cursor-pointer items-center justify-center gap-x-1.5 rounded-lg border px-2 py-1 text-sm outline-hidden pressed:brightness-90 backdrop-blur-2xl hover:brightness-80 focus-visible:ring-4 focus-visible:ring-ring *:[svg]:size-3',\n                                                {\n                                                    'border-green-500 bg-green-500 text-white':\n                                                        toast.content.type === 'success',\n                                                    'border-rose-500 bg-rose-500 text-white':\n                                                        toast.content.type === 'error',\n                                                    'border-blue-500 bg-blue-500 text-white':\n                                                        toast.content.type === 'info' ||\n                                                        toast.content.type === 'default',\n                                                    'border-amber-500 bg-amber-500 text-white':\n                                                        toast.content.type === 'warning'\n                                                }\n                                            )}\n                                        >\n                                            {toast.content.actionLabel || 'Action'}\n                                        </Button>\n                                    )}\n                                    {toast.content.altAction && (\n                                        <Button\n                                            onPress={toast.content.altAction}\n                                            slot='close'\n                                            className='flex cursor-pointer items-center justify-center gap-x-1.5 rounded-lg border bg-bg pressed:bg-muted/60 px-2 py-1 text-fg text-sm outline-hidden hover:bg-muted/40 focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-primary/20 *:[svg]:size-3'\n                                        >\n                                            {toast.content.altActionLabel || 'Cancel'}\n                                        </Button>\n                                    )}\n                                </div>\n                            )}\n                        </div>\n                    </Toaster>\n                )}\n            </ToastRegion>\n        </>\n    )\n}\n\ninterface TimeoutButtonProps {\n    timeout: number | undefined\n    isPaused?: boolean\n}\n\nconst CountdownButton = ({ timeout, isPaused }: TimeoutButtonProps) => {\n    const [timeLeft, setTimeLeft] = useState<number>(timeout ? timeout - 100 : -1)\n    const radius = 10\n    const circumference = 2 * Math.PI * radius\n\n    const calculateProgress = useCallback(() => {\n        return timeout && (timeLeft / timeout) * circumference\n    }, [timeLeft, timeout, circumference])\n\n    useEffect(() => {\n        if (timeLeft <= 0 || isPaused) return\n\n        const timer = setInterval(() => {\n            setTimeLeft((prevTimeLeft) => prevTimeLeft - 100)\n        }, 100)\n\n        return () => clearInterval(timer)\n    }, [isPaused, timeLeft])\n\n    return (\n        <Button\n            slot='close'\n            className='relative z-10 inline-flex size-6 shrink-0 cursor-pointer items-center justify-center rounded-full bg-bg pressed:text-fg text-muted-fg shadow-sm outline-hidden hover:text-fg focus-visible:ring-2 focus-visible:ring-ring dark:border'\n        >\n            <IconX className='size-3.5' />\n            {timeout ? (\n                <svg className='-rotate-90 absolute size-fit'>\n                    <circle cx='50%' cy='50%' r={radius} stroke='current' strokeWidth='2' fill='none' />\n                    <circle\n                        data-loader\n                        cx='50%'\n                        cy='50%'\n                        r={radius}\n                        stroke='currentColor'\n                        strokeWidth='2'\n                        fill='none'\n                        strokeDasharray={circumference}\n                        style={{ transition: 'stroke-dashoffset 0.1s linear' }}\n                        strokeDashoffset={calculateProgress()}\n                        strokeLinecap='round'\n                    />\n                </svg>\n            ) : null}\n        </Button>\n    )\n}\n\nconst toast = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'default' }, { ...options, timeout: options?.timeout ?? 3000 })\n\ntoast.success = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'success' }, { ...options, timeout: options?.timeout ?? 3000 })\n\ntoast.error = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'error' }, { ...options, timeout: options?.timeout ?? 3000 })\n\ntoast.info = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'info' }, { ...options, timeout: options?.timeout ?? 3000 })\n\ntoast.warning = (body: string, content?: Omit<ToastContentProps, 'type' | 'title'>, options?: ToastOptions) =>\n    queue.add({ ...content, title: body, type: 'warning' }, { ...options, timeout: options?.timeout ?? 3000 })\n\nexport { toast, ToastProvider }\n"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\n\nimport { IconLoader, IconSearch, IconX } from 'hq-icons'\nimport {\n    Button,\n    Input,\n    SearchField as RACSearchField,\n    type SearchFieldProps as RACSearchFieldProps,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\n\ninterface SearchFieldProps extends RACSearchFieldProps, FieldProps {\n    isPending?: boolean\n    placeholder?: string\n    ref?: Ref<HTMLDivElement>\n}\n\nconst SearchField = ({\n    className,\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    isPending,\n    ref,\n    ...props\n}: SearchFieldProps) => {\n    return (\n        <RACSearchField\n            aria-label={placeholder ?? props['aria-label'] ?? 'Search...'}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {({ isEmpty }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup isInvalid={props.isInvalid || !!errorMessage} isDisabled={props.isDisabled}>\n                        {isPending ? (\n                            <IconLoader className='ml-2 size-4 shrink-0 animate-spin text-muted-fg' />\n                        ) : (\n                            <IconSearch className='ml-2 size-4 shrink-0 text-muted-fg' />\n                        )}\n                        <Input\n                            placeholder={placeholder ?? 'Search...'}\n                            className='[&::-webkit-search-cancel-button]:hidden'\n                        />\n                        {!isEmpty && (\n                            <Button\n                                type='button'\n                                aria-label='Clear'\n                                className='mr-2 inline-flex cursor-pointer items-center justify-center rounded-md text-muted-fg outline-offset-4'\n                            >\n                                <IconX aria-hidden />\n                            </Button>\n                        )}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACSearchField>\n    )\n}\n\nexport { SearchField }\n"
  },
  "container": {
    "component": "@/components/ui/container",
    "raw": "import type { ComponentPropsWithRef } from 'react'\n\nimport { cn } from '@/lib/utils'\n\ninterface ContainerProps extends ComponentPropsWithRef<'div'> {\n    constrained?: boolean\n}\n\nconst Container = ({ className, constrained = false, ref, ...props }: ContainerProps) => (\n    <div\n        className={cn(\n            'mx-auto w-full max-w-7xl lg:max-w-(--breakpoint-xl) 2xl:max-w-(--breakpoint-2xl)',\n            constrained ? 'sm:px-6 lg:px-8' : 'px-4 sm:px-6 lg:px-8',\n            className\n        )}\n        {...props}\n        ref={ref}\n    />\n)\n\nexport type { ContainerProps }\nexport { Container }\n"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport type { ComponentProps, ReactNode } from 'react'\nimport {\n    Button,\n    OverlayArrow,\n    Tooltip as RACTooltip,\n    type TooltipProps as RACTooltipProps,\n    TooltipTrigger as RACTooltipTrigger,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ntype TooltipProps = ComponentProps<typeof RACTooltipTrigger>\nconst Tooltip = (props: TooltipProps) => <RACTooltipTrigger {...props} />\n\ninterface TooltipContentProps extends Omit<RACTooltipProps, 'children'> {\n    showArrow?: boolean\n    children: ReactNode\n    isInverse?: boolean\n}\n\nconst TooltipContent = ({\n    offset = 10,\n    showArrow = true,\n    isInverse = false,\n    className,\n    children,\n    ...props\n}: TooltipContentProps) => {\n    return (\n        <RACTooltip\n            {...props}\n            offset={offset}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    isInverse ? 'bg-fg text-bg' : 'bg-bg text-fg',\n                    'group rounded-lg border px-2.5 py-1.5 text-sm will-change-transform',\n                    'entering:fade-in entering:animate-in',\n                    'exiting:fade-in exiting:direction-reverse exiting:animate-in',\n                    'entering:placement-top:slide-in-from-bottom-1 exiting:placement-top:slide-out-to-bottom-1',\n                    'entering:placement-bottom:slide-in-from-top-1 exiting:placement-bottom:slide-out-to-top-1',\n                    'entering:placement-left:slide-in-from-right-1 exiting:placement-left:slide-out-to-right-1',\n                    'entering:placement-right:slide-in-from-left-1 exiting:placement-right:slide-out-to-left-1',\n                    className\n                )\n            )}\n        >\n            {showArrow && (\n                <OverlayArrow className='group'>\n                    <svg\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className={cn(\n                            'group-placement-left:-rotate-90 block group-placement-bottom:rotate-180 group-placement-right:rotate-90',\n                            isInverse ? 'fill-fg' : 'fill-bg stroke-border'\n                        )}\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            {children}\n        </RACTooltip>\n    )\n}\n\nTooltip.Trigger = Button\nTooltip.Content = TooltipContent\n\nexport { Tooltip }\n"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\n\nimport type { RadioGroupProps as RACRadioGroupProps, RadioProps as RACRadioProps } from 'react-aria-components'\nimport { Radio as RACRadio, RadioGroup as RACRadioGroup, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, Label } from './form'\n\ninterface RadioGroupProps extends RACRadioGroupProps, FieldProps {}\n\nconst RadioGroup = ({ label, description, errorMessage, className, children, ...props }: RadioGroupProps) => {\n    return (\n        <RACRadioGroup\n            {...props}\n            isInvalid={!!errorMessage || props.isInvalid}\n            className={composeRenderProps(className, (className) => cn('group/field flex flex-col gap-2', className))}\n        >\n            {(values) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <div\n                        className={cn(\n                            'flex',\n                            values.orientation === 'horizontal' ? 'flex-wrap gap-2 sm:gap-4' : 'flex-col gap-2'\n                        )}\n                    >\n                        {typeof children === 'function' ? children(values) : children}\n                    </div>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACRadioGroup>\n    )\n}\n\ninterface RadioProps extends RACRadioProps, Omit<FieldProps, 'errorMessage'> {\n    children?: ReactNode\n    ref?: Ref<HTMLLabelElement>\n}\n\nconst Radio = ({ label, description, className, children, ref, ...props }: RadioProps) => {\n    return (\n        <RACRadio\n            ref={ref}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group/box flex items-center gap-2',\n                    {\n                        'items-start': description\n                    },\n                    className\n                )\n            )}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    <div\n                        className={cn(\n                            'size-4 shrink-0 rounded-full border bg-bg transition',\n                            'group-hover/box:border-primary/70',\n                            'group-focus/box:border-primary group-focus/box:group-has-invalid/box:border-danger',\n                            'group-focus-visible/box:border-primary group-focus-visible/box:ring-4 group-focus-visible/box:ring-ring group-focus-visible/box:group-has-invalid/box:border-danger',\n                            'group-has-invalid/box:border-danger/70 group-has-invalid/box:ring-invalid group-has-invalid/box:group-hover/box:border-danger/70',\n                            values.isSelected && 'border-[5px] border-primary group-has-invalid/box:border-danger'\n                        )}\n                    />\n                    <div className='flex flex-col gap-y-1.5'>\n                        <span className='not-last:text-sm/4 text-sm'>{label ?? children}</span>\n                        {description && <Description>{description}</Description>}\n                    </div>\n                </>\n            )}\n        </RACRadio>\n    )\n}\n\nexport { Radio, RadioGroup }\n"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\nimport {\n    TextArea as RACTextArea,\n    TextField as RACTextField,\n    type TextFieldProps as RACTextFieldProps,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, Label, fieldGroupStyle } from './form'\n\ninterface TextareaProps extends RACTextFieldProps, FieldProps {\n    autoSize?: boolean\n    placeholder?: string\n    ref?: Ref<HTMLDivElement>\n}\n\nconst Textarea = ({ className, placeholder, label, description, errorMessage, ref, ...props }: TextareaProps) => {\n    return (\n        <RACTextField\n            ref={ref}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            {...props}\n        >\n            {label && <Label>{label}</Label>}\n            <RACTextArea\n                placeholder={placeholder}\n                className={cn(\n                    fieldGroupStyle(),\n                    'h-auto min-h-14 w-full min-w-0 rounded-lg border bg-transparent p-2 text-base outline-hidden transition duration-200 sm:text-sm',\n                    props.autoSize && 'field-sizing-content resize-none'\n                )}\n            />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </RACTextField>\n    )\n}\n\nexport { Textarea }\n"
  },
  "selection-box": {
    "component": "@/components/ui/selection-box",
    "raw": "'use client'\n\nimport { type CSSProperties, type ReactNode, createContext, use } from 'react'\nimport type { CheckboxGroupProps, CheckboxProps, RadioGroupProps, RadioProps } from 'react-aria-components'\nimport { Checkbox, CheckboxGroup, Radio, RadioGroup, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, Label } from './form'\n\nconst SelectionBoxContext = createContext<'single' | 'multiple'>('single')\nconst useSelectionBoxContext = () => use(SelectionBoxContext)\n\ninterface SelectionBoxProps\n    extends Omit<CheckboxGroupProps, 'value' | 'onChange' | 'defaultValue' | 'validate'>,\n        Omit<RadioGroupProps, 'value' | 'onChange' | 'defaultValue' | 'validate'>,\n        FieldProps {\n    selectionMode?: 'single' | 'multiple'\n    prefix?: ReactNode\n    children?: ReactNode\n    className?: string\n    style?: CSSProperties\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    value?: any\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    onChange?: (value: any) => any\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    defaultValue?: any\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    validate?: (value: any) => any\n}\n\nconst SelectionBox = ({\n    orientation = 'vertical',\n    selectionMode = 'single',\n    className,\n    children,\n    label,\n    description,\n    errorMessage,\n    ...props\n}: SelectionBoxProps) => {\n    return (\n        <SelectionBoxContext.Provider value={selectionMode}>\n            {selectionMode === 'multiple' ? (\n                <CheckboxGroup\n                    {...props}\n                    className={composeRenderProps(className, (className) => cn('flex flex-col gap-2', className))}\n                >\n                    {composeRenderProps(children, (children) => (\n                        <>\n                            {label && <Label>{label}</Label>}\n                            <div\n                                slot='items'\n                                className={cn(\n                                    'flex select-none gap-2',\n                                    orientation === 'horizontal' ? 'flex-wrap justify-between' : 'flex-col'\n                                )}\n                            >\n                                {children}\n                            </div>\n                            {description && <Description>{description}</Description>}\n                            <FieldError>{errorMessage}</FieldError>\n                        </>\n                    ))}\n                </CheckboxGroup>\n            ) : (\n                <RadioGroup\n                    {...props}\n                    className={composeRenderProps(className, (className) => cn('flex flex-col gap-2', className))}\n                >\n                    {composeRenderProps(children, (children, { isInvalid, isDisabled }) => (\n                        <>\n                            {label && <Label>{label}</Label>}\n                            <div\n                                slot='items'\n                                className={cn(\n                                    'flex select-none gap-2',\n                                    orientation === 'horizontal' ? 'flex-wrap justify-between' : 'flex-col'\n                                )}\n                            >\n                                {children}\n                            </div>\n                            {description && <Description>{description}</Description>}\n                            <FieldError>{errorMessage}</FieldError>\n                        </>\n                    ))}\n                </RadioGroup>\n            )}\n        </SelectionBoxContext.Provider>\n    )\n}\n\ninterface SelectionBoxItemProps\n    extends Omit<CheckboxProps, 'value'>,\n        Omit<RadioProps, 'value'>,\n        Omit<FieldProps, 'placeholder' | 'description' | 'errorMessage'> {\n    prefix?: ReactNode\n    children?: ReactNode\n    className?: string\n    style?: CSSProperties\n    value: string\n}\n\nconst SelectionBoxItem = ({ className, label, children, ...props }: SelectionBoxItemProps) => {\n    const selectionMode = useSelectionBoxContext()\n    return selectionMode === 'multiple' ? (\n        <Checkbox\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn('group flex items-center gap-2 text-sm transition', isDisabled && 'opacity-50', className)\n            )}\n            {...props}\n        >\n            {({ isSelected, isIndeterminate, isFocused, isInvalid }) => (\n                <div\n                    slot='box'\n                    className={cn(\n                        'flex w-full items-center rounded-sm border px-3 py-2 text-bg transition',\n                        isSelected || isIndeterminate\n                            ? 'border-primary bg-primary/10 text-primary **:text-primary group-invalid:border-danger/70 group-invalid:bg-invalid group-invalid:**:text-danger'\n                            : 'border-muted **:text-muted-fg group-hover:border-primary/70 group-hover:bg-primary/10',\n                        isFocused &&\n                            'border-primary ring-4 ring-ring group-invalid:border-danger/70 group-invalid:text-danger-fg group-invalid:ring-invalid',\n                        isInvalid &&\n                            'border-danger/70 bg-invalid text-danger-fg ring-invalid group-hover:border-danger/70',\n                        className\n                    )}\n                >\n                    {props.prefix && (\n                        <div className='mr-2 flex size-5 shrink-0 items-center justify-center text-base'>\n                            {props.prefix}\n                        </div>\n                    )}\n                    <Label>{label ?? children}</Label>\n                </div>\n            )}\n        </Checkbox>\n    ) : (\n        <Radio\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn('group flex grow items-center gap-2 text-sm transition', isDisabled && 'opacity-50', className)\n            )}\n            {...props}\n        >\n            {({ isSelected, isFocused, isInvalid }) => (\n                <div\n                    slot='box'\n                    className={cn(\n                        'flex w-full items-center rounded-sm border px-3 py-2 text-bg transition',\n                        isSelected\n                            ? 'border-primary bg-primary/10 text-primary **:text-primary group-invalid:border-danger/70 group-invalid:bg-invalid group-invalid:**:text-danger'\n                            : 'border-muted **:text-muted-fg group-hover:border-primary/70 group-hover:bg-primary/10',\n                        isFocused &&\n                            'border-primary ring-4 ring-ring group-invalid:border-danger/70 group-invalid:text-danger-fg group-invalid:ring-invalid',\n                        isInvalid &&\n                            'border-danger/70 bg-invalid text-danger-fg ring-invalid group-hover:border-danger/70',\n                        className\n                    )}\n                >\n                    {props.prefix && (\n                        <div className='mr-2 flex size-5 shrink-0 items-center justify-center text-base'>\n                            {props.prefix}\n                        </div>\n                    )}\n                    <Label>{label ?? children}</Label>\n                </div>\n            )}\n        </Radio>\n    )\n}\n\nSelectionBox.Item = SelectionBoxItem\nexport { SelectionBox }\n"
  },
  "color-area": {
    "component": "@/components/ui/color-area",
    "raw": "'use client'\n\nimport { ColorArea as RACColorArea, composeRenderProps } from 'react-aria-components'\nimport type { ColorAreaProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { ColorThumb } from './color-thumb'\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n    return (\n        <RACColorArea\n            slot='color-area'\n            className={composeRenderProps(className, (className, { isDisabled }) =>\n                cn('min-h-56 min-w-56 rounded-lg bg-muted', isDisabled && 'opacity-50 grayscale-50', className)\n            )}\n            style={({ defaultStyle }) => ({ ...defaultStyle })}\n            {...props}\n        >\n            <ColorThumb />\n        </RACColorArea>\n    )\n}\n\nexport { ColorArea }\n"
  },
  "header": {
    "component": "@/components/ui/header",
    "raw": "import { cn } from '@/lib/utils'\nimport type { ComponentPropsWithRef } from 'react'\n\ninterface HeaderProps extends ComponentPropsWithRef<'header'> {\n    title?: string\n    description?: string\n}\n\nconst Header = ({ title, description, className, children, ...props }: HeaderProps) => (\n    <header\n        slot='header'\n        className={cn(\n            'grid items-start gap-1.5 md:auto-rows-min md:grid-rows-[auto_auto] md:has-[[slot=action]]:grid-cols-[1fr_auto]',\n            className\n        )}\n        {...props}\n    >\n        {title && <HeaderTitle>{title}</HeaderTitle>}\n        {description && <HeaderDescription>{description}</HeaderDescription>}\n        {!title && typeof children === 'string' ? <HeaderTitle>{children}</HeaderTitle> : children}\n    </header>\n)\n\nconst HeaderTitle = ({ className, ...props }: ComponentPropsWithRef<'h3'>) => (\n    <h3 slot='title' {...props} className={cn('font-semibold text-lg leading-none tracking-tight', className)} />\n)\n\nconst HeaderDescription = ({ className, ...props }: ComponentPropsWithRef<'div'>) => (\n    <div slot='description' className={cn('text-muted-fg text-sm md:row-start-2', className)} {...props} />\n)\n\nconst HeaderAction = ({ className, ...props }: ComponentPropsWithRef<'div'>) => (\n    <div\n        slot='action'\n        className={cn(\n            'flex items-center gap-2 self-start justify-self-end md:col-start-2 md:row-span-2 md:row-start-1',\n            className\n        )}\n        {...props}\n    />\n)\n\nHeader.Title = HeaderTitle\nHeader.Description = HeaderDescription\nHeader.Action = HeaderAction\n\nexport { Header }\n"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport type { ReactNode, RefObject } from 'react'\n\nimport { FileTrigger as RACFileTrigger, type FileTriggerProps as RACFileTriggerProps } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\n\nimport { Button, type buttonStyle } from './button'\n\ninterface FileTriggerProps extends RACFileTriggerProps, VariantProps<typeof buttonStyle> {\n    isDisabled?: boolean\n    ref?: RefObject<HTMLInputElement>\n}\n\nconst FileTrigger = ({\n    variant,\n    size,\n    shape,\n    ref,\n    isDisabled,\n    isPending,\n    children,\n    ...props\n}: Omit<FileTriggerProps, 'children'> & { children: ReactNode }) => {\n    return (\n        <RACFileTrigger ref={ref} {...props}>\n            <Button isDisabled={isDisabled} isPending={isPending} size={size} shape={shape} variant={variant}>\n                {children}\n            </Button>\n        </RACFileTrigger>\n    )\n}\n\nexport { FileTrigger }\nexport type { FileTriggerProps }\n"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\n\nimport { type ReactNode, type Ref, use } from 'react'\n\nimport { IconChevronDown, IconLoader, IconX } from 'hq-icons'\nimport type { ComboBoxProps as RACComboboxProps } from 'react-aria-components'\nimport {\n    Button,\n    ComboBoxStateContext,\n    ListBox,\n    ComboBox as RACCombobox,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn, fuzzyMatch } from '@/lib/utils'\nimport { Description, FieldError, FieldGroup, type FieldProps, Input, Label } from './form'\nimport { ListBoxDetails, ListBoxItem, ListBoxSection } from './list-box'\nimport { PopoverContent } from './popover'\n\ninterface ComboBoxProps<T extends object> extends Omit<RACComboboxProps<T>, 'children'>, FieldProps {\n    children: ReactNode | ((item: T) => ReactNode)\n    prefix?: ReactNode\n    isPending?: boolean\n    placeholder?: string\n    ref?: Ref<HTMLDivElement>\n}\n\nconst ComboBox = <T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    placeholder,\n    isPending,\n    className,\n    items,\n    ref,\n    ...props\n}: ComboBoxProps<T>) => (\n    <RACCombobox\n        defaultFilter={fuzzyMatch}\n        menuTrigger='focus'\n        className={composeRenderProps(className, (className) => cn('group/field flex flex-col gap-1.5', className))}\n        ref={ref}\n        {...props}\n    >\n        {label && <Label>{label}</Label>}\n        <FieldGroup isInvalid={props.isInvalid || !!errorMessage}>\n            {isPending ? (\n                <IconLoader className='ml-2 size-4 shrink-0 animate-spin text-muted-fg' />\n            ) : props.prefix ? (\n                <span className='ml-2 shrink-0 text-muted-fg has-[button]:ml-0 **:data-avatar:size-6'>\n                    {props.prefix}\n                </span>\n            ) : null}\n            <Input placeholder={placeholder ?? 'Choose an option or Input value'} />\n            {props.inputValue ? (\n                <ClearButton />\n            ) : (\n                <Button\n                    aria-label='Chevron'\n                    className='inline-flex items-center justify-center rounded-md text-muted-fg outline-hidden'\n                >\n                    <IconChevronDown className='group-open/field:-rotate-180 mr-2 size-4 transition' />\n                </Button>\n            )}\n        </FieldGroup>\n        {description && <Description>{description}</Description>}\n        <FieldError>{errorMessage}</FieldError>\n        <PopoverContent respectScreen={false} showArrow={false} trigger='focus' isPicker>\n            <ListBox\n                aria-label='items'\n                items={items}\n                className='grid w-full grid-cols-[auto_1fr_1.5rem] gap-y-1 overflow-y-auto rounded-md outline-hidden'\n            >\n                {children}\n            </ListBox>\n        </PopoverContent>\n    </RACCombobox>\n)\n\nconst ClearButton = () => {\n    const state = use(ComboBoxStateContext)!\n    return (\n        <Button\n            className='inline-flex cursor-pointer items-center justify-center rounded-md text-muted-fg outline-hidden hover:text-fg'\n            slot={null}\n            aria-label='Clear'\n            onPress={() => {\n                state.setInputValue('')\n                state.setSelectedKey(null)\n                state.open()\n            }}\n        >\n            <IconX className='mr-2 size-4' />\n        </Button>\n    )\n}\n\nComboBox.Item = ListBoxItem\nComboBox.Section = ListBoxSection\nComboBox.ItemDetails = ListBoxDetails\n\nexport { ComboBox }\n"
  },
  "otp": {
    "component": "@/components/ui/otp",
    "raw": "'use client'\n\nimport { IconCircle } from 'hq-icons'\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { type ComponentProps, use } from 'react'\n\nimport { cn } from '@/lib/utils'\n\ntype OTPInputProps = ComponentProps<typeof OTPInput>\nconst OTP = ({ className, autoFocus = false, containerClassName, ref, ...props }: OTPInputProps) => (\n    <OTPInput\n        data-1p-ignore\n        ref={ref}\n        autoFocus={autoFocus}\n        containerClassName={cn('flex items-center gap-2 has-disabled:opacity-50', containerClassName)}\n        className={cn('mt-auto h-[2.5rem] bg-danger disabled:cursor-not-allowed', className)}\n        {...props}\n    />\n)\n\ntype OTPGroupProps = ComponentProps<'div'>\nconst OTPGroup = ({ className, ref, ...props }: OTPGroupProps) => (\n    <div ref={ref} className={cn('flex items-center gap-x-1.5', className)} {...props} />\n)\n\ninterface OTPSlotProps extends ComponentProps<'div'> {\n    index: number\n}\n\nconst OTPSlot = ({ index, className, ref, ...props }: OTPSlotProps) => {\n    const OTPContext = use(OTPInputContext)\n    const slot = OTPContext.slots[index]\n\n    if (!slot) {\n        throw new Error('Slot not found')\n    }\n\n    const { char, hasFakeCaret, isActive } = slot\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'relative flex size-9 items-center justify-center rounded-lg border text-sm tabular-nums transition-all',\n                isActive && 'z-10 border-primary/70 ring-4 ring-primary/20',\n                className\n            )}\n            {...props}\n        >\n            {char}\n            {hasFakeCaret && (\n                <div className='pointer-events-none absolute inset-0 flex items-center justify-center'>\n                    <div className='h-4 w-px animate-caret-blink bg-fg duration-1000' />\n                </div>\n            )}\n        </div>\n    )\n}\n\ntype OTPSeparatorProps = ComponentProps<'div'>\nconst OTPSeparator = ({ ref, ...props }: OTPSeparatorProps) => (\n    <div ref={ref} {...props}>\n        <IconCircle className='size-2 fill-fg' />\n    </div>\n)\n\nOTP.Group = OTPGroup\nOTP.Slot = OTPSlot\nOTP.Separator = OTPSeparator\n\nexport { OTP }\nexport type { OTPGroupProps, OTPSeparatorProps, OTPSlotProps }\n"
  },
  "description-list": {
    "component": "@/components/ui/description-list",
    "raw": "import type { ComponentPropsWithRef } from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst DL = ({ className, ...props }: ComponentPropsWithRef<'dl'>) => {\n    return (\n        <dl\n            className={cn(\n                'grid grid-cols-1 text-base/6 sm:grid-cols-[min(50%,calc(var(--spacing)*80))_auto] sm:text-sm/6',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst DT = ({ className, ...props }: ComponentPropsWithRef<'dt'>) => {\n    return (\n        <dt className={cn('col-start-1 border-t pt-3 text-muted-fg first:border-none sm:py-3', className)} {...props} />\n    )\n}\n\nconst DD = ({ className, ...props }: ComponentPropsWithRef<'dd'>) => {\n    return <dd className={cn('pt-1 pb-3 text-fg sm:border-t sm:nth-2:border-none sm:py-3', className)} {...props} />\n}\n\nDL.T = DT\nDL.D = DD\n\nexport { DL }\n"
  },
  "command": {
    "component": "@/components/ui/command",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\n\nimport { IconLoader, IconSearch } from 'hq-icons'\nimport type { AutocompleteProps, ButtonProps, MenuProps, ModalOverlayProps } from 'react-aria-components'\nimport { Autocomplete, Button, Group, Input, Menu, TextField } from 'react-aria-components'\n\nimport { cn, fuzzyMatch } from '@/lib/utils'\nimport { Keyboard } from './keyboard'\nimport { MenuItem, MenuLabel, MenuSection, MenuSeparator } from './menu'\nimport { ModalContent } from './modal'\n\ninterface CommandProps<T> extends MenuProps<T>, Pick<AutocompleteProps, 'inputValue' | 'onInputChange'> {\n    isPending?: boolean\n}\n\nconst Command = <T extends object>({ ...props }: CommandProps<T>) => {\n    return (\n        <div data-command className={cn('rounded-lg border', props.className)}>\n            <Autocomplete filter={fuzzyMatch} inputValue={props.inputValue} onInputChange={props.onInputChange}>\n                <TextField autoFocus className='border-b p-1' aria-label='Search'>\n                    <Group className='flex items-center px-2'>\n                        {props.isPending ? (\n                            <IconLoader className='size-4 shrink-0 animate-spin text-muted-fg' />\n                        ) : (\n                            <IconSearch className='size-4 shrink-0 text-muted-fg' />\n                        )}\n                        <Input className='w-full p-2 outline-hidden' placeholder='Search...' />\n                    </Group>\n                </TextField>\n                <Menu\n                    renderEmptyState={() => (\n                        <div className='col-span-full p-4 text-center text-muted-fg'>No results found</div>\n                    )}\n                    className='grid w-full grid-cols-[auto_1fr_auto] gap-y-1 overflow-y-auto p-2 outline-hidden sm:max-h-[30rem]'\n                    {...props}\n                />\n            </Autocomplete>\n        </div>\n    )\n}\n\ninterface CommandModalProps<T> extends CommandProps<T>, Pick<ModalOverlayProps, 'isOpen' | 'onOpenChange'> {\n    shortcut?: {\n        modifiers?: 'alt' | 'mod' | 'mod+alt' | 'mod+shift' | 'mod+alt+shift' | 'alt+shift'\n        key: string\n    }\n}\n\nconst CommandModal = <T extends object>({ shortcut, ...props }: CommandModalProps<T>) => {\n    const [shortcutOpen, setShortcutOpen] = useState<boolean>(false)\n\n    useEffect(() => {\n        if (!shortcut) return\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (\n                e.key === shortcut?.key &&\n                (shortcut.modifiers === 'alt'\n                    ? e.altKey\n                    : shortcut.modifiers === 'mod+alt'\n                      ? e.altKey && (e.ctrlKey || e.metaKey)\n                      : shortcut.modifiers === 'mod+shift'\n                        ? e.shiftKey && (e.ctrlKey || e.metaKey)\n                        : shortcut.modifiers === 'mod+alt+shift'\n                          ? e.altKey && e.shiftKey && (e.ctrlKey || e.metaKey)\n                          : shortcut.modifiers === 'alt+shift'\n                            ? e.altKey && e.shiftKey\n                            : e.ctrlKey || e.metaKey)\n            ) {\n                e.preventDefault()\n                if (props.onOpenChange) {\n                    return props.onOpenChange(!props.isOpen)\n                }\n                setShortcutOpen(!shortcutOpen)\n            } else if (e.key === 'Escape') {\n                e.preventDefault()\n                if (props.onOpenChange) {\n                    return props.onOpenChange(false)\n                }\n                setShortcutOpen(false)\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown)\n        return () => document.removeEventListener('keydown', handleKeyDown)\n    })\n\n    return (\n        <ModalContent\n            isOpen={props.isOpen || shortcutOpen}\n            onOpenChange={props.onOpenChange || setShortcutOpen}\n            aria-label='Commands'\n            className='h-[70dvh] **:data-command:border-0 sm:h-auto sm:min-h-0'\n        >\n            <Command {...props} />\n        </ModalContent>\n    )\n}\n\nconst CommandTrigger = (props: ButtonProps) => <Button {...props} />\n\nCommand.Modal = CommandModal\n\nCommand.Trigger = CommandTrigger\n\nCommand.Item = MenuItem\nCommand.Label = MenuLabel\nCommand.Section = MenuSection\nCommand.Separator = MenuSeparator\n\nCommand.Shortcut = Keyboard\n\nexport { Command }\n"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\n\nimport { type ComponentProps, useEffect, useState } from 'react'\n\nimport { Collection, type CollectionProps } from '@react-aria/collections'\nimport { IconUser } from 'hq-icons'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\ninterface AvatarGroupProps<T extends object> extends CollectionProps<T> {\n    className?: string\n}\n\nconst getInitials = (name: string): string =>\n    name.split(' ').slice(0, 2).length > 1\n        ? name\n              .split(' ')\n              .slice(0, 2)\n              .map((part) => part.charAt(0))\n              .join('')\n        : name.split('').slice(0, 2).join('')\n\nconst AvatarGroup = <T extends object>({ className, ...props }: AvatarGroupProps<T>) => {\n    return (\n        <div\n            className={cn(\n                '-space-x-2 flex items-center justify-center **:data-avatar:ring **:data-avatar:ring-border',\n                '**:data-avatar:transition-transform **:data-avatar:hover:z-30 **:data-avatar:hover:scale-110',\n                className\n            )}\n        >\n            <Collection {...props} />\n        </div>\n    )\n}\n\nconst avatarStyle = tv({\n    base: [\n        'inline-grid shrink-0 items-center justify-center align-middle *:col-start-1 *:row-start-1',\n        '-outline-offset-1 text-center outline-1 outline-fg/20'\n    ],\n    variants: {\n        shape: {\n            square: 'rounded-lg *:rounded-lg',\n            circle: 'rounded-full *:rounded-full'\n        },\n        size: {\n            xs: 'size-6',\n            sm: 'size-7',\n            md: 'size-8',\n            lg: 'size-9',\n            xl: 'size-12',\n            '2xl': 'size-14',\n            '3xl': 'size-16',\n            '4xl': 'size-20',\n            '5xl': 'size-24'\n        }\n    },\n    defaultVariants: {\n        shape: 'circle',\n        size: 'lg'\n    }\n})\n\ninterface AvatarProps extends VariantProps<typeof avatarStyle> {\n    src?: string | undefined\n    alt?: string\n    className?: string\n}\n\nconst Avatar = ({ src, shape, size, alt, className, ...props }: AvatarProps & ComponentProps<'img'>) => {\n    const [error, setError] = useState(!src)\n\n    function handleError() {\n        setError(true)\n    }\n\n    useEffect(() => {\n        setError(!src)\n    }, [src])\n\n    if (error) {\n        return (\n            <span data-avatar={true} className={avatarStyle({ shape, size, className })}>\n                <FallbackImage alt={alt} />\n            </span>\n        )\n    }\n    return (\n        // biome-ignore lint/a11y/useAltText: <explanation>\n        <img\n            src={src}\n            alt={alt || 'Avatar'}\n            onError={handleError}\n            data-avatar\n            className={avatarStyle({ shape, size, className })}\n            {...props}\n        />\n    )\n}\n\nconst FallbackImage = ({ alt }: { alt: string | undefined }) => {\n    return alt ? (\n        <svg\n            className='size-full select-none bg-bg fill-current p-[5%] font-medium text-[48px] uppercase'\n            viewBox='0 0 100 100'\n            aria-hidden='true'\n        >\n            {alt && <title>{alt}</title>}\n            <text x='50%' y='50%' alignmentBaseline='middle' dominantBaseline='middle' textAnchor='middle' dy='.125em'>\n                {getInitials(alt)}\n            </text>\n        </svg>\n    ) : (\n        <IconUser className='size-full place-self-center bg-bg p-1.5' />\n    )\n}\n\nexport { Avatar, AvatarGroup }\nexport type { AvatarProps }\n"
  },
  "toggle": {
    "component": "@/components/ui/toggle",
    "raw": "'use client'\n\nimport { type RefObject, createContext, use } from 'react'\n\nimport type { ToggleButtonGroupProps, ToggleButtonProps } from 'react-aria-components'\nimport { ToggleButton, ToggleButtonGroup, composeRenderProps } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\ntype ToggleGroupContextProps = {\n    isDisabled?: boolean\n    gap?: 0 | 1 | 2 | 3 | 4\n    variant?: 'solid' | 'outline' | 'ghost'\n    orientation?: 'horizontal' | 'vertical'\n    size?: 'xs' | 'sm' | 'md' | 'lg'\n    icon?: boolean\n}\n\nconst ToggleGroupContext = createContext<ToggleGroupContextProps>({\n    gap: 0,\n    variant: 'outline',\n    orientation: 'horizontal',\n    size: 'md',\n    icon: false\n})\n\ninterface ToggleGroupProps extends ToggleButtonGroupProps, ToggleGroupContextProps {\n    ref?: RefObject<HTMLDivElement>\n}\n\nconst toggleGroupStyles = tv({\n    variants: {\n        orientation: {\n            horizontal: 'flex flex-row [-ms-overflow-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden',\n            vertical: 'grid items-start'\n        },\n        gap: {\n            0: 'gap-0 rounded-md **:rounded-none',\n            1: 'gap-1',\n            2: 'gap-2',\n            3: 'gap-3',\n            4: 'gap-4'\n        }\n    },\n    defaultVariants: {\n        orientation: 'horizontal',\n        gap: 0\n    },\n    compoundVariants: [\n        {\n            gap: 0,\n            orientation: 'vertical',\n            className: '*:[button]:-mt-px *:[button]:first:rounded-t-md *:[button]:last:rounded-b-md'\n        },\n        {\n            gap: 0,\n            orientation: 'horizontal',\n            className: '*:-mr-px *:first:*:rounded-s-md *:first:rounded-s-md *:last:*:rounded-e-md *:last:rounded-e-md'\n        }\n    ]\n})\n\nconst ToggleGroup = ({\n    className,\n    ref,\n    variant,\n    gap,\n    icon,\n    size = 'md',\n    orientation = 'horizontal',\n    ...props\n}: ToggleGroupProps) => {\n    return (\n        <ToggleGroupContext.Provider value={{ variant, gap, orientation, size, icon, isDisabled: props.isDisabled }}>\n            <ToggleButtonGroup\n                ref={ref}\n                orientation={orientation}\n                className={composeRenderProps(className, (className) =>\n                    cn(\n                        toggleGroupStyles({\n                            gap,\n                            orientation\n                        }),\n                        className\n                    )\n                )}\n                {...props}\n            />\n        </ToggleGroupContext.Provider>\n    )\n}\n\nconst toggleStyles = tv({\n    base: [\n        'cursor-pointer items-center gap-x-2 rounded-md border outline-hidden backdrop-blur-2xl transition sm:text-sm',\n        'ring-ring focus-visible:border-primary/70 focus-visible:ring-2',\n        'disabled:cursor-default disabled:opacity-50'\n    ],\n    variants: {\n        variant: {\n            solid: 'bg-bg/80 pressed:bg-primary/15 selected:bg-primary selected:text-primary-fg hover:bg-primary/10',\n            ghost: 'border-transparent bg-transparent pressed:bg-muted/50 text-fg hover:bg-muted/40',\n            outline: 'bg-bg/80 pressed:bg-muted/50 selected:bg-muted selected:text-fg hover:bg-muted/40'\n        },\n        noGap: { true: '' },\n        orientation: {\n            horizontal: 'inline-flex justify-center',\n            vertical: 'flex'\n        },\n        size: {\n            xs: 'gap-x-1.5 px-2 text-xs [--height:theme(spacing.6)] [--width:auto] **:[svg]:size-3.5',\n            sm: 'gap-x-1.5 px-3 text-sm [--height:theme(spacing.8)] [--width:auto] **:[svg]:size-4',\n            md: 'gap-x-2 px-4 text-sm [--height:theme(spacing.9)] [--width:auto] **:[svg]:size-4',\n            lg: 'gap-x-2.5 px-5 text-base [--height:theme(spacing.10)] [--width:auto] **:[svg]:size-5'\n        },\n        icon: {\n            true: 'h-(--height) w-(--height) shrink-0 justify-center px-0',\n            false: 'h-(--height) w-(--width)'\n        },\n        shape: {\n            square: 'rounded-md',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'solid',\n        size: 'sm',\n        shape: 'square'\n    },\n    compoundVariants: [\n        {\n            noGap: true,\n            orientation: 'vertical',\n            className: 'w-full'\n        }\n    ]\n})\n\ninterface ToggleProps extends ToggleButtonProps, VariantProps<typeof toggleStyles> {\n    ref?: RefObject<HTMLButtonElement>\n}\n\nconst Toggle = ({ className, variant, ref, ...props }: ToggleProps) => {\n    const { variant: groupvariant, gap, size, orientation, icon, isDisabled: isGroupDisabled } = use(ToggleGroupContext)\n    return (\n        <ToggleButton\n            ref={ref}\n            isDisabled={props.isDisabled ?? isGroupDisabled}\n            className={composeRenderProps(className, (classname) =>\n                cn(\n                    toggleStyles({\n                        variant: variant ?? groupvariant,\n                        size: props.size ?? size,\n                        icon: props.icon ?? icon,\n                        orientation: orientation,\n                        shape: props.shape,\n                        noGap: gap === 0\n                    }),\n                    classname\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nToggle.Group = ToggleGroup\n\nexport { Toggle, ToggleGroup, ToggleGroupContext, toggleGroupStyles }\nexport type { ToggleGroupContextProps }\n"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport { IconChevronLeft, IconChevronRight, IconChevronsLeft, IconChevronsRight, IconEllipsis } from 'hq-icons'\nimport type { ReactNode, RefObject } from 'react'\nimport type { ListBoxItemProps, ListBoxProps, ListBoxSectionProps, TextProps } from 'react-aria-components'\nimport { ListBox, ListBoxItem, ListBoxSection, Text, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ninterface PaginationProps<T> extends ListBoxProps<T> {\n    ref?: RefObject<HTMLDivElement>\n    shape?: 'square' | 'circle'\n}\nconst Pagination = <T extends object>({ className, shape = 'square', ref, ...props }: PaginationProps<T>) => {\n    return (\n        <ListBox\n            ref={ref}\n            orientation='horizontal'\n            aria-label={props['aria-label'] || 'Pagination'}\n            layout='grid'\n            data-shape={shape}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group flex',\n                    shape === 'square' ? '-space-x-px *:first:rounded-l-lg *:last:rounded-r-lg' : 'gap-1',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\ninterface PaginationPagesProps<T> extends ListBoxSectionProps<T> {\n    ref?: RefObject<HTMLElement>\n}\nconst PaginationPages = <T extends object>({ className, ref, ...props }: PaginationPagesProps<T>) => (\n    <ListBoxSection\n        ref={ref}\n        {...props}\n        className={cn(\n            'group-data-[shape=square]:-space-x-px flex only:*:last:rounded-r-lg only:*:first:rounded-l-lg group-data-[shape=circle]:gap-1',\n            className\n        )}\n    />\n)\n\ninterface PaginationItemProps extends ListBoxItemProps {\n    children?: ReactNode\n    className?: string\n    isCurrent?: boolean\n    slot?: 'ellipsis' | 'page' | 'last' | 'first' | 'previous' | 'next'\n}\nconst PaginationItem = ({ slot = 'page', className, isCurrent, children, ...props }: PaginationItemProps) => {\n    const textValue = slot === 'page' ? children?.toString() : slot\n    return (\n        <ListBoxItem\n            isDisabled={props.isDisabled || slot === 'ellipsis'}\n            textValue={textValue}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'inline-flex size-9 cursor-pointer items-center justify-center gap-x-2 whitespace-nowrap border font-medium text-sm outline-hidden transition',\n                    'group-data-[shape=circle]:rounded-full',\n                    'pressed:bg-muted/50 hover:bg-muted/40',\n                    'focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-ring',\n                    'selected:pointer-events-none selected:bg-primary selected:text-primary-fg',\n                    'disabled:cursor-default',\n                    isCurrent && 'bg-primary text-primary-fg',\n                    className\n                )\n            )}\n            {...props}\n        >\n            {slot === 'ellipsis' ? (\n                <IconEllipsis />\n            ) : slot === 'first' ? (\n                <IconChevronsLeft />\n            ) : slot === 'last' ? (\n                <IconChevronsRight />\n            ) : slot === 'previous' ? (\n                <IconChevronLeft />\n            ) : slot === 'next' ? (\n                <IconChevronRight />\n            ) : (\n                children\n            )}\n        </ListBoxItem>\n    )\n}\n\ninterface PaginationLabelProps extends TextProps {\n    current: number | string\n    total?: number | string\n}\nconst PaginationLabel = ({ className, current, total, ...props }: PaginationLabelProps) => (\n    <ListBoxItem\n        textValue={`${String(current)}/${String(total)}`}\n        isDisabled\n        className={cn(\n            'inline-flex h-9 select-none items-center justify-center gap-x-2 whitespace-nowrap border px-4 font-medium text-muted-fg text-sm outline-hidden transition',\n            className\n        )}\n        {...props}\n    >\n        <Text className='text-primary'>{current}</Text>\n        {total && (\n            <>\n                <span>/</span>\n                <Text>{total}</Text>\n            </>\n        )}\n    </ListBoxItem>\n)\n\nPagination.Item = PaginationItem\nPagination.Pages = PaginationPages\nPagination.Label = PaginationLabel\n\nexport { Pagination }\n"
  },
  "color-thumb": {
    "component": "@/components/ui/color-thumb",
    "raw": "'use client'\n\nimport { type ColorThumbProps, ColorThumb as RACColorThumb, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst ColorThumb = ({ className, ...props }: ColorThumbProps) => {\n    return (\n        <RACColorThumb\n            {...props}\n            style={({ defaultStyle }) => ({ ...defaultStyle })}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'top-1/2 left-1/2 size-5 rounded-full border-2 ring-bg',\n                    'focus-visible:size-8',\n                    'dragging:bg-muted',\n                    'disabled:opacity-50',\n                    className\n                )\n            )}\n        />\n    )\n}\n\nexport { ColorThumb }\n"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\n\nimport { IconCheck, IconMinus } from 'hq-icons'\nimport type {\n    CheckboxGroupProps as RACCheckboxGroupProps,\n    CheckboxProps as RACCheckboxProps\n} from 'react-aria-components'\nimport { Checkbox as RACCheckbox, CheckboxGroup as RACCheckboxGroup, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Description, FieldError, type FieldProps, Label } from './form'\n\ninterface CheckboxGroupProps extends RACCheckboxGroupProps, FieldProps {}\n\nconst CheckboxGroup = ({ className, children, label, description, errorMessage, ...props }: CheckboxGroupProps) => {\n    return (\n        <RACCheckboxGroup\n            {...props}\n            className={composeRenderProps(className, (className) => cn('group/field flex flex-col gap-2', className))}\n        >\n            {(values) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    {typeof children === 'function' ? children(values) : children}\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACCheckboxGroup>\n    )\n}\n\ninterface CheckboxProps extends RACCheckboxProps, Omit<FieldProps, 'errorMessage'> {\n    children?: ReactNode\n    ref?: Ref<HTMLLabelElement>\n}\n\nconst Checkbox = ({ className, children, label, description, ref, ...props }: CheckboxProps) => {\n    return (\n        <RACCheckbox\n            ref={ref}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group/box flex items-center gap-2',\n                    {\n                        'items-start': description\n                    },\n                    className\n                )\n            )}\n            {...props}\n        >\n            {({ isSelected, isIndeterminate }) => (\n                <>\n                    <div\n                        className={cn(\n                            'flex size-4 shrink-0 items-center justify-center rounded-xs border shadow-xs transition',\n                            'border-muted group-hover/box:border-primary/70 group-has-invalid/box:border-danger/70',\n                            'group-selected/box:border-primary group-selected/box:bg-primary group-selected/box:text-primary-fg group-selected/box:group-has-invalid/box:border-danger/70 group-selected/box:group-has-invalid/box:bg-danger group-selected/box:group-has-invalid/box:text-danger-fg',\n                            'group-focus/box:border-primary group-focus/box:group-has-invalid/box:border-danger/70',\n                            'group-focus-visible/box:ring-4 group-focus-visible/box:ring-ring group-focus-visible/box:group-has-invalid/box:ring-invalid',\n                            className\n                        )}\n                    >\n                        {isIndeterminate ? (\n                            <IconMinus className='size-3' />\n                        ) : isSelected ? (\n                            <IconCheck className='size-3' />\n                        ) : null}\n                    </div>\n\n                    <div className='flex flex-col gap-y-1.5'>\n                        <span className='not-last:text-sm/4 text-sm'>{label ?? children}</span>\n                        {description && <Description>{description}</Description>}\n                    </div>\n                </>\n            )}\n        </RACCheckbox>\n    )\n}\n\nexport { Checkbox, CheckboxGroup }\n"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport type { ReactNode } from 'react'\nimport type { SeparatorProps } from 'react-aria-components'\nimport { Separator as RACSeparator } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst Separator = ({ className, children, ...props }: SeparatorProps & { children?: ReactNode }) => {\n    return children ? (\n        <div\n            className={cn(\n                'text-muted-fg text-sm leading-6 before:border-muted after:border-muted',\n                props.orientation === 'vertical'\n                    ? 'mx-2 flex h-full flex-col items-center self-stretch before:mb-2 before:flex-1 before:border-l after:mt-2 after:flex-1 after:border-r'\n                    : 'my-2 flex h-px w-full items-center self-stretch before:mr-2 before:flex-1 before:border-t after:ml-2 after:flex-1 after:border-t',\n                className\n            )}\n        >\n            {children}\n        </div>\n    ) : (\n        <RACSeparator\n            {...props}\n            className={cn(\n                'shrink-0 bg-border',\n                props.orientation === 'vertical' ? 'h-full w-px' : 'h-px w-full',\n                className\n            )}\n        />\n    )\n}\n\nexport { Separator }\n"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport type { CSSProperties, ReactNode, Ref } from 'react'\n\nimport type { ButtonProps, DialogTriggerProps, ModalOverlayProps, PopoverProps } from 'react-aria-components'\nimport {\n    Button,\n    DialogTrigger,\n    Modal,\n    OverlayArrow,\n    Popover as RACPopover,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { useIsMobile } from '@/lib/hooks'\nimport {\n    Dialog,\n    DialogBody,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogOverlay,\n    DialogTitle,\n    popoverStyle,\n    sheetStyle\n} from './dialog'\n\nconst Popover = (props: DialogTriggerProps) => <DialogTrigger {...props} />\n\ninterface PopoverContentProps\n    extends Omit<ModalOverlayProps, 'children' | 'className'>,\n        Omit<PopoverProps, 'children' | 'className'> {\n    style?: CSSProperties\n    showArrow?: boolean\n    respectScreen?: boolean\n    isPicker?: boolean\n    children: ReactNode\n    className?: string | ((values: { defaultClassName?: string }) => string)\n    ref?: Ref<HTMLDivElement>\n}\n\nconst PopoverContent = ({\n    showArrow = true,\n    className,\n    respectScreen = true,\n    isPicker = false,\n    children,\n    ...props\n}: PopoverContentProps) => {\n    const isMobile = useIsMobile()\n    return isMobile && respectScreen ? (\n        <DialogOverlay isDismissable {...props}>\n            <Modal\n                className={composeRenderProps(className, (className, renderProps) =>\n                    sheetStyle({ ...renderProps, side: 'bottom', className })\n                )}\n                {...props}\n            >\n                <Dialog role='dialog' aria-label={props['aria-label'] ?? 'Popover'}>\n                    {children}\n                </Dialog>\n            </Modal>\n        </DialogOverlay>\n    ) : (\n        <RACPopover\n            className={composeRenderProps(className, (className) => popoverStyle({ isPicker, className }))}\n            {...props}\n        >\n            {showArrow && (\n                <OverlayArrow className='group'>\n                    <svg\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className='group-placement-left:-rotate-90 block fill-bg stroke-muted group-placement-bottom:rotate-180 group-placement-right:rotate-90'\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            {children}\n        </RACPopover>\n    )\n}\n\nPopover.Trigger = (props: ButtonProps) => <Button {...props} />\n\nPopover.Content = PopoverContent\n\nPopover.Header = DialogHeader\nPopover.Title = DialogTitle\nPopover.Description = DialogDescription\nPopover.Body = DialogBody\nPopover.Footer = DialogFooter\n\nexport { Popover, PopoverContent }\n"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\n\nimport type { DropZoneProps } from 'react-aria-components'\nimport { DropZone as RACDropZone, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n    <RACDropZone\n        className={composeRenderProps(className, (className) =>\n            cn(\n                'group flex max-h-[200px] max-w-xl flex-col items-center justify-center gap-2 rounded-lg border border-dashed p-6 text-sm outline-hidden transition duration-200 has-[[slot=description]]:text-center',\n                'drop-target:border-primary drop-target:border-solid drop-target:bg-ring/50 drop-target:ring-4 drop-target:ring-ring drop-target:[&_.text-muted-fg]:text-primary',\n                'focus:border-primary/70 focus:outline-hidden focus:ring-4 focus:ring-ring focus:invalid:border-danger/70 focus:invalid:ring-invalid',\n                'focus-visible:ring-4 focus-visible:ring-ring',\n                className\n            )\n        )}\n        {...props}\n    />\n)\nexport { DropZone }\n"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\n\nimport type { ComponentPropsWithRef } from 'react'\n\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { IconChevronLeft, IconChevronRight } from 'hq-icons'\nimport type { CalendarProps, DateValue, RangeCalendarProps } from 'react-aria-components'\nimport {\n    Button,\n    CalendarCell,\n    CalendarGrid,\n    CalendarGridBody,\n    CalendarHeaderCell,\n    Heading,\n    Calendar as RACCalendar,\n    CalendarGridHeader as RACCalendarGridHeader,\n    RangeCalendar as RACRangeCalendar,\n    useLocale\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst Calendar = <T extends DateValue>(props: CalendarProps<T>) => {\n    const now = today(getLocalTimeZone())\n    return (\n        <RACCalendar {...props}>\n            <CalendarHeader />\n            <CalendarGrid className='w-full **:[td]:px-0 **:[td]:py-[1.5px]'>\n                <CalendarGridHeader />\n                <CalendarGridBody>\n                    {(date) => (\n                        <CalendarCell\n                            date={date}\n                            className={cn([\n                                'relative flex size-8 shrink-0 cursor-pointer items-center justify-center rounded-lg pressed:bg-muted/50 outside-month:text-muted-fg text-sm outline-hidden hover:bg-muted/40',\n                                'selected:bg-primary selected:text-primary-fg selected:invalid:bg-danger selected:invalid:text-danger-fg',\n                                'focus-visible:ring-2 focus-visible:ring-ring',\n                                'disabled:pointer-events-none disabled:opacity-50',\n                                date.compare(now) === 0 &&\n                                    'after:-translate-x-1/2 after:pointer-events-none after:absolute after:start-1/2 after:bottom-1 after:z-10 after:size-1 after:rounded-full after:bg-primary selected:after:bg-primary-fg'\n                            ])}\n                        >\n                            {date.day}\n                        </CalendarCell>\n                    )}\n                </CalendarGridBody>\n            </CalendarGrid>\n        </RACCalendar>\n    )\n}\n\nconst RangeCalendar = <T extends DateValue>({ visibleDuration = { months: 1 }, ...props }: RangeCalendarProps<T>) => {\n    const now = today(getLocalTimeZone())\n    return (\n        <RACRangeCalendar visibleDuration={visibleDuration} {...props}>\n            <CalendarHeader />\n            <div className='grid gap-2 overflow-auto md:flex'>\n                {Array.from({ length: visibleDuration?.months ?? 1 }).map((_, index) => {\n                    const id = index + 1\n                    return (\n                        <CalendarGrid\n                            key={index}\n                            offset={id >= 2 ? { months: id - 1 } : undefined}\n                            className='w-full **:[td]:px-0 **:[td]:py-[1.5px] **:[td]:first:*:rounded-s-lg **:[td]:last:*:rounded-e-lg'\n                        >\n                            <CalendarGridHeader />\n                            <CalendarGridBody>\n                                {(date) => (\n                                    <CalendarCell\n                                        date={date}\n                                        className={cn([\n                                            'relative flex size-8 shrink-0 cursor-pointer items-center justify-center rounded-lg pressed:bg-muted/50 outside-month:text-muted-fg text-sm outline-hidden hover:bg-muted/40',\n                                            'selection-start:bg-primary selection-start:text-primary-fg selection-start:invalid:bg-danger selection-start:invalid:text-danger-fg',\n                                            'selection-end:bg-primary selection-end:text-primary-fg selection-end:invalid:bg-danger selection-end:invalid:text-danger-fg',\n                                            'selected:rounded-none selected:bg-muted/50 selected:selection-end:rounded-r-lg selected:selection-start:rounded-l-lg',\n                                            'focus-visible:ring-2 focus-visible:ring-ring',\n                                            'disabled:pointer-events-none disabled:opacity-50',\n                                            date.compare(now) === 0 &&\n                                                'after:-translate-x-1/2 after:pointer-events-none after:absolute after:start-1/2 after:bottom-1 after:mt-1 after:size-1 after:rounded after:bg-primary selected:selection-end:after:bg-primary-fg selected:selection-start:after:bg-primary-fg'\n                                        ])}\n                                    >\n                                        {date.day}\n                                    </CalendarCell>\n                                )}\n                            </CalendarGridBody>\n                        </CalendarGrid>\n                    )\n                })}\n            </div>\n        </RACRangeCalendar>\n    )\n}\n\nconst CalendarHeader = ({ className, ...props }: ComponentPropsWithRef<'header'> & { isRange?: boolean }) => {\n    const { direction } = useLocale()\n    return (\n        <header\n            slot='calendar-header'\n            className={cn('flex w-full items-center justify-between gap-1.5 pt-1 pr-1 pb-5 pl-1.5 sm:pb-4', className)}\n            {...props}\n        >\n            <Button\n                className='inline-flex size-7 shrink-0 items-center justify-center rounded-md border border-muted/40 bg-bg pressed:bg-muted/50 text-muted-fg shadow-sm outline-hidden hover:bg-muted/40 focus-visible:ring-2 focus-visible:ring-ring'\n                slot='previous'\n            >\n                {direction === 'rtl' ? <IconChevronRight /> : <IconChevronLeft />}\n            </Button>\n            <Heading className='font-normal text-sm' />\n            <Button\n                className='inline-flex size-7 shrink-0 items-center justify-center rounded-md border border-muted/40 bg-bg pressed:bg-muted/50 text-muted-fg shadow-sm outline-hidden hover:bg-muted/40 focus-visible:ring-2 focus-visible:ring-ring'\n                slot='next'\n            >\n                {direction === 'rtl' ? <IconChevronLeft /> : <IconChevronRight />}\n            </Button>\n        </header>\n    )\n}\n\nconst CalendarGridHeader = () => {\n    return (\n        <RACCalendarGridHeader>\n            {(day) => (\n                <CalendarHeaderCell className='pb-2 font-semibold text-muted-fg text-sm sm:px-0 sm:py-0.5 lg:text-xs'>\n                    {day}\n                </CalendarHeaderCell>\n            )}\n        </RACCalendarGridHeader>\n    )\n}\n\nexport { Calendar, RangeCalendar }\n"
  },
  "code": {
    "component": "@/components/ui/code",
    "raw": "'use client'\n\nimport { useEffect, useState } from 'react'\n\nimport { IconCheck, IconCopy } from 'hq-icons'\nimport { Button, type ButtonProps } from 'react-aria-components'\nimport rehypePrettyCode, { type Theme } from 'rehype-pretty-code'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport { unified } from 'unified'\n\nimport { cn } from '@/lib/utils'\n\ninterface CodeProps {\n    lang?: string | { block?: string; inline?: string }\n    code: string\n    theme?: Theme | { light: Theme; dark: Theme }\n    className?: string\n    highlight?: number[] | string[]\n    lineNumbers?: boolean\n    filename?: string\n}\n\nconst Code = ({\n    lang = 'ts',\n    code,\n    theme = 'github-dark',\n    highlight,\n    lineNumbers = true,\n    filename,\n    className\n}: CodeProps) => {\n    const [copied, setCopied] = useState<boolean>(false)\n\n    const highlightLine = highlight?.join(',').replaceAll(' ', '')\n\n    async function copyToClipboard(text: string) {\n        try {\n            await navigator.clipboard.writeText(text)\n        } catch (err) {\n            console.error('Failed to copy: ', err)\n        }\n    }\n\n    const copyCode = async () => {\n        await copyToClipboard(code).then(() => {\n            setCopied(true)\n            setTimeout(() => setCopied(false), 2000)\n        })\n    }\n\n    const [formattedCode, setFormattedCode] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    useEffect(() => {\n        const processCode = async () => {\n            try {\n                const file = await unified()\n                    .use(remarkParse)\n                    .use(remarkRehype, { allowDangerousHtml: true })\n                    .use(rehypePrettyCode, {\n                        keepBackground: true,\n                        theme,\n                        defaultLang: lang\n                    })\n                    .use(rehypeStringify, { allowDangerousHtml: true })\n                    .process(\n                        `\\`\\`\\`${lang} ${lineNumbers && 'showLineNumbers'} ${filename ? `title=\"${filename}\"` : ''} \\{${highlightLine}\\}\\n${code}\\n\\`\\`\\``\n                    )\n                setFormattedCode(String(file))\n            } catch (err) {\n                setError('Failed to process code. Please check the configuration.')\n                console.error(err)\n            }\n        }\n        processCode().catch(console.error)\n    }, [code, theme, lang, highlightLine, filename, lineNumbers])\n\n    if (error) {\n        setFormattedCode(error)\n    }\n\n    return (\n        <div className={cn('relative overflow-hidden rounded-lg', className)}>\n            <CopyButton className='absolute top-1 right-1' copied={copied} onPress={copyCode} />\n            <style>\n                {`pre code[data-line-numbers] { counter-reset: line; } pre code[data-line-numbers] > [data-line]::before { counter-increment: line; content: counter(line); margin-right: 2rem; color: #71717b; display: inline-block; text-align: right; width: 1rem; } pre code[data-line-numbers-max-digits=\"2\"] > [data-line]::before { width: 2rem; } pre code[data-line-numbers-max-digits=\"3\"] > [data-line]::before { width: 3rem; } code, code span { color: var(--shiki-light); background-color: var(--shiki-light-bg); } .dark { code, code span { color: var(--shiki-dark); background-color: var(--shiki-dark-bg); } } [data-highlighted-line] { background: rgba(200, 200, 255, 0.2) !important; border-left-color: color-mix(in oklab, var(--primary) 80%, transparent) !important; }`}\n            </style>\n            <section\n                className='text-sm **:[code]:*:pr-12 **:[code]:*:pl-3 **:[code]:py-2.5 **:[code]:leading-relaxed **:[figcaption]:bg-fg **:[figcaption]:p-3 **:[figcaption]:text-muted-fg **:[pre]:overflow-auto'\n                dangerouslySetInnerHTML={{ __html: formattedCode }}\n            />\n        </div>\n    )\n}\n\nconst CopyButton = ({ copied, className, ...props }: ButtonProps & { copied: boolean }) => (\n    <Button\n        aria-label={copied ? 'Copied' : 'Copy'}\n        className={cn(\n            'z-10 flex size-9 shrink-0 cursor-pointer items-center justify-center rounded-md text-muted-fg outline-hidden backdrop-blur-sm focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-inset',\n            className\n        )}\n        {...props}\n    >\n        <IconCopy\n            className={cn('size-4 rotate-0 scale-100 transition-all duration-200', copied && 'rotate-90 scale-0')}\n        />\n        <IconCheck\n            className={cn(\n                'absolute size-4 rotate-90 scale-0 transition-all duration-200',\n                copied && 'rotate-0 scale-100'\n            )}\n        />\n    </Button>\n)\n\nexport { Code, CopyButton }\n"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport { type LinkProps, Link as RACLink, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nconst Link = ({ className, ...props }: LinkProps) => {\n    return (\n        <RACLink\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'relative cursor-pointer rounded-lg text-sm outline-hidden transition',\n                    'focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2',\n                    'disabled:cursor-default disabled:opacity-50',\n                    className\n                )\n            )}\n        />\n    )\n}\n\nexport { Link }\n"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport type { ComponentProps } from 'react'\n\nimport type { ButtonProps, DialogProps, DialogTriggerProps, ModalOverlayProps } from 'react-aria-components'\nimport { Button, Modal, DialogTrigger as SheetTrigger } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport {\n    Dialog,\n    DialogBody,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogOverlay,\n    DialogTitle,\n    DialogX,\n    sheetStyle\n} from './dialog'\n\nconst Sheet = (props: DialogTriggerProps) => {\n    return <SheetTrigger {...props} />\n}\n\ninterface SheetContentProps\n    extends Omit<ComponentProps<typeof Modal>, 'children'>,\n        Omit<ModalOverlayProps, 'className' | 'children'> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    closeButton?: boolean\n    side?: 'top' | 'bottom' | 'left' | 'right'\n    children?: DialogProps['children']\n}\n\nconst SheetContent = ({\n    side = 'right',\n    role = 'dialog',\n    closeButton = true,\n    className,\n    children,\n    ...props\n}: SheetContentProps) => {\n    const isDismissable = role !== 'alertdialog'\n    return (\n        <DialogOverlay isDismissable={isDismissable} {...props}>\n            <Modal\n                className={sheetStyle({\n                    side,\n                    className: side === 'top' || side === 'bottom' ? 'h-fit' : 'h-full'\n                })}\n                {...props}\n            >\n                <Dialog\n                    role={role}\n                    aria-label={props['aria-label'] ?? 'Sheet'}\n                    className={cn(\n                        'relative flex flex-col overflow-hidden outline-hidden',\n                        side === 'top' || side === 'bottom'\n                            ? 'max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding))]'\n                            : 'h-full max-h-screen'\n                    )}\n                >\n                    {(values) => (\n                        <>\n                            {typeof children === 'function' ? children(values) : children}\n                            {closeButton && isDismissable && <DialogX />}\n                        </>\n                    )}\n                </Dialog>\n            </Modal>\n        </DialogOverlay>\n    )\n}\n\nSheet.Trigger = (props: ButtonProps) => <Button {...props} />\n\nSheet.Content = SheetContent\n\nSheet.Header = DialogHeader\nSheet.Title = DialogTitle\nSheet.Description = DialogDescription\nSheet.Body = DialogBody\nSheet.Footer = DialogFooter\n\nexport { Sheet, SheetContent }\n"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport type { ReactNode } from 'react'\n\nimport { IconGripVertical } from 'hq-icons'\nimport type { GridListItemProps, GridListProps as RACGridListProps } from 'react-aria-components'\nimport {\n    Button,\n    GridList as RACGridList,\n    GridListItem as RACGridListItem,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Checkbox } from './checkbox'\n\ninterface GridListProps<T extends object> extends RACGridListProps<T> {\n    columns?: 1 | 2 | 3 | 4 | 5 | 6 | 'auto'\n    gap?: 0 | 1 | 2 | 3 | 4 | 5 | 6\n}\n\nconst GridList = <T extends object>({\n    children,\n    layout,\n    className,\n    columns = 1,\n    gap = 0,\n    ...props\n}: GridListProps<T>) => (\n    <RACGridList\n        aria-label={props['aria-label'] ?? 'Grid list'}\n        layout={columns === 1 && gap === 0 ? 'stack' : 'grid'}\n        className={composeRenderProps(className, (className) =>\n            cn(\n                'group layout-stack:flex layout-stack:flex-col layout-stack:gap-0 layout-stack:divide-y layout-stack:rounded-lg layout-stack:border-y',\n                {\n                    'flex grow flex-wrap': columns === 'auto',\n                    'grid grid-cols-1': columns === 1,\n                    'grid grid-cols-2': columns === 2,\n                    'grid grid-cols-3': columns === 3,\n                    'grid grid-cols-4': columns === 4,\n                    'grid grid-cols-5': columns === 5,\n                    'grid grid-cols-6': columns === 6\n                },\n                {\n                    'gap-0': gap === 0,\n                    'gap-1': gap === 1,\n                    'gap-2': gap === 2,\n                    'gap-3': gap === 3,\n                    'gap-4': gap === 4,\n                    'gap-5': gap === 5,\n                    'gap-6': gap === 6\n                },\n                className\n            )\n        )}\n        {...props}\n    >\n        {children}\n    </RACGridList>\n)\n\nconst GridListItem = ({ className, children, ...props }: GridListItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n    return (\n        <RACGridListItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(\n                className,\n                (className, { isHovered, isSelected, isFocusVisible, isDisabled }) =>\n                    cn(\n                        'flex select-none items-center gap-2 px-3 py-2 text-fg outline-hidden sm:text-sm',\n                        'group-layout-grid:rounded-lg group-layout-grid:border',\n                        'group-layout-stack:border-x group-layout-stack:last:rounded-b-lg group-layout-stack:first:rounded-t-lg',\n                        isHovered && 'bg-primary/10',\n                        {\n                            'bg-primary/10 text-primary group-layout-grid:border-primary/70 group-layout-stack:border-x-primary/70':\n                                isSelected || isFocusVisible\n                        },\n                        isDisabled && 'text-muted-fg',\n                        className\n                    )\n            )}\n        >\n            {({ selectionMode, selectionBehavior, allowsDragging, isDragging }) => (\n                <>\n                    {allowsDragging && (\n                        <Button\n                            slot='drag'\n                            className={cn('cursor-grab text-muted-fg', isDragging && 'cursor-grabbing')}\n                        >\n                            <IconGripVertical />\n                        </Button>\n                    )}\n                    {selectionMode === 'multiple' && selectionBehavior === 'toggle' && <Checkbox slot='selection' />}\n                    {children as ReactNode}\n                </>\n            )}\n        </RACGridListItem>\n    )\n}\n\nGridList.Item = GridListItem\n\nexport { GridList }\n"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport { type ReactNode, type Ref, useState } from 'react'\n\nimport { IconEye, IconEyeClosed, IconLoaderCircle } from 'hq-icons'\nimport {\n    Button,\n    Input,\n    TextField as RACTextField,\n    type TextFieldProps as RACTextFieldProps,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport type { FieldProps } from './form'\nimport { Description, FieldError, FieldGroup, Label } from './form'\n\ninterface TextFieldProps extends RACTextFieldProps, FieldProps {\n    prefix?: ReactNode\n    suffix?: ReactNode\n    isPending?: boolean\n    placeholder?: string\n    ref?: Ref<HTMLInputElement>\n}\n\nconst TextField = ({\n    label,\n    placeholder,\n    description,\n    errorMessage,\n    className,\n    type,\n    ref,\n    ...props\n}: TextFieldProps) => {\n    const [masked, setMasked] = useState<boolean>(type === 'password')\n    const inputType = type === 'password' ? (masked ? 'password' : 'text') : type\n\n    return (\n        <RACTextField\n            type={inputType}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup\n                        isInvalid={!!errorMessage || values.isInvalid}\n                        isDisabled={values.isDisabled}\n                        data-loading={props.isPending ? 'true' : undefined}\n                    >\n                        {props.prefix ? (\n                            <span data-prefix className='ml-2 text-muted-fg has-[button]:ml-0'>\n                                {props.prefix}\n                            </span>\n                        ) : null}\n                        <Input placeholder={placeholder} />\n                        {type === 'password' ? (\n                            <Button\n                                type='button'\n                                aria-label='Toggle visibility'\n                                onPress={() => setMasked((e) => !e)}\n                                className='mr-2 inline-flex items-center justify-center text-muted-fg outline-hidden focus-visible:text-primary'\n                            >\n                                <IconEye\n                                    aria-hidden\n                                    className={cn('size-4 scale-0 transition-transform', masked && 'scale-100')}\n                                />\n                                <IconEyeClosed\n                                    aria-hidden\n                                    className={cn(\n                                        'absolute size-4 scale-0 transition-transform',\n                                        !masked && 'scale-100'\n                                    )}\n                                />\n                            </Button>\n                        ) : props.isPending ? (\n                            <IconLoaderCircle className='mr-2 size-3.5 animate-spin text-muted-fg' data-suffix />\n                        ) : props.suffix ? (\n                            <span data-suffix className='mr-2 text-muted-fg has-[button]:mr-0'>\n                                {props.suffix}\n                            </span>\n                        ) : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACTextField>\n    )\n}\n\nexport { TextField }\n"
  },
  "collections": {
    "component": "@/components/ui/collections",
    "raw": "'use client'\n\nimport { DropIndicator, isTextDropItem, useDragAndDrop } from 'react-aria-components'\nimport type { DragAndDropOptions, DropOperation } from 'react-aria-components'\nimport { type ListData, type ListOptions, useListData as RACListData } from 'react-stately'\n\nconst useList = <T extends object>(options: ListOptions<T>) => RACListData(options)\nconst useDND = <T extends object>({\n    list,\n    operation = 'move'\n}: {\n    list: ListData<T & { name: string }>\n    operation?: DropOperation\n    DragAndDropOptions?: DragAndDropOptions\n}) =>\n    useDragAndDrop({\n        getItems: (items) =>\n            [...items].map((item) => ({\n                'text/plain': list.getItem(item)?.name ?? '',\n                'custom-app-type': JSON.stringify(list.getItem(item as string)!)\n            })),\n        onReorder: (e) => {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        },\n        acceptedDragTypes: ['custom-app-type'],\n        getDropOperation: () => operation,\n        onInsert: async (e) => {\n            const processedItems = await Promise.all(\n                e.items.filter(isTextDropItem).map(async (item) => JSON.parse(await item.getText('custom-app-type')))\n            )\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...processedItems)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...processedItems)\n            }\n        },\n        onRootDrop: async (e) => {\n            const processedItems = await Promise.all(\n                e.items.filter(isTextDropItem).map(async (item) => JSON.parse(await item.getText('custom-app-type')))\n            )\n            list.append(...processedItems)\n        },\n        onDragEnd: (e) => {\n            if (e.dropOperation === 'move' && !e.isInternal) {\n                list.remove(...e.keys)\n            }\n        },\n        renderDropIndicator: (e) => (\n            <DropIndicator\n                target={e}\n                className={({ isDropTarget }) =>\n                    isDropTarget ? 'col-span-full rounded-md outline outline-primary' : ''\n                }\n            />\n        ),\n        renderDragPreview: (items) => (\n            <ul className='w-full rounded-md bg-primary p-2 text-primary-fg'>\n                {items.map((item, i) => (\n                    <li className='text-sm' key={i}>\n                        {i + 1}. {item['text/plain']}\n                    </li>\n                ))}\n            </ul>\n        )\n    })\n\nexport { useDND, useList }\n"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import { type HTMLAttributes, useId } from 'react'\n\nimport { cn } from '@/lib/utils'\n\ninterface SkeletonProps extends HTMLAttributes<HTMLDivElement> {\n    shape?: 'square' | 'circle'\n}\nconst Skeleton = ({ shape, className, ...props }: SkeletonProps) => {\n    const patternId = useId()\n    return (\n        <div\n            style={{ opacity: 0.9 }}\n            className={cn(\n                'relative shrink-0 animate-pulse overflow-hidden border',\n                shape === 'circle' ? 'rounded-full' : 'rounded-sm',\n                className\n            )}\n            {...props}\n        >\n            <svg className='absolute inset-0 size-full stroke-border' fill='none'>\n                <defs>\n                    <pattern id={patternId} x='0' y='0' width='10' height='10' patternUnits='userSpaceOnUse'>\n                        <path d='M-3 13 15-5M-5 5l18-18M-1 21 17 3' />\n                    </pattern>\n                </defs>\n                <rect stroke='none' fill={`url(#${patternId})`} width='100%' height='100%' />\n            </svg>\n        </div>\n    )\n}\n\nexport { Skeleton }\n"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport { IconCheck, IconGripVertical } from 'hq-icons'\nimport type {\n    ListBoxItemProps,\n    ListBoxProps,\n    ListBoxSectionProps,\n    SeparatorProps,\n    TextProps\n} from 'react-aria-components'\nimport {\n    Collection,\n    Header,\n    ListBox as RACListBox,\n    ListBoxItem as RACListBoxItem,\n    ListBoxSection as RACListBoxSection,\n    Separator,\n    Text,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport type { ComponentPropsWithRef } from 'react'\nimport { tv } from 'tailwind-variants'\n\nconst listStyles = tv({\n    slots: {\n        sectionStyle: 'col-span-full mt-2 grid grid-cols-[auto_1fr] text-sm',\n        headerStyle: 'pointer-events-none col-span-full px-2 py-1 text-muted-fg text-xs',\n        itemStyle: [\n            'group relative col-span-full grid grid-cols-subgrid items-center outline-hidden has-data-[slot=item-details]:items-start',\n            'select-none rounded-md px-2 py-1.5 text-base sm:text-sm/6',\n            '**:data-[slot=icon]:mr-2 **:[svg]:size-3.5 has-data-[slot=item-details]:**:[svg]:my-1',\n            '**:data-avatar:*:size-6 **:data-avatar:mr-2 **:data-avatar:size-6 **:data-avatar:shrink-0',\n            'focus:bg-ring focus:text-primary focus:*:[.text-muted-fg]:text-primary',\n            'hover:bg-ring hover:text-primary hover:*:[.text-muted-fg]:text-primary',\n            'selected:**:data-[slot=checked]:mr-2 selected:**:data-[slot=icon]:hidden selected:**:data-avatar:hidden has-data-avatar:selected:**:data-[slot=checked]:ml-1',\n            'dragging:cursor-grabbing dragging:outline dragging:outline-primary',\n            'disabled:pointer-events-none disabled:opacity-50'\n        ]\n    }\n})\n\nconst { sectionStyle, headerStyle, itemStyle } = listStyles()\n\nconst ListBox = <T extends object>({ className, ...props }: ListBoxProps<T>) => (\n    <RACListBox\n        {...props}\n        className={composeRenderProps(className, (className) =>\n            cn(\n                'grid w-full grid-cols-[auto_1fr_auto] gap-y-1 overflow-y-auto rounded-lg border p-1 outline-hidden',\n                className\n            )\n        )}\n    />\n)\n\nconst ListBoxItem = ({ children, className, ...props }: ListBoxItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <RACListBoxItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                itemStyle({\n                    className\n                })\n            )}\n        >\n            {(values) => (\n                <>\n                    {values.allowsDragging && (\n                        <IconGripVertical\n                            className={cn(\n                                'size-4 shrink-0 text-muted-fg transition',\n                                values.isDragging && 'text-primary'\n                            )}\n                        />\n                    )}\n                    {values.isSelected && <IconCheck className='text-green-500' data-slot='checked' />}\n                    {typeof children === 'string' ? (\n                        <Text slot='label' className='col-start-2'>\n                            {children}\n                        </Text>\n                    ) : (\n                        children\n                    )}\n                </>\n            )}\n        </RACListBoxItem>\n    )\n}\n\nconst ListBoxSection = <T extends object>({\n    className,\n    items,\n    children,\n    ...props\n}: ListBoxSectionProps<T> & { title?: string }) => (\n    <RACListBoxSection className={sectionStyle({ className })}>\n        {'title' in props && <Header className={headerStyle()}>{props.title}</Header>}\n        <Collection items={items}>{children}</Collection>\n    </RACListBoxSection>\n)\n\ninterface ListBoxDetailsProps extends TextProps {\n    label?: TextProps['children']\n    description?: TextProps['children']\n}\n\nconst ListBoxDetails = ({ label, description, ...props }: ListBoxDetailsProps) => {\n    const { children, title, ...restProps } = props\n\n    return (\n        <div data-slot='item-details' className='col-start-2 flex flex-col gap-y-1' {...restProps}>\n            {label && (\n                <Text slot='label' className='font-medium sm:text-sm'>\n                    {label}\n                </Text>\n            )}\n            {description && (\n                <Text slot='description' className='text-muted-fg text-xs' {...restProps}>\n                    {description}\n                </Text>\n            )}\n            {!title && children}\n        </div>\n    )\n}\n\nconst ListBoxSeparator = ({ className, ...props }: SeparatorProps) => (\n    <Separator\n        orientation='horizontal'\n        className={cn('-mx-1 col-span-full my-1 h-px bg-muted', className)}\n        {...props}\n    />\n)\n\nconst ListBoxLabel = ({ className, ...props }: ComponentPropsWithRef<typeof Text>) => (\n    <Text slot='label' className={cn('col-start-2', className)} {...props} />\n)\n\nListBox.Section = ListBoxSection\nListBox.Details = ListBoxDetails\nListBox.Item = ListBoxItem\nListBox.Separator = ListBoxSeparator\nListBox.Label = ListBoxLabel\n\nexport { itemStyle, headerStyle, sectionStyle }\nexport { ListBox, ListBoxSection, ListBoxDetails, ListBoxItem, ListBoxSeparator, ListBoxLabel }\n"
  },
  "toolbar": {
    "component": "@/components/ui/toolbar",
    "raw": "'use client'\n\nimport type { RefObject } from 'react'\n\nimport type { GroupProps, SeparatorProps, ToolbarProps } from 'react-aria-components'\nimport {\n    Group,\n    Toolbar as RACToolbar,\n    Separator,\n    ToolbarContext,\n    composeRenderProps,\n    useSlottedContext\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Toggle, ToggleGroupContext, type ToggleGroupContextProps, toggleGroupStyles } from './toggle'\n\nconst Toolbar = ({ orientation = 'horizontal', className, ...props }: ToolbarProps) => (\n    <ToolbarContext.Provider value={{ orientation }}>\n        <RACToolbar\n            orientation={orientation}\n            className={composeRenderProps(className, (className, { orientation }) =>\n                cn(\n                    'group gap-2',\n                    orientation === 'vertical'\n                        ? 'grid items-start'\n                        : 'flex flex-row [-ms-overflow-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden',\n                    className\n                )\n            )}\n            {...props}\n        />\n    </ToolbarContext.Provider>\n)\n\ninterface ToolbarGroupProps extends GroupProps, Omit<ToggleGroupContextProps, 'orientation'> {\n    ref?: RefObject<HTMLDivElement>\n}\n\nconst ToolbarGroup = ({ className, ref, variant, gap, icon, size, ...props }: ToolbarGroupProps) => {\n    const { orientation } = useSlottedContext(ToolbarContext)!\n    return (\n        <ToggleGroupContext.Provider value={{ variant, gap, size, icon, orientation, isDisabled: props.isDisabled }}>\n            <Group\n                ref={ref}\n                className={composeRenderProps(className, (className) =>\n                    cn(\n                        toggleGroupStyles({\n                            gap,\n                            orientation\n                        }),\n                        className\n                    )\n                )}\n                {...props}\n            />\n        </ToggleGroupContext.Provider>\n    )\n}\n\nconst ToolbarSeparator = ({ className, ...props }: SeparatorProps) => {\n    const { orientation } = useSlottedContext(ToolbarContext)!\n    return (\n        <Separator\n            className={cn(\n                'bg-muted',\n                orientation === 'horizontal' ? 'mx-1.5 min-h-8 w-px' : ' my-1.5 h-px w-fit min-w-8',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nToolbar.Group = ToolbarGroup\nToolbar.Separator = ToolbarSeparator\nToolbar.Item = Toggle\n\nexport { Toolbar }\n"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\n\nimport { type ReactNode, createContext, use } from 'react'\n\nimport { IconChevronRight, IconDot, IconMinus, IconSlash } from 'hq-icons'\nimport type { BreadcrumbProps, BreadcrumbsProps, LinkProps } from 'react-aria-components'\nimport { Breadcrumb, Link, Breadcrumbs as RACBreadcrumbs, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ntype BreadcrumbsContextProps = {\n    separator?: 'chevron' | 'slash' | 'dash' | 'dot'\n}\n\nconst BreadcrumbsContext = createContext<BreadcrumbsContextProps>({\n    separator: 'chevron'\n})\n\nconst Breadcrumbs = <T extends object>({ className, ...props }: BreadcrumbsProps<T> & BreadcrumbsContextProps) => {\n    return (\n        <BreadcrumbsContext.Provider value={{ separator: props.separator }}>\n            <RACBreadcrumbs\n                {...props}\n                className={cn('flex items-center gap-1.5 **:data-[slot=icon]:size-3.5', className)}\n            />\n        </BreadcrumbsContext.Provider>\n    )\n}\n\ninterface BreadcrumbsItemProps extends BreadcrumbProps, Pick<LinkProps, 'href'> {\n    href?: string\n}\n\nconst BreadcrumbsItem = ({ href, className, ...props }: BreadcrumbsItemProps) => {\n    const { separator } = use(BreadcrumbsContext)\n\n    return (\n        <Breadcrumb\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn('inline-flex items-center gap-2 text-muted-fg text-sm data-current:text-fg', className)\n            )}\n        >\n            {(values) => (\n                <>\n                    {href ? (\n                        <Link\n                            href={href}\n                            className='inline-flex items-center gap-2 transition-colors hover:text-fg'\n                            {...props}\n                        />\n                    ) : (\n                        (props.children as ReactNode)\n                    )}\n                    {!values.isCurrent && <Separator separator={separator} />}\n                </>\n            )}\n        </Breadcrumb>\n    )\n}\n\nconst Separator = ({ separator = 'chevron' }: { separator?: BreadcrumbsContextProps['separator'] }) => {\n    return (\n        <span className='select-none *:text-muted-fg'>\n            {separator === 'chevron' && <IconChevronRight />}\n            {separator === 'slash' && <IconSlash />}\n            {separator === 'dash' && <IconMinus />}\n            {separator === 'dot' && <IconDot />}\n        </span>\n    )\n}\n\nBreadcrumbs.Item = BreadcrumbsItem\n\nexport { Breadcrumbs }\n"
  },
  "rich-text-field": {
    "component": "@/components/ui/rich-text-field",
    "raw": "'use client'\n\nimport { CodeHighlightNode, CodeNode } from '@lexical/code'\nimport {\n    IconBold,\n    IconHeading1,\n    IconHeading2,\n    IconHeading3,\n    IconItalic,\n    IconList,\n    IconListOrdered,\n    IconParagraph,\n    IconRedo,\n    IconStrikethrough,\n    IconSubscript,\n    IconSuperscript,\n    IconTextQuote,\n    IconUnderline,\n    IconUndo\n} from 'hq-icons'\nimport {\n    $createParagraphNode,\n    $getRoot,\n    $getSelection,\n    $insertNodes,\n    $isRangeSelection,\n    $isRootOrShadowRoot,\n    CAN_REDO_COMMAND,\n    CAN_UNDO_COMMAND,\n    COMMAND_PRIORITY_CRITICAL,\n    FORMAT_TEXT_COMMAND,\n    REDO_COMMAND,\n    SELECTION_CHANGE_COMMAND,\n    UNDO_COMMAND\n} from 'lexical'\nimport { useCallback, useEffect, useState } from 'react'\nimport { TextField, type ValidationResult } from 'react-aria-components'\n\nimport { $generateHtmlFromNodes, $generateNodesFromDOM } from '@lexical/html'\nimport { AutoLinkNode, LinkNode } from '@lexical/link'\nimport {\n    $isListNode,\n    INSERT_ORDERED_LIST_COMMAND,\n    INSERT_UNORDERED_LIST_COMMAND,\n    ListItemNode,\n    ListNode,\n    REMOVE_LIST_COMMAND\n} from '@lexical/list'\nimport { $convertToMarkdownString, TRANSFORMERS } from '@lexical/markdown'\nimport { type InitialConfigType, LexicalComposer } from '@lexical/react/LexicalComposer'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable'\nimport { LexicalErrorBoundary } from '@lexical/react/LexicalErrorBoundary'\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin'\nimport { LinkPlugin } from '@lexical/react/LexicalLinkPlugin'\nimport { ListPlugin } from '@lexical/react/LexicalListPlugin'\nimport { MarkdownShortcutPlugin } from '@lexical/react/LexicalMarkdownShortcutPlugin'\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin'\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin'\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin'\nimport type { HeadingTagType } from '@lexical/rich-text'\nimport { $createHeadingNode, $createQuoteNode, $isHeadingNode, HeadingNode, QuoteNode } from '@lexical/rich-text'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $findMatchingParent, $getNearestNodeOfType, mergeRegister } from '@lexical/utils'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from './button'\nimport { Description, FieldError, Label } from './form'\nimport { Menu } from './menu'\nimport { Toolbar } from './toolbar'\n\ninterface RichTextFieldProps {\n    className?: string\n    value?: string\n    onChange?: (value: string) => void\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    isDisabled?: boolean\n    returnType?: 'markdown' | 'html'\n    hideToolbar?: boolean\n    as?: 'rich-text' | 'plain-text'\n}\n\nconst RichTextField = ({\n    className,\n    label,\n    description,\n    errorMessage,\n    isDisabled = false,\n    returnType = 'html',\n    hideToolbar = false,\n    as = 'rich-text',\n    ...props\n}: RichTextFieldProps) => {\n    const config: InitialConfigType = {\n        editable: !isDisabled,\n        namespace: 'rich-text-field',\n        theme: {\n            text: {\n                strikethrough: 'line-through',\n                underline: 'underline'\n            }\n        },\n        nodes: [HeadingNode, ListNode, ListItemNode, QuoteNode, CodeNode, CodeHighlightNode, AutoLinkNode, LinkNode],\n        onError: (error) => {\n            console.error(error)\n        }\n    }\n\n    return (\n        <LexicalComposer initialConfig={config}>\n            <div>\n                <div className='relative'>\n                    {as === 'rich-text' ? (\n                        <RichTextPlugin\n                            placeholder={<p className='absolute bottom-2 left-3 text-muted-fg'>Write something...</p>}\n                            contentEditable={\n                                <TextField\n                                    aria-label='Editor'\n                                    id='parent'\n                                    className={cn('group relative flex flex-col gap-1', className)}\n                                >\n                                    {label && <Label>{label}</Label>}\n\n                                    {!hideToolbar && <ToolbarPlugin />}\n                                    <ContentEditable\n                                        autoFocus\n                                        aria-disabled={isDisabled}\n                                        disabled={isDisabled}\n                                        className={cn(\n                                            'min-h-32 w-full min-w-0 rounded-lg border bg-bg px-2.5 py-2 text-base outline-none transition focus:outline-none sm:text-sm',\n                                            'focus:border-primary/70 focus:ring-4 focus:ring-ring',\n                                            'invalid:border-danger invalid:ring-4 invalid:ring-invalid',\n                                            isDisabled ? 'opacity-50' : 'hover:border-primary/60 '\n                                        )}\n                                    />\n                                    {description && <Description>{description}</Description>}\n                                    <FieldError>{errorMessage}</FieldError>\n                                </TextField>\n                            }\n                            ErrorBoundary={LexicalErrorBoundary}\n                        />\n                    ) : (\n                        <PlainTextPlugin\n                            placeholder={<p className='absolute bottom-2 left-3 text-muted-fg'>Write something...</p>}\n                            contentEditable={\n                                <TextField\n                                    aria-label='Editor'\n                                    id='parent'\n                                    className={cn('group relative flex flex-col gap-1', className)}\n                                >\n                                    {label && <Label>{label}</Label>}\n\n                                    {!hideToolbar && <Toolbar />}\n                                    <ContentEditable\n                                        autoFocus\n                                        aria-disabled={isDisabled}\n                                        disabled={isDisabled}\n                                        className={cn(\n                                            'min-h-32 w-full min-w-0 rounded-lg border bg-bg px-2.5 py-2 text-base shadow-sm outline-none transition focus:outline-none sm:text-sm',\n                                            'focus:border-primary/70 focus:ring-4 focus:ring-primary/20',\n                                            'invalid:border-danger invalid:ring-4 invalid:ring-invalid',\n                                            isDisabled ? 'opacity-50' : 'hover:border-primary/60 '\n                                        )}\n                                    />\n                                    {description && <Description>{description}</Description>}\n                                    <FieldError>{errorMessage}</FieldError>\n                                </TextField>\n                            }\n                            ErrorBoundary={LexicalErrorBoundary}\n                        />\n                    )}\n                    <HistoryPlugin />\n                </div>\n                <ListPlugin />\n                <LinkPlugin />\n                {as === 'rich-text' && <MarkdownShortcutPlugin transformers={TRANSFORMERS} />}\n                <OnChange returnType={returnType} value={props.value} onChange={props.onChange} />\n            </div>\n        </LexicalComposer>\n    )\n}\n\ninterface OnChangeProps {\n    value?: string\n    onChange?: (value: string) => void\n    returnType: 'markdown' | 'html'\n}\n\nfunction OnChange({ value, onChange, returnType }: OnChangeProps) {\n    const [editor] = useLexicalComposerContext()\n    const [isFirstRender, setIsFirstRender] = useState(true)\n\n    useEffect(() => {\n        if (returnType === 'html') {\n            if (!value || !isFirstRender) return\n\n            setIsFirstRender(false)\n            editor.update(() => {\n                const currentHTML = $generateHtmlFromNodes(editor)\n                if (currentHTML !== value) {\n                    $getRoot().clear()\n                    const parser = new DOMParser()\n                    const dom = parser.parseFromString(value, 'text/html')\n                    const nodes = $generateNodesFromDOM(editor, dom)\n                    $insertNodes(nodes)\n                }\n            })\n        }\n    }, [editor, value, isFirstRender, returnType])\n\n    useEffect(() => {\n        setIsFirstRender(true)\n    }, [])\n\n    return (\n        <OnChangePlugin\n            onChange={(editorState) => {\n                editorState.read(() => {\n                    onChange?.(\n                        returnType === 'markdown'\n                            ? $convertToMarkdownString(TRANSFORMERS, undefined, true)\n                            : $generateHtmlFromNodes(editor)\n                    )\n                })\n            }}\n        />\n    )\n}\n\nfunction BlockTypeDropdown({ blockType }: { blockType: string }) {\n    const blockIcons = {\n        h1: <IconHeading1 />,\n        h2: <IconHeading2 />,\n        h3: <IconHeading3 />,\n        paragraph: <IconParagraph />,\n        bullet: <IconList />,\n        number: <IconListOrdered />,\n        quote: <IconTextQuote />\n    }\n    const [editor] = useLexicalComposerContext()\n\n    const formatHeading = (headingLevel: HeadingTagType) => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createHeadingNode(headingLevel))\n        })\n    }\n\n    const formatParagraph = () => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createParagraphNode())\n        })\n    }\n\n    const formatOrderedList = () => {\n        if (blockType !== 'number') {\n            editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined)\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined)\n        }\n    }\n\n    const formatUnorderedList = () => {\n        if (blockType !== 'bullet') {\n            editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined)\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined)\n        }\n    }\n\n    const formatQuote = () => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createQuoteNode())\n        })\n    }\n\n    return (\n        <Menu>\n            <Button isDisabled={!editor.isEditable()} variant='outline' size='sm' icon>\n                {blockIcons[blockType as keyof typeof blockIcons]}\n            </Button>\n            <Menu.Content selectionMode='single' aria-label='Block type' selectedKeys={[blockType]}>\n                <Menu.Item id='paragraph' onAction={formatParagraph}>\n                    <IconParagraph />\n                    <Menu.Label>Paragraph</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='h1' onAction={() => formatHeading('h1')}>\n                    <IconHeading1 />\n                    <Menu.Label>Heading 1</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='h2' onAction={() => formatHeading('h2')}>\n                    <IconHeading2 />\n                    <Menu.Label>Heading 2</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='h3' onAction={() => formatHeading('h3')}>\n                    <IconHeading3 />\n                    <Menu.Label>Heading 3</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='bullet' onAction={formatUnorderedList}>\n                    <IconList />\n                    <Menu.Label>Unordered List</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='number' onAction={formatOrderedList}>\n                    <IconListOrdered />\n                    <Menu.Label>Ordered List</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='quote' onAction={formatQuote}>\n                    <IconTextQuote />\n                    <Menu.Label>Quote</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nexport function ToolbarPlugin() {\n    const [editor] = useLexicalComposerContext()\n    const [formatText, setFormatText] = useState({\n        bold: false,\n        italic: false,\n        underline: false,\n        strikethrough: false,\n        subscript: false,\n        superscript: false\n    })\n    const [blockType, setBlockType] = useState<string>('paragraph')\n\n    const [canUndo, setCanUndo] = useState<boolean>(false)\n    const [canRedo, setCanRedo] = useState<boolean>(false)\n\n    const $updateToolbar = useCallback(() => {\n        const selection = $getSelection()\n        if ($isRangeSelection(selection)) {\n            setFormatText({\n                bold: selection.hasFormat('bold'),\n                italic: selection.hasFormat('italic'),\n                underline: selection.hasFormat('underline'),\n                strikethrough: selection.hasFormat('strikethrough'),\n                subscript: selection.hasFormat('subscript'),\n                superscript: selection.hasFormat('superscript')\n            })\n            const anchorNode = selection.anchor.getNode()\n\n            let element =\n                anchorNode.getKey() === 'root'\n                    ? anchorNode\n                    : $findMatchingParent(anchorNode, (e) => {\n                          const parent = e.getParent()\n                          return parent !== null && $isRootOrShadowRoot(parent)\n                      })\n\n            if (element === null) {\n                element = anchorNode.getTopLevelElementOrThrow()\n            }\n\n            const elementDOM = editor.getElementByKey(element.getKey())\n\n            if (elementDOM !== null) {\n                if ($isListNode(element)) {\n                    const parentList = $getNearestNodeOfType<ListNode>(anchorNode, ListNode)\n                    const type = parentList ? parentList.getListType() : element.getListType()\n                    setBlockType(type)\n                } else {\n                    const type = $isHeadingNode(element) ? element.getTag() : element.getType()\n                    setBlockType(type)\n                }\n            }\n        }\n    }, [editor])\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerCommand(\n                SELECTION_CHANGE_COMMAND,\n                () => {\n                    $updateToolbar()\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            ),\n            editor.registerUpdateListener(({ editorState }) => {\n                editorState.read(() => {\n                    $updateToolbar()\n                })\n            })\n        )\n    }, [editor, $updateToolbar])\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerCommand(\n                CAN_UNDO_COMMAND,\n                (payload) => {\n                    setCanUndo(payload)\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            ),\n            editor.registerCommand(\n                CAN_REDO_COMMAND,\n                (payload) => {\n                    setCanRedo(payload)\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            )\n        )\n    }, [editor])\n\n    return (\n        <Toolbar className='mb-2' aria-label='Toolbar'>\n            <Toolbar.Group icon aria-label='Formats'>\n                <BlockTypeDropdown blockType={blockType} />\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    isSelected={formatText.bold}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'bold')\n                    }}\n                >\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    isSelected={formatText.italic}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic')\n                    }}\n                >\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    isSelected={formatText.underline}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'underline')\n                    }}\n                >\n                    <IconUnderline />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    isSelected={formatText.strikethrough}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'strikethrough')\n                    }}\n                >\n                    <IconStrikethrough />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    isSelected={formatText.subscript}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'subscript')\n                    }}\n                >\n                    <IconSubscript />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    isSelected={formatText.superscript}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'superscript')\n                    }}\n                >\n                    <IconSuperscript />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Actions'>\n                <Toolbar.Item\n                    icon\n                    isDisabled={!canUndo || !editor.isEditable()}\n                    isSelected={false}\n                    onPress={() => editor.dispatchCommand(UNDO_COMMAND, undefined)}\n                >\n                    <IconUndo />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    icon\n                    isDisabled={!canRedo || !editor.isEditable()}\n                    isSelected={false}\n                    onPress={() => editor.dispatchCommand(REDO_COMMAND, undefined)}\n                >\n                    <IconRedo />\n                </Toolbar.Item>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n\nexport { RichTextField }\n"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "import type { ComponentPropsWithRef } from 'react'\n\nimport { cn } from '@/lib/utils'\n\ninterface NoteProps extends ComponentPropsWithRef<'div'> {\n    variant?: 'default' | 'danger' | 'outline'\n}\n\nconst Note = ({ variant = 'default', className, children, ...props }: NoteProps) => (\n    <div\n        className={cn(\n            'w-full overflow-hidden rounded-lg border p-4 backdrop-blur-2xl',\n            variant === 'default' && 'border-primary/30 bg-primary/10 text-primary',\n            variant === 'danger' && 'border-danger/30 bg-danger/10 text-danger',\n            variant === 'outline' && 'border-muted text-fg',\n            className\n        )}\n        {...props}\n    >\n        <div className='grid grid-cols-[auto_1fr] *:data-[slot=icon]:mr-3 *:data-[slot=icon]:size-5 *:data-[slot=icon]:shrink-0'>\n            {children}\n        </div>\n    </div>\n)\n\nconst NoteTitle = ({ className, ...props }: ComponentPropsWithRef<'h5'>) => (\n    <h5 className={cn('font-semibold tracking-tight first:col-span-full', className)} {...props} />\n)\n\nconst NoteDescription = ({ className, ...props }: ComponentPropsWithRef<'div'>) => (\n    <p className={cn('col-start-2 mt-1 text-muted-fg text-sm leading-relaxed', className)} {...props} />\n)\n\nNote.Title = NoteTitle\nNote.Description = NoteDescription\n\nexport { Note }\n"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport type { Ref } from 'react'\n\nimport { IconLoaderCircle } from 'hq-icons'\nimport { Button as RACButton, composeRenderProps } from 'react-aria-components'\nimport type { ButtonProps as RACButtonProps } from 'react-aria-components'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nconst buttonStyle = tv({\n    base: [\n        'inline-flex items-center justify-center gap-2 whitespace-nowrap font-medium text-sm outline-hidden transition-[box-shadow,opacity,color]',\n        '**:[svg]:pointer-events-none **:[svg]:shrink-0',\n        'focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-ring',\n        'cursor-pointer disabled:pointer-events-none disabled:opacity-50'\n    ],\n    variants: {\n        variant: {\n            primary: 'bg-primary pressed:bg-primary/95 text-primary-fg shadow-xs hover:bg-primary/90',\n            danger: 'bg-danger text-white shadow-xs hover:bg-danger/90 focus-visible:ring-danger/25',\n            outline: 'border bg-bg pressed:bg-muted/50 text-fg shadow-xs hover:bg-muted/40',\n            secondary: 'bg-secondary text-secondary-fg shadow-xs hover:bg-secondary/80',\n            ghost: 'pressed:bg-muted/50 hover:bg-muted/40'\n        },\n        size: {\n            xs: 'gap-x-1.5 px-2 text-xs [--height:theme(spacing.6)] [--width:auto] **:[svg]:size-3.5',\n            sm: 'gap-x-1.5 px-3 text-sm [--height:theme(spacing.8)] [--width:auto] **:[svg]:size-4',\n            md: 'gap-x-2 px-4 text-sm [--height:theme(spacing.9)] [--width:auto] **:[svg]:size-4',\n            lg: 'gap-x-2.5 px-5 text-base [--height:theme(spacing.10)] [--width:auto] **:[svg]:size-5'\n        },\n        icon: {\n            true: 'h-(--height) w-(--height) shrink-0 px-0',\n            false: 'h-(--height) w-(--width)'\n        },\n        shape: {\n            square: 'rounded-md',\n            circle: 'rounded-full'\n        },\n        isPending: {\n            true: 'pointer-events-none cursor-default opacity-50 *:data-[slot=icon]:hidden'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        size: 'md',\n        shape: 'square'\n    }\n})\n\ninterface ButtonProps extends RACButtonProps, VariantProps<typeof buttonStyle> {\n    ref?: Ref<HTMLButtonElement>\n    isPending?: boolean\n}\n\nconst Button = ({ className, children, variant, size, icon, isPending, ...props }: ButtonProps) => (\n    <RACButton\n        className={composeRenderProps(className, (className) =>\n            buttonStyle({ variant, size, icon, isPending, className })\n        )}\n        {...props}\n    >\n        {(values) => (\n            <>\n                {isPending && <IconLoaderCircle data-slot='loader' className='animate-spin' />}\n                {typeof children === 'function' ? children(values) : children}\n            </>\n        )}\n    </RACButton>\n)\n\nexport { Button, buttonStyle }\n"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "'use client'\n\nimport type { ReactNode } from 'react'\n\nimport type { Placement } from '@react-types/overlays'\nimport type { ColorPickerProps as RACColorPickerProps } from 'react-aria-components'\nimport { Button, ColorPicker as RACColorPicker } from 'react-aria-components'\n\nimport { ColorArea } from './color-area'\nimport { ColorField } from './color-field'\nimport { ColorSlider } from './color-slider'\nimport { ColorSwatch } from './color-swatch'\nimport { Description, Label } from './form'\nimport { Popover, PopoverContent } from './popover'\n\nexport interface ColorPickerProps extends RACColorPickerProps {\n    label?: string\n    children?: ReactNode\n    showArrow?: boolean\n    isDisabled?: boolean\n    placement?: Placement\n    description?: string\n    trigger?: ReactNode\n}\n\nconst ColorPicker = ({\n    showArrow = false,\n    placement = 'bottom start',\n    label,\n    isDisabled,\n    children,\n    description,\n    ...props\n}: ColorPickerProps) => {\n    return (\n        <div className='group/field flex flex-col gap-y-2'>\n            <RACColorPicker {...props}>\n                <Popover>\n                    <Button isDisabled={isDisabled} className='flex cursor-pointer items-center gap-2 outline-hidden'>\n                        {props.trigger ?? (\n                            <>\n                                <ColorSwatch className='size-6' />\n                                {label && <Label className='ml-2'>{label}</Label>}\n                            </>\n                        )}\n                    </Button>\n                    <PopoverContent showArrow={showArrow} placement={placement}>\n                        <Popover.Body className='space-y-2 overflow-visible pb-4 sm:py-4'>\n                            {children || (\n                                <>\n                                    <ColorArea\n                                        className='w-full'\n                                        colorSpace='hsb'\n                                        xChannel='saturation'\n                                        yChannel='brightness'\n                                    />\n                                    <ColorSlider showOutput={false} colorSpace='hsb' channel='hue' />\n                                    <ColorField aria-label='Hex' />\n                                </>\n                            )}\n                        </Popover.Body>\n                    </PopoverContent>\n                </Popover>\n            </RACColorPicker>\n            {description && <Description>{description}</Description>}\n        </div>\n    )\n}\n\nexport { ColorPicker }\n"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport { IconChevronDown, IconMenu } from 'hq-icons'\nimport { type ReactNode, type Ref, createContext, useContext } from 'react'\nimport type {\n    CellProps,\n    ColumnProps,\n    ColumnResizerProps,\n    TableHeaderProps as HeaderProps,\n    TableProps as RACTableProps,\n    RowProps,\n    TableBodyProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Cell,\n    Collection,\n    Column,\n    ColumnResizer as RACColumnResizer,\n    Table as RACTable,\n    TableBody as RACTableBody,\n    TableHeader as RACTableHeader,\n    ResizableTableContainer,\n    Row,\n    composeRenderProps,\n    useTableOptions\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { Checkbox } from './checkbox'\n\ninterface TableProps extends RACTableProps {\n    className?: string\n    allowResize?: boolean\n}\n\nconst TableContext = createContext<TableProps>({\n    allowResize: false\n})\n\nconst useTableContext = () => useContext(TableContext)\n\nconst Table = ({ className, ...props }: TableProps) => {\n    const renderTable = (\n        <RACTable\n            className={cn('w-full min-w-full caption-bottom border-spacing-0 text-sm outline-hidden', className)}\n            {...props}\n        />\n    )\n    return (\n        <TableContext.Provider value={props}>\n            <div slot='table' className='relative w-full overflow-auto rounded-lg border'>\n                {props.allowResize ? (\n                    <ResizableTableContainer className='overflow-auto'>{renderTable}</ResizableTableContainer>\n                ) : (\n                    renderTable\n                )}\n            </div>\n        </TableContext.Provider>\n    )\n}\n\ninterface TableHeaderProps<T extends object> extends HeaderProps<T> {\n    className?: string\n    ref?: Ref<HTMLTableSectionElement>\n}\n\nconst TableHeader = <T extends object>({ children, ref, className, columns, ...props }: TableHeaderProps<T>) => {\n    const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n    return (\n        <RACTableHeader ref={ref} className={cn('border-b bg-primary/10 text-fg', className)} {...props}>\n            {allowsDragging && <Column className='w-0' />}\n            {selectionBehavior === 'toggle' && (\n                <Column className='w-0 pl-4'>{selectionMode === 'multiple' && <Checkbox slot='selection' />}</Column>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </RACTableHeader>\n    )\n}\n\nconst ColumnResizer = ({ className, ...props }: ColumnResizerProps) => (\n    <RACColumnResizer\n        {...props}\n        className={composeRenderProps(className, (className, { isResizing, resizableDirection }) =>\n            cn(\n                'absolute top-0 right-0 bottom-0 w-px touch-none px-1.5',\n                resizableDirection === 'left' && 'cursor-w-resize',\n                resizableDirection === 'right' && 'cursor-e-resize',\n                resizableDirection === 'both' && 'cursor-ew-resize',\n                isResizing ? '*:bg-primary' : '*:bg-muted',\n                className\n            )\n        )}\n    >\n        <div className='h-full w-px' />\n    </RACColumnResizer>\n)\n\nconst TableBody = <T extends object>(props: TableBodyProps<T>) => (\n    <RACTableBody\n        {...props}\n        className={cn(\n            '**:data-drop-target:py-2 **:data-drop-target:outline **:data-drop-target:outline-primary',\n            props.className\n        )}\n    />\n)\n\ninterface TableCellProps extends CellProps {\n    className?: string\n}\n\nconst TableCell = ({ children, className, ...props }: TableCellProps) => {\n    const { allowResize } = useTableContext()\n    return (\n        <Cell\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group whitespace-nowrap px-3 py-3 outline-hidden',\n                    'first:pl-6 last:pr-6',\n                    allowResize && 'overflow-hidden truncate',\n                    className\n                )\n            )}\n        >\n            {children}\n        </Cell>\n    )\n}\n\ninterface TableColumnProps extends ColumnProps {\n    className?: string\n    isResizable?: boolean\n}\n\nconst TableColumn = ({ isResizable = false, className, ...props }: TableColumnProps) => {\n    return (\n        <Column\n            {...props}\n            className={composeRenderProps(className, (className, { isResizing, allowsSorting }) =>\n                cn(\n                    'relative whitespace-nowrap p-3 text-left font-medium outline-hidden first:pl-6 last:pr-6 **:has-[slot=selection]:pr-0',\n                    isResizable && 'overflow-hidden truncate',\n                    isResizing && 'cursor-grabbing',\n                    allowsSorting && 'cursor-pointer',\n                    className\n                )\n            )}\n        >\n            {({ allowsSorting, sortDirection, isHovered }) => (\n                <div className='flex items-center gap-2'>\n                    <>\n                        {props.children as ReactNode}\n                        {allowsSorting && (\n                            <IconChevronDown\n                                className={cn(\n                                    'size-3.5 shrink-0 text-muted-fg transition-transform',\n                                    sortDirection === 'ascending' ? '-rotate-180' : '',\n                                    isHovered && 'text-primary'\n                                )}\n                            />\n                        )}\n                        {isResizable && <ColumnResizer />}\n                    </>\n                </div>\n            )}\n        </Column>\n    )\n}\n\ninterface TableRowProps<T extends object> extends RowProps<T> {\n    className?: string\n    ref?: Ref<HTMLTableRowElement>\n}\n\nconst TableRow = <T extends object>({ children, className, columns, id, ref, ...props }: TableRowProps<T>) => {\n    const { selectionBehavior, allowsDragging } = useTableOptions()\n    return (\n        <Row\n            ref={ref}\n            id={id}\n            className={composeRenderProps(\n                className,\n                (className, { isSelected, isHovered, isFocusVisible, isDisabled, isFocusVisibleWithin }) =>\n                    cn(\n                        'group relative cursor-default not-last:border-b',\n                        'href' in props && 'cursor-pointer',\n                        isSelected && 'bg-primary/15 text-primary',\n                        isHovered && 'bg-primary/10 text-primary',\n                        {\n                            'bg-primary/15 text-primary outline outline-primary': isFocusVisible || isFocusVisibleWithin\n                        },\n                        isDisabled && 'pointer-events-none opacity-50',\n                        className\n                    )\n            )}\n            {...props}\n        >\n            {allowsDragging && (\n                <Cell className='cursor-grab pr-0 outline-primary data-dragging:cursor-grabbing'>\n                    <Button className='py-1.5 pl-3.5' slot='drag'>\n                        <IconMenu />\n                    </Button>\n                </Cell>\n            )}\n            {selectionBehavior === 'toggle' && (\n                <Cell className='pl-4'>\n                    <span\n                        aria-hidden\n                        className='absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary/70 group-selected:block'\n                    />\n                    <Checkbox slot='selection' />\n                </Cell>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </Row>\n    )\n}\n\nTable.Body = TableBody\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Header = TableHeader\nTable.Row = TableRow\n\nexport { Table }\nexport type { TableBodyProps, TableCellProps, TableColumnProps, TableProps, TableRowProps }\n"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\n\nimport {\n    type ComponentPropsWithRef,\n    type KeyboardEvent,\n    createContext,\n    use,\n    useCallback,\n    useEffect,\n    useState\n} from 'react'\n\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport { IconChevronLeft, IconChevronRight } from 'hq-icons'\nimport type { ListBoxItemProps, ListBoxSectionProps } from 'react-aria-components'\nimport { Button, ListBox, ListBoxItem, ListBoxSection, composeRenderProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselContextProps = {\n    carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n    api: ReturnType<typeof useEmblaCarousel>[1]\n    scrollPrev: () => void\n    scrollNext: () => void\n    canScrollPrev: boolean\n    canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = createContext<CarouselContextProps | null>(null)\n\nconst useCarousel = () => {\n    const context = use(CarouselContext)\n\n    if (!context) {\n        throw new Error('useCarousel must be used within a <Carousel />')\n    }\n\n    return context\n}\n\ninterface CarouselRootProps {\n    CarouselContent?: typeof CarouselContent\n    CarouselHandler?: typeof CarouselHandler\n    CarouselItem?: typeof CarouselItem\n}\n\ninterface CarouselProps extends CarouselRootProps, ComponentPropsWithRef<'div'> {\n    opts?: CarouselOptions\n    plugins?: CarouselPlugin\n    orientation?: 'horizontal' | 'vertical'\n    setApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = ({\n    orientation = 'horizontal',\n    opts,\n    setApi,\n    plugins,\n    className,\n    children,\n    ...props\n}: CarouselProps) => {\n    const [carouselRef, api] = useEmblaCarousel(\n        {\n            ...opts,\n            axis: orientation === 'horizontal' ? 'x' : 'y'\n        },\n        plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = useState(false)\n    const [canScrollNext, setCanScrollNext] = useState(false)\n\n    const onSelect = useCallback((api: CarouselApi) => {\n        if (!api) {\n            return\n        }\n\n        setCanScrollPrev(api.canScrollPrev())\n        setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = useCallback(() => {\n        api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = useCallback(() => {\n        api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = useCallback(\n        (event: KeyboardEvent<HTMLDivElement>) => {\n            if (event.key === 'ArrowLeft') {\n                event.preventDefault()\n                scrollPrev()\n            } else if (event.key === 'ArrowRight') {\n                event.preventDefault()\n                scrollNext()\n            }\n        },\n        [scrollPrev, scrollNext]\n    )\n\n    useEffect(() => {\n        if (!api || !setApi) {\n            return\n        }\n\n        setApi(api)\n    }, [api, setApi])\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        onSelect(api)\n        api.on('reInit', onSelect)\n        api.on('select', onSelect)\n\n        return () => {\n            api?.off('select', onSelect)\n        }\n    }, [api, onSelect])\n\n    return (\n        <CarouselContext.Provider\n            value={{\n                carouselRef,\n                api: api,\n                opts,\n                orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n                scrollPrev,\n                scrollNext,\n                canScrollPrev,\n                canScrollNext\n            }}\n        >\n            <div onKeyDownCapture={handleKeyDown} className={cn('relative', className)} role='region' {...props}>\n                {children}\n            </div>\n        </CarouselContext.Provider>\n    )\n}\n\nconst CarouselContent = <T extends object>({ className, ...props }: ListBoxSectionProps<T>) => {\n    const { carouselRef, orientation } = useCarousel()\n\n    return (\n        <ListBox\n            layout={orientation === 'vertical' ? 'stack' : 'grid'}\n            aria-label='Slides'\n            orientation={orientation}\n            ref={carouselRef}\n            className='overflow-hidden'\n        >\n            <ListBoxSection\n                className={cn('flex', orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col', className)}\n                {...props}\n            />\n        </ListBox>\n    )\n}\n\nconst CarouselItem = ({ className, ...props }: ListBoxItemProps) => {\n    const { orientation } = useCarousel()\n\n    return (\n        <ListBoxItem\n            aria-label={`Slide ${props.id}`}\n            className={composeRenderProps(className, (className) =>\n                cn(\n                    'group relative min-w-0 shrink-0 grow-0 basis-full outline-hidden',\n                    orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n                    className\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CarouselHandler = ({ className, ...props }: ComponentPropsWithRef<'div'>) => {\n    const { orientation, scrollPrev, canScrollPrev, scrollNext, canScrollNext } = useCarousel()\n    return (\n        <div\n            slot='carousel-handler'\n            className={cn(\n                'relative z-10 my-4 flex items-center gap-x-2',\n                orientation === 'horizontal' ? 'justify-end' : 'justify-center',\n                className\n            )}\n            {...props}\n        >\n            <Button\n                aria-label='Previous Slide'\n                data-handler='previous'\n                className='inline-flex size-7 shrink-0 orientation-vertical:rotate-90 items-center justify-center rounded-md border border-muted/40 bg-bg pressed:bg-muted/50 text-muted-fg shadow-sm outline-hidden hover:bg-muted/40 focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50'\n                isDisabled={!canScrollPrev}\n                onPress={scrollPrev}\n            >\n                <IconChevronLeft />\n            </Button>\n            <Button\n                aria-label='Next Slide'\n                data-handler='next'\n                className='inline-flex size-7 shrink-0 orientation-vertical:rotate-90 items-center justify-center rounded-md border border-muted/40 bg-bg pressed:bg-muted/50 text-muted-fg shadow-sm outline-hidden hover:bg-muted/40 focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50'\n                isDisabled={!canScrollNext}\n                onPress={scrollNext}\n            >\n                <IconChevronRight />\n            </Button>\n        </div>\n    )\n}\n\nCarousel.Content = CarouselContent\nCarousel.Handler = CarouselHandler\nCarousel.Item = CarouselItem\n\nexport { Carousel }\nexport type { CarouselApi }\n"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "'use client'\n\nimport type { ComponentPropsWithRef } from 'react'\n\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeStyle = tv({\n    base: 'inline-flex w-fit shrink-0 items-center justify-center gap-1 overflow-hidden whitespace-nowrap rounded-md border px-2 py-0.5 font-medium text-xs transition-[color,box-shadow] invalid:border-danger invalid:ring-invalid focus-visible:border-ring focus-visible:ring-4 focus-visible:ring-ring *:[svg]:pointer-events-none *:[svg]:size-3',\n    variants: {\n        variant: {\n            primary: 'border-transparent bg-primary text-primary-fg [a&]:hover:bg-primary/90',\n            secondary: 'border-transparent bg-secondary text-secondary-fg [a&]:hover:bg-secondary/90',\n            danger: 'border-transparent bg-danger text-white focus-visible:ring-invalid dark:bg-danger/60 dark:focus-visible:ring-danger/40 [a&]:hover:bg-danger/90',\n            outline: 'text-fg [a&]:hover:bg-muted [a&]:hover:text-muted-fg'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary'\n    }\n})\n\nconst Badge = ({ className, variant, ...props }: ComponentPropsWithRef<'span'> & VariantProps<typeof badgeStyle>) => (\n    <span data-badge className={cn(badgeStyle({ variant }), className)} {...props} />\n)\n\nexport { Badge, badgeStyle }\n"
  },
  "user": {
    "component": "@/components/ui/user",
    "raw": "'use client'\n\nimport { Avatar, type AvatarProps } from './avatar'\n\ninterface UserProps extends Omit<AvatarProps, 'size'> {\n    name: string\n    description?: string\n    size?: 'md' | 'lg' | 'xl'\n}\n\nconst User = ({ name, description, size = 'lg', ...props }: UserProps) => {\n    const sizes: { avatar: 'lg' | 'md' | 'xl'; name: string; description: string } = {\n        avatar: 'lg',\n        name: 'text-sm',\n        description: 'text-xs'\n    }\n    switch (size) {\n        case 'md':\n            sizes.avatar = 'md'\n            sizes.name = 'text-sm'\n            sizes.description = 'text-xs'\n            break\n        case 'xl':\n            sizes.avatar = 'xl'\n            sizes.name = 'text-base'\n            sizes.description = 'text-sm'\n            break\n        default:\n            sizes.avatar = 'lg'\n            sizes.name = 'text-sm'\n            sizes.description = 'text-xs'\n            break\n    }\n    return (\n        <div className='inline-flex items-center justify-center gap-2 rounded-xl outline-none'>\n            <Avatar {...props} size={sizes.avatar} />\n            <div data-user={true} className='inline-flex flex-col items-start'>\n                <span className={`font-medium text-inherit ${sizes.name}`}>{name}</span>\n                {description && <span className={`text-muted-fg ${sizes.description}`}>{description}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport { User }\n"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport type { ReactNode, Ref } from 'react'\nimport {\n    TimeField as RACTimeField,\n    type TimeFieldProps as RACTimeFieldProps,\n    type TimeValue,\n    composeRenderProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, type FieldProps, Label } from './form'\n\ninterface TimeFieldProps<T extends TimeValue> extends RACTimeFieldProps<T>, FieldProps {\n    prefix?: ReactNode\n    suffix?: ReactNode\n    ref?: Ref<HTMLDivElement>\n}\n\nconst TimeField = <T extends TimeValue>({\n    prefix,\n    suffix,\n    label,\n    className,\n    description,\n    errorMessage,\n    ref,\n    ...props\n}: TimeFieldProps<T>) => {\n    return (\n        <RACTimeField\n            isInvalid={props.isInvalid || !!errorMessage}\n            className={composeRenderProps(className, (className) =>\n                cn('group/field flex flex-col gap-y-1.5', className)\n            )}\n            ref={ref}\n            {...props}\n        >\n            {({ isInvalid, isDisabled }) => (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup>\n                        {prefix ? <span data-prefix={true}>{prefix}</span> : null}\n                        <DateInput className='flex w-fit min-w-28 justify-around whitespace-nowrap p-2 sm:text-sm' />\n                        {suffix ? <span data-suffix={true}>{suffix}</span> : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            )}\n        </RACTimeField>\n    )\n}\n\nexport { TimeField }\n"
  }
}