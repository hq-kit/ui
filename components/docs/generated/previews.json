{
  "pickers/combo-box/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-avatar-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nexport default function ComboBoxAvatarDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users} isRequired>\n            {(item) => (\n                <ComboBox.Item id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/combo-box/combo-box-validation-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-validation-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, ComboBox, Form } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()} className='space-y-2'>\n            <ComboBox placeholder='Select a user' label='Users' items={users} isRequired>\n                {(item) => (\n                    <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                        <Avatar src={item.image_url} />\n                        {item.name}\n                    </ComboBox.Item>\n                )}\n            </ComboBox>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-section-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-section-demo",
    "raw": "'use client'\n\nimport { ComboBox } from '@/components/ui'\n\nexport default function ComboBoxSectionDemo() {\n    return (\n        <ComboBox placeholder='Select a author' label='Authors' selectedKey={1} items={movies}>\n            {(movie) => (\n                <ComboBox.Section title={movie.title} items={movie.genres}>\n                    {(genre) => <ComboBox.Item textValue={genre.name}>{genre.name}</ComboBox.Item>}\n                </ComboBox.Section>\n            )}\n        </ComboBox>\n    )\n}\n\nconst movies = [\n    {\n        id: 1,\n        title: 'Inception',\n        genres: [\n            {\n                id: 101,\n                name: 'Sci-Fi'\n            },\n            {\n                id: 102,\n                name: 'Thriller'\n            }\n        ]\n    },\n    {\n        id: 2,\n        title: 'Titanic',\n        genres: [\n            {\n                id: 201,\n                name: 'Romance'\n            },\n            {\n                id: 202,\n                name: 'Drama'\n            }\n        ]\n    },\n    {\n        id: 3,\n        title: 'The Matrix',\n        genres: [\n            {\n                id: 301,\n                name: 'Action'\n            },\n            {\n                id: 302,\n                name: 'Sci-Fi'\n            }\n        ]\n    },\n    {\n        id: 4,\n        title: 'Gladiator',\n        genres: [\n            {\n                id: 401,\n                name: 'Action'\n            },\n            {\n                id: 402,\n                name: 'Drama'\n            }\n        ]\n    },\n    {\n        id: 5,\n        title: 'Casablanca',\n        genres: [\n            {\n                id: 501,\n                name: 'Romance'\n            },\n            {\n                id: 502,\n                name: 'Drama'\n            }\n        ]\n    }\n]\n"
  },
  "pickers/combo-box/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-disabled-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nexport default function ComboBoxDisabledDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users} isDisabled>\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\n"
  },
  "pickers/combo-box/combo-box-controlled-selection-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-controlled-selection-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { ComboBox, Description } from '@/components/ui'\n\nexport default function ComboBoxControlledSelectionDemo() {\n    const [country, setCountry] = React.useState<Key | null>(null)\n    return (\n        <>\n            <ComboBox\n                label='Country'\n                placeholder='Country'\n                onSelectionChange={setCountry}\n                selectedKey={country}\n                items={countries}\n            >\n                {(item) => <ComboBox.Item id={item.id}>{item.name}</ComboBox.Item>}\n            </ComboBox>\n\n            <Description className='[&>strong]:text-fg text-muted-fg mt-2 block'>\n                You have selected: <strong>{country}</strong>\n            </Description>\n        </>\n    )\n}\n\nconst countries = [\n    { id: 1, name: 'Argentina' },\n    { id: 2, name: 'Australia' },\n    { id: 3, name: 'Austria' },\n    { id: 4, name: 'Belgium' },\n    { id: 5, name: 'Brazil' },\n    { id: 6, name: 'Canada' },\n    { id: 7, name: 'China' },\n    { id: 8, name: 'Denmark' },\n    { id: 9, name: 'France' },\n    { id: 10, name: 'Germany' },\n    { id: 11, name: 'India' },\n    { id: 12, name: 'Italy' },\n    { id: 13, name: 'Japan' },\n    { id: 14, name: 'Mexico' },\n    { id: 15, name: 'Netherlands' },\n    { id: 16, name: 'New Zealand' },\n    { id: 17, name: 'Norway' },\n    { id: 18, name: 'South Korea' },\n    { id: 19, name: 'Sweden' },\n    { id: 20, name: 'United Kingdom' },\n    { id: 21, name: 'United States' }\n]\n"
  },
  "pickers/combo-box/combo-box-controlled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ComboBox, Description } from '@/components/ui'\n\nconst sports = [\n    { id: 1, name: 'Football' },\n    { id: 2, name: 'Basketball' },\n    { id: 3, name: 'Baseball' },\n    { id: 4, name: 'Soccer' },\n    { id: 5, name: 'Tennis' },\n    { id: 6, name: 'Cricket' },\n    { id: 7, name: 'Hockey' },\n    { id: 8, name: 'Rugby' },\n    { id: 9, name: 'Golf' }\n]\n\nexport default function ComboBoxControlledDemo() {\n    const [sport, setSport] = React.useState('')\n    return (\n        <>\n            <ComboBox\n                onInputChange={setSport}\n                inputValue={sport}\n                placeholder='Select a sports'\n                label='Sports'\n                items={sports}\n            >\n                {(item) => (\n                    <ComboBox.Item id={item.id} textValue={item.name}>\n                        {item.name}\n                    </ComboBox.Item>\n                )}\n            </ComboBox>\n            <Description className='[&>strong]:text-fg text-muted-fg mt-2 block'>\n                You have selected: <strong>{sport}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-demo",
    "raw": "'use client'\n\nimport { ComboBox } from '@/components/ui'\n\nexport default function ComboBoxDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users}>\n            {(item) => (\n                <ComboBox.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "pickers/combo-box/combo-box-readonly-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-readonly-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxReadonlyDemo() {\n    return (\n        <ComboBox\n            defaultSelectedKey={1}\n            placeholder='Select a user'\n            label='Users'\n            items={users}\n            isReadOnly\n        >\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/combo-box/combo-box-invalid-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-invalid-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxInvalidDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' items={users} isInvalid>\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-variant-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-variant-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport type { SelectedKey } from '@/components/ui'\nimport { MultiSelect } from '@/components/ui'\n\nexport default function MultiSelectVariantDemo() {\n    const selectedItems = useListData<SelectedKey>({\n        initialItems: [fruits[0]!]\n    })\n    return (\n        <MultiSelect\n            className='max-w-xs'\n            variant='secondary'\n            label='Fruits'\n            selectedItems={selectedItems}\n            items={fruits}\n            tag={(item) => <MultiSelect.Tag textValue={item.name}>{item.name}</MultiSelect.Tag>}\n        >\n            {(item) => {\n                return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n            }}\n        </MultiSelect>\n    )\n}\n\nconst fruits: SelectedKey[] = [\n    { id: 1, name: 'Apple' },\n    { id: 2, name: 'Banana' },\n    { id: 3, name: 'Cherry' },\n    { id: 7, name: 'Grape' },\n    { id: 8, name: 'Honeydew' },\n    { id: 9, name: 'Kiwi' },\n    { id: 10, name: 'Lemon' },\n    { id: 11, name: 'Mango' },\n    { id: 12, name: 'Nectarine' },\n    { id: 13, name: 'Orange' },\n    { id: 14, name: 'Papaya' },\n    { id: 15, name: 'Quince' },\n    { id: 16, name: 'Raspberry' },\n    { id: 17, name: 'Strawberry' },\n    { id: 18, name: 'Tangerine' },\n    { id: 19, name: 'Ugli Fruit' },\n    { id: 20, name: 'Watermelon' }\n]\n"
  },
  "pickers/multi-select/multi-select-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport type { SelectedKey } from '@/components/ui'\nimport { MultiSelect } from '@/components/ui'\n\nexport default function MultiSelectDemo() {\n    const selectedItems = useListData<SelectedKey>({\n        initialItems: [fruits[0], fruits[1]]\n    })\n    return (\n        <MultiSelect\n            className='max-w-xs'\n            label='Fruits'\n            selectedItems={selectedItems}\n            items={fruits}\n            tag={(item) => <MultiSelect.Tag textValue={item.name}>{item.name}</MultiSelect.Tag>}\n        >\n            {(item) => {\n                return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n            }}\n        </MultiSelect>\n    )\n}\n\nconst fruits = [\n    { id: 1, name: 'Apple' },\n    { id: 2, name: 'Banana' },\n    { id: 3, name: 'Cherry' },\n    { id: 4, name: 'Date' },\n    { id: 5, name: 'Elderberry' },\n    { id: 6, name: 'Fig' },\n    { id: 7, name: 'Grape' },\n    { id: 8, name: 'Honeydew' },\n    { id: 9, name: 'Kiwi' },\n    { id: 10, name: 'Lemon' },\n    { id: 11, name: 'Mango' },\n    { id: 12, name: 'Nectarine' },\n    { id: 13, name: 'Orange' },\n    { id: 14, name: 'Papaya' },\n    { id: 15, name: 'Quince' },\n    { id: 16, name: 'Raspberry' },\n    { id: 17, name: 'Strawberry' },\n    { id: 18, name: 'Tangerine' },\n    { id: 19, name: 'Ugli Fruit' },\n    { id: 20, name: 'Watermelon' }\n] as const satisfies SelectedKey[]\n"
  },
  "pickers/multi-select/multi-select-controlled-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-controlled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport type { SelectedKey } from '@/components/ui'\nimport { Description, MultiSelect } from '@/components/ui'\n\nconst tags = [\n    { id: 1, name: 'Travel' },\n    { id: 2, name: 'Food' },\n    { id: 3, name: 'Fashion' },\n    { id: 4, name: 'Music' },\n    { id: 5, name: 'Photography' }\n]\n\nexport default function MultiSelectControlledDemo() {\n    const selectedItems = useListData<SelectedKey>({\n        initialItems: []\n    })\n\n    return (\n        <>\n            <MultiSelect\n                className='max-w-xs'\n                onItemInserted={(key) => console.info('onItemInserted', key)}\n                onItemCleared={(key) => console.info('onItemCleared', key)}\n                label='Select tags'\n                selectedItems={selectedItems}\n                items={tags}\n                tag={(item) => <MultiSelect.Tag textValue={item.name}>{item.name}</MultiSelect.Tag>}\n            >\n                {(item) => {\n                    return (\n                        <MultiSelect.Item id={item.id} textValue={item.name}>\n                            {item.name}\n                        </MultiSelect.Item>\n                    )\n                }}\n            </MultiSelect>\n            {selectedItems.items.length > 0 && (\n                <Description className='text-muted-fg [&>strong]:text-fg mt-2 block max-w-xs'>\n                    You have selected:{' '}\n                    <strong>{selectedItems.items.map((item) => item.name).join(', ')}</strong>\n                </Description>\n            )}\n        </>\n    )\n}\n"
  },
  "pickers/multi-select/multi-select-disabled-demo": {
    "component": "@/components/docs/pickers/multi-select/multi-select-disabled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport type { SelectedKey } from '@/components/ui'\nimport { MultiSelect } from '@/components/ui'\n\nexport default function MultiSelectDisabledDemo() {\n    const selectedItems = useListData<SelectedKey>({\n        initialItems: []\n    })\n    return (\n        <MultiSelect\n            isDisabled\n            className='max-w-xs'\n            label='Fruits'\n            selectedItems={selectedItems}\n            items={fruits}\n            tag={(item) => <MultiSelect.Tag textValue={item.name}>{item.name}</MultiSelect.Tag>}\n        >\n            {(item) => {\n                return <MultiSelect.Item textValue={item.name}>{item.name}</MultiSelect.Item>\n            }}\n        </MultiSelect>\n    )\n}\n\nconst fruits: SelectedKey[] = [{ id: 1, name: 'Apple' }]\n"
  },
  "pickers/select/select-demo": {
    "component": "@/components/docs/pickers/select/select-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport const software = [\n    { id: 1, name: 'Adobe Photoshop' },\n    { id: 2, name: 'Sketch' },\n    { id: 3, name: 'Figma' },\n    { id: 4, name: 'Adobe XD' },\n    { id: 5, name: 'InVision' }\n]\nexport default function SelectDemo() {\n    return (\n        <Select label='Design software' placeholder='Select a software' items={software}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-item-details-demo": {
    "component": "@/components/docs/pickers/select/select-item-details-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectItemDetailsDemo() {\n    return (\n        <Select label='Roles' placeholder='Select a role' items={roles}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <Select.ItemDetails label={item.name} description={item.description} />\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n"
  },
  "pickers/select/select-disabled-demo": {
    "component": "@/components/docs/pickers/select/select-disabled-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nconst software = [\n    { id: 1, name: 'Adobe Photoshop' }\n    //...\n]\n\nexport default function SelectDisabledDemo() {\n    return (\n        <Select label='Design software' isDisabled placeholder='Select a software' items={software}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-validation-demo": {
    "component": "@/components/docs/pickers/select/select-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, Select } from '@/components/ui'\n\nconst software = [\n    { id: 1, name: 'Adobe Photoshop' }\n    //...\n]\n\nexport default function SelectValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()} className='space-y-2'>\n            <Select\n                label='Design software'\n                placeholder='Select a software'\n                items={software}\n                isRequired\n            >\n                {(item) => (\n                    <Select.Item id={item.id} textValue={item.name}>\n                        {item.name}\n                    </Select.Item>\n                )}\n            </Select>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "pickers/select/select-with-icon-demo": {
    "component": "@/components/docs/pickers/select/select-with-icon-demo",
    "raw": "'use client'\n\nimport { IconLaptop, IconMonitor, IconPhone } from 'hq-icons'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectWithIconDemo() {\n    return (\n        <Select aria-label='Devices' defaultSelectedKey='desktop' placeholder='Select a device'>\n            <Select.Item id='desktop' textValue='Desktop'>\n                <IconMonitor />\n                Desktop\n            </Select.Item>\n            <Select.Item id='laptop' textValue='Laptop'>\n                <IconLaptop />\n                Laptop\n            </Select.Item>\n            <Select.Item id='smartphone' textValue='Smartphone'>\n                <IconPhone />\n                Smartphone\n            </Select.Item>\n        </Select>\n    )\n}\n"
  },
  "pickers/select/select-controlled-demo": {
    "component": "@/components/docs/pickers/select/select-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Description, Select } from '@/components/ui'\n\nexport const movies = [\n    { id: 1, title: 'Inception' },\n    { id: 2, title: 'The Dark Knight' },\n    { id: 3, title: 'Interstellar' },\n    { id: 4, title: 'The Matrix' },\n    { id: 5, title: 'Pulp Fiction' }\n]\n\nexport default function SelectControlledDemo() {\n    const [movie, setMovie] = React.useState<Key>('')\n    return (\n        <>\n            <Select\n                selectedKey={movie}\n                onSelectionChange={setMovie}\n                label='Movies'\n                placeholder='Select a movie'\n                items={movies}\n            >\n                {(item) => (\n                    <Select.Item id={item.id} textValue={item.title}>\n                        {item.title}\n                    </Select.Item>\n                )}\n            </Select>\n            <Description className='[&>strong]:text-fg text-muted-fg mt-2 block'>\n                You have selected: <strong>{movie}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "pickers/select/select-section-demo": {
    "component": "@/components/docs/pickers/select/select-section-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectSectionDemo() {\n    return (\n        <Select\n            defaultSelectedKey={1}\n            aria-label='Countries'\n            placeholder='Select a country'\n            items={countries}\n        >\n            {(country) => (\n                <Select.Section title={country.name} items={country.cities}>\n                    {(city) => <Select.Item textValue={city.name}>{city.name}</Select.Item>}\n                </Select.Section>\n            )}\n        </Select>\n    )\n}\n\nconst countries = [\n    {\n        id: 1,\n        name: 'Egypt',\n        cities: [\n            {\n                id: 101,\n                name: 'Cairo'\n            },\n            {\n                id: 102,\n                name: 'Alexandria'\n            },\n            {\n                id: 103,\n                name: 'Giza'\n            },\n            {\n                id: 104,\n                name: 'Luxor'\n            }\n        ]\n    },\n    {\n        id: 2,\n        name: 'Indonesia',\n        cities: [\n            {\n                id: 201,\n                name: 'Jakarta'\n            },\n            {\n                id: 202,\n                name: 'Bali'\n            },\n            {\n                id: 203,\n                name: 'Surabaya'\n            },\n            {\n                id: 204,\n                name: 'Bandung'\n            },\n            {\n                id: 205,\n                name: 'Medan'\n            }\n        ]\n    },\n    {\n        id: 3,\n        name: 'United States',\n        cities: [\n            {\n                id: 301,\n                name: 'New York City'\n            },\n            {\n                id: 302,\n                name: 'Los Angeles'\n            },\n            {\n                id: 303,\n                name: 'Chicago'\n            },\n            {\n                id: 304,\n                name: 'Houston'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Canada',\n        cities: [\n            {\n                id: 401,\n                name: 'Toronto'\n            },\n            {\n                id: 402,\n                name: 'Vancouver'\n            },\n            {\n                id: 403,\n                name: 'Montreal'\n            }\n        ]\n    },\n    {\n        id: 5,\n        name: 'Australia',\n        cities: [\n            {\n                id: 501,\n                name: 'Sydney'\n            },\n            {\n                id: 502,\n                name: 'Melbourne'\n            },\n            {\n                id: 503,\n                name: 'Brisbane'\n            }\n        ]\n    },\n    {\n        id: 6,\n        name: 'Germany',\n        cities: [\n            {\n                id: 601,\n                name: 'Berlin'\n            },\n            {\n                id: 602,\n                name: 'Munich'\n            },\n            {\n                id: 603,\n                name: 'Frankfurt'\n            },\n            {\n                id: 604,\n                name: 'Hamburg'\n            }\n        ]\n    },\n    {\n        id: 7,\n        name: 'Japan',\n        cities: [\n            {\n                id: 701,\n                name: 'Tokyo'\n            },\n            {\n                id: 702,\n                name: 'Osaka'\n            },\n            {\n                id: 703,\n                name: 'Kyoto'\n            }\n        ]\n    }\n]\n"
  },
  "charts/tooltip/tooltip-chart-label-formatter-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-label-formatter-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 500 + 200),\n        profit: Math.floor(Math.random() * 300 + 100)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartLabelFormatterDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Financial Trends'\n                description='Sales and profit data for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='profit'\n                            stackId='a'\n                            fill='var(--color-profit)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString('en-US', {\n                                            month: 'long',\n                                            year: 'numeric'\n                                        })\n                                    }}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-icons-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-icons-demo",
    "raw": "'use client'\n\nimport { IconCircleDollar, IconShoppingCart } from 'hq-icons'\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 500 + 100),\n        expenses: Math.floor(Math.random() * 300 + 50)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)',\n        icon: IconShoppingCart\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)',\n        icon: IconCircleDollar\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartIconsDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Financial Overview'\n                description='Sales and expenses for the past 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='expenses'\n                            stackId='a'\n                            fill='var(--color-expenses)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent hideLabel />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-line-indicator-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-line-indicator-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 500 + 200),\n        profit: Math.floor(Math.random() * 300 + 100)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartLineIndicatorDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Sales and Profit'\n                description='Sales and profit trends for the past 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='profit'\n                            stackId='a'\n                            fill='var(--color-profit)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent indicator='line' />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-custom-label-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { date: '2024-07-15', sales: 450, profit: 300 },\n    { date: '2024-07-16', sales: 380, profit: 420 },\n    { date: '2024-07-17', sales: 520, profit: 120 },\n    { date: '2024-07-18', sales: 140, profit: 550 },\n    { date: '2024-07-19', sales: 600, profit: 350 },\n    { date: '2024-07-20', sales: 480, profit: 400 }\n]\n\nconst chartConfig = {\n    metrics: {\n        label: 'Metrics'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Weekly Performance Metrics'\n                description='Analyzing sales and profit trends for Jul 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => {\n                                return new Date(value).toLocaleDateString('en-US', {\n                                    weekday: 'short'\n                                })\n                            }}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='profit'\n                            stackId='a'\n                            fill='var(--color-profit)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent labelKey='metrics' indicator='line' />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-default-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-default-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        groceries: Math.floor(Math.random() * 300 + 100),\n        utilities: Math.floor(Math.random() * 400 + 200)\n    }\n})\n\nconst chartConfig = {\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-1)'\n    },\n    utilities: {\n        label: 'Utilities',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartAdvanceDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Expense Breakdown'\n                description='Analyzing grocery and utility expenses for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='groceries'\n                            stackId='a'\n                            fill='var(--color-groceries)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='utilities'\n                            stackId='a'\n                            fill='var(--color-utilities)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    hideLabel\n                                    className='w-[180px]'\n                                    formatter={(value, name, item, index) => (\n                                        <>\n                                            <div\n                                                className='size-2.5 shrink-0 rounded-[2px] bg-[--color-bg]'\n                                                style={\n                                                    {\n                                                        '--color-bg': `var(--color-${name})`\n                                                    } as React.CSSProperties\n                                                }\n                                            />\n                                            {chartConfig[name as keyof typeof chartConfig]?.label ||\n                                                name}\n                                            <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                {value}\n                                                <span className='text-muted-fg font-normal'>\n                                                    USD\n                                                </span>\n                                            </div>\n                                            {index === 1 && (\n                                                <div className='text-foreground mt-1.5 flex basis-full items-center border-t pt-1.5 text-xs font-medium'>\n                                                    Total\n                                                    <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                        {item.payload.groceries +\n                                                            item.payload.utilities}\n                                                        <span className='text-muted-fg font-normal'>\n                                                            USD\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-no-indicator-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-no-indicator-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        revenue: Math.floor(Math.random() * 500 + 300),\n        cost: Math.floor(Math.random() * 300 + 150)\n    }\n})\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    cost: {\n        label: 'Cost',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartNoIndicatorDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Revenue and Costs'\n                description='Tracking revenue and costs over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='revenue'\n                            stackId='a'\n                            fill='var(--color-revenue)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='cost'\n                            stackId='a'\n                            fill='var(--color-cost)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent hideIndicator />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-advance-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-advance-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        coffee: Math.floor(Math.random() * 50 + 50),\n        snacks: Math.floor(Math.random() * 100 + 100)\n    }\n})\n\nconst chartConfig = {\n    coffee: {\n        label: 'Coffee',\n        color: 'var(--chart-1)'\n    },\n    snacks: {\n        label: 'Snacks',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartAdvanceDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Coffee & Snacks Expenses'\n                description='Tracking expenses on coffee and snacks for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='coffee'\n                            stackId='a'\n                            fill='var(--color-coffee)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='snacks'\n                            stackId='a'\n                            fill='var(--color-snacks)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    hideLabel\n                                    className='w-[180px]'\n                                    formatter={(value, name, item, index) => (\n                                        <>\n                                            <div\n                                                className='size-2.5 shrink-0 rounded-[2px] bg-(--color-bg)'\n                                                style={\n                                                    {\n                                                        '--color-bg': `var(--color-${name})`\n                                                    } as React.CSSProperties\n                                                }\n                                            />\n                                            {chartConfig[name as keyof typeof chartConfig]?.label ||\n                                                name}\n                                            <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                {value}\n                                                <span className='text-muted-fg font-normal'>\n                                                    USD\n                                                </span>\n                                            </div>\n                                            {/* Add this after the last item */}\n                                            {index === 1 && (\n                                                <div className='text-foreground mt-1.5 flex basis-full items-center border-t pt-1.5 text-xs font-medium'>\n                                                    Total\n                                                    <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                        {item.payload.coffee + item.payload.snacks}\n                                                        <span className='text-muted-fg font-normal'>\n                                                            USD\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </>\n                                    )}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-no-label-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-no-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        products: Math.floor(Math.random() * 600 + 200),\n        services: Math.floor(Math.random() * 400 + 100)\n    }\n})\n\nconst chartConfig = {\n    products: {\n        label: 'Products',\n        color: 'var(--chart-1)'\n    },\n    services: {\n        label: 'Services',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartNoLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Products and Services Data'\n                description='Displaying products and services data over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='products'\n                            stackId='a'\n                            fill='var(--color-products)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='services'\n                            stackId='a'\n                            fill='var(--color-services)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent hideIndicator hideLabel />}\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/tooltip/tooltip-chart-formatter-demo": {
    "component": "@/components/docs/charts/tooltip/tooltip-chart-formatter-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index).toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n    })\n    return {\n        date,\n        sales: Math.floor(Math.random() * 1000 + 200),\n        profit: Math.floor(Math.random() * 500 + 100)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function TooltipChartFormatterDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Monthly Sales and Profit'\n                description='Visualizing data for the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Bar\n                            dataKey='sales'\n                            stackId='a'\n                            fill='var(--color-sales)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='profit'\n                            stackId='a'\n                            fill='var(--color-profit)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    hideLabel\n                                    formatter={(value, name) => (\n                                        <div className='text-muted-fg flex min-w-[130px] items-center text-xs'>\n                                            {chartConfig[name as keyof typeof chartConfig]?.label ||\n                                                name}\n                                            <div className='text-foreground ml-auto flex items-baseline gap-0.5 font-mono font-medium tabular-nums'>\n                                                {value}\n                                                <span className='text-muted-fg font-normal'>\n                                                    USD\n                                                </span>\n                                            </div>\n                                        </div>\n                                    )}\n                                />\n                            }\n                            cursor={false}\n                            defaultIndex={1}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-custom-label-demo": {
    "component": "@/components/docs/charts/line/line-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, LabelList, Line, LineChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { platform: 'Instagram', users: 275, fill: 'var(--color-instagram)' },\n    { platform: 'TikTok', users: 200, fill: 'var(--color-tiktok)' },\n    { platform: 'Twitter', users: 187, fill: 'var(--color-twitter)' },\n    { platform: 'LinkedIn', users: 173, fill: 'var(--color-linkedin)' },\n    { platform: 'Other', users: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    users: {\n        label: 'Users',\n        color: 'var(--chart-2)'\n    },\n    Instagram: {\n        label: 'Instagram',\n        color: 'var(--chart-1)'\n    },\n    TikTok: {\n        label: 'TikTok',\n        color: 'var(--chart-2)'\n    },\n    Twitter: {\n        label: 'Twitter',\n        color: 'var(--chart-3)'\n    },\n    LinkedIn: {\n        label: 'LinkedIn',\n        color: 'var(--chart-4)'\n    },\n    Other: {\n        label: 'Other',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header title='Platform User Growth' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 24,\n                            left: 24,\n                            right: 24\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={\n                                <Chart.TooltipContent indicator='line' nameKey='users' hideLabel />\n                            }\n                        />\n                        <Line\n                            dataKey='users'\n                            type='natural'\n                            stroke='var(--color-users)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-users)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-fg'\n                                fontSize={12}\n                                dataKey='platform'\n                                formatter={(value: keyof typeof chartConfig) =>\n                                    chartConfig[value]?.label\n                                }\n                            />\n                        </Line>\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-controlled-demo": {
    "component": "@/components/docs/charts/line/line-chart-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig, Toggle } from '@/components/ui'\n\nconst generateChartData = (startDate: string, endDate: string) => {\n    const result = []\n    const currentDate = new Date(startDate)\n\n    while (currentDate <= new Date(endDate)) {\n        const date = currentDate.toISOString().split('T')[0]\n        result.push({\n            date,\n            revenue: Math.floor(Math.random() * 5000), // Random revenue value\n            expenses: Math.floor(Math.random() * 3000) // Random expenses value\n        })\n        currentDate.setDate(currentDate.getDate() + 1)\n    }\n\n    return result\n}\n\nconst chartData = generateChartData('2024-04-01', '2024-06-30')\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartControlledDemo() {\n    const [activeChart, setActiveChart] = useState<keyof typeof chartConfig>('revenue')\n\n    return (\n        <Card>\n            <Card.Header className='flex flex-row items-center justify-between'>\n                <div className='space-y-1'>\n                    <Card.Title>Revenue vs Expenses</Card.Title>\n                    <Card.Description>\n                        Tracking daily revenue and expenses over the last 3 months\n                    </Card.Description>\n                </div>\n                <div className='flex gap-x-1'>\n                    {['revenue', 'expenses'].map((key) => {\n                        const chart = key as keyof typeof chartConfig\n                        return (\n                            <Toggle\n                                key={chart}\n                                isSelected={activeChart === chart}\n                                onPress={() => setActiveChart(chart)}\n                            >\n                                {chartConfig[chart].label}\n                            </Toggle>\n                        )\n                    })}\n                </div>\n            </Card.Header>\n            <Card.Content className='px-2 sm:p-6'>\n                <Chart config={chartConfig} className='aspect-auto h-[250px] w-full'>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            minTickGap={32}\n                            tickFormatter={(value) => {\n                                const date = new Date(value)\n                                return date.toLocaleDateString('en-US', {\n                                    month: 'short',\n                                    day: 'numeric'\n                                })\n                            }}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    className='w-[150px]'\n                                    nameKey='views'\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString('en-US', {\n                                            month: 'short',\n                                            day: 'numeric',\n                                            year: 'numeric'\n                                        })\n                                    }}\n                                />\n                            }\n                        />\n                        <Line\n                            dataKey={activeChart}\n                            type='monotone'\n                            stroke={`var(--color-${activeChart})`}\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-dots-demo": {
    "component": "@/components/docs/charts/line/line-chart-dots-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186, profit: 80 },\n    { month: 'Feb', revenue: 305, profit: 200 },\n    { month: 'Mar', revenue: 237, profit: 120 },\n    { month: 'Apr', revenue: 73, profit: 190 },\n    { month: 'May', revenue: 209, profit: 130 },\n    { month: 'Jun', revenue: 214, profit: 140 },\n    { month: 'Jul', revenue: 240, profit: 160 },\n    { month: 'Aug', revenue: 250, profit: 170 },\n    { month: 'Sep', revenue: 260, profit: 180 },\n    { month: 'Oct', revenue: 275, profit: 190 },\n    { month: 'Nov', revenue: 290, profit: 200 },\n    { month: 'Dec', revenue: 300, profit: 220 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Revenue and Profit' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-revenue)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-multiple-demo": {
    "component": "@/components/docs/charts/line/line-chart-multiple-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'short' })\n    return {\n        month,\n        revenue: Math.floor(Math.random() * 300 + 200),\n        expenses: Math.floor(Math.random() * 150 + 50)\n    }\n})\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Revenue and Expenses Trend'\n                description='Monthly trends for revenue and expenses over the last 24 months'\n                className='items-center pb-0'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <Line\n                            dataKey='revenue'\n                            type='monotone'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                        <Line\n                            dataKey='expenses'\n                            type='monotone'\n                            stroke='var(--color-expenses)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-custom-dots-demo": {
    "component": "@/components/docs/charts/line/line-chart-custom-dots-demo",
    "raw": "'use client'\n\nimport { IconBadgeDollar } from 'hq-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nconst chartData = months.map((month) => ({\n    month,\n    sales: Math.floor(Math.random() * 300) + 150,\n    profit: Math.floor(Math.random() * 150) + 50\n}))\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartCustomDotsDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Monthly Sales & Profit'\n                description='Visualizing Monthly Sales & Profit for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='sales'\n                            type='natural'\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                            dot={({ cx, cy, payload }) => {\n                                const r = 24\n                                return (\n                                    <IconBadgeDollar\n                                        className='text-(--color-profit)'\n                                        key={payload.month}\n                                        x={cx - r / 2}\n                                        y={cy - r / 2}\n                                        width={r}\n                                        height={r}\n                                        fill='var(--bg)'\n                                        stroke='var(--color-sales)'\n                                    />\n                                )\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-basic-demo": {
    "component": "@/components/docs/charts/line/line-chart-basic-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 1500 },\n    { month: 'Feb', revenue: 3200 },\n    { month: 'Mar', revenue: 2900 },\n    { month: 'Apr', revenue: 2100 },\n    { month: 'May', revenue: 4000 },\n    { month: 'Jun', revenue: 3700 },\n    { month: 'Jul', revenue: 4300 },\n    { month: 'Aug', revenue: 4900 },\n    { month: 'Sep', revenue: 4700 },\n    { month: 'Oct', revenue: 5200 },\n    { month: 'Nov', revenue: 6000 },\n    { month: 'Dec', revenue: 7200 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Revenue Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-label-demo": {
    "component": "@/components/docs/charts/line/line-chart-label-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, LabelList, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186, expenses: 80 },\n    { month: 'Feb', revenue: 305, expenses: 200 },\n    { month: 'Mar', revenue: 237, expenses: 120 },\n    { month: 'Apr', revenue: 73, expenses: 190 },\n    { month: 'May', revenue: 209, expenses: 130 },\n    { month: 'Jun', revenue: 214, expenses: 140 },\n    { month: 'Jul', revenue: 260, expenses: 160 },\n    { month: 'Aug', revenue: 320, expenses: 180 },\n    { month: 'Sep', revenue: 280, expenses: 150 },\n    { month: 'Oct', revenue: 350, expenses: 200 },\n    { month: 'Nov', revenue: 400, expenses: 210 },\n    { month: 'Dec', revenue: 450, expenses: 230 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header title='Annual Revenue & Expenses Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 20,\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Line\n                            dataKey='revenue'\n                            type='natural'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-revenue)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-fg'\n                                fontSize={12}\n                            />\n                        </Line>\n                        <Line\n                            dataKey='expenses'\n                            type='natural'\n                            stroke='var(--color-expenses)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-expenses)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-fg'\n                                fontSize={12}\n                            />\n                        </Line>\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-dots-color-demo": {
    "component": "@/components/docs/charts/line/line-chart-dots-color-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Dot, Line, LineChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { department: 'Marketing', expenses: 275, fill: 'var(--color-marketing)' },\n    { department: 'Sales', expenses: 200, fill: 'var(--color-sales)' },\n    { department: 'IT', expenses: 187, fill: 'var(--color-it)' },\n    { department: 'HR', expenses: 173, fill: 'var(--color-hr)' },\n    { department: 'Operations', expenses: 90, fill: 'var(--color-operations)' }\n]\n\nconst chartConfig = {\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    },\n    marketing: {\n        label: 'Marketing',\n        color: 'var(--chart-1)'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-2)'\n    },\n    it: {\n        label: 'IT',\n        color: 'var(--chart-3)'\n    },\n    hr: {\n        label: 'HR',\n        color: 'var(--chart-4)'\n    },\n    operations: {\n        label: 'Operations',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsColorDemo() {\n    return (\n        <Card>\n            <Card.Header title='Departmental Expenses Overview' description='Jan - Jun 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 24,\n                            left: 24,\n                            right: 24\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={\n                                <Chart.TooltipContent\n                                    indicator='line'\n                                    nameKey='expenses'\n                                    hideLabel\n                                />\n                            }\n                        />\n                        <Line\n                            dataKey='expenses'\n                            type='natural'\n                            stroke='var(--color-expenses)'\n                            strokeWidth={2}\n                            dot={({ payload, ...props }) => {\n                                return (\n                                    <Dot\n                                        key={payload.department}\n                                        r={5}\n                                        cx={props.cx}\n                                        cy={props.cy}\n                                        fill={payload.fill}\n                                        stroke={payload.fill}\n                                    />\n                                )\n                            }}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-linear-demo": {
    "component": "@/components/docs/charts/line/line-chart-linear-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 73 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 250 },\n    { month: 'Aug', revenue: 320 },\n    { month: 'Sep', revenue: 280 },\n    { month: 'Oct', revenue: 350 },\n    { month: 'Nov', revenue: 400 },\n    { month: 'Dec', revenue: 450 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header title='Annual Revenue Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='revenue'\n                            type='linear'\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/line/line-chart-step-demo": {
    "component": "@/components/docs/charts/line/line-chart-step-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 12 }, (_, index) => {\n    const date = new Date(2024, index)\n    const month = date.toLocaleDateString('en-US', { month: 'short' })\n    return {\n        month,\n        sales: Math.floor(Math.random() * 300 + 150)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartStepDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Sales Overview' description='Jan - Dec 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} axisLine={false} tickMargin={8} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='sales'\n                            type='step'\n                            stroke='var(--color-sales)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/scatter/scatter-chart-basic-demo": {
    "component": "@/components/docs/charts/scatter/scatter-chart-basic-demo",
    "raw": "'use client'\n\nimport { CartesianGrid, Scatter, ScatterChart, XAxis, YAxis, ZAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst data = Array.from({ length: 30 }, (_, index) => ({\n    x: Math.floor(Math.random() * 500 + 50),\n    y: Math.floor(Math.random() * 30000 + 2000),\n    z: Math.floor(Math.random() * 200 + 10),\n    store: `Store ${index + 1}`\n}))\n\nconst chartConfig = {\n    performance: {\n        label: 'Store Performance',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function StorePerformanceAnalysis() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Store Performance Analysis'\n                description='Insights into revenue, footfall, and average order value across stores'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='max-h-min min-h-32'>\n                    <ScatterChart>\n                        <CartesianGrid strokeDasharray='3 3' />\n                        <XAxis\n                            type='number'\n                            dataKey='x'\n                            name='Footfall'\n                            unit='k'\n                            tickLine={false}\n                            axisLine={false}\n                        />\n                        <YAxis\n                            type='number'\n                            dataKey='y'\n                            name='Revenue'\n                            unit='$'\n                            tickLine={false}\n                            axisLine={false}\n                        />\n                        <ZAxis type='number' dataKey='z' name='Avg Order Value' unit='$' />\n                        <Chart.Tooltip content={<Chart.TooltipContent indicator='dashed' />} />\n                        <Scatter data={data} fill='var(--chart-1)' />\n                    </ScatterChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-grid-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-grid-demo",
    "raw": "'use client'\n\nimport { PolarGrid, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 320, fill: 'var(--color-electronics)' },\n    { category: 'Furniture', sales: 250, fill: 'var(--color-furniture)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Sports', sales: 180, fill: 'var(--color-sports)' },\n    { category: 'Books', sales: 100, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-2)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-3)'\n    },\n    sports: {\n        label: 'Sports',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function RadialBarChartGridDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Category Sales Overview'\n                description='Visualizing sales distribution across categories for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart data={chartData} innerRadius={30} outerRadius={100}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel nameKey='category' />}\n                        />\n                        <PolarGrid gridType='circle' />\n                        <RadialBar dataKey='sales' />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-stacked-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Label, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [{ month: 'January', sales: 1260, profit: 570 }]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function SalesPerformanceOverview() {\n    const totalRevenue = chartData[0]!.sales + chartData[0]!.profit\n\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Monthly Revenue Distribution'\n                description='Visualizing sales and profit for Jan - Dec 2024'\n            />\n            <Card.Content className='flex flex-1 items-center pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square w-full max-w-[250px]'>\n                    <RadialBarChart\n                        data={chartData}\n                        endAngle={180}\n                        innerRadius={80}\n                        outerRadius={130}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text x={viewBox.cx} y={viewBox.cy} textAnchor='middle'>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) - 16}\n                                                    className='fill-fg text-2xl font-bold'\n                                                >\n                                                    {totalRevenue.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 4}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Total Revenue\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                        <RadialBar\n                            dataKey='sales'\n                            stackId='a'\n                            cornerRadius={5}\n                            fill='var(--color-sales)'\n                            className='stroke-transparent stroke-2'\n                        />\n                        <RadialBar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            stackId='a'\n                            cornerRadius={5}\n                            className='stroke-transparent stroke-2'\n                        />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-text-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-text-demo",
    "raw": "'use client'\n\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [{ product: 'Laptops', sales: 200, fill: 'var(--color-laptops)' }]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    laptops: {\n        label: 'Laptops',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function ProductSalesOverview() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Laptop Sales Performance'\n                description='Tracking sales data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart\n                        data={chartData}\n                        startAngle={0}\n                        endAngle={250}\n                        innerRadius={80}\n                        outerRadius={110}\n                    >\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-bg'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='sales' background cornerRadius={10} />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg text-4xl font-bold'\n                                                >\n                                                    {chartData[0]!.sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Sales\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-shape-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-shape-demo",
    "raw": "'use client'\n\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [{ category: 'Electronics', sales: 1260, fill: 'var(--color-electronics)' }]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function SalesPerformance() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Electronics Sales Performance'\n                description='Sales data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart\n                        data={chartData}\n                        endAngle={100}\n                        innerRadius={80}\n                        outerRadius={140}\n                    >\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-bg'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='sales' background />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg text-4xl font-bold'\n                                                >\n                                                    {chartData[0]!.sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Sales\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-basic-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-basic-demo",
    "raw": "'use client'\n\nimport { RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 320, fill: 'var(--color-electronics)' },\n    { category: 'Furniture', sales: 250, fill: 'var(--color-furniture)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Sports', sales: 180, fill: 'var(--color-sports)' },\n    { category: 'Books', sales: 100, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-2)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-3)'\n    },\n    sports: {\n        label: 'Sports',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function RadialBarChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Category Sales Overview'\n                description='Visualizing sales distribution across categories for the year 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart data={chartData} innerRadius={30} outerRadius={110}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel nameKey='category' />}\n                        />\n                        <RadialBar dataKey='sales' background />\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radial-bar/radial-bar-chart-label-demo": {
    "component": "@/components/docs/charts/radial-bar/radial-bar-chart-label-demo",
    "raw": "'use client'\n\nimport { LabelList, RadialBar, RadialBarChart } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Apples', quantity: 320, fill: 'var(--color-apples)' },\n    { category: 'Oranges', quantity: 250, fill: 'var(--color-oranges)' },\n    { category: 'Bananas', quantity: 200, fill: 'var(--color-bananas)' },\n    { category: 'Grapes', quantity: 180, fill: 'var(--color-grapes)' },\n    { category: 'Berries', quantity: 100, fill: 'var(--color-berries)' }\n]\n\nconst chartConfig = {\n    quantity: {\n        label: 'Quantity'\n    },\n    apples: {\n        label: 'Apples',\n        color: 'var(--chart-1)'\n    },\n    oranges: {\n        label: 'Oranges',\n        color: 'var(--chart-2)'\n    },\n    bananas: {\n        label: 'Bananas',\n        color: 'var(--chart-3)'\n    },\n    grapes: {\n        label: 'Grapes',\n        color: 'var(--chart-4)'\n    },\n    berries: {\n        label: 'Berries',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function SalesDistribution() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0 text-center'\n                title='Fruit Sales Distribution'\n                description='Sales data of various fruit categories for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadialBarChart\n                        data={chartData}\n                        startAngle={-90}\n                        endAngle={380}\n                        innerRadius={30}\n                        outerRadius={110}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel nameKey='category' />}\n                        />\n                        <RadialBar dataKey='quantity' background>\n                            <LabelList\n                                position='insideStart'\n                                dataKey='category'\n                                className='fill-white capitalize mix-blend-luminosity'\n                                fontSize={11}\n                            />\n                        </RadialBar>\n                    </RadialBarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-horizontal-label-inset-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-horizontal-label-inset-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, Rectangle, XAxis, YAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    {\n        country: 'United States',\n        count: 45000,\n        percentage: 45.0\n    },\n    {\n        country: 'Canada',\n        count: 34000,\n        percentage: 18.0\n    },\n    {\n        country: 'United Kingdom',\n        count: 30000,\n        percentage: 12.0\n    },\n    {\n        country: 'Germany',\n        count: 25000,\n        percentage: 9.0\n    },\n    {\n        country: 'Australia',\n        count: 22000,\n        percentage: 7.5\n    },\n    {\n        country: 'France',\n        count: 18000,\n        percentage: 6.0\n    },\n    {\n        country: 'Japan',\n        count: 15000,\n        percentage: 4.5\n    },\n    {\n        country: 'Brazil',\n        count: 13000,\n        percentage: 5.0\n    },\n    {\n        country: 'Indonesia',\n        count: 10030,\n        percentage: 6.0\n    }\n]\n\nconst chartConfig = {\n    count: {\n        label: 'Count',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartHorizontalLabelInsetDemo() {\n    return (\n        <Card className='h-full w-full'>\n            <Card.Header>\n                <Card.Title>Traffic by Country</Card.Title>\n                <Card.Description>Since Aug 17, 2014</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart config={chartConfig} className='aspect-[15/11] sm:aspect-[17/11]'>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        layout='vertical'\n                        barSize={30}\n                        margin={{ left: 0, right: 0 }}\n                    >\n                        <YAxis dataKey='name' type='category' hide />\n                        <XAxis dataKey='count' type='number' hide />\n                        <Bar\n                            dataKey='count'\n                            layout='vertical'\n                            fill='var(--color-count)'\n                            background={{ radius: 6, fill: 'var(--chart-1)', opacity: 0.2 }}\n                            radius={6}\n                            shape={({ ...props }) => (\n                                <>\n                                    <Rectangle {...props} />\n                                    <text x={props.x + 10} y={props.y + 20} fill='white'>\n                                        {props.country}\n                                    </text>\n                                    <text\n                                        x={props.background.width - 10}\n                                        y={props.y + 20}\n                                        textAnchor='end'\n                                        fill='var(--fg)'\n                                    >\n                                        {props.count.toLocaleString()} (\n                                        {props.percentage.toFixed(1)}%)\n                                    </text>\n                                </>\n                            )}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dot' />}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-multiple-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = Array.from({ length: 12 }, (_, i) => {\n    const months = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec'\n    ]\n    return {\n        month: months[i],\n        sales: 1000 + Math.floor(Math.random() * 300), // Random value for Sales\n        expenses: 800 + Math.floor(Math.random() * 400), // Random value for Expenses\n        profit: 200 + Math.floor(Math.random() * 900) // Random value for Profit\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-4)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Sales vs Expenses'\n                description='The chart shows the sales and expenses for the last year.'\n                className='items-center pb-4'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='max-h-[250px] w-full'>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='month' tickLine={false} tickMargin={10} axisLine={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dashed' />}\n                        />\n                        <Bar dataKey='sales' fill='var(--color-sales)' radius={4} />\n                        <Bar dataKey='expenses' fill='var(--color-expenses)' radius={4} />\n                        <Bar dataKey='profit' fill='var(--color-profit)' radius={4} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-active-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-active-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, Rectangle, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { os: 'Windows', users: 320, fill: 'var(--chart-1)' },\n    { os: 'MacOS', users: 200, fill: 'var(--chart-2)' },\n    { os: 'Linux', users: 150, fill: 'var(--chart-3)' },\n    { os: 'Android', users: 250, fill: 'var(--chart-4)' },\n    { os: 'iOS', users: 180, fill: 'var(--chart-5)' },\n    { os: 'ChromeOS', users: 90, fill: 'var(--chart-1)' },\n    { os: 'Ubuntu', users: 130, fill: 'var(--chart-2)' },\n    { os: 'Fedora', users: 100, fill: 'var(--chart-3)' },\n    { os: 'FreeBSD', users: 60, fill: 'var(--chart-5)' }\n]\n\nconst chartConfig = {\n    users: {\n        label: 'Users'\n    },\n    windows: {\n        label: 'Windows',\n        color: 'var(--chart-1)'\n    },\n    macos: {\n        label: 'MacOS',\n        color: 'var(--chart-2)'\n    },\n    linux: {\n        label: 'Linux',\n        color: 'var(--chart-3)'\n    },\n    android: {\n        label: 'Android',\n        color: 'var(--chart-4)'\n    },\n    ios: {\n        label: 'iOS',\n        color: 'var(--chart-5)'\n    },\n    chromeos: {\n        label: 'ChromeOS',\n        color: 'var(--chart-1)'\n    },\n    ubuntu: {\n        label: 'Ubuntu',\n        color: 'var(--chart-2)'\n    },\n    fedora: {\n        label: 'Fedora',\n        color: 'var(--chart-3)'\n    },\n    harmonyos: {\n        label: 'HarmonyOS',\n        color: 'var(--chart-4)'\n    },\n    freebsd: {\n        label: 'FreeBSD',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartActiveDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Operating System Usage'\n                description='User distribution by OS in 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='os'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) =>\n                                chartConfig[value.toLowerCase() as keyof typeof chartConfig]?.label\n                            }\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar\n                            dataKey='users'\n                            strokeWidth={2}\n                            radius={8}\n                            activeIndex={1}\n                            activeBar={({ ...props }) => {\n                                return (\n                                    <Rectangle\n                                        {...props}\n                                        fillOpacity={0.8}\n                                        stroke={props.payload.fill}\n                                        strokeDasharray={4}\n                                        strokeDashoffset={4}\n                                    />\n                                )\n                            }}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-mixed-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-mixed-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, Legend, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    {\n        browser: 'chrome',\n        visitors: 275,\n        bounceRate: 40,\n        avgSession: 5.6,\n        fill: 'var(--color-chrome)'\n    },\n    {\n        browser: 'safari',\n        visitors: 200,\n        bounceRate: 35,\n        avgSession: 6.3,\n        fill: 'var(--color-safari)'\n    },\n    {\n        browser: 'firefox',\n        visitors: 187,\n        bounceRate: 45,\n        avgSession: 4.2,\n        fill: 'var(--color-firefox)'\n    },\n    { browser: 'edge', visitors: 173, bounceRate: 30, avgSession: 5.0, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, bounceRate: 50, avgSession: 3.7, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors',\n        color: 'var(--chart-1)'\n    },\n    bounceRate: {\n        label: 'Bounce Rate (%)',\n        color: 'var(--chart-2)'\n    },\n    avgSession: {\n        label: 'Avg Session (min)',\n        color: 'var(--chart-3)'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'var(--chart-1)'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'var(--chart-2)'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'var(--chart-3)'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'var(--chart-4)'\n    },\n    other: {\n        label: 'Other',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartGroupedDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Browser Metrics'\n                description='Grouped data for visitors, bounce rate, and average session duration'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        layout='vertical'\n                        margin={{\n                            left: 0\n                        }}\n                    >\n                        <CartesianGrid horizontal={false} />\n                        <YAxis\n                            dataKey='browser'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) =>\n                                chartConfig[value as keyof typeof chartConfig]?.label\n                            }\n                        />\n                        <XAxis type='number' hide />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Legend />\n                        <Bar\n                            dataKey='visitors'\n                            layout='vertical'\n                            fill='var(--color-chrome)'\n                            radius={5}\n                        />\n                        <Bar\n                            dataKey='bounceRate'\n                            layout='vertical'\n                            fill='var(--color-safari)'\n                            radius={5}\n                        />\n                        <Bar\n                            dataKey='avgSession'\n                            layout='vertical'\n                            fill='var(--color-firefox)'\n                            radius={5}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-custom-label-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst projectData = [\n    { team: 'Engineering', completed: 42, ongoing: 15 },\n    { team: 'Design', completed: 30, ongoing: 5 },\n    { team: 'Marketing', completed: 25, ongoing: 10 },\n    { team: 'Sales', completed: 20, ongoing: 8 },\n    { team: 'Support', completed: 35, ongoing: 12 },\n    { team: 'Engineering', completed: 42, ongoing: 15 },\n    { team: 'Design', completed: 30, ongoing: 5 },\n    { team: 'Marketing', completed: 25, ongoing: 10 },\n    { team: 'Sales', completed: 20, ongoing: 8 },\n    { team: 'Support', completed: 35, ongoing: 12 },\n    { team: 'Engineering', completed: 42, ongoing: 15 },\n    { team: 'Design', completed: 30, ongoing: 5 }\n]\n\nconst chartConfig = {\n    completed: {\n        label: 'Completed',\n        color: 'var(--chart-1)'\n    },\n    ongoing: {\n        label: 'Ongoing',\n        color: 'var(--chart-2)'\n    },\n    label: {\n        color: 'var(--bg)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Team Project Status'\n                description='Completed vs Ongoing Projects by Team'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={projectData}\n                        layout='vertical'\n                        margin={{\n                            right: 16\n                        }}\n                    >\n                        <CartesianGrid horizontal={false} />\n                        <YAxis\n                            dataKey='team'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                        />\n                        <XAxis dataKey='completed' type='number' hide />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Bar\n                            dataKey='completed'\n                            layout='vertical'\n                            fill='var(--color-completed)'\n                            radius={4}\n                        >\n                            <LabelList\n                                dataKey='team'\n                                position='insideLeft'\n                                offset={8}\n                                className='fill-(--color-label)'\n                                fontSize={12}\n                            />\n                            <LabelList\n                                dataKey='completed'\n                                position='right'\n                                offset={8}\n                                className='fill-fg'\n                                fontSize={12}\n                            />\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-label-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-label-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst surveyData = [\n    { category: 'Customer Support', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 },\n    { category: 'Customer Service', satisfaction: 85 },\n    { category: 'Product Quality', satisfaction: 90 },\n    { category: 'Delivery Speed', satisfaction: 78 },\n    { category: 'Ease of Use', satisfaction: 88 },\n    { category: 'Value for Money', satisfaction: 82 }\n]\n\nconst chartConfig = {\n    satisfaction: {\n        label: 'Satisfaction',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Customer Satisfaction Survey'\n                description='Satisfaction scores by category'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={surveyData}\n                        margin={{\n                            top: 20\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='satisfaction' fill='var(--color-satisfaction)' radius={8}>\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-fg'\n                                fontSize={12}\n                            />\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-horizontal-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-horizontal-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, XAxis, YAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst performanceData = [\n    { dataCenter: 'New York', uptime: 99.9 },\n    { dataCenter: 'San Francisco', uptime: 97.5 },\n    { dataCenter: 'Singapore', uptime: 98.7 },\n    { dataCenter: 'London', uptime: 95.3 },\n    { dataCenter: 'Tokyo', uptime: 94.8 },\n    { dataCenter: 'Sydney', uptime: 99.9 },\n    { dataCenter: 'Seoul', uptime: 97.5 }\n]\n\nconst chartConfig = {\n    uptime: {\n        label: 'Uptime (%)',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartHorizontalDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Data Center Uptime'\n                description='Uptime percentage by region for Q1 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={performanceData}\n                        layout='vertical'\n                        margin={{\n                            left: -20\n                        }}\n                    >\n                        <XAxis type='number' dataKey='uptime' hide />\n                        <YAxis\n                            dataKey='dataCenter'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='uptime' fill='var(--color-uptime)' radius={5} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-negative-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-negative-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, Cell, LabelList } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', profitLoss: 1200 },\n    { month: 'Feb', profitLoss: 1500 },\n    { month: 'Mar', profitLoss: -700 },\n    { month: 'Apr', profitLoss: 2000 },\n    { month: 'May', profitLoss: -1500 },\n    { month: 'Jun', profitLoss: 1700 },\n    { month: 'Jul', profitLoss: -1200 },\n    { month: 'Aug', profitLoss: 1900 },\n    { month: 'Sep', profitLoss: -1400 },\n    { month: 'Oct', profitLoss: -1800 },\n    { month: 'Nov', profitLoss: 2100 },\n    { month: 'Dec', profitLoss: 1600 }\n]\n\nconst chartConfig = {\n    profitLoss: {\n        label: 'Profit/Loss'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartNegativeDemo() {\n    return (\n        <Card>\n            <Card.Header title='Monthly Profit and Loss' description='January - December 2024' />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel hideIndicator />}\n                        />\n                        <Bar dataKey='profitLoss'>\n                            <LabelList position='top' dataKey='month' fillOpacity={1} />\n                            {chartData.map((item) => (\n                                <Cell\n                                    key={item.month}\n                                    fill={item.profitLoss > 0 ? 'var(--chart-1)' : 'var(--chart-2)'}\n                                />\n                            ))}\n                        </Bar>\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-basic-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-basic-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst salesData = Array.from({ length: 48 }, (_, index) => {\n    const month = new Date(new Date().getFullYear() - 4, Math.floor(index / 2)).toLocaleDateString(\n        'en-US',\n        {\n            month: 'short'\n        }\n    )\n    const startDay = index % 2 === 0 ? 1 : 15\n    const endDay = index % 2 === 0 ? 14 : 28\n    return {\n        period: `${month} ${startDay} - ${month} ${endDay}`,\n        revenue: Math.floor(Math.random() * 5000 + 2000)\n    }\n})\n\nconst salesConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Biweekly Revenue'\n                description='Revenue breakdown every 2 weeks (Jan - Dec 2024)'\n                className='items-center pb-0'\n            />\n            <Card.Content>\n                <Chart config={salesConfig}>\n                    <BarChart accessibilityLayer data={salesData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis dataKey='period' tickLine={false} tickMargin={10} axisLine={false} />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='revenue' fill='var(--color-revenue)' radius={0} />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-stacked-legend-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-stacked-legend-demo",
    "raw": "'use client'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 3200, expenses: 2400 },\n    { month: 'Feb', revenue: 2800, expenses: 2000 },\n    { month: 'Mar', revenue: 3500, expenses: 2700 },\n    { month: 'Apr', revenue: 3000, expenses: 2200 },\n    { month: 'May', revenue: 3600, expenses: 2800 },\n    { month: 'Jun', revenue: 3400, expenses: 2600 },\n    { month: 'Jul', revenue: 3900, expenses: 3100 },\n    { month: 'Aug', revenue: 4100, expenses: 3300 },\n    { month: 'Sep', revenue: 3700, expenses: 2900 },\n    { month: 'Oct', revenue: 4200, expenses: 3400 },\n    { month: 'Nov', revenue: 4000, expenses: 3100 },\n    { month: 'Dec', revenue: 4300, expenses: 3500 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartStackedLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Biweekly Revenue'\n                description='Revenue breakdown every 2 weeks (Jan - Dec 2024)'\n            />\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value}\n                        />\n                        <Chart.Tooltip content={<Chart.TooltipContent hideLabel />} />\n                        <Chart.Legend content={<Chart.LegendContent />} />\n                        <Bar\n                            dataKey='revenue'\n                            stackId='a'\n                            fill='var(--chart-1)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='expenses'\n                            stackId='a'\n                            fill='var(--chart-2)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/bar/bar-chart-controlled-demo": {
    "component": "@/components/docs/charts/bar/bar-chart-controlled-demo",
    "raw": "'use client'\n\nimport { useMemo, useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport { Card, Chart, type ChartConfig, Select } from '@/components/ui'\n\nconst chartData = Array.from({ length: 50 }, (_, index) => {\n    const date = new Date(2024, 0, 1 + index)\n    return {\n        date: date.toISOString().split('T')[0],\n        sales: Math.floor(Math.random() * 1000 + 500),\n        revenue: Math.floor(Math.random() * 3000 + 1500)\n    }\n})\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartControlledDemo() {\n    const [activeChart, setActiveChart] = useState<Key>('sales')\n\n    const total = useMemo(\n        () => ({\n            sales: chartData.reduce((acc, curr) => acc + curr.sales, 0),\n            revenue: chartData.reduce((acc, curr) => acc + curr.revenue, 0)\n        }),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='flex-row items-center justify-between'>\n                <div className='space-y-1'>\n                    <Card.Title>Business Overview</Card.Title>\n                    <Card.Description>\n                        Displaying total sales and revenue for the last 50 days\n                    </Card.Description>\n                </div>\n                <div>\n                    <Select\n                        selectedKey={activeChart}\n                        onSelectionChange={setActiveChart}\n                        placement='bottom end'\n                        className='sm:min-w-40'\n                    >\n                        {['sales', 'revenue'].map((key) => {\n                            const chart = key as keyof typeof chartConfig\n                            return (\n                                <Select.Item\n                                    key={chart}\n                                    data-active={activeChart === chart}\n                                    id={key}\n                                    textValue={chartConfig[chart].label}\n                                >\n                                    <Select.ItemDetails\n                                        label={chartConfig[chart].label}\n                                        description={total[\n                                            key as keyof typeof total\n                                        ].toLocaleString()}\n                                    />\n                                </Select.Item>\n                            )\n                        })}\n                    </Select>\n                </div>\n            </Card.Header>\n            <Card.Content className='px-2 sm:p-6'>\n                <Chart config={chartConfig} className='aspect-auto h-[250px] w-full'>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            minTickGap={32}\n                            tickFormatter={(value) => {\n                                const date = new Date(value)\n                                return date.toLocaleDateString('en-US', {\n                                    month: 'short',\n                                    day: 'numeric'\n                                })\n                            }}\n                        />\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    className='w-[150px]'\n                                    nameKey='views'\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString('en-US', {\n                                            month: 'short',\n                                            day: 'numeric',\n                                            year: 'numeric'\n                                        })\n                                    }}\n                                />\n                            }\n                        />\n                        <Bar\n                            dataKey={activeChart as keyof typeof chartConfig}\n                            fill={`var(--color-${activeChart})`}\n                        />\n                    </BarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-multiple-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 230, profit: 150 },\n    { month: 'Aug', sales: 250, profit: 160 },\n    { month: 'Sep', sales: 270, profit: 170 },\n    { month: 'Oct', sales: 290, profit: 180 },\n    { month: 'Nov', sales: 310, profit: 190 },\n    { month: 'Dec', sales: 330, profit: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales and Profit Comparison'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-radius-axis-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-radius-axis-demo",
    "raw": "'use client'\n\nimport { PolarGrid, PolarRadiusAxis, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 230, profit: 150 },\n    { month: 'Aug', sales: 250, profit: 160 },\n    { month: 'Sep', sales: 270, profit: 170 },\n    { month: 'Oct', sales: 290, profit: 180 },\n    { month: 'Nov', sales: 310, profit: 190 },\n    { month: 'Dec', sales: 330, profit: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartRadiusAxisDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales and Profit Analysis'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' labelKey='month' />}\n                        />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                        <PolarRadiusAxis\n                            angle={60}\n                            stroke='var(--fg)'\n                            orientation='middle'\n                            axisLine={false}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-dots-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-dots-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 273 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 220 },\n    { month: 'Aug', revenue: 230 },\n    { month: 'Sep', revenue: 240 },\n    { month: 'Oct', revenue: 250 },\n    { month: 'Nov', revenue: 260 },\n    { month: 'Dec', revenue: 270 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center'>\n                <Card.Title>Monthly Revenue Radar Chart</Card.Title>\n                <Card.Description>Displaying revenue trends for Jan - Dec 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-filled-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-filled-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 285 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 203 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 264 },\n    { month: 'Jul', revenue: 290 },\n    { month: 'Aug', revenue: 310 },\n    { month: 'Sep', revenue: 330 },\n    { month: 'Oct', revenue: 350 },\n    { month: 'Nov', revenue: 370 },\n    { month: 'Dec', revenue: 390 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridFilledDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Revenue Radar Chart'\n                description='Revenue data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarGrid className='fill-[--color-revenue] opacity-20' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar dataKey='revenue' fill='var(--color-revenue)' fillOpacity={0.5} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-circle-filled-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-circle-filled-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186 },\n    { month: 'Feb', sales: 285 },\n    { month: 'Mar', sales: 237 },\n    { month: 'Apr', sales: 203 },\n    { month: 'May', sales: 209 },\n    { month: 'Jun', sales: 264 },\n    { month: 'Jul', sales: 290 },\n    { month: 'Aug', sales: 310 },\n    { month: 'Sep', sales: 320 },\n    { month: 'Oct', sales: 330 },\n    { month: 'Nov', sales: 350 },\n    { month: 'Dec', sales: 370 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridCircleFilledDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Monthly Sales Overview'\n                description='Displaying sales data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarGrid className='fill-[--color-sales] opacity-20' gridType='circle' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.5} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-custom-label-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 45000, expenses: 30000 },\n    { month: 'Feb', revenue: 50000, expenses: 32000 },\n    { month: 'Mar', revenue: 47000, expenses: 31000 },\n    { month: 'Apr', revenue: 52000, expenses: 35000 },\n    { month: 'May', revenue: 48000, expenses: 33000 },\n    { month: 'Jun', revenue: 51000, expenses: 34000 },\n    { month: 'Jul', revenue: 53000, expenses: 36000 },\n    { month: 'Aug', revenue: 55000, expenses: 37000 },\n    { month: 'Sep', revenue: 54000, expenses: 35000 },\n    { month: 'Oct', revenue: 56000, expenses: 38000 },\n    { month: 'Nov', revenue: 58000, expenses: 39000 },\n    { month: 'Dec', revenue: 60000, expenses: 40000 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Monthly Financial Overview'\n                description='Revenue and expenses for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis\n                            dataKey='month'\n                            tick={({ x, y, textAnchor, index, ...props }) => {\n                                const data = chartData[index]!\n\n                                return (\n                                    <text\n                                        x={x}\n                                        y={index === 0 ? y - 10 : y}\n                                        textAnchor={textAnchor}\n                                        fontSize={13}\n                                        fontWeight={500}\n                                        {...props}\n                                    >\n                                        <tspan>{data.revenue}</tspan>\n                                        <tspan className='fill-muted-fg'>/</tspan>\n                                        <tspan>{data.expenses}</tspan>\n                                        <tspan\n                                            x={x}\n                                            dy={'1rem'}\n                                            fontSize={12}\n                                            className='fill-muted-fg'\n                                        >\n                                            {data.month}\n                                        </tspan>\n                                    </text>\n                                )\n                            }}\n                        />\n\n                        <PolarGrid />\n                        <Radar dataKey='revenue' fill='var(--color-revenue)' fillOpacity={0.6} />\n                        <Radar dataKey='expenses' fill='var(--color-expenses)' />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-basic-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-basic-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 186 },\n    { category: 'Clothing', sales: 305 },\n    { category: 'Groceries', sales: 237 },\n    { category: 'Furniture', sales: 273 },\n    { category: 'Toys', sales: 209 },\n    { category: 'Beauty', sales: 214 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='By Category'\n                description='Sales performance by category (Jan - Jun 2024)'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <PolarAngleAxis dataKey='category' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-icons-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-icons-demo",
    "raw": "'use client'\n\nimport { IconBadgeDollar, IconShoppingBag } from 'hq-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, profit: 80 },\n    { month: 'Feb', sales: 305, profit: 200 },\n    { month: 'Mar', sales: 237, profit: 120 },\n    { month: 'Apr', sales: 73, profit: 190 },\n    { month: 'May', sales: 209, profit: 130 },\n    { month: 'Jun', sales: 214, profit: 140 },\n    { month: 'Jul', sales: 250, profit: 150 },\n    { month: 'Aug', sales: 270, profit: 160 },\n    { month: 'Sep', sales: 290, profit: 170 },\n    { month: 'Oct', sales: 310, profit: 180 },\n    { month: 'Nov', sales: 330, profit: 190 },\n    { month: 'Dec', sales: 350, profit: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)',\n        icon: IconShoppingBag\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)',\n        icon: IconBadgeDollar\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartIconsDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales and Profit'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: -40,\n                            bottom: -10\n                        }}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='profit' fill='var(--color-profit)' />\n                        <Chart.Legend className='mt-8' content={<Chart.LegendContent />} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-legend-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-legend-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, expenses: 80 },\n    { month: 'Feb', sales: 305, expenses: 200 },\n    { month: 'Mar', sales: 237, expenses: 120 },\n    { month: 'Apr', sales: 73, expenses: 190 },\n    { month: 'May', sales: 209, expenses: 130 },\n    { month: 'Jun', sales: 214, expenses: 140 },\n    { month: 'Jul', sales: 230, expenses: 150 },\n    { month: 'Aug', sales: 250, expenses: 160 },\n    { month: 'Sep', sales: 270, expenses: 170 },\n    { month: 'Oct', sales: 290, expenses: 180 },\n    { month: 'Nov', sales: 310, expenses: 190 },\n    { month: 'Dec', sales: 330, expenses: 200 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales vs Expenses'\n                description='Comparing data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: -40,\n                            bottom: -10\n                        }}\n                    >\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='expenses' fill='var(--color-expenses)' />\n                        <Chart.Legend className='mt-8' content={<Chart.LegendContent />} />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-custom-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-custom-demo",
    "raw": "'use client'\n\nimport { PolarGrid, PolarRadiusAxis, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', sales: 186, expenses: 80 },\n    { month: 'Feb', sales: 305, expenses: 200 },\n    { month: 'Mar', sales: 237, expenses: 120 },\n    { month: 'Apr', sales: 73, expenses: 190 },\n    { month: 'May', sales: 209, expenses: 130 },\n    { month: 'Jun', sales: 214, expenses: 140 },\n    { month: 'Jul', sales: 230, expenses: 150 },\n    { month: 'Aug', sales: 250, expenses: 170 },\n    { month: 'Sep', sales: 270, expenses: 180 },\n    { month: 'Oct', sales: 290, expenses: 200 },\n    { month: 'Nov', sales: 310, expenses: 220 },\n    { month: 'Dec', sales: 330, expenses: 250 }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    expenses: {\n        label: 'Expenses',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function Component() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Sales vs Expenses'\n                description='Comparing sales and expenses for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' labelKey='month' />}\n                        />\n                        <PolarGrid />\n                        <Radar dataKey='sales' fill='var(--color-sales)' fillOpacity={0.6} />\n                        <Radar dataKey='expenses' fill='var(--color-expenses)' />\n                        <PolarRadiusAxis\n                            angle={60}\n                            stroke='var(--fg)'\n                            orientation='middle'\n                            axisLine={false}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-circle-no-lines-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-circle-no-lines-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 203 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 220 },\n    { month: 'Aug', revenue: 250 },\n    { month: 'Sep', revenue: 270 },\n    { month: 'Oct', revenue: 290 },\n    { month: 'Nov', revenue: 310 },\n    { month: 'Dec', revenue: 330 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function Component() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Monthly Revenue Breakdown'\n                description='Revenue data displayed for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarGrid gridType='circle' radialLines={false} />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-none-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-none-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186 },\n    { month: 'Feb', revenue: 305 },\n    { month: 'Mar', revenue: 237 },\n    { month: 'Apr', revenue: 273 },\n    { month: 'May', revenue: 209 },\n    { month: 'Jun', revenue: 214 },\n    { month: 'Jul', revenue: 250 },\n    { month: 'Aug', revenue: 270 },\n    { month: 'Sep', revenue: 290 },\n    { month: 'Oct', revenue: 310 },\n    { month: 'Nov', revenue: 330 },\n    { month: 'Dec', revenue: 350 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridNoneDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Revenue Growth'\n                description='Revenue trends for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-lines-only-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-lines-only-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', revenue: 186, profit: 160 },\n    { month: 'Feb', revenue: 185, profit: 170 },\n    { month: 'Mar', revenue: 207, profit: 180 },\n    { month: 'Apr', revenue: 173, profit: 160 },\n    { month: 'May', revenue: 160, profit: 190 },\n    { month: 'Jun', revenue: 174, profit: 204 },\n    { month: 'Jul', revenue: 190, profit: 210 },\n    { month: 'Aug', revenue: 200, profit: 220 },\n    { month: 'Sep', revenue: 210, profit: 230 },\n    { month: 'Oct', revenue: 220, profit: 240 },\n    { month: 'Nov', revenue: 230, profit: 250 },\n    { month: 'Dec', revenue: 240, profit: 260 }\n]\n\nconst chartConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    },\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartLinesOnlyDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Revenue vs Profit'\n                description='Performance data for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid radialLines={false} />\n                        <Radar\n                            dataKey='revenue'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0}\n                            stroke='var(--color-revenue)'\n                            strokeWidth={2}\n                        />\n                        <Radar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            fillOpacity={0}\n                            stroke='var(--color-profit)'\n                            strokeWidth={2}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/radar/radar-chart-grid-circle-demo": {
    "component": "@/components/docs/charts/radar/radar-chart-grid-circle-demo",
    "raw": "'use client'\n\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { month: 'Jan', profit: 186 },\n    { month: 'Feb', profit: 305 },\n    { month: 'Mar', profit: 237 },\n    { month: 'Apr', profit: 273 },\n    { month: 'May', profit: 209 },\n    { month: 'Jun', profit: 214 },\n    { month: 'Jul', profit: 220 },\n    { month: 'Aug', profit: 230 },\n    { month: 'Sep', profit: 240 },\n    { month: 'Oct', profit: 250 },\n    { month: 'Nov', profit: 260 },\n    { month: 'Dec', profit: 270 }\n]\n\nconst chartConfig = {\n    profit: {\n        label: 'Profit',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function Component() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-4'\n                title='Annual Profit Distribution'\n                description='Profit trends displayed for Jan - Dec 2024'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <RadarChart data={chartData}>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <PolarGrid gridType='circle' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='profit'\n                            fill='var(--color-profit)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-legend-demo": {
    "component": "@/components/docs/charts/area/area-chart-legend-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst salesData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        wholesale: Math.floor(Math.random() * 1000 + 500),\n        retail: Math.floor(Math.random() * 1000 + 1500)\n    }\n})\n\nconst salesConfig = {\n    wholesale: {\n        label: 'Wholesale',\n        color: 'var(--chart-1)'\n    },\n    retail: {\n        label: 'Retail',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Overview'\n                description='Distribution of wholesale and retail sales over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={salesConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={salesData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='retail'\n                            type='natural'\n                            fill='var(--color-retail)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-retail)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='wholesale'\n                            type='natural'\n                            fill='var(--color-wholesale)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-wholesale)'\n                            stackId='a'\n                        />\n                        <Chart.Legend content={<Chart.LegendContent />} />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-step-demo": {
    "component": "@/components/docs/charts/area/area-chart-step-demo",
    "raw": "'use client'\n\nimport { IconChartArea } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst enrollmentData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        newEnrollments: Math.floor(Math.random() * 20 + 40)\n    }\n})\n\nconst enrollmentConfig = {\n    newEnrollments: {\n        label: 'New Enrollments',\n        color: 'var(--chart-1)',\n        icon: IconChartArea\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStepDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Enrollment Growth'\n                description='Monthly student enrollments over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={enrollmentConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={enrollmentData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Area\n                            dataKey='newEnrollments'\n                            type='step'\n                            fill='var(--color-newEnrollments)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-newEnrollments)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-linear-demo": {
    "component": "@/components/docs/charts/area/area-chart-linear-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst visitorData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        uniqueVisitors: Math.floor(Math.random() * 500 + 1000)\n    }\n})\n\nconst visitorConfig = {\n    uniqueVisitors: {\n        label: 'Unique Visitors',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Visitor Insights'\n                description='Monthly unique visitors over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={visitorConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={visitorData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dot' hideLabel />}\n                        />\n                        <Area\n                            dataKey='uniqueVisitors'\n                            type='linear'\n                            fill='var(--color-uniqueVisitors)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-uniqueVisitors)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-gradient-demo": {
    "component": "@/components/docs/charts/area/area-chart-gradient-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst salesData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        online: Math.floor(Math.random() * 2000 + 3000),\n        inStore: Math.floor(Math.random() * 1000 + 1500)\n    }\n})\n\nconst chartConfig = {\n    online: {\n        label: 'Online Sales',\n        color: 'var(--chart-1)'\n    },\n    inStore: {\n        label: 'In-Store Sales',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartGradientDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Sales Channel Analysis'\n                description='Monthly comparison of online and in-store sales over the last 24 months'\n                className='items-center pb-4'\n            />\n            <Card.Content>\n                <Chart config={chartConfig} className='max-h-[250px] w-full'>\n                    <AreaChart\n                        accessibilityLayer\n                        data={salesData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <defs>\n                            <linearGradient id='fillOnline' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-online)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-online)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                            <linearGradient id='fillInStore' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-inStore)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-inStore)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                        </defs>\n                        <Area\n                            dataKey='inStore'\n                            type='natural'\n                            fill='url(#fillInStore)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-inStore)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='online'\n                            type='natural'\n                            fill='url(#fillOnline)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-online)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-icon-demo": {
    "component": "@/components/docs/charts/area/area-chart-icon-demo",
    "raw": "'use client'\n\nimport { IconShoppingBag, IconStore } from 'hq-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst revenueData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        ecommerce: Math.floor(Math.random() * 5000 + 10000),\n        retail: Math.floor(Math.random() * 3000 + 7000)\n    }\n})\n\nconst revenueConfig = {\n    ecommerce: {\n        label: 'E-Commerce',\n        color: 'var(--chart-1)',\n        icon: IconShoppingBag\n    },\n    retail: {\n        label: 'Retail',\n        color: 'var(--chart-2)',\n        icon: IconStore\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartIconDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Revenue Overview'\n                description='Monthly revenue comparison between E-Commerce and Retail over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={revenueConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={revenueData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='retail'\n                            type='natural'\n                            fill='var(--color-retail)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-retail)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='ecommerce'\n                            type='natural'\n                            fill='var(--color-ecommerce)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-ecommerce)'\n                            stackId='a'\n                        />\n                        <Chart.Legend content={<Chart.LegendContent />} />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-axes-demo": {
    "component": "@/components/docs/charts/area/area-chart-axes-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis, YAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'var(--chart-1)'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartAxesDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Axes</Card.Title>\n                <Card.Description>Showing total visitors for the last 6 months</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Chart config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: -20,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <YAxis tickLine={false} axisLine={false} tickMargin={8} tickCount={3} />\n                        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='var(--color-mobile)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-stacked-demo": {
    "component": "@/components/docs/charts/area/area-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst engagementData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        likes: Math.floor(Math.random() * 50 + 100),\n        comments: Math.floor(Math.random() * 30 + 40)\n    }\n})\n\nconst engagementConfig = {\n    likes: {\n        label: 'Likes',\n        color: 'var(--chart-1)'\n    },\n    comments: {\n        label: 'Comments',\n        color: 'var(--chart-2)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Audience Engagement Analysis'\n                description='Tracking monthly likes and comments over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={engagementConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={engagementData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='dot' />}\n                        />\n                        <Area\n                            dataKey='comments'\n                            type='natural'\n                            fill='var(--color-comments)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-comments)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='likes'\n                            type='natural'\n                            fill='var(--color-likes)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-likes)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-basic-demo": {
    "component": "@/components/docs/charts/area/area-chart-basic-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst salesData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        revenue: Math.floor(Math.random() * 5000 + 2000)\n    }\n})\n\nconst salesConfig = {\n    revenue: {\n        label: 'Revenue',\n        color: 'var(--chart-1)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='Revenue Trends'\n                description='Monthly revenue for the last 24 months'\n                className='items-center pb-0'\n            />\n            <Card.Content>\n                <Chart config={salesConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={salesData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='revenue'\n                            type='natural'\n                            fill='var(--color-revenue)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-revenue)'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/area/area-chart-stacked-expanded-demo": {
    "component": "@/components/docs/charts/area/area-chart-stacked-expanded-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport type { ChartConfig } from '@/components/ui'\nimport { Card, Chart } from '@/components/ui'\n\nconst trafficData = Array.from({ length: 24 }, (_, index) => {\n    const date = new Date(new Date().getFullYear() - 1, index)\n    const month = date.toLocaleDateString('en-US', { month: 'long' })\n    return {\n        month,\n        organic: Math.floor(Math.random() * 100 + 150),\n        paid: Math.floor(Math.random() * 50 + 100),\n        referral: Math.floor(Math.random() * 50 + 50)\n    }\n})\n\nconst trafficConfig = {\n    organic: {\n        label: 'Organic',\n        color: 'var(--chart-1)'\n    },\n    paid: {\n        label: 'Paid',\n        color: 'var(--chart-2)'\n    },\n    referral: {\n        label: 'Referral',\n        color: 'var(--chart-3)'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedExpandedDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Traffic Analysis'\n                description='Distribution of traffic sources over the last 24 months'\n            />\n            <Card.Content>\n                <Chart config={trafficConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={trafficData}\n                        margin={{\n                            left: 20,\n                            right: 20,\n                            top: 20\n                        }}\n                        stackOffset='expand'\n                    >\n                        <CartesianGrid vertical={false} strokeDasharray='3 3' />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <Chart.Tooltip cursor content={<Chart.TooltipContent indicator='line' />} />\n                        <Area\n                            dataKey='referral'\n                            type='monotone'\n                            fill='var(--chart-3)'\n                            fillOpacity={0.1}\n                            stroke='var(--chart-3)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='paid'\n                            type='monotone'\n                            fill='var(--chart-2)'\n                            fillOpacity={0.4}\n                            stroke='var(--chart-2)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='organic'\n                            type='monotone'\n                            fill='var(--chart-1)'\n                            fillOpacity={0.4}\n                            stroke='var(--chart-1)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-legend-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-legend-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { region: 'tesla', visitors: 275, fill: 'var(--color-tesla)' },\n    { region: 'rivian', visitors: 200, fill: 'var(--color-rivian)' },\n    { region: 'ford', visitors: 187, fill: 'var(--color-ford)' },\n    { region: 'lucid', visitors: 173, fill: 'var(--color-lucid)' },\n    { region: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    tesla: {\n        label: 'Tesla',\n        color: 'var(--chart-1)'\n    },\n    rivian: {\n        label: 'Rivian',\n        color: 'var(--chart-2)'\n    },\n    ford: {\n        label: 'Ford',\n        color: 'var(--chart-3)'\n    },\n    lucid: {\n        label: 'Lucid',\n        color: 'var(--chart-4)'\n    },\n    other: {\n        label: 'Other',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header\n                title='EV Market'\n                description='Showing total visitors for the first half of 2024 by region'\n                className='items-center pb-0'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[300px]'>\n                    <PieChart>\n                        <Pie data={chartData} dataKey='visitors' />\n                        <Chart.Legend\n                            content={<Chart.LegendContent nameKey='region' />}\n                            className='-translate-y-2 flex-wrap gap-2 *:basis-1/4 *:justify-center'\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-custom-label-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Sales', amount: 275, fill: 'var(--color-sales)' },\n    { category: 'Marketing', amount: 200, fill: 'var(--color-marketing)' },\n    { category: 'IT', amount: 187, fill: 'var(--color-it)' },\n    { category: 'HR', amount: 173, fill: 'var(--color-hr)' },\n    { category: 'Operations', amount: 90, fill: 'var(--color-operations)' }\n]\n\nconst chartConfig = {\n    amount: {\n        label: 'Amount'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    marketing: {\n        label: 'Marketing',\n        color: 'var(--chart-2)'\n    },\n    it: {\n        label: 'IT',\n        color: 'var(--chart-3)'\n    },\n    hr: {\n        label: 'HR',\n        color: 'var(--chart-4)'\n    },\n    operations: {\n        label: 'Operations',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Departmental Budget Allocation</Card.Title>\n                <Card.Description>Jan - Jun 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px] px-0'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent nameKey='amount' hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='amount'\n                            labelLine={false}\n                            label={({ payload, ...props }) => {\n                                return (\n                                    <text\n                                        cx={props.cx}\n                                        cy={props.cy}\n                                        x={props.x}\n                                        y={props.y}\n                                        textAnchor={props.textAnchor}\n                                        dominantBaseline={props.dominantBaseline}\n                                        fill='var(--fg)'\n                                    >\n                                        {payload.amount}\n                                    </text>\n                                )\n                            }}\n                            nameKey='category'\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-donut-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-donut-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 275, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 187, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 173, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 90, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Allocation by Category'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie data={chartData} dataKey='sales' nameKey='category' innerRadius={60} />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-controlled-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-controlled-demo",
    "raw": "'use client'\n\nimport { useMemo, useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Label, Pie, PieChart, Sector } from 'recharts'\nimport type { PieSectorDataItem } from 'recharts/types/polar/Pie'\n\nimport { Card, Chart, type ChartConfig, ChartStyle, Select } from '@/components/ui'\n\nconst data = [\n    { month: 'january', sales: 3186, fill: 'var(--color-january)' },\n    { month: 'february', sales: 2305, fill: 'var(--color-february)' },\n    { month: 'march', sales: 4237, fill: 'var(--color-march)' },\n    { month: 'april', sales: 4173, fill: 'var(--color-april)' },\n    { month: 'may', sales: 5209, fill: 'var(--color-may)' }\n]\n\nconst config = {\n    visitors: {\n        label: 'Visitors'\n    },\n    sales: {\n        label: 'Sales'\n    },\n    profit: {\n        label: 'Profit'\n    },\n    january: {\n        label: 'January',\n        color: 'var(--chart-1)'\n    },\n    february: {\n        label: 'February',\n        color: 'var(--chart-2)'\n    },\n    march: {\n        label: 'March',\n        color: 'var(--chart-3)'\n    },\n    april: {\n        label: 'April',\n        color: 'var(--chart-4)'\n    },\n    may: {\n        label: 'May',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartControlledDemo() {\n    const id = 'pie-interactive'\n    const [activeMonth, setActiveMonth] = useState<Key>(data[0]!.month)\n\n    const activeIndex = useMemo(\n        () => data.findIndex((item) => item.month === activeMonth),\n        [activeMonth]\n    )\n    const months = useMemo(() => data.map((item) => item.month), [])\n\n    return (\n        <Card data-chart={id} className='flex flex-col'>\n            <ChartStyle id={id} config={config} />\n            <Card.Header className='flex-row items-start space-y-0 pb-0'>\n                <div className='grid w-full gap-1'>\n                    <Card.Title className='capitalize'>{activeMonth}</Card.Title>\n                    <Card.Description>\n                        The total sales for the month is{' '}\n                        <strong className='font-semibold'>\n                            {data[activeIndex]?.sales.toLocaleString()}\n                        </strong>\n                    </Card.Description>\n                </div>\n                <Select\n                    selectedKey={activeMonth}\n                    onSelectionChange={setActiveMonth}\n                    className='ml-auto'\n                    aria-label='Select a value'\n                >\n                    {months.map((key) => {\n                        const _config = config[key as keyof typeof config]\n\n                        if (!_config) {\n                            return null\n                        }\n\n                        return (\n                            <Select.Item key={key} id={key}>\n                                {_config?.label}\n                            </Select.Item>\n                        )\n                    })}\n                </Select>\n            </Card.Header>\n            <Card.Content className='flex flex-1 justify-center pb-0'>\n                <Chart\n                    id={id}\n                    config={config}\n                    className='mx-auto aspect-square w-full max-w-[315px]'\n                >\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={data}\n                            dataKey='sales'\n                            nameKey='month'\n                            innerRadius={60}\n                            strokeWidth={5}\n                            activeIndex={activeIndex}\n                            activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                                <g>\n                                    <Sector {...props} outerRadius={outerRadius + 10} />\n                                    <Sector\n                                        {...props}\n                                        outerRadius={outerRadius + 25}\n                                        innerRadius={outerRadius + 12}\n                                    />\n                                </g>\n                            )}\n                        >\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg text-2xl font-semibold'\n                                                >\n                                                    {data[activeIndex]?.sales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-label-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-label-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 275, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 187, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 173, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 90, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Allocation by Category'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    config={chartConfig}\n                    className='[&_.recharts-pie-label-text]:fill-fg mx-auto aspect-square max-h-[250px] pb-0'\n                >\n                    <PieChart>\n                        <Chart.Tooltip content={<Chart.TooltipContent hideLabel />} />\n                        <Pie data={chartData} dataKey='sales' label nameKey='category' />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-donut-active-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-donut-active-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart, Sector } from 'recharts'\nimport type { PieSectorDataItem } from 'recharts/types/polar/Pie'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 500, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 300, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 450, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 200, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 100, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutActiveDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Sales Allocation by Category'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='sales'\n                            nameKey='category'\n                            innerRadius={60}\n                            strokeWidth={5}\n                            activeIndex={0}\n                            activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                                <Sector {...props} outerRadius={outerRadius + 10} />\n                            )}\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-basic-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-basic-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Sales', amount: 275, fill: 'var(--color-sales)' },\n    { category: 'Marketing', amount: 200, fill: 'var(--color-marketing)' },\n    { category: 'IT', amount: 187, fill: 'var(--color-it)' },\n    { category: 'HR', amount: 173, fill: 'var(--color-hr)' },\n    { category: 'Operations', amount: 90, fill: 'var(--color-operations)' }\n]\n\nconst chartConfig = {\n    amount: {\n        label: 'Amount'\n    },\n    sales: {\n        label: 'Sales',\n        color: 'var(--chart-1)'\n    },\n    marketing: {\n        label: 'Marketing',\n        color: 'var(--chart-2)'\n    },\n    it: {\n        label: 'IT',\n        color: 'var(--chart-3)'\n    },\n    hr: {\n        label: 'HR',\n        color: 'var(--chart-4)'\n    },\n    operations: {\n        label: 'Operations',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartBasicDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Departmental Budget Allocation</Card.Title>\n                <Card.Description>Jan - Jun 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie data={chartData} dataKey='amount' nameKey='category' />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-donut-with-text-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-donut-with-text-demo",
    "raw": "'use client'\n\nimport { useMemo } from 'react'\n\nimport { Label, Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { category: 'Electronics', sales: 275, fill: 'var(--color-electronics)' },\n    { category: 'Clothing', sales: 200, fill: 'var(--color-clothing)' },\n    { category: 'Groceries', sales: 287, fill: 'var(--color-groceries)' },\n    { category: 'Furniture', sales: 173, fill: 'var(--color-furniture)' },\n    { category: 'Books', sales: 190, fill: 'var(--color-books)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    electronics: {\n        label: 'Electronics',\n        color: 'var(--chart-1)'\n    },\n    clothing: {\n        label: 'Clothing',\n        color: 'var(--chart-2)'\n    },\n    groceries: {\n        label: 'Groceries',\n        color: 'var(--chart-3)'\n    },\n    furniture: {\n        label: 'Furniture',\n        color: 'var(--chart-4)'\n    },\n    books: {\n        label: 'Books',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutWithTextDemo() {\n    const totalSales = useMemo(() => {\n        return chartData.reduce((acc, curr) => acc + curr.sales, 0)\n    }, [])\n\n    return (\n        <Card>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Sales Allocation by Category</Card.Title>\n                <Card.Description>Jan - Jun 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='sales'\n                            nameKey='category'\n                            innerRadius={60}\n                            strokeWidth={5}\n                        >\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-fg text-3xl font-bold'\n                                                >\n                                                    {totalSales.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-fg'\n                                                >\n                                                    Sales\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-label-list-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-label-list-demo",
    "raw": "'use client'\n\nimport { LabelList, Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { manufacturer: 'Tesla', marketShare: 500, fill: 'var(--color-tesla)' },\n    { manufacturer: 'Rivian', marketShare: 150, fill: 'var(--color-rivian)' },\n    { manufacturer: 'Ford', marketShare: 200, fill: 'var(--color-ford)' },\n    { manufacturer: 'Lucid Motors', marketShare: 120, fill: 'var(--color-lucid)' },\n    { manufacturer: 'Others', marketShare: 80, fill: 'var(--color-others)' }\n]\n\nconst chartConfig = {\n    marketShare: {\n        label: 'Market Share'\n    },\n    tesla: {\n        label: 'Tesla',\n        color: 'var(--chart-1)'\n    },\n    rivian: {\n        label: 'Rivian',\n        color: 'var(--chart-2)'\n    },\n    ford: {\n        label: 'Ford',\n        color: 'var(--chart-3)'\n    },\n    lucid: {\n        label: 'Lucid Motors',\n        color: 'var(--chart-4)'\n    },\n    others: {\n        label: 'Others',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLabelListDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='EV Market Share by Manufacturer'\n                description='Jan - Jun 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart\n                    config={chartConfig}\n                    className='[&_.recharts-text]:fill-bg mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <Chart.Tooltip\n                            content={<Chart.TooltipContent nameKey='marketShare' hideLabel />}\n                        />\n                        <Pie data={chartData} dataKey='marketShare'>\n                            <LabelList\n                                dataKey='manufacturer'\n                                className='fill-bg'\n                                stroke='none'\n                                fontSize={12}\n                                formatter={(value: keyof typeof chartConfig) =>\n                                    chartConfig[value]?.label\n                                }\n                            />\n                        </Pie>\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-none-separator-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-none-separator-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst chartData = [\n    { manufacturer: 'Tesla', marketShare: 275, fill: 'var(--color-tesla)' },\n    { manufacturer: 'Rivian', marketShare: 200, fill: 'var(--color-rivian)' },\n    { manufacturer: 'Ford', marketShare: 187, fill: 'var(--color-ford)' },\n    { manufacturer: 'Lucid Motors', marketShare: 173, fill: 'var(--color-lucid)' },\n    { manufacturer: 'Others', marketShare: 90, fill: 'var(--color-others)' }\n]\n\nconst chartConfig = {\n    marketShare: {\n        label: 'Market Share'\n    },\n    tesla: {\n        label: 'Tesla',\n        color: 'var(--chart-1)'\n    },\n    rivian: {\n        label: 'Rivian',\n        color: 'var(--chart-2)'\n    },\n    ford: {\n        label: 'Ford',\n        color: 'var(--chart-3)'\n    },\n    lucid: {\n        label: 'Lucid Motors',\n        color: 'var(--chart-4)'\n    },\n    others: {\n        label: 'Others',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartNoneSeparatorDemo() {\n    return (\n        <Card>\n            <Card.Header\n                className='items-center pb-0'\n                title='Market Share'\n                description='January - June 2024'\n            />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            cursor={false}\n                            content={<Chart.TooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='marketShare'\n                            nameKey='manufacturer'\n                            stroke='0'\n                        />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "charts/pie/pie-chart-stacked-demo": {
    "component": "@/components/docs/charts/pie/pie-chart-stacked-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport { Card, Chart, type ChartConfig } from '@/components/ui'\n\nconst northAmericaData = [\n    { region: 'North America', sales: 500, fill: 'var(--color-north-america)' },\n    { region: 'Europe', sales: 300, fill: 'var(--color-europe)' },\n    { region: 'Asia', sales: 400, fill: 'var(--color-asia)' },\n    { region: 'Africa', sales: 150, fill: 'var(--color-africa)' },\n    { region: 'South America', sales: 100, fill: 'var(--color-south-america)' }\n]\n\nconst chartConfig = {\n    sales: {\n        label: 'Sales'\n    },\n    northAmerica: {\n        label: 'North America',\n        color: 'var(--chart-1)'\n    },\n    europe: {\n        label: 'Europe',\n        color: 'var(--chart-2)'\n    },\n    asia: {\n        label: 'Asia',\n        color: 'var(--chart-3)'\n    },\n    africa: {\n        label: 'Africa',\n        color: 'var(--chart-4)'\n    },\n    southAmerica: {\n        label: 'South America',\n        color: 'var(--chart-5)'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartStackedDemo() {\n    return (\n        <Card>\n            <Card.Header title='Sales Distribution by Region' description='January - June 2024' />\n            <Card.Content className='flex-1 pb-0'>\n                <Chart config={chartConfig} className='mx-auto aspect-square max-h-[250px]'>\n                    <PieChart>\n                        <Chart.Tooltip\n                            content={\n                                <Chart.TooltipContent\n                                    labelKey='sales'\n                                    nameKey='region'\n                                    indicator='line'\n                                    labelFormatter={(_, payload) => {\n                                        return chartConfig[\n                                            payload?.[0]!.dataKey as keyof typeof chartConfig\n                                        ].label\n                                    }}\n                                />\n                            }\n                        />\n                        <Pie data={northAmericaData} dataKey='sales' outerRadius={60} />\n                    </PieChart>\n                </Chart>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "media/avatar/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar/avatar-initials-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\nexport default function AvatarInitialsDemo() {\n    return <Avatar initials='Diqi Nahdliyan' />\n}\n"
  },
  "media/avatar/avatar-status-demo": {
    "component": "@/components/docs/media/avatar/avatar-status-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\nexport default function AvatarStatusDemo() {\n    return (\n        <div className='flex flex-col gap-6'>\n            <div className='flex justify-center gap-2'>\n                <Avatar status='success' initials='DQ' src='https://i.pravatar.cc/150?img=58' />\n                <Avatar\n                    shape='square'\n                    status='success'\n                    initials='DQ'\n                    src='https://i.pravatar.cc/150?img=57'\n                />\n            </div>\n            <div className='flex justify-center gap-2'>\n                <Avatar status='primary' initials='DQ' src='https://i.pravatar.cc/150?img=63' />\n                <Avatar status='success' initials='DQ' src='https://i.pravatar.cc/150?img=59' />\n                <Avatar status='danger' initials='DQ' src='https://i.pravatar.cc/150?img=64' />\n                <Avatar status='muted' initials='DQ' src='https://i.pravatar.cc/150?img=62' />\n                <Avatar status='warning' initials='DQ' src='https://i.pravatar.cc/150?img=60' />\n            </div>\n        </div>\n    )\n}\n"
  },
  "media/avatar/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar/avatar-fallback-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\nexport default function AvatarFallbackDemo() {\n    return <Avatar />\n}\n"
  },
  "media/avatar/avatar-size-demo": {
    "component": "@/components/docs/media/avatar/avatar-size-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\ntype Sizes = keyof typeof avatarStyles.variants.variant\nexport default function AvatarSizeDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Avatar alt='avatar-sm' size='xs' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-sm' size='sm' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-md' size='md' src='https://github.com/dq-alhq.png' />\n            <Avatar alt='avatar-lg' size='lg' src='https://github.com/dq-alhq.png' />\n        </div>\n    )\n}\n"
  },
  "media/avatar/avatar-group-demo": {
    "component": "@/components/docs/media/avatar/avatar-group-demo",
    "raw": "'use client'\n\nimport { Avatar, AvatarGroup } from '@/components/ui'\n\nexport default function AvatarGroupDemo() {\n    return (\n        <AvatarGroup aria-label='avatar-group'>\n            <Avatar tooltip alt='Sample Image' src='https://i.pravatar.cc/150?img=61' />\n            <Avatar tooltip alt='Sample Image' src='https://i.pravatar.cc/150?img=62' />\n            <Avatar tooltip alt='Sample Image' src='https://i.pravatar.cc/150?img=63' />\n            <Avatar tooltip alt='Sample Image' src='https://i.pravatar.cc/150?img=64' />\n            <Avatar tooltip alt='Sample Image' src='https://i.pravatar.cc/150?img=65' />\n        </AvatarGroup>\n    )\n}\n"
  },
  "media/avatar/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar/avatar-shape-demo",
    "raw": "'use client'\n\nimport { Avatar } from '@/components/ui'\n\nexport default function AvatarShapeDemo() {\n    return (\n        <Avatar shape='square' initials='DQ' alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n    )\n}\n"
  },
  "media/carousel/carousel-autoplay-demo": {
    "component": "@/components/docs/media/carousel/carousel-autoplay-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport Autoplay from 'embla-carousel-autoplay'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselAutoplayDemo() {\n    const plugin = React.useRef(Autoplay({ delay: 1000, stopOnInteraction: true }))\n\n    return (\n        <Carousel\n            onMouseEnter={plugin.current.stop}\n            onMouseLeave={plugin.current.reset}\n            plugins={[plugin.current]}\n            opts={{\n                loop: true,\n                align: 'center'\n            }}\n            className='w-full max-w-xs [&_.card]:flex [&_.card]:h-56 [&_.card]:flex-col [&_.card]:overflow-hidden'\n        >\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <div className='p-1'>\n                            <Card>\n                                <div className='bg-fg/5 relative flex-1 border-b' />\n                                <Card.Header>\n                                    <Card.Title className='line-clamp-1 sm:text-lg'>\n                                        {item.title}\n                                    </Card.Title>\n                                    <Card.Description className='line-clamp-2'>\n                                        {item.description}\n                                    </Card.Description>\n                                </Card.Header>\n                            </Card>\n                        </div>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "media/carousel/carousel-with-collection-demo": {
    "component": "@/components/docs/media/carousel/carousel-with-collection-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselWithCollectionDemo() {\n    return (\n        <Carousel className='w-full [&_.card]:overflow-hidden [&_.card]:flex [&_.card]:flex-col max-w-xs'>\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <Card className='p-1'>\n                            <Image\n                                className='rounded-lg h-40 object-center object-cover'\n                                src={`https://picsum.photos/id/${item.id}/400/300`}\n                                alt={`image ${item.id}`}\n                                width={400}\n                                height={300}\n                            />\n                            <Card.Header className='p-3'>\n                                <Card.Title className='line-clamp-1 sm:text-lg'>\n                                    {item.title}\n                                </Card.Title>\n                                <Card.Description className='line-clamp-2'>\n                                    {item.description}\n                                </Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    }\n]\n"
  },
  "media/carousel/carousel-options-demo": {
    "component": "@/components/docs/media/carousel/carousel-options-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOptionsDemo() {\n    return (\n        <Carousel\n            opts={{\n                align: 'center',\n                loop: true\n            }}\n            className='w-full max-w-2xl'\n        >\n            <Carousel.Content items={Array.from({ length: 16 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item id={id} className='basis-1/2 lg:basis-1/3'>\n                        <Card className='flex aspect-square items-center justify-center'>\n                            <Card.Title>{id}</Card.Title>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-demo": {
    "component": "@/components/docs/media/carousel/carousel-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Carousel } from '@/components/ui'\n\nexport default function CarouselDemo() {\n    return (\n        <Carousel className='w-full [&_.card]:h-56 [&_.card]:overflow-hidden [&_.card]:flex [&_.card]:flex-col max-w-xs'>\n            <Carousel.Content>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/61/400/300'\n                        alt='image 1'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/62/400/300'\n                        alt='image 2'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/63/400/300'\n                        alt='image 3'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/64/400/300'\n                        alt='image 4'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/65/400/300'\n                        alt='image 5'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/66/400/300'\n                        alt='image 6'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-lg'\n                        src='https://picsum.photos/id/61/400/300'\n                        alt='image 7'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-api-demo": {
    "component": "@/components/docs/media/carousel/carousel-api-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button } from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\n\nimport { Card, Carousel, type CarouselApi } from '@/components/ui'\n\nexport default function CarouselDApiDemo() {\n    const [api, setApi] = React.useState<CarouselApi>()\n    const [current, setCurrent] = React.useState(0)\n    const [count, setCount] = React.useState(0)\n\n    React.useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        setCount(api.scrollSnapList().length)\n        setCurrent(api.selectedScrollSnap() + 1)\n        api.on('select', () => {\n            setCurrent(api.selectedScrollSnap() + 1)\n        })\n    }, [api])\n\n    const handleSelect = (index: number) => {\n        if (api) {\n            api.scrollTo(index)\n            setCurrent(index + 1)\n        }\n    }\n\n    return (\n        <Carousel setApi={setApi} className='w-full max-w-sm'>\n            <Carousel.Content items={Array.from({ length: 10 }, (_, id) => ({ id: id + 1 }))}>\n                {({ id }) => (\n                    <Carousel.Item id={id}>\n                        <Card>\n                            <Card.Content className='flex aspect-square items-center justify-center p-6'>\n                                <span className='text-4xl font-semibold'>{id}</span>\n                            </Card.Content>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n            <div className='mt-4 flex items-center justify-between'>\n                <div className='text-muted-fg flex gap-1 py-2 text-center text-sm'>\n                    {Array.from({ length: 10 }).map((_, index) => (\n                        <Button\n                            className={twJoin(\n                                'rounded-xl transition focus:outline-none',\n                                current === index + 1\n                                    ? 'bg-primary hover:bg-primary/80 h-3 w-5 transition-all'\n                                    : 'bg-fg/10 hover:bg-fg/15 h-3 w-3'\n                            )}\n                            aria-label={`Slide ${current} of ${count}`}\n                            onPress={() => handleSelect(index)}\n                            key={index}\n                        />\n                    ))}\n                </div>\n\n                <div className='space-x-2'>\n                    <Carousel.Button slot='previous' />\n                    <Carousel.Button slot='next' />\n                </div>\n            </div>\n        </Carousel>\n    )\n}\n"
  },
  "media/carousel/carousel-orientation-demo": {
    "component": "@/components/docs/media/carousel/carousel-orientation-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOrientationDemo() {\n    return (\n        <Carousel orientation='vertical' className='w-full relative max-w-xs'>\n            <Carousel.Content items={items} className='h-64 py-4 snap-y'>\n                {(item) => (\n                    <Carousel.Item className='pt-1 basis-1/2 md:basis-1/3 snap-center'>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title>{item.title}</Card.Title>\n                                <Card.Description>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n"
  },
  "date-and-time/time-field/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldDemo() {\n    return <TimeField defaultValue={new Time()} label='Event time' />\n}\n"
  },
  "date-and-time/time-field/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field/date-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateFieldDisabledDemo() {\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DateField\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/time-field/date-field-demo": {
    "component": "@/components/docs/date-and-time/time-field/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDemo() {\n    return <DateField label='Event date' />\n}\n"
  },
  "date-and-time/time-field/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TimeField } from '@/components/ui'\n\nexport default function TimeFieldValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <TimeField label='Event time' isRequired className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/time-field/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field/date-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateField, Form } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateField isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-disabled-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldDisabledDemo() {\n    return <TimeField isDisabled label='Event time' />\n}\n"
  },
  "date-and-time/time-field/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-hc-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Switch, TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldHcDemo() {\n    const [hc, setHc] = React.useState<12 | 24>(24)\n    const [value, setValue] = React.useState(new Time(13, 45))\n    return (\n        <>\n            <div className='absolute left-4 top-4 inline-flex min-w-32 flex-col gap-1'>\n                <Switch\n                    isSelected={hc === 24}\n                    onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}\n                >\n                    {hc} hour\n                </Switch>\n            </div>\n            <TimeField\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                hourCycle={hc}\n                label='Event time'\n            />\n        </>\n    )\n}\n"
  },
  "date-and-time/time-field/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = React.useState(new Time(11, 45))\n    return (\n        <div className='space-y-3'>\n            <div className='[&_p]:py-2'>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <TimeField\n                label='Event time'\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/time-field/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field/date-field-disabled-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return <DateField isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDisabledDemo() {\n    return <DateRangePicker isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\n\nexport default function DateRangePickerCustomValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateRangePicker\n                label='Room Booking Dates'\n                validate={(range) =>\n                    range?.end.compare(range.start) > 7\n                        ? 'Maximum booking duration is 1 week.'\n                        : null\n                }\n                defaultValue={{\n                    start: today(getLocalTimeZone()),\n                    end: today(getLocalTimeZone()).add({ weeks: 2 })\n                }}\n                className='mb-2'\n            />\n            <Button type='submit'>Book Room</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-time-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-time-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateRangePickerTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const tomorrowWeek = today.add({ days: 12 })\n\n    const [value, setValue] = React.useState({\n        start: today,\n        end: tomorrowWeek\n    })\n    return (\n        <DateRangePicker\n            hideTimeZone\n            label='Date time range'\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            hourCycle={24}\n        />\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateRangePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    const [value, setValue] = React.useState({\n        start: now,\n        end: tomorrowWeek\n    })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>\n                    {value\n                        ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n                        : '-- to --'}\n                </p>\n                <p>{value ? `${value.start.toString()} to ${value.end.toString()}` : '-- to --'}</p>\n            </div>\n            <DateRangePicker\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDemo() {\n    return <DateRangePicker label='Event date' />\n}\n"
  },
  "date-and-time/date-range-picker/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\n\nexport default function DateRangePickerValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateRangePicker isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDisabledDemo() {\n    return <DatePicker isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/date-picker/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-required-demo",
    "raw": "'use client'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\n\nexport default function DatePickerRequiredDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DatePicker label='Delivery date' name='deliveryDate' isRequired className='mb-2' />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DatePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n\n    const [value, setValue] = React.useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DatePicker\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDemo() {\n    return <DatePicker label='Event date' />\n}\n"
  },
  "date-and-time/date-picker/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, startOfYear, today } from '@internationalized/date'\n\nexport default function DatePickerInvalidDemo() {\n    const ly = startOfYear(today(getLocalTimeZone()))\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState(parseDate(ly.toString()))\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DatePicker\n                validate={(date) => (date < now ? 'Select a future date, please.' : null)}\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Delivery date'\n                className='mb-2'\n            />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-picker/date-time-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-time-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateTimeDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = React.useState(today)\n\n    return (\n        <DatePicker\n            hideTimeZone\n            hourCycle={24}\n            className='max-w-xs'\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            label='Event date'\n        />\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today, type CalendarDate } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateFieldControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState<CalendarDate>(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DateField\n                value={value}\n                onChange={(newValue) => setValue(newValue!)}\n                label='Event date'\n            />\n        </div>\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDemo() {\n    return <DateField label='Event date' />\n}\n"
  },
  "date-and-time/date-field/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateField, Form } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateField isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "date-and-time/date-field/date-time-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-time-field-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\n\nexport default function DateTimeFieldDemo() {\n    const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n    const [value, setValue] = React.useState(today)\n    return (\n        <DateField\n            hideTimeZone\n            hourCycle={24}\n            value={value}\n            onChange={(newValue) => setValue(newValue!)}\n            label='Event date'\n        />\n    )\n}\n"
  },
  "date-and-time/date-field/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-disabled-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return <DateField isDisabled label='Event date' />\n}\n"
  },
  "date-and-time/calendar/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from '@/components/ui'\n\nexport default function CalendarDemo() {\n    return <Calendar aria-label='Event date' />\n}\n"
  },
  "date-and-time/calendar/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/range-calendar-demo",
    "raw": "'use client'\n\nimport { RangeCalendar } from '@/components/ui'\n\nexport default function RangeCalendarDemo() {\n    return <RangeCalendar aria-label='Range Calendar' />\n}\n"
  },
  "buttons/toggle/toggle-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconLink, IconUnlink } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleControlledDemo() {\n    const [isSelected, setSelected] = React.useState(false)\n    return (\n        <Toggle size='icon' isSelected={isSelected} onChange={setSelected}>\n            {({ isSelected }) => <>{isSelected ? <IconUnlink /> : <IconLink />}</>}\n        </Toggle>\n    )\n}\n"
  },
  "buttons/toggle/toggle-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-variant-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleVariantDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Toggle>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n            <Toggle variant='outline'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n            <Toggle variant='dark'>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-orientation-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-orientation-demo",
    "raw": "import { IconCloud, IconCloudOff, IconLock, IconLockOpen, IconMoon, IconSun } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function App() {\n    return (\n        <div>\n            <Toggle.Group orientation='vertical'>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconMoon /> : <IconSun />}\n                            {isSelected ? 'Dark' : 'Light'} Mode\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconLock /> : <IconLockOpen />}\n                            Secure Access {isSelected ? 'On' : 'Off'}\n                        </>\n                    )}\n                </Toggle>\n                <Toggle>\n                    {({ isSelected }) => (\n                        <>\n                            {isSelected ? <IconCloud /> : <IconCloudOff />}\n                            Always Sync\n                        </>\n                    )}\n                </Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupControlledDemo() {\n    const [selected, setSelected] = React.useState(new Set<Key>(['bold']))\n\n    return (\n        <>\n            <Toggle.Group\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n            >\n                <Toggle id='bold'>Bold</Toggle>\n                <Toggle id='italic'>Italic</Toggle>\n                <Toggle id='underline'>Underline</Toggle>\n            </Toggle.Group>\n            {[...selected].length > 0 && (\n                <p className='text-muted-fg mt-4'>\n                    Selected:{' '}\n                    <strong className='text-fg font-semibold'>{[...selected].join(', ')}</strong>\n                </p>\n            )}\n        </>\n    )\n}\n"
  },
  "buttons/toggle/toggle-size-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-size-demo",
    "raw": "'use client'\n\nimport { IconEye, IconEyeClosed } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleSizeDemo() {\n    return (\n        <div className='flex flex-wrap gap-2'>\n            <Toggle variant='outline' size='icon'>\n                {({ isSelected }) => <>{isSelected ? <IconEye /> : <IconEyeClosed />}</>}\n            </Toggle>\n            <Toggle variant='outline' size='sm'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n            <Toggle variant='outline' size='md'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n            <Toggle variant='outline' size='lg'>\n                {({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}\n            </Toggle>\n        </div>\n    )\n}\n"
  },
  "buttons/toggle/toggle-shape-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-shape-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleShapeDemo() {\n    return (\n        <Toggle variant='outline' shape='circle'>\n            {({ isSelected }) => <>{isSelected ? 'Disabled' : 'Enabled'}</>}\n        </Toggle>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-disabled-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDisabledDemo() {\n    return (\n        <Toggle.Group isDisabled>\n            <Toggle id='left'>Left</Toggle>\n            <Toggle id='center'>Center</Toggle>\n            <Toggle id='right'>Right</Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDemo() {\n    return <Toggle>{({ isSelected }) => <>{isSelected ? 'ON' : 'OFF'}</>}</Toggle>\n}\n"
  },
  "buttons/toggle/toggle-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-disabled-demo",
    "raw": "'use client'\n\nimport { IconPower } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleDisabledDemo() {\n    return (\n        <Toggle size='icon' isDisabled>\n            <IconPower />\n        </Toggle>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-selection-mode-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-selection-mode-demo",
    "raw": "'use client'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupSelectionModeDemo() {\n    return (\n        <Toggle.Group defaultSelectedKeys={['center']} selectionMode='single'>\n            <Toggle id='left'>Left</Toggle>\n            <Toggle id='center'>Center</Toggle>\n            <Toggle id='right'>Right</Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-demo",
    "raw": "'use client'\n\nimport { IconHeading, IconParagraph } from 'hq-icons'\n\nimport { Toggle } from '@/components/ui'\n\nexport default function ToggleGroupDemo() {\n    return (\n        <Toggle.Group>\n            <Toggle>\n                <IconParagraph />\n                Paragraph\n            </Toggle>\n            <Toggle>\n                <IconHeading />\n                Heading\n            </Toggle>\n        </Toggle.Group>\n    )\n}\n"
  },
  "buttons/toggle/toggle-group-variant-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-group-variant-demo",
    "raw": "'use client'\n\nimport { Separator, Toggle } from '@/components/ui'\n\nexport default function ToggleGroupVariantDemo() {\n    return (\n        <div className='flex flex-col gap-y-6'>\n            <Toggle.Group defaultSelectedKeys={['left']} selectionMode='single'>\n                <Toggle id='left'>Left</Toggle>\n                <Toggle id='center'>Center</Toggle>\n                <Toggle id='right'>Right</Toggle>\n            </Toggle.Group>\n            <Separator />\n            <Toggle.Group variant='outline' defaultSelectedKeys={['center']} selectionMode='single'>\n                <Toggle id='left'>Left</Toggle>\n                <Toggle id='center'>Center</Toggle>\n                <Toggle id='right'>Right</Toggle>\n            </Toggle.Group>\n            <Separator />\n            <Toggle.Group variant='dark' defaultSelectedKeys={['right']} selectionMode='single'>\n                <Toggle id='left'>Left</Toggle>\n                <Toggle id='center'>Center</Toggle>\n                <Toggle id='right'>Right</Toggle>\n            </Toggle.Group>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-link-demo": {
    "component": "@/components/docs/buttons/button/button-link-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Link } from '@/components/ui'\n\nexport default function ButtonLinkDemo() {\n    return (\n        <Link variant='unstyled' className={buttonStyles({ variant: 'success' })} href='#'>\n            Choicebox\n        </Link>\n    )\n}\n"
  },
  "buttons/button/button-size-demo": {
    "component": "@/components/docs/buttons/button/button-size-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonSizeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Button size='xs'>xs</Button>\n            <Button size='sm'>sm</Button>\n            <Button>md (default)</Button>\n            <Button size='lg'>lg</Button>\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-loader-demo": {
    "component": "@/components/docs/buttons/button/button-loader-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconCircleCheck, IconKey } from 'hq-icons'\n\nimport { Button, Loader } from '@/components/ui'\n\nexport default function ButtonLoaderDemo() {\n    const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n    const pressHandler = () => {\n        setLoading('loading')\n\n        setTimeout(() => setLoading('success'), 3000)\n\n        setTimeout(() => setLoading('idle'), 6000)\n    }\n\n    return (\n        <Button\n            isDisabled={loading === 'loading'}\n            className='w-52 justify-between'\n            onPress={pressHandler}\n        >\n            {loading === 'success' ? (\n                <IconCircleCheck />\n            ) : loading === 'loading' ? (\n                <Loader variant='spin' />\n            ) : (\n                <IconKey />\n            )}\n            {loading === 'loading'\n                ? 'Generating Key...'\n                : loading === 'success'\n                  ? 'Key Generated!'\n                  : 'Generate API Key'}\n        </Button>\n    )\n}\n"
  },
  "buttons/button/button-disabled-demo": {
    "component": "@/components/docs/buttons/button/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonDisabledDemo() {\n    return <Button isDisabled>Label</Button>\n}\n"
  },
  "buttons/button/button-shape-demo": {
    "component": "@/components/docs/buttons/button/button-shape-demo",
    "raw": "'use client'\n\nimport { titleCase } from 'usemods'\n\nimport { Button, buttonStyles } from '@/components/ui'\n\ntype Shapes = keyof typeof buttonStyles.variants.shape\n\nexport default function ButtonShapeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(buttonStyles.variants.shape).map((shape) => (\n                <div key={shape}>\n                    <Button shape={shape as Shapes}>{titleCase(shape)}</Button>\n                </div>\n            ))}\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-icon-demo": {
    "component": "@/components/docs/buttons/button/button-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconDemo() {\n    return (\n        <Button variant='danger'>\n            <IconBrandGithub />\n            Github\n        </Button>\n    )\n}\n"
  },
  "buttons/button/button-variant-demo": {
    "component": "@/components/docs/buttons/button/button-variant-demo",
    "raw": "'use client'\n\nimport { titleCase } from 'usemods'\n\nimport { Button, buttonStyles } from '@/components/ui'\n\ntype Appearance = keyof typeof buttonStyles.variants.variant\n\nexport default function ButtonVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(buttonStyles.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Button variant={variant as Appearance}>{titleCase(variant)}</Button>\n                </div>\n            ))}\n        </div>\n    )\n}\n"
  },
  "buttons/button/button-basic-demo": {
    "component": "@/components/docs/buttons/button/button-basic-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonBasicDemo() {\n    return <Button onPress={() => alert('You pressed me')}>Button</Button>\n}\n"
  },
  "buttons/button/button-icon-only-demo": {
    "component": "@/components/docs/buttons/button/button-icon-only-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub } from 'hq-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconOnlyDemo() {\n    return (\n        <Button size='icon'>\n            <IconBrandGithub />\n        </Button>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerCameraDemo() {\n    return <FileTrigger defaultCamera='environment'>Open a camera</FileTrigger>\n}\n"
  },
  "buttons/file-trigger/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = React.useState<string[] | null>(null)\n    return (\n        <>\n            <FileTrigger\n                isDisabled\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            />\n            {file && <Description>{file}</Description>}\n        </>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerFolderDemo() {\n    return <FileTrigger acceptDirectory />\n}\n"
  },
  "buttons/file-trigger/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerMultipleDemo() {\n    return <FileTrigger allowsMultiple />\n}\n"
  },
  "buttons/file-trigger/file-trigger-controlled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = React.useState<string[] | null>(null)\n    return (\n        <>\n            <FileTrigger\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            />\n            {file && (\n                <Description className='[&>strong]:text-fg mt-2 block max-w-60 truncate [&>strong]:font-medium'>\n                    Your file: <strong>{file}</strong>\n                </Description>\n            )}\n        </>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-avatar-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-avatar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { isFileDropItem } from 'react-aria-components'\n\nimport { Avatar, DropZone, FileTrigger, cn } from '@/components/ui'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function FileTriggerAvatarDemo() {\n    const [droppedImage, setDroppedImage] = React.useState<string | undefined>(undefined)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    async function onSelectHandler(e: FileList | null) {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n\n    return (\n        <div className='flex items-center gap-2'>\n            <DropZone\n                getDropOperation={() => 'copy'}\n                onDrop={onDropHandler}\n                className={cn(\n                    '[&_[data-slot=avatar]]:bg-transparent [&_[data-slot=avatar]]:outline-none rounded-full p-0 overflow-hidden size-10'\n                )}\n            >\n                {droppedImage ? (\n                    <Avatar src={droppedImage} size='lg' />\n                ) : (\n                    <Avatar initials='DQ' size='lg' />\n                )}\n                <input type='hidden' name='image' value={droppedImage} />\n            </DropZone>\n            <FileTrigger\n                size='sm'\n                withIcon={false}\n                acceptedFileTypes={['image/png', 'image/jpeg']}\n                onSelect={onSelectHandler}\n            >\n                Upload avatar\n            </FileTrigger>\n        </div>\n    )\n}\n"
  },
  "buttons/file-trigger/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    return <FileTrigger />\n}\n"
  },
  "colors/color-wheel/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-demo",
    "raw": "'use client'\n\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelDemo() {\n    return <ColorWheel aria-label='Background color' />\n}\n"
  },
  "colors/color-wheel/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorWheel, Description } from '@/components/ui'\n\nexport default function ColorWheelControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n    return (\n        <div className='grid gap-4 justify-center items-center sm:grid-cols-2'>\n            <div className='shrink-0 grid place-content-center'>\n                <ColorWheel aria-label='Background color' value={color} onChange={setColor} />\n            </div>\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-wheel/color-wheel-disabled-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-disabled-demo",
    "raw": "'use client'\n\nimport { ColorWheel } from '@/components/ui'\n\nexport default function ColorWheelDisabledDemo() {\n    return <ColorWheel aria-label='Background color is disabled' isDisabled />\n}\n"
  },
  "colors/color-swatch/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <ColorSwatchPicker\n            aria-label='Pick color'\n            value={value}\n            onChange={setValue}\n            className='grid grid-cols-3 lg:grid-cols-6 gap-2'\n        >\n            <ColorSwatchPicker.Item color='#f59e0b' />\n            <ColorSwatchPicker.Item color='#84cc16' />\n            <ColorSwatchPicker.Item color='#0d6efd' />\n            <ColorSwatchPicker.Item color='#ec4899' />\n            <ColorSwatchPicker.Item color='#f43f5e' />\n        </ColorSwatchPicker>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-controlled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker, Description } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [color, setColor] = React.useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                value={color}\n                onChange={setColor}\n                className='flex justify-center gap-2'\n            >\n                <ColorSwatchPicker.Item color='#f59e0b' />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item color='#ec4899' />\n                <ColorSwatchPicker.Item color='#f43f5e' />\n            </ColorSwatchPicker>\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-item-disabled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorSwatchPicker, Description } from '@/components/ui'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <div className='flex flex-col gap-4'>\n            <ColorSwatchPicker\n                aria-label='Pick color'\n                value={value}\n                onChange={setValue}\n                className='flex justify-center gap-2'\n            >\n                <ColorSwatchPicker.Item isDisabled color='#f59e0b' />\n                <ColorSwatchPicker.Item color='#84cc16' />\n                <ColorSwatchPicker.Item color='#0d6efd' />\n                <ColorSwatchPicker.Item isDisabled color='#ec4899' />\n                <ColorSwatchPicker.Item isDisabled color='#f43f5e' />\n            </ColorSwatchPicker>\n\n            <Description>{value.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-swatch/color-swatch-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-demo",
    "raw": "'use client'\n\nimport { ColorSwatch } from '@/components/ui'\n\nexport default function ColorSwatchDemo() {\n    return <ColorSwatch aria-label='Current color' color='#0d6efd' />\n}\n"
  },
  "colors/color-picker/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDemo() {\n    const [color, setColor] = React.useState(parseColor('#0d6efd'))\n    return <ColorPicker label='Color Picker' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-label-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker label='Theme Color' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-selection-format-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorPicker, defaultColor, Select } from '@/components/ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const [isHexFormat, setIsHexFormat] = React.useState(false)\n    const [space, setSpace] = React.useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker label={color.toString(space)} value={color} onChange={setColor}>\n            <>\n                <ColorArea />\n                <Select\n                    aria-label='Color Space'\n                    selectedKey={space}\n                    defaultSelectedKey={space}\n                    onSelectionChange={(s) => {\n                        setSpace(s as ColorSpace)\n                        setIsHexFormat(s === 'hex')\n                    }}\n                >\n                    {['rgb', 'hex', 'hsl', 'hsb'].map((s) => (\n                        <Select.Item key={s} id={s} textValue={s}>\n                            {s}\n                        </Select.Item>\n                    ))}\n                </Select>\n                {isHexFormat ? (\n                    <ColorField aria-label='Hex color' colorSpace={space} />\n                ) : getColorChannels(space).length > 0 ? (\n                    <div className='flex sm:max-w-56 gap-2'>\n                        {getColorChannels(space).map((channel) => (\n                            <ColorField colorSpace={space} channel={channel} key={channel} />\n                        ))}\n                    </div>\n                ) : null}\n            </>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorPicker } from '@/components/ui'\n\nexport default function ColorPickerDisabledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n    return <ColorPicker isDisabled label='Color Picker' value={color} onChange={setColor} />\n}\n"
  },
  "colors/color-picker/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-swatch-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Color } from 'react-aria-components'\n\nimport {\n    ColorArea,\n    ColorField,\n    ColorPicker,\n    ColorSlider,\n    ColorSwatchPicker,\n    defaultColor\n} from '@/components/ui'\n\nexport default function ColorPickerEnableSwatchDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const colorChangeHandler = (v: Color) => {\n        setColor(v)\n    }\n    return (\n        <ColorPicker value={color} onChange={(v) => colorChangeHandler(v)}>\n            <ColorArea colorSpace='hsb' xChannel='saturation' yChannel='brightness' />\n            <ColorSlider colorSpace='hsb' channel='hue' />\n            <ColorField aria-label='Hex color' />\n            <ColorSwatchPicker\n                aria-label='Color swatch picker'\n                layout='grid'\n                className='flex flex-wrap gap-2'\n            >\n                {colors.map((color) => (\n                    <ColorSwatchPicker.Item key={color} color={color} />\n                ))}\n            </ColorSwatchPicker>\n        </ColorPicker>\n    )\n}\n\nconst colors = [\n    '#f59e0b',\n    '#84cc16',\n    '#0d6efd',\n    '#ec4899',\n    '#f43f5e',\n    '#d4b990',\n    '#b19f73',\n    '#9370db',\n    '#7d60df'\n]\n"
  },
  "colors/color-picker/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-combination-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type ColorSpace, getColorChannels } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorPicker, ColorSlider, Select } from '@/components/ui'\n\nexport default function ColorPickerCombinationDemo() {\n    const [space, setSpace] = React.useState<ColorSpace>('rgb')\n    return (\n        <ColorPicker label='Color picker' defaultValue='#0d6efd'>\n            <ColorArea colorSpace={space} />\n            {getColorChannels(space).map((channel) => (\n                <ColorSlider\n                    showOutput={false}\n                    key={channel}\n                    colorSpace={space}\n                    channel={channel}\n                />\n            ))}\n            <Select\n                aria-label='Color space'\n                selectedKey={space}\n                onSelectionChange={(s) => setSpace(s as ColorSpace)}\n            >\n                {['rgb', 'hsb', 'hsl'].map((s) => (\n                    <Select.Item key={s} id={s} textValue={s}>\n                        {s}\n                    </Select.Item>\n                ))}\n            </Select>\n            <div className='flex gap-2 sm:max-w-56'>\n                {getColorChannels(space).map((channel) => (\n                    <ColorField\n                        key={channel}\n                        colorSpace={space}\n                        channel={channel}\n                        className='w-full'\n                    />\n                ))}\n            </div>\n        </ColorPicker>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor, Description } from '@/components/ui'\n\nexport default function ColorPickerControlledDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n\n    return (\n        <div className='flex flex-col lg:flex-row gap-2 lg:gap-4'>\n            <ColorPicker value={color} onChange={setColor} />\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-picker/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-description-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithDescriptionDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <ColorPicker\n            label='Theme Color'\n            description='Snag a color for the app theme'\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n"
  },
  "colors/color-field/color-field-demo": {
    "component": "@/components/docs/colors/color-field/color-field-demo",
    "raw": "'use client'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDemo() {\n    return <ColorField label='Color' placeholder='#FAFAFA' />\n}\n"
  },
  "colors/color-field/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field/color-field-with-prefix-demo",
    "raw": "'use client'\n\nimport { IconSwatchBook } from 'hq-icons'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldWithPrefixDemo() {\n    return <ColorField label='Color' prefix={<IconSwatchBook />} placeholder='#FAFAFA' />\n}\n"
  },
  "colors/color-field/color-field-disabled-demo": {
    "component": "@/components/docs/colors/color-field/color-field-disabled-demo",
    "raw": "'use client'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDisabledDemo() {\n    return <ColorField isDisabled label='Color' placeholder='#FAFAFA' />\n}\n"
  },
  "colors/color-field/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field/color-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Color, parseColor } from 'react-aria-components'\n\nimport { ColorField, Description } from '@/components/ui'\n\nexport default function ColorFieldControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('#FAFAFA'))\n    return (\n        <div className='flex flex-col items-center gap-2'>\n            <ColorField\n                className='min-w-56'\n                value={color}\n                aria-label='Pick a color'\n                onChange={(newColor: Color | null) => newColor && setColor(newColor)}\n                placeholder='#FAFAFA'\n            />\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-field/color-field-with-suffix-demo": {
    "component": "@/components/docs/colors/color-field/color-field-with-suffix-demo",
    "raw": "'use client'\n\nimport { IconSwatchBook } from 'hq-icons'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldWithSuffixDemo() {\n    return <ColorField label='Color' suffix={<IconSwatchBook />} placeholder='#FAFAFA' />\n}\n"
  },
  "colors/color-slider/color-slider-disabled-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-disabled-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDisabledDemo() {\n    return <ColorSlider isDisabled channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n"
  },
  "colors/color-slider/color-slider-controlled-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorSlider, defaultColor, Description } from '@/components/ui'\n\nexport default function ColorSliderControlledDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <div className='flex flex-col gap-2'>\n            <ColorSlider channel='hue' value={color} onChange={setColor} />\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-vertical-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-vertical-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderVerticalDemo() {\n    return (\n        <div className='flex items-center justify-center'>\n            <ColorSlider\n                orientation='vertical'\n                aria-label='Fill Color'\n                channel='hue'\n                defaultValue='hsl(0, 100%, 50%)'\n            />\n        </div>\n    )\n}\n"
  },
  "colors/color-slider/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDemo() {\n    return <ColorSlider label='Fill color' channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n"
  },
  "colors/color-slider/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-with-label-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderWithLabelDemo() {\n    return <ColorSlider label='Color Customizer' channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n"
  },
  "colors/color-area/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area/color-area-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorArea, ColorThumb, Description } from '@/components/ui'\n\nexport default function ColorAreaControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n\n    return (\n        <div className='flex flex-col lg:flex-row gap-2 lg:gap-4'>\n            <ColorArea value={color} onChange={setColor}>\n                <ColorThumb />\n            </ColorArea>\n            <Description>{color.toString('css')}</Description>\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-demo": {
    "component": "@/components/docs/colors/color-area/color-area-demo",
    "raw": "'use client'\n\nimport { ColorArea } from '@/components/ui'\n\nexport default function ColorAreaDemo() {\n    return <ColorArea />\n}\n"
  },
  "colors/color-area/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area/color-area-space-demo",
    "raw": "'use client'\n\nimport { ColorArea, ColorThumb } from '@/components/ui'\n\nexport default function ColorAreaSpaceDemo() {\n    return (\n        <ColorArea colorSpace='rgb'>\n            <ColorThumb />\n        </ColorArea>\n    )\n}\n"
  },
  "colors/color-area/color-area-with-slider-demo": {
    "component": "@/components/docs/colors/color-area/color-area-with-slider-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from 'react-aria-components'\n\nimport { ColorArea, ColorField, ColorSlider } from '@/components/ui'\n\nexport default function ColorAreaWithSliderDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(50, 100%, 50%)'))\n    return (\n        <div className='flex max-w-60 flex-col gap-y-2'>\n            <ColorArea\n                className='w-full shrink-0'\n                value={color}\n                onChange={setColor}\n                xChannel='saturation'\n                yChannel='lightness'\n            />\n            <ColorSlider\n                label='Fill Color'\n                className='orientation-horizontal:w-full'\n                channel='hue'\n                value={color}\n                onChange={setColor}\n            />\n\n            <ColorField\n                label='Current Color'\n                enableColorPicker={false}\n                value={color.toString('hex')}\n            />\n        </div>\n    )\n}\n"
  },
  "colors/color-area/color-area-disabled-demo": {
    "component": "@/components/docs/colors/color-area/color-area-disabled-demo",
    "raw": "'use client'\n\nimport { ColorArea, ColorThumb as Thumb } from '@/components/ui'\n\nexport default function ColorAreaDisabledDemo() {\n    return (\n        <ColorArea isDisabled>\n            <Thumb />\n        </ColorArea>\n    )\n}\n"
  },
  "colors/color-area/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area/color-area-channel-demo",
    "raw": "'use client'\n\nimport { ColorArea } from '@/components/ui'\n\nexport default function ColorAreaChannelDemo() {\n    return <ColorArea xChannel='alpha' yChannel='blue' />\n}\n"
  },
  "collections/tag-group/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-disabled-demo",
    "raw": "'use client'\n\nimport { androidBrands } from '@/components/docs/collections/tag-group/tag-group-demo'\nimport { Tag } from '@/components/ui'\n\nexport default function TagGroupDisabledDemo() {\n    return (\n        <div className='space-y-6'>\n            <Tag.Group\n                disabledKeys={androidBrands\n                    .filter((brand) => !brand.available)\n                    .map((brand) => brand.id)}\n                label='Disabled Key'\n                selectionMode='multiple'\n            >\n                <Tag.List items={androidBrands}>{(item) => <Tag>{item.name}</Tag>}</Tag.List>\n            </Tag.Group>\n\n            <Tag.Group label='Disabled by Tag' selectionMode='multiple'>\n                <Tag.List items={androidBrands}>\n                    {(item) => <Tag isDisabled={item.available}>{item.name}</Tag>}\n                </Tag.List>\n            </Tag.Group>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-variant-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-variant-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { badgeStyles, Tag, TagGroupProps } from '@/components/ui'\n\nconst shoes = [\n    { id: '1', name: 'Nike', available: true },\n    { id: '2', name: 'Adidas', available: false },\n    { id: '3', name: 'Puma', available: true },\n    { id: '4', name: 'Reebok', available: true }\n]\n\ntype Appearance = TagGroupProps['variant']\n\nexport default function TagGroupVariantDemo() {\n    const shoesList = useListData({\n        initialItems: shoes\n    })\n    return (\n        <div className='max-w-sm space-y-2'>\n            {Object.keys(badgeStyles.variants.variant).map((variant) => (\n                <Tag.Group\n                    key={variant}\n                    aria-label={variant}\n                    selectionMode='multiple'\n                    onRemove={(keys) => shoesList.remove(...keys)}\n                    variant={variant as Appearance}\n                >\n                    <Tag.List items={shoesList.items}>{(item) => <Tag>{item.name}</Tag>}</Tag.List>\n                </Tag.Group>\n            ))}\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-shape-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-shape-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { badgeStyles, Tag, TagGroupProps } from '@/components/ui'\n\nconst carModels = [\n    { id: '1', name: 'Tesla Model S', available: true },\n    { id: '2', name: 'Ford Mustang', available: false },\n    { id: '3', name: 'Chevrolet Camaro', available: true },\n    { id: '4', name: 'BMW M3', available: false },\n    { id: '5', name: 'Audi R8', available: true }\n]\ntype Shapes = TagGroupProps['shape']\n\nexport default function TagGroupShapeDemo() {\n    const carList = useListData({\n        initialItems: carModels\n    })\n    return (\n        <div className='max-w-sm space-y-6'>\n            {Object.keys(badgeStyles.variants.shape).map((shape) => (\n                <Tag.Group\n                    key={shape}\n                    aria-label={shape}\n                    selectionMode='multiple'\n                    onRemove={(keys) => carList.remove(...keys)}\n                    shape={shape as Shapes}\n                >\n                    <Tag.List items={carList.items}>{(item) => <Tag>{item.name}</Tag>}</Tag.List>\n                </Tag.Group>\n            ))}\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nexport const androidBrands = [\n    { id: '1', name: 'Samsung', available: false },\n    { id: '2', name: 'OnePlus', available: true },\n    { id: '3', name: 'Google', available: true },\n    { id: '4', name: 'Xiaomi', available: false }\n]\n\nexport default function TagGroupDemo() {\n    return (\n        <Tag.Group label='Android Brands' selectionMode='multiple'>\n            <Tag.List items={androidBrands}>{(item) => <Tag>{item.name}</Tag>}</Tag.List>\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-href-demo",
    "raw": "'use client'\n\nimport { Tag } from '@/components/ui'\n\nconst articles = [\n    { name: 'React Tutorial', url: '#' },\n    { name: 'TypeScript Handbook', url: '#' },\n    { name: 'JavaScript Guide', url: '#' }\n]\n\nexport default function TagGroupControlledDemo() {\n    return (\n        <Tag.Group>\n            <Tag.List items={articles}>\n                {(item) => (\n                    <Tag id={item.name} href={item.url}>\n                        {item.name}\n                    </Tag>\n                )}\n            </Tag.List>\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, Tag } from '@/components/ui'\n\nconst fruitList = [\n    { id: '1', name: 'Apple', available: false },\n    { id: '2', name: 'Banana', available: true },\n    { id: '3', name: 'Cherry', available: true },\n    { id: '4', name: 'Date', available: false }\n]\n\nexport default function TagGroupControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([]))\n    return (\n        <div>\n            <Tag.Group\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n            >\n                <Tag.List items={fruitList}>{(item) => <Tag>{item.name}</Tag>}</Tag.List>\n            </Tag.Group>\n\n            <Description className='[&>strong]:text-fg text-muted-fg mt-2 block'>\n                You have selected: <strong>{Array.from(selected).join(', ')}</strong>\n            </Description>\n        </div>\n    )\n}\n"
  },
  "collections/tag-group/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Tag } from '@/components/ui'\n\nexport default function TagGroupWithRemoveDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: '1', name: 'Ferrari', available: true },\n            { id: '2', name: 'Lamborghini', available: false },\n            { id: '3', name: 'Porsche', available: true },\n            { id: '4', name: 'Bugatti', available: false },\n            { id: '5', name: 'McLaren', available: true },\n            { id: '6', name: 'Aston Martin', available: true },\n            { id: '7', name: 'Bentley', available: false },\n            { id: '8', name: 'Rolls-Royce', available: true },\n            { id: '9', name: 'Maserati', available: false },\n            { id: '10', name: 'Jaguar', available: true }\n        ]\n    })\n\n    return (\n        <Tag.Group\n            selectionMode='multiple'\n            className='max-w-sm'\n            onRemove={(keys) => list.remove(...keys)}\n        >\n            <Tag.List items={list.items}>{(item) => <Tag>{item.name}</Tag>}</Tag.List>\n        </Tag.Group>\n    )\n}\n"
  },
  "collections/menu/menu-sub-demo": {
    "component": "@/components/docs/collections/menu/menu-sub-demo",
    "raw": "'use client'\n\nimport { Button, Menu } from '@/components/ui'\n\nexport default function MenuSubDemo() {\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content placement='bottom'>\n                <Menu.Item>\n                    <Menu.Label>Dashboard</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Reports</Menu.Label>\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Submenu>\n                    <Menu.Item>\n                        <Menu.Label>Settings</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Content>\n                        <Menu.Item>\n                            <Menu.Label>General</Menu.Label>\n                        </Menu.Item>\n                        <Menu.Item>\n                            <Menu.Label>Security</Menu.Label>\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Submenu>\n                            <Menu.Item>\n                                <Menu.Label>Privacy</Menu.Label>\n                            </Menu.Item>\n                            <Menu.Content>\n                                <Menu.Item>\n                                    <Menu.Label>Data Sharing</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <Menu.Label>Cookies</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Separator />\n                                <Menu.Submenu>\n                                    <Menu.Item>\n                                        <Menu.Label>Advanced</Menu.Label>\n                                    </Menu.Item>\n                                    <Menu.Content>\n                                        <Menu.Item>\n                                            <Menu.Label>Encryption</Menu.Label>\n                                        </Menu.Item>\n                                        <Menu.Item>\n                                            <Menu.Label>Access Logs</Menu.Label>\n                                        </Menu.Item>\n                                        <Menu.Item>\n                                            <Menu.Label>API Keys</Menu.Label>\n                                        </Menu.Item>\n                                    </Menu.Content>\n                                </Menu.Submenu>\n                            </Menu.Content>\n                        </Menu.Submenu>\n                    </Menu.Content>\n                </Menu.Submenu>\n                <Menu.Item>\n                    <Menu.Label>Help</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-item-details-demo": {
    "component": "@/components/docs/collections/menu/menu-item-details-demo",
    "raw": "'use client'\n\nimport { Button, Menu } from '@/components/ui'\n\nexport default function MenuItemDetailsDemo() {\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content placement='bottom' items={roles}>\n                {(item) => (\n                    <Menu.Item id={item.id} textValue={item.name}>\n                        <Menu.ItemDetails label={item.name} description={item.description} />\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n"
  },
  "collections/menu/menu-section-level-demo": {
    "component": "@/components/docs/collections/menu/menu-section-level-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport {\n    IconAlignCenter,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconClipboard,\n    IconCopy,\n    IconItalic,\n    IconScissors,\n    IconUnderline\n} from 'hq-icons'\nimport type { Selection } from 'react-aria-components'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSectionLevelDemo() {\n    const [style, setStyle] = useState<Selection>(new Set(['bold']))\n    const [align, setAlign] = useState<Selection>(new Set(['left']))\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content placement='bottom' className='sm:min-w-52'>\n                <Menu.Section title='Actions'>\n                    <Menu.Item textValue='Cut'>\n                        <IconScissors />\n                        <Menu.Label>Cut</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item textValue='Copy'>\n                        <IconCopy />\n                        <Menu.Label>Copy</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item textValue='Paste'>\n                        <IconClipboard />\n                        <Menu.Label>Paste</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n                <Menu.Section\n                    selectionMode='multiple'\n                    selectedKeys={style}\n                    onSelectionChange={setStyle}\n                    title='Text style'\n                >\n                    <Menu.Item id='bold' textValue='Bold'>\n                        <IconBold />\n                        <Menu.Label>Bold</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='italic' textValue='Italic'>\n                        <IconItalic />\n                        <Menu.Label>Italic</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='underline' textValue='Underline'>\n                        <IconUnderline />\n                        <Menu.Label>Underline</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n                <Menu.Section\n                    selectionMode='single'\n                    selectedKeys={align}\n                    onSelectionChange={setAlign}\n                    title='Text alignment'\n                >\n                    <Menu.Item id='left' textValue='Left'>\n                        <IconAlignLeft />\n                        <Menu.Label>Left</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='center' textValue='Cente'>\n                        <IconAlignCenter />\n                        <Menu.Label>Center</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Item id='right' textValue='Right'>\n                        <IconAlignRight />\n                        <Menu.Label>Right</Menu.Label>\n                    </Menu.Item>\n                </Menu.Section>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu/menu-with-icon-demo",
    "raw": "'use client'\n\nimport {\n    IconCommand,\n    IconGauge,\n    IconHeadphones,\n    IconLogOut,\n    IconMonitor,\n    IconMoon,\n    IconSettings,\n    IconSun\n} from 'hq-icons'\nimport { useTheme } from 'next-themes'\n\nimport { Avatar, Menu } from '@/components/ui'\n\nexport default function MenuWithIconDemo() {\n    const { resolvedTheme, setTheme } = useTheme()\n    return (\n        <Menu>\n            <Menu.Trigger>\n                <Avatar alt='dq-alhq' className='size-10' src='https://github.com/dq-alhq.png' />\n            </Menu.Trigger>\n            <Menu.Content placement='bottom' showArrow className='sm:min-w-64'>\n                <Menu.Section>\n                    <Menu.Header separator>\n                        <span className='block'>DQ Al-Haqqi</span>\n                        <span className='text-muted-fg font-normal'>@dq-alhq</span>\n                    </Menu.Header>\n                </Menu.Section>\n\n                <Menu.Item href='#dashboard'>\n                    <IconGauge />\n                    Dashboard\n                </Menu.Item>\n                <Menu.Item href='#settings'>\n                    <IconSettings />\n                    Settings\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item>\n                    <IconCommand />\n                    Command Menu\n                </Menu.Item>\n                <Menu.Submenu>\n                    <Menu.Item>\n                        {resolvedTheme === 'light' ? (\n                            <IconSun />\n                        ) : resolvedTheme === 'dark' ? (\n                            <IconMoon />\n                        ) : (\n                            <IconMonitor />\n                        )}\n                        Switch theme\n                    </Menu.Item>\n                    <Menu.Content>\n                        <Menu.Item onAction={() => setTheme('system')}>\n                            <IconMonitor /> System\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme('dark')}>\n                            <IconMoon /> Dark\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme('light')}>\n                            <IconSun /> Light\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu.Submenu>\n                <Menu.Separator />\n                <Menu.Item href='#contact-s'>\n                    <IconHeadphones />\n                    Contact Support\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item href='#logout'>\n                    <IconLogOut />\n                    Log out\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/multiple-menu-demo": {
    "component": "@/components/docs/collections/menu/multiple-menu-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Button, Menu } from '@/components/ui'\n\nexport default function MultipleMenuDemo() {\n    const [selected, setSelected] = useState<Selection>(new Set(['autoPlay']))\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content\n                placement='bottom'\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={items}\n            >\n                {(item) => (\n                    <Menu.Item id={item.slug} textValue={item.name}>\n                        <Menu.Label>{item.name}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst items = [\n    {\n        name: 'Auto-Play Videos',\n        slug: 'autoPlay'\n    },\n    {\n        name: 'High-Quality Streaming',\n        slug: 'highQuality'\n    },\n    {\n        name: 'Exclusive Releases',\n        slug: 'exclusiveContent'\n    },\n    {\n        name: 'Default Subtitles',\n        slug: 'subtitles'\n    },\n    {\n        name: 'Personalized Recommendations',\n        slug: 'recommendations'\n    },\n    {\n        name: 'Background Play',\n        slug: 'backgroundPlay'\n    },\n    {\n        name: 'Allow Downloads',\n        slug: 'download'\n    }\n]\n"
  },
  "collections/menu/menu-disabled-demo": {
    "component": "@/components/docs/collections/menu/menu-disabled-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDisabledDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content className='min-w-48' placement='bottom'>\n                <Menu.Item id='view'>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='edit'>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='gsu' isDisabled>\n                    <Menu.Label>Generate Short URL</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-basic-demo": {
    "component": "@/components/docs/collections/menu/menu-basic-demo",
    "raw": "'use client'\n\nimport { IconInbox, IconSend } from 'hq-icons'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuBasicDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content placement='bottom'>\n                <Menu.Item>\n                    <IconInbox />\n                    <Menu.Label>Inbox</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <IconSend />\n                    <Menu.Label>Sent</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>New Message</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-with-arrow-demo": {
    "component": "@/components/docs/collections/menu/menu-with-arrow-demo",
    "raw": "'use client'\n\nimport { IconHash, IconHeadphones, IconLogOut, IconPlus, IconSettings } from 'hq-icons'\n\nimport { Avatar, Menu } from '@/components/ui'\n\nexport default function MenuWithArrowDemo() {\n    return (\n        <>\n            <Menu>\n                <Menu.Trigger aria-label='Open Menu'>\n                    <Avatar className='size-10' src='https://github.com/dq-alhq.png' />\n                </Menu.Trigger>\n                <Menu.Content placement='bottom' showArrow className='min-w-64'>\n                    <Menu.Header separator>\n                        <span className='block'>DQ Al-Haqqi</span>\n                        <span className='text-muted-fg font-normal'>@dq-alhq</span>\n                    </Menu.Header>\n                    <Menu.Item>\n                        <IconSettings />\n                        Pengaturan\n                    </Menu.Item>\n                    <Menu.Item href='#'>\n                        <IconPlus />\n                        Create Team\n                    </Menu.Item>\n                    <Menu.Item href='#'>\n                        <IconHash />\n                        Command Menu\n                        <Menu.Keyboard keys='⌘K' />\n                    </Menu.Item>\n                    <Menu.Separator />\n                    <Menu.Item href='#'>\n                        <IconHeadphones />\n                        Contact Support\n                    </Menu.Item>\n                    <Menu.Separator />\n                    <Menu.Item>\n                        <IconLogOut />\n                        Log out\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </>\n    )\n}\n"
  },
  "collections/menu/menu-collection-demo": {
    "component": "@/components/docs/collections/menu/menu-collection-demo",
    "raw": "'use client'\n\nimport { Button, Menu } from '@/components/ui'\n\nexport default function MenuCollectionDemo() {\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content className='min-w-64' placement='bottom' items={categories}>\n                {(item) => (\n                    <Menu.Item id={item.slug}>\n                        <Menu.Label>{item.name}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst categories = [\n    {\n        name: 'Technology',\n        slug: 'technology'\n    },\n    {\n        name: 'Health',\n        slug: 'health'\n    },\n    {\n        name: 'Business',\n        slug: 'business'\n    },\n    {\n        name: 'Travel',\n        slug: 'travel'\n    },\n    {\n        name: 'Education',\n        slug: 'education'\n    },\n    {\n        name: 'Entertainment',\n        slug: 'entertainment'\n    },\n    {\n        name: 'Sports',\n        slug: 'sports'\n    },\n    {\n        name: 'Fashion',\n        slug: 'fashion'\n    },\n    {\n        name: 'Food',\n        slug: 'food'\n    },\n    {\n        name: 'Science',\n        slug: 'science'\n    }\n]\n"
  },
  "collections/menu/single-menu-demo": {
    "component": "@/components/docs/collections/menu/single-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Button, Menu } from '@/components/ui'\nimport type { Placement } from '@react-types/overlays'\n\nexport const placements = [\n    'bottom',\n    'bottom left',\n    'bottom right',\n    'bottom start',\n    'bottom end',\n    'top',\n    'top left',\n    'top right',\n    'top start',\n    'top end',\n    'left',\n    'left top',\n    'left bottom',\n    'start',\n    'start top',\n    'start bottom',\n    'right',\n    'right top',\n    'right bottom',\n    'end',\n    'end top',\n    'end bottom'\n].map((item, i) => ({ id: i, name: item }))\n\nexport default function SingleMenuDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set(['bottom']))\n    return (\n        <Menu>\n            <Button variant='outline'>Placement</Button>\n            <Menu.Content\n                placement={Array.from(selected)[0] as Placement}\n                selectionMode='single'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={placements}\n                className='max-h-72 min-w-52'\n            >\n                {(item) => (\n                    <Menu.Item id={item.name}>\n                        <Menu.Label>{item.name}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-danger-demo": {
    "component": "@/components/docs/collections/menu/menu-danger-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDangerDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content className='min-w-48' placement='bottom'>\n                <Menu.Item>\n                    <Menu.Label>View</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Edit</Menu.Label>\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item isDanger>\n                    <Menu.Label>Delete</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/menu/menu-section-demo": {
    "component": "@/components/docs/collections/menu/menu-section-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSectionDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content className='sm:min-w-64' items={cities} placement='bottom'>\n                {(city) => (\n                    <Menu.Section title={city.name} items={city.landmarks}>\n                        {(landmark) => (\n                            <Menu.Item textValue={landmark.name}>\n                                <Menu.Label>{landmark.name}</Menu.Label>\n                            </Menu.Item>\n                        )}\n                    </Menu.Section>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst cities = [\n    {\n        id: 1,\n        name: 'New York City',\n        landmarks: [\n            {\n                id: 101,\n                name: 'Statue of Liberty'\n            },\n            {\n                id: 102,\n                name: 'Central Park'\n            },\n            {\n                id: 103,\n                name: 'Empire State Building'\n            },\n            {\n                id: 104,\n                name: 'Times Square'\n            }\n        ]\n    },\n    {\n        id: 2,\n        name: 'Paris',\n        landmarks: [\n            {\n                id: 201,\n                name: 'Eiffel Tower'\n            },\n            {\n                id: 202,\n                name: 'Louvre Museum'\n            },\n            {\n                id: 203,\n                name: 'Notre-Dame Cathedral'\n            },\n            {\n                id: 204,\n                name: 'Champs-Élysées'\n            }\n        ]\n    },\n    {\n        id: 3,\n        name: 'Tokyo',\n        landmarks: [\n            {\n                id: 301,\n                name: 'Tokyo Tower'\n            },\n            {\n                id: 302,\n                name: 'Shibuya Crossing'\n            },\n            {\n                id: 303,\n                name: 'Senso-ji Temple'\n            },\n            {\n                id: 304,\n                name: 'Meiji Shrine'\n            },\n            {\n                id: 305,\n                name: 'Tokyo Skytree'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'London',\n        landmarks: [\n            {\n                id: 401,\n                name: 'Big Ben'\n            },\n            {\n                id: 402,\n                name: 'Tower of London'\n            },\n            {\n                id: 403,\n                name: 'Buckingham Palace'\n            },\n            {\n                id: 404,\n                name: 'London Eye'\n            },\n            {\n                id: 405,\n                name: 'Westminster Abbey'\n            }\n        ]\n    },\n    {\n        id: 5,\n        name: 'Rome',\n        landmarks: [\n            {\n                id: 501,\n                name: 'Colosseum'\n            },\n            {\n                id: 502,\n                name: 'Vatican City'\n            },\n            {\n                id: 503,\n                name: 'Trevi Fountain'\n            },\n            {\n                id: 504,\n                name: 'Pantheon'\n            }\n        ]\n    },\n    {\n        id: 6,\n        name: 'Sydney',\n        landmarks: [\n            {\n                id: 601,\n                name: 'Sydney Opera House'\n            },\n            {\n                id: 602,\n                name: 'Sydney Harbour Bridge'\n            },\n            {\n                id: 603,\n                name: 'Bondi Beach'\n            },\n            {\n                id: 604,\n                name: 'Royal Botanic Garden'\n            }\n        ]\n    },\n    {\n        id: 7,\n        name: 'Dubai',\n        landmarks: [\n            {\n                id: 701,\n                name: 'Burj Khalifa'\n            },\n            {\n                id: 702,\n                name: 'Palm Jumeirah'\n            },\n            {\n                id: 703,\n                name: 'Dubai Mall'\n            },\n            {\n                id: 704,\n                name: 'Burj Al Arab'\n            }\n        ]\n    },\n    {\n        id: 8,\n        name: 'Moscow',\n        landmarks: [\n            {\n                id: 801,\n                name: 'Red Square'\n            },\n            {\n                id: 802,\n                name: 'Kremlin'\n            },\n            {\n                id: 803,\n                name: \"St. Basil's Cathedral\"\n            },\n            {\n                id: 804,\n                name: 'Bolshoi Theatre'\n            }\n        ]\n    },\n    {\n        id: 9,\n        name: 'Cairo',\n        landmarks: [\n            {\n                id: 901,\n                name: 'Pyramids of Giza'\n            },\n            {\n                id: 902,\n                name: 'Great Sphinx of Giza'\n            },\n            {\n                id: 903,\n                name: 'Egyptian Museum'\n            }\n        ]\n    },\n    {\n        id: 10,\n        name: 'Rio de Janeiro',\n        landmarks: [\n            {\n                id: 1001,\n                name: 'Christ the Redeemer'\n            },\n            {\n                id: 1002,\n                name: 'Sugarloaf Mountain'\n            },\n            {\n                id: 1003,\n                name: 'Copacabana Beach'\n            },\n            {\n                id: 1004,\n                name: 'Maracanã Stadium'\n            }\n        ]\n    }\n]\n"
  },
  "collections/menu/menu-respect-screen-demo": {
    "component": "@/components/docs/collections/menu/menu-respect-screen-demo",
    "raw": "'use client'\n\nimport { IconGauge, IconSettings, IconShield } from 'hq-icons'\n\nimport { Button, Menu } from '@/components/ui'\n\nexport default function MenuRespectScreenDemo() {\n    return (\n        <Menu respectScreen={false}>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content placement='bottom' className='min-w-48'>\n                <Menu.Item>\n                    <IconGauge />\n                    <Menu.Label>Dashboard</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <IconSettings />\n                    <Menu.Label>Settings</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <IconShield />\n                    <Menu.Label>Security</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Reports</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Privacy</Menu.Label>\n                </Menu.Item>\n                <Menu.Item>\n                    <Menu.Label>Help</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-disabled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-disabled-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDisabledDemo() {\n    return (\n        <Collapsible isDisabled>\n            <Collapsible.Trigger>What is your return policy?</Collapsible.Trigger>\n            <Collapsible.Content>\n                <p>\n                    You can return any item within 30 days of purchase, provided it is in its\n                    original condition with proof of purchase.\n                </p>\n            </Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-demo",
    "raw": "'use client'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleDemo() {\n    return (\n        <Collapsible>\n            <Collapsible.Trigger>What are the benefits of regular exercise?</Collapsible.Trigger>\n            <Collapsible.Content>\n                <p>\n                    Regular exercise can improve your overall health, boost your mood, increase\n                    energy levels, and help you maintain a healthy weight.\n                </p>\n            </Collapsible.Content>\n        </Collapsible>\n    )\n}\n"
  },
  "collections/collapsible/collapsible-controlled-demo": {
    "component": "@/components/docs/collections/collapsible/collapsible-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Collapsible } from '@/components/ui'\n\nexport default function CollapsibleControlledDemo() {\n    const [expanded, setExpanded] = React.useState(false)\n\n    return (\n        <div>\n            The Collapsible is{' '}\n            <strong className='text-info'>{expanded ? 'expanded' : 'collapsed'}</strong>.\n            <Collapsible isExpanded={expanded} onExpandedChange={setExpanded}>\n                <Collapsible.Trigger>What is your return policy?</Collapsible.Trigger>\n                <Collapsible.Content>\n                    <p>\n                        You can return any item within 30 days of purchase, provided it is in its\n                        original condition with proof of purchase.\n                    </p>\n                </Collapsible.Content>\n            </Collapsible>\n        </div>\n    )\n}\n"
  },
  "collections/accordion/accordion-allow-multiple-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-allow-multiple-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionAllowMultipleExpandDemo() {\n    return (\n        <Accordion allowsMultipleExpanded defaultExpandedKeys={[1, 2]}>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'How do I reset my password?',\n        a: \"You can reset your password by going to the settings page and clicking on 'Reset Password'.\"\n    },\n    {\n        q: 'Can I change my subscription plan?',\n        a: 'Yes, you can upgrade or downgrade your subscription plan at any time from your account settings.'\n    },\n    {\n        q: 'Where can I view my past orders?',\n        a: \"Your past orders can be viewed in the 'Orders' section of your account dashboard.\"\n    },\n    {\n        q: 'What is the return policy?',\n        a: 'Our return policy allows you to return products within 30 days of purchase for a full refund or exchange.'\n    },\n    {\n        q: 'How do I contact customer support?',\n        a: 'You can contact customer support via email at support@example.com or through our online chat system.'\n    }\n]\n"
  },
  "collections/accordion/accordion-hide-everything-demo": {
    "component": "@/components/docs/collections/accordion/accordion-hide-everything-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionHideEverythingDemo() {\n    return (\n        <Accordion hideBorder hideIndicator>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'What payment methods are accepted?',\n        a: 'We accept all major credit cards, PayPal, and Apple Pay.'\n    },\n    {\n        q: 'How long does shipping take?',\n        a: 'Shipping times vary by location but typically take between 3-7 business days.'\n    },\n    {\n        q: 'Can I track my order?',\n        a: 'Yes, you can track your order using the tracking link provided in your shipping confirmation email.'\n    }\n]\n"
  },
  "collections/accordion/accordion-default-expand-demo": {
    "component": "@/components/docs/collections/accordion/accordion-default-expand-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionGroupDefaultExpandDemo() {\n    return (\n        <Accordion defaultExpandedKeys={[1]}>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'How do I reset my password?',\n        a: \"You can reset your password by going to the settings page and clicking on 'Reset Password'.\"\n    },\n    {\n        q: 'Can I change my subscription plan?',\n        a: 'Yes, you can upgrade or downgrade your subscription plan at any time from your account settings.'\n    },\n    {\n        q: 'Where can I view my past orders?',\n        a: \"Your past orders can be viewed in the 'Orders' section of your account dashboard.\"\n    },\n    {\n        q: 'What is the return policy?',\n        a: 'Our return policy allows you to return products within 30 days of purchase for a full refund or exchange.'\n    },\n    {\n        q: 'How do I contact customer support?',\n        a: 'You can contact customer support via email at support@example.com or through our online chat system.'\n    }\n]\n"
  },
  "collections/accordion/accordion-demo": {
    "component": "@/components/docs/collections/accordion/accordion-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion>\n            <Accordion.Item id={1}>\n                <Accordion.Trigger>What is a VPS?</Accordion.Trigger>\n                <Accordion.Content>\n                    A VPS is a Virtual Private Server, which provides dedicated resources on a\n                    server shared with other users, offering more control and customization than\n                    shared hosting.\n                </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item id={2}>\n                <Accordion.Trigger>What is cloud hosting?</Accordion.Trigger>\n                <Accordion.Content>\n                    Cloud hosting utilizes multiple servers to balance load and maximize uptime.\n                    Instead of being hosted on a single server, your data and resources are spread\n                    across multiple servers.\n                </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item id={3}>\n                <Accordion.Trigger>What is shared hosting?</Accordion.Trigger>\n                <Accordion.Content>\n                    Shared hosting is a type of web hosting where multiple websites share the same\n                    server and its resources. It&apos;s an affordable option, but may have\n                    limitations on performance and customization.\n                </Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item id={4}>\n                <Accordion.Trigger>What is dedicated hosting?</Accordion.Trigger>\n                <Accordion.Content>\n                    Dedicated hosting means your website is hosted on a single server exclusively\n                    reserved for your site. This provides maximum performance and customization, but\n                    at a higher cost.\n                </Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n"
  },
  "collections/accordion/accordion-border-hidden-demo": {
    "component": "@/components/docs/collections/accordion/accordion-border-hidden-demo",
    "raw": "'use client'\n\nimport {\n    IconBell,\n    IconCreditCard,\n    IconDownload,\n    IconLifeBuoy,\n    IconSettings,\n    IconShield\n} from 'hq-icons'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionBorderHiddenDemo() {\n    return (\n        <Accordion hideBorder>\n            {items.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.title}</Accordion.Trigger>\n                    <Accordion.Content>{item.description}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst items = [\n    {\n        icon: <IconSettings />,\n        title: 'Personal Settings',\n        description:\n            'You can update your profile, change your password, and manage your account settings here.'\n    },\n    {\n        icon: <IconBell />,\n        title: 'Notifications',\n        description:\n            'Manage your notifications preferences, including alerts, emails, and push notifications.'\n    },\n    {\n        icon: <IconShield />,\n        title: 'Privacy Options',\n        description:\n            'Adjust your privacy settings to control who can see your information and contact you.'\n    },\n    {\n        icon: <IconCreditCard />,\n        title: 'Payment Methods',\n        description:\n            'Add, remove, or update your payment methods including credit cards and digital wallets.'\n    },\n    {\n        icon: <IconLifeBuoy />,\n        title: 'Support Center',\n        description: 'Find help with common issues, or contact support for further assistance.'\n    },\n    {\n        icon: <IconDownload />,\n        title: 'Download Data',\n        description:\n            'Request a download of all your data we have stored, including account activity and user data.'\n    }\n]\n"
  },
  "collections/accordion/accordion-disabled-demo": {
    "component": "@/components/docs/collections/accordion/accordion-disabled-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDisabledDemo() {\n    return (\n        <Accordion>\n            {faqs.map((item, index) => (\n                <Accordion.Item isDisabled={index === 2} key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'Do you offer gift wrapping options?',\n        a: 'Yes, we provide gift wrapping services for a small additional charge at checkout.'\n    },\n    {\n        q: 'Can I return a gift card?',\n        a: 'Sorry, gift cards are non-refundable and cannot be returned.'\n    },\n    {\n        q: 'What are your store hours?',\n        a: 'Our store is open from 9 AM to 9 PM on weekdays and 10 AM to 6 PM on weekends.'\n    },\n    {\n        q: 'Do you have a loyalty program?',\n        a: 'Yes, we have a loyalty program where you can earn points for every purchase and redeem them for discounts.'\n    },\n    {\n        q: 'How do I update my billing information?',\n        a: 'You can update your billing information through your account settings on our website.'\n    },\n    {\n        q: 'Are there any discounts for bulk orders?',\n        a: 'Yes, we offer discounts on bulk orders. Please contact our sales team for more details.'\n    }\n]\n"
  },
  "collections/accordion/accordion-hide-indicator-demo": {
    "component": "@/components/docs/collections/accordion/accordion-hide-indicator-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionHideIndicatorDemo() {\n    return (\n        <Accordion hideIndicator>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} id={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'What payment methods are accepted?',\n        a: 'We accept all major credit cards, PayPal, and Apple Pay.'\n    },\n    {\n        q: 'How long does shipping take?',\n        a: 'Shipping times vary by location but typically take between 3-7 business days.'\n    },\n    {\n        q: 'Can I track my order?',\n        a: 'Yes, you can track your order using the tracking link provided in your shipping confirmation email.'\n    }\n]\n"
  },
  "collections/grid-list/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDemo() {\n    return (\n        <GridList\n            selectionMode='single'\n            items={items}\n            aria-label='Select your favorite bands'\n            className='min-w-64'\n        >\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' },\n    { id: '6', name: 'The Who' }\n]\n"
  },
  "collections/grid-list/grid-list-drag-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-drag-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDragDemo() {\n    const list = useListData({\n        initialItems: items\n    })\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys) =>\n            [...keys].map((key) => ({ 'text/plain': list.getItem(key)?.name ?? '' })),\n        onReorder(e) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n\n    return (\n        <>\n            <GridList\n                items={list.items}\n                aria-label='Droppable list'\n                selectionMode='multiple'\n                dragAndDropHooks={dragAndDropHooks}\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </>\n    )\n}\n\nconst items = [\n    { id: 1, name: 'The Beatles' },\n    { id: 2, name: 'Led Zeppelin' },\n    { id: 3, name: 'Pink Floyd' },\n    { id: 4, name: 'Queen' },\n    { id: 5, name: 'The Rolling Stones' },\n    { id: 6, name: 'The Beach Boys' },\n    { id: 7, name: 'The Kinks' },\n    { id: 8, name: 'The Who' }\n]\n"
  },
  "collections/grid-list/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, GridList } from '@/components/ui'\n\nexport default function GridListControlledDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]))\n    return (\n        <div>\n            <GridList\n                selectedKeys={selectedKeys}\n                onSelectionChange={setSelectedKeys}\n                items={items}\n                aria-label='Select items'\n                selectionMode='multiple'\n                className='min-w-64'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n            <Description className='[&>strong]:text-fg text-muted-fg mt-2 block'>\n                You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n            </Description>\n        </div>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n"
  },
  "collections/grid-list/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-disabled-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDisabledDemo() {\n    return (\n        <GridList\n            items={items}\n            aria-label='Select your favorite bands'\n            selectionMode='multiple'\n            className='min-w-64'\n        >\n            {(item) => (\n                <GridList.Item isDisabled={[2, 5].includes(Number(item.id))} id={item.id}>\n                    {item.name}\n                </GridList.Item>\n            )}\n        </GridList>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n"
  },
  "collections/grid-list/grid-list-multiple-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-multiple-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListMultipleDemo() {\n    return (\n        <div>\n            <GridList\n                items={items}\n                aria-label='Select items'\n                selectionMode='multiple'\n                className='min-w-64'\n            >\n                {(item) => <GridList.Item>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n"
  },
  "collections/grid-list/grid-list-render-empty-state-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-render-empty-state-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListRenderEmptyStateDemo() {\n    return (\n        <GridList\n            items={[]}\n            aria-label='Select items'\n            selectionMode='multiple'\n            className='min-w-64'\n            renderEmptyState={() => <GridList.EmptyState>No items selected</GridList.EmptyState>}\n        />\n    )\n}\n"
  },
  "collections/grid-list/grid-list-drag-between-item-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-drag-between-item-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport GridListDragDemo from '@/components/docs/collections/grid-list/grid-list-drag-demo'\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDragBetweenItemDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: 6, name: 'The Byrds' },\n            { id: 7, name: 'The Yardbirds' }\n        ]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        async onInsert(e) {\n            const items = await Promise.all(\n                e.items.map(async (item) => {\n                    const name = item.kind === 'text' ? await item.getText('text/plain') : item.name\n                    return { id: Math.random(), name }\n                })\n            )\n\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...items)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...items)\n            }\n        }\n    })\n\n    return (\n        <div className='grid gap-4 lg:grid-cols-3'>\n            <GridListDragDemo />\n            <GridList\n                aria-label='Droppable list'\n                items={list.items}\n                dragAndDropHooks={dragAndDropHooks}\n            >\n                {(item) => <GridList.Item>{item.name}</GridList.Item>}\n            </GridList>\n            <OtherEmptyList />\n        </div>\n    )\n}\n\nexport function OtherEmptyList() {\n    const list = useListData({\n        initialItems: [{ id: 7, name: 'The Who' }]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        async onInsert(e) {\n            const items = await Promise.all(\n                e.items.map(async (item) => {\n                    const name = item.kind === 'text' ? await item.getText('text/plain') : item.name\n                    return { id: Math.random(), name }\n                })\n            )\n\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...items)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...items)\n            }\n        }\n    })\n\n    return (\n        <GridList\n            aria-label='Droppable list'\n            items={list.items}\n            dragAndDropHooks={dragAndDropHooks}\n            renderEmptyState={() => <GridList.EmptyState>No bands selected</GridList.EmptyState>}\n        >\n            {(item) => <GridList.Item>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n"
  },
  "collections/tree/tree-demo": {
    "component": "@/components/docs/collections/tree/tree-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tree, TreeItem } from '@/components/ui'\n\nexport default function TreeDemo() {\n    const renderItem = (item: FileNode): React.ReactNode => {\n        return (\n            <TreeItem key={item.id} textValue={item.title}>\n                <TreeItem.Content>\n                    {item.children.length > 0 && <TreeItem.Indicator />}\n                    <TreeItem.Checkbox />\n                    <TreeItem.Label>{item.title}</TreeItem.Label>\n                </TreeItem.Content>\n                {item.children.length > 0 && (\n                    <Collection items={item.children}>{renderItem}</Collection>\n                )}\n            </TreeItem>\n        )\n    }\n    return (\n        <Tree className='w-full max-w-xl' aria-label='Files' selectionMode='multiple' items={files}>\n            {files.map(renderItem)}\n        </Tree>\n    )\n}\n\ntype FileNode = {\n    id: number\n    title: string\n    children: FileNode[]\n}\n\nconst files: FileNode[] = [\n    {\n        id: 1,\n        title: 'Work',\n        children: [\n            {\n                id: 2,\n                title: 'Reports',\n                children: [\n                    {\n                        id: 3,\n                        title: '2023',\n                        children: [\n                            {\n                                id: 4,\n                                title: 'Q1 Report',\n                                children: [\n                                    { id: 5, title: 'Summary', children: [] },\n                                    { id: 6, title: 'Details', children: [] }\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                id: 7,\n                title: 'Presentations',\n                children: [\n                    {\n                        id: 8,\n                        title: '2023 Projects',\n                        children: [\n                            {\n                                id: 9,\n                                title: 'Project A',\n                                children: [\n                                    { id: 10, title: 'Draft', children: [] },\n                                    { id: 11, title: 'Final', children: [] }\n                                ]\n                            },\n                            {\n                                id: 12,\n                                title: 'Project B',\n                                children: [{ id: 13, title: 'Research', children: [] }]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        id: 14,\n        title: 'Personal',\n        children: [\n            {\n                id: 15,\n                title: 'Hobbies',\n                children: [\n                    {\n                        id: 16,\n                        title: 'Photography',\n                        children: [\n                            { id: 17, title: 'Travel', children: [] },\n                            { id: 18, title: 'Portraits', children: [] }\n                        ]\n                    },\n                    {\n                        id: 19,\n                        title: 'Cooking',\n                        children: [{ id: 20, title: 'Recipes', children: [] }]\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        id: 21,\n        title: 'Projects',\n        children: [\n            {\n                id: 22,\n                title: 'Web Development',\n                children: [\n                    {\n                        id: 23,\n                        title: 'Portfolio',\n                        children: [\n                            { id: 24, title: 'Images', children: [] },\n                            { id: 25, title: 'CSS', children: [] }\n                        ]\n                    },\n                    { id: 26, title: 'Landing Page', children: [] }\n                ]\n            },\n            {\n                id: 27,\n                title: 'Mobile Apps',\n                children: [{ id: 28, title: 'Weather App', children: [] }]\n            }\n        ]\n    },\n    {\n        id: 29,\n        title: 'Finance',\n        children: [\n            {\n                id: 30,\n                title: 'Budget',\n                children: [\n                    {\n                        id: 31,\n                        title: '2023',\n                        children: [\n                            { id: 32, title: 'January', children: [] },\n                            { id: 33, title: 'February', children: [] }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        id: 34,\n        title: 'Health',\n        children: [\n            {\n                id: 35,\n                title: 'Fitness',\n                children: [\n                    { id: 36, title: 'Workouts', children: [] },\n                    { id: 37, title: 'Nutrition', children: [] }\n                ]\n            },\n            { id: 38, title: 'Wellness', children: [] }\n        ]\n    }\n]\n"
  },
  "collections/table/table-demo": {
    "component": "@/components/docs/collections/table/table-demo",
    "raw": "'use client'\n\nimport { IconEllipsisVertical } from 'hq-icons'\n\nimport { Card, Menu, Table } from '@/components/ui'\nimport { NumberFormatter } from '@internationalized/number'\n\nexport default function TableDemo() {\n    const formatter = new NumberFormatter('en-US', { style: 'currency', currency: 'USD' })\n\n    const priceFormat = (price: number) => formatter.format(price)\n    return (\n        <Card>\n            <Table aria-label='Products'>\n                <Table.Header>\n                    <Table.Column className='w-0'>#</Table.Column>\n                    <Table.Column isRowHeader>Name</Table.Column>\n                    <Table.Column>Category</Table.Column>\n                    <Table.Column>Price</Table.Column>\n                    <Table.Column>Stock</Table.Column>\n                    <Table.Column />\n                </Table.Header>\n                <Table.Body items={products}>\n                    {(item) => (\n                        <Table.Row id={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.category}</Table.Cell>\n                            <Table.Cell>{priceFormat(item.price)}</Table.Cell>\n                            <Table.Cell>{item.stock}</Table.Cell>\n                            <Table.Cell>\n                                <div className='flex justify-end'>\n                                    <Menu>\n                                        <Menu.Trigger>\n                                            <IconEllipsisVertical />\n                                        </Menu.Trigger>\n                                        <Menu.Content\n                                            aria-label='Actions'\n                                            showArrow\n                                            placement='left'\n                                        >\n                                            <Menu.Item>View</Menu.Item>\n                                            <Menu.Item>Edit</Menu.Item>\n                                            <Menu.Separator />\n                                            <Menu.Item isDanger>Delete</Menu.Item>\n                                        </Menu.Content>\n                                    </Menu>\n                                </div>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n\nexport const products = [\n    { id: '1', name: 'iPhone 13', category: 'Electronics', price: 799, brand: 'Apple', stock: 150 },\n    {\n        id: '2',\n        name: 'Galaxy S21',\n        category: 'Electronics',\n        price: 699,\n        brand: 'Samsung',\n        stock: 200\n    },\n    { id: '3', name: 'MacBook Pro', category: 'Computers', price: 1299, brand: 'Apple', stock: 80 },\n    { id: '4', name: 'Dell XPS 13', category: 'Computers', price: 999, brand: 'Dell', stock: 50 },\n    {\n        id: '5',\n        name: 'Sony WH-1000XM4',\n        category: 'Headphones',\n        price: 349,\n        brand: 'Sony',\n        stock: 120\n    },\n    {\n        id: '6',\n        name: 'AirPods Pro',\n        category: 'Headphones',\n        price: 249,\n        brand: 'Apple',\n        stock: 180\n    },\n    {\n        id: '7',\n        name: 'Fitbit Charge 5',\n        category: 'Wearables',\n        price: 179,\n        brand: 'Fitbit',\n        stock: 75\n    }\n]\n"
  },
  "collections/table/table-bulk-demo": {
    "component": "@/components/docs/collections/table/table-bulk-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Card, Description, Table } from '@/components/ui'\n\nexport default function TableBulkDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set())\n    return (\n        <>\n            <Card>\n                <Table\n                    aria-label='Books'\n                    selectionMode='multiple'\n                    selectedKeys={selectedKeys}\n                    onSelectionChange={setSelectedKeys}\n                >\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column isRowHeader>Title</Table.Column>\n                        <Table.Column>Author</Table.Column>\n                        <Table.Column>Genre</Table.Column>\n                        <Table.Column>Published</Table.Column>\n                    </Table.Header>\n                    <Table.Body items={books}>\n                        {(item) => (\n                            <Table.Row>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.title}</Table.Cell>\n                                <Table.Cell>{item.author}</Table.Cell>\n                                <Table.Cell>{item.genre}</Table.Cell>\n                                <Table.Cell>{item.publishedYear}</Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card>\n            <Description className='[&>strong]:text-fg text-muted-fg mt-2 block'>\n                {Array.from(selectedKeys).length > 0 ? (\n                    <>\n                        You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n                    </>\n                ) : (\n                    'You have not selected anything.'\n                )}\n            </Description>\n        </>\n    )\n}\n\nexport const books = [\n    {\n        id: '1',\n        title: 'To Kill a Mockingbird',\n        author: 'Harper Lee',\n        genre: 'Fiction',\n        publishedYear: 1960\n    },\n    { id: '2', title: '1984', author: 'George Orwell', genre: 'Dystopian', publishedYear: 1949 },\n    {\n        id: '3',\n        title: 'The Great Gatsby',\n        author: 'F. Scott Fitzgerald',\n        genre: 'Fiction',\n        publishedYear: 1925\n    },\n    {\n        id: '4',\n        title: 'The Catcher in the Rye',\n        author: 'J.D. Salinger',\n        genre: 'Fiction',\n        publishedYear: 1951\n    },\n    {\n        id: '5',\n        title: 'Pride and Prejudice',\n        author: 'Jane Austen',\n        genre: 'Romance',\n        publishedYear: 1813\n    },\n    {\n        id: '6',\n        title: 'The Lord of the Rings',\n        author: 'J.R.R. Tolkien',\n        genre: 'Fantasy',\n        publishedYear: 1954\n    },\n    {\n        id: '7',\n        title: \"Harry Potter and the Sorcerer's Stone\",\n        author: 'J.K. Rowling',\n        genre: 'Fantasy',\n        publishedYear: 1997\n    }\n]\n"
  },
  "collections/table/table-resize-demo": {
    "component": "@/components/docs/collections/table/table-resize-demo",
    "raw": "'use client'\n\nimport { Card, Table } from '@/components/ui'\n\nexport default function TableResizeDemo() {\n    return (\n        <Card>\n            <Table allowResize aria-label='Vocalists'>\n                <Table.Header>\n                    <Table.Column className='max-w-0'>ID</Table.Column>\n                    <Table.Column isRowHeader isResizable>\n                        Name\n                    </Table.Column>\n                    <Table.Column isResizable>Email</Table.Column>\n                    <Table.Column>Age</Table.Column>\n                    <Table.Column>Role</Table.Column>\n                    <Table.Column isResizable>Band</Table.Column>\n                    <Table.Column>Status</Table.Column>\n                </Table.Header>\n                <Table.Body items={items}>\n                    {(item) => (\n                        <Table.Row id={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.email}</Table.Cell>\n                            <Table.Cell>{item.age}</Table.Cell>\n                            <Table.Cell>{item.role}</Table.Cell>\n                            <Table.Cell>{item.band}</Table.Cell>\n                            <Table.Cell>{item.status}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        name: 'Randy Blythe',\n        email: 'randy.blythe@example.com',\n        age: 52,\n        role: 'Vocalist',\n        band: 'Lamb of God',\n        status: 'Active'\n    },\n    {\n        id: 2,\n        name: 'Phil Anselmo',\n        email: 'phil.anselmo@example.com',\n        age: 55,\n        role: 'Vocalist',\n        band: 'Pantera',\n        status: 'Active'\n    },\n    {\n        id: 3,\n        name: 'George Fisher',\n        email: 'george.fisher@example.com',\n        age: 53,\n        role: 'Vocalist',\n        band: 'Cannibal Corpse',\n        status: 'Active'\n    },\n    {\n        id: 4,\n        name: 'Corey Taylor',\n        email: 'corey.taylor@example.com',\n        age: 50,\n        role: 'Vocalist',\n        band: 'Slipknot',\n        status: 'Active'\n    },\n    {\n        id: 5,\n        name: 'Trevor Strnad',\n        email: 'trevor.strnad@example.com',\n        age: 41,\n        role: 'Vocalist',\n        band: 'The Black Dahlia Murder',\n        status: 'Inactive'\n    },\n    {\n        id: 6,\n        name: 'Chuck Schuldiner',\n        email: 'chuck.schuldiner@example.com',\n        age: 34,\n        role: 'Vocalist',\n        band: 'Death',\n        status: 'Deceased'\n    },\n    {\n        id: 7,\n        name: 'Mitch Lucker',\n        email: 'mitch.lucker@example.com',\n        age: 28,\n        role: 'Vocalist',\n        band: 'Suicide Silence',\n        status: 'Deceased'\n    }\n]\n"
  },
  "collections/table/table-sorting-demo": {
    "component": "@/components/docs/collections/table/table-sorting-demo",
    "raw": "'use client'\n\nimport { IconLoader } from 'hq-icons'\n\nimport { Card, Table } from '@/components/ui'\nimport { useAsyncList } from '@react-stately/data'\n\ninterface Character {\n    title: string\n    director: number\n    producer: number\n    release_date: number\n}\n\nexport default function TableSortingDemo() {\n    const list = useAsyncList<Character>({\n        async load({ signal }) {\n            const res = await fetch(`https://swapi.py4e.com/api/films`, {\n                signal\n            })\n            const json = await res.json()\n            return {\n                items: json.results\n            }\n        },\n        async sort({ items, sortDescriptor }) {\n            return {\n                items: items.sort((a, b) => {\n                    // @ts-expect-error unknown-type\n                    const first = a[sortDescriptor.column]\n                    // @ts-expect-error unknown-type\n                    const second = b[sortDescriptor.column]\n                    let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1\n                    if (sortDescriptor.direction === 'descending') {\n                        cmp *= -1\n                    }\n                    return cmp\n                })\n            }\n        }\n    })\n    return (\n        <Card>\n            <Table\n                aria-label='Movies'\n                selectionMode='multiple'\n                sortDescriptor={list.sortDescriptor}\n                onSortChange={list.sort}\n            >\n                <Table.Header>\n                    <Table.Column id='title' isRowHeader>\n                        Title\n                    </Table.Column>\n                    <Table.Column id='director' allowsSorting>\n                        Director\n                    </Table.Column>\n                    <Table.Column id='producer'>Producer</Table.Column>\n                    <Table.Column id='release_date' allowsSorting>\n                        Release Date\n                    </Table.Column>\n                </Table.Header>\n                <Table.Body\n                    items={list.items}\n                    renderEmptyState={() => (\n                        <div className='grid place-content-center p-10'>\n                            <IconLoader className='animate-spin' />\n                        </div>\n                    )}\n                >\n                    {(item) => (\n                        <Table.Row id={item.title}>\n                            <Table.Cell>{item.title}</Table.Cell>\n                            <Table.Cell>{item.director}</Table.Cell>\n                            <Table.Cell>{item.producer}</Table.Cell>\n                            <Table.Cell>{item.release_date}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n"
  },
  "collections/table/table-drag-demo": {
    "component": "@/components/docs/collections/table/table-drag-demo",
    "raw": "'use client'\n\nimport { IconStar } from 'hq-icons'\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport { Card, Table } from '@/components/ui'\n\nexport default function TableDragDemo() {\n    const list = useListData({\n        initialItems: movies\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys) =>\n            [...keys].map((key) => ({\n                'text/plain': list.getItem(key)?.name ?? ''\n            })),\n        onReorder(e) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n    return (\n        <Card>\n            <Table aria-label='Movies' selectionMode='multiple' dragAndDropHooks={dragAndDropHooks}>\n                <Table.Header>\n                    <Table.Column>#</Table.Column>\n                    <Table.Column isRowHeader>Name</Table.Column>\n                    <Table.Column>Genre</Table.Column>\n                    <Table.Column>Release</Table.Column>\n                    <Table.Column>Rating</Table.Column>\n                </Table.Header>\n                <Table.Body items={list.items}>\n                    {(item) => (\n                        <Table.Row>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.genre}</Table.Cell>\n                            <Table.Cell>{item.releaseYear}</Table.Cell>\n                            <Table.Cell>\n                                <div className='flex items-center gap-x-2'>\n                                    <IconStar className='text-warning size-3.5' />{' '}\n                                    <span>{item.rating}</span>\n                                </div>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n\nconst movies = [\n    {\n        id: '1',\n        name: 'The Matrix',\n        genre: 'Sci-Fi',\n        releaseYear: 1999,\n        director: 'Wachowskis',\n        rating: 8.7\n    },\n    {\n        id: '2',\n        name: 'Inception',\n        genre: 'Sci-Fi',\n        releaseYear: 2010,\n        director: 'Christopher Nolan',\n        rating: 8.8\n    },\n    {\n        id: '3',\n        name: 'The Godfather',\n        genre: 'Crime',\n        releaseYear: 1972,\n        director: 'Francis Ford Coppola',\n        rating: 9.2\n    },\n    {\n        id: '4',\n        name: 'Pulp Fiction',\n        genre: 'Crime',\n        releaseYear: 1994,\n        director: 'Quentin Tarantino',\n        rating: 8.9\n    },\n    {\n        id: '5',\n        name: 'The Dark Knight',\n        genre: 'Action',\n        releaseYear: 2008,\n        director: 'Christopher Nolan',\n        rating: 9.0\n    },\n    {\n        id: '6',\n        name: 'Fight Club',\n        genre: 'Drama',\n        releaseYear: 1999,\n        director: 'David Fincher',\n        rating: 8.8\n    },\n    {\n        id: '7',\n        name: 'Forrest Gump',\n        genre: 'Drama',\n        releaseYear: 1994,\n        director: 'Robert Zemeckis',\n        rating: 8.8\n    }\n]\n"
  },
  "collections/list-box/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxRearrangeDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: '1', name: 'Nirvana' },\n            { id: '2', name: 'Radiohead' },\n            { id: '3', name: 'Foo Fighters' },\n            { id: '4', name: 'Arctic Monkeys' },\n            { id: '5', name: 'The Strokes' }\n        ]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys) =>\n            [...keys].map((key) => ({ 'text/plain': list.getItem(key)?.name ?? '' })),\n        onReorder(e) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n\n    return (\n        <ListBox\n            items={list.items}\n            aria-label='Bands'\n            selectionMode='multiple'\n            dragAndDropHooks={dragAndDropHooks}\n        >\n            {(item) => <ListBox.Item key={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n"
  },
  "collections/list-box/list-box-demo": {
    "component": "@/components/docs/collections/list-box/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxDemo() {\n    return (\n        <ListBox items={rockPopBands} selectionMode='single' aria-label='Bands'>\n            {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n        </ListBox>\n    )\n}\n\nconst rockPopBands = [\n    { id: '1', name: 'Nirvana' },\n    { id: '2', name: 'Radiohead' },\n    { id: '3', name: 'Foo Fighters' },\n    { id: '4', name: 'Arctic Monkeys' },\n    { id: '5', name: 'The Strokes' }\n]\n"
  },
  "collections/list-box/list-box-controlled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, ListBox } from '@/components/ui'\n\nexport default function ListBoxControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([1]))\n    return (\n        <>\n            <ListBox\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={fruits}\n                aria-label='Fruits'\n                selectionMode='single'\n            >\n                {(fruit) => (\n                    <ListBox.Item id={fruit.id} textValue={fruit.name}>\n                        {fruit.name}\n                    </ListBox.Item>\n                )}\n            </ListBox>\n\n            {selected && (\n                <Description className='[&>strong]:text-fg mt-4 block [&>strong]:font-medium'>\n                    Selected: <strong>{selected}</strong>\n                </Description>\n            )}\n        </>\n    )\n}\n\nconst fruits = [\n    {\n        id: 1,\n        name: 'Apple'\n    },\n    {\n        id: 2,\n        name: 'Banana'\n    },\n    {\n        id: 3,\n        name: 'Orange'\n    },\n    {\n        id: 4,\n        name: 'Strawberry'\n    },\n    {\n        id: 5,\n        name: 'Grapes'\n    },\n    {\n        id: 6,\n        name: 'Mango'\n    },\n    {\n        id: 7,\n        name: 'Pineapple'\n    }\n]\n"
  },
  "collections/list-box/list-box-item-details-demo": {
    "component": "@/components/docs/collections/list-box/list-box-item-details-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxItemDetailsDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([1]))\n    return (\n        <ListBox\n            selectedKeys={selected}\n            onSelectionChange={setSelected}\n            items={roles}\n            aria-label='Bands'\n        >\n            {(item) => (\n                <ListBox.Item id={item.id}>\n                    <ListBox.ItemDetails label={item.name} description={item.description} />\n                </ListBox.Item>\n            )}\n        </ListBox>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n"
  },
  "collections/list-box/list-box-section-demo": {
    "component": "@/components/docs/collections/list-box/list-box-section-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxSectionDemo() {\n    return (\n        <ListBox items={bands} aria-label='Bands' selectionMode='multiple'>\n            {(item) => (\n                <ListBox.Section items={item.albums} title={item.name} id={item.id}>\n                    {/*@ts-expect-error: ts ^5.5.4*/}\n                    {(album) => <ListBox.Item id={album.id}>{album.name}</ListBox.Item>}\n                </ListBox.Section>\n            )}\n        </ListBox>\n    )\n}\n\ntype Band = {\n    id: number\n    name: string\n    albums: { id: number; name: string }[]\n}\n\nconst bands: Band[] = [\n    {\n        id: 1,\n        name: 'The Beatles',\n        albums: [\n            {\n                id: 101,\n                name: 'Abbey Road'\n            },\n            {\n                id: 102,\n                name: \"Sgt. Pepper's Lonely Hearts Club Band\"\n            },\n            {\n                id: 103,\n                name: 'Revolver'\n            }\n        ]\n    },\n    {\n        id: 2,\n        name: 'Led Zeppelin',\n        albums: [\n            {\n                id: 201,\n                name: 'Led Zeppelin IV'\n            },\n            {\n                id: 202,\n                name: 'Physical Graffiti'\n            },\n            {\n                id: 203,\n                name: 'Houses of the Holy'\n            },\n            {\n                id: 204,\n                name: 'Led Zeppelin II'\n            }\n        ]\n    },\n    {\n        id: 3,\n        name: 'Pink Floyd',\n        albums: [\n            {\n                id: 301,\n                name: 'The Dark Side of the Moon'\n            },\n            {\n                id: 302,\n                name: 'The Wall'\n            },\n            {\n                id: 303,\n                name: 'Wish You Were Here'\n            },\n            {\n                id: 304,\n                name: 'Animals'\n            },\n            {\n                id: 305,\n                name: 'Meddle'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Queen',\n        albums: [\n            {\n                id: 401,\n                name: 'A Night at the Opera'\n            },\n            {\n                id: 402,\n                name: 'News of the World'\n            },\n            {\n                id: 403,\n                name: 'Sheer Heart Attack'\n            },\n            {\n                id: 404,\n                name: 'The Game'\n            },\n            {\n                id: 405,\n                name: 'Jazz'\n            },\n            {\n                id: 406,\n                name: 'Queen II'\n            }\n        ]\n    },\n    {\n        id: 5,\n        name: 'The Rolling Stones',\n        albums: [\n            {\n                id: 501,\n                name: 'Let It Bleed'\n            },\n            {\n                id: 502,\n                name: 'Sticky Fingers'\n            },\n            {\n                id: 503,\n                name: 'Exile on Main St.'\n            },\n            {\n                id: 504,\n                name: 'Beggars Banquet'\n            },\n            {\n                id: 505,\n                name: 'Some Girls'\n            },\n            {\n                id: 506,\n                name: 'Tattoo You'\n            }\n        ]\n    },\n    {\n        id: 6,\n        name: 'Nirvana',\n        albums: [\n            {\n                id: 601,\n                name: 'Nevermind'\n            },\n            {\n                id: 602,\n                name: 'In Utero'\n            },\n            {\n                id: 603,\n                name: 'Bleach'\n            }\n        ]\n    },\n    {\n        id: 7,\n        name: 'The Doors',\n        albums: [\n            {\n                id: 701,\n                name: 'The Doors'\n            },\n            {\n                id: 702,\n                name: 'L.A. Woman'\n            },\n            {\n                id: 703,\n                name: 'Strange Days'\n            },\n            {\n                id: 704,\n                name: 'Morrison Hotel'\n            }\n        ]\n    },\n    {\n        id: 8,\n        name: 'Radiohead',\n        albums: [\n            {\n                id: 801,\n                name: 'OK Computer'\n            },\n            {\n                id: 802,\n                name: 'Kid A'\n            },\n            {\n                id: 803,\n                name: 'The Bends'\n            },\n            {\n                id: 804,\n                name: 'In Rainbows'\n            }\n        ]\n    },\n    {\n        id: 9,\n        name: 'AC/DC',\n        albums: [\n            {\n                id: 901,\n                name: 'Back in Black'\n            },\n            {\n                id: 902,\n                name: 'Highway to Hell'\n            },\n            {\n                id: 903,\n                name: 'Let There Be Rock'\n            }\n        ]\n    },\n    {\n        id: 10,\n        name: 'The Who',\n        albums: [\n            {\n                id: 1001,\n                name: \"Who's Next\"\n            },\n            {\n                id: 1002,\n                name: 'Tommy'\n            },\n            {\n                id: 1003,\n                name: 'Quadrophenia'\n            },\n            {\n                id: 1004,\n                name: 'My Generation'\n            },\n            {\n                id: 1005,\n                name: 'The Who Sell Out'\n            }\n        ]\n    }\n]\n"
  },
  "collections/list-box/list-box-multiple-demo": {
    "component": "@/components/docs/collections/list-box/list-box-multiple-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, ListBox } from '@/components/ui'\n\nexport default function ListBoxMultipleDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([3]))\n    return (\n        <>\n            <ListBox\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={fruits}\n                aria-label='Fruits'\n                selectionMode='multiple'\n            >\n                {(fruit) => (\n                    <ListBox.Item id={fruit.id} textValue={fruit.name}>\n                        {fruit.name}\n                    </ListBox.Item>\n                )}\n            </ListBox>\n\n            {[...selected].length > 0 && (\n                <Description className='mt-4 block'>\n                    Selected: {selected === 'all' ? 'All selected' : [...selected].join(', ')}\n                </Description>\n            )}\n        </>\n    )\n}\n\nconst fruits = [\n    {\n        id: 1,\n        name: 'Apple'\n    },\n    {\n        id: 2,\n        name: 'Banana'\n    },\n    {\n        id: 3,\n        name: 'Orange'\n    },\n    {\n        id: 4,\n        name: 'Strawberry'\n    },\n    {\n        id: 5,\n        name: 'Grapes'\n    },\n    {\n        id: 6,\n        name: 'Mango'\n    },\n    {\n        id: 7,\n        name: 'Pineapple'\n    }\n]\n"
  },
  "collections/list-box/list-box-disabled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-disabled-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxDisabledDemo() {\n    return (\n        <>\n            <ListBox\n                disabledKeys={[2, 3, 4, 5]}\n                items={fruits}\n                aria-label='Fruits'\n                selectionMode='multiple'\n            >\n                {(fruit) => <ListBox.Item id={fruit.id}>{fruit.name}</ListBox.Item>}\n            </ListBox>\n        </>\n    )\n}\n\nconst fruits = [\n    {\n        id: 1,\n        name: 'Apple'\n    },\n    {\n        id: 2,\n        name: 'Banana'\n    },\n    {\n        id: 3,\n        name: 'Orange'\n    },\n    {\n        id: 4,\n        name: 'Strawberry'\n    },\n    {\n        id: 5,\n        name: 'Grapes'\n    },\n    {\n        id: 6,\n        name: 'Mango'\n    },\n    {\n        id: 7,\n        name: 'Pineapple'\n    }\n]\n"
  },
  "collections/choicebox/choicebox-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxDemo() {\n    return (\n        <Choicebox aria-label='Select items' selectionMode='multiple'>\n            <Choicebox.Item title='Basic' description='Just the essentials to get started.' />\n            <Choicebox.Item\n                title='Standard'\n                description='A step up with more features and support.'\n            />\n            <Choicebox.Item title='Premium' description='Advanced options for growing needs.' />\n            <Choicebox.Item\n                title='Deluxe'\n                description='Top-tier features for maximum performance.'\n            />\n            <Choicebox.Item\n                title='Ultimate'\n                description='All-inclusive plan with every feature available.'\n            />\n            <Choicebox.Item\n                title='Enterprise'\n                description='Custom solutions for large-scale operations.'\n            />\n        </Choicebox>\n    )\n}\n"
  },
  "collections/choicebox/choicebox-controlled-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Choicebox, Description } from '@/components/ui'\n\nexport default function ChoiceboxControlledDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([packages[0].id]))\n    return (\n        <>\n            <Choicebox\n                aria-label='Select packages'\n                selectionMode='multiple'\n                selectedKeys={selectedKeys}\n                onSelectionChange={setSelectedKeys}\n                items={packages}\n            >\n                {(item) => <Choicebox.Item {...item} />}\n            </Choicebox>\n\n            <Description className='[&>strong]:text-fg text-muted-fg mt-2 block'>\n                You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n            </Description>\n        </>\n    )\n}\n\nconst packages = [\n    {\n        id: 'sm',\n        title: 'Small',\n        description: 'Perfect for beginners. Basic resources for light projects.'\n    },\n    {\n        id: 'md',\n        title: 'Medium',\n        description: 'Great for growing sites. More power and storage.'\n    },\n    {\n        id: 'lg',\n        title: 'Large',\n        description: 'Ideal for busy sites. Lots of resources and support.'\n    },\n    {\n        id: 'xl',\n        title: 'Extra Large',\n        description: 'Max power for demanding applications. Top-tier performance.'\n    }\n]\n"
  },
  "collections/choicebox/choicebox-columns-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-columns-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxColumnsDemo() {\n    return (\n        <div className='p-1'>\n            <Choicebox\n                aria-label='Select prices'\n                gap={2}\n                columns={3}\n                selectionMode='multiple'\n                items={prices}\n            >\n                {(item) => <Choicebox.Item {...item} />}\n            </Choicebox>\n        </div>\n    )\n}\n\nconst prices = [\n    { id: 1, title: 'Basic', description: 'Essentials, get started' },\n    { id: 2, title: 'Standard', description: 'More features, support' },\n    { id: 3, title: 'Premium', description: 'Advanced, growing needs' },\n    { id: 4, title: 'Deluxe', description: 'Top-tier, maximum performance' },\n    { id: 5, title: 'Ultimate', description: 'All-inclusive, every feature' },\n    { id: 6, title: 'Enterprise', description: 'Custom, large-scale operations' }\n]\n"
  },
  "collections/choicebox/choicebox-disabled-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-disabled-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxDisabledDemo() {\n    return (\n        <div className='p-1'>\n            <Choicebox aria-label='Select packages' selectionMode='multiple' items={packages}>\n                {(item) => <Choicebox.Item isDisabled={['sm', 'lg'].includes(item.id)} {...item} />}\n            </Choicebox>\n        </div>\n    )\n}\n\nconst packages = [\n    {\n        id: 'sm',\n        title: 'Small',\n        description: 'Perfect for beginners. Basic resources for light projects.'\n    },\n    {\n        id: 'md',\n        title: 'Medium',\n        description: 'Great for growing sites. More power and storage.'\n    },\n    {\n        id: 'lg',\n        title: 'Large',\n        description: 'Ideal for busy sites. Lots of resources and support.'\n    },\n    {\n        id: 'xl',\n        title: 'Extra Large',\n        description: 'Max power for demanding applications. Top-tier performance.'\n    }\n]\n"
  },
  "collections/choicebox/choicebox-single-selection-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-single-selection-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxSingleSelectionDemo() {\n    return (\n        <Choicebox aria-label='Select packages' selectionMode='single' items={packages}>\n            {(item) => <Choicebox.Item {...item} />}\n        </Choicebox>\n    )\n}\n\nconst packages = [\n    {\n        id: 'sm',\n        title: 'Small',\n        description: 'Perfect for beginners. Basic resources for light projects.'\n    },\n    {\n        id: 'md',\n        title: 'Medium',\n        description: 'Great for growing sites. More power and storage.'\n    },\n    {\n        id: 'lg',\n        title: 'Large',\n        description: 'Ideal for busy sites. Lots of resources and support.'\n    },\n    {\n        id: 'xl',\n        title: 'Extra Large',\n        description: 'Max power for demanding applications. Top-tier performance.'\n    }\n]\n"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconImage } from 'hq-icons'\nimport Image from 'next/image'\nimport { isFileDropItem } from 'react-aria-components'\n\nimport { Description, DropZone, FileTrigger } from '@/components/ui'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function DropZoneAndFileTriggerDemo() {\n    const [droppedImage, setDroppedImage] = React.useState<string | undefined>(undefined)\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    const onSelectHandler = async (e: FileList | null) => {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n    return (\n        <DropZone\n            getDropOperation={(types) =>\n                types.has('image/jpeg') || types.has('image/png') ? 'copy' : 'cancel'\n            }\n            onDrop={onDropHandler}\n        >\n            {droppedImage ? (\n                <Image\n                    width={400}\n                    height={300}\n                    alt=''\n                    src={droppedImage}\n                    className='aspect-square size-full object-contain'\n                />\n            ) : (\n                <div className='grid space-y-3'>\n                    <div className='size-12 mx-auto grid place-content-center rounded-full border bg-muted/70 group-data-[drop-target]:bg-primary/20 group-data-[drop-target]:border-primary/70'>\n                        <IconImage className='size-5' />\n                    </div>\n                    <div className='justify-center flex'>\n                        <FileTrigger\n                            acceptedFileTypes={['image/png', 'image/jpeg']}\n                            allowsMultiple={false}\n                            onSelect={onSelectHandler}\n                        >\n                            Upload a file\n                        </FileTrigger>\n                    </div>\n                    <Description>Or drag and drop PNG, JPG, GIF up to 10MB</Description>\n                </div>\n            )}\n            <input type='hidden' name='image' value={droppedImage} />\n        </DropZone>\n    )\n}\n"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from '@/components/ui'\n\nexport default function DropZoneDemo() {\n    const [dropped, setDropped] = React.useState(false)\n\n    return (\n        <DropZone onDrop={() => setDropped(true)}>\n            <Label>{dropped ? 'Drop nailed' : 'Toss your stuff here'}</Label>\n        </DropZone>\n    )\n}\n"
  },
  "block/layouts/auth-layout-classic": {
    "component": "@/components/docs/block/layouts/auth-layout-classic",
    "raw": "import { Card } from '@/components/ui'\n\nexport default function AuthLayoutClassic({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='w-full min-h-screen flex items-center justify-center p-4 lg:p-8'>\n            <Card className='w-full max-w-lg'>\n                <Card.Header>\n                    <Card.Title>{title}</Card.Title>\n                    <Card.Description>{description}</Card.Description>\n                </Card.Header>\n                <Card.Content>{children}</Card.Content>\n            </Card>\n        </div>\n    )\n}\n"
  },
  "block/layouts/app-sidebar": {
    "component": "@/components/docs/block/layouts/app-sidebar",
    "raw": "'use client'\n\nimport {\n    IconArchive,\n    IconArrowDown,\n    IconArrowUp,\n    IconBrandApple,\n    IconBuilding,\n    IconCheck,\n    IconChevronDown,\n    IconClock,\n    IconCommand,\n    IconCreditCard,\n    IconEllipsis,\n    IconGauge,\n    IconHash,\n    IconHeadphones,\n    IconList,\n    IconLogOut,\n    IconMessage,\n    IconNotebook,\n    IconPackage,\n    IconPlus,\n    IconSettings,\n    IconShield,\n    IconShieldQuestion,\n    IconShoppingBag,\n    IconTicket\n} from 'hq-icons'\n\nimport {\n    Avatar,\n    Link,\n    Menu,\n    Sidebar,\n    SidebarContent,\n    SidebarDisclosure,\n    SidebarDisclosureGroup,\n    SidebarDisclosurePanel,\n    SidebarDisclosureTrigger,\n    SidebarFooter,\n    SidebarHeader,\n    SidebarItem,\n    SidebarLabel,\n    SidebarLink,\n    SidebarRail,\n    SidebarSection,\n    SidebarSectionGroup\n} from '@/components/ui'\n\nexport default function AppSidebar(props: React.ComponentProps<typeof Sidebar>) {\n    return (\n        <Sidebar {...props}>\n            <SidebarHeader>\n                <Link\n                    className='flex items-center gap-x-2 group-data-[collapsible=dock]:size-10 group-data-[collapsible=dock]:justify-center'\n                    href='/docs/2.x/components/layouts/sidebar'\n                >\n                    <IconBrandApple className='size-5' />\n                    <SidebarLabel className='font-medium'>Apple</SidebarLabel>\n                </Link>\n            </SidebarHeader>\n            <SidebarContent>\n                <SidebarSectionGroup>\n                    <SidebarSection title='Overview'>\n                        <SidebarItem tooltip='Overview' isCurrent href='#'>\n                            <IconGauge />\n                            <SidebarLabel>Overview</SidebarLabel>\n                        </SidebarItem>\n\n                        <SidebarItem tooltip='Orders'>\n                            {({ isHovered, isCollapsed }) => (\n                                <>\n                                    <SidebarLink href='#'>\n                                        <IconShoppingBag />\n                                        <SidebarLabel>Orders</SidebarLabel>\n                                    </SidebarLink>\n                                    {!isCollapsed && isHovered && (\n                                        <Menu>\n                                            <Menu.Trigger aria-label='Manage'>\n                                                <IconEllipsis />\n                                            </Menu.Trigger>\n                                            <Menu.Content offset={0} placement='right top'>\n                                                <Menu.Item href='#new-order'>\n                                                    <IconPlus />\n                                                    Create New Order\n                                                </Menu.Item>\n                                                <Menu.Item href='#view-all'>\n                                                    <IconList />\n                                                    View All Orders\n                                                </Menu.Item>\n                                                <Menu.Item href='#pending-orders'>\n                                                    <IconClock />\n                                                    Pending Orders\n                                                </Menu.Item>\n                                                <Menu.Item href='#completed-orders'>\n                                                    <IconCheck />\n                                                    Completed Orders\n                                                </Menu.Item>\n                                                <Menu.Item href='#export-orders'>\n                                                    <IconArrowUp />\n                                                    Export Orders\n                                                </Menu.Item>\n                                            </Menu.Content>\n                                        </Menu>\n                                    )}\n                                </>\n                            )}\n                        </SidebarItem>\n                        <SidebarItem tooltip='Products'>\n                            {({ isHovered, isCollapsed }) => (\n                                <>\n                                    <SidebarLink href='#'>\n                                        <SidebarLabel>Products</SidebarLabel>\n                                    </SidebarLink>\n                                    {!isCollapsed && isHovered && (\n                                        <Menu>\n                                            <Menu.Trigger aria-label='Manage'>\n                                                <IconEllipsis />\n                                            </Menu.Trigger>\n                                            <Menu.Content offset={0} placement='right top'>\n                                                <Menu.Item href='#new-product'>\n                                                    <IconPlus />\n                                                    Add New Product\n                                                </Menu.Item>\n                                                <Menu.Item href='#archive'>\n                                                    <IconArchive />\n                                                    Archive Product\n                                                </Menu.Item>\n                                                <Menu.Item href='#manage-categories'>\n                                                    <IconHash />\n                                                    Manage Categories\n                                                </Menu.Item>\n                                                <Menu.Item href='#import'>\n                                                    <IconArrowDown />\n                                                    Import Products\n                                                </Menu.Item>\n                                                <Menu.Item href='#export'>\n                                                    <IconArrowUp />\n                                                    Export Products\n                                                </Menu.Item>\n                                            </Menu.Content>\n                                        </Menu>\n                                    )}\n                                </>\n                            )}\n                        </SidebarItem>\n                        <SidebarItem href='#' badge='4 Pending' tooltip='Payments'>\n                            <IconCreditCard />\n                            <SidebarLabel>Payments</SidebarLabel>\n                        </SidebarItem>\n                    </SidebarSection>\n\n                    <SidebarDisclosureGroup defaultExpandedKeys={[1]}>\n                        <SidebarDisclosure id={1}>\n                            <SidebarDisclosureTrigger>\n                                <IconEllipsis />\n                                <SidebarLabel>Support</SidebarLabel>\n                            </SidebarDisclosureTrigger>\n                            <SidebarDisclosurePanel>\n                                <SidebarItem href='#' tooltip='Tickets'>\n                                    <IconTicket />\n                                    <SidebarLabel>Tickets</SidebarLabel>\n                                </SidebarItem>\n                                <SidebarItem href='#' tooltip='Chat Support'>\n                                    <IconMessage />\n                                    <SidebarLabel>Chat Support</SidebarLabel>\n                                </SidebarItem>\n                                <SidebarItem href='#' tooltip='FAQ'>\n                                    <IconShieldQuestion />\n                                    <SidebarLabel>FAQ</SidebarLabel>\n                                </SidebarItem>\n                                <SidebarItem href='#' tooltip='Documentation'>\n                                    <IconNotebook />\n                                    <SidebarLabel>Documentation</SidebarLabel>\n                                </SidebarItem>\n                            </SidebarDisclosurePanel>\n                        </SidebarDisclosure>\n                        <SidebarDisclosure id={2}>\n                            <SidebarDisclosureTrigger>\n                                <IconPackage />\n                                <SidebarLabel>Inventory</SidebarLabel>\n                            </SidebarDisclosureTrigger>\n                            <SidebarDisclosurePanel>\n                                <SidebarItem href='#' tooltip='Warehouse'>\n                                    <IconBuilding />\n                                    <SidebarLabel>Warehouse</SidebarLabel>\n                                </SidebarItem>\n                                <SidebarItem href='#' tooltip='Stock Levels'>\n                                    <SidebarLabel>Stock Levels</SidebarLabel>\n                                </SidebarItem>\n                                <SidebarItem href='#' tooltip='Shipping'>\n                                    <SidebarLabel>Shipping</SidebarLabel>\n                                </SidebarItem>\n                            </SidebarDisclosurePanel>\n                        </SidebarDisclosure>\n                    </SidebarDisclosureGroup>\n                </SidebarSectionGroup>\n            </SidebarContent>\n\n            <SidebarFooter>\n                <Menu>\n                    <Menu.Trigger className='group' aria-label='Profile' data-slot='menu-trigger'>\n                        <Avatar shape='square' src='https://github.com/dq-alhq.png' />\n                        <div className='text-sm in-data-[sidebar-collapsible=dock]:hidden'>\n                            <SidebarLabel>DQ Al Haqqi</SidebarLabel>\n                            <span className='text-muted-fg -mt-0.5 block'>@dq-alhq</span>\n                        </div>\n                        <IconChevronDown\n                            data-slot='chevron'\n                            className='group-pressed:rotate-180 absolute right-3 size-4 transition-transform'\n                        />\n                    </Menu.Trigger>\n                    <Menu.Content placement='bottom right' className='sm:min-w-(--trigger-width)'>\n                        <Menu.Section>\n                            <Menu.Header separator>\n                                <span className='block'>Kurt Cobain</span>\n                                <span className='text-muted-fg font-normal'>@cobain</span>\n                            </Menu.Header>\n                        </Menu.Section>\n\n                        <Menu.Item href='#dashboard'>\n                            <IconGauge />\n                            Dashboard\n                        </Menu.Item>\n                        <Menu.Item href='#settings'>\n                            <IconSettings />\n                            Settings\n                        </Menu.Item>\n                        <Menu.Item href='#security'>\n                            <IconShield />\n                            Security\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Item>\n                            <IconCommand />\n                            Command Menu\n                        </Menu.Item>\n\n                        <Menu.Item href='#contact'>\n                            <IconHeadphones />\n                            Customer Support\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Item href='#logout'>\n                            <IconLogOut />\n                            Log out\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </SidebarFooter>\n            <SidebarRail />\n        </Sidebar>\n    )\n}\n"
  },
  "block/layouts/app-sidebar-nav": {
    "component": "@/components/docs/block/layouts/app-sidebar-nav",
    "raw": "'use client'\n\nimport {\n    IconCommand,\n    IconComputer,\n    IconGauge,\n    IconLogOut,\n    IconMoon,\n    IconSettings,\n    IconSun\n} from 'hq-icons'\nimport { useTheme } from 'next-themes'\n\nimport { Avatar, Breadcrumbs, Menu, SidebarNav, SidebarTrigger } from '@/components/ui'\n\nexport default function AppSidebarNav() {\n    return (\n        <SidebarNav className='border-b'>\n            <span className='flex items-center gap-x-4'>\n                <SidebarTrigger />\n                <Breadcrumbs className='hidden @md:flex'>\n                    <Breadcrumbs.Item href='/blocks/sidebar/sidebar-01'>Dashboard</Breadcrumbs.Item>\n                    <Breadcrumbs.Item>Newsletter</Breadcrumbs.Item>\n                </Breadcrumbs>\n            </span>\n            <UserMenu />\n        </SidebarNav>\n    )\n}\n\nfunction UserMenu() {\n    const { resolvedTheme, setTheme } = useTheme()\n    return (\n        <Menu>\n            <Menu.Trigger className='ml-auto md:hidden' aria-label='Open Menu'>\n                <Avatar alt='DQ Al-Haqqi' src='https://github.com/dq-alhq.png' />\n            </Menu.Trigger>\n            <Menu.Content placement='bottom' showArrow className='sm:min-w-64'>\n                <Menu.Section>\n                    <Menu.Header separator>\n                        <span className='block'>DQ Al-Haqqi</span>\n                        <span className='text-muted-fg font-normal'>@dq-alhq</span>\n                    </Menu.Header>\n                </Menu.Section>\n                <Menu.Item href='#dashboard'>\n                    <IconGauge />\n                    <Menu.Label>Dashboard</Menu.Label>\n                </Menu.Item>\n                <Menu.Item href='#settings'>\n                    <IconSettings />\n                    <Menu.Label>Settings</Menu.Label>\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item>\n                    <IconCommand />\n                    <Menu.Label>Command Menu</Menu.Label>\n                </Menu.Item>\n                <Menu.Submenu>\n                    <Menu.Item>\n                        {resolvedTheme === 'light' ? (\n                            <IconSun />\n                        ) : resolvedTheme === 'dark' ? (\n                            <IconMoon />\n                        ) : (\n                            <IconComputer />\n                        )}\n                        <Menu.Label>Switch theme</Menu.Label>\n                    </Menu.Item>\n                    <Menu.Content>\n                        <Menu.Item onAction={() => setTheme('system')}>\n                            <IconComputer /> System\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme('dark')}>\n                            <IconMoon /> Dark\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme('light')}>\n                            <IconSun /> Light\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu.Submenu>\n                <Menu.Separator />\n                <Menu.Item href='#contact-s'>\n                    <Menu.Label>Contact Support</Menu.Label>\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item href='#logout'>\n                    <IconLogOut />\n                    <Menu.Label>Log out</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "block/layouts/auth-layout-split": {
    "component": "@/components/docs/block/layouts/auth-layout-split",
    "raw": "import Image from 'next/image'\n\nimport { Card } from '@/components/ui'\n\nexport default function AuthLayoutSplit({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='w-full grid lg:min-h-screen lg:max-h-screen lg:grid-cols-2'>\n            <div className='flex items-center justify-center py-12 px-4 lg:px-8 '>\n                <Card className='w-full max-w-lg mx-auto' borderless>\n                    <Card.Header>\n                        <Card.Title>{title}</Card.Title>\n                        <Card.Description>{description}</Card.Description>\n                    </Card.Header>\n                    <Card.Content>{children}</Card.Content>\n                </Card>\n            </div>\n            <div className='hidden bg-muted lg:block'>\n                <Image\n                    src='https://picsum.photos/1920/1080'\n                    alt='Image'\n                    priority\n                    width='1920'\n                    height='1080'\n                    className='size-full object-cover dark:brightness-[0.2] dark:grayscale'\n                />\n            </div>\n        </div>\n    )\n}\n"
  },
  "block/layouts/auth-layout-full": {
    "component": "@/components/docs/block/layouts/auth-layout-full",
    "raw": "import Image from 'next/image'\n\nimport { Card } from '@/components/ui'\n\nexport default function AuthLayoutSplit({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='w-full justify-center items-center flex min-h-screen'>\n            <div className='flex w-full max-w-xl px-4 lg:px-8 items-center justify-center py-12'>\n                <Card className='w-full mx-auto lg:border-none lg:shadow-none'>\n                    <Card.Header>\n                        <Card.Title>{title}</Card.Title>\n                        <Card.Description>{description}</Card.Description>\n                    </Card.Header>\n                    <Card.Content>{children}</Card.Content>\n                </Card>\n            </div>\n            <div className='hidden bg-muted lg:w-full lg:block lg:h-screen'>\n                <Image\n                    src='https://picsum.photos/1920/1080'\n                    alt='Image'\n                    priority\n                    width='1920'\n                    height='1080'\n                    className='size-full object-cover dark:brightness-[0.2] dark:grayscale'\n                />\n            </div>\n        </div>\n    )\n}\n"
  },
  "block/layouts/auth-layout-overlay": {
    "component": "@/components/docs/block/layouts/auth-layout-overlay",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function AuthLayoutOverlay({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='flex w-full items-center justify-center h-screen'>\n            <Modal>\n                <Button>Register</Button>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>{title}</Modal.Title>\n                        <Modal.Description>{description}</Modal.Description>\n                    </Modal.Header>\n                    <Modal.Body>{children}</Modal.Body>\n                </Modal.Content>\n            </Modal>\n        </div>\n    )\n}\n"
  },
  "block/layouts/auth-layout-modern": {
    "component": "@/components/docs/block/layouts/auth-layout-modern",
    "raw": "import Image from 'next/image'\n\nimport { Card } from '@/components/ui'\n\nexport default function AuthLayoutModern({\n    title,\n    description,\n    children\n}: {\n    title: string\n    description: string\n    children: React.ReactNode\n}) {\n    return (\n        <div className='w-full justify-center items-center flex min-h-screen'>\n            <div className='lg:border rounded-lg lg:shadow-sm flex justify-center w-full lg:max-w-screen-xl'>\n                <div className='flex w-full max-w-xl px-4 lg:px-8 items-center justify-center py-12'>\n                    <Card className='w-full mx-auto lg:border-none lg:shadow-none'>\n                        <Card.Header>\n                            <Card.Title>{title}</Card.Title>\n                            <Card.Description>{description}</Card.Description>\n                        </Card.Header>\n                        <Card.Content>{children}</Card.Content>\n                    </Card>\n                </div>\n                <div className='hidden bg-muted lg:block'>\n                    <Image\n                        src='https://picsum.photos/1920/1080'\n                        alt='Image'\n                        priority\n                        width='1920'\n                        height='1080'\n                        className='size-full object-cover dark:brightness-[0.2] dark:grayscale'\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n"
  },
  "block/layouts/chatting-app-layout": {
    "component": "@/components/docs/block/layouts/chatting-app-layout",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBrandCleon,\n    IconChevronDown,\n    IconCircleUser,\n    IconFilm,\n    IconGroup,\n    IconLogOut,\n    IconMessage,\n    IconMoon,\n    IconRss,\n    IconSun\n} from 'hq-icons'\n\nimport { useTheme } from '@/components/providers'\nimport { Avatar, Button, Link, Menu, Sidebar, useSidebar } from '@/components/ui'\n\nexport default function ChattingAppLayout() {\n    const { theme, setTheme } = useTheme()\n    const { state } = useSidebar()\n    const collapsed = state === 'collapsed'\n    return (\n        <Sidebar collapsible='dock' variant='floating'>\n            <Sidebar.Header>\n                <Link\n                    className='flex items-center group-data-[collapsible=dock]:size-10 group-data-[collapsible=dock]:justify-center gap-x-2'\n                    href='#'\n                >\n                    <IconBrandCleon className='size-5' />\n                    <strong className='font-medium group-data-[collapsible=dock]:hidden'>\n                        CHATTING APP\n                    </strong>\n                </Link>\n            </Sidebar.Header>\n            <Sidebar.Content>\n                <Sidebar.Section>\n                    <SidebarItem isCurrent icon={IconMessage} href='#' textValue='Chats' />\n                    <SidebarItem icon={IconRss} href='#' textValue='Broadcast' />\n                    <SidebarItem icon={IconFilm} href='#' textValue='Stories' />\n                    <SidebarItem icon={IconGroup} href='#' textValue='Communities' />\n                </Sidebar.Section>\n            </Sidebar.Content>\n            <Sidebar.Footer className='lg:flex lg:flex-row hidden items-center'>\n                <Menu>\n                    <Button\n                        variant='ghost'\n                        aria-label='Profile'\n                        slot='close'\n                        className='group w-full justify-start group-data-[collapsible=dock]:justify-center'\n                    >\n                        <Avatar size='sm' shape='square' src='https://github.com/dq-alhq.png' />\n                        <span className='group-data-[collapsible=dock]:hidden flex items-center justify-center'>\n                            DQ Al-Haqqi\n                            <IconChevronDown className='right-3 size-4 absolute group-pressed:rotate-180 transition-transform' />\n                        </span>\n                    </Button>\n                    <Menu.Content\n                        placement={collapsed ? 'right' : 'top'}\n                        className={collapsed ? 'sm:min-w-56' : 'min-w-[--trigger-width]'}\n                    >\n                        <Menu.Item href='#'>\n                            <IconCircleUser />\n                            Profile\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n                            {theme === 'light' ? <IconMoon /> : <IconSun />}\n                            Dark Mode\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Item isDanger href='#'>\n                            <IconLogOut />\n                            Log out\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Sidebar.Footer>\n        </Sidebar>\n    )\n}\n\nfunction SidebarItem({ icon: Icon, ...props }: React.ComponentProps<typeof Sidebar.Item>) {\n    return <Sidebar.Item isCurrent={props.isCurrent} icon={Icon} {...props} />\n}\n"
  },
  "block/layouts/app-navbar": {
    "component": "@/components/docs/block/layouts/app-navbar",
    "raw": "'use client'\n\nimport {\n    IconBrandCleon,\n    IconChevronDown,\n    IconCommand,\n    IconGauge,\n    IconHeadphones,\n    IconLogOut,\n    IconSearch,\n    IconSettings,\n    IconShield,\n    IconShoppingBag\n} from 'hq-icons'\n\nimport { ThemeToggle } from '@/components/theme-toggle'\nimport { Avatar, Button, Menu, Navbar, Separator } from '@/components/ui'\n\nexport default function AppNavbar(props: React.ComponentProps<typeof Navbar>) {\n    return (\n        <Navbar {...props}>\n            <Navbar.Nav>\n                <Navbar.Logo\n                    aria-label='Goto documenation of Navbar'\n                    href='/docs/components/layouts/navbar'\n                >\n                    <IconBrandCleon className='size-6 sm:size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#' isCurrent>\n                        Home\n                    </Navbar.Item>\n                    <Navbar.Item href='#'>Shop</Navbar.Item>\n                    <Navbar.Item href='#'>Offers</Navbar.Item>\n                    <Navbar.Item href='#'>Orders</Navbar.Item>\n                    <Menu>\n                        <Navbar.Item>\n                            Categories <IconChevronDown data-slot='chevron' />\n                        </Navbar.Item>\n                        <Menu.Content items={categories}>\n                            {(item) => (\n                                <Menu.Item id={item.id} textValue={item.label} href={item.url}>\n                                    {item.label}\n                                </Menu.Item>\n                            )}\n                        </Menu.Content>\n                    </Menu>\n                </Navbar.Section>\n\n                <Navbar.Section className='ml-auto hidden md:flex'>\n                    <Navbar.Flex className='sm:gap-x-1'>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle variant='ghost' />\n                    </Navbar.Flex>\n                    <Separator orientation='vertical' className='mr-3 ml-1 h-6' />\n                    <UserMenu />\n                </Navbar.Section>\n            </Navbar.Nav>\n\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                    <Separator orientation='vertical' className='h-6 sm:mx-1' />\n                    <Navbar.Logo\n                        aria-label='Goto documenation of Navbar'\n                        href='/docs/components/layouts/navbar'\n                    >\n                        <IconBrandCleon className='size-5' />\n                    </Navbar.Logo>\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle variant='ghost' />\n                    </Navbar.Flex>\n                    <Separator orientation='vertical' className='mr-3 ml-1 h-6' />\n                    <UserMenu />\n                </Navbar.Flex>\n            </Navbar.Compact>\n            {props.children ?? null}\n        </Navbar>\n    )\n}\n\nconst categories = [\n    {\n        id: 1,\n        label: 'Electronics',\n        url: '#'\n    },\n    {\n        id: 2,\n        label: 'Fashion',\n        url: '#'\n    },\n    {\n        id: 3,\n        label: 'Home & Kitchen',\n        url: '#'\n    },\n    {\n        id: 4,\n        label: 'Sports',\n        url: '#'\n    },\n    {\n        id: 5,\n        label: 'Books',\n        url: '#'\n    },\n    {\n        id: 6,\n        label: 'Beauty & Personal Care',\n        url: '#'\n    },\n    {\n        id: 7,\n        label: 'Grocery',\n        url: '#'\n    },\n    {\n        id: 8,\n        label: 'Toys & Games',\n        url: '#'\n    },\n    {\n        id: 9,\n        label: 'Automotive',\n        url: '#'\n    },\n    {\n        id: 10,\n        label: 'Health & Wellness',\n        url: '#'\n    }\n]\n\nfunction UserMenu() {\n    return (\n        <Menu>\n            <Menu.Trigger aria-label='Open Menu'>\n                <Avatar alt='DQ' size='sm' shape='square' src='https://github.com/dq-alhq.png' />\n            </Menu.Trigger>\n            <Menu.Content placement='bottom right' className='sm:min-w-56'>\n                <Menu.Section>\n                    <Menu.Header separator>\n                        <span className='block'>DQ Al-Haqqi</span>\n                        <span className='text-muted-fg font-normal'>@dq-alhq</span>\n                    </Menu.Header>\n                </Menu.Section>\n\n                <Menu.Item href='#dashboard'>\n                    <IconGauge />\n                    Dashboard\n                </Menu.Item>\n                <Menu.Item href='#settings'>\n                    <IconSettings />\n                    Settings\n                </Menu.Item>\n                <Menu.Item href='#security'>\n                    <IconShield />\n                    Security\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item>\n                    <IconCommand />\n                    Command Menu\n                </Menu.Item>\n\n                <Menu.Item href='#contact'>\n                    <IconHeadphones />\n                    Customer Support\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item href='#logout'>\n                    <IconLogOut />\n                    Log out\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n"
  },
  "block/layouts/file-manager-layout": {
    "component": "@/components/docs/block/layouts/file-manager-layout",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBrandCleon,\n    IconDownload,\n    IconFilm,\n    IconFolders,\n    IconHome,\n    IconImages,\n    IconTrash\n} from 'hq-icons'\n\nimport { Link, Sidebar } from '@/components/ui'\n\ninterface Props {\n    rootDir: string\n    setRootDir: (rootDir: string) => void\n    children: React.ReactNode\n}\n\nexport default function FileManagerLayout({ children, rootDir, setRootDir }: Props) {\n    return (\n        <Sidebar.Provider>\n            <Sidebar collapsible='dock' variant='inset'>\n                <Sidebar.Header>\n                    <Link\n                        className='flex items-center group-data-[collapsible=dock]:size-10 group-data-[collapsible=dock]:justify-center gap-x-2'\n                        href='#'\n                    >\n                        <IconBrandCleon className='size-5' />\n                        <strong className='font-medium group-data-[collapsible=dock]:hidden'>\n                            FILE MANAGER\n                        </strong>\n                    </Link>\n                </Sidebar.Header>\n                <Sidebar.Content>\n                    <Sidebar.Section>\n                        <Sidebar.Item\n                            onPress={() => setRootDir('')}\n                            isCurrent={rootDir === ''}\n                            icon={IconHome}\n                            href='#'\n                            textValue='Home'\n                        />\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Downloads/')}\n                            isCurrent={rootDir.startsWith('Downloads/')}\n                            icon={IconDownload}\n                            href='#'\n                            textValue='Downloads'\n                        />\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Documents/')}\n                            isCurrent={rootDir.startsWith('Documents/')}\n                            icon={IconFolders}\n                            href='#'\n                            textValue='Documents'\n                        />\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Music/')}\n                            isCurrent={rootDir.startsWith('Music/')}\n                            icon={IconImages}\n                            href='#'\n                            textValue='Music'\n                        />\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Videos/')}\n                            isCurrent={rootDir.startsWith('Videos/')}\n                            icon={IconFilm}\n                            href='#'\n                            textValue='Videos'\n                        />\n                    </Sidebar.Section>\n                    <Sidebar.Section>\n                        <Sidebar.Item\n                            onPress={() => setRootDir('Trash/')}\n                            isCurrent={rootDir === 'Trash/'}\n                            icon={IconTrash}\n                            href='#'\n                            textValue='Trash'\n                        />\n                    </Sidebar.Section>\n                </Sidebar.Content>\n                <Sidebar.Rail />\n            </Sidebar>\n            <Sidebar.Inset>{children}</Sidebar.Inset>\n        </Sidebar.Provider>\n    )\n}\n"
  },
  "block/examples/auth-form-overlay": {
    "component": "@/components/docs/block/examples/auth-form-overlay",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutOverlay from 'layouts/auth-layout-overlay'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutOverlay title='Register' description='Create your account'>\n            <Form className='grid gap-y-4 pb-6' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutOverlay>\n    )\n}\n"
  },
  "block/examples/product-management": {
    "component": "@/components/docs/block/examples/product-management",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport Paginator from 'components/paginator'\nimport { IconEllipsisVertical, IconEye, IconHighlighter, IconPlus, IconTrash } from 'hq-icons'\nimport { Key } from 'react-aria-components'\nimport { useDebouncedCallback } from 'use-debounce'\n\nimport NavbarLayout from '@/components/docs/block/layouts/app-navbar'\nimport { Card, Menu, SearchField, Select, Table, Toolbar } from '@/components/ui'\n\ntype product = {\n    id: number\n    title: string\n    category: string\n    price: string\n}\n\nexport default function ProductManagement() {\n    const [items, setItems] = React.useState<product[]>([])\n    const [show, setShow] = React.useState<Key>(5)\n    const [page, setPage] = React.useState<number>(1)\n    const [total, setTotal] = React.useState<number>(0)\n\n    const getProducts = async ({ query = '' }: { query?: string } = {}) => {\n        const response = await fetch(\n            `https://dummyjson.com/products/search?q=${query}&limit=${show}&skip=${(page - 1) * Number(show)}&select=title,category,price`\n        )\n        const data = await response.json()\n        setItems(data.products)\n        setTotal(data.total)\n    }\n\n    const handleSearch = useDebouncedCallback((e) => {\n        if (e) {\n            getProducts({ query: e })\n        } else {\n            getProducts()\n        }\n    }, 300)\n\n    React.useEffect(() => {\n        getProducts()\n    }, [show, page])\n\n    return (\n        <NavbarLayout>\n            <Card>\n                <Card.Header>\n                    <Card.Title>Product Management</Card.Title>\n                    <Card.Description>Manage your products</Card.Description>\n                    <Toolbar className='flex justify-between pt-2'>\n                        <Toolbar.Group aria-label='Filters'>\n                            <Select\n                                aria-label='Show'\n                                selectedKey={show}\n                                onSelectionChange={setShow}\n                            >\n                                <Select.Item id={5} textValue='5'>\n                                    5\n                                </Select.Item>\n                                <Select.Item id={10} textValue='10'>\n                                    10\n                                </Select.Item>\n                                <Select.Item id={20} textValue='20'>\n                                    20\n                                </Select.Item>\n                            </Select>\n                        </Toolbar.Group>\n                        <Toolbar.Group aria-label='Actions'>\n                            <SearchField\n                                onChange={handleSearch}\n                                placeholder='Search...'\n                                aria-label='Search'\n                            />\n                            <Toolbar.Item aria-label='Create' size='icon' variant='outline'>\n                                <IconPlus />\n                            </Toolbar.Item>\n                        </Toolbar.Group>\n                    </Toolbar>\n                </Card.Header>\n                <Card.Content>\n                    <Table aria-label='Product'>\n                        <Table.Header>\n                            <Table.Column>#</Table.Column>\n                            <Table.Column id='title' isRowHeader>\n                                Title\n                            </Table.Column>\n                            <Table.Column>Category</Table.Column>\n                            <Table.Column>Price</Table.Column>\n                            <Table.Column />\n                        </Table.Header>\n                        <Table.Body items={items} renderEmptyState={() => <Table.Empty />}>\n                            {(item) => (\n                                <Table.Row id={item.id}>\n                                    <Table.Cell>{item.id}</Table.Cell>\n                                    <Table.Cell>{item.title}</Table.Cell>\n                                    <Table.Cell>{item.category}</Table.Cell>\n                                    <Table.Cell>{item.price}</Table.Cell>\n                                    <Table.Cell className='flex justify-end'>\n                                        <Menu>\n                                            <Menu.Trigger>\n                                                <IconEllipsisVertical />\n                                            </Menu.Trigger>\n                                            <Menu.Content showArrow placement='left top'>\n                                                <Menu.Item>\n                                                    <IconEye /> View\n                                                </Menu.Item>\n                                                <Menu.Item>\n                                                    <IconHighlighter /> Edit\n                                                </Menu.Item>\n                                                <Menu.Separator />\n                                                <Menu.Item isDanger>\n                                                    <IconTrash /> Delete\n                                                </Menu.Item>\n                                            </Menu.Content>\n                                        </Menu>\n                                    </Table.Cell>\n                                </Table.Row>\n                            )}\n                        </Table.Body>\n                    </Table>\n                </Card.Content>\n                <Card.Footer>\n                    <Paginator total={total} page={page} show={Number(show)} setPage={setPage} />\n                </Card.Footer>\n            </Card>\n        </NavbarLayout>\n    )\n}\n"
  },
  "block/examples/auth-form-split": {
    "component": "@/components/docs/block/examples/auth-form-split",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutSplit from 'layouts/auth-layout-split'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutSplit title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutSplit>\n    )\n}\n"
  },
  "block/examples/user-setting": {
    "component": "@/components/docs/block/examples/user-setting",
    "raw": "'use client'\n\nimport AccountSetting from 'components/user-setting/account-setting'\nimport DangerArea from 'components/user-setting/danger-area'\nimport PlanBillingSetting from 'components/user-setting/plan-billing-setting'\nimport SecuritySetting from 'components/user-setting/security-setting'\n\nimport NavbarLayout from '@/components/docs/block/layouts/app-navbar'\nimport { Card, Tabs } from '@/components/ui'\n\nexport default function UserSetting() {\n    return (\n        <NavbarLayout variant='floating'>\n            <Card borderless>\n                <Card.Header withoutPadding>\n                    <Card.Title>User Setting</Card.Title>\n                    <Card.Description>\n                        Manage your account settings and preferences.\n                    </Card.Description>\n                </Card.Header>\n            </Card>\n            <Tabs className='w-full gap-x-24' isResponsive aria-label='E-Learning Platform'>\n                <Tabs.List className='h-fit'>\n                    <Tabs.Label id='account'>Account</Tabs.Label>\n                    <Tabs.Label id='security'>Security</Tabs.Label>\n                    <Tabs.Label id='plan'>Plan & Billing</Tabs.Label>\n                    <Tabs.Label id='danger'>Danger Area</Tabs.Label>\n                </Tabs.List>\n                <Tabs.Content id='account'>\n                    <AccountSetting />\n                </Tabs.Content>\n                <Tabs.Content id='security'>\n                    <SecuritySetting />\n                </Tabs.Content>\n                <Tabs.Content id='plan'>\n                    <PlanBillingSetting />\n                </Tabs.Content>\n                <Tabs.Content id='danger'>\n                    <DangerArea />\n                </Tabs.Content>\n            </Tabs>\n        </NavbarLayout>\n    )\n}\n"
  },
  "block/examples/user-profile": {
    "component": "@/components/docs/block/examples/user-profile",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport About from 'components/user-profile/about'\nimport Media from 'components/user-profile/media'\nimport Posts from 'components/user-profile/posts'\nimport Image from 'next/image'\nimport { Key } from 'react-aria-components'\n\nimport NavbarLayout from '@/components/docs/block/layouts/app-navbar'\nimport { Avatar, Card, Description, Heading, Tabs } from '@/components/ui'\n\nexport default function UserProfile() {\n    const [panel, setPanel] = React.useState<Key>(1)\n    return (\n        <NavbarLayout variant='inset'>\n            <div className='relative w-full'>\n                <Card className='w-full overflow-hidden'>\n                    <Card.Content className='p-0 lg:h-96'>\n                        <Image\n                            width={1920}\n                            height={1080}\n                            src='https://picsum.photos/id/1/1920/1080'\n                            alt='profil'\n                            className='object-contain'\n                        />\n                    </Card.Content>\n                </Card>\n                <div className='relative mt-12 flex flex-col items-center gap-4 lg:mt-4 lg:flex-row'>\n                    <Avatar\n                        alt='logo'\n                        src='https://github.com/dq-alhq.png'\n                        className='bg-bg absolute bottom-32 left-1/2 size-24 -translate-x-1/2 rounded-full border p-1 lg:-bottom-4 lg:left-20 lg:size-44 lg:translate-x-0'\n                    />\n                    <div className='flex w-full flex-col gap-1 lg:ml-72'>\n                        <Heading className='text-center text-lg font-bold lg:text-left lg:text-4xl'>\n                            Diqi Al-Haqqi\n                        </Heading>\n                        <Description className='text-center text-sm uppercase lg:text-left lg:text-lg'>\n                            East Java, Indonesia\n                        </Description>\n                    </div>\n                    <Tabs\n                        className='mx-20 lg:ml-auto'\n                        selectedKey={panel}\n                        onSelectionChange={setPanel}\n                    >\n                        <Tabs.List>\n                            <Tabs.Label className='lg:text-xl' id={1}>\n                                Posts\n                            </Tabs.Label>\n                            <Tabs.Label className='lg:text-xl' id={2}>\n                                About\n                            </Tabs.Label>\n                            <Tabs.Label className='lg:text-xl' id={3}>\n                                Media\n                            </Tabs.Label>\n                        </Tabs.List>\n                    </Tabs>\n                </div>\n            </div>\n            <div className='mt-2 flex flex-col gap-6 lg:mt-12 lg:flex-row'>\n                {panel === 1 && <Posts />}\n                {panel === 2 && <About />}\n                {panel === 3 && <Media />}\n            </div>\n        </NavbarLayout>\n    )\n}\n"
  },
  "block/examples/file-manager": {
    "component": "@/components/docs/block/examples/file-manager",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getFileIcon, mapFilePaths, rootFolders } from 'components/file-manager/file-list'\nimport {\n    IconLayoutGrid,\n    IconLayoutList,\n    IconSearch,\n    IconSquare,\n    IconSquareCheckBig\n} from 'hq-icons'\nimport FileManagerLayout from 'layouts/file-manager-layout'\n\nimport {\n    Breadcrumbs,\n    Button,\n    GridList,\n    SearchField,\n    Separator,\n    Sidebar,\n    Toggle\n} from '@/components/ui'\n\nexport default function FileManager() {\n    const [view, setView] = React.useState<'grid' | 'stack'>('grid')\n    const [selectionMode, setSelectionMode] = React.useState<'single' | 'multiple'>('single')\n    const [dir, setDir] = React.useState('')\n    const paths = mapFilePaths(rootFolders)\n\n    const [files, setFiles] = React.useState(paths)\n\n    React.useEffect(() => {\n        setFiles(paths.filter((path) => path.startsWith(dir)))\n    }, [dir])\n\n    return (\n        <FileManagerLayout rootDir={dir} setRootDir={setDir}>\n            <header className='sticky justify-between top-0 h-[3.57rem] px-4 flex items-center gap-x-2'>\n                <span className='flex items-center gap-x-4'>\n                    <Sidebar.Trigger className='-mx-2' />\n                    <Separator className='h-6 md:block hidden' orientation='vertical' />\n                    <Breadcrumbs\n                        className='md:flex hidden'\n                        items={dir\n                            .split('/')\n                            .filter((item) => item !== '')\n                            .map((item) => ({ id: item }))}\n                    >\n                        {(item) => (\n                            <Breadcrumbs.Item onPress={() => setDir(item.id + '/')} id={item.id}>\n                                {item.id}\n                            </Breadcrumbs.Item>\n                        )}\n                    </Breadcrumbs>\n                </span>\n                <div className='flex items-center gap-x-2'>\n                    <Button\n                        variant='ghost'\n                        className='md:hidden'\n                        aria-label='Search...'\n                        size='icon'\n                    >\n                        <IconSearch />\n                    </Button>\n                    <SearchField aria-label='Search' className='hidden md:inline-flex' />\n                    <Button\n                        size='icon'\n                        variant='ghost'\n                        aria-label='View'\n                        onPress={() => setView(view === 'stack' ? 'grid' : 'stack')}\n                    >\n                        {view === 'stack' ? (\n                            <IconLayoutList />\n                        ) : (\n                            <IconLayoutGrid className='size-5' />\n                        )}\n                    </Button>\n                    <Toggle\n                        size='icon'\n                        variant='ghost'\n                        aria-label='Selection Mode'\n                        isSelected={selectionMode === 'multiple'}\n                        onChange={() =>\n                            setSelectionMode(selectionMode === 'multiple' ? 'single' : 'multiple')\n                        }\n                    >\n                        {({ isSelected }) => (isSelected ? <IconSquareCheckBig /> : <IconSquare />)}\n                    </Toggle>\n                </div>\n            </header>\n            <div className='p-4 lg:p-6'>\n                <GridList\n                    aria-label='Files'\n                    selectionBehavior='toggle'\n                    layout={view}\n                    selectionMode={selectionMode}\n                    items={[\n                        ...new Map(\n                            files.map((item) => [\n                                item.replace(dir, '').split('/')[0],\n                                { id: item.replace(dir, '').split('/')[0] }\n                            ])\n                        ).values()\n                    ]}\n                >\n                    {(item) => (\n                        <GridList.Item\n                            textValue={item.id}\n                            id={item.id}\n                            onAction={() =>\n                                !item.id.includes('.') && setDir(dir + item.id.split('/')[0] + '/')\n                            }\n                        >\n                            {getFileIcon(item.id.split('.').pop() || 'folder')}\n                            {item.id}\n                        </GridList.Item>\n                    )}\n                </GridList>\n            </div>\n        </FileManagerLayout>\n    )\n}\n"
  },
  "block/examples/auth-form-full": {
    "component": "@/components/docs/block/examples/auth-form-full",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutFull from 'layouts/auth-layout-full'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutFull title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutFull>\n    )\n}\n"
  },
  "block/examples/auth-form-classic": {
    "component": "@/components/docs/block/examples/auth-form-classic",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutClassic from 'layouts/auth-layout-classic'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutClassic title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutClassic>\n    )\n}\n"
  },
  "block/examples/dashboard": {
    "component": "@/components/docs/block/examples/dashboard",
    "raw": "'use client'\n\nimport {\n    IconActivity,\n    IconChartColumn,\n    IconRupiah,\n    IconSquareArrowUpRight,\n    IconUsers\n} from 'hq-icons'\n\nimport NavbarLayout from '@/components/docs/block/layouts/app-navbar'\nimport { Avatar, buttonStyles, Card, Link, Table } from '@/components/ui'\nimport { getInitials } from '@/lib/utils'\n\nexport default function Dashboard() {\n    return (\n        <NavbarLayout variant='inset'>\n            <main className='flex flex-1 flex-col gap-4 md:gap-8'>\n                <div className='grid gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-4'>\n                    <Card>\n                        <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                            <Card.Title className='text-sm font-medium'>Total Revenue</Card.Title>\n                            <IconRupiah className='text-muted-fg size-4' />\n                        </Card.Header>\n                        <Card.Content>\n                            <div className='text-2xl font-bold'>Rp 45,231.89</div>\n                            <p className='text-muted-fg text-xs'>+20.1% from last month</p>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                            <Card.Title className='text-sm font-medium'>Subscriptions</Card.Title>\n                            <IconUsers className='text-muted-fg size-4' />\n                        </Card.Header>\n                        <Card.Content>\n                            <div className='text-2xl font-bold'>+2350</div>\n                            <p className='text-muted-fg text-xs'>+180.1% from last month</p>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                            <Card.Title className='text-sm font-medium'>Sales</Card.Title>\n                            <IconChartColumn className='text-muted-fg size-4' />\n                        </Card.Header>\n                        <Card.Content>\n                            <div className='text-2xl font-bold'>+12,234</div>\n                            <p className='text-muted-fg text-xs'>+19% from last month</p>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                            <Card.Title className='text-sm font-medium'>Active Now</Card.Title>\n                            <IconActivity className='text-muted-fg size-4' />\n                        </Card.Header>\n                        <Card.Content>\n                            <div className='text-2xl font-bold'>+573</div>\n                            <p className='text-muted-fg text-xs'>+201 since last hour</p>\n                        </Card.Content>\n                    </Card>\n                </div>\n                <div className='grid gap-4 md:gap-8 lg:grid-cols-2 xl:grid-cols-3'>\n                    <Card className='xl:col-span-2'>\n                        <Card.Header className='flex flex-row justify-between'>\n                            <div className='grid gap-1'>\n                                <Card.Title>Transactions</Card.Title>\n                                <Card.Description>Recent transactions.</Card.Description>\n                            </div>\n                            <Link\n                                variant='unstyled'\n                                className={buttonStyles({ variant: 'outline' })}\n                                href='#'\n                            >\n                                All\n                                <IconSquareArrowUpRight />\n                            </Link>\n                        </Card.Header>\n                        <Card.Content>\n                            <Table>\n                                <Table.Header>\n                                    <Table.Column isRowHeader>Customer</Table.Column>\n                                    <Table.Column className='[&_div]:justify-end'>\n                                        Amount\n                                    </Table.Column>\n                                </Table.Header>\n                                <Table.Body>\n                                    {transactions.map((transaction) => (\n                                        <Table.Row key={transaction.id}>\n                                            <Table.Cell>\n                                                <div className='font-medium'>\n                                                    {transaction.name}\n                                                </div>\n                                                <div className='text-muted-fg hidden text-sm md:inline'>\n                                                    {transaction.email}\n                                                </div>\n                                            </Table.Cell>\n                                            <Table.Cell className='text-right'>\n                                                Rp {transaction.amount}\n                                            </Table.Cell>\n                                        </Table.Row>\n                                    ))}\n                                </Table.Body>\n                            </Table>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>Recent Sales</Card.Title>\n                        </Card.Header>\n                        <Card.Content className='grid gap-8'>\n                            {transactions.map((transaction) => (\n                                <div key={transaction.id} className='flex items-center gap-4'>\n                                    <Avatar\n                                        className='hidden size-9 sm:flex'\n                                        src={`https://i.pravatar.cc/150?img=${transaction.id}`}\n                                        initials={getInitials(transaction.name)}\n                                    />\n                                    <div className='grid gap-1'>\n                                        <p className='text-sm leading-none font-medium'>\n                                            {transaction.name}\n                                        </p>\n                                        <p className='text-muted-fg text-sm'>{transaction.email}</p>\n                                    </div>\n                                    <div className='ml-auto font-medium'>\n                                        +Rp {transaction.amount}\n                                    </div>\n                                </div>\n                            ))}\n                        </Card.Content>\n                    </Card>\n                </div>\n            </main>\n        </NavbarLayout>\n    )\n}\n\nconst transactions = [\n    {\n        id: 1,\n        name: 'Berger',\n        email: 'bergersavage@senmao.com',\n        amount: 17135\n    },\n    {\n        id: 2,\n        name: 'Horn',\n        email: 'hornsavage@senmao.com',\n        amount: 25866\n    },\n    {\n        id: 3,\n        name: 'Frieda',\n        email: 'friedasavage@senmao.com',\n        amount: 54584\n    },\n    {\n        id: 4,\n        name: 'Noble',\n        email: 'noblesavage@senmao.com',\n        amount: 27562\n    },\n    {\n        id: 5,\n        name: 'Hewitt',\n        email: 'hewittsavage@senmao.com',\n        amount: 77237\n    }\n]\n"
  },
  "block/examples/auth-form-modern": {
    "component": "@/components/docs/block/examples/auth-form-modern",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandGoogle } from 'hq-icons'\nimport AuthLayoutModern from 'layouts/auth-layout-modern'\nimport { toast } from 'sonner'\n\nimport { Button, Checkbox, Form, Link, ShowMore, TextField } from '@/components/ui'\n\nexport default function AuthForm() {\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        toast.success('Register Successfully')\n    }\n\n    return (\n        <AuthLayoutModern title='Register' description='Create your account'>\n            <Form className='grid gap-4' onSubmit={onSubmit}>\n                <TextField isRequired label='Name' placeholder='Enter your Name' />\n                <TextField isRequired label='Email' type='email' placeholder='Enter your email' />\n                <TextField\n                    isRevealable\n                    isRequired\n                    label='Password'\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <Checkbox>I agree to the terms and conditions</Checkbox>\n                <Button className='w-full mt-2' type='submit'>\n                    Register\n                </Button>\n                <Link href='#' className='text-center text-sm mb-4'>\n                    Already have an account?\n                </Link>\n                <ShowMore as='text' text='Or continue with' />\n                <div className='flex gap-4'>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGithub className='size-4' />\n                        Github\n                    </Button>\n                    <Button variant='outline' className='w-full'>\n                        <IconBrandGoogle className='size-4' />\n                        Google\n                    </Button>\n                </div>\n            </Form>\n        </AuthLayoutModern>\n    )\n}\n"
  },
  "block/examples/chatting-app": {
    "component": "@/components/docs/block/examples/chatting-app",
    "raw": "'use client'\n\nimport React, { FormEvent } from 'react'\n\nimport BubbleChat, { type BubbleChatProps } from 'components/chatting-app/bubble-chat'\nimport ContactList from 'components/chatting-app/contact-list'\nimport MessageForm from 'components/chatting-app/message-form'\nimport {\n    IconCircleX,\n    IconContact,\n    IconEllipsisVertical,\n    IconLogOut,\n    IconMessageDashed,\n    IconMessageMore,\n    IconMessagePlus,\n    IconTrash,\n    IconUser\n} from 'hq-icons'\nimport ChattingAppLayout from 'layouts/chatting-app-layout'\n\nimport { Avatar, Button, buttonStyles, cn, Menu, Popover, Sidebar } from '@/components/ui'\nimport { formatTime } from '@/lib/utils'\n\nexport default function ChatApp() {\n    const [chats, setChats] = React.useState<BubbleChatProps[]>([\n        {\n            message: \"Assalamu'alaikum, Hello Bro!\",\n            time: '10:00',\n            role: 'recieve'\n        },\n        {\n            message: \"Wa'alaikumsalam, Yes Bro... What's up?\",\n            time: '10:01',\n            role: 'send',\n            status: 'read'\n        },\n        {\n            message: `I Have a good news, There is new Component at this site. I hope you will like it.\n                Check it out. https://cleon-ui.vercel.app\n                `,\n            time: '10:03',\n            role: 'recieve'\n        }\n    ])\n\n    const [message, setMessage] = React.useState<string>('')\n\n    function sendMessage(e: FormEvent) {\n        e.preventDefault()\n        setChats([\n            ...chats,\n            {\n                message,\n                time: formatTime(new Date()),\n                role: 'send'\n            }\n        ])\n        setMessage('')\n    }\n\n    function deleteChat(index: number) {\n        setChats([...chats.slice(0, index), ...chats.slice(index + 1)])\n    }\n\n    return (\n        <Sidebar.Provider isOpen={false}>\n            <ChattingAppLayout />\n            <main className='grid flex-1 gap-3 overflow-auto md:grid-cols-2 md:p-2 lg:grid-cols-4'>\n                <div className='relative hidden flex-col items-start gap-4 rounded-lg border md:flex'>\n                    <div className='bg-bg sticky top-0 z-20 flex w-full items-center justify-between rounded-lg p-4'>\n                        <h1 className='text-2xl font-bold'>Chats</h1>\n                        <div className='flex items-center justify-between gap-2'>\n                            <Button variant='ghost' size='icon'>\n                                <IconMessageMore className='!size-6' />\n                            </Button>\n                            <Menu>\n                                <Menu.Trigger\n                                    className={buttonStyles({\n                                        variant: 'ghost',\n                                        size: 'icon'\n                                    })}\n                                >\n                                    <IconEllipsisVertical />\n                                </Menu.Trigger>\n                                <Menu.Content placement='bottom end'>\n                                    <Menu.Item>\n                                        <IconMessagePlus />\n                                        New Group\n                                    </Menu.Item>\n                                    <Menu.Item isDanger>\n                                        <IconLogOut />\n                                        Logout\n                                    </Menu.Item>\n                                </Menu.Content>\n                            </Menu>\n                        </div>\n                    </div>\n                    <div className='w-full px-4'>\n                        <ContactList />\n                    </div>\n                </div>\n                <div className='bg-bg relative flex h-full min-h-[50vh] flex-col rounded-lg lg:col-span-3'>\n                    <div className='flex flex-row items-center gap-3 rounded-lg border-b p-2 md:border md:px-4'>\n                        <Popover>\n                            <Button variant='ghost' size='icon' className='md:hidden'>\n                                <IconContact />\n                            </Button>\n                            <Popover.Content aria-label='Contact List'>\n                                <Popover.Body>\n                                    <ContactList />\n                                </Popover.Body>\n                            </Popover.Content>\n                        </Popover>\n                        <Avatar initials='HB' status='success' src='https://i.pravatar.cc/77' />\n                        <div className='grid'>\n                            <span className='text-sm'>Hebert</span>\n                            <small className='text-muted-fg text-xs'>Online</small>\n                        </div>\n                        <Menu>\n                            <Menu.Trigger\n                                className={cn(\n                                    buttonStyles({\n                                        variant: 'ghost',\n                                        size: 'icon'\n                                    }),\n                                    'ml-auto'\n                                )}\n                            >\n                                <IconEllipsisVertical />\n                            </Menu.Trigger>\n                            <Menu.Content placement='bottom end'>\n                                <Menu.Item>\n                                    <IconUser />\n                                    Contact Info\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconTrash />\n                                    Clear Chat\n                                </Menu.Item>\n                                <Menu.Item isDanger>\n                                    <IconCircleX />\n                                    Block\n                                </Menu.Item>\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                    <div className='text-muted-fg flex-1 flex-col space-y-2 overflow-x-hidden overflow-y-scroll p-4'>\n                        {chats.length > 0 ? (\n                            chats?.map((chat: BubbleChatProps, i: number) => (\n                                <BubbleChat key={i} {...chat} onDelete={() => deleteChat(i)} />\n                            ))\n                        ) : (\n                            <div className='flex h-full flex-col items-center justify-center'>\n                                <IconMessageDashed className='!size-6' />\n                                <p className='text-center text-xl font-bold'>\n                                    Start a conversation\n                                </p>\n                            </div>\n                        )}\n                    </div>\n                    <MessageForm value={message} onChange={setMessage} onSend={sendMessage} />\n                </div>\n            </main>\n        </Sidebar.Provider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-default-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-default-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset, SidebarProvider } from '@/components/ui'\n\nexport default function Page() {\n    return (\n        <SidebarProvider>\n            <AppSidebar variant='default' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Default</Heading>\n                </div>\n            </SidebarInset>\n        </SidebarProvider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-basic-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-basic-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset, SidebarProvider } from '@/components/ui'\n\nexport default function SidebarBasicDemo() {\n    return (\n        <SidebarProvider>\n            <AppSidebar />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Basic</Heading>\n                </div>\n            </SidebarInset>\n        </SidebarProvider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-fixed-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-fixed-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset, SidebarProvider } from '@/components/ui'\n\nexport default function SidebarFixedDemo() {\n    return (\n        <SidebarProvider fixed>\n            <AppSidebar collapsible='none' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Fixed</Heading>\n                </div>\n            </SidebarInset>\n        </SidebarProvider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-inset-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-inset-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset, SidebarProvider } from '@/components/ui'\n\nexport default function SidebarInsetDemo() {\n    return (\n        <SidebarProvider>\n            <AppSidebar variant='inset' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Inset</Heading>\n                </div>\n            </SidebarInset>\n        </SidebarProvider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-off-canvas-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-off-canvas-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset, SidebarProvider } from '@/components/ui'\n\nexport default function SidebarOffCanvasDemo() {\n    return (\n        <SidebarProvider>\n            <AppSidebar collapsible='hidden' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>OffCanvas</Heading>\n                </div>\n            </SidebarInset>\n        </SidebarProvider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-dock-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-dock-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset, SidebarProvider } from '@/components/ui'\n\nexport default function SidebarDockDemo() {\n    return (\n        <SidebarProvider>\n            <AppSidebar collapsible='dock' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Dock</Heading>\n                </div>\n            </SidebarInset>\n        </SidebarProvider>\n    )\n}\n"
  },
  "block/sidebar/sidebar-floating-demo": {
    "component": "@/components/docs/block/sidebar/sidebar-floating-demo",
    "raw": "import AppSidebar from 'layouts/app-sidebar'\nimport AppSidebarNav from 'layouts/app-sidebar-nav'\n\nimport { Heading, SidebarInset, SidebarProvider } from '@/components/ui'\n\nexport default function SidebarFloatDemo() {\n    return (\n        <SidebarProvider>\n            <AppSidebar variant='float' />\n            <SidebarInset>\n                <AppSidebarNav />\n                <div className='p-4 lg:p-6'>\n                    <Heading>Float</Heading>\n                </div>\n            </SidebarInset>\n        </SidebarProvider>\n    )\n}\n"
  },
  "block/navbar/navbar-inset-demo": {
    "component": "@/components/docs/block/navbar/navbar-inset-demo",
    "raw": "'use client'\n\nimport NavbarLayout from 'layouts/app-navbar'\n\nimport { Container, Heading, Navbar } from '@/components/ui'\n\nexport default function NavbarInsetDemo() {\n    return (\n        <>\n            <NavbarLayout variant='inset'>\n                <Navbar.Inset>\n                    <Container className='py-6 @xl:py-12'>\n                        <Heading>Inset</Heading>\n                    </Container>\n                </Navbar.Inset>\n            </NavbarLayout>\n        </>\n    )\n}\n"
  },
  "block/navbar/navbar-floating-demo": {
    "component": "@/components/docs/block/navbar/navbar-floating-demo",
    "raw": "'use client'\n\nimport NavbarLayout from 'layouts/app-navbar'\n\nimport { Container, Heading } from '@/components/ui'\n\nexport default function NavbarFloatingDemo() {\n    return (\n        <>\n            <NavbarLayout variant='float' />\n            <Container className='py-6 @xl:py-12'>\n                <Heading>Float</Heading>\n            </Container>\n        </>\n    )\n}\n"
  },
  "block/navbar/navbar-basic-demo": {
    "component": "@/components/docs/block/navbar/navbar-basic-demo",
    "raw": "'use client'\n\nimport NavbarLayout from 'layouts/app-navbar'\n\nimport { Container, Heading } from '@/components/ui'\n\nexport default function NavbarBasicDemo() {\n    return (\n        <>\n            <NavbarLayout />\n            <Container className='py-6 @xl:py-12'>\n                <Heading>Basic</Heading>\n            </Container>\n        </>\n    )\n}\n"
  },
  "block/navbar/navbar-creating-demo": {
    "component": "@/components/docs/block/navbar/navbar-creating-demo",
    "raw": "'use client'\n\nimport { IconBrandCleon, IconSearch, IconShoppingBag } from 'hq-icons'\n\nimport { ThemeToggle } from '@/components/theme-toggle'\nimport { Avatar, Button, Navbar, Separator } from '@/components/ui'\n\nexport default function AppNavbar() {\n    return (\n        <Navbar>\n            <Navbar.Nav>\n                <Navbar.Logo\n                    aria-label='Goto documenation of Navbar'\n                    href='/docs/components/layouts/navbar'\n                >\n                    <IconBrandCleon className='size-6 sm:size-5' />\n                </Navbar.Logo>\n                <Navbar.Section>\n                    <Navbar.Item href='#' isCurrent>\n                        Home\n                    </Navbar.Item>\n                    <Navbar.Item href='#'>Shop</Navbar.Item>\n                    <Navbar.Item href='#'>Offers</Navbar.Item>\n                    <Navbar.Item href='#'>Orders</Navbar.Item>\n                </Navbar.Section>\n\n                <Navbar.Section className='ml-auto hidden md:flex'>\n                    <Navbar.Flex className='sm:gap-x-1'>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle variant='ghost' />\n                    </Navbar.Flex>\n                    <Separator orientation='vertical' className='mr-3 ml-1 h-6' />\n                    <Avatar\n                        alt='DQ'\n                        size='sm'\n                        shape='square'\n                        src='https://github.com/dq-alhq.png'\n                    />\n                </Navbar.Section>\n            </Navbar.Nav>\n\n            <Navbar.Compact>\n                <Navbar.Flex>\n                    <Navbar.Trigger className='-ml-2' />\n                    <Separator orientation='vertical' className='h-6 sm:mx-1' />\n                    <Navbar.Logo\n                        aria-label='Goto documenation of Navbar'\n                        href='/docs/components/layouts/navbar'\n                    >\n                        <IconBrandCleon className='size-5' />\n                    </Navbar.Logo>\n                </Navbar.Flex>\n                <Navbar.Flex>\n                    <Navbar.Flex>\n                        <Button variant='ghost' size='icon' aria-label='Search for products'>\n                            <IconSearch />\n                        </Button>\n                        <Button variant='ghost' size='icon' aria-label='Your Bag'>\n                            <IconShoppingBag />\n                        </Button>\n                        <ThemeToggle variant='ghost' />\n                    </Navbar.Flex>\n                    <Separator orientation='vertical' className='mr-3 ml-1 h-6' />\n                    <Avatar\n                        alt='DQ'\n                        size='sm'\n                        shape='square'\n                        src='https://github.com/dq-alhq.png'\n                    />\n                </Navbar.Flex>\n            </Navbar.Compact>\n        </Navbar>\n    )\n}\n"
  },
  "block/components/user-setting/account-setting": {
    "component": "@/components/docs/block/components/user-setting/account-setting",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBrandFacebook, IconBrandGithub, IconBrandInstagram, IconBrandX } from 'hq-icons'\nimport { isFileDropItem } from 'react-aria-components'\n\nimport {\n    Avatar,\n    Button,\n    Card,\n    cn,\n    DropZone,\n    FileTrigger,\n    Form,\n    Textarea,\n    TextField\n} from '@/components/ui'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function AccountSetting() {\n    const [droppedImage, setDroppedImage] = React.useState<string>('')\n    async function onDropHandler(e: DropEvent) {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n    async function onSelectHandler(e: FileList | null) {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n    return (\n        <section className='space-y-4'>\n            <Card>\n                <Card.Header>\n                    <Card.Title>Account</Card.Title>\n                    <Card.Description>Your account details.</Card.Description>\n                </Card.Header>\n                <Form>\n                    <Card.Content className='space-y-4'>\n                        <div className='flex items-center gap-2'>\n                            <DropZone\n                                getDropOperation={() => 'copy'}\n                                onDrop={onDropHandler}\n                                className={cn(\n                                    '[&_[data-slot=avatar]]:bg-transparent [&_[data-slot=avatar]]:outline-none rounded-full p-0 overflow-hidden size-10'\n                                )}\n                            >\n                                {droppedImage ? (\n                                    <Avatar src={droppedImage} size='lg' />\n                                ) : (\n                                    <Avatar initials='DQ' size='lg' />\n                                )}\n                                <input type='hidden' name='image' value={droppedImage} />\n                            </DropZone>\n                            <FileTrigger\n                                size='sm'\n                                acceptedFileTypes={['image/png', 'image/jpeg']}\n                                onSelect={onSelectHandler}\n                            >\n                                Upload avatar\n                            </FileTrigger>\n                        </div>\n                        <TextField\n                            autoFocus\n                            label='Name'\n                            placeholder='Enter your name'\n                            id='name'\n                            name='name'\n                            isRequired\n                        />\n                        <TextField\n                            type='email'\n                            isRequired\n                            label='Email'\n                            placeholder='Enter your email'\n                            id='email'\n                            name='email'\n                        />\n                        <Textarea label='Bio' placeholder='Enter your bio' id='bio' name='bio' />\n                    </Card.Content>\n                    <Card.Footer>\n                        <Button>Save</Button>\n                    </Card.Footer>\n                </Form>\n            </Card>\n            <Card>\n                <Card.Header>\n                    <Card.Title>Social Accounts</Card.Title>\n                    <Card.Description>Your social accounts.</Card.Description>\n                </Card.Header>\n                <Form>\n                    <Card.Content className='grid lg:grid-cols-2 gap-4'>\n                        <TextField\n                            label='Github Username'\n                            prefix={<IconBrandGithub />}\n                            id='github'\n                            name='github'\n                        />\n                        <TextField\n                            label='X Username'\n                            prefix={<IconBrandX />}\n                            id='twitter'\n                            name='twitter'\n                        />\n                        <TextField\n                            label='Facebook'\n                            prefix={<IconBrandFacebook />}\n                            id='facebook'\n                            name='facebook'\n                        />\n                        <TextField\n                            label='Instagram'\n                            prefix={<IconBrandInstagram />}\n                            id='ig'\n                            name='ig'\n                        />\n                    </Card.Content>\n                    <Card.Footer>\n                        <Button>Save</Button>\n                    </Card.Footer>\n                </Form>\n            </Card>\n        </section>\n    )\n}\n"
  },
  "block/components/user-setting/danger-area": {
    "component": "@/components/docs/block/components/user-setting/danger-area",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconUserX } from 'hq-icons'\n\nimport { Button, Card, Form, Modal, Note, TextField } from '@/components/ui'\n\nexport default function SecuritySetting() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Danger Area</Card.Title>\n                <Card.Description>Delete your account.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Modal>\n                    <Button variant='danger'>\n                        <IconUserX />\n                        Delete Account\n                    </Button>\n                    <Modal.Content role='alertdialog'>\n                        <Modal.Header\n                            title='Delete Account'\n                            description='This will permanently delete your account and all your data'\n                        >\n                            <Note variant='danger'>No undo button here, so be sure!</Note>\n                        </Modal.Header>\n                        <Form onSubmit={() => {}}>\n                            <Modal.Body>\n                                <TextField\n                                    isRequired\n                                    autoFocus\n                                    label='Password'\n                                    type='password'\n                                    isRevealable\n                                />\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Modal.Close>Cancel</Modal.Close>\n                                <Button variant='danger'>Confirm</Button>\n                            </Modal.Footer>\n                        </Form>\n                    </Modal.Content>\n                </Modal>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "block/components/user-setting/security-setting": {
    "component": "@/components/docs/block/components/user-setting/security-setting",
    "raw": "'use client'\n\nimport { IconKey } from 'hq-icons'\n\nimport { Button, Card, Form, Switch, TextField } from '@/components/ui'\n\nexport default function SecuritySetting() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Security</Card.Title>\n                <Card.Description>Secure your account.</Card.Description>\n            </Card.Header>\n            <Form>\n                <Card.Content className='grid gap-4'>\n                    <TextField\n                        prefix={<IconKey />}\n                        isRevealable\n                        autoFocus\n                        type='password'\n                        label='Current Password'\n                        id='current_password'\n                        name='current_password'\n                        isRequired\n                    />\n                    <TextField\n                        prefix={<IconKey />}\n                        isRevealable\n                        type='password'\n                        label='New Password'\n                        id='new_password'\n                        name='new_password'\n                        isRequired\n                    />\n                    <TextField\n                        prefix={<IconKey />}\n                        isRevealable\n                        type='password'\n                        label='Confirm New Password'\n                        id='new_password_confirm'\n                        name='new_password_confirm'\n                        isRequired\n                    />\n                    <div className='text-muted-fg'>Account Preferences</div>\n                    <Switch>Enable 2FA</Switch>\n                    <Switch>Auto Logout</Switch>\n                </Card.Content>\n                <Card.Footer>\n                    <Button>Save</Button>\n                </Card.Footer>\n            </Form>\n        </Card>\n    )\n}\n"
  },
  "block/components/user-setting/plan-billing-setting": {
    "component": "@/components/docs/block/components/user-setting/plan-billing-setting",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleUser, IconCreditCard, IconHash, IconLock, IconMap } from 'hq-icons'\n\nimport {\n    Button,\n    Card,\n    Choicebox,\n    DatePicker,\n    Form,\n    Heading,\n    Note,\n    TextField\n} from '@/components/ui'\n\nexport default function PlanBillingSetting() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Manage Your Plan</Card.Title>\n                <Card.Description>Upgrade or downgrade your current plan.</Card.Description>\n            </Card.Header>\n            <Form>\n                <Card.Content className='grid gap-4'>\n                    <Note variant='warning'>\n                        Changing the plan will take effect immediately. You will be charged for the\n                        rest of the current month.\n                    </Note>\n                    <Choicebox aria-label='Select items' selectionMode='single'>\n                        <Choicebox.Item\n                            title='Basic'\n                            description='Just the essentials to get started.'\n                        />\n                        <Choicebox.Item\n                            title='Standard'\n                            description='A step up with more features and support.'\n                        />\n                        <Choicebox.Item\n                            title='Deluxe'\n                            description='Top-tier features for maximum performance.'\n                        />\n                        <Choicebox.Item\n                            title='Ultimate'\n                            description='All-inclusive plan with every feature available.'\n                        />\n                    </Choicebox>\n                    <Heading level={4}>Payment Details</Heading>\n                    <TextField\n                        autoFocus\n                        prefix={<IconCircleUser />}\n                        label='Card Holder'\n                        name='card_holder'\n                        id='card_holder'\n                    />\n                    <div className='grid md:grid-cols-4 gap-4'>\n                        <TextField\n                            className='md:col-span-2'\n                            prefix={<IconCreditCard />}\n                            label='Card Number'\n                            name='card_number'\n                            id='card_number'\n                        />\n                        <DatePicker\n                            label='Expiration Date'\n                            name='expiration_date'\n                            id='expiration_date'\n                        />\n                        <TextField prefix={<IconLock />} label='CVC / CVC2' name='cvc' id='cvc' />\n                    </div>\n                    <div className='grid lg:grid-cols-2 gap-4'>\n                        <TextField\n                            prefix={<IconMap />}\n                            label='Country'\n                            name='country'\n                            id='country'\n                        />\n                        <TextField\n                            prefix={<IconHash />}\n                            label='Zip / Postal Code'\n                            name='zip'\n                            id='zip'\n                        />\n                    </div>\n                </Card.Content>\n                <Card.Footer>\n                    <Button>Save</Button>\n                </Card.Footer>\n            </Form>\n        </Card>\n    )\n}\n"
  },
  "block/components/chatting-app/message-form": {
    "component": "@/components/docs/block/components/chatting-app/message-form",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCamera, IconMic, IconPaperclip, IconSend } from 'hq-icons'\n\nimport { Button, Form } from '@/components/ui'\n\ninterface MessageFormProps {\n    value: string\n    onChange: (value: string) => void\n    onSend: (e: React.FormEvent<HTMLFormElement>) => void\n}\nexport default function MessageForm({ value, onChange, onSend }: MessageFormProps) {\n    const editorRef = React.useRef<HTMLDivElement>(null)\n    React.useEffect(() => {\n        const editor = editorRef.current\n\n        const handleInput = () => {\n            if (editor) {\n                const text = editor.innerText\n                onChange(text)\n                editor.innerHTML = formatText(text)\n                placeCaretAtEnd(editor)\n            }\n        }\n\n        const placeCaretAtEnd = (el: HTMLElement) => {\n            el.focus()\n            const range = document.createRange()\n            range.selectNodeContents(el)\n            range.collapse(false)\n            const sel = window.getSelection()\n            sel?.removeAllRanges()\n            sel?.addRange(range)\n        }\n\n        editor?.addEventListener('input', handleInput)\n\n        return () => {\n            editor?.removeEventListener('input', handleInput)\n        }\n    }, [onChange])\n\n    function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        onSend(e)\n        if (editorRef.current) {\n            editorRef.current.innerHTML = ''\n        }\n    }\n    return (\n        <Form\n            onSubmit={onSubmit}\n            className='bg-bg relative overflow-hidden rounded-lg border-t md:border'\n        >\n            <div\n                contentEditable\n                ref={editorRef}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter' && !e.shiftKey && value.trim() !== '') {\n                        onSubmit(e as unknown as React.FormEvent<HTMLFormElement>)\n                    }\n                }}\n                aria-label='Message'\n                id='message'\n                className='no-scrollbar min-h-32 w-full resize-none border-0 p-3 outline-none'\n            />\n            <div className='flex items-center p-2'>\n                <Button variant='ghost' size='icon' type='button'>\n                    <IconCamera className='size-4' />\n                    <span className='sr-only'>Upload Image</span>\n                </Button>\n                <Button variant='ghost' size='icon' type='button'>\n                    <IconMic className='size-4' />\n                    <span className='sr-only'>Use Microphone</span>\n                </Button>\n                <Button variant='ghost' size='icon' type='button'>\n                    <IconPaperclip className='size-4' />\n                    <span className='sr-only'>Attach File</span>\n                </Button>\n                <Button\n                    isDisabled={value.trim() === ''}\n                    type='submit'\n                    size='sm'\n                    className='ml-auto gap-1.5'\n                >\n                    Send Message\n                    <IconSend />\n                </Button>\n            </div>\n        </Form>\n    )\n}\n\nconst formatText = (text: string) => {\n    return text\n        .replace(/_(.*?)_/g, '<em>_$1_</em>')\n        .replace(/_/g, '<span class=\"text-muted-fg\">_</span>')\n        .replace(/\\*(.*?)\\*/g, '<strong>*$1*</strong>')\n        .replace(/\\*/g, '<span class=\"text-muted-fg\">*</span>')\n        .replace(/~(.*?)~/g, '<del>~$1~</del>')\n        .replace(/~/g, '<span class=\"text-muted-fg\">~</span>')\n        .replace(/\\^(.*?)\\^/g, '<sup>^$1^</sup>')\n        .replace(/\\^/g, '<span class=\"text-muted-fg\">^</span>')\n        .replace(\n            /(https?:\\/\\/[^\\s]+)/g,\n            '<a href=\"$1\" class=\"text-primary underline\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\n        )\n        .replace(/\\n/g, '<br />')\n}\n"
  },
  "block/components/chatting-app/bubble-chat": {
    "component": "@/components/docs/block/components/chatting-app/bubble-chat",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconCheck,\n    IconCheckDouble,\n    IconChevronRight,\n    IconClock,\n    IconForward,\n    IconInfo,\n    IconReply,\n    IconTrash\n} from 'hq-icons'\n\nimport { Button, cn, Menu } from '@/components/ui'\n\nexport interface BubbleChatProps {\n    message: string\n    time: string\n    role: 'send' | 'recieve'\n    status?: 'pending' | 'sent' | 'delivered' | 'read'\n    onDelete?: () => void\n}\n\nexport default function BubbleChat({ message, time, role, status, onDelete }: BubbleChatProps) {\n    const statusIcon: Record<string, React.ReactNode> = {\n        pending: <IconClock className='text-fg size-5' />,\n        sent: <IconCheck className='text-fg size-5' />,\n        delivered: <IconCheckDouble className='text-fg size-5' />,\n        read: <IconCheckDouble className='text-success size-5' />\n    }\n    return (\n        <div\n            className={cn(\n                'group flex items-start',\n                role === 'send' ? 'flex-row-reverse' : 'flex-row'\n            )}\n        >\n            <div>\n                <div\n                    className={cn(\n                        'rounded-lg border px-2 py-1.5 text-right text-sm [&_strong]:font-medium',\n                        role === 'send' ? 'rounded-br-none' : 'rounded-bl-none'\n                    )}\n                >\n                    <div\n                        className='text-fg text-left text-sm'\n                        dangerouslySetInnerHTML={{ __html: convertToHtml(message) }}\n                    />\n                </div>\n                <small\n                    className={cn(\n                        'text-muted-fg mt-0.5 flex items-center gap-1',\n                        role === 'send' ? 'justify-end' : 'justify-start'\n                    )}\n                >\n                    {time}\n                    {role === 'send' && status && statusIcon[status]}\n                </small>\n            </div>\n            <Menu>\n                <Button\n                    variant='outline'\n                    size='icon'\n                    className='pressed:opacity-100 mx-2 size-7 p-1 opacity-0 transition group-hover:opacity-100'\n                >\n                    <IconChevronRight\n                        className={cn('size-3', role === 'send' ? 'rotate-180' : '')}\n                    />\n                </Button>\n                <Menu.Content placement={role === 'send' ? 'left' : 'right'} aria-label='Actions'>\n                    <Menu.Item>\n                        <IconReply />\n                        Reply\n                    </Menu.Item>\n                    <Menu.Item>\n                        <IconForward />\n                        Forward\n                    </Menu.Item>\n                    <Menu.Item>\n                        <IconInfo />\n                        Message Info\n                    </Menu.Item>\n                    <Menu.Item onAction={onDelete} isDanger>\n                        <IconTrash /> Delete\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </div>\n    )\n}\n\nconst convertToHtml = (text: string) => {\n    let html = text\n    html = html.replace(\n        /(https?:\\/\\/[^\\s]+)/g,\n        '<a href=\"$1\" target=\"_blank\" class=\"text-primary underline\" rel=\"noopener noreferrer\">$1</a>'\n    )\n    html = html.replace(/`([^`]+)`/g, '<code class=\"font-mono\">$1</code>')\n    html = html.replace(/\\*(.*?)\\*/g, '<strong class=\"text-bold\">$1</strong>')\n    html = html.replace(/_(.*?)_/g, '<em>$1</em>')\n    html = html.replace(/~(.*?)~/g, '<del>$1</del>')\n    html = html.replace(/^(.*?)^/g, '<sup>$1</sup>')\n    html = html.replace(/\\n/g, '<br />')\n    return html\n}\n"
  },
  "block/components/chatting-app/contact-list": {
    "component": "@/components/docs/block/components/chatting-app/contact-list",
    "raw": "import { Avatar, cn } from '@/components/ui'\n\ninterface ContactProps {\n    id: number\n    name: string\n    avatar: string\n    status: 'online' | 'offline'\n    lastSeen: string\n    active: boolean\n}\nexport default function ContactList() {\n    return (\n        <div className='grid w-full gap-2'>\n            {contacts.map((contact) => (\n                <Contact key={contact.id} {...contact} />\n            ))}\n        </div>\n    )\n}\nconst Contact = ({ name, avatar, status, lastSeen, active }: ContactProps) => {\n    return (\n        <div\n            className={cn(\n                'flex cursor-pointer flex-row items-center gap-3 rounded-lg border p-2 md:px-4',\n                active ? 'bg-primary/20' : ''\n            )}\n        >\n            {status === 'online' ? (\n                <Avatar src={avatar} status='success' />\n            ) : (\n                <Avatar src={avatar} />\n            )}\n            <div className='grid'>\n                <span className='text-sm'>{name}</span>\n                {status === 'online' ? (\n                    <small className='text-success text-xs'>Online</small>\n                ) : (\n                    <small className='text-muted-fg text-xs'>Last seen {lastSeen}</small>\n                )}\n            </div>\n        </div>\n    )\n}\n\nconst contacts: ContactProps[] = [\n    {\n        id: 1,\n        avatar: 'https://i.pravatar.cc/77',\n        name: 'Hebert',\n        status: 'online',\n        lastSeen: '20:32',\n        active: true\n    },\n    {\n        id: 2,\n        avatar: 'https://i.pravatar.cc/78',\n        name: 'Schroeder',\n        status: 'offline',\n        lastSeen: '02:10',\n        active: false\n    },\n    {\n        id: 3,\n        avatar: 'https://i.pravatar.cc/79',\n        name: 'Donna',\n        status: 'online',\n        lastSeen: '06:14',\n        active: false\n    },\n    {\n        id: 4,\n        avatar: 'https://i.pravatar.cc/80',\n        name: 'Olivia',\n        status: 'offline',\n        lastSeen: '06:47',\n        active: false\n    },\n    {\n        id: 5,\n        avatar: 'https://i.pravatar.cc/81',\n        name: 'Aisha',\n        status: 'offline',\n        lastSeen: '02:32',\n        active: false\n    },\n    {\n        id: 6,\n        avatar: 'https://i.pravatar.cc/82',\n        name: 'Bruce',\n        status: 'online',\n        lastSeen: '01:34',\n        active: false\n    },\n    {\n        id: 7,\n        avatar: 'https://i.pravatar.cc/83',\n        name: 'Harmon',\n        status: 'offline',\n        lastSeen: '00:15',\n        active: false\n    }\n]\n"
  },
  "block/components/user-profile/about": {
    "component": "@/components/docs/block/components/user-profile/about",
    "raw": "import { Card, DescriptionList } from '@/components/ui'\n\nexport default function About() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>About Me</Card.Title>\n                <Card.Description>My profile information</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <DescriptionList>\n                    <DescriptionList.Term>Full Name</DescriptionList.Term>\n                    <DescriptionList.Details>Diqi Al-Haqqi</DescriptionList.Details>\n                    <DescriptionList.Term>Address</DescriptionList.Term>\n                    <DescriptionList.Details>East Java, Indonesia</DescriptionList.Details>\n                    <DescriptionList.Term>Age</DescriptionList.Term>\n                    <DescriptionList.Details>25 years</DescriptionList.Details>\n                    <DescriptionList.Term>Company</DescriptionList.Term>\n                    <DescriptionList.Details>Qomaruddin University Gresik</DescriptionList.Details>\n                </DescriptionList>\n            </Card.Content>\n        </Card>\n    )\n}\n"
  },
  "block/components/user-profile/media": {
    "component": "@/components/docs/block/components/user-profile/media",
    "raw": "import Image from 'next/image'\n\nimport { Card, Grid } from '@/components/ui'\n\nexport default function Media() {\n    const items = Array.from({ length: 17 }, (_, id) => ({\n        id: id + 1,\n        title: 'Image ' + id\n    }))\n    return (\n        <Grid columns={{ initial: 2, '2xl': 4 }} gap={2} items={items}>\n            {(item) => (\n                <Grid.Item key={item.id} colSpan={item.id % 5 === 0 ? 2 : 1}>\n                    <Card>\n                        <Image\n                            width={item.id % 5 === 0 ? 800 : 400}\n                            height={300}\n                            src={`https://picsum.photos/${item.id % 5 === 0 ? 800 : 400}/300?random=${item.id}`}\n                            alt={item.title}\n                        />\n                    </Card>\n                </Grid.Item>\n            )}\n        </Grid>\n    )\n}\n"
  },
  "block/components/user-profile/posts": {
    "component": "@/components/docs/block/components/user-profile/posts",
    "raw": "import Image from 'next/image'\n\nimport { Card, Grid } from '@/components/ui'\n\nexport default function Posts() {\n    return (\n        <Grid columns={{ initial: 1, sm: 2, '2xl': 3 }} gap={2} items={posts}>\n            {(item) => (\n                <Grid.Item key={item.id}>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>{item.title}</Card.Title>\n                            <Card.Description>{item.date}</Card.Description>\n                        </Card.Header>\n                        <Card.Content className='space-y-2 text-justify'>\n                            <Image alt={item.title} src={item.image} width={400} height={300} />\n                            <p>{item.content}</p>\n                        </Card.Content>\n                    </Card>\n                </Grid.Item>\n            )}\n        </Grid>\n    )\n}\n\nconst posts = [\n    {\n        id: 1,\n        title: 'First Post',\n        date: '2021-01-01 - 12:00',\n        image: 'https://picsum.photos/400/300?random=1',\n        content:\n            'Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolorum tempore nulla libero laborum officia aliquam voluptas quod porro quis accusamus.'\n    },\n    {\n        id: 2,\n        title: 'Second Post',\n        date: '2021-01-02 - 08:00',\n        image: 'https://picsum.photos/400/300?random=2',\n        content:\n            'Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas totam ad nostrum earum provident natus tempora! Accusamus iure sunt quam!'\n    },\n    {\n        id: 3,\n        title: 'Third Post',\n        date: '2021-01-03 - 14:00',\n        image: 'https://picsum.photos/400/300?random=3',\n        content:\n            'Lorem ipsum dolor sit amet. Veritatis dicta aliquid, voluptatibus sapiente repellendus fugit saepe voluptate eum praesentium facilis?'\n    }\n]\n"
  },
  "block/components/file-manager/file-list": {
    "component": "@/components/docs/block/components/file-manager/file-list",
    "raw": "import {\n    IconArchive,\n    IconDisc,\n    IconFileImage,\n    IconFileMusic,\n    IconFileText,\n    IconFileVideo,\n    IconFolder\n} from 'hq-icons'\n\nexport type FileNode = {\n    file: string\n    children?: FileNode[]\n}\n\nconst filesInDownloads: FileNode[] = [\n    {\n        file: 'Compressed',\n        children: [\n            { file: 'laravel.zip' },\n            { file: 'react.zip' },\n            { file: 'nextjs.rar' },\n            { file: 'ubuntu.iso' }\n        ]\n    },\n    {\n        file: 'Docs',\n        children: [{ file: 'resume.pdf' }, { file: 'cv.pdf' }]\n    },\n    {\n        file: 'Programs',\n        children: [{ file: 'chrome.exe' }, { file: 'vscode.deb' }]\n    }\n]\n\nconst filesInDocuments: FileNode[] = [\n    {\n        file: 'Thesis',\n        children: [\n            { file: 'Bab 1.docx' },\n            { file: 'Bab 2.docx' },\n            { file: 'Bab 3.docx' },\n            { file: 'Cover.docx' }\n        ]\n    },\n    { file: 'Secret.txt' },\n    { file: 'Project.jpg' }\n]\n\nconst filesInMusic: FileNode[] = [\n    { file: 'The Beatles.mp3' },\n    { file: 'Led Zeppelin.mp3' },\n    { file: 'Pink Floyd.mp3' },\n    { file: 'Queen.wav' },\n    { file: 'The Rolling Stones.mp3' },\n    { file: 'The Who.wav' }\n]\n\nconst filesInVideos: FileNode[] = [\n    {\n        file: 'Mission Impossible',\n        children: [\n            { file: 'Mission Impossible 1.mp4' },\n            { file: 'Mission Impossible 2.mp4' },\n            { file: 'Mission Impossible 3.mp4' }\n        ]\n    },\n    { file: 'Star Wars.mp4' },\n    { file: 'Avengers - Endgame.mkv' }\n]\n\nexport const rootFolders: FileNode[] = [\n    {\n        file: 'Downloads',\n        children: filesInDownloads\n    },\n    {\n        file: 'Documents',\n        children: filesInDocuments\n    },\n    {\n        file: 'Music',\n        children: filesInMusic\n    },\n    {\n        file: 'Videos',\n        children: filesInVideos\n    }\n]\n\nexport function mapFilePaths(nodes: FileNode[], parentPath: string = ''): string[] {\n    let paths: string[] = []\n    for (const node of nodes) {\n        const currentPath = parentPath ? `${parentPath}/${node.file}` : node.file\n        if (node.children) {\n            paths = paths.concat(mapFilePaths(node.children, currentPath))\n        } else {\n            paths.push(currentPath)\n        }\n    }\n    return paths\n}\n\nexport const getFileIcon = (ext: string) => {\n    let Icon = IconFolder\n    switch (ext) {\n        case 'jpg':\n        case 'png':\n            Icon = IconFileImage\n            break\n        case 'txt':\n        case 'docx':\n        case 'pdf':\n            Icon = IconFileText\n            break\n        case 'mp3':\n        case 'wav':\n            Icon = IconFileMusic\n            break\n        case 'mp4':\n        case 'mkv':\n            Icon = IconFileVideo\n            break\n        case 'zip':\n        case 'rar':\n            Icon = IconArchive\n            break\n        case 'iso':\n            Icon = IconDisc\n            break\n        default:\n        case 'folder':\n            Icon = IconFolder\n            break\n    }\n    return <Icon />\n}\n"
  },
  "block/components/paginator": {
    "component": "@/components/docs/block/components/paginator",
    "raw": "'use client'\n\nimport { cn, Pagination, useMediaQuery } from '@/components/ui'\n\ninterface PaginateProps {\n    className?: string\n    show: number\n    total: number\n    page: number\n    setPage: (page: number) => void\n}\n\nexport default function Paginator({ className, show, page, total, setPage }: PaginateProps) {\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n\n    const meta = {\n        total,\n        from: (page - 1) * Number(show) + 1,\n        to:\n            total - show * page > 0\n                ? total - (total - show * page)\n                : show * page - Math.abs(total - show * page),\n        page,\n        last_page: Math.ceil(total / show)\n    }\n\n    const actions = {\n        first: () => setPage(1),\n        prev: () => setPage(page - 1),\n        next: () => setPage(page + 1),\n        last: () => setPage(meta.last_page)\n    }\n    return (\n        <div\n            className={cn(\n                'mt-6 flex w-full flex-col-reverse items-center gap-3 xl:flex-row xl:justify-between',\n                className\n            )}\n        >\n            <div>\n                Showing {meta.from} to {meta.to} of {meta.total} results\n            </div>\n            <div>\n                <Pagination>\n                    {isDesktop ? (\n                        <Pagination.List>\n                            <Pagination.Item\n                                role='first'\n                                isDisabled={meta.page === 1}\n                                onAction={actions.first}\n                            />\n                            <Pagination.Item\n                                role='previous'\n                                isDisabled={meta.page === 1}\n                                onAction={actions.prev}\n                            />\n                            <Pagination.Section>\n                                {meta.page > 2 && (\n                                    <Pagination.Item onAction={actions.first}>1</Pagination.Item>\n                                )}\n                                {meta.page > 3 && <Pagination.Item role='ellipsis' />}\n                                {meta.page !== 1 && (\n                                    <Pagination.Item onAction={() => setPage(meta.page - 1)}>\n                                        {meta.page - 1}\n                                    </Pagination.Item>\n                                )}\n                                <Pagination.Item isCurrent>{meta.page}</Pagination.Item>\n                                {meta.page !== meta.last_page && (\n                                    <Pagination.Item onAction={() => setPage(meta.page + 1)}>\n                                        {meta.page + 1}\n                                    </Pagination.Item>\n                                )}\n                                {meta.page < meta.last_page - 2 && (\n                                    <Pagination.Item role='ellipsis' />\n                                )}\n                                {meta.page <= meta.last_page - 2 && (\n                                    <Pagination.Item onAction={actions.last}>\n                                        {meta.last_page}\n                                    </Pagination.Item>\n                                )}\n                            </Pagination.Section>\n                            <Pagination.Item\n                                role='next'\n                                isDisabled={meta.page === meta.last_page}\n                                onAction={actions.next}\n                            />\n                            <Pagination.Item\n                                role='last'\n                                isDisabled={meta.page === meta.last_page}\n                                onAction={actions.last}\n                            />\n                        </Pagination.List>\n                    ) : (\n                        <Pagination.List>\n                            <Pagination.Item\n                                role='first'\n                                isDisabled={meta.page === 1}\n                                onAction={actions.first}\n                            />\n                            <Pagination.Item\n                                role='previous'\n                                isDisabled={meta.page === 1}\n                                onAction={actions.prev}\n                            />\n                            <Pagination.Section\n                                aria-label='Pagination. Segment'\n                                className='rounded-lg border'\n                            >\n                                <Pagination.Item role='label'>{meta.page}</Pagination.Item>\n                                <Pagination.Item role='separator' />\n                                <Pagination.Item className='text-muted-fg' role='label'>\n                                    {meta.last_page}\n                                </Pagination.Item>\n                            </Pagination.Section>\n                            <Pagination.Item\n                                role='next'\n                                isDisabled={meta.page === meta.last_page}\n                                onAction={actions.next}\n                            />\n                            <Pagination.Item\n                                role='last'\n                                isDisabled={meta.page === meta.last_page}\n                                onAction={actions.last}\n                            />\n                        </Pagination.List>\n                    )}\n                </Pagination>\n            </div>\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-delay-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-delay-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub } from 'hq-icons'\n\nimport { buttonStyles, Tooltip } from '@/components/ui'\n\nexport default function TooltipDelayDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Tooltip delay={0}>\n                <Tooltip.Trigger\n                    aria-label='Check My Github'\n                    className={buttonStyles({\n                        variant: 'outline',\n                        size: 'icon'\n                    })}\n                >\n                    <IconBrandGithub />\n                </Tooltip.Trigger>\n                <Tooltip.Content>Follow me on Github @dq-alhq</Tooltip.Content>\n            </Tooltip>\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-demo",
    "raw": "'use client'\n\nimport { IconBrandX } from 'hq-icons'\n\nimport { buttonStyles, Tooltip } from '@/components/ui'\n\nexport default function TooltipDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger\n                aria-label='Follow My Twitter'\n                className={buttonStyles({\n                    variant: 'outline',\n                    size: 'icon'\n                })}\n            >\n                <IconBrandX />\n            </Tooltip.Trigger>\n            <Tooltip.Content>Follow me on X @dqalhq</Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-variant-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-variant-demo",
    "raw": "'use client'\n\nimport { IconInfo } from 'hq-icons'\n\nimport { buttonStyles, Tooltip } from '@/components/ui'\n\nexport default function TooltipVariantDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger\n                aria-label='Attention Message'\n                className={buttonStyles({\n                    variant: 'outline',\n                    size: 'icon'\n                })}\n            >\n                <IconInfo />\n            </Tooltip.Trigger>\n            <Tooltip.Content variant='inverse'>\n                <div className='relative'>\n                    <strong className='font-semibold'>Attention</strong>\n                    <p>This is a warning message.</p>\n                </div>\n            </Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-placement-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-placement-demo",
    "raw": "'use client'\n\nimport { type TooltipProps } from 'react-aria-components'\n\nimport { Button, Tooltip } from '@/components/ui'\n\ntype Placement = Pick<TooltipProps, 'placement'>['placement']\nconst placements: Placement[] = ['bottom', 'top', 'left', 'start', 'right', 'end']\nexport default function TooltipPlacementDemo() {\n    return (\n        <div className='grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 [&_.kbt32x]:w-full'>\n            {placements.map((placement, idx) => (\n                <Tooltip key={idx}>\n                    <Button className='mx-auto' size='sm' variant='outline'>\n                        {placement}\n                    </Button>\n                    <Tooltip.Content placement={placement}>\n                        Tooltip shown at <strong>{placement}</strong>.\n                    </Tooltip.Content>\n                </Tooltip>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/tooltip/tooltip-without-arrow-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-without-arrow-demo",
    "raw": "'use client'\n\nimport { Badge, Description, Tooltip } from '@/components/ui'\n\nexport default function TooltipWithoutArrowDemo() {\n    return (\n        <Tooltip>\n            <Tooltip.Trigger aria-label='Fresh drop alert'>\n                <Badge shape='circle'>New</Badge>\n            </Tooltip.Trigger>\n            <Tooltip.Content showArrow={false}>\n                <strong className='font-semibold'>Fresh drop alert</strong> <br />\n                <Description>Scope the newest addition to our stash.</Description>\n            </Tooltip.Content>\n        </Tooltip>\n    )\n}\n"
  },
  "overlays/popover/popover-controlled-demo": {
    "component": "@/components/docs/overlays/popover/popover-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleCheck, IconTrash } from 'hq-icons'\n\nimport { Button, Loader, Popover } from '@/components/ui'\nimport { wait } from '@/lib/utils'\n\nexport default function PopoverControlledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [loading, setLoading] = React.useState<'idle' | 'loading' | 'success'>('idle')\n    const triggerRef = React.useRef(null)\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await wait(3000)\n        setLoading('success')\n\n        await wait(2000)\n        setLoading('idle')\n        setIsOpen(false)\n    }\n    return (\n        <>\n            <Button ref={triggerRef} onPress={() => setIsOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Popover.Content\n                aria-label='Delete Account'\n                triggerRef={triggerRef}\n                isOpen={isOpen}\n                onOpenChange={setIsOpen}\n                className='sm:max-w-sm'\n            >\n                <Popover.Header>\n                    <Popover.Title>Confirm Deletion</Popover.Title>\n                    <Popover.Description>\n                        Are you sure you want to delete your account? This action cannot be undone.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)} className='mr-2'>\n                        Cancel\n                    </Button>\n                    <Button\n                        isDisabled={loading === 'loading'}\n                        onPress={deleteAccount}\n                        variant={['loading', 'idle'].includes(loading) ? 'danger' : 'primary'}\n                    >\n                        {loading === 'loading' ? (\n                            <>\n                                <Loader variant='spin' />\n                                Deleting...\n                            </>\n                        ) : loading === 'success' ? (\n                            <>\n                                <IconCircleCheck />\n                                Deleted\n                            </>\n                        ) : (\n                            <>\n                                <IconTrash />\n                                Delete\n                            </>\n                        )}\n                    </Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </>\n    )\n}\n"
  },
  "overlays/popover/popover-demo": {
    "component": "@/components/docs/overlays/popover/popover-demo",
    "raw": "'use client'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverDemo() {\n    return (\n        <Popover>\n            <Button variant='danger'>Forgot Password</Button>\n            <Popover.Content aria-label='Forgot Password' className='min-w-72'>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>\n                        We&apos;ll send you an email to log in.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-custom-close": {
    "component": "@/components/docs/overlays/popover/popover-custom-close",
    "raw": "'use client'\n\nimport { Button, Checkbox, Form, Link, Popover, TextField } from '@/components/ui'\n\nexport default function PopoverCustomClose() {\n    return (\n        <Popover>\n            <Button>Login</Button>\n            <Popover.Content aria-label='Login' className='sm:min-w-96'>\n                <Popover.Header className='mb-4'>\n                    <Popover.Title>Login</Popover.Title>\n                    <Popover.Description>Enter your credentials to sign in.</Popover.Description>\n                </Popover.Header>\n                <Form onSubmit={() => {}}>\n                    <Popover.Body>\n                        <div className='space-y-4'>\n                            <TextField\n                                isRequired\n                                type='email'\n                                label='Email'\n                                placeholder='Enter your email'\n                            />\n                            <TextField\n                                isRequired\n                                label='Password'\n                                type='password'\n                                placeholder='Enter your password'\n                            />\n                            <div className='flex justify-between items-center'>\n                                <Checkbox name='remember-me'>Remember me</Checkbox>\n                                <Link variant='primary' href='#'>\n                                    Forgot password?\n                                </Link>\n                            </div>\n                        </div>\n                    </Popover.Body>\n                    <Popover.Footer>\n                        <Popover.Close>Cancel</Popover.Close>\n                        <Button type='submit'>Login</Button>\n                    </Popover.Footer>\n                </Form>\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-placement-demo": {
    "component": "@/components/docs/overlays/popover/popover-placement-demo",
    "raw": "'use client'\n\nimport { type TooltipProps } from 'react-aria-components'\n\nimport { Button, Popover } from '@/components/ui'\n\ntype Placement = Pick<TooltipProps, 'placement'>['placement']\nconst placements: Placement[] = ['bottom', 'top', 'left', 'start', 'right', 'end']\nexport default function PopoverPlacementDemo() {\n    return (\n        <div className='grid grid-cols-2 sm:grid-cols-3 gap-2 [&_.kbt32x]:w-full'>\n            {placements.map((placement, idx) => (\n                <Popover key={idx}>\n                    <Button className='mx-auto' size='sm' variant='outline'>\n                        {placement}\n                    </Button>\n                    <Popover.Content aria-label='Placement' placement={placement}>\n                        Popover shown at <strong>{placement}</strong>.\n                    </Popover.Content>\n                </Popover>\n            ))}\n        </div>\n    )\n}\n"
  },
  "overlays/popover/popover-arrow-demo": {
    "component": "@/components/docs/overlays/popover/popover-arrow-demo",
    "raw": "'use client'\n\nimport { IconBell } from 'hq-icons'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverArrowDemo() {\n    return (\n        <Popover>\n            <Button variant='outline' size='icon'>\n                <IconBell />\n            </Button>\n            <Popover.Content aria-label='Notifications' showArrow={false} className='min-w-72'>\n                You have 3 new notifications.\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/popover/popover-trigger-demo": {
    "component": "@/components/docs/overlays/popover/popover-trigger-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, Popover } from '@/components/ui'\n\nexport default function PopoverTriggerDemo() {\n    return (\n        <Popover>\n            <Popover.Trigger aria-label='Open Popover'>\n                <Avatar alt='dq-alhq' src='https://github.com/dq-alhq.png' />\n            </Popover.Trigger>\n            <Popover.Content aria-label='Login' className='min-w-72'>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>\n                        We&apos;ll send you an email to log in.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n"
  },
  "overlays/sheet/sheet-position-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-position-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { titleCase } from 'usemods'\n\nimport { Button, Sheet } from '@/components/ui'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetPositionDemo() {\n    const [sheetSide, setSheetSide] = React.useState<Side>('left')\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const sides: Side[] = ['left', 'right', 'top', 'bottom']\n\n    const pressHandler = (side: Side, open: boolean) => {\n        setSheetSide(side)\n        setIsOpen(open)\n    }\n\n    return (\n        <>\n            <div className='grid grid-cols-2 gap-2'>\n                {sides.map((side, idx) => (\n                    <Button variant='outline' onPress={() => pressHandler(side, true)} key={idx}>\n                        {titleCase(side)}\n                    </Button>\n                ))}\n            </div>\n            <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen} side={sheetSide}>\n                <Sheet.Header>\n                    <Sheet.Title>{titleCase(sheetSide)}</Sheet.Title>\n                    <Sheet.Description>The sheet will go from {sheetSide} side.</Sheet.Description>\n                </Sheet.Header>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-custom-style-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-custom-style-demo",
    "raw": "'use client'\n\nimport { Button, Form, Note, Sheet, TextField } from '@/components/ui'\n\nexport default function SheetCustomStyleDemo() {\n    return (\n        <Sheet>\n            <Button variant='warning'>Archive Project</Button>\n            <Sheet.Content role='dialog'>\n                <Sheet.Header\n                    className='bg-bg mb-4 border-b'\n                    title='Archive Project'\n                    description='Archiving this project will disable access and hide it from active projects.'\n                >\n                    <Note variant='warning'>\n                        You can restore the project anytime from the archive!\n                    </Note>\n                </Sheet.Header>\n                <Form className='flex-1 overflow-y-auto' onSubmit={() => {}}>\n                    <Sheet.Body className='space-y-4'>\n                        <TextField\n                            isRequired\n                            autoFocus\n                            label='Confirm by typing the project name'\n                            type='text'\n                            placeholder='team/project-name'\n                        />\n                        <TextField\n                            isRequired\n                            label='To verify, type \"archive my project\" below'\n                            type='text'\n                        />\n                    </Sheet.Body>\n                    <Sheet.Footer>\n                        <Sheet.Close>Cancel</Sheet.Close>\n                        <Button variant='warning' type='submit'>\n                            Archive Project\n                        </Button>\n                    </Sheet.Footer>\n                </Form>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-classnames-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-classnames-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetClassnamesDemo() {\n    return (\n        <Sheet>\n            <Button>Open</Button>\n            <Sheet.Content\n                classNames={{\n                    overlay: 'bg-white/50 dark:bg-black/50 backdrop-blur',\n                    content: 'min-w-80'\n                }}\n            >\n                <Sheet.Header\n                    title='Custom Classnames'\n                    description='This sheet has custom class names.'\n                />\n                <Sheet.Footer>\n                    <Sheet.Close>Close</Sheet.Close>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-controlled-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Sheet, Textarea } from '@/components/ui'\n\nexport default function SheetControlledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button onPress={() => setIsOpen(true)}>Feedback</Button>\n            <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Sheet.Header>\n                    <Sheet.Title>Submit Feedback</Sheet.Title>\n                    <Sheet.Description>\n                        Please let us know your thoughts and how we can improve our service.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <Textarea label='Your Feedback' placeholder='Type your feedback here...' />\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)}>\n                        Close\n                    </Button>\n                    <Button onPress={() => setIsOpen(false)}>Submit Feedback</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </>\n    )\n}\n"
  },
  "overlays/sheet/sheet-sticky-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetStickyDemo() {\n    return (\n        <Sheet>\n            <Button>Read</Button>\n            <Sheet.Content>\n                <Sheet.Header>\n                    <Sheet.Title>Terms of Use</Sheet.Title>\n                    <Sheet.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our services, you\n                            agree to be bound by these terms. If you do not agree to these terms,\n                            please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for maintaining\n                            the confidentiality of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that occur under\n                            your account. You must notify us immediately of any breach of security\n                            or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and policies\n                            in connection with your use of our services. This includes adhering to\n                            intellectual property laws and refraining from any unlawful behavior\n                            while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of our services\n                            by any means other than through the interface provided by us. Any form\n                            of hacking, bypassing, or circumventing our security protocols is\n                            strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any content\n                            from our services unless explicitly authorized by us. This includes\n                            engaging in activities such as scraping, data mining, or using automated\n                            systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse, or harm\n                            other users. This includes sending unsolicited messages, stalking, or\n                            engaging in any form of cyberbullying. We reserve the right to terminate\n                            accounts found in violation of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other intellectual\n                            property displayed on our services are the property of their respective\n                            owners. You may not use, copy, or distribute any content without prior\n                            written permission from the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a worldwide,\n                            royalty-free, non-exclusive license to use, distribute, modify, and\n                            display that content for the purpose of providing our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to allow us to\n                            use it in accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our services at\n                        any time, without notice, for any reason, including but not limited to a\n                        breach of these terms. Upon termination, your right to use our services will\n                        immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms that, by\n                        their nature, should survive termination shall remain in effect. This\n                        includes, but is not limited to, ownership provisions, warranty disclaimers,\n                        and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all times or\n                        without interruption. We are not liable for any downtime or technical issues\n                        that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided &quot;as is&quot; and &quot;as available&quot;\n                        without any warranties of any kind, whether express or implied. We do not\n                        warrant that our services will meet your requirements or that they will be\n                        error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental, special,\n                        consequential, or punitive damages arising out of or related to your use of\n                        our services. This includes, but is not limited to, damages for loss of\n                        profits, data, or other intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time. If a\n                        revision is material, we will provide at least 30 days&apos; notice prior to\n                        any new terms taking effect. What constitutes a material change will be\n                        determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the laws of\n                        [Your Jurisdiction], without regard to its conflict of law provisions. Any\n                        disputes arising from or relating to these terms shall be resolved in the\n                        courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at [Your\n                        Contact Information].\n                    </div>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Sheet.Close>Close</Sheet.Close>\n                    <Button>Accept</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-custom-close-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-custom-close-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, CheckboxGroup, Sheet } from '@/components/ui'\n\nexport default function SheetControlledDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Notifications</Button>\n            <Sheet.Content aria-label='Notifications'>\n                <Sheet.Header>\n                    <Sheet.Title>Manage Notifications</Sheet.Title>\n                    <Sheet.Description>Adjust your notification settings below.</Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <CheckboxGroup aria-label='Notification Settings'>\n                        <Checkbox\n                            value='n1'\n                            label='Email Notifications'\n                            description='Receive updates via email.'\n                        />\n                        <Checkbox\n                            value='n2'\n                            label='SMS Notifications'\n                            description='Receive updates via SMS messages.'\n                        />\n                        <Checkbox\n                            value='n3'\n                            label='Push Notifications'\n                            description='Receive real-time notifications on your device.'\n                        />\n                    </CheckboxGroup>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Sheet.Close>Cancel</Sheet.Close>\n                    <Button>Save Settings</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-demo",
    "raw": "'use client'\n\nimport { Button, Sheet, Switch, TextField } from '@/components/ui'\n\nexport default function SheetDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Edit Settings</Button>\n            <Sheet.Content>\n                <Sheet.Header>\n                    <Sheet.Title>Update User Settings</Sheet.Title>\n                    <Sheet.Description>\n                        Adjust your preferences and configurations here.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body className='space-y-4'>\n                    <TextField label='Username' type='text' placeholder='Enter your username' />\n                    <TextField label='Email' type='email' placeholder='Enter your email address' />\n                    <Switch>Enable Notifications</Switch>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Sheet.Close>Cancel</Sheet.Close>\n                    <Button type='submit'>Save Changes</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-stack-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-stack-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetStackDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Stack</Button>\n            <Sheet.Content isStack={false}>\n                <Sheet.Header>\n                    <Sheet.Title>Not Stacked</Sheet.Title>\n                    <Sheet.Description>This sheet is not stacked.</Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Footer>\n                    <Sheet.Close>Cancel</Sheet.Close>\n                    <Button>Save Changes</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n"
  },
  "overlays/sheet/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBook,\n    IconBookOpen,\n    IconBrandGithub,\n    IconBrandGithubCopilot,\n    IconBuilding,\n    IconChartBar,\n    IconFileCode,\n    IconFilter,\n    IconGlobe,\n    IconHeart,\n    IconLogOut,\n    IconMessage,\n    IconSettings,\n    IconStar,\n    IconUser,\n    IconUsers\n} from 'hq-icons'\nimport { Group, Menu as MenuPrimitive } from 'react-aria-components'\n\nimport {\n    Avatar,\n    Button,\n    Checkbox,\n    Description,\n    Menu,\n    Modal,\n    Select,\n    Sheet,\n    TextField\n} from '@/components/ui'\n\nexport default function SheetMenuDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    return (\n        <>\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Modal.Header>\n                    <Modal.Title>Edit status</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='space-y-4'>\n                        <TextField\n                            prefix={<IconBrandGithub />}\n                            label='Status'\n                            placeholder=\"What's your status?\"\n                        />\n                        <Group>\n                            <Checkbox>Busy</Checkbox>\n                            <Description>\n                                When others mention you, assign you, or request your review, GitHub\n                                will let them know that you have limited availability.\n                            </Description>\n                        </Group>\n                        <Select label='Clear Status'>\n                            <Select.Item>Never</Select.Item>\n                            <Select.Item>in 30 Minutes</Select.Item>\n                            <Select.Item>in 1 Hour</Select.Item>\n                            <Select.Item>in 8 Hours</Select.Item>\n                            <Select.Item>after Today</Select.Item>\n                            <Select.Item>after a Week</Select.Item>\n                            <Select.Item>after a Month</Select.Item>\n                        </Select>\n                        <Select label='Visible to'>\n                            <Select.Item>Everyone</Select.Item>\n                            <Select.Item>Organization</Select.Item>\n                            <Select.Item>Public</Select.Item>\n                        </Select>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Modal.Close>Clear Status</Modal.Close>\n                    <Button onPress={closeModal}>Set Status</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <Sheet>\n                <Sheet.Trigger aria-label='Open menu'>\n                    <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' />\n                </Sheet.Trigger>\n                <Sheet.Content closeButton={false}>\n                    <Sheet.Header className='bg-background sticky top-0 flex flex-row items-center p-4 sm:gap-3'>\n                        <Avatar src='https://github.com/dq-alhq.png' alt='dq-alhq' size='xl' />\n                        <div>\n                            <Sheet.Title>dq-alhq</Sheet.Title>\n                            <Sheet.Description>DQ Al-Haqqi</Sheet.Description>\n                        </div>\n                    </Sheet.Header>\n                    <Sheet.Body className='border-t px-0 sm:px-0'>\n                        <MenuPrimitive className='divide-y'>\n                            <Menu.Section>\n                                <Menu.Item onAction={openModal}>\n                                    <IconBrandGithub />\n                                    <Menu.Label>Edit Status</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconUser />\n                                    <Menu.Label>Your profile</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBook />\n                                    <Menu.Label>Your repositories</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBrandGithubCopilot /> <Menu.Label>Your Copilot</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconChartBar /> <Menu.Label>Your projects</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconStar /> <Menu.Label>Your stars</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconFileCode /> <Menu.Label>Your gists</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconBuilding /> <Menu.Label>Your organizations</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconGlobe /> <Menu.Label>Your enterprises</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconHeart />\n                                    <Menu.Label>Your sponsors</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconFilter /> <Menu.Label>Feature preview</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconSettings />\n                                    <Menu.Label>Settings</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconBookOpen /> <Menu.Label>GitHub Docs</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconUsers /> <Menu.Label>GitHub Support</Menu.Label>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconMessage /> <Menu.Label>GitHub Community</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <IconLogOut /> <Menu.Label>Sign out</Menu.Label>\n                                </Menu.Item>\n                            </Menu.Section>\n                        </MenuPrimitive>\n                    </Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-custom-style-demo": {
    "component": "@/components/docs/overlays/modal/modal-custom-style-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, Note, TextField } from '@/components/ui'\n\nexport default function ModalCustomStyleDemo() {\n    return (\n        <Modal>\n            <Button variant='danger'>Delete Project</Button>\n            <Modal.Content role='alertdialog'>\n                <Modal.Header\n                    className='bg-bg mb-4 border-b'\n                    title='Delete Project'\n                    description='This project’s gonna get wiped, including all its Deployments, Domains, Env Variables, Serverless Functions, and Settings.'\n                >\n                    <Note variant='danger'>No undo button here, so be sure!</Note>\n                </Modal.Header>\n                <Form onSubmit={() => {}}>\n                    <Modal.Body className='space-y-4'>\n                        <TextField\n                            isRequired\n                            autoFocus\n                            label='Enter the project name'\n                            type='text'\n                            placeholder='team/project-name'\n                        />\n                        <TextField\n                            isRequired\n                            label='To verify, type \"delete my project\" below'\n                            type='text'\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Modal.Close>Cancel</Modal.Close>\n                        <Button variant='danger' type='submit'>\n                            Delete Project\n                        </Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-size-demo": {
    "component": "@/components/docs/overlays/modal/modal-size-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button, Modal } from '@/components/ui'\n\ntype Size = Pick<React.ComponentProps<typeof Modal.Content>, 'size'>['size']\nconst sizes: Size[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl']\nexport default function ModalSizeDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [modalSize, setModalSize] = React.useState<Size>('md')\n\n    const handlePress = (size: Size, open: boolean) => {\n        setModalSize(size)\n        setIsOpen(open)\n    }\n    return (\n        <>\n            <div className='grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2'>\n                {sizes.map((size, idx) => (\n                    <Button variant='outline' key={idx} onPress={() => handlePress(size, true)}>\n                        Open {size}\n                    </Button>\n                ))}\n            </div>\n\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen} size={modalSize}>\n                <Modal.Header>\n                    <Modal.Title>Project Update</Modal.Title>\n                    <Modal.Description>\n                        Dive deep into our project’s latest updates where we&apos;ve streamlined\n                        workflow and improved user interfaces.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)}>\n                        Close\n                    </Button>\n                    <Button onPress={() => setIsOpen(false)}>Confirm</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-custom-classnames-demo": {
    "component": "@/components/docs/overlays/modal/modal-custom-classnames-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalCustomClassnamesDemo() {\n    return (\n        <Modal>\n            <Button>Open</Button>\n            <Modal.Content\n                classNames={{\n                    overlay: 'bg-white/40 dark:bg-black/40 backdrop-blur',\n                    content: 'bg-bg'\n                }}\n            >\n                <Modal.Header\n                    title='Custom Classnames'\n                    description='This modal has custom class names.'\n                />\n                <Modal.Footer>\n                    <Modal.Close>Close</Modal.Close>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal/modal-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalControlledDemo() {\n    const [open, setOpen] = useState(false)\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='primary'>\n                Subscribe\n            </Button>\n            <Modal.Content isOpen={open} onOpenChange={setOpen}>\n                <Modal.Header>\n                    <Modal.Title>Subscribe to Our Newsletter</Modal.Title>\n                    <Modal.Description>\n                        Get the latest news and updates right to your inbox.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button onPress={() => setOpen(false)}>Sign Up</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-nested-demo": {
    "component": "@/components/docs/overlays/modal/modal-nested-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { toast } from 'sonner'\n\nimport { Button, Form, Modal, Textarea } from '@/components/ui'\n\nexport default function ModalNestedDemo() {\n    const [isRegistrationModalOpen, setIsRegistrationModalOpen] = React.useState(false)\n    const [isProfileSetupModalOpen, setIsProfileSetupModalOpen] = React.useState(false)\n    const [isTyping, setIsTyping] = React.useState(false)\n\n    return (\n        <>\n            <Button onPress={() => setIsRegistrationModalOpen(true)}>Register</Button>\n\n            <Modal.Content\n                isOpen={isRegistrationModalOpen}\n                onOpenChange={() => setIsRegistrationModalOpen(false)}\n                aria-label='Confirm Registration'\n            >\n                <Modal.Header>\n                    <Modal.Title>Confirm Registration</Modal.Title>\n                    <Modal.Description>Please confirm your registration details.</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close>Cancel</Modal.Close>\n                    <Button\n                        onPress={() => {\n                            setIsProfileSetupModalOpen(true)\n                        }}\n                    >\n                        Confirm\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n\n            <Modal.Content\n                isOpen={isProfileSetupModalOpen}\n                onOpenChange={(isOpen) => {\n                    if (!isOpen && isTyping) {\n                        toast('Profile setup incomplete')\n                    }\n                    setIsProfileSetupModalOpen(isOpen)\n                }}\n                aria-label='Profile Setup'\n            >\n                <Modal.Header>\n                    <Modal.Title>Set Up Your Profile</Modal.Title>\n                    <Modal.Description>\n                        We need a bit more information before you can get started.\n                    </Modal.Description>\n                </Modal.Header>\n                <Form\n                    onSubmit={(e) => {\n                        e.preventDefault()\n                        toast.success('Profile setup complete')\n                        setIsProfileSetupModalOpen(false)\n                        setIsRegistrationModalOpen(false)\n                    }}\n                >\n                    <Modal.Body className='space-y-4'>\n                        <Textarea\n                            isRequired\n                            label='Bio'\n                            placeholder='Tell us something about yourself'\n                            onInput={() => setIsTyping(true)}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Modal.Close>Skip for now</Modal.Close>\n                        <Button type='submit'>Complete Setup</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/modal-sticky-demo": {
    "component": "@/components/docs/overlays/modal/modal-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalStickyDemo() {\n    return (\n        <Modal>\n            <Button>Read</Button>\n            <Modal.Content size='xl'>\n                <Modal.Header>\n                    <Modal.Title>Terms of Use</Modal.Title>\n                    <Modal.Description>\n                        If you do not agree to these terms, please refrain from using our services.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our services, you\n                            agree to be bound by these terms. If you do not agree to these terms,\n                            please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for maintaining\n                            the confidentiality of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that occur under\n                            your account. You must notify us immediately of any breach of security\n                            or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and policies\n                            in connection with your use of our services. This includes adhering to\n                            intellectual property laws and refraining from any unlawful behavior\n                            while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of our services\n                            by any means other than through the interface provided by us. Any form\n                            of hacking, bypassing, or circumventing our security protocols is\n                            strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any content\n                            from our services unless explicitly authorized by us. This includes\n                            engaging in activities such as scraping, data mining, or using automated\n                            systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse, or harm\n                            other users. This includes sending unsolicited messages, stalking, or\n                            engaging in any form of cyberbullying. We reserve the right to terminate\n                            accounts found in violation of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other intellectual\n                            property displayed on our services are the property of their respective\n                            owners. You may not use, copy, or distribute any content without prior\n                            written permission from the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a worldwide,\n                            royalty-free, non-exclusive license to use, distribute, modify, and\n                            display that content for the purpose of providing our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to allow us to\n                            use it in accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our services at\n                        any time, without notice, for any reason, including but not limited to a\n                        breach of these terms. Upon termination, your right to use our services will\n                        immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms that, by\n                        their nature, should survive termination shall remain in effect. This\n                        includes, but is not limited to, ownership provisions, warranty disclaimers,\n                        and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all times or\n                        without interruption. We are not liable for any downtime or technical issues\n                        that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided &quot;as is&quot; and &quot;as available&quot;\n                        without any warranties of any kind, whether express or implied. We do not\n                        warrant that our services will meet your requirements or that they will be\n                        error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental, special,\n                        consequential, or punitive damages arising out of or related to your use of\n                        our services. This includes, but is not limited to, damages for loss of\n                        profits, data, or other intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time. If a\n                        revision is material, we will provide at least 30 days&apos; notice prior to\n                        any new terms taking effect. What constitutes a material change will be\n                        determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the laws of\n                        [Your Jurisdiction], without regard to its conflict of law provisions. Any\n                        disputes arising from or relating to these terms shall be resolved in the\n                        courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at [Your\n                        Contact Information].\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Modal.Close>Close</Modal.Close>\n                    <Button>Accept</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-blur-demo": {
    "component": "@/components/docs/overlays/modal/modal-blur-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, TextField } from '@/components/ui'\n\nexport default function ModalBlurDemo() {\n    return (\n        <Modal>\n            <Button>Turn on 2FA</Button>\n            <Modal.Content isBlurred>\n                <Modal.Header>\n                    <Modal.Title>Nice! Let&apos;s beef up your account.</Modal.Title>\n                    <Modal.Description>\n                        2FA beefs up your account&apos;s defense. Pop in your password to keep\n                        going.\n                    </Modal.Description>\n                </Modal.Header>\n                <Form onSubmit={() => {}}>\n                    <Modal.Body>\n                        <TextField\n                            isRequired\n                            autoFocus\n                            label='Password'\n                            type='password'\n                            placeholder='Enter your password'\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Modal.Close>Cancel</Modal.Close>\n                        <Button type='submit'>Turn on 2FA</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconEllipsisVertical } from 'hq-icons'\n\nimport { Button, buttonStyles, Loader, Menu, Modal } from '@/components/ui'\nimport { wait } from '@/lib/utils'\n\nexport default function ModalTriggeredByMenuDemo() {\n    const [state, setState] = React.useState<string | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const closeModal = () => setState(null)\n    const executeAction = (action: string) => {\n        console.log(`${action} is executing`)\n        setLoading(true)\n        wait(2000).then(() => {\n            setLoading(false)\n            closeModal()\n        })\n    }\n\n    const actionType = (t: string | null) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this item?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Menu.Trigger className={buttonStyles({ variant: 'outline' })}>\n                    <IconEllipsisVertical />\n                </Menu.Trigger>\n                <Menu.Content placement='bottom'>\n                    <Menu.Item onAction={() => setState('delete')}>Delete</Menu.Item>\n                    <Menu.Item isDanger onAction={() => setState('ban')}>\n                        Ban\n                    </Menu.Item>\n                    <Menu.Item onAction={() => setState('restore')}>Restore</Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Modal.Content isOpen={state !== null} onOpenChange={closeModal}>\n                <Modal.Header>\n                    <Modal.Title>{actionType(state)?.title}</Modal.Title>\n                    <Modal.Description>{actionType(state)?.description}</Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close>Cancel</Modal.Close>\n                    <Button\n                        variant={state === 'ban' ? 'danger' : 'primary'}\n                        className='min-w-24'\n                        isDisabled={loading}\n                        onPress={actionType(state)?.action}\n                    >\n                        {loading ? <Loader variant='spin' /> : actionType(state)?.confirmText}\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n"
  },
  "overlays/modal/alert-dialog-demo": {
    "component": "@/components/docs/overlays/modal/alert-dialog-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Modal } from '@/components/ui'\n\nexport default function AlertDialogDemo() {\n    return (\n        <Modal>\n            <Modal.Trigger className={buttonStyles({ variant: 'danger' })}>Delete</Modal.Trigger>\n            <Modal.Content role='alertdialog'>\n                <Modal.Header>\n                    <Modal.Title>Delete file</Modal.Title>\n                    <Modal.Description>\n                        This will permanently delete the selected file. Continue?\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close variant='outline'>Cancel</Modal.Close>\n                    <Modal.Close variant='danger'>Continue</Modal.Close>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "overlays/modal/modal-demo": {
    "component": "@/components/docs/overlays/modal/modal-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, TextField } from '@/components/ui'\n\nexport default function ModalDemo() {\n    return (\n        <Modal>\n            <Button>Turn on 2FA</Button>\n            <Modal.Content>\n                <Modal.Header>\n                    <Modal.Title>Nice! Let&apos;s beef up your account.</Modal.Title>\n                    <Modal.Description>\n                        2FA beefs up your account&apos;s defense. Pop in your password to keep\n                        going.\n                    </Modal.Description>\n                </Modal.Header>\n                <Form onSubmit={() => {}}>\n                    <Modal.Body>\n                        <TextField\n                            isRequired\n                            autoFocus\n                            label='Password'\n                            type='password'\n                            placeholder='Enter your password'\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Modal.Close>Cancel</Modal.Close>\n                        <Button type='submit'>Turn on 2FA</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n"
  },
  "surfaces/separator/separator-orientation-demo": {
    "component": "@/components/docs/surfaces/separator/separator-orientation-demo",
    "raw": "'use client'\n\nimport { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return <Separator orientation='vertical' className='h-32' />\n}\n"
  },
  "surfaces/separator/separator-demo": {
    "component": "@/components/docs/surfaces/separator/separator-demo",
    "raw": "'use client'\n\nimport { Separator } from '@/components/ui'\n\nexport default function SeparatorDemo() {\n    return <Separator />\n}\n"
  },
  "surfaces/card/card-table-demo": {
    "component": "@/components/docs/surfaces/card/card-table-demo",
    "raw": "'use client'\n\nimport { IconEllipsisVertical, IconEye, IconHighlighter, IconTrash } from 'hq-icons'\n\nimport { Card, Menu, Pagination, Table } from '@/components/ui'\n\nexport default function CardTableDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Table aria-label='Users'>\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column isRowHeader>Name</Table.Column>\n                        <Table.Column>Gender</Table.Column>\n                        <Table.Column>Age</Table.Column>\n                        <Table.Column>Occupation</Table.Column>\n                        <Table.Column />\n                    </Table.Header>\n                    <Table.Body items={users}>\n                        {(item) => (\n                            <Table.Row id={item.id}>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.name}</Table.Cell>\n                                <Table.Cell>{item.gender}</Table.Cell>\n                                <Table.Cell>{item.age}</Table.Cell>\n                                <Table.Cell>{item.occupation}</Table.Cell>\n                                <Table.Cell className='flex justify-end'>\n                                    <Menu>\n                                        <Menu.Trigger>\n                                            <IconEllipsisVertical />\n                                        </Menu.Trigger>\n                                        <Menu.Content showArrow placement='left top'>\n                                            <Menu.Item>\n                                                <IconEye /> View\n                                            </Menu.Item>\n                                            <Menu.Item>\n                                                <IconHighlighter /> Edit\n                                            </Menu.Item>\n                                            <Menu.Separator />\n                                            <Menu.Item isDanger>\n                                                <IconTrash /> Delete\n                                            </Menu.Item>\n                                        </Menu.Content>\n                                    </Menu>\n                                </Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n            <Card.Footer>\n                <Pagination>\n                    <Pagination.List>\n                        <Pagination.Item role='first' />\n                        <Pagination.Item role='previous' />\n                        <Pagination.Section className='rounded-lg border lg:hidden'>\n                            <Pagination.Item role='label'>1</Pagination.Item>\n                            <Pagination.Item role='separator' />\n                            <Pagination.Item className='text-muted-fg' role='label'>\n                                {users.length}\n                            </Pagination.Item>\n                        </Pagination.Section>\n                        <Pagination.Section className='hidden lg:flex' items={pages}>\n                            {(item) => (\n                                <Pagination.Item\n                                    id={item.value.toString()}\n                                    isCurrent={item.value === 4}\n                                    href='#'\n                                >\n                                    {item.value}\n                                </Pagination.Item>\n                            )}\n                        </Pagination.Section>\n                        <Pagination.Item role='next' />\n                        <Pagination.Item role='last' />\n                    </Pagination.List>\n                </Pagination>\n            </Card.Footer>\n        </Card>\n    )\n}\n\nconst users = [\n    {\n        id: 1,\n        name: 'John Doe',\n        gender: 'Male',\n        age: 30,\n        occupation: 'Software Engineer'\n    },\n    {\n        id: 2,\n        name: 'Jane Smith',\n        gender: 'Female',\n        age: 25,\n        occupation: 'Marketing Manager'\n    },\n    {\n        id: 3,\n        name: 'Bob Johnson',\n        gender: 'Male',\n        age: 40,\n        occupation: 'Doctor'\n    },\n    {\n        id: 4,\n        name: 'Emily Chen',\n        gender: 'Female',\n        age: 28,\n        occupation: 'Teacher'\n    },\n    {\n        id: 5,\n        name: 'Michael Brown',\n        gender: 'Male',\n        age: 35,\n        occupation: 'Lawyer'\n    },\n    {\n        id: 6,\n        name: 'Sarah Lee',\n        gender: 'Female',\n        age: 32,\n        occupation: 'Designer'\n    },\n    {\n        id: 7,\n        name: 'Kevin White',\n        gender: 'Male',\n        age: 45,\n        occupation: 'CEO'\n    },\n    {\n        id: 8,\n        name: 'Lisa Nguyen',\n        gender: 'Female',\n        age: 29,\n        occupation: 'Engineer'\n    },\n    {\n        id: 9,\n        name: 'David Kim',\n        gender: 'Male',\n        age: 38,\n        occupation: 'Consultant'\n    },\n    {\n        id: 10,\n        name: 'Hannah Patel',\n        gender: 'Female',\n        age: 26,\n        occupation: 'Writer'\n    }\n]\nconst pages = Array.from({ length: users.length / 2 }, (_, i) => ({ value: i + 1 }))\n"
  },
  "surfaces/card/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card/card-login-form-demo",
    "raw": "'use client'\n\nimport { Button, Card, Checkbox, Link, TextField } from '@/components/ui'\n\nexport default function CardLoginFormDemo() {\n    return (\n        <Card className='max-w-md mx-auto'>\n            <Card.Header>\n                <Card.Title>Login</Card.Title>\n                <Card.Description>Don&apos;t loose the level, just keep on going.</Card.Description>\n            </Card.Header>\n            <Card.Content className='space-y-6'>\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <TextField\n                    isRequired\n                    label='Password'\n                    isRevealable\n                    type='password'\n                    placeholder='Enter your password'\n                />\n                <div className='flex justify-between items-center'>\n                    <Checkbox>Remember me</Checkbox>\n                    <Link variant='primary' href='#'>\n                        Forgot password?\n                    </Link>\n                </div>\n            </Card.Content>\n            <Card.Footer>\n                <Button className='w-full'>Login</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/card/card-demo": {
    "component": "@/components/docs/surfaces/card/card-demo",
    "raw": "'use client'\n\nimport { Button, Card } from '@/components/ui'\n\nexport default function CardDemo() {\n    return (\n        <Card className='max-w-lg'>\n            <Card.Header>\n                <Card.Title>Monthly Report</Card.Title>\n                <Card.Description>Financial summary for June</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                The monthly financial report shows a 15% increase in revenue compared to last month.\n            </Card.Content>\n            <Card.Footer>\n                <Button>View Details</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-orientation-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-orientation-demo",
    "raw": "'use client'\n\nimport { ShowMore } from '@/components/ui'\n\nexport default function ShowMoreOrientationDemo() {\n    return <ShowMore orientation='vertical' as='text' text='Or' className='h-56' />\n}\n"
  },
  "surfaces/show-more/show-more-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-demo",
    "raw": "'use client'\n\nimport { IconChevronDown } from 'hq-icons'\n\nimport { ShowMore, cn } from '@/components/ui'\n\nexport default function ShowMoreDemo() {\n    return (\n        <div className='py-6'>\n            <ShowMore>\n                {({ isSelected }) => (\n                    <>\n                        Show {isSelected ? 'less' : 'more'}\n                        <IconChevronDown\n                            className={cn(\n                                isSelected ? 'rotate-180' : '',\n                                'size-4 transition-transform'\n                            )}\n                        />\n                    </>\n                )}\n            </ShowMore>\n        </div>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-content-reveal-initial-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-content-reveal-initial-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { ContentReveal } from '@/components/ui'\n\nexport default function ShowMoreContentRevealDemo() {\n    return (\n        <ContentReveal\n            initialHeight={0}\n            initialOpacity={0}\n            showMoreText='Reveal'\n            showLessText='Hide'\n        >\n            <Image\n                className='rounded-lg'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </ContentReveal>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-controlled-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-controlled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronDown } from 'hq-icons'\n\nimport { ShowMore } from '@/components/ui'\n\nexport default function ShowMoreControlledDemo() {\n    const [isExpanded, setIsExpanded] = React.useState(false)\n    return (\n        <div className='py-6'>\n            <ShowMore onChange={setIsExpanded} isSelected={isExpanded}>\n                {isExpanded ? 'Expand' : 'Collapse'}\n                <IconChevronDown\n                    className={`${isExpanded ? 'rotate-180' : ''} size-4 transition-transform`}\n                />\n            </ShowMore>\n        </div>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-as-text-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-as-text-demo",
    "raw": "'use client'\n\nimport { ShowMore } from '@/components/ui'\n\nexport default function ShowMoreAsTextDemo() {\n    return (\n        <div className='py-6'>\n            <ShowMore as='text' text='Or continue with' />\n        </div>\n    )\n}\n"
  },
  "surfaces/show-more/show-more-content-reveal-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-content-reveal-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { ContentReveal } from '@/components/ui'\n\nexport default function ShowMoreContentRevealDemo() {\n    return (\n        <ContentReveal>\n            <Image\n                className='rounded-lg'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </ContentReveal>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-heading-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-heading-demo",
    "raw": "'use client'\n\nimport { DescriptionList, Heading } from '@/components/ui'\n\nexport default function DescriptionListHeadingDemo() {\n    return (\n        <div>\n            <Heading className='sm:text-lg'>Product Details</Heading>\n            <DescriptionList>\n                <DescriptionList.Term>Product Name</DescriptionList.Term>\n                <DescriptionList.Details>Wireless Headphones</DescriptionList.Details>\n                <DescriptionList.Term>Battery Life</DescriptionList.Term>\n                <DescriptionList.Details>20 hours</DescriptionList.Details>\n                <DescriptionList.Term>Weight</DescriptionList.Term>\n                <DescriptionList.Details>250 grams</DescriptionList.Details>\n                <DescriptionList.Term>Color</DescriptionList.Term>\n                <DescriptionList.Details>Black</DescriptionList.Details>\n                <DescriptionList.Term>Warranty</DescriptionList.Term>\n                <DescriptionList.Details>2 years</DescriptionList.Details>\n            </DescriptionList>\n        </div>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-card-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-card-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Card, DescriptionList, Link } from '@/components/ui'\n\nexport default function DescriptionListCardDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Product Details</Card.Title>\n                <Card.Description>\n                    The product details card is a great way to display information about a product.\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <DescriptionList>\n                    <DescriptionList.Term>Product Name</DescriptionList.Term>\n                    <DescriptionList.Details>Wireless Headphones</DescriptionList.Details>\n                    <DescriptionList.Term>Battery Life</DescriptionList.Term>\n                    <DescriptionList.Details>20 hours</DescriptionList.Details>\n                    <DescriptionList.Term>Weight</DescriptionList.Term>\n                    <DescriptionList.Details>250 grams</DescriptionList.Details>\n                    <DescriptionList.Term>Color</DescriptionList.Term>\n                    <DescriptionList.Details>Black</DescriptionList.Details>\n                    <DescriptionList.Term>Warranty</DescriptionList.Term>\n                    <DescriptionList.Details>2 years</DescriptionList.Details>\n                </DescriptionList>\n            </Card.Content>\n            <Card.Footer>\n                <Link className={buttonStyles()} href='#'>\n                    Edit\n                </Link>\n            </Card.Footer>\n        </Card>\n    )\n}\n"
  },
  "surfaces/description-list/description-list-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-demo",
    "raw": "import { DescriptionList } from '@/components/ui/description-list'\n\nexport default function DescriptionListDemo() {\n    return (\n        <DescriptionList>\n            <DescriptionList.Term>Invoice Number</DescriptionList.Term>\n            <DescriptionList.Details>INV-12345</DescriptionList.Details>\n            <DescriptionList.Term>Invoice Date</DescriptionList.Term>\n            <DescriptionList.Details>September 21, 2024</DescriptionList.Details>\n            <DescriptionList.Term>Due Date</DescriptionList.Term>\n            <DescriptionList.Details>October 21, 2024</DescriptionList.Details>\n            <DescriptionList.Term>Customer Name</DescriptionList.Term>\n            <DescriptionList.Details>John Doe</DescriptionList.Details>\n            <DescriptionList.Term>Total Amount</DescriptionList.Term>\n            <DescriptionList.Details>$1,250.00</DescriptionList.Details>\n            <DescriptionList.Term>Status</DescriptionList.Term>\n            <DescriptionList.Details>Pending</DescriptionList.Details>\n        </DescriptionList>\n    )\n}\n"
  },
  "surfaces/grid/grid-collections-demo": {
    "component": "@/components/docs/surfaces/grid/grid-collections-demo",
    "raw": "'use client'\n\nimport { Card, Grid } from '@/components/ui'\n\nexport default function GridCollectionsDemo() {\n    return (\n        <Grid\n            aria-label='List articles'\n            columns={{ initial: 1, sm: 2, '2xl': 3 }}\n            gap={2}\n            items={articles}\n        >\n            {(item) => (\n                <Grid.Item>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>{item.title}</Card.Title>\n                            <Card.Description>{item.description}</Card.Description>\n                        </Card.Header>\n                    </Card>\n                </Grid.Item>\n            )}\n        </Grid>\n    )\n}\n\nconst articles = [\n    {\n        id: 1,\n        title: 'Understanding React Hooks',\n        description:\n            \"Get the lowdown on React Hooks, how to use 'em, and best practices for those sleek functional components.\"\n    },\n    {\n        id: 2,\n        title: 'Mastering TypeScript',\n        description:\n            'Dive deep into TypeScript, from basic stuff to pro features, for building rock-solid apps.'\n    },\n    {\n        id: 3,\n        title: 'Laravel Eloquent Tips',\n        description:\n            'Check out advanced tricks for using Laravel Eloquent ORM to make your database game strong.'\n    },\n    {\n        id: 4,\n        title: 'Building with Next.js',\n        description:\n            'A full-on tutorial on creating server-rendered React apps with the Next.js framework.'\n    },\n    {\n        id: 5,\n        title: 'Inertia.js for Full-Stack Devs',\n        description:\n            'Learn how Inertia.js smooths out the gap between client-side frameworks and server-side apps.'\n    },\n    {\n        id: 6,\n        title: 'Optimizing Web Performance',\n        description: 'Tips and tricks to boost the performance and speed of your web apps.'\n    }\n]\n"
  },
  "surfaces/grid/grid-debug-demo": {
    "component": "@/components/docs/surfaces/grid/grid-debug-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridDebugDemo() {\n    return (\n        <Grid debug columns={3} gap={4}>\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-gap-x-y-demo": {
    "component": "@/components/docs/surfaces/grid/grid-gap-x-y-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridGapXYDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 3,\n                sm: 4,\n                md: 6\n            }}\n            gapX={{\n                initial: 2,\n                sm: 4\n            }}\n            gapY={{\n                initial: 4,\n                sm: 6\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-item-demo": {
    "component": "@/components/docs/surfaces/grid/grid-item-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridItemDemo() {\n    return (\n        <Grid debug columns={3} gap={4}>\n            <Grid.Item\n                colSpan={{\n                    initial: 1,\n                    sm: 2\n                }}\n                className='w-full h-24 grid place-content-center'\n            >\n                1\n            </Grid.Item>\n            <Grid.Item className='w-full h-24 grid place-content-center'>2</Grid.Item>\n            <Grid.Item\n                colSpan={{\n                    initial: 1,\n                    sm: 3\n                }}\n                className='w-full h-24 grid place-content-center'\n            >\n                3\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-responsive-demo": {
    "component": "@/components/docs/surfaces/grid/grid-responsive-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridResponsiveDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 3,\n                sm: 4,\n                md: 5,\n                xl: 6\n            }}\n            gap={{\n                initial: 2,\n                sm: 3,\n                lg: 4\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-basic-demo": {
    "component": "@/components/docs/surfaces/grid/grid-basic-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridBasicDemo() {\n    return (\n        <Grid columns={6}>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border-l border-y h-32 border-r' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "surfaces/grid/grid-gap-demo": {
    "component": "@/components/docs/surfaces/grid/grid-gap-demo",
    "raw": "'use client'\n\nimport { Grid } from '@/components/ui'\n\nexport default function GridGapDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 4,\n                sm: 5,\n                md: 6\n            }}\n            gap={{\n                initial: 2,\n                sm: 4\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-danger-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-danger-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDangerDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item>Open</ContextMenu.Item>\n                <ContextMenu.Item>Rename</ContextMenu.Item>\n                <ContextMenu.Item>Duplicate</ContextMenu.Item>\n                <ContextMenu.Item>Share</ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>Delete</ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content className='sm:min-w-56'>\n                <ContextMenu.Item>Back</ContextMenu.Item>\n                <ContextMenu.Item isDisabled>Forward</ContextMenu.Item>\n                <ContextMenu.Item>Reload</ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>Bookmark</ContextMenu.Item>\n                <ContextMenu.Item>Save as</ContextMenu.Item>\n                <ContextMenu.Item>\n                    Select all\n                    <ContextMenu.Keyboard keys='⌘A' />\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item>View source</ContextMenu.Item>\n                <ContextMenu.Item>Inspect Accessibility</ContextMenu.Item>\n                <ContextMenu.Item>Inspect</ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-item-details-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-item-details-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuItemDetailsDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content items={roles}>\n                {(item) => (\n                    <ContextMenu.Item id={item.id} textValue={item.name}>\n                        <ContextMenu.ItemDetails label={item.name} description={item.description} />\n                    </ContextMenu.Item>\n                )}\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n"
  },
  "controls/context-menu/context-menu-with-icon-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-with-icon-demo",
    "raw": "'use client'\n\nimport { IconCopy, IconFolder, IconHighlighter, IconTrash, IconUpload } from 'hq-icons'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuWithIconDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item>\n                    <IconFolder />\n                    Open\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconHighlighter />\n                    Rename\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconCopy />\n                    Duplicate\n                </ContextMenu.Item>\n                <ContextMenu.Item>\n                    <IconUpload />\n                    Share\n                </ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item isDanger>\n                    <IconTrash />\n                    Delete\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-separator-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-separator-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuSeparatorDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item id='view'>View</ContextMenu.Item>\n                <ContextMenu.Item id='edit'>Edit</ContextMenu.Item>\n                <ContextMenu.Separator />\n                <ContextMenu.Item id='gsu'>Generate Short URL</ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/context-menu/context-menu-disabled-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-disabled-demo",
    "raw": "'use client'\n\nimport { ContextMenu } from '@/components/ui'\n\nexport default function ContextMenuDisabledDemo() {\n    return (\n        <ContextMenu>\n            <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n            <ContextMenu.Content>\n                <ContextMenu.Item id='view'>View</ContextMenu.Item>\n                <ContextMenu.Item id='edit'>Edit</ContextMenu.Item>\n                <ContextMenu.Item id='gsu' isDisabled>\n                    Generate Short URL\n                </ContextMenu.Item>\n            </ContextMenu.Content>\n        </ContextMenu>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-disabled-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-disabled-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignJustify,\n    IconAlignRight,\n    IconCamera,\n    IconImage,\n    IconPencil,\n    IconPencilRuler,\n    IconPointer\n} from 'hq-icons'\n\nimport { Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDisabledDemo() {\n    return (\n        <Toolbar aria-label='Toolbox'>\n            <Toolbar.Group aria-label='Toolbox'>\n                <Toggle isDisabled aria-label='Cursor' size='icon' variant='outline'>\n                    <IconPointer />\n                </Toggle>\n                <Toggle aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencil />\n                </Toggle>\n                <Toggle aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencilRuler />\n                </Toggle>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group isDisabled aria-label='Gallery'>\n                <Toolbar.Item aria-label='Camera' size='icon' variant='outline'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery' size='icon' variant='outline'>\n                    <IconImage />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment'>\n                <Toggle aria-label='Align Right' size='icon' variant='outline'>\n                    <IconAlignRight />\n                </Toggle>\n                <Toggle aria-label='Align Justify' size='icon' variant='outline'>\n                    <IconAlignJustify />\n                </Toggle>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustify,\n    IconAlignLeft,\n    IconAlignRight,\n    IconBold,\n    IconChevronDown,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconImage,\n    IconItalic,\n    IconLayoutGrid,\n    IconLink,\n    IconStrikethrough,\n    IconUnderline\n} from 'hq-icons'\n\nimport { Button, Checkbox, Menu, Toolbar } from '@/components/ui'\n\nexport default function ToolbarDemo() {\n    return (\n        <Toolbar aria-label='Toolbars'>\n            <Toolbar.Group aria-label='Text Formatting Options'>\n                <Toolbar.Item aria-label='Bold' size='icon' variant='outline'>\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Italic' size='icon' variant='outline'>\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Underline' size='icon' variant='outline'>\n                    <IconUnderline />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Strikethrough' size='icon' variant='outline'>\n                    <IconStrikethrough />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment'>\n                <Toolbar.Item aria-label='Align Left' size='icon' variant='outline'>\n                    <IconAlignLeft />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Center' size='icon' variant='outline'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Right' size='icon' variant='outline'>\n                    <IconAlignRight />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify' size='icon' variant='outline'>\n                    <IconAlignJustify />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group className='ml-auto'>\n                <Menu>\n                    <Button aria-label='Other options' variant='outline' size='sm'>\n                        Options...\n                        <IconChevronDown />\n                    </Button>\n                    <Menu.Content showArrow placement='bottom right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconImage />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n            <Checkbox>Spell Check</Checkbox>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/toolbar/toolbar-orientation-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-orientation-demo",
    "raw": "'use client'\n\nimport {\n    IconAlignCenter,\n    IconAlignJustify,\n    IconAlignLeft,\n    IconCamera,\n    IconCircleArrowLeft,\n    IconCircleArrowRight,\n    IconEllipsisVertical,\n    IconImage,\n    IconLayoutGrid,\n    IconLink,\n    IconPencil,\n    IconPencilRuler,\n    IconPointer\n} from 'hq-icons'\n\nimport { Button, Menu, Toggle, Toolbar } from '@/components/ui'\n\nexport default function ToolbarOrientationDemo() {\n    return (\n        <Toolbar aria-label='Toolbox' orientation='vertical'>\n            <Toolbar.Group aria-label='Toolbox'>\n                <Toolbar.Item aria-label='Cursor' size='icon' variant='outline'>\n                    <IconPointer />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencil />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Pencil Box' size='icon' variant='outline'>\n                    <IconPencilRuler />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Gallery'>\n                <Toolbar.Item aria-label='Camera' size='icon' variant='outline'>\n                    <IconCamera />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Gallery' size='icon' variant='outline'>\n                    <IconImage />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Alignment'>\n                <Toggle aria-label='Align Left' size='icon' variant='outline'>\n                    <IconAlignLeft />\n                </Toggle>\n                <Toolbar.Item aria-label='Align Center' size='icon' variant='outline'>\n                    <IconAlignCenter />\n                </Toolbar.Item>\n                <Toolbar.Item aria-label='Align Justify' size='icon' variant='outline'>\n                    <IconAlignJustify />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group>\n                <Menu>\n                    <Button aria-label='Other options' variant='outline' size='icon'>\n                        <IconEllipsisVertical />\n                    </Button>\n                    <Menu.Content showArrow placement='right'>\n                        <Menu.Item>\n                            <IconCircleArrowLeft />\n                            Undo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconCircleArrowRight />\n                            Redo\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLink />\n                            Insert Link\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconImage />\n                            Insert Image\n                        </Menu.Item>\n                        <Menu.Item>\n                            <IconLayoutGrid />\n                            Insert Grid\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n"
  },
  "controls/slider/slider-demo": {
    "component": "@/components/docs/controls/slider/slider-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDemo() {\n    return <Slider label='Volume' />\n}\n"
  },
  "controls/slider/slider-controlled-demo": {
    "component": "@/components/docs/controls/slider/slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderControlledDemo() {\n    const [temperature, setTemperature] = React.useState<number>(31)\n    const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n    return (\n        <div className='space-y-6'>\n            <div>\n                <Slider\n                    value={temperature}\n                    onChange={(v) => setTemperature(v as number)}\n                    label='Temperature'\n                    description={`Current temperature: ${temperature ?? '-'}`}\n                />\n            </div>\n            <div>\n                <Slider\n                    value={saturation}\n                    onChange={(v) => setSaturation(v as number[])}\n                    label='Saturation'\n                    description={`Current saturation: ${saturation ?? '-'}`}\n                />\n            </div>\n        </div>\n    )\n}\n"
  },
  "controls/slider/slider-step-demo": {
    "component": "@/components/docs/controls/slider/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderStepDemo() {\n    return <Slider step={10} description='Step in 10' label='Progress tracking' />\n}\n"
  },
  "controls/slider/slider-range-demo": {
    "component": "@/components/docs/controls/slider/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderRangeDemo() {\n    return <Slider defaultValue={[25, 75]} label='Distance Range' />\n}\n"
  },
  "controls/slider/slider-disabled-demo": {
    "component": "@/components/docs/controls/slider/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDisabledDemo() {\n    return <Slider isDisabled label='Volume' />\n}\n"
  },
  "controls/slider/slider-prefix-suffix-demo": {
    "component": "@/components/docs/controls/slider/slider-prefix-suffix-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconVolume } from 'hq-icons'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderPrefixSuffixDemo() {\n    const [volume, setVolume] = React.useState<number>(0.5)\n    return (\n        <div className='items-center flex gap-4 [&>[data-slot=icon]]:translate-y-3.5 [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0'>\n            <Slider value={volume} onChange={(v) => setVolume(v as number)} label='Volume' />\n            <IconVolume />\n        </div>\n    )\n}\n"
  },
  "controls/slider/slider-orientation-demo": {
    "component": "@/components/docs/controls/slider/slider-orientation-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Card, Description, Slider } from '@/components/ui'\n\nexport default function SliderOrientationDemo() {\n    const [equalizer, setEqualizer] = useState({\n        subBass: 40,\n        bass: 50,\n        lowMid: 60,\n        mid: 70,\n        highMid: 65,\n        presence: 75,\n        brilliance: 80\n    })\n\n    const handleSliderChange = (name: string, value: number) => {\n        setEqualizer((prev) => ({ ...prev, [name]: value }))\n    }\n\n    return (\n        <Card className='p-4'>\n            <div className='flex justify-center [&>*]:w-6 gap-4'>\n                <Slider\n                    aria-label='Sub Bass'\n                    value={equalizer.subBass}\n                    onChange={(newValue) => handleSliderChange('subBass', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Bass'\n                    value={equalizer.bass}\n                    onChange={(newValue) => handleSliderChange('bass', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Low Mid'\n                    value={equalizer.lowMid}\n                    onChange={(newValue) => handleSliderChange('lowMid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Mid'\n                    value={equalizer.mid}\n                    onChange={(newValue) => handleSliderChange('mid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='High Mid'\n                    value={equalizer.highMid}\n                    onChange={(newValue) => handleSliderChange('highMid', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Presence'\n                    value={equalizer.presence}\n                    onChange={(newValue) => handleSliderChange('presence', newValue as number)}\n                    orientation='vertical'\n                />\n                <Slider\n                    aria-label='Brilliance'\n                    value={equalizer.brilliance}\n                    onChange={(newValue) => handleSliderChange('brilliance', newValue as number)}\n                    orientation='vertical'\n                />\n            </div>\n            <Description className='mt-6 block text-center'>Equilizer</Description>\n        </Card>\n    )\n}\n"
  },
  "controls/switch/switch-controlled-demo": {
    "component": "@/components/docs/controls/switch/switch-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Switch } from '@/components/ui'\n\nexport default function SwitchControlledDemo() {\n    const [darkMode, setDarkMode] = React.useState(false)\n    return (\n        <>\n            <Switch isSelected={darkMode} onChange={setDarkMode} value='dark_mode'>\n                Enable Dark Mode\n            </Switch>\n\n            <Description className='[&>strong]:text-fg mt-2 block'>\n                Dark Mode is <strong>{darkMode ? 'enabled' : 'disabled'}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "controls/switch/switch-demo": {
    "component": "@/components/docs/controls/switch/switch-demo",
    "raw": "'use client'\n\nimport { useTheme } from 'next-themes'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    const { resolvedTheme, setTheme } = useTheme()\n    return (\n        <Switch onChange={() => setTheme(resolvedTheme === 'light' ? 'dark' : 'light')}>\n            Switch Theme\n        </Switch>\n    )\n}\n"
  },
  "controls/switch/switch-disabled-demo": {
    "component": "@/components/docs/controls/switch/switch-disabled-demo",
    "raw": "'use client'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    return <Switch isDisabled>Dark Mode</Switch>\n}\n"
  },
  "controls/switch/switch-variant-demo": {
    "component": "@/components/docs/controls/switch/switch-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Select, Switch } from '@/components/ui'\n\nconst items = ['primary', 'secondary', 'success', 'danger', 'warning', 'muted']\nexport default function SwitchVariantDemo() {\n    const [variant, setVariant] = React.useState<string>('primary')\n\n    return (\n        <>\n            <div className='absolute left-4 top-4 inline-flex min-w-32 flex-col gap-1'>\n                <Select\n                    selectedKey={variant}\n                    onSelectionChange={(v) => setVariant(v as string)}\n                    items={items.map((item) => ({ value: item, label: item }))}\n                >\n                    {(item) => (\n                        <Select.Item id={item.value} textValue={item.value}>\n                            {item.label}\n                        </Select.Item>\n                    )}\n                </Select>\n            </div>\n            <Switch defaultSelected variant={variant as keyof typeof Switch}>\n                Label\n            </Switch>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-keyboard-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-keyboard-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandKeyboardDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Item>\n                        Account Settings\n                        <Command.Keyboard keys='⌘A' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Profile\n                        <Command.Keyboard keys='⌘P' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Notifications\n                        <Command.Keyboard keys='⌘N' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Privacy Settings\n                        <Command.Keyboard keys='⌘S' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Billing Information\n                        <Command.Keyboard keys='⌘B' />\n                    </Command.Item>\n\n                    <Command.Item>\n                        Logout\n                        <Command.Keyboard keys='⌘L' />\n                    </Command.Item>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-separator-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-separator-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandSeparatorDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Item asChild>\n                        <a href='#'>Profile Overview</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Profile Settings</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Security Settings</a>\n                    </Command.Item>\n                    <Command.Separator />\n                    <Command.Item asChild>\n                        <a href='#'>Notification Preferences</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Privacy Settings</a>\n                    </Command.Item>\n                    <Command.Separator />\n                    <Command.Item asChild>\n                        <a href='#'>Billing Information</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Subscription Plans</a>\n                    </Command.Item>\n                    <Command.Separator />\n                    <Command.Item asChild>\n                        <a href='#'>Connected Apps</a>\n                    </Command.Item>\n                    <Command.Item asChild>\n                        <a href='#'>Logout</a>\n                    </Command.Item>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-disabled-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandDisabledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section heading='Suggestions'>\n                        <Command.Item>\n                            PhpStorm\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            WebStorm\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item disabled>\n                            Warp\n                            <Command.Description>Need to enable</Command.Description>\n                        </Command.Item>\n                        <Command.Item disabled>\n                            Sublime Text\n                            <Command.Description>Need to enable</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            VS Code\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item disabled>\n                            Atom\n                            <Command.Description>Killed</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-description-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-description-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBox } from 'hq-icons'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandDescriptionDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command\n                messageOnEmpty={false}\n                hideCloseButton\n                hideSearchIndicator\n                isOpen={isOpen}\n                onOpenChange={setIsOpen}\n            >\n                <Command.Input placeholder='Search for apps and commands...' />\n                <Command.Empty className='grid place-content-center'>\n                    <div className='text-center'>\n                        <IconBox className='inline' />\n                        <p className='mt-2'>No results found.</p>\n                    </div>\n                </Command.Empty>\n\n                <Command.List>\n                    <Command.Section separator heading='Suggestions'>\n                        <Command.Item>\n                            PhpStorm\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            WebStorm\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            Warp\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n\n                    <Command.Section separator heading='Applications'>\n                        <Command.Item>\n                            Terminal\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            Docker\n                            <Command.Description>Application</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n\n                    <Command.Section separator heading='Commands'>\n                        <Command.Item>\n                            git status\n                            <Command.Description>Command</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            bun add\n                            <Command.Description>Command</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            composer require\n                            <Command.Description>Command</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n\n                    <Command.Section heading='System Settings'>\n                        <Command.Item>\n                            Display Brightness\n                            <Command.Description>System Settings</Command.Description>\n                        </Command.Item>\n                        <Command.Item>\n                            Sound Output\n                            <Command.Description>System Settings</Command.Description>\n                        </Command.Item>\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-controlled-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Avatar, Button, Command } from '@/components/ui'\n\nexport default function CommandControlledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command\n                onValueChange={setValue}\n                value={value}\n                isOpen={isOpen}\n                onOpenChange={setIsOpen}\n            >\n                <Command.Input defaultValue={value} placeholder='Quick search...' />\n                <Command.List>\n                    {users.map((user) => (\n                        <Command.Item key={user.id} value={user.name}>\n                            <Avatar src={user.image_url} />\n                            {user.name}{' '}\n                            {user.name === value && (\n                                <Command.Description>Selected: {value}</Command.Description>\n                            )}\n                        </Command.Item>\n                    ))}\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "controls/command-menu/command-menu-danger-item-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-danger-item-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandDangerItemDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section>\n                        <Command.Item>System Shutdown</Command.Item>\n                        <Command.Item isDanger>Format Disk</Command.Item>\n                        <Command.Item>Restart Service</Command.Item>\n                        <Command.Item>Empty Trash</Command.Item>\n                        <Command.Item>Overwrite File</Command.Item>\n                        <Command.Item isDanger>Reset Factory Settings</Command.Item>\n                        <Command.Item>Disconnect Network</Command.Item>\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-trigger-by-keyboard-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-trigger-by-keyboard-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBox, IconCreditCard, IconHome, IconNotebook, IconSettings, IconShield } from 'hq-icons'\nimport Link from 'next/link'\n\nimport { Command } from '@/components/ui'\n\nexport default function CommandTriggerByKeyboardDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    React.useEffect(() => {\n        const down = (e: KeyboardEvent) => {\n            if (e.key === '/' && (e.metaKey || e.ctrlKey)) {\n                e.preventDefault()\n                setIsOpen((open: boolean) => !open)\n            }\n        }\n\n        document.addEventListener('keydown', down)\n\n        return () => document.removeEventListener('keydown', down)\n    }, [setIsOpen])\n    return (\n        <>\n            ⌘ /\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section separator heading='Pages'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconHome /> Home\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconNotebook /> Docs\n                                <Command.Keyboard keys='⌘k' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconBox /> Components\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section heading='Dashboard'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconCreditCard /> Billing\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconSettings /> Settings\n                                <Command.Keyboard keys='⌘s' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconShield /> Security\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n"
  },
  "controls/command-menu/command-menu-blur-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-blur-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBox, IconDollar, IconHome, IconNotebook, IconSettings, IconShield } from 'hq-icons'\nimport Link from 'next/link'\n\n// Replace with your router link component\nimport { Avatar, Button, Command } from '@/components/ui'\n\nexport default function CommandBlurDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isBlurred isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section separator heading='Pages'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconHome /> Home\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconNotebook /> Docs\n                                <Command.Keyboard keys='⌘k' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconBox /> Components\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section separator heading='Dashboard'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconDollar /> Billing\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconSettings /> Settings\n                                <Command.Keyboard keys='⌘s' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconShield /> Security\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section heading='Team'>\n                        {users.map((user) => (\n                            <Command.Item key={user.id}>\n                                <Avatar src={user.image_url} />\n                                {user.name}\n                            </Command.Item>\n                        ))}\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' }\n]\n"
  },
  "controls/command-menu/command-menu-section-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-section-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Command } from '@/components/ui'\n\nexport default function CommandSectionDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section heading='Pages'>\n                        <Command.Item asChild>\n                            <a href='/public'>Home</a>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <a href='/components'>Components</a>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Separator />\n                    <Command.Section heading='Users'>\n                        {users.map((user) => (\n                            <Command.Item key={user.id}>{user.name}</Command.Item>\n                        ))}\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n"
  },
  "controls/command-menu/command-menu-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBox, IconDollar, IconHome, IconNotebook, IconSettings, IconShield } from 'hq-icons'\nimport Link from 'next/link'\n\n// Replace with your router link component\nimport { Avatar, Button, Command } from '@/components/ui'\n\nexport default function CommandDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button variant='outline' onPress={() => setIsOpen(true)}>\n                Open\n            </Button>\n            <Command isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Command.Input placeholder='Quick search...' />\n                <Command.List>\n                    <Command.Section separator heading='Pages'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconHome /> Home\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconNotebook /> Docs\n                                <Command.Keyboard keys='⌘k' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconBox /> Components\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section separator heading='Dashboard'>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconDollar /> Billing\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconSettings /> Settings\n                                <Command.Keyboard keys='⌘s' />\n                            </Link>\n                        </Command.Item>\n                        <Command.Item asChild>\n                            <Link href='#'>\n                                <IconShield /> Security\n                            </Link>\n                        </Command.Item>\n                    </Command.Section>\n                    <Command.Section heading='Team'>\n                        {users.map((user) => (\n                            <Command.Item key={user.id}>\n                                <Avatar src={user.image_url} />\n                                {user.name}\n                            </Command.Item>\n                        ))}\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' }\n]\n"
  },
  "statuses/badge/badge-shape-demo": {
    "component": "@/components/docs/statuses/badge/badge-shape-demo",
    "raw": "'use client'\n\nimport { titleCase } from 'usemods'\n\nimport { Badge, badgeStyles } from '@/components/ui'\n\ntype Shapes = keyof typeof badgeStyles.variants.shape\n\nexport default function BadgeShapeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(badgeStyles.variants.shape).map((shape) => (\n                <div key={shape}>\n                    <Badge shape={shape as Shapes}>{titleCase(shape)}</Badge>\n                </div>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/badge/badge-demo": {
    "component": "@/components/docs/statuses/badge/badge-demo",
    "raw": "'use client'\n\nimport { Badge } from '@/components/ui'\n\nexport default function BadgeDemo() {\n    return <Badge>Label</Badge>\n}\n"
  },
  "statuses/badge/badge-variant-demo": {
    "component": "@/components/docs/statuses/badge/badge-variant-demo",
    "raw": "'use client'\n\nimport { titleCase } from 'usemods'\n\nimport { Badge, badgeStyles } from '@/components/ui'\n\ntype Appearance = keyof typeof badgeStyles.variants.variant\n\nexport default function BadgeVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(badgeStyles.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Badge variant={variant as Appearance}>{titleCase(variant)}</Badge>\n                </div>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-description-demo": {
    "component": "@/components/docs/statuses/toast/toast-description-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToastDescriptionDemo() {\n    return (\n        <Button\n            onPress={() =>\n                toast('Cart Updated', {\n                    description: 'Your item’s in the cart. Tap here to check it out.'\n                })\n            }\n        >\n            Add to Cart\n        </Button>\n    )\n}\n"
  },
  "statuses/toast/toast-status-demo": {
    "component": "@/components/docs/statuses/toast/toast-status-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToastStatusDemo() {\n    return (\n        <div className='flex flex-wrap gap-3'>\n            <Button variant='outline' onPress={() => toast.error('The registration failed')}>\n                Error\n            </Button>\n            <Button\n                variant='outline'\n                onPress={() => toast.success('The registration was successful.')}\n            >\n                Success\n            </Button>\n            <Button\n                variant='outline'\n                onPress={() => toast.warning('There was an issue during registration')}\n            >\n                Warning\n            </Button>\n            <Button variant='outline' onPress={() => toast.info('Email is already registered.')}>\n                Info\n            </Button>\n            <Button\n                variant='outline'\n                onPress={() => {\n                    toast.promise(wait(2000), {\n                        loading: 'Deleting database...',\n                        success: 'Database deleted.',\n                        error: 'Failed to delete database.'\n                    })\n                }}\n            >\n                Promise / Loading\n            </Button>\n        </div>\n    )\n}\n\nfunction wait(number: number) {\n    return new Promise((resolve) => setTimeout(resolve, number))\n}\n"
  },
  "statuses/toast/toast-demo": {
    "component": "@/components/docs/statuses/toast/toast-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToastDemo() {\n    return (\n        <Button onPress={() => toast('The registration is successful, click here to continue.')}>\n            Show Toast\n        </Button>\n    )\n}\n"
  },
  "statuses/toast/toast-action-demo": {
    "component": "@/components/docs/statuses/toast/toast-action-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToastActionDemo() {\n    return (\n        <div className='flex gap-3'>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        action: {\n                            label: 'View',\n                            onClick: () => alert('Viewed')\n                        }\n                    })\n                }\n            >\n                Action\n            </Button>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        action: {\n                            label: 'View',\n                            onClick: () => alert('Viewed')\n                        },\n                        cancel: {\n                            label: 'Cancel',\n                            onClick: () => alert('Cancelled')\n                        }\n                    })\n                }\n            >\n                Do or Not\n            </Button>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        cancel: {\n                            label: 'Cancel',\n                            onClick: () => alert('Cancelled')\n                        }\n                    })\n                }\n            >\n                Cancel\n            </Button>\n        </div>\n    )\n}\n"
  },
  "statuses/toast/toast-positions-demo": {
    "component": "@/components/docs/statuses/toast/toast-positions-demo",
    "raw": "'use client'\n\nimport { toast, type ToastT } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nconst positions: ToastT['position'][] = [\n    'top-left',\n    'top-right',\n    'bottom-left',\n    'bottom-right',\n    'top-center',\n    'bottom-center'\n]\n\nexport default function ToastPositionsDemo() {\n    return (\n        <div className='grid grid-cols-2 sm:grid-cols-3 gap-4'>\n            {positions.map((position) => (\n                <Button\n                    variant='outline'\n                    size='sm'\n                    key={position}\n                    onPress={() =>\n                        toast('The registration is successful, click here to continue.', {\n                            position\n                        })\n                    }\n                >\n                    {position}\n                </Button>\n            ))}\n        </div>\n    )\n}\n"
  },
  "statuses/note/note-demo": {
    "component": "@/components/docs/statuses/note/note-demo",
    "raw": "'use client'\n\nimport { Note } from '@/components/ui'\n\nexport default function NoteDemo() {\n    return (\n        <Note>\n            We hook you up with top-tier migration services in our startup plan. Wanna roll with it?\n            Hit us up here.\n        </Note>\n    )\n}\n"
  },
  "statuses/note/note-variant-demo": {
    "component": "@/components/docs/statuses/note/note-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Key } from 'react-aria-components'\n\nimport { Note, NoteProps, Select } from '@/components/ui'\n\nconst notes = ['info', 'primary', 'secondary', 'warning', 'danger', 'success'].map((n) => ({\n    name: n,\n    value: n\n}))\n\nexport default function NoteIntentDemo() {\n    const [selected, setSelected] = React.useState<Key>('primary')\n    return (\n        <>\n            <div className='absolute left-4 top-4 inline-flex min-w-32 flex-col gap-1'>\n                <Select\n                    className='[&_button]:h-9'\n                    selectedKey={selected}\n                    onSelectionChange={setSelected}\n                    placeholder='Choose an intent'\n                    items={notes}\n                >\n                    {(item) => (\n                        <Select.Item id={item.name} textValue={item.name}>\n                            {item.name}\n                        </Select.Item>\n                    )}\n                </Select>\n            </div>\n            <div className='max-w-md'>\n                <Note variant={selected as NoteProps['variant']}>\n                    We hook you up with top-tier migration services in our startup plan. Wanna roll\n                    with it? Hit us up here.\n                </Note>\n            </div>\n        </>\n    )\n}\n"
  },
  "statuses/note/note-hide-indicator-demo": {
    "component": "@/components/docs/statuses/note/note-hide-indicator-demo",
    "raw": "'use client'\n\nimport { Note } from '@/components/ui'\n\nexport default function NoteHideIndicatorDemo() {\n    return (\n        <>\n            <Note hideIndicator>\n                You need to be careful with this note. This is a note without indicator.\n            </Note>\n        </>\n    )\n}\n"
  },
  "statuses/meter/meter-decimal-format-demo": {
    "component": "@/components/docs/statuses/meter/meter-decimal-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDecimalFormatDemo() {\n    return (\n        <Meter\n            formatOptions={{\n                style: 'decimal',\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }}\n            label='Progress'\n            value={75.25}\n        />\n    )\n}\n"
  },
  "statuses/meter/meter-demo": {
    "component": "@/components/docs/statuses/meter/meter-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDemo() {\n    const [value, setValue] = React.useState(0)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return <Meter label='Storage space' value={value} />\n}\n"
  },
  "statuses/meter/meter-currency-format-demo": {
    "component": "@/components/docs/statuses/meter/meter-currency-format-demo",
    "raw": "'use client'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterCurrencyFormatDemo() {\n    return (\n        <Meter label='Revenue' formatOptions={{ style: 'currency', currency: 'USD' }} value={15} />\n    )\n}\n"
  },
  "statuses/progress-bar/progress-bar-indeterminate-demo": {
    "component": "@/components/docs/statuses/progress-bar/progress-bar-indeterminate-demo",
    "raw": "'use client'\n\nimport { ProgressBar } from '@/components/ui'\n\nexport default function ProgressBarIndeterminateDemo() {\n    return <ProgressBar label='Loading…' isIndeterminate />\n}\n"
  },
  "statuses/progress-bar/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress-bar/progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressBar } from '@/components/ui'\n\nexport default function ProgressBarDemo() {\n    const [value, setValue] = React.useState(0)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 200)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <ProgressBar label='Loading…' value={value} />\n}\n"
  },
  "statuses/loader/loader-demo": {
    "component": "@/components/docs/statuses/loader/loader-demo",
    "raw": "'use client'\n\nimport { Loader } from '@/components/ui'\n\nexport default function LoaderDemo() {\n    return <Loader />\n}\n"
  },
  "statuses/loader/loader-color-demo": {
    "component": "@/components/docs/statuses/loader/loader-color-demo",
    "raw": "'use client'\n\nimport { Loader } from '@/components/ui'\n\nexport default function LoaderColorDemo() {\n    return (\n        <div className='flex gap-6'>\n            <Loader variant='spin' size='md' color='current' />\n            <Loader variant='spin' size='md' color='primary' />\n            <Loader variant='spin' size='md' color='secondary' />\n            <Loader variant='spin' size='md' color='success' />\n            <Loader variant='spin' size='md' color='warning' />\n            <Loader variant='spin' size='md' color='danger' />\n        </div>\n    )\n}\n"
  },
  "statuses/loader/loader-size-demo": {
    "component": "@/components/docs/statuses/loader/loader-size-demo",
    "raw": "'use client'\n\nimport { Loader } from '@/components/ui'\n\nexport default function LoaderSizeDemo() {\n    return (\n        <div className='flex gap-6'>\n            <Loader size='sm' />\n            <Loader size='md' />\n            <Loader size='lg' />\n            <Loader size='xl' />\n        </div>\n    )\n}\n"
  },
  "statuses/loader/loader-variant-demo": {
    "component": "@/components/docs/statuses/loader/loader-variant-demo",
    "raw": "'use client'\n\nimport { Loader } from '@/components/ui'\n\nexport default function LoaderVariantDemo() {\n    return (\n        <div className='flex gap-6'>\n            <Loader variant='ring' />\n            <Loader variant='spin' />\n            <Loader variant='bars' />\n        </div>\n    )\n}\n"
  },
  "statuses/skeleton/skeleton-demo": {
    "component": "@/components/docs/statuses/skeleton/skeleton-demo",
    "raw": "'use client'\n\nimport { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton shape='circle' className='size-6' />\n                <div className='space-y-1'>\n                    <Skeleton className='h-3 w-56' />\n                    <Skeleton className='h-3 w-10' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/skeleton/skeleton-variant-demo": {
    "component": "@/components/docs/statuses/skeleton/skeleton-variant-demo",
    "raw": "'use client'\n\nimport { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonVariantDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton variant='lighter' className='size-8' />\n                <div className='space-y-1'>\n                    <Skeleton variant='muted' className='h-3.5 w-20' />\n                    <Skeleton variant='muted' className='h-3.5 w-48' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/skeleton/skeleton-shape-demo": {
    "component": "@/components/docs/statuses/skeleton/skeleton-shape-demo",
    "raw": "'use client'\n\nimport { Card, Skeleton } from '@/components/ui'\n\nexport default function SkeletonShapeDemo() {\n    return (\n        <Card className='p-4'>\n            <div className='flex gap-2'>\n                <Skeleton variant='lighter' shape='circle' className='size-8' />\n                <div className='space-y-1'>\n                    <Skeleton variant='muted' shape='circle' className='h-4 w-56' />\n                    <Skeleton variant='muted' shape='circle' className='h-4 w-10' />\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
  },
  "statuses/progress-circle/progress-circle-color-demo": {
    "component": "@/components/docs/statuses/progress-circle/progress-circle-color-demo",
    "raw": "'use client'\n\nimport { ProgressCircle } from '@/components/ui'\n\nexport default function ProgressCircleColorDemo() {\n    return (\n        <div className='flex gap-2'>\n            <ProgressCircle isIndeterminate className='text-danger' />\n            <ProgressCircle isIndeterminate className='text-primary' />\n            <ProgressCircle isIndeterminate className='text-warning' />\n        </div>\n    )\n}\n"
  },
  "statuses/progress-circle/progress-circle-demo": {
    "component": "@/components/docs/statuses/progress-circle/progress-circle-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressCircle } from '@/components/ui'\n\nexport default function ProgressCircleDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <ProgressCircle aria-label='Loading…' value={value} />\n}\n"
  },
  "statuses/progress-circle/progress-circle-indeterminate-demo": {
    "component": "@/components/docs/statuses/progress-circle/progress-circle-indeterminate-demo",
    "raw": "'use client'\n\nimport { ProgressCircle } from '@/components/ui'\n\nexport default function ProgressCircleIndeterminateDemo() {\n    return <ProgressCircle aria-label='Loading…' isIndeterminate />\n}\n"
  },
  "statuses/progress-circle/progress-circle-custom-size-demo": {
    "component": "@/components/docs/statuses/progress-circle/progress-circle-custom-size-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressCircle } from '@/components/ui'\n\nexport default function ProgressCircleCustomSizeDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 100)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return (\n        <ProgressCircle className='size-10' aria-label='Loading…' isIndeterminate value={value} />\n    )\n}\n"
  },
  "statuses/progress-circle/progress-circle-controlled-demo": {
    "component": "@/components/docs/statuses/progress-circle/progress-circle-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressCircle, Slider } from '@/components/ui'\n\nexport default function ProgressCircleControlledDemo() {\n    const [value, setValue] = React.useState(10)\n\n    return (\n        <div className='flex flex-col items-center gap-y-6 min-w-56'>\n            <ProgressCircle className='size-10' value={value} />\n            <Slider label='Track' value={value} onChange={(v) => setValue(v as number)} />\n        </div>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-current-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-current-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsCurrentDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Components</Breadcrumbs.Item>\n            <Breadcrumbs.Item\n                className={({ isCurrent }) => (isCurrent ? 'text-primary' : 'text-secondary')}\n            >\n                Navbar\n            </Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-collections-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-collections-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsCollectionsDemo() {\n    const [breadcrumbs, setBreadcrumbs] = React.useState([\n        { id: 1, label: 'Dashboard', href: '#' },\n        { id: 2, label: 'Reports', href: '#' },\n        { id: 3, label: '2024 Quarterly Review' }\n    ])\n\n    const navigate = (id: Key) => {\n        const i = breadcrumbs.findIndex((item) => item.id === id)\n        setBreadcrumbs(breadcrumbs.slice(0, i + 1))\n    }\n    return (\n        <Breadcrumbs items={breadcrumbs} onAction={navigate}>\n            {(item) => <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>}\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-menu-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-menu-demo",
    "raw": "'use client'\n\nimport { IconEllipsis } from 'hq-icons'\n\nimport { Breadcrumbs, Menu } from '@/components/ui'\n\nexport default function BreadcrumbsMenuDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n\n            <Breadcrumbs.Item separator>\n                <Menu>\n                    <Menu.Trigger>\n                        <IconEllipsis />\n                    </Menu.Trigger>\n                    <Menu.Content placement='bottom'>\n                        <Menu.Item href='/docs/components/layouts/sidebar'>Sidebar</Menu.Item>\n                        <Menu.Item href='/docs/components/controls/toolbar'>Toolbar</Menu.Item>\n                        <Menu.Item href='/docs/components/collections/menu'>Menu</Menu.Item>\n                        <Menu.Item href='/docs/components/layouts/container'>Container</Menu.Item>\n                        <Menu.Item href='/docs/components/surfaces/chart'>Chart</Menu.Item>\n                        <Menu.Item href='/docs/components/collections/table'>Table</Menu.Item>\n                        <Menu.Item href='/docs/components/overlays/modal'>Modal</Menu.Item>\n                    </Menu.Content>\n                </Menu>\n            </Breadcrumbs.Item>\n\n            <Breadcrumbs.Item>Navbar</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsDemo() {\n    return (\n        <Breadcrumbs onAction={() => {}}>\n            <Breadcrumbs.Item href='#'>Home</Breadcrumbs.Item>\n            <Breadcrumbs.Item href='#'>Design System</Breadcrumbs.Item>\n            <Breadcrumbs.Item>Collections</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/breadcrumbs/breadcrumbs-separator-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-separator-demo",
    "raw": "'use client'\n\nimport { Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsSeparatorDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumbs.Item separator='slash' href='#'>\n                Home\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item separator='slash' href='#'>\n                Design System\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item>Collections</Breadcrumbs.Item>\n        </Breadcrumbs>\n    )\n}\n"
  },
  "navigation/pagination/simple-pagination-demo": {
    "component": "@/components/docs/navigation/pagination/simple-pagination-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nexport default function SimplePaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.List>\n                <Pagination.Item role='first' href='#' />\n                <Pagination.Item role='previous' href='#' />\n                <Pagination.Section aria-label='Pagination Segment' className='rounded-lg border'>\n                    <Pagination.Item role='label'>1</Pagination.Item>\n                    <Pagination.Item role='separator' />\n                    <Pagination.Item className='text-muted-fg' role='label'>\n                        10\n                    </Pagination.Item>\n                </Pagination.Section>\n                <Pagination.Item role='next' href='#' />\n                <Pagination.Item role='last' href='#' />\n            </Pagination.List>\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nexport default function PaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.List>\n                <Pagination.Item role='first' href='#' />\n                <Pagination.Item role='previous' href='#' />\n                <Pagination.Item href='#'>1</Pagination.Item>\n                <Pagination.Item href='#' isCurrent>\n                    2\n                </Pagination.Item>\n                <Pagination.Item role='ellipsis' />\n                <Pagination.Item role='next' href='#' />\n                <Pagination.Item role='last' href='#' />\n            </Pagination.List>\n        </Pagination>\n    )\n}\n"
  },
  "navigation/pagination/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-dynamic-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nconst pages = Array.from({ length: 6 }, (_, i) => ({ value: i + 1 }))\nexport default function PaginationDynamicDemo() {\n    return (\n        <Pagination>\n            <Pagination.List>\n                <Pagination.Item role='first' href='#' />\n                <Pagination.Item role='previous' href='#' />\n                <Pagination.Section\n                    aria-label='Pagination Segment'\n                    className='rounded-lg border lg:hidden'\n                >\n                    <Pagination.Item role='label'>1</Pagination.Item>\n                    <Pagination.Item role='separator' />\n                    <Pagination.Item className='text-muted-fg' role='label'>\n                        10\n                    </Pagination.Item>\n                </Pagination.Section>\n                <Pagination.Section\n                    aria-label='Pagination Segment'\n                    className='hidden lg:flex'\n                    items={pages}\n                >\n                    {(item) => (\n                        <Pagination.Item\n                            id={item.value.toString()}\n                            isCurrent={item.value === 4}\n                            href='#'\n                        >\n                            {item.value}\n                        </Pagination.Item>\n                    )}\n                </Pagination.Section>\n                <Pagination.Item role='next' href='#' />\n                <Pagination.Item role='last' href='#' />\n            </Pagination.List>\n        </Pagination>\n    )\n}\n"
  },
  "navigation/link/link-disabled-demo": {
    "component": "@/components/docs/navigation/link/link-disabled-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDisabledDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Link isDisabled variant='default' href='#variant-3'>\n                Default\n            </Link>\n            <Link isDisabled variant='unstyled' href='#variant-5'>\n                Unstyled\n            </Link>\n            <Link isDisabled variant='primary' href='#variant-1'>\n                Primary\n            </Link>\n            <Link isDisabled variant='danger' href='#variant-4'>\n                Danger\n            </Link>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-button-demo": {
    "component": "@/components/docs/navigation/link/link-button-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Link } from '@/components/ui'\n\nexport default function LinkButtonDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Link className={buttonStyles()} href='#use-as-button'>\n                Link\n            </Link>\n            <Link className={buttonStyles({ variant: 'outline' })} href='#use-as-button'>\n                Link\n            </Link>\n            <Link\n                className={buttonStyles({ variant: 'ghost', shape: 'circle' })}\n                href='#use-as-button'\n            >\n                Link\n            </Link>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-variant-demo": {
    "component": "@/components/docs/navigation/link/link-variant-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkVariantDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Link variant='default' href='#variant-3'>\n                Default\n            </Link>\n            <Link variant='unstyled' href='#variant-5'>\n                Unstyled\n            </Link>\n            <Link variant='primary' href='#variant-1'>\n                Primary\n            </Link>\n            <Link variant='danger' href='#variant-4'>\n                Danger\n            </Link>\n        </div>\n    )\n}\n"
  },
  "navigation/link/link-unstyled-demo": {
    "component": "@/components/docs/navigation/link/link-unstyled-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkUnstyledDemo() {\n    return (\n        <Link variant='unstyled' href='#unstyled'>\n            Unstyled Link\n        </Link>\n    )\n}\n"
  },
  "navigation/link/link-demo": {
    "component": "@/components/docs/navigation/link/link-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDemo() {\n    return <Link href='#basic'>This is Link</Link>\n}\n"
  },
  "navigation/tabs/tabs-collections-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-collections-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\n\nimport { Tabs } from '@/components/ui'\n\nconst tabs = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsCollectionsDemo() {\n    return (\n        <Tabs aria-label='Project Management'>\n            <Tabs.List aria-label='Dynamic tabs' items={tabs}>\n                {(item) => <Tabs.Label>{item.title}</Tabs.Label>}\n            </Tabs.List>\n\n            <Collection items={tabs}>\n                {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n            </Collection>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-disabled-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-disabled-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDisabledDemo() {\n    return (\n        <Tabs disabledKeys={['c', 'a']} aria-label='Services'>\n            <Tabs.List>\n                <Tabs.Label id='o'>Overview</Tabs.Label>\n                <Tabs.Label id='c'>Contact</Tabs.Label>\n                <Tabs.Label id='a'>About Us</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='o'>\n                Welcome to our service! Here, you’ll find a brief overview of what we offer, our\n                mission, and how we strive to provide value to our customers.\n            </Tabs.Content>\n            <Tabs.Content id='c'>\n                Get in touch with us through our contact page. We are here to help you with any\n                inquiries, support requests, or feedback you may have.\n            </Tabs.Content>\n            <Tabs.Content id='a'>\n                Learn more about our company, our history, and the team behind our success. We are\n                dedicated to delivering the best service to our customers.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-icons-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-icons-demo",
    "raw": "'use client'\n\nimport { IconApple, IconClock, IconScissors } from 'hq-icons'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsIconsDemo() {\n    return (\n        <Tabs aria-label='Fitness App'>\n            <Tabs.List>\n                <Tabs.Label id='w'>\n                    <IconScissors /> Workouts\n                </Tabs.Label>\n                <Tabs.Label id='n'>\n                    <IconApple /> Nutrition\n                </Tabs.Label>\n                <Tabs.Label id='t'>\n                    <IconClock /> Tracker\n                </Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='w'>\n                Find a variety of workout plans tailored to your fitness level and goals.\n            </Tabs.Content>\n            <Tabs.Content id='n'>\n                Get nutrition tips and meal plans to complement your fitness journey.\n            </Tabs.Content>\n            <Tabs.Content id='t'>\n                Track your progress with detailed statistics and analytics.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsOrientationDemo() {\n    return (\n        <Tabs orientation='vertical' aria-label='E-Learning Platform'>\n            <Tabs.List>\n                <Tabs.Label id='c'>Courses</Tabs.Label>\n                <Tabs.Label id='e'>Exams</Tabs.Label>\n                <Tabs.Label id='g'>Grades</Tabs.Label>\n                <Tabs.Label id='f'>Forums</Tabs.Label>\n                <Tabs.Label id='p'>Profile</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='c'>\n                Enroll in courses and access learning materials on various subjects.\n            </Tabs.Content>\n            <Tabs.Content id='e'>\n                Take practice exams and quizzes to test your knowledge.\n            </Tabs.Content>\n            <Tabs.Content id='g'>View your grades and track your academic progress.</Tabs.Content>\n            <Tabs.Content id='f'>\n                Participate in discussion forums with other students and instructors.\n            </Tabs.Content>\n            <Tabs.Content id='p'>\n                Update your profile and customize your learning preferences.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-link-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-link-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nconst navs = [\n    { url: '/', label: 'Home' },\n    { url: '/docs/getting-started/introduction', label: 'Docs' },\n    { url: '/components', label: 'Components' },\n    { url: 'https://hq-ui.vercel.app/icons', label: 'Icons' }\n]\n\nexport default function TabsLinkDemo() {\n    return (\n        <Tabs aria-label='Navbar'>\n            <Tabs.List items={navs}>\n                {(item) => (\n                    <Tabs.Label id={item.label} href={item.url}>\n                        {item.label}\n                    </Tabs.Label>\n                )}\n            </Tabs.List>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDemo() {\n    return (\n        <Tabs aria-label='Recipe App'>\n            <Tabs.List>\n                <Tabs.Label id='r'>Recipes</Tabs.Label>\n                <Tabs.Label id='i'>Ingredients</Tabs.Label>\n                <Tabs.Label id='m'>Meal Plans</Tabs.Label>\n                <Tabs.Label id='v'>Videos</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='r'>\n                Browse through a wide selection of recipes for all occasions and dietary\n                preferences.\n            </Tabs.Content>\n            <Tabs.Content id='i'>\n                Check the list of ingredients needed for your chosen recipes.\n            </Tabs.Content>\n            <Tabs.Content id='m'>\n                Discover curated meal plans to simplify your weekly cooking.\n            </Tabs.Content>\n            <Tabs.Content id='v'>\n                Watch cooking videos to learn new techniques and recipes.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n"
  },
  "navigation/tabs/tabs-responsive-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-responsive-demo",
    "raw": "'use client'\n\nimport { IconMenu } from 'hq-icons'\nimport { Collection } from 'react-aria-components'\n\nimport { Select, Tabs, useMediaQuery } from '@/components/ui'\n\nconst tabs = [\n    { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n    { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n    { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n    { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' },\n    { id: 5, title: 'Support', content: 'Contact our support team on this tab.' },\n    { id: 6, title: 'Guarantee', content: 'Our satisfaction guarantee details are here.' },\n    { id: 7, title: 'FAQ', content: 'Frequently asked questions are answered here.' }\n]\n\nexport default function TabsResponsiveDemo() {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n    return isMobile ? (\n        <Select className='sm:hidden flex' prefix={<IconMenu />} items={tabs}>\n            {(item) => <Select.Item textValue={item.title}>{item.title}</Select.Item>}\n        </Select>\n    ) : (\n        <Tabs className='sm:flex hidden' aria-label='Project Management'>\n            <Tabs.List aria-label='Dynamic tabs' items={tabs}>\n                {(item) => <Tabs.Label>{item.title}</Tabs.Label>}\n            </Tabs.List>\n            <Collection items={tabs}>\n                {(item) => <Tabs.Content key={item.id}>{item.content}</Tabs.Content>}\n            </Collection>\n        </Tabs>\n    )\n}\n"
  },
  "forms/form-demo": {
    "component": "@/components/docs/forms/form-demo",
    "raw": "'use client'\n\nimport { Button, Form, Heading, TextField } from '@/components/ui'\n\nexport default function FormDemo() {\n    return (\n        <div className='mx-auto max-w-md py-10'>\n            <Heading level={2} className='mb-4'>\n                Register\n            </Heading>\n            <Form onSubmit={() => {}} className='space-y-4'>\n                <TextField isRequired label='Name' placeholder='Enter your name' />\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <div className='grid grid-cols-2 gap-4'>\n                    <TextField\n                        isRequired\n                        label='Password'\n                        placeholder='Enter your password'\n                        type='password'\n                    />\n                    <TextField\n                        isRequired\n                        label='Confirm Password'\n                        placeholder='Enter your password again'\n                        type='password'\n                    />\n                </div>\n                <Button type='submit'>Submit</Button>\n            </Form>\n        </div>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-invalid-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-invalid-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupInvalidDemo() {\n    return (\n        <RadioGroup isInvalid label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-orientation-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-orientation-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupOrientationDemo() {\n    return (\n        <RadioGroup orientation='horizontal' label='Payment Method'>\n            <Radio value='credit-card'>Credit Card</Radio>\n            <Radio value='paypal'>PayPal</Radio>\n            <Radio value='apple-pay'>Apple Pay</Radio>\n            <Radio value='google-pay'>Google Pay</Radio>\n            <Radio value='bank-transfer'>Bank Transfer</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDemo() {\n    return (\n        <RadioGroup label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-children-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-children-description-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupChildrenDescriptionDemo() {\n    return (\n        <RadioGroup>\n            <Radio value='basic' description='Basic plan with limited features'>\n                Basic\n            </Radio>\n            <Radio value='standard' description='Standard plan with more features'>\n                Standard\n            </Radio>\n            <Radio value='premium' description='Premium plan with all features'>\n                Premium\n            </Radio>\n            <Radio value='family' description='Family plan for multiple users'>\n                Family\n            </Radio>\n            <Radio value='student' description='Discounted plan for students'>\n                Student\n            </Radio>\n            <Radio value='custom'>Custom</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = React.useState('')\n    return (\n        <>\n            <RadioGroup label='Features' value={selected} onChange={setSelected}>\n                <Radio value='theme'>Theme</Radio>\n                <Radio value='language'>Language</Radio>\n                <Radio value='timezone'>Timezone</Radio>\n                <Radio value='notifications'>Notifications</Radio>\n                <Radio value='privacy'>Privacy</Radio>\n            </RadioGroup>\n            <Description className='[&>strong]:text-fg mt-2 block'>\n                You have selected: <strong>{selected ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-disabled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-disabled-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDisabledDemo() {\n    return (\n        <RadioGroup isDisabled label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/radio-group/radio-group-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-description-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDescriptionDemo() {\n    return (\n        <RadioGroup\n            description='Select your preferred shipping method for the delivery of your items.'\n            label='Shipping Method'\n        >\n            <Radio value='standard'>Standard</Radio>\n            <Radio value='express'>Express</Radio>\n            <Radio value='overnight'>Overnight</Radio>\n            <Radio value='international'>International</Radio>\n            <Radio value='pickup'>Pickup</Radio>\n        </RadioGroup>\n    )\n}\n"
  },
  "forms/form-validation-demo": {
    "component": "@/components/docs/forms/form-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function FormValidationDemo() {\n    return (\n        <Form onSubmit={() => {}}>\n            <TextField label='Name' isRequired className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/text-field/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, TextField } from '@/components/ui'\n\nexport default function TextFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <TextField value={value} onChange={setValue} label='Name' className='mb-2' />\n            <Description className='[&>strong]:text-fg mt-2 block'>\n                You have typed: <strong>{value ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/text-field/text-field-readonly-demo": {
    "component": "@/components/docs/forms/text-field/text-field-readonly-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldReadonlyDemo() {\n    return <TextField isReadOnly label='Name' />\n}\n"
  },
  "forms/text-field/text-field-suffix-button-demo": {
    "component": "@/components/docs/forms/text-field/text-field-suffix-button-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconPlus } from 'hq-icons'\n\nimport { Button, Modal, TextField } from '@/components/ui'\n\nexport default function TextFieldSuffixButtonDemo() {\n    const [open, setOpen] = React.useState(false)\n    const close = () => setOpen(false)\n    return (\n        <>\n            <Modal.Content isOpen={open} onOpenChange={close}>\n                <Modal.Header>\n                    <Modal.Title>New User</Modal.Title>\n                    <Modal.Description>Create a new user account</Modal.Description>\n                </Modal.Header>\n                <Modal.Body className='flex flex-col gap-4'>\n                    <TextField label='Username' placeholder='Username' />\n                    <TextField label='Email' placeholder='Email' type='email' />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Modal.Close variant='outline'>Cancel</Modal.Close>\n                    <Button onPress={close}>Continue</Button>\n                </Modal.Footer>\n            </Modal.Content>\n            <TextField\n                label='Username'\n                suffix={\n                    <Button aria-label='New user' onPress={() => setOpen(true)} variant='outline'>\n                        <IconPlus />\n                    </Button>\n                }\n            />\n        </>\n    )\n}\n"
  },
  "forms/text-field/text-field-disabled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-disabled-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDisabledDemo() {\n    return <TextField isDisabled label='Name' />\n}\n"
  },
  "forms/text-field/text-field-pending-demo": {
    "component": "@/components/docs/forms/text-field/text-field-pending-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldPendingDemo() {\n    return <TextField isPending label='Name' />\n}\n"
  },
  "forms/text-field/text-field-revealable-demo": {
    "component": "@/components/docs/forms/text-field/text-field-revealable-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldRevealableDemo() {\n    return <TextField type='password' isRevealable label='Password' />\n}\n"
  },
  "forms/text-field/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field/text-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function TextFieldValidationDemo() {\n    return (\n        <Form>\n            <TextField isRequired label='Name' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/text-field/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field/text-field-prefix-suffix-demo",
    "raw": "'use client'\n\nimport { IconBrandX } from 'hq-icons'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldPrefixSuffixDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <TextField label='Twitter' suffix={<IconBrandX />} />\n            <TextField label='Sites' prefix='https://' suffix='.com' />\n        </div>\n    )\n}\n"
  },
  "forms/text-field/text-field-demo": {
    "component": "@/components/docs/forms/text-field/text-field-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDemo() {\n    return <TextField label='Name' />\n}\n"
  },
  "forms/number-field/number-field-disabled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-disabled-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDisabledDemo() {\n    return <NumberField isDisabled label='Cookies' />\n}\n"
  },
  "forms/number-field/number-field-demo": {
    "component": "@/components/docs/forms/number-field/number-field-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDemo() {\n    return <NumberField label='Cookies' />\n}\n"
  },
  "forms/number-field/number-field-controlled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, NumberField } from '@/components/ui'\n\nexport default function NumberFieldControlledDemo() {\n    const [number, setNumber] = React.useState(1280)\n    return (\n        <div>\n            <NumberField label='Width' value={number} onChange={setNumber} />\n\n            <Description className='[&>strong]:text-fg mt-2 block'>\n                You have typed: <strong>{number ?? '-'}</strong>\n            </Description>\n        </div>\n    )\n}\n"
  },
  "forms/number-field/number-field-invalid-demo": {
    "component": "@/components/docs/forms/number-field/number-field-invalid-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldInvalidDemo() {\n    return <NumberField isInvalid label='Cookies' />\n}\n"
  },
  "forms/search-field/search-field-demo": {
    "component": "@/components/docs/forms/search-field/search-field-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDemo() {\n    return <SearchField aria-label='Search' placeholder='Search' />\n}\n"
  },
  "forms/search-field/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field/search-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, SearchField } from '@/components/ui'\n\nexport default function SearchFieldValidationDemo() {\n    return (\n        <Form>\n            <SearchField isRequired label='Name' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/search-field/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, SearchField } from '@/components/ui'\n\nexport default function SearchFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <SearchField value={value} onChange={setValue} className='mb-2' />\n            <Description className='[&>strong]:text-fg mt-2 block'>\n                You have typed: <strong>{value ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/search-field/search-field-pending-demo": {
    "component": "@/components/docs/forms/search-field/search-field-pending-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDemo() {\n    return <SearchField isPending aria-label='Search' placeholder='Search' />\n}\n"
  },
  "forms/search-field/search-field-disabled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-disabled-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDisabledDemo() {\n    return <SearchField isDisabled />\n}\n"
  },
  "forms/search-field/search-field-with-label-demo": {
    "component": "@/components/docs/forms/search-field/search-field-with-label-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldWithLabelDemo() {\n    return <SearchField label='Search' />\n}\n"
  },
  "forms/tag-field/tag-field-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldDemo() {\n    const selectedItems = useListData({\n        initialItems: [\n            {\n                id: 1,\n                name: 'Laravel'\n            }\n        ]\n    })\n\n    return <TagField className='max-w-xs' label='Add tag' list={selectedItems} />\n}\n"
  },
  "forms/tag-field/tag-field-shape-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-shape-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldShapeDemo() {\n    const selectedItems = useListData({\n        initialItems: [\n            {\n                id: 1,\n                name: 'Laravel'\n            },\n            {\n                id: 2,\n                name: 'Inertia.js'\n            }\n        ]\n    })\n\n    return (\n        <div className='space-y-2'>\n            <TagField shape='rounded' className='max-w-xs' label='Rounded' list={selectedItems} />\n            <TagField shape='sharp' className='max-w-xs' label='Sharp' list={selectedItems} />\n            <TagField shape='circle' className='max-w-xs' label='Circle' list={selectedItems} />\n        </div>\n    )\n}\n"
  },
  "forms/tag-field/tag-field-disabled-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-disabled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldDisabledDemo() {\n    const selectedItems = useListData({\n        initialItems: []\n    })\n\n    return <TagField isDisabled label='Add tag' list={selectedItems} />\n}\n"
  },
  "forms/tag-field/tag-field-variant-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-variant-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldVariantDemo() {\n    const selectedItems = useListData({\n        initialItems: [\n            {\n                id: 1,\n                name: 'Laravel'\n            },\n            {\n                id: 2,\n                name: 'Inertia.js'\n            },\n            {\n                id: 3,\n                name: 'React'\n            }\n        ]\n    })\n\n    return (\n        <div className='space-y-2'>\n            <TagField variant='primary' className='max-w-xs' label='Primary' list={selectedItems} />\n            <TagField\n                variant='secondary'\n                className='max-w-xs'\n                label='Secondary'\n                list={selectedItems}\n            />\n            <TagField variant='dark' className='max-w-xs' label='Dark' list={selectedItems} />\n        </div>\n    )\n}\n"
  },
  "forms/tag-field/tag-field-max-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-max-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { TagField } from '@/components/ui'\n\nexport default function TagFieldMaxDemo() {\n    const selectedItems = useListData({\n        initialItems: []\n    })\n\n    return (\n        <TagField\n            className='max-w-sm'\n            max={3}\n            label='Add tag'\n            description='You can only add 3 tags'\n            list={selectedItems}\n        />\n    )\n}\n"
  },
  "forms/tag-field/tag-field-controlled-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-controlled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Description, TagField } from '@/components/ui'\n\nexport default function TagFieldControlledDemo() {\n    const selectedItems = useListData({\n        initialItems: [{ id: 1, name: 'Ferrari' }]\n    })\n\n    return (\n        <div className='max-w-xs'>\n            <TagField\n                variant='primary'\n                label='Add tag'\n                onItemInserted={(key) => console.log('on item inserted', key)}\n                onItemCleared={(key) => console.log('on item cleared', key)}\n                description='You can add multiple tags'\n                list={selectedItems}\n            />\n            <Description className='[&>strong]:text-fg [&>strong]:text-medium mt-4 block max-w-xs'>\n                {JSON.stringify(selectedItems.items)}\n            </Description>\n        </div>\n    )\n}\n"
  },
  "forms/rich-text-field/rich-text-field-disabled-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-disabled-demo",
    "raw": "'use client'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldDemo() {\n    return <RichTextField isDisabled label='Content (Disabled)' />\n}\n"
  },
  "forms/rich-text-field/rich-text-field-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-demo",
    "raw": "'use client'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldDemo() {\n    return <RichTextField label='Content' />\n}\n"
  },
  "forms/rich-text-field/rich-text-field-controlled-html-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-controlled-html-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldControlledMarkdownDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <RichTextField\n                returnType='html'\n                value={value}\n                onChange={setValue}\n                label='Content'\n                className='mb-2'\n            />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/rich-text-field/rich-text-field-controlled-markdown-demo": {
    "component": "@/components/docs/forms/rich-text-field/rich-text-field-controlled-markdown-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { RichTextField } from '@/components/ui'\n\nexport default function RichTextFieldControlledMarkdownDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <RichTextField\n                returnType='markdown'\n                value={value}\n                onChange={setValue}\n                label='Content'\n                className='mb-2'\n            />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/otp/otp-separator-demo": {
    "component": "@/components/docs/forms/otp/otp-separator-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpSeparatorDemo() {\n    return (\n        <OTP maxLength={6}>\n            <OTP.Group>\n                <OTP.Slot index={0} />\n                <OTP.Slot index={1} />\n                <OTP.Slot index={2} />\n            </OTP.Group>\n            <OTP.Separator />\n            <OTP.Group>\n                <OTP.Slot index={3} />\n                <OTP.Slot index={4} />\n                <OTP.Slot index={5} />\n            </OTP.Group>\n        </OTP>\n    )\n}\n"
  },
  "forms/otp/otp-controlled-demo": {
    "component": "@/components/docs/forms/otp/otp-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <div className='space-y-2'>\n            <OTP maxLength={6} value={value} onChange={setValue}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot key={index} index={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n\n            <div className='text-center text-sm'>\n                {value === '' ? <>Enter your one-time password.</> : <>You entered: {value}</>}\n            </div>\n        </div>\n    )\n}\n"
  },
  "forms/otp/otp-demo": {
    "component": "@/components/docs/forms/otp/otp-demo",
    "raw": "'use client'\n\nimport { OTP } from '@/components/ui'\n\nexport default function InputOtpDemo() {\n    return (\n        <div>\n            <OTP maxLength={6}>\n                <OTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <OTP.Slot key={index} index={index} />\n                    ))}\n                </OTP.Group>\n            </OTP>\n        </div>\n    )\n}\n"
  },
  "forms/textarea/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <Textarea value={value} onChange={setValue} label='Address' className='mb-2' />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n"
  },
  "forms/textarea/textarea-readonly-demo": {
    "component": "@/components/docs/forms/textarea/textarea-readonly-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaReadonlyDemo() {\n    return <Textarea isReadOnly label='Address' />\n}\n"
  },
  "forms/textarea/textarea-demo": {
    "component": "@/components/docs/forms/textarea/textarea-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaDemo() {\n    return <Textarea label='Address' />\n}\n"
  },
  "forms/textarea/textarea-disabled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-disabled-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaDisabledDemo() {\n    return <Textarea isDisabled label='Address' />\n}\n"
  },
  "forms/textarea/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea/textarea-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, Textarea } from '@/components/ui'\n\nexport default function TextareaValidationDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <Textarea\n                value={value}\n                onChange={setValue}\n                label='Address'\n                isRequired\n                className='mb-2'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-group-indeterminate-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-indeterminate-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupIndeterminateDemo() {\n    return (\n        <CheckboxGroup defaultValue={['encryption']} className='ml-6'>\n            <Checkbox\n                isIndeterminate\n                value='encryption'\n                description='Enable encryption.'\n                isReadOnly\n            >\n                Encryption\n            </Checkbox>\n            <Checkbox value='firewall' description='Enable firewall protection.'>\n                Firewall\n            </Checkbox>\n            <Checkbox value='backup' description='Enable automatic backups.'>\n                Backup\n            </Checkbox>\n            <Checkbox\n                isIndeterminate\n                value='anomalyDetection'\n                description='Enable anomaly detection.'\n            >\n                Anomaly Detection\n            </Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDemo() {\n    return <Checkbox>Enable notifications</Checkbox>\n}\n"
  },
  "forms/checkbox/checkbox-group-validation-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-validation-demo",
    "raw": "'use client'\n\nimport { Button, Checkbox, CheckboxGroup, Form } from '@/components/ui'\n\nexport default function CheckboxValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <CheckboxGroup className='mb-4' label='Settings' isRequired>\n                <Checkbox value='notifications'>Enable notifications</Checkbox>\n                <Checkbox value='auto_update'>Auto-update applications</Checkbox>\n                <Checkbox value='dark_mode'>Enable dark mode</Checkbox>\n                <Checkbox value='location_access'>Allow location access</Checkbox>\n                <Checkbox value='two_factor_auth'>Enable two-factor authentication</Checkbox>\n            </CheckboxGroup>\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-disabled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-disabled-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDisabledDemo() {\n    return <Checkbox isDisabled>Enable notifications</Checkbox>\n}\n"
  },
  "forms/checkbox/checkbox-description-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-description-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDescriptionDemo() {\n    return <Checkbox label='Postal Mail' description='Receive notifications via postal mail' />\n}\n"
  },
  "forms/checkbox/checkbox-group-controlled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, CheckboxGroup, Description } from '@/components/ui'\n\nexport default function CheckboxGroupControlledDemo() {\n    const [values, setValues] = React.useState<string[]>([])\n    return (\n        <>\n            <CheckboxGroup value={values} onChange={setValues} label='Options'>\n                <Checkbox value='sound'>Sound</Checkbox>\n                <Checkbox value='wifi'>Wi-Fi</Checkbox>\n                <Checkbox value='sync'>Sync</Checkbox>\n            </CheckboxGroup>\n\n            <Description className='[&>strong]:text-fg mt-2 flex h-10 flex-col gap-y-1 [&>strong]:font-medium'>\n                {values.length > 0 ? (\n                    <>\n                        Selected values <strong className='font-medium'>{values.join(', ')}</strong>\n                    </>\n                ) : (\n                    'No values selected'\n                )}\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, Description } from '@/components/ui'\n\nexport default function CheckboxControlledDemo() {\n    const [selected, setSelection] = React.useState(false)\n    return (\n        <>\n            <Checkbox isSelected={selected} onChange={setSelection} value='updates'>\n                Receive Updates\n            </Checkbox>\n            <Description className='[&>strong]:text-fg mt-2 block'>\n                You have <strong>{selected ? 'enabled' : 'disabled'}</strong> the option.\n            </Description>\n        </>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-invalid-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-invalid-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxInvalidDemo() {\n    return <Checkbox isInvalid>Enable notifications</Checkbox>\n}\n"
  },
  "forms/checkbox/checkbox-group-disabled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-disabled-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxDisabledDemo() {\n    return (\n        <CheckboxGroup isDisabled label='Settings'>\n            <Checkbox value='notifications'>Enable notifications</Checkbox>\n            <Checkbox value='auto_update'>Auto-update applications</Checkbox>\n            <Checkbox value='dark_mode'>Enable dark mode</Checkbox>\n            <Checkbox value='location_access'>Allow location access</Checkbox>\n            <Checkbox value='two_factor_auth'>Enable two-factor authentication</Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-group-description-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-description-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDescriptionDemo() {\n    return (\n        <CheckboxGroup\n            label='User Permissions'\n            description='Select the permissions you want to grant to the user.'\n        >\n            <Checkbox value='read'>Read</Checkbox>\n            <Checkbox value='write'>Write</Checkbox>\n            <Checkbox value='delete'>Delete</Checkbox>\n            <Checkbox value='admin'>Admin</Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDemo() {\n    return (\n        <CheckboxGroup label='Settings'>\n            <Checkbox value='notifications'>Enable notifications</Checkbox>\n            <Checkbox value='auto_update'>Auto-update applications</Checkbox>\n            <Checkbox value='dark_mode'>Enable dark mode</Checkbox>\n            <Checkbox value='location_access'>Allow location access</Checkbox>\n            <Checkbox value='two_factor_auth'>Enable two-factor authentication</Checkbox>\n        </CheckboxGroup>\n    )\n}\n"
  },
  "forms/checkbox/checkbox-indeterminate-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-indeterminate-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxIndeterminateDemo() {\n    return (\n        <Checkbox value='read' isIndeterminate>\n            Read\n        </Checkbox>\n    )\n}\n"
  },
  "color-slider": {
    "component": "@/components/ui/color-slider",
    "raw": "'use client'\n\nimport {\n    ColorSlider as ColorSliderPrimitive,\n    type ColorSliderProps as ColorSliderPrimitiveProps,\n    SliderOutput,\n    SliderTrack\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { ColorThumb } from './color-thumb'\nimport { Label } from './field'\nimport { cr } from './utils'\n\nconst trackStyles = tv({\n    base: 'group col-span-2 rounded-lg',\n    variants: {\n        orientation: {\n            horizontal: 'h-6 w-full',\n            vertical: 'h-56 w-6'\n        },\n        isDisabled: {\n            true: 'bg-muted opacity-75'\n        }\n    }\n})\n\ninterface ColorSliderProps extends ColorSliderPrimitiveProps {\n    label?: string\n    showOutput?: boolean\n}\n\nconst colorSliderStyles = tv({\n    base: 'group relative gap-2',\n    variants: {\n        orientation: {\n            horizontal: 'grid min-w-56 grid-cols-[1fr_auto]',\n            vertical: 'flex flex-col items-center justify-center'\n        },\n        isDisabled: {\n            true: 'bg-muted opacity-75'\n        }\n    }\n})\nconst ColorSlider = ({ showOutput = true, label, className, ...props }: ColorSliderProps) => {\n    return (\n        <ColorSliderPrimitive\n            {...props}\n            data-slot='color-slider'\n            className={cr(className, (className, renderProps) =>\n                colorSliderStyles({ ...renderProps, className })\n            )}\n        >\n            <div className='flex items-center'>\n                {label && <Label className='text-sm [grid-area:label]'>{label}</Label>}\n                {showOutput && (\n                    <SliderOutput className='text-sm [grid-area:output] data-[orientation=horizontal]:ml-auto' />\n                )}\n            </div>\n            <SliderTrack\n                className={trackStyles}\n                style={({ defaultStyle, isDisabled }) => ({\n                    ...defaultStyle,\n                    background: isDisabled\n                        ? undefined\n                        : `${defaultStyle.background}, repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n                })}\n            >\n                <ColorThumb />\n            </SliderTrack>\n        </ColorSliderPrimitive>\n    )\n}\n\nexport { ColorSlider }\nexport type { ColorSliderProps }\n"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport type {\n    RadioGroupProps as RadioGroupPrimitiveProps,\n    RadioProps as RadioPrimitiveProps,\n    ValidationResult\n} from 'react-aria-components'\nimport { RadioGroup as RadioGroupPrimitive, Radio as RadioPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { ctr } from './utils'\n\ninterface RadioGroupProps extends Omit<RadioGroupPrimitiveProps, 'children'> {\n    label?: string\n    children?: React.ReactNode\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    ref?: React.Ref<HTMLDivElement>\n}\n\nconst RadioGroup = ({\n    label,\n    description,\n    errorMessage,\n    children,\n    ref,\n    ...props\n}: RadioGroupProps) => {\n    return (\n        <RadioGroupPrimitive\n            ref={ref}\n            {...props}\n            className={ctr(props.className, 'group flex flex-col gap-2')}\n        >\n            {label && <Label>{label}</Label>}\n            <div className='flex gap-2 select-none group-data-[orientation=horizontal]:flex-wrap group-data-[orientation=horizontal]:gap-2 group-data-[orientation=vertical]:flex-col sm:group-data-[orientation=horizontal]:gap-4'>\n                {children}\n            </div>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </RadioGroupPrimitive>\n    )\n}\n\nconst radioStyles = tv({\n    base: 'bg-background size-4 shrink-0 rounded-full border transition',\n    variants: {\n        isSelected: {\n            false: 'border-fg/40',\n            true: 'border-primary border-[4.5px]'\n        },\n        isFocused: {\n            true: [\n                'border-primary bg-primary/20 ring-primary/20 ring-4',\n                'group-data-invalid:border-danger/70 group-data-invalid:bg-danger/20 group-data-invalid:ring-danger/20'\n            ]\n        },\n        isInvalid: {\n            true: 'border-danger/70 bg-danger/20'\n        },\n        isDisabled: {\n            false: 'group-data-hovered:border-primary/60 group-data-hovered:bg-primary/10',\n            true: 'opacity-50'\n        }\n    }\n})\n\ninterface RadioProps extends RadioPrimitiveProps {\n    description?: string\n    ref?: React.Ref<HTMLLabelElement>\n}\n\nconst Radio = ({ description, ref, ...props }: RadioProps) => {\n    return (\n        <RadioPrimitive\n            ref={ref}\n            className={ctr(\n                props.className,\n                'group text-fg disabled:text-fg/50 flex items-center gap-2 text-sm transition'\n            )}\n            {...props}\n        >\n            {(renderProps) => (\n                <div className='flex gap-2'>\n                    <div\n                        className={radioStyles({\n                            ...renderProps,\n                            className: 'description' in props ? 'mt-1' : 'mt-0.5'\n                        })}\n                    />\n                    <div className='flex flex-col gap-1'>\n                        {props.children as React.ReactNode}\n                        {description && <Description className='block'>{description}</Description>}\n                    </div>\n                </div>\n            )}\n        </RadioPrimitive>\n    )\n}\n\nexport { Radio, RadioGroup }\nexport type { RadioGroupProps, RadioProps }\n"
  },
  "color-field": {
    "component": "@/components/ui/color-field",
    "raw": "'use client'\n\nimport type {\n    ColorFieldProps as ColorFieldPrimitiveProps,\n    ValidationResult\n} from 'react-aria-components'\nimport { ColorField as ColorFieldPrimitive } from 'react-aria-components'\n\nimport { ColorPicker } from './color-picker'\nimport { ColorSwatch } from './color-swatch'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ctr } from './utils'\n\ninterface ColorFieldProps extends ColorFieldPrimitiveProps {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    placeholder?: string\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isLoading?: boolean\n    enableColorPicker?: boolean\n}\n\nconst ColorField = ({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    prefix,\n    suffix,\n    isLoading,\n    enableColorPicker = true,\n    className,\n    ...props\n}: ColorFieldProps) => {\n    const value = props.value ?? props.defaultValue\n    return (\n        <ColorFieldPrimitive\n            {...props}\n            aria-label={props['aria-label'] ?? 'Color field'}\n            className={ctr(\n                className,\n                'group flex w-full flex-col gap-y-1 **:data-[slot=color-swatch]:-ml-0.5'\n            )}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup data-loading={isLoading ? 'true' : undefined}>\n                {prefix ? (\n                    <span data-slot='prefix' className='atrs'>\n                        {prefix}\n                    </span>\n                ) : null}\n                <div className='flex w-full items-center'>\n                    {value && (\n                        <span className='ml-2'>\n                            {enableColorPicker ? (\n                                <ColorPicker onChange={props.onChange} defaultValue={value} />\n                            ) : (\n                                <ColorSwatch className='size-6' color={value.toString('hex')} />\n                            )}\n                        </span>\n                    )}\n\n                    <Input placeholder={placeholder} />\n                </div>\n                {suffix ? (\n                    <span data-slot='suffix' className='atrs ml-auto'>\n                        {suffix}\n                    </span>\n                ) : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </ColorFieldPrimitive>\n    )\n}\n\nexport { ColorField }\nexport type { ColorFieldProps }\n"
  },
  "dropdown": {
    "component": "@/components/ui/dropdown",
    "raw": "'use client'\n\nimport { IconCheck } from 'hq-icons'\nimport {\n    Collection,\n    Header,\n    ListBoxItem as ListBoxItemPrimitive,\n    type ListBoxItemProps,\n    ListBoxSection,\n    type SectionProps,\n    Separator,\n    type SeparatorProps,\n    Text,\n    type TextProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Keyboard } from './keyboard'\nimport { cn, cr } from './utils'\n\nconst dropdownItemStyles = tv({\n    base: [\n        'col-span-full grid grid-cols-[auto_1fr_1.5rem_0.5rem_auto] not-has-data-[slot=dropdown-item-details]:items-center has-data-[slot=dropdown-item-details]:**:data-[slot=checked-icon]:mt-[1.5px] supports-[grid-template-columns:subgrid]:grid-cols-subgrid',\n        'group text-fg relative cursor-default rounded-[calc(var(--radius-lg)-1px)] px-[calc(var(--spacing)*2.3)] py-[calc(var(--spacing)*1.3)] text-base outline-0 select-none sm:text-sm/6',\n        '**:data-avatar:mr-2 **:data-avatar:size-6 **:data-avatar:*:mr-2 **:data-avatar:*:size-6 sm:**:data-avatar:size-5 sm:**:data-avatar:*:size-5',\n        'data-danger:**:data-[slot=icon]:text-danger/60 **:data-[slot=icon]:text-muted-fg data-focused:data-danger:**:data-[slot=icon]:text-danger **:data-[slot=icon]:size-4 **:data-[slot=icon]:shrink-0',\n        '*:data-[slot=icon]:mr-2 data-[slot=menu-radio]:*:data-[slot=icon]:size-4',\n        '[&>[slot=label]+[data-slot=icon]]:absolute [&>[slot=label]+[data-slot=icon]]:right-0'\n    ],\n    variants: {\n        isDisabled: {\n            true: 'text-muted-fg'\n        },\n        isSelected: {\n            true: '**:data-avatar:hidden **:data-avatar:*:hidden **:data-[slot=icon]:hidden'\n        },\n        isFocused: {\n            false: 'data-danger:text-danger',\n            true: [\n                '**:data-[slot=icon]:text-primary-fg **:[kbd]:text-primary-fg',\n                'bg-primary text-primary-fg',\n                'data-danger:bg-danger/10 data-danger:text-danger',\n                'data-[slot=description]:text-primary-fg data-[slot=label]:text-primary-fg [&_.text-muted-fg]:text-primary-fg/80'\n            ]\n        }\n    }\n})\n\nconst dropdownSectionStyles = tv({\n    slots: {\n        section: 'sect col-span-full grid grid-cols-[auto_1fr]',\n        header: 'text-muted-fg col-span-full px-2.5 py-1 text-sm font-medium sm:text-xs'\n    }\n})\n\nconst { section, header } = dropdownSectionStyles()\n\ninterface DropdownSectionProps<T> extends SectionProps<T> {\n    title?: string\n}\n\nconst DropdownSection = <T extends object>({ className, ...props }: DropdownSectionProps<T>) => {\n    return (\n        <ListBoxSection className={section({ className })}>\n            {'title' in props && <Header className={header()}>{props.title}</Header>}\n            <Collection items={props.items}>{props.children}</Collection>\n        </ListBoxSection>\n    )\n}\n\ntype DropdownItemProps = ListBoxItemProps\n\nconst DropdownItem = ({ className, ...props }: DropdownItemProps) => {\n    const textValue =\n        props.textValue || (typeof props.children === 'string' ? props.children : undefined)\n    return (\n        <ListBoxItemPrimitive\n            textValue={textValue}\n            className={cr(className, (className, renderProps) =>\n                dropdownItemStyles({ ...renderProps, className })\n            )}\n            {...props}\n        >\n            {cr(props.children, (children, { isSelected }) => (\n                <>\n                    {isSelected && <IconCheck data-slot='checked-icon' className='-mx-0.5 mr-2' />}\n                    {typeof children === 'string' ? (\n                        <DropdownLabel>{children}</DropdownLabel>\n                    ) : (\n                        children\n                    )}\n                </>\n            ))}\n        </ListBoxItemPrimitive>\n    )\n}\n\ninterface DropdownItemDetailProps extends TextProps {\n    label?: TextProps['children']\n    description?: TextProps['children']\n    classNames?: {\n        label?: TextProps['className']\n        description?: TextProps['className']\n    }\n}\n\nconst DropdownItemDetails = ({\n    label,\n    description,\n    classNames,\n    ...props\n}: DropdownItemDetailProps) => {\n    const { slot, children, title, ...restProps } = props\n\n    return (\n        <div\n            data-slot='dropdown-item-details'\n            className='col-start-2 flex flex-col gap-y-1'\n            {...restProps}\n        >\n            {label && (\n                <Text\n                    slot={slot ?? 'label'}\n                    className={cn('font-medium sm:text-sm', classNames?.label)}\n                    {...restProps}\n                >\n                    {label}\n                </Text>\n            )}\n            {description && (\n                <Text\n                    slot={slot ?? 'description'}\n                    className={cn('text-muted-fg text-xs', classNames?.description)}\n                    {...restProps}\n                >\n                    {description}\n                </Text>\n            )}\n            {!title && children}\n        </div>\n    )\n}\n\ninterface MenuLabelProps extends TextProps {\n    ref?: React.Ref<HTMLDivElement>\n}\n\nconst DropdownLabel = ({ className, ref, ...props }: MenuLabelProps) => (\n    <Text slot='label' ref={ref} className={cn('col-start-2', className)} {...props} />\n)\n\nconst DropdownSeparator = ({ className, ...props }: SeparatorProps) => (\n    <Separator\n        orientation='horizontal'\n        className={cn('bg-secondary col-span-full -mx-1 my-1 h-px', className)}\n        {...props}\n    />\n)\n\nconst DropdownKeyboard = ({ className, ...props }: React.ComponentProps<typeof Keyboard>) => {\n    return <Keyboard className={cn('absolute right-2 pl-2', className)} {...props} />\n}\n\nexport {\n    DropdownItem,\n    DropdownItemDetails,\n    dropdownItemStyles,\n    DropdownKeyboard,\n    DropdownLabel,\n    DropdownSection,\n    dropdownSectionStyles,\n    DropdownSeparator\n}\nexport type { DropdownItemDetailProps, DropdownItemProps, DropdownSectionProps }\n"
  },
  "chart": {
    "component": "@/components/ui/chart",
    "raw": "'use client'\n\nimport { createContext, use, useId, useMemo } from 'react'\n\nimport type { LegendProps } from 'recharts'\nimport { Legend, ResponsiveContainer, Tooltip } from 'recharts'\n\nimport { cn } from './utils'\n\nconst THEMES = { light: '', dark: '.dark' } as const\n\ntype ChartConfig = {\n    [k in string]: {\n        label?: React.ReactNode\n        icon?: React.ComponentType\n    } & (\n        | { color?: string; theme?: never }\n        | { color?: never; theme: Record<keyof typeof THEMES, string> }\n    )\n}\n\ntype ChartContextProps = {\n    config: ChartConfig\n}\n\nconst ChartContext = createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n    const context = use(ChartContext)\n\n    if (!context) {\n        throw new Error('useChart must be used within a <Chart />')\n    }\n\n    return context\n}\n\nconst Chart = ({\n    id,\n    className,\n    children,\n    config,\n    ref,\n    ...props\n}: React.ComponentProps<'div'> & {\n    config: ChartConfig\n    children: React.ComponentProps<typeof ResponsiveContainer>['children']\n}) => {\n    const uniqueId = useId()\n    const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n    return (\n        <ChartContext.Provider value={{ config }}>\n            <div\n                data-chart={chartId}\n                ref={ref}\n                className={cn(\n                    \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-fg [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/80 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n                    className\n                )}\n                {...props}\n            >\n                <ChartStyle id={chartId} config={config} />\n                <ResponsiveContainer>{children}</ResponsiveContainer>\n            </div>\n        </ChartContext.Provider>\n    )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n    const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color)\n\n    if (!colorConfig.length) {\n        return null\n    }\n\n    return (\n        <style\n            dangerouslySetInnerHTML={{\n                __html: Object.entries(THEMES)\n                    .map(\n                        ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n    .map(([key, itemConfig]) => {\n        const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color\n        return color ? `  --color-${key}: ${color};` : null\n    })\n    .join('\\n')}\n}\n`\n                    )\n                    .join('\\n')\n            }}\n        />\n    )\n}\n\nconst ChartTooltip = Tooltip\n\nconst ChartTooltipContent = ({\n    active,\n    payload,\n    className,\n    indicator = 'dot',\n    hideLabel = false,\n    hideIndicator = false,\n    label,\n    labelFormatter,\n    labelClassName,\n    formatter,\n    color,\n    nameKey,\n    labelKey,\n    ref\n}: React.ComponentProps<typeof Tooltip> &\n    React.ComponentProps<'div'> & {\n        hideLabel?: boolean\n        hideIndicator?: boolean\n        indicator?: 'line' | 'dot' | 'dashed'\n        nameKey?: string\n        labelKey?: string\n    }) => {\n    const { config } = useChart()\n\n    const tooltipLabel = useMemo(() => {\n        if (hideLabel || !payload?.length) {\n            return null\n        }\n\n        const [item] = payload\n\n        if (!item) {\n            return null\n        }\n\n        const key = `${labelKey || item.dataKey || item.name || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n        const value =\n            !labelKey && typeof label === 'string'\n                ? config[label as keyof typeof config]?.label || label\n                : itemConfig?.label\n\n        if (labelFormatter) {\n            return <div className={labelClassName}>{labelFormatter(value, payload)}</div>\n        }\n\n        if (!value) {\n            return null\n        }\n\n        return <div className={labelClassName}>{value}</div>\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])\n\n    if (!active || !payload?.length) {\n        return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'bg-bg text-fg grid min-w-[12rem] items-start gap-1.5 rounded-lg border px-3 py-2 text-xs shadow-xl',\n                className\n            )}\n        >\n            {!nestLabel ? tooltipLabel : null}\n            <div className='grid gap-1.5'>\n                {payload.map((item, index) => {\n                    const key = `${nameKey || item.name || item.dataKey || 'value'}`\n                    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n                    const indicatorColor = color || item.payload.fill || item.color\n\n                    return (\n                        <div\n                            key={item.dataKey}\n                            className={cn(\n                                '*:data-[slot=icon]:text-muted-fg flex w-full flex-wrap items-stretch gap-2 *:data-[slot=icon]:size-2.5',\n                                indicator === 'dot' && 'items-center'\n                            )}\n                        >\n                            {formatter && item?.value !== undefined && item.name ? (\n                                formatter(item.value, item.name, item, index, item.payload)\n                            ) : (\n                                <>\n                                    {itemConfig?.icon ? (\n                                        <itemConfig.icon />\n                                    ) : (\n                                        !hideIndicator && (\n                                            <div\n                                                className={cn(\n                                                    'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',\n                                                    indicator === 'dot' && 'size-2.5',\n                                                    indicator === 'line' && 'w-1',\n                                                    indicator === 'dashed' &&\n                                                        'w-0 border-[1.5px] border-dashed bg-transparent',\n                                                    nestLabel && indicator === 'dashed' && 'my-0.5'\n                                                )}\n                                                style={\n                                                    {\n                                                        '--color-bg': indicatorColor,\n                                                        '--color-border': indicatorColor\n                                                    } as React.CSSProperties\n                                                }\n                                            />\n                                        )\n                                    )}\n                                    <div\n                                        className={cn(\n                                            'flex flex-1 justify-between leading-none',\n                                            nestLabel ? 'items-end' : 'items-center'\n                                        )}\n                                    >\n                                        <div className='grid gap-1.5'>\n                                            {nestLabel ? tooltipLabel : null}\n                                            <span className='text-muted-fg'>\n                                                {itemConfig?.label || item.name}\n                                            </span>\n                                        </div>\n                                        {item.value && (\n                                            <span className='text-fg font-mono font-medium tabular-nums'>\n                                                {item.value.toLocaleString()}\n                                            </span>\n                                        )}\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nconst ChartLegend = Legend\n\nconst ChartLegendContent = ({\n    className,\n    hideIcon = false,\n    payload,\n    verticalAlign = 'bottom',\n    nameKey,\n    ref\n}: React.ComponentProps<'div'> &\n    Pick<LegendProps, 'payload' | 'verticalAlign'> & {\n        hideIcon?: boolean\n        nameKey?: string\n    }) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n        return null\n    }\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'flex items-center justify-center gap-4',\n                verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n                className\n            )}\n        >\n            {payload.map((item) => {\n                const key = `${nameKey || item.dataKey || 'value'}`\n                const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n                return (\n                    <div\n                        key={item.value}\n                        className={cn(\n                            '*:data-[slot=icon]:text-muted-fg flex items-center gap-1.5 *:data-[slot=icon]:size-3'\n                        )}\n                    >\n                        {itemConfig?.icon && !hideIcon ? (\n                            <itemConfig.icon />\n                        ) : (\n                            <div\n                                className='h-2 w-2 shrink-0 rounded-[2px]'\n                                style={{\n                                    backgroundColor: item.color\n                                }}\n                            />\n                        )}\n                        {itemConfig?.label}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n    if (typeof payload !== 'object' || payload === null) {\n        return undefined\n    }\n\n    const payloadPayload =\n        'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n            ? payload.payload\n            : undefined\n\n    let configLabelKey: string = key\n\n    if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n        configLabelKey = payload[key as keyof typeof payload] as string\n    } else if (\n        payloadPayload &&\n        key in payloadPayload &&\n        typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n    ) {\n        configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string\n    }\n\n    return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config]\n}\n\nChart.Legend = ChartLegend\nChart.Tooltip = ChartTooltip\nChart.LegendContent = ChartLegendContent\nChart.TooltipContent = ChartTooltipContent\n\nexport { Chart, ChartStyle }\nexport type { ChartConfig }\n"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport type {\n    DialogTriggerProps,\n    ModalOverlayProps,\n    PopoverProps as PopoverPrimitiveProps\n} from 'react-aria-components'\nimport {\n    type DialogProps,\n    DialogTrigger,\n    Modal,\n    ModalOverlay,\n    OverlayArrow,\n    PopoverContext,\n    Popover as PopoverPrimitive,\n    useSlottedContext\n} from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport type {\n    DialogBodyProps,\n    DialogFooterProps,\n    DialogHeaderProps,\n    DialogTitleProps\n} from './dialog'\nimport { Dialog } from './dialog'\nimport { cn, cr, useMediaQuery } from './utils'\n\ntype PopoverProps = DialogTriggerProps\nconst Popover = (props: PopoverProps) => {\n    return <DialogTrigger {...props} />\n}\n\nconst PopoverTitle = ({ level = 2, className, ...props }: DialogTitleProps) => (\n    <Dialog.Title\n        className={twMerge('sm:leading-none', level === 2 && 'sm:text-lg', className)}\n        {...props}\n    />\n)\n\nconst PopoverHeader = ({ className, ...props }: DialogHeaderProps) => (\n    <Dialog.Header className={twMerge('sm:p-4', className)} {...props} />\n)\n\nconst PopoverFooter = ({ className, ...props }: DialogFooterProps) => (\n    <Dialog.Footer className={cn('sm:p-4', className)} {...props} />\n)\n\nconst PopoverBody = ({ className, ref, ...props }: DialogBodyProps) => (\n    <Dialog.Body ref={ref} className={cn('sm:px-4 sm:pt-0', className)} {...props} />\n)\n\nconst content = tv({\n    base: [\n        'peer/popover-content bg-bg text-fg max-w-xs rounded-xl border bg-clip-padding shadow-xs transition-transform sm:max-w-3xl sm:text-sm dark:backdrop-saturate-200'\n    ],\n    variants: {\n        isPicker: {\n            true: 'max-h-72 min-w-(--trigger-width) overflow-y-auto p-0',\n            false: 'min-w-80'\n        },\n        isMenu: {\n            true: 'p-0'\n        },\n        isEntering: {\n            true: [\n                'fade-in animate-in duration-150 ease-out',\n                'data-[placement=left]:slide-in-from-right-1 data-[placement=right]:slide-in-from-left-1 data-[placement=top]:slide-in-from-bottom-1 data-[placement=bottom]:slide-in-from-top-1'\n            ]\n        },\n        isExiting: {\n            true: [\n                'fade-out animate-out duration-100 ease-in',\n                'data-[placement=left]:slide-out-to-right-1 data-[placement=right]:slide-out-to-left-1 data-[placement=top]:slide-out-to-bottom-1 data-[placement=bottom]:slide-out-to-top-1'\n            ]\n        }\n    }\n})\n\nconst drawer = tv({\n    base: [\n        'bg-bg fixed top-auto bottom-0 z-50 max-h-full w-full max-w-2xl border border-b-transparent outline-hidden'\n    ],\n    variants: {\n        isMenu: {\n            true: 'rounded-t-xl p-0 [&_[role=dialog]]:*:not-has-[[data-slot=dialog-body]]:px-1',\n            false: 'rounded-t-2xl'\n        },\n        isEntering: {\n            true: [\n                '[will-change:transform] [transition:transform_0.5s_cubic-bezier(0.32,_0.72,_0,_1)]',\n                'fade-in-0 slide-in-from-bottom-56 animate-in duration-200',\n                '[transition:translate3d(0,_100%,_0)]',\n                'sm:slide-in-from-bottom-auto sm:slide-in-from-top-[20%]'\n            ]\n        },\n        isExiting: {\n            true: 'slide-out-to-bottom-56 animate-out duration-200 ease-in'\n        }\n    }\n})\n\ninterface PopoverContentProps\n    extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n        Omit<PopoverPrimitiveProps, 'children' | 'className'>,\n        Omit<ModalOverlayProps, 'className'> {\n    children: React.ReactNode\n    showArrow?: boolean\n    style?: React.CSSProperties\n    respectScreen?: boolean\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    className?: string | ((values: { defaultClassName?: string }) => string)\n}\n\nconst PopoverContent = ({\n    respectScreen = true,\n    children,\n    showArrow = true,\n    className,\n    ...props\n}: PopoverContentProps) => {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n    const popoverContext = useSlottedContext(PopoverContext)!\n    const isMenuTrigger = popoverContext?.trigger === 'MenuTrigger'\n    const isSubmenuTrigger = popoverContext?.trigger === 'SubmenuTrigger'\n    const isMenu = isMenuTrigger || isSubmenuTrigger\n    const offset = showArrow ? 12 : 8\n    const effectiveOffset = isSubmenuTrigger ? offset - 5 : offset\n    return isMobile && respectScreen ? (\n        <ModalOverlay\n            className='bg-bg/10 fixed top-0 left-0 isolate z-50 h-(--visual-viewport-height) w-full [--visual-viewport-vertical-padding:16px]'\n            {...props}\n            isDismissable\n        >\n            <Modal\n                className={cr(className, (className, renderProps) =>\n                    drawer({ ...renderProps, isMenu, className })\n                )}\n            >\n                <Dialog\n                    data-dialog\n                    aria-label={props['aria-label'] || isMenu ? 'Menu' : undefined}\n                    className='has-input:overflow-visible outline-hidden'\n                >\n                    {children}\n                </Dialog>\n            </Modal>\n        </ModalOverlay>\n    ) : (\n        <PopoverPrimitive\n            offset={effectiveOffset}\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                content({\n                    ...renderProps,\n                    className\n                })\n            )}\n        >\n            {showArrow && (\n                <OverlayArrow className='group'>\n                    <svg\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className='fill-bg stroke-border block group-data-[placement=bottom]:rotate-180 group-data-[placement=left]:-rotate-90 group-data-[placement=right]:rotate-90'\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            <Dialog\n                role='dialog'\n                aria-label={props['aria-label'] || isMenu ? 'Menu' : undefined}\n                className='outline-hidden'\n            >\n                {children}\n            </Dialog>\n        </PopoverPrimitive>\n    )\n}\n\nconst PopoverPicker = ({ children, className, ...props }: PopoverContentProps) => {\n    return (\n        <PopoverPrimitive\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                content({\n                    ...renderProps,\n                    isPicker: true,\n                    className\n                })\n            )}\n        >\n            {children}\n        </PopoverPrimitive>\n    )\n}\n\nconst PopoverTrigger = Dialog.Trigger\nconst PopoverClose = Dialog.Close\nconst PopoverDescription = Dialog.Description\n\nPopover.Trigger = PopoverTrigger\nPopover.Close = PopoverClose\nPopover.Description = PopoverDescription\nPopover.Content = PopoverContent\nPopover.Body = PopoverBody\nPopover.Footer = PopoverFooter\nPopover.Header = PopoverHeader\nPopover.Picker = PopoverPicker\nPopover.Title = PopoverTitle\n\nexport { Popover }\nexport type { PopoverContentProps, PopoverProps }\n"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "'use client'\n\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nconst badgeStyles = tv({\n    base: 'inline-flex items-center gap-x-1.5 px-2 py-0.5 text-xs/5 font-medium ring-1 **:data-[slot=icon]:size-3',\n    variants: {\n        variant: {\n            primary: 'ring-primary/20 bg-primary/5 text-primary',\n            secondary: 'ring-secondary-fg/20 bg-secondary/20 text-secondary-fg',\n            success: 'ring-success/20 bg-success/5 text-success',\n            warning: 'ring-warning/20 bg-warning/5 text-warning',\n            danger: 'ring-danger/20 bg-danger/5 text-danger',\n            dark: 'ring-fg/20 bg-fg/5 text-fg'\n        },\n        shape: {\n            rounded: 'rounded-md',\n            sharp: 'rounded-none',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        shape: 'rounded'\n    }\n})\n\ninterface BadgeProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof badgeStyles> {\n    className?: string\n    children: React.ReactNode\n}\n\nconst Badge = ({ children, variant, shape, className, ...props }: BadgeProps) => {\n    return (\n        <span {...props} className={badgeStyles({ variant, shape, className })}>\n            {children}\n        </span>\n    )\n}\n\nexport { Badge, badgeStyles }\nexport type { BadgeProps }\n"
  },
  "tag-field": {
    "component": "@/components/ui/tag-field",
    "raw": "'use client'\n\nimport { useCallback, useState } from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Group, TextField } from 'react-aria-components'\nimport type { ListData } from 'react-stately'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport type { FieldProps } from './field'\nimport { Description, Input, Label } from './field'\nimport type { RestrictedVariant, TagGroupProps } from './tag-group'\nimport { Tag } from './tag-group'\nimport { cn } from './utils'\n\nconst tagFieldsStyles = tv({\n    base: ['relative flex min-h-10 flex-row flex-wrap items-center transition'],\n    variants: {\n        appearance: {\n            outline: [\n                'rounded-lg border px-1',\n                'has-[input[data-focused=true]]:border-primary/70',\n                'has-[input[data-invalid=true][data-focused=true]]:border-danger has-[input[data-invalid=true]]:border-danger has-[input[data-invalid=true]]:ring-danger/20',\n                'has-[input[data-focused=true]]:ring-primary/20 has-[input[data-focused=true]]:ring-4'\n            ],\n            plain: ['has-[input[data-focused=true]]:border-transparent']\n        }\n    }\n})\n\ninterface TagItemProps {\n    id: number\n    name: string\n}\n\ninterface TagFieldProps extends Pick<TagGroupProps, 'shape'>, FieldProps {\n    variant?: RestrictedVariant\n    isDisabled?: boolean\n    max?: number\n    className?: string\n    children?: React.ReactNode\n    name?: string\n    list: ListData<TagItemProps>\n    onItemInserted?: (tag: TagItemProps) => void\n    onItemCleared?: (tag: TagItemProps | undefined) => void\n    appearance?: 'outline' | 'plain'\n}\n\nconst TagField = ({\n    appearance = 'outline',\n    name,\n    className,\n    list,\n    onItemCleared,\n    onItemInserted,\n    ...props\n}: TagFieldProps) => {\n    const [isInvalid, setIsInvalid] = useState(false)\n    const [inputValue, setInputValue] = useState('')\n\n    const existingTagCount = list.items.length\n    const maxTags = props.max !== undefined ? props.max : Number.POSITIVE_INFINITY\n    const maxTagsToAdd = maxTags - existingTagCount\n\n    const insertTag = () => {\n        const tagNames = inputValue.split(/,/)\n        if (maxTagsToAdd <= 0) {\n            setIsInvalid(true)\n            setInputValue('')\n            const timeoutId = setTimeout(() => {\n                setIsInvalid(false)\n            }, 2000)\n\n            return () => clearTimeout(timeoutId)\n        }\n\n        for (const tagName of tagNames.slice(0, maxTagsToAdd)) {\n            const formattedName = tagName\n                .trim()\n                .replace(/\\s+/g, ' ')\n                .replace(/[\\t\\r\\n]/g, '')\n\n            if (\n                formattedName &&\n                !list.items.some(({ name }) => name.toLowerCase() === formattedName.toLowerCase())\n            ) {\n                const tag = {\n                    id: (list.items.at(-1)?.id ?? 0) + 1,\n                    name: formattedName\n                }\n\n                list.append(tag)\n                onItemInserted?.(tag)\n            }\n        }\n\n        setInputValue('')\n    }\n\n    const clearInvalidFeedback = () => {\n        if (maxTags - list.items.length <= maxTagsToAdd) {\n            setIsInvalid(false)\n        }\n    }\n\n    const onRemove = (keys: Set<Key>) => {\n        list.remove(...keys)\n\n        const firstKey = [...keys][0]\n        if (firstKey !== undefined) {\n            onItemCleared?.(list.getItem(firstKey))\n        }\n\n        clearInvalidFeedback()\n    }\n\n    const onKeyDown = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter' || e.key === ',') {\n            e.preventDefault()\n            insertTag()\n        }\n\n        if (e.key === 'Backspace' && inputValue === '') {\n            popLast()\n            clearInvalidFeedback()\n        }\n    }\n\n    const popLast = useCallback(() => {\n        if (list.items.length === 0) {\n            return\n        }\n\n        const endKey = list.items[list.items.length - 1]!\n\n        if (endKey !== null) {\n            list.remove(endKey.id)\n            onItemCleared?.(list.getItem(endKey.id))\n        }\n    }, [list, onItemCleared])\n\n    return (\n        <div className={cn('flex w-full flex-col gap-y-1.5', className)}>\n            {props.label && <Label>{props.label}</Label>}\n            <Group className={twJoin('flex flex-col', props.isDisabled && 'opacity-50')}>\n                <Tag.Group\n                    variant={props.variant}\n                    shape={props.shape}\n                    aria-label='List item inserted'\n                    onRemove={onRemove}\n                >\n                    <div\n                        className={cn(\n                            tagFieldsStyles({ appearance }),\n                            !props.isDisabled && 'has-[input[data-hovered=true]]:border-primary/60'\n                        )}\n                    >\n                        <div className='flex flex-1 flex-wrap items-center'>\n                            <Tag.List\n                                items={list.items}\n                                className={twJoin(\n                                    list.items.length !== 0\n                                        ? appearance === 'outline' && 'gap-1.5 px-1 py-1.5'\n                                        : 'gap-0',\n                                    props.shape === 'rounded' &&\n                                        '[&_.tag]:rounded-[calc(var(--radius-lg)-4px)]',\n                                    'outline-hidden [&_.tag]:cursor-default [&_.tag]:last:-mr-1'\n                                )}\n                            >\n                                {(item) => <Tag>{item.name}</Tag>}\n                            </Tag.List>\n                            <TextField\n                                isDisabled={props.isDisabled}\n                                aria-label={\n                                    props?.label ?? (props['aria-label'] || props.placeholder)\n                                }\n                                isInvalid={isInvalid}\n                                onKeyDown={onKeyDown}\n                                onChange={setInputValue}\n                                value={inputValue}\n                                className='flex-1'\n                                {...props}\n                            >\n                                <Input\n                                    className='inline'\n                                    placeholder={\n                                        maxTagsToAdd <= 0\n                                            ? 'Remove one to add more'\n                                            : props.placeholder\n                                    }\n                                />\n                            </TextField>\n                        </div>\n                    </div>\n                </Tag.Group>\n                {name && (\n                    <input\n                        hidden\n                        name={name}\n                        value={list.items.map((i) => i.name).join(',')}\n                        readOnly\n                    />\n                )}\n            </Group>\n            {props.description && <Description>{props.description}</Description>}\n        </div>\n    )\n}\n\nexport { TagField }\nexport type { TagFieldProps, TagItemProps }\n"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown, IconX } from 'hq-icons'\nimport {\n    Button,\n    ComboBox as ComboboxPrimitive,\n    type ComboBoxProps as ComboboxPrimitiveProps,\n    ComboBoxStateContext,\n    type ValidationResult\n} from 'react-aria-components'\n\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport { cn } from './utils'\n\ninterface ComboBoxProps<T extends object> extends Omit<ComboboxPrimitiveProps<T>, 'children'> {\n    label?: string\n    placeholder?: string\n    description?: string | null\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    portal?: Element\n}\n\nconst ComboBox = <T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    placeholder,\n    className,\n    items,\n    ...props\n}: ComboBoxProps<T>) => {\n    return (\n        <ComboboxPrimitive\n            menuTrigger='focus'\n            {...props}\n            className={cn('group flex w-full flex-col gap-1.5', className)}\n        >\n            <Label>{label}</Label>\n            <FieldGroup className='relative pl-0'>\n                <Input className='pl-2.5' placeholder={placeholder} />\n                <Button className='text-muted-fg size-7 rounded-lg outline-offset-0 active:bg-transparent data-hovered:bg-transparent data-pressed:bg-transparent'>\n                    {!props?.inputValue && (\n                        <IconChevronDown\n                            aria-hidden\n                            className='text-muted-fg group-open:text-fg transition group-data-open:rotate-180'\n                        />\n                    )}\n                </Button>\n                {props?.inputValue && <ComboBoxClearButton />}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Picker UNSTABLE_portalContainer={props.portal}>\n                <ListBox.Picker items={items}>{children}</ListBox.Picker>\n            </Popover.Picker>\n        </ComboboxPrimitive>\n    )\n}\n\nconst ComboBoxClearButton = () => {\n    const state = React.use(ComboBoxStateContext)\n\n    return (\n        <Button\n            className='text-muted-fg data-hovered:text-fg absolute inset-y-0 right-0 flex items-center pr-2.5 focus:outline-none'\n            slot={null}\n            aria-label='Clear'\n            onPress={() => {\n                state?.setSelectedKey(null)\n                state?.open()\n            }}\n        >\n            <IconX className='size-4' />\n        </Button>\n    )\n}\n\nconst ComboBoxItem = DropdownItem\nconst ComboBoxSection = DropdownSection\n\nComboBox.Item = ComboBoxItem\nComboBox.Section = ComboBoxSection\n\nexport { ComboBox, type ComboBoxProps }\n"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport { Link as LinkPrimitive, type LinkProps as LinkPrimitiveProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cr, focusButtonStyles } from './utils'\n\nconst linkStyles = tv({\n    extend: focusButtonStyles,\n    base: 'outline-primary relative cursor-pointer border-transparent outline-0 transition-colors data-disabled:cursor-default data-disabled:opacity-50',\n    variants: {\n        variant: {\n            default: 'text-fg data-hovered:text-primary',\n            unstyled: 'text-current',\n            primary: 'text-primary data-hovered:text-primary/80',\n            danger: 'text-danger data-hovered:text-danger/80'\n        }\n    },\n    defaultVariants: {\n        variant: 'default'\n    }\n})\n\ninterface LinkProps extends LinkPrimitiveProps {\n    variant?: 'primary' | 'danger' | 'default' | 'unstyled'\n}\n\nconst Link = ({ className, ...props }: LinkProps) => {\n    const { variant } = props\n    const linkVariant = className ? 'unstyled' : variant\n    return (\n        <LinkPrimitive\n            {...props}\n            className={cr(className, (className, ...renderProps) =>\n                linkStyles({ ...renderProps, variant: linkVariant, className })\n            )}\n        >\n            {(values) => (\n                <>\n                    {typeof props.children === 'function' ? props.children(values) : props.children}\n                </>\n            )}\n        </LinkPrimitive>\n    )\n}\n\nexport { Link, type LinkProps }\n"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconEye, IconEyeClosed } from 'hq-icons'\nimport {\n    Button as ButtonPrimitive,\n    TextField as TextFieldPrimitive,\n    type TextFieldProps as TextFieldPrimitiveProps\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\n\nimport type { TextInputDOMProps } from '@react-types/shared'\n\nimport type { FieldProps } from './field'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { Loader } from './loader'\nimport { ctr } from './utils'\n\ntype InputType = Exclude<TextInputDOMProps['type'], 'password'>\n\ninterface BaseTextFieldProps extends TextFieldPrimitiveProps, FieldProps {\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isPending?: boolean\n    className?: string\n}\n\ninterface RevealableTextFieldProps extends BaseTextFieldProps {\n    isRevealable: true\n    type: 'password'\n}\n\ninterface NonRevealableTextFieldProps extends BaseTextFieldProps {\n    isRevealable?: never\n    type?: InputType\n}\n\ntype TextFieldProps = RevealableTextFieldProps | NonRevealableTextFieldProps\n\nconst TextField = ({\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    prefix,\n    suffix,\n    isPending,\n    className,\n    isRevealable,\n    type,\n    ...props\n}: TextFieldProps) => {\n    const [isPasswordVisible, setIsPasswordVisible] = useState(false)\n    const inputType = isRevealable ? (isPasswordVisible ? 'text' : 'password') : type\n    const handleTogglePasswordVisibility = () => {\n        setIsPasswordVisible((prev) => !prev)\n    }\n    return (\n        <TextFieldPrimitive\n            type={inputType}\n            {...props}\n            className={ctr(className, 'group flex flex-col gap-y-1.5')}\n        >\n            {!props.children ? (\n                <>\n                    {label && <Label>{label}</Label>}\n                    <FieldGroup\n                        isInvalid={!!errorMessage}\n                        isDisabled={props.isDisabled}\n                        className={twJoin(\n                            '**:[button]:h-8 **:[button]:rounded-[calc(var(--radius-lg)*0.5)] **:[button]:px-3.5 **:[button]:inset-ring-0 **:[button]:inset-shadow-none **:[button]:has-data-[slot=icon]:w-8 **:[button]:has-data-[slot=icon]:p-0 dark:**:[button]:inset-ring-0',\n                            '[&>[data-slot=suffix]>button]:mr-[calc(var(--spacing)*-1.7)] [&>[data-slot=suffix]>button]:data-focus-visible:outline-1 [&>[data-slot=suffix]>button]:data-focus-visible:outline-offset-1',\n                            '[&>[data-slot=prefix]>button]:ml-[calc(var(--spacing)*-1.7)] [&>[data-slot=prefix]>button]:data-focus-visible:outline-1 [&>[data-slot=prefix]>button]:data-focus-visible:outline-offset-1'\n                        )}\n                        data-loading={isPending ? 'true' : undefined}\n                    >\n                        {prefix ? (\n                            <span data-slot='prefix' className='atrs x2e2'>\n                                {prefix}\n                            </span>\n                        ) : null}\n                        <Input placeholder={placeholder} />\n                        {isRevealable ? (\n                            <ButtonPrimitive\n                                type='button'\n                                aria-label='Toggle password visibility'\n                                onPress={handleTogglePasswordVisibility}\n                                className='data-focus-visible:*:data-[slot=icon]:text-primary *:data-[slot=icon]:text-muted-fg relative mr-1 grid shrink-0 place-content-center rounded-sm border-transparent outline-hidden'\n                            >\n                                {isPasswordVisible ? <IconEyeClosed /> : <IconEye />}\n                            </ButtonPrimitive>\n                        ) : isPending ? (\n                            <Loader variant='spin' data-slot='suffix' />\n                        ) : suffix ? (\n                            <span data-slot='suffix'>{suffix}</span>\n                        ) : null}\n                    </FieldGroup>\n                    {description && <Description>{description}</Description>}\n                    <FieldError>{errorMessage}</FieldError>\n                </>\n            ) : (\n                props.children\n            )}\n        </TextFieldPrimitive>\n    )\n}\n\nexport { TextField }\nexport type { TextFieldProps }\n"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport { createContext, use } from 'react'\n\nimport { IconCheck, IconChevronRight } from 'hq-icons'\nimport type {\n    ButtonProps,\n    MenuItemProps as MenuItemPrimitiveProps,\n    MenuProps as MenuPrimitiveProps,\n    MenuSectionProps as MenuSectionPrimitiveProps,\n    MenuTriggerProps as MenuTriggerPrimitiveProps,\n    PopoverProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Collection,\n    Header,\n    MenuItem as MenuItemPrimitive,\n    Menu as MenuPrimitive,\n    MenuSection as MenuSectionPrimitive,\n    MenuTrigger as MenuTriggerPrimitive,\n    SubmenuTrigger as SubmenuTriggerPrimitive\n} from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport {\n    DropdownItemDetails,\n    DropdownKeyboard,\n    DropdownLabel,\n    DropdownSeparator,\n    dropdownItemStyles,\n    dropdownSectionStyles\n} from './dropdown'\nimport { Popover } from './popover'\nimport { cn, cr } from './utils'\n\ninterface MenuContextProps {\n    respectScreen: boolean\n}\n\nconst MenuContext = createContext<MenuContextProps>({ respectScreen: true })\n\ninterface MenuProps extends MenuTriggerPrimitiveProps {\n    respectScreen?: boolean\n}\n\nconst Menu = ({ respectScreen = true, ...props }: MenuProps) => {\n    return (\n        <MenuContext value={{ respectScreen }}>\n            <MenuTriggerPrimitive {...props}>{props.children}</MenuTriggerPrimitive>\n        </MenuContext>\n    )\n}\n\nconst MenuSubMenu = ({ delay = 0, ...props }) => (\n    <SubmenuTriggerPrimitive {...props} delay={delay}>\n        {props.children}\n    </SubmenuTriggerPrimitive>\n)\n\nconst menuStyles = tv({\n    slots: {\n        menu: \"grid max-h-[calc(var(--visual-viewport-height)-10rem)] grid-cols-[auto_1fr] overflow-auto rounded-xl p-1 outline-hidden [clip-path:inset(0_0_0_0_round_calc(var(--radius-lg)-2px))] sm:max-h-[inherit] *:[[role='group']+[role=group]]:mt-4 *:[[role='group']+[role=separator]]:mt-1\",\n        popover: 'z-50 p-0 shadow-xs outline-hidden sm:min-w-40',\n        trigger: [\n            'data-focus-visible:ring-primary relative inline text-left outline-hidden data-focus-visible:ring-1'\n        ]\n    }\n})\n\nconst { menu, popover, trigger } = menuStyles()\n\ninterface MenuTriggerProps extends ButtonProps {\n    className?: string\n    ref?: React.Ref<HTMLButtonElement>\n}\n\nconst MenuTrigger = ({ className, ref, ...props }: MenuTriggerProps) => (\n    <Button ref={ref} data-slot='menu-trigger' className={trigger({ className })} {...props}>\n        {(values) => (\n            <>{typeof props.children === 'function' ? props.children(values) : props.children}</>\n        )}\n    </Button>\n)\n\ninterface MenuContentProps<T>\n    extends Omit<PopoverProps, 'children' | 'style'>,\n        MenuPrimitiveProps<T> {\n    className?: string\n    popoverClassName?: string\n    showArrow?: boolean\n    respectScreen?: boolean\n}\n\nconst MenuContent = <T extends object>({\n    className,\n    showArrow = false,\n    popoverClassName,\n    ...props\n}: MenuContentProps<T>) => {\n    const { respectScreen } = use(MenuContext)\n    return (\n        <Popover.Content\n            respectScreen={respectScreen}\n            showArrow={showArrow}\n            className={popover({\n                className: popoverClassName\n            })}\n            {...props}\n        >\n            <MenuPrimitive className={menu({ className })} {...props} />\n        </Popover.Content>\n    )\n}\n\ninterface MenuItemProps extends MenuItemPrimitiveProps, VariantProps<typeof dropdownItemStyles> {\n    isDanger?: boolean\n}\n\nconst MenuItem = ({ className, isDanger = false, children, ...props }: MenuItemProps) => {\n    const textValue = props.textValue || (typeof children === 'string' ? children : undefined)\n    return (\n        <MenuItemPrimitive\n            className={cr(className, (className, renderProps) =>\n                dropdownItemStyles({\n                    ...renderProps,\n                    className: renderProps.hasSubmenu\n                        ? cn([\n                              'data-open:data-danger:bg-danger/10 data-open:data-danger:text-danger',\n                              'data-open:bg-primary data-open:text-primary-fg data-open:*:data-[slot=icon]:text-primary-fg data-open:*:[.text-muted-fg]:text-primary-fg',\n                              className\n                          ])\n                        : className\n                })\n            )}\n            textValue={textValue}\n            data-danger={isDanger ? 'true' : undefined}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {values.isSelected && (\n                        <>\n                            {values.selectionMode === 'single' && (\n                                <span\n                                    data-slot='bullet-icon'\n                                    className='-mx-0.5 mr-2 flex size-4 shrink-0 items-center justify-center **:data-[slot=indicator]:size-4 **:data-[slot=indicator]:shrink-0'\n                                >\n                                    <IconCheck data-slot='indicator' />\n                                </span>\n                            )}\n                            {values.selectionMode === 'multiple' && (\n                                <IconCheck\n                                    className='-mx-0.5 mr-2 size-4'\n                                    data-slot='checked-icon'\n                                />\n                            )}\n                        </>\n                    )}\n\n                    {typeof children === 'function' ? children(values) : children}\n\n                    {values.hasSubmenu && (\n                        <IconChevronRight\n                            data-slot='chevron'\n                            className='absolute right-2 size-3.5'\n                        />\n                    )}\n                </>\n            )}\n        </MenuItemPrimitive>\n    )\n}\n\nexport interface MenuHeaderProps extends React.ComponentProps<typeof Header> {\n    separator?: boolean\n}\n\nconst MenuHeader = ({ className, separator = false, ...props }: MenuHeaderProps) => (\n    <Header\n        className={cn(\n            'col-span-full px-2.5 py-2 text-base font-semibold sm:text-sm',\n            separator && '-mx-1 mb-1 border-b sm:px-3 sm:pb-[0.625rem]',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst { section, header } = dropdownSectionStyles()\n\ninterface MenuSectionProps<T> extends MenuSectionPrimitiveProps<T> {\n    ref?: React.Ref<HTMLDivElement>\n    title?: string\n}\n\nconst MenuSection = <T extends object>({ className, ref, ...props }: MenuSectionProps<T>) => {\n    return (\n        <MenuSectionPrimitive ref={ref} className={section({ className })} {...props}>\n            {'title' in props && <Header className={header()}>{props.title}</Header>}\n            <Collection items={props.items}>{props.children}</Collection>\n        </MenuSectionPrimitive>\n    )\n}\n\nconst MenuSeparator = DropdownSeparator\nconst MenuItemDetails = DropdownItemDetails\nconst MenuKeyboard = DropdownKeyboard\nconst MenuLabel = DropdownLabel\n\nMenu.Keyboard = MenuKeyboard\nMenu.Content = MenuContent\nMenu.Header = MenuHeader\nMenu.Item = MenuItem\nMenu.Section = MenuSection\nMenu.Separator = MenuSeparator\nMenu.ItemDetails = MenuItemDetails\nMenu.Label = MenuLabel\nMenu.Trigger = MenuTrigger\nMenu.Submenu = MenuSubMenu\n\nexport { Menu }\nexport type { MenuContentProps, MenuItemProps, MenuProps, MenuSectionProps, MenuTriggerProps }\n"
  },
  "keyboard": {
    "component": "@/components/ui/keyboard",
    "raw": "'use client'\n\nimport { Keyboard as KeyboardPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst keyboardStyles = tv({\n    slots: {\n        base: 'group-data-focused:text-fg group-data-hovered:text-fg hidden text-current/70 group-data-disabled:opacity-50 group-data-focused:opacity-90 lg:inline-flex',\n        kbd: 'inline-grid min-h-5 min-w-[2ch] place-content-center rounded text-center font-sans text-[.75rem] uppercase'\n    }\n})\n\nconst { base, kbd } = keyboardStyles()\n\ninterface KeyboardProps extends React.HTMLAttributes<HTMLElement> {\n    keys: string | string[]\n    classNames?: {\n        base?: string\n        kbd?: string\n    }\n}\n\nconst Keyboard = ({ keys, classNames, className, ...props }: KeyboardProps) => {\n    return (\n        <KeyboardPrimitive\n            className={base({ className: classNames?.base ?? className })}\n            {...props}\n        >\n            {(Array.isArray(keys) ? keys : keys.split('')).map((char, index) => (\n                <kbd\n                    key={index}\n                    className={kbd({\n                        className: index > 0 && char.length > 1 ? 'pl-1' : classNames?.kbd\n                    })}\n                >\n                    {char}\n                </kbd>\n            ))}\n        </KeyboardPrimitive>\n    )\n}\n\nexport { Keyboard }\nexport type { KeyboardProps }\n"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\n\nimport {\n    DateField as DateFieldPrimitive,\n    type DateFieldProps as DateFieldPrimitiveProps,\n    DateInput as DateInputPrimitive,\n    type DateInputProps,\n    DateSegment,\n    type DateValue,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { ctr } from './utils'\n\ninterface DateFieldProps<T extends DateValue> extends DateFieldPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n}\n\nconst DateField = <T extends DateValue>({\n    prefix,\n    suffix,\n    label,\n    description,\n    errorMessage,\n    ...props\n}: DateFieldProps<T>) => {\n    return (\n        <DateFieldPrimitive\n            {...props}\n            className={ctr(props.className, 'group flex flex-col gap-y-1.5')}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                {prefix ? <span data-slot='prefix'>{prefix}</span> : null}\n                <DateInput />\n                {suffix ? <span data-slot='suffix'>{suffix}</span> : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </DateFieldPrimitive>\n    )\n}\n\nconst segmentStyles = tv({\n    base: 'type-literal:px-0 text-fg inline shrink-0 rounded p-0.5 tracking-wider tabular-nums caret-transparent outline-0 sm:text-sm sm:uppercase',\n    variants: {\n        isPlaceholder: {\n            true: 'text-muted-fg'\n        },\n        isDisabled: {\n            true: 'text-fg/50'\n        },\n        isFocused: {\n            true: [\n                'bg-primary text-primary-fg',\n                'data-invalid:bg-danger data-invalid:text-danger-fg'\n            ]\n        }\n    }\n})\n\nconst DateInput = ({ className, ...props }: Omit<DateInputProps, 'children'>) => {\n    return (\n        <DateInputPrimitive\n            className={ctr(\n                className,\n                'text-fg placeholder-muted-fg bg-transparent p-2 text-base sm:text-sm'\n            )}\n            {...props}\n        >\n            {(segment) => <DateSegment segment={segment} className={segmentStyles} />}\n        </DateInputPrimitive>\n    )\n}\n\nexport { DateField, DateInput, segmentStyles }\nexport type { DateFieldProps }\n"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport { IconSearch, IconX } from 'hq-icons'\nimport {\n    SearchField as SearchFieldPrimitive,\n    type SearchFieldProps as SearchFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { Loader } from './loader'\nimport { ctr } from './utils'\n\nconst searchFieldStyles = tv({\n    slots: {\n        base: 'group flex min-w-10 flex-col gap-y-1.5',\n        searchIcon: 'text-muted-fg group-data-disabled:text-muted-fg ml-2.5 size-4 shrink-0',\n        clearButton: [\n            'text-muted-fg data-hovered:text-fg data-pressed:text-fg mr-1 size-8 group-data-empty:invisible data-hovered:bg-transparent data-pressed:bg-transparent'\n        ],\n        input: '[&::-webkit-search-cancel-button]:hidden'\n    }\n})\n\nconst { base, searchIcon, clearButton, input } = searchFieldStyles()\n\ninterface SearchFieldProps extends SearchFieldPrimitiveProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    isPending?: boolean\n}\n\nconst SearchField = ({\n    className,\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    isPending,\n    ...props\n}: SearchFieldProps) => {\n    return (\n        <SearchFieldPrimitive\n            aria-label={placeholder ?? props['aria-label'] ?? 'Search...'}\n            {...props}\n            className={ctr(className, base())}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                <IconSearch aria-hidden className={searchIcon()} />\n                <Input placeholder={placeholder ?? 'Search...'} className={input()} />\n                {isPending ? (\n                    <Loader variant='spin' />\n                ) : (\n                    <Button size='icon' variant='ghost' className={clearButton()}>\n                        <IconX aria-hidden />\n                    </Button>\n                )}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </SearchFieldPrimitive>\n    )\n}\n\nexport { SearchField }\nexport type { SearchFieldProps }\n"
  },
  "loader": {
    "component": "@/components/ui/loader",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconLoaderCircle } from 'hq-icons'\nimport { ProgressBar } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from './utils'\n\nconst loaderStyles = tv({\n    base: 'relative',\n    variants: {\n        color: {\n            current: 'text-current',\n            primary: 'text-primary',\n            secondary: 'text-secondary',\n            success: 'text-success',\n            warning: 'text-warning',\n            danger: 'text-danger'\n        },\n        size: {\n            sm: 'size-4',\n            md: 'size-6',\n            lg: 'size-8',\n            xl: 'size-10'\n        }\n    },\n    defaultVariants: {\n        color: 'current',\n        size: 'sm'\n    }\n})\n\ntype LoaderVariantProps = VariantProps<typeof loaderStyles>\n\nconst Bars = ({ className, ...props }: React.SVGProps<SVGSVGElement>) => (\n    <svg\n        className={cn('size-4', className)}\n        data-slot='icon'\n        viewBox='0 0 135 140'\n        xmlns='http://www.w3.org/2000/svg'\n        fill='currentColor'\n        {...props}\n    >\n        <rect y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.5s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.5s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='30' y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.25s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.25s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='60' width='15' height='140' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='90' y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.25s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.25s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='120' y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.5s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.5s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n    </svg>\n)\nconst Ring = (props: React.SVGProps<SVGSVGElement>) => <IconLoaderCircle {...props} />\nconst Spin = ({ className, ...props }: React.SVGProps<SVGSVGElement>) => (\n    <svg className={cn('size-4', className)} data-slot='icon' viewBox='0 0 2400 2400' {...props}>\n        <g strokeWidth='200' strokeLinecap='round' fill='none'>\n            <line x1='1200' y1='600' x2='1200' y2='100' />\n            <line opacity='0.5' x1='1200' y1='2300' x2='1200' y2='1800' />\n            <line opacity='0.917' x1='900' y1='680.4' x2='650' y2='247.4' />\n            <line opacity='0.417' x1='1750' y1='2152.6' x2='1500' y2='1719.6' />\n            <line opacity='0.833' x1='680.4' y1='900' x2='247.4' y2='650' />\n            <line opacity='0.333' x1='2152.6' y1='1750' x2='1719.6' y2='1500' />\n            <line opacity='0.75' x1='600' y1='1200' x2='100' y2='1200' />\n            <line opacity='0.25' x1='2300' y1='1200' x2='1800' y2='1200' />\n            <line opacity='0.667' x1='680.4' y1='1500' x2='247.4' y2='1750' />\n            <line opacity='0.167' x1='2152.6' y1='650' x2='1719.6' y2='900' />\n            <line opacity='0.583' x1='900' y1='1719.6' x2='650' y2='2152.6' />\n            <line opacity='0.083' x1='1750' y1='247.4' x2='1500' y2='680.4' />\n            <animateTransform\n                attributeName='transform'\n                attributeType='XML'\n                type='rotate'\n                keyTimes='0;0.08333;0.16667;0.25;0.33333;0.41667;0.5;0.58333;0.66667;0.75;0.83333;0.91667'\n                values='0 1199 1199;30 1199 1199;60 1199 1199;90 1199 1199;120 1199 1199;150 1199 1199;180 1199 1199;210 1199 1199;240 1199 1199;270 1199 1199;300 1199 1199;330 1199 1199'\n                dur='0.83333s'\n                begin='0.08333s'\n                repeatCount='indefinite'\n                calcMode='discrete'\n            />\n        </g>\n    </svg>\n)\n\nconst LOADERS = {\n    bars: Bars,\n    ring: Ring,\n    spin: Spin\n}\n\nconst DEFAULT_SPINNER = 'ring'\n\ninterface LoaderProps\n    extends Omit<React.ComponentPropsWithoutRef<'svg'>, 'display' | 'opacity' | 'color'>,\n        LoaderVariantProps {\n    variant?: keyof typeof LOADERS\n    percentage?: number\n    isIndeterminate?: boolean\n    formatOptions?: Intl.NumberFormatOptions\n}\n\nconst Loader = React.forwardRef<SVGSVGElement, LoaderProps>(\n    ({ isIndeterminate = true, ...props }, ref) => {\n        const { className, variant = DEFAULT_SPINNER, color, size, ...spinnerProps } = props\n        const LoaderPrimitive = LOADERS[variant in LOADERS ? variant : DEFAULT_SPINNER]\n\n        return (\n            <ProgressBar\n                aria-label={props['aria-label'] ?? 'Loading...'}\n                formatOptions={props.formatOptions}\n                isIndeterminate={isIndeterminate}\n            >\n                <LoaderPrimitive\n                    role='presentation'\n                    className={loaderStyles({\n                        color,\n                        size,\n                        className: cn([\n                            ['ring'].includes(variant) && 'animate-spin',\n                            variant === 'spin' && 'stroke-current',\n                            className\n                        ])\n                    })}\n                    ref={ref}\n                    {...spinnerProps}\n                />\n            </ProgressBar>\n        )\n    }\n)\nLoader.displayName = 'Loader'\n\nexport { Loader }\n"
  },
  "context-menu": {
    "component": "@/components/ui/context-menu",
    "raw": "'use client'\n\nimport { createContext, use, useRef, useState } from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nimport type { MenuContentProps } from './menu'\nimport { Menu } from './menu'\nimport { focusButtonStyles } from './utils'\n\ninterface ContextMenuTriggerContextType {\n    buttonRef: React.RefObject<HTMLButtonElement | null>\n    contextMenuOffset: { offset: number; crossOffset: number } | null\n    setContextMenuOffset: React.Dispatch<\n        React.SetStateAction<{ offset: number; crossOffset: number } | null>\n    >\n}\n\nconst ContextMenuTriggerContext = createContext<ContextMenuTriggerContextType | undefined>(\n    undefined\n)\n\nconst useContextMenuTrigger = () => {\n    const context = use(ContextMenuTriggerContext)\n    if (!context) {\n        throw new Error('useContextMenuTrigger must be used within a ContextMenuTrigger')\n    }\n    return context\n}\n\ninterface ContextMenuProps {\n    children: React.ReactNode\n}\n\nconst ContextMenu = ({ children }: ContextMenuProps) => {\n    const [contextMenuOffset, setContextMenuOffset] = useState<{\n        offset: number\n        crossOffset: number\n    } | null>(null)\n    const buttonRef = useRef<HTMLButtonElement>(null)\n\n    return (\n        <ContextMenuTriggerContext.Provider\n            value={{ buttonRef, contextMenuOffset, setContextMenuOffset }}\n        >\n            {children}\n        </ContextMenuTriggerContext.Provider>\n    )\n}\n\nconst contextMenuTriggerStyles = tv({\n    extend: focusButtonStyles,\n    base: 'cursor-default data-focused:outline-hidden',\n    variants: {\n        isDisabled: {\n            true: 'cursor-default opacity-50'\n        }\n    }\n})\n\ntype ContextMenuTriggerProps = React.ButtonHTMLAttributes<HTMLButtonElement>\n\nconst ContextMenuTrigger = ({ className, ...props }: ContextMenuTriggerProps) => {\n    const { buttonRef, setContextMenuOffset } = useContextMenuTrigger()\n\n    const onContextMenu = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault()\n        const rect = e.currentTarget.getBoundingClientRect()\n        setContextMenuOffset({\n            offset: e.clientY - rect.bottom,\n            crossOffset: e.clientX - rect.left\n        })\n    }\n    return (\n        <button\n            className={contextMenuTriggerStyles({ isDisabled: props.disabled, className })}\n            ref={buttonRef}\n            aria-haspopup='menu'\n            onContextMenu={onContextMenu}\n            {...props}\n        />\n    )\n}\n\ntype ContextMenuContentProps<T> = Omit<\n    MenuContentProps<T>,\n    'showArrow' | 'isOpen' | 'onOpenChange' | 'triggerRef' | 'placement' | 'shouldFlip'\n>\n\nconst ContextMenuContent = <T extends object>(props: ContextMenuContentProps<T>) => {\n    const { contextMenuOffset, setContextMenuOffset, buttonRef } = useContextMenuTrigger()\n    return contextMenuOffset ? (\n        <Menu.Content\n            isOpen={!!contextMenuOffset}\n            onOpenChange={() => setContextMenuOffset(null)}\n            triggerRef={buttonRef}\n            shouldFlip={false}\n            placement='bottom left'\n            offset={contextMenuOffset?.offset}\n            crossOffset={contextMenuOffset?.crossOffset}\n            onClose={() => setContextMenuOffset(null)}\n            {...props}\n        />\n    ) : null\n}\n\nconst ContextMenuItem = Menu.Item\nconst ContextMenuSeparator = Menu.Separator\nconst ContextMenuItemDetails = Menu.ItemDetails\nconst ContextMenuSection = Menu.Section\nconst ContextMenuHeader = Menu.Header\nconst ContextMenuKeyboard = Menu.Keyboard\nconst ContextMenuLabel = Menu.Label\n\nContextMenu.Trigger = ContextMenuTrigger\nContextMenu.Content = ContextMenuContent\nContextMenu.Item = ContextMenuItem\nContextMenu.Label = ContextMenuLabel\nContextMenu.Separator = ContextMenuSeparator\nContextMenu.ItemDetails = ContextMenuItemDetails\nContextMenu.Section = ContextMenuSection\nContextMenu.Header = ContextMenuHeader\nContextMenu.Keyboard = ContextMenuKeyboard\n\nexport { ContextMenu }\nexport type { ContextMenuProps }\n"
  },
  "multi-select": {
    "component": "@/components/ui/multi-select",
    "raw": "'use client'\n\nimport { useCallback, useEffect, useId, useRef, useState } from 'react'\n\nimport { IconChevronDown } from 'hq-icons'\nimport { useFilter } from 'react-aria'\nimport type {\n    ComboBoxProps as ComboBoxPrimitiveProps,\n    Key,\n    ValidationResult\n} from 'react-aria-components'\nimport { ComboBox } from 'react-aria-components'\nimport type { ListData } from 'react-stately'\nimport { useListData } from 'react-stately'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport type { FieldProps } from './field'\nimport { Description, FieldError, Input, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport type { RestrictedVariant, TagGroupProps } from './tag-group'\nimport { Tag } from './tag-group'\nimport { VisuallyHidden, cn } from './utils'\n\nconst multiSelectStyles = tv({\n    slots: {\n        multiSelectField: 'group flex w-full min-w-80 flex-col',\n        multiSelect: [\n            'border-muted relative flex min-h-10 flex-row flex-wrap items-center rounded-lg border px-1 transition',\n            'has-[input[data-focused=true]]:border-primary/70',\n            'has-[input[data-invalid=true][data-focused=true]]:border-primary/70',\n            'has-[input[data-invalid=true]]:border-danger',\n            'has-[input[data-focused=true]]:ring-primary/20 has-[input[data-focused=true]]:ring-4',\n            'has-[input[data-disabled=false][data-focused=true]]:border-primary/60'\n        ],\n        chevronButton:\n            'text-muted-fg data-focused:text-fg data-hovered:text-fg -mr-2 grid size-8 place-content-center rounded-sm',\n        input: 'ml-1 flex-1 px-0.5 py-1 ring-0 shadow-none',\n        comboBoxChild: 'inline-flex flex-1 flex-wrap items-center px-0',\n        comboBox: 'group peer flex flex-1'\n    }\n})\n\nconst { multiSelectField, multiSelect, chevronButton, input, comboBox, comboBoxChild } =\n    multiSelectStyles()\n\ninterface SelectedKey {\n    id: Key\n    name: string\n}\n\ninterface MultiSelectProps<T extends object>\n    extends FieldProps,\n        Omit<\n            ComboBoxPrimitiveProps<T>,\n            | 'children'\n            | 'validate'\n            | 'allowsEmptyCollection'\n            | 'inputValue'\n            | 'selectedKey'\n            | 'className'\n            | 'value'\n            | 'onSelectionChange'\n            | 'onInputChange'\n        >,\n        Pick<TagGroupProps, 'shape'> {\n    variant?: RestrictedVariant\n    items: Array<T>\n    selectedItems: ListData<T>\n    className?: string\n    onItemInserted?: (key: Key) => void\n    onItemCleared?: (key: Key) => void\n    renderEmptyState?: (inputValue: string) => React.ReactNode\n    tag: (item: T) => React.ReactNode\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst MultiSelect = <T extends SelectedKey>({\n    children,\n    items,\n    selectedItems,\n    onItemCleared,\n    onItemInserted,\n    className,\n    name,\n    renderEmptyState,\n    errorMessage,\n    ...props\n}: MultiSelectProps<T>) => {\n    const tagGroupIdentifier = useId()\n    const triggerRef = useRef<HTMLDivElement | null>(null)\n    const [width, setWidth] = useState(0)\n\n    const { contains } = useFilter({ sensitivity: 'base' })\n    const selectedKeys = selectedItems.items.map((i) => i.id)\n\n    const filter = useCallback(\n        (item: T, filterText: string) => {\n            return !selectedKeys.includes(item.id) && contains(item.name, filterText)\n        },\n        [contains, selectedKeys]\n    )\n\n    const accessibleList = useListData({\n        initialItems: items,\n        filter\n    })\n\n    const [fieldState, setFieldState] = useState<{\n        selectedKey: Key | null\n        inputValue: string\n    }>({\n        selectedKey: null,\n        inputValue: ''\n    })\n\n    const onRemove = useCallback(\n        (keys: Set<Key>) => {\n            const key = keys.values().next().value\n            if (key) {\n                selectedItems.remove(key)\n                setFieldState({\n                    inputValue: '',\n                    selectedKey: null\n                })\n                onItemCleared?.(key)\n            }\n        },\n        [selectedItems, onItemCleared]\n    )\n\n    const onSelectionChange = (id: Key | null) => {\n        if (!id) {\n            return\n        }\n\n        const item = accessibleList.getItem(id)\n\n        if (!item) {\n            return\n        }\n\n        if (!selectedKeys.includes(id)) {\n            selectedItems.append(item)\n            setFieldState({\n                inputValue: '',\n                selectedKey: id\n            })\n            onItemInserted?.(id)\n        }\n\n        accessibleList.setFilterText('')\n    }\n\n    const onInputChange = (value: string) => {\n        setFieldState((prev) => ({\n            inputValue: value,\n            selectedKey: value === '' ? null : prev.selectedKey\n        }))\n\n        accessibleList.setFilterText(value)\n    }\n\n    const popLast = useCallback(() => {\n        if (selectedItems.items.length === 0) {\n            return\n        }\n\n        const endKey = selectedItems.items[selectedItems.items.length - 1]\n\n        if (endKey) {\n            selectedItems.remove(endKey.id)\n            onItemCleared?.(endKey.id)\n        }\n\n        setFieldState({\n            inputValue: '',\n            selectedKey: null\n        })\n    }, [selectedItems, onItemCleared])\n\n    const onKeyDownCapture = useCallback(\n        (e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (e.key === 'Backspace' && fieldState.inputValue === '') {\n                popLast()\n            }\n        },\n        [popLast, fieldState.inputValue]\n    )\n\n    useEffect(() => {\n        const trigger = triggerRef.current\n        if (!trigger) return\n\n        const observer = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                setWidth(entry.target.clientWidth)\n            }\n        })\n\n        observer.observe(trigger)\n        return () => {\n            observer.unobserve(trigger)\n        }\n    }, [])\n\n    const triggerButtonRef = useRef<HTMLButtonElement | null>(null)\n\n    return (\n        <div className={multiSelectField({ className })}>\n            {props.label && <Label className='mb-1'>{props.label}</Label>}\n            <div className={props.isDisabled ? 'opacity-50' : ''}>\n                <div\n                    ref={triggerRef}\n                    className={cn(\n                        multiSelect({ className }),\n                        !props.isDisabled && 'group-hover:border-primary/60'\n                    )}\n                >\n                    <Tag.Group\n                        shape={props.shape}\n                        variant={props.variant}\n                        aria-label='Selected items'\n                        id={tagGroupIdentifier}\n                        onRemove={onRemove}\n                    >\n                        <Tag.List\n                            items={selectedItems.items}\n                            className={cn(\n                                selectedItems.items.length !== 0 && 'px-1 py-1.5',\n                                'gap-1.5 outline-hidden [&_.tag]:last:-mr-1',\n                                props.shape === 'rounded' &&\n                                    '[&_.tag]:rounded-[calc(var(--radius-lg)-4px)]'\n                            )}\n                        >\n                            {props.tag}\n                        </Tag.List>\n                    </Tag.Group>\n                    <ComboBox\n                        menuTrigger='focus'\n                        {...props}\n                        allowsEmptyCollection\n                        aria-label='Available items'\n                        className={comboBox()}\n                        items={accessibleList.items}\n                        selectedKey={fieldState.selectedKey}\n                        inputValue={fieldState.inputValue}\n                        onSelectionChange={onSelectionChange}\n                        onInputChange={onInputChange}\n                    >\n                        <div className={comboBoxChild({ className })}>\n                            <Input\n                                placeholder={props.placeholder}\n                                className={input()}\n                                onBlur={() => {\n                                    setFieldState({\n                                        inputValue: '',\n                                        selectedKey: null\n                                    })\n                                    accessibleList.setFilterText('')\n                                }}\n                                onKeyDownCapture={onKeyDownCapture}\n                            />\n\n                            <VisuallyHidden>\n                                <Button\n                                    slot='remove'\n                                    type='button'\n                                    aria-label='Remove'\n                                    size='icon'\n                                    variant='ghost'\n                                    ref={triggerButtonRef}\n                                >\n                                    <IconChevronDown />\n                                </Button>\n                            </VisuallyHidden>\n                        </div>\n                        <Popover.Picker\n                            isNonModal\n                            className='max-w-none'\n                            style={{ width: `${width}px` }}\n                            triggerRef={triggerRef}\n                            trigger='ComboBox'\n                        >\n                            <ListBox.Picker\n                                className='grid-cols-none'\n                                renderEmptyState={() =>\n                                    renderEmptyState ? (\n                                        renderEmptyState(fieldState.inputValue)\n                                    ) : (\n                                        <Description className='block p-3'>\n                                            {fieldState.inputValue ? (\n                                                <>\n                                                    No results found for:{' '}\n                                                    <strong className='text-fg font-medium'>\n                                                        {fieldState.inputValue}\n                                                    </strong>\n                                                </>\n                                            ) : (\n                                                'No options'\n                                            )}\n                                        </Description>\n                                    )\n                                }\n                                selectionMode='multiple'\n                            >\n                                {children}\n                            </ListBox.Picker>\n                        </Popover.Picker>\n                    </ComboBox>\n                    <div\n                        className='relative ml-auto flex items-center justify-center px-1 [&_button>svg]:transition peer-data-[open]:[&_button>svg]:rotate-180'\n                        aria-hidden\n                    >\n                        <button\n                            type='button'\n                            className={chevronButton()}\n                            onClick={() => triggerButtonRef.current?.click()}\n                            tabIndex={-1}\n                        >\n                            <IconChevronDown className='size-4' />\n                        </button>\n                    </div>\n                </div>\n            </div>\n            {props.description && <Description>{props.description}</Description>}\n            {<FieldError>{errorMessage}</FieldError>}\n            {name && <input hidden name={name} value={selectedKeys.join(',')} readOnly />}\n        </div>\n    )\n}\n\nMultiSelect.Tag = Tag\nMultiSelect.Item = ListBox.Item\n\nexport { MultiSelect }\nexport type { MultiSelectProps, SelectedKey }\n"
  },
  "color-wheel": {
    "component": "@/components/ui/color-wheel",
    "raw": "'use client'\n\nimport {\n    ColorWheel as ColorWheelPrimitive,\n    type ColorWheelProps as ColorWheelPrimitiveProps,\n    ColorWheelTrack\n} from 'react-aria-components'\n\nimport { ColorThumb } from './color-thumb'\n\ntype ColorWheelProps = Omit<ColorWheelPrimitiveProps, 'outerRadius' | 'innerRadius'>\n\nconst ColorWheel = (props: ColorWheelProps) => {\n    return (\n        <ColorWheelPrimitive {...props} outerRadius={100} innerRadius={74}>\n            <ColorWheelTrack\n                className='data-disabled:bg-muted/75'\n                style={({ defaultStyle, isDisabled }) => ({\n                    ...defaultStyle,\n                    background: isDisabled\n                        ? undefined\n                        : `${defaultStyle.background}, repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n                })}\n            />\n            <ColorThumb />\n        </ColorWheelPrimitive>\n    )\n}\n\nexport { ColorWheel }\nexport type { ColorWheelProps }\n"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport { Separator as Divider, type SeparatorProps as DividerProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst separatorStyles = tv({\n    base: 'bg-border shrink-0',\n    variants: {\n        orientation: {\n            horizontal: 'h-px w-full',\n            vertical: 'w-px'\n        }\n    },\n    defaultVariants: {\n        orientation: 'horizontal'\n    }\n})\n\ninterface SeparatorProps extends DividerProps {\n    className?: string\n}\n\nconst Separator = ({ className, ...props }: SeparatorProps) => {\n    return (\n        <Divider\n            {...props}\n            className={separatorStyles({\n                orientation: props.orientation,\n                className: className\n            })}\n        />\n    )\n}\n\nexport { Separator }\nexport type { SeparatorProps }\n"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport { useId } from 'react'\n\nimport { LayoutGroup, motion } from 'motion/react'\nimport type {\n    TabListProps as TabListPrimitiveProps,\n    TabPanelProps as TabPanelPrimitiveProps,\n    TabProps as TabPrimitiveProps,\n    TabsProps as TabsPrimitiveProps\n} from 'react-aria-components'\nimport {\n    TabList,\n    TabPanel,\n    Tab as TabPrimitive,\n    Tabs as TabsPrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn, cr } from './utils'\n\nconst tabsStyles = tv({\n    base: 'group/tabs flex gap-4',\n    variants: {\n        orientation: {\n            horizontal: 'flex-col',\n            vertical: 'w-[800px] flex-row'\n        }\n    }\n})\n\ninterface TabsProps extends TabsPrimitiveProps {\n    ref?: React.RefObject<HTMLDivElement>\n}\nconst Tabs = ({ className, ref, ...props }: TabsProps) => {\n    return (\n        <TabsPrimitive\n            className={cr(className, (className, renderProps) =>\n                tabsStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            ref={ref}\n            {...props}\n        />\n    )\n}\n\nconst tabListStyles = tv({\n    base: 'flex',\n    variants: {\n        orientation: {\n            horizontal: 'border-muted flex-row gap-x-5 border-b',\n            vertical: 'flex-col items-start gap-y-4 border-l'\n        }\n    }\n})\n\ninterface TabListProps<T extends object> extends TabListPrimitiveProps<T> {\n    ref?: React.RefObject<HTMLDivElement>\n}\nconst List = <T extends object>({ className, ref, ...props }: TabListProps<T>) => {\n    const id = useId()\n    return (\n        <LayoutGroup id={id}>\n            <TabList\n                ref={ref}\n                {...props}\n                className={cr(className, (className, renderProps) =>\n                    tabListStyles({ ...renderProps, className })\n                )}\n            />\n        </LayoutGroup>\n    )\n}\n\nconst tabStyles = tv({\n    base: [\n        'relative flex cursor-default items-center text-sm font-medium whitespace-nowrap outline-hidden transition *:data-[slot=icon]:mr-2 *:data-[slot=icon]:size-4',\n        'group-data-[orientation=vertical]/tabs:w-full group-data-[orientation=vertical]/tabs:py-0 group-data-[orientation=vertical]/tabs:pr-2 group-data-[orientation=vertical]/tabs:pl-4',\n        'group-data-[orientation=horizontal]/tabs:pb-3'\n    ],\n    variants: {\n        isSelected: {\n            false: 'text-muted-fg',\n            true: 'text-primary'\n        },\n        isFocusVisible: { true: 'text-primary **:first:ring-1 **:first:ring-offset-2' },\n        isHovered: { false: 'ring-0', true: 'text-primary' },\n        isDisabled: {\n            true: 'text-muted-fg/50'\n        }\n    }\n})\n\ninterface TabProps extends TabPrimitiveProps {\n    ref?: React.RefObject<HTMLButtonElement>\n}\nconst Tab = ({ children, ref, ...props }: TabProps) => {\n    return (\n        <TabPrimitive\n            ref={ref}\n            {...props}\n            className={cr(props.className, (_className, renderProps) =>\n                tabStyles({\n                    ...renderProps,\n                    className: cn('href' in props && 'cursor-pointer', _className)\n                })\n            )}\n        >\n            {({ isSelected }) => (\n                <>\n                    {children as React.ReactNode}\n                    {isSelected && (\n                        <motion.span\n                            className={cn(\n                                'bg-primary absolute rounded',\n                                // horizontal\n                                'group-data-[orientation=horizontal]/tabs:inset-x-0 group-data-[orientation=horizontal]/tabs:-bottom-px group-data-[orientation=horizontal]/tabs:h-0.5 group-data-[orientation=horizontal]/tabs:w-full',\n                                // vertical\n                                'group-data-[orientation=vertical]/tabs:left-0 group-data-[orientation=vertical]/tabs:h-[calc(100%-10%)] group-data-[orientation=vertical]/tabs:w-0.5 group-data-[orientation=vertical]/tabs:transform'\n                            )}\n                            layoutId='current-selected'\n                            transition={{ type: 'spring', stiffness: 500, damping: 40 }}\n                        />\n                    )}\n                </>\n            )}\n        </TabPrimitive>\n    )\n}\n\ninterface TabPanelProps extends TabPanelPrimitiveProps {\n    ref?: React.RefObject<HTMLDivElement>\n}\nconst Panel = ({ className, ref, ...props }: TabPanelProps) => {\n    return (\n        <TabPanel\n            {...props}\n            ref={ref}\n            className={cn(className, 'text-fg flex-1 text-sm data-focus-visible:outline-hidden')}\n        />\n    )\n}\n\nTabs.List = List\nTabs.Label = Tab\nTabs.Content = Panel\n\nexport { Tabs }\nexport type { TabListProps, TabPanelProps, TabProps, TabsProps }\n"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCalendarDays } from 'hq-icons'\nimport {\n    DatePicker as DatePickerPrimitive,\n    type DatePickerProps as DatePickerPrimitiveProps,\n    type DateValue,\n    type DialogProps,\n    type PopoverProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Calendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { Popover } from './popover'\nimport { RangeCalendar } from './range-calendar'\nimport { ctr } from './utils'\n\nconst datePickerStyles = tv({\n    slots: {\n        base: 'group flex flex-col gap-y-1.5',\n        datePickerIcon:\n            'group [&_[data-slot=icon]]:text-muted-fg pressed:bg-transparent mr-1 h-7 w-8 rounded-lg outline-offset-0 hover:bg-transparent',\n        calendarIcon: 'group-open:text-fg',\n        datePickerInput: 'w-full px-2 text-base lg:text-sm',\n        dateRangePickerInputStart: 'px-2 text-base lg:text-sm',\n        dateRangePickerInputEnd: 'flex-1 px-2 py-1.5 text-base lg:text-sm',\n        dateRangePickerDash: 'text-fg group-disabled:opacity-50'\n    }\n})\n\nconst { base, datePickerIcon, calendarIcon, datePickerInput } = datePickerStyles()\n\ninterface DatePickerOverlayProps\n    extends Omit<DialogProps, 'children' | 'className' | 'style'>,\n        Omit<PopoverProps, 'children' | 'className' | 'style'> {\n    className?: string | ((values: { defaultClassName?: string }) => string)\n    children?: React.ReactNode\n    closeButton?: boolean\n    range?: boolean\n}\n\nconst DatePickerOverlay = ({ closeButton = true, range, ...props }: DatePickerOverlayProps) => {\n    return (\n        <Popover.Content\n            showArrow={false}\n            className='flex justify-center p-4 sm:max-w-[17.2rem] sm:min-w-[17rem] sm:p-2 sm:pt-3'\n            {...props}\n        >\n            {range ? <RangeCalendar /> : <Calendar />}\n            {closeButton && (\n                <div className='mx-auto flex w-full max-w-[inherit] justify-center py-2.5 sm:hidden'>\n                    <Popover.Close shape='circle' className='w-full'>\n                        Close\n                    </Popover.Close>\n                </div>\n            )}\n        </Popover.Content>\n    )\n}\n\nconst DatePickerIcon = () => (\n    <Button size='icon' variant='ghost' className={datePickerIcon()}>\n        <IconCalendarDays aria-hidden className={calendarIcon()} />\n    </Button>\n)\n\ninterface DatePickerProps<T extends DateValue> extends DatePickerPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    portal?: Element\n}\n\nconst DatePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DatePickerProps<T>) => {\n    return (\n        <DatePickerPrimitive {...props} className={ctr(className, base())}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='min-w-40'>\n                <DateInput className={datePickerInput()} />\n                <DatePickerIcon />\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <DatePickerOverlay UNSTABLE_portalContainer={props.portal} />\n        </DatePickerPrimitive>\n    )\n}\n\nexport {\n    DatePicker,\n    DatePickerIcon,\n    DatePickerOverlay,\n    type DatePickerProps,\n    type DateValue,\n    type ValidationResult\n}\n"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\n\nimport type { HTMLAttributes } from 'react'\nimport { createContext, use, useCallback, useEffect, useState } from 'react'\n\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport { IconChevronLeft, IconChevronRight } from 'hq-icons'\nimport {\n    ListBox,\n    ListBoxItem,\n    type ListBoxItemProps,\n    ListBoxSection,\n    type ListBoxSectionProps,\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport type { ButtonProps } from './button'\nimport { Button } from './button'\nimport { cn, cr, ctr } from './utils'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselContextProps = {\n    carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n    api: ReturnType<typeof useEmblaCarousel>[1]\n    scrollPrev: () => void\n    scrollNext: () => void\n    canScrollPrev: boolean\n    canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = createContext<CarouselContextProps | null>(null)\n\nconst useCarousel = () => {\n    const context = use(CarouselContext)\n\n    if (!context) {\n        throw new Error('useCarousel must be used within a <Carousel />')\n    }\n\n    return context\n}\n\ninterface CarouselRootProps {\n    CarouselContent?: typeof CarouselContent\n    CarouselHandler?: typeof CarouselHandler\n    CarouselItem?: typeof CarouselItem\n    CarouselButton?: typeof CarouselButton\n}\n\ninterface CarouselProps extends HTMLAttributes<HTMLDivElement>, CarouselRootProps {\n    opts?: CarouselOptions\n    plugins?: CarouselPlugin\n    orientation?: 'horizontal' | 'vertical'\n    setApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = ({\n    orientation = 'horizontal',\n    opts,\n    setApi,\n    plugins,\n    className,\n    children,\n    ...props\n}: CarouselProps) => {\n    const [carouselRef, api] = useEmblaCarousel(\n        {\n            ...opts,\n            axis: orientation === 'horizontal' ? 'x' : 'y'\n        },\n        plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = useState(false)\n    const [canScrollNext, setCanScrollNext] = useState(false)\n\n    const onSelect = useCallback((api: CarouselApi) => {\n        if (!api) {\n            return\n        }\n\n        setCanScrollPrev(api.canScrollPrev())\n        setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = useCallback(() => {\n        api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = useCallback(() => {\n        api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = useCallback(\n        (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (event.key === 'ArrowLeft') {\n                event.preventDefault()\n                scrollPrev()\n            } else if (event.key === 'ArrowRight') {\n                event.preventDefault()\n                scrollNext()\n            }\n        },\n        [scrollPrev, scrollNext]\n    )\n\n    useEffect(() => {\n        if (!api || !setApi) {\n            return\n        }\n\n        setApi(api)\n    }, [api, setApi])\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        onSelect(api)\n        api.on('reInit', onSelect)\n        api.on('select', onSelect)\n\n        return () => {\n            api?.off('select', onSelect)\n        }\n    }, [api, onSelect])\n\n    return (\n        <CarouselContext.Provider\n            value={{\n                carouselRef,\n                api: api,\n                opts,\n                orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n                scrollPrev,\n                scrollNext,\n                canScrollPrev,\n                canScrollNext\n            }}\n        >\n            <div\n                onKeyDownCapture={handleKeyDown}\n                className={cn('relative', className)}\n                role='region'\n                aria-roledescription='carousel'\n                {...props}\n            >\n                {children}\n            </div>\n        </CarouselContext.Provider>\n    )\n}\n\nconst CarouselContent = <T extends object>({ className, ...props }: ListBoxSectionProps<T>) => {\n    const { carouselRef, orientation } = useCarousel()\n\n    return (\n        <ListBox\n            layout={orientation === 'vertical' ? 'stack' : 'grid'}\n            aria-label='Slides'\n            orientation={orientation}\n            ref={carouselRef}\n            className='overflow-hidden'\n        >\n            <ListBoxSection\n                className={cn(\n                    'flex',\n                    orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n                    className\n                )}\n                {...props}\n            />\n        </ListBox>\n    )\n}\n\nconst carouselItem = tv({\n    base: [\n        'min-w-0 shrink-0 grow-0 basis-full data-focus-visible:outline-hidden data-focused:outline-hidden',\n        'group relative'\n    ],\n    variants: {\n        orientation: {\n            horizontal: 'pl-4',\n            vertical: 'pt-4'\n        }\n    }\n})\n\nconst CarouselItem = ({ className, ...props }: ListBoxItemProps) => {\n    const { orientation } = useCarousel()\n\n    return (\n        <ListBoxItem\n            aria-label={`Slide ${props.id}`}\n            aria-roledescription='slide'\n            className={cr(className, (className, renderProps) =>\n                carouselItem({\n                    ...renderProps,\n                    orientation,\n                    className\n                })\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CarouselHandler = ({ ref, className, ...props }: React.ComponentProps<'div'>) => {\n    const { orientation } = useCarousel()\n    return (\n        <div\n            data-slot='carousel-handler'\n            ref={ref}\n            className={cn(\n                'relative z-10 mt-6 flex items-center gap-x-2',\n                orientation === 'horizontal' ? 'justify-end' : 'justify-center',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CarouselButton = ({\n    slot,\n    className,\n    variant = 'outline',\n    shape = 'rounded',\n    size = 'icon',\n    ref,\n    ...props\n}: ButtonProps & { slot: 'previous' | 'next' }) => {\n    const { orientation, scrollPrev, canScrollPrev, scrollNext, canScrollNext } = useCarousel()\n    const isNext = slot === 'next'\n    const canScroll = isNext ? canScrollNext : canScrollPrev\n    const scroll = isNext ? scrollNext : scrollPrev\n    const Icon = isNext ? IconChevronRight : IconChevronLeft\n\n    return (\n        <Button\n            aria-label={isNext ? 'Next slide' : 'Previous slide'}\n            data-handler={slot}\n            variant={variant}\n            ref={ref}\n            size={size}\n            shape={shape}\n            className={ctr(className, orientation === 'vertical' ? 'rotate-90' : '')}\n            isDisabled={!canScroll}\n            onPress={scroll}\n            {...props}\n        >\n            <Icon className='size-4' />\n        </Button>\n    )\n}\n\nCarousel.Content = CarouselContent\nCarousel.Handler = CarouselHandler\nCarousel.Item = CarouselItem\nCarousel.Button = CarouselButton\n\nexport { Carousel }\nexport type { CarouselApi }\n"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown, IconMenu } from 'hq-icons'\nimport type {\n    CellProps,\n    ColumnProps,\n    ColumnResizerProps,\n    TableHeaderProps as HeaderProps,\n    RowProps,\n    TableBodyProps,\n    TableProps as TablePrimitiveProps\n} from 'react-aria-components'\nimport {\n    Button,\n    Cell,\n    Collection,\n    Column,\n    ColumnResizer as ColumnResizerPrimitive,\n    ResizableTableContainer,\n    Row,\n    TableBody as TableBodyPrimitive,\n    TableHeader as TableHeaderPrimitive,\n    Table as TablePrimitive,\n    useTableOptions\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { cn, cr } from './utils'\n\nconst table = tv({\n    slots: {\n        root: '**:data-drop-target:border-primary table w-full min-w-full caption-bottom border-spacing-0 text-sm outline-hidden **:data-drop-target:border',\n        header: 'border-b',\n        row: 'tr data-focus-visible-within:bg-primary/10 group bg-bg text-muted-fg ring-primary data-selected:bg-primary/5 data-selected:data-hovered:bg-primary/10 data-focused:bg-primary/10 data-hovered:bg-primary/5 relative cursor-default border-b outline-hidden data-focus-visible:ring-1 data-focused:ring-0',\n        cellIcon:\n            'bg-muted text-fg grid size-[1.15rem] flex-none shrink-0 place-content-center rounded *:data-[slot=icon]:size-3.5 *:data-[slot=icon]:shrink-0 *:data-[slot=icon]:transition-transform *:data-[slot=icon]:duration-200',\n        columnResizer: [\n            '[&[data-resizing]>div]:bg-primary absolute top-0 right-0 bottom-0 grid w-px touch-none place-content-center px-1',\n            '&[data-resizable-direction=left]:cursor-e-resize &[data-resizable-direction=right]:cursor-w-resize data-[resizable-direction=both]:cursor-ew-resize'\n        ]\n    }\n})\n\nconst { root, header, row, cellIcon, columnResizer } = table()\n\ninterface TableProps extends TablePrimitiveProps {\n    className?: string\n    allowResize?: boolean\n}\n\nconst TableContext = React.createContext<TableProps>({\n    allowResize: false\n})\n\nconst useTableContext = () => React.useContext(TableContext)\n\nconst Table = ({ children, className, ...props }: TableProps) => (\n    <TableContext.Provider value={props}>\n        <div className='relative w-full overflow-auto'>\n            {props.allowResize ? (\n                <ResizableTableContainer className='overflow-auto'>\n                    <TablePrimitive {...props} className={root({ className })}>\n                        {children}\n                    </TablePrimitive>\n                </ResizableTableContainer>\n            ) : (\n                <TablePrimitive {...props} className={root({ className })}>\n                    {children}\n                </TablePrimitive>\n            )}\n        </div>\n    </TableContext.Provider>\n)\n\nconst ColumnResizer = ({ className, ...props }: ColumnResizerProps) => (\n    <ColumnResizerPrimitive\n        {...props}\n        className={cr(className, (className, renderProps) =>\n            columnResizer({\n                ...renderProps,\n                className\n            })\n        )}\n    >\n        <div className='bg-border h-full w-px py-3' />\n    </ColumnResizerPrimitive>\n)\n\nconst TableBody = <T extends object>(props: TableBodyProps<T>) => (\n    <TableBodyPrimitive\n        data-slot='table-body'\n        {...props}\n        className={cn('[&_.tr:last-child]:border-0')}\n    />\n)\n\ninterface TableCellProps extends CellProps {\n    className?: string\n}\n\nconst cellStyles = tv({\n    base: 'group px-3 py-3 whitespace-nowrap outline-hidden',\n    variants: {\n        allowResize: {\n            true: 'truncate overflow-hidden'\n        }\n    }\n})\nconst TableCell = ({ children, className, ...props }: TableCellProps) => {\n    const { allowResize } = useTableContext()\n    return (\n        <Cell data-slot='table-cell' {...props} className={cellStyles({ allowResize, className })}>\n            {children}\n        </Cell>\n    )\n}\n\nconst columnStyles = tv({\n    base: 'allows-sorting:cursor-pointer relative px-3 py-3 text-left font-medium whitespace-nowrap outline-hidden data-dragging:cursor-grabbing [&:has([slot=selection])]:pr-0',\n    variants: {\n        isResizable: {\n            true: 'truncate overflow-hidden'\n        }\n    }\n})\n\ninterface TableColumnProps extends ColumnProps {\n    className?: string\n    isResizable?: boolean\n}\n\nconst TableColumn = ({ isResizable = false, className, ...props }: TableColumnProps) => {\n    return (\n        <Column\n            data-slot='table-column'\n            {...props}\n            className={columnStyles({\n                isResizable,\n                className\n            })}\n        >\n            {({ allowsSorting, sortDirection, isHovered }) => (\n                <div className='flex items-center gap-2 **:data-[slot=icon]:shrink-0'>\n                    <>\n                        {props.children as React.ReactNode}\n                        {allowsSorting && (\n                            <span\n                                className={cellIcon({\n                                    className: isHovered ? 'bg-secondary-fg/10' : ''\n                                })}\n                            >\n                                <IconChevronDown\n                                    className={sortDirection === 'ascending' ? 'rotate-180' : ''}\n                                />\n                            </span>\n                        )}\n                        {isResizable && <ColumnResizer />}\n                    </>\n                </div>\n            )}\n        </Column>\n    )\n}\n\ninterface TableHeaderProps<T extends object> extends HeaderProps<T> {\n    className?: string\n    ref?: React.Ref<HTMLTableSectionElement>\n}\n\nconst TableHeader = <T extends object>({\n    children,\n    ref,\n    className,\n    columns,\n    ...props\n}: TableHeaderProps<T>) => {\n    const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n    return (\n        <TableHeaderPrimitive\n            data-slot='table-header'\n            ref={ref}\n            className={header({ className })}\n            {...props}\n        >\n            {allowsDragging && <Column className='w-0' />}\n            {selectionBehavior === 'toggle' && (\n                <Column className='w-0 pl-4'>\n                    {selectionMode === 'multiple' && <Checkbox slot='selection' />}\n                </Column>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </TableHeaderPrimitive>\n    )\n}\n\ninterface TableRowProps<T extends object> extends RowProps<T> {\n    className?: string\n    ref?: React.Ref<HTMLTableRowElement>\n}\n\nconst TableRow = <T extends object>({\n    children,\n    className,\n    columns,\n    id,\n    ref,\n    ...props\n}: TableRowProps<T>) => {\n    const { selectionBehavior, allowsDragging } = useTableOptions()\n    return (\n        <Row\n            ref={ref}\n            data-slot='table-row'\n            id={id}\n            {...props}\n            className={row({\n                className:\n                    'href' in props\n                        ? cn(\n                              'data-hovered:bg-primary/10 data-hovered:text-primary cursor-pointer',\n                              className\n                          )\n                        : ''\n            })}\n        >\n            {allowsDragging && (\n                <Cell className='group ring-primary cursor-grab pr-0 data-dragging:cursor-grabbing'>\n                    <Button\n                        className='text-muted-fg data-pressed:text-fg relative bg-transparent py-1.5 pl-3.5'\n                        slot='drag'\n                    >\n                        <IconMenu />\n                    </Button>\n                </Cell>\n            )}\n            {selectionBehavior === 'toggle' && (\n                <Cell className='pl-4'>\n                    <span\n                        aria-hidden\n                        className='bg-primary absolute inset-y-0 left-0 hidden h-full w-0.5 group-data-selected:block'\n                    />\n                    <Checkbox slot='selection' />\n                </Cell>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </Row>\n    )\n}\n\nTable.Body = TableBody\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Header = TableHeader\nTable.Row = TableRow\n\nexport { Table }\nexport type { TableBodyProps, TableCellProps, TableColumnProps, TableProps, TableRowProps }\n"
  },
  "progress-bar": {
    "component": "@/components/ui/progress-bar",
    "raw": "'use client'\n\nimport { motion } from 'motion/react'\nimport {\n    ProgressBar as ProgressBarPrimitive,\n    type ProgressBarProps as ProgressBarPrimitiveProps\n} from 'react-aria-components'\n\nimport { Label } from './field'\nimport { ctr } from './utils'\n\ninterface ProgressBarProps extends ProgressBarPrimitiveProps {\n    label?: string\n    ref?: React.RefObject<HTMLDivElement>\n}\n\nconst ProgressBar = ({ label, ref, className, ...props }: ProgressBarProps) => {\n    return (\n        <ProgressBarPrimitive ref={ref} className={ctr(className, 'flex flex-col')} {...props}>\n            {({ percentage, valueText, isIndeterminate }) => (\n                <>\n                    <div className='flex justify-between gap-2'>\n                        {label && <Label>{label}</Label>}\n                        <span className='text-muted-fg text-sm tabular-nums'>{valueText}</span>\n                    </div>\n                    <div className='bg-secondary relative mt-1 h-2 min-w-64 overflow-hidden rounded-full outline-1 -outline-offset-1 outline-transparent'>\n                        {!isIndeterminate ? (\n                            <motion.div\n                                data-slot='progress-content'\n                                className='bg-primary absolute top-0 left-0 h-full rounded-full'\n                                initial={{ width: '0%' }}\n                                animate={{ width: `${percentage}%` }}\n                                transition={{ duration: 0.5, ease: 'easeInOut' }}\n                            />\n                        ) : (\n                            <motion.div\n                                data-slot='progress-content'\n                                className='bg-primary absolute top-0 h-full rounded-full'\n                                initial={{ left: '0%', width: '40%' }}\n                                animate={{ left: ['0%', '100%', '0%'] }}\n                                transition={{\n                                    repeat: Number.POSITIVE_INFINITY,\n                                    duration: 2,\n                                    ease: 'easeInOut'\n                                }}\n                            />\n                        )}\n                    </div>\n                </>\n            )}\n        </ProgressBarPrimitive>\n    )\n}\n\nexport { ProgressBar }\nexport type { ProgressBarProps }\n"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronLeft, IconChevronRight } from 'hq-icons'\nimport { useDateFormatter } from 'react-aria'\nimport {\n    CalendarCell,\n    CalendarGrid,\n    CalendarGridBody,\n    CalendarGridHeader as CalendarGridHeaderPrimitive,\n    CalendarHeaderCell,\n    Calendar as CalendarPrimitive,\n    type CalendarProps as CalendarPrimitiveProps,\n    CalendarStateContext,\n    type DateValue,\n    Heading,\n    RangeCalendarStateContext,\n    Text,\n    useLocale\n} from 'react-aria-components'\nimport { CalendarState, RangeCalendarState } from 'react-stately'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Menu } from './menu'\nimport { cr, ctr, focusRing } from './utils'\n\nconst cellStyles = tv({\n    extend: focusRing,\n    base: 'flex size-10 cursor-default items-center justify-center rounded-lg tabular-nums sm:size-9 lg:text-sm',\n    variants: {\n        isSelected: {\n            false: 'text-fg hover:bg-secondary-fg/15 pressed:bg-secondary-fg/20',\n            true: 'bg-primary text-primary-fg'\n        },\n        isDisabled: {\n            true: 'text-muted-fg/70'\n        },\n        isInvalid: {\n            true: 'bg-danger text-danger-fg'\n        }\n    }\n})\n\ninterface CalendarProps<T extends DateValue>\n    extends Omit<CalendarPrimitiveProps<T>, 'visibleDuration'> {\n    errorMessage?: string\n    className?: string\n}\n\nconst Calendar = <T extends DateValue>({ errorMessage, className, ...props }: CalendarProps<T>) => {\n    return (\n        <CalendarPrimitive\n            className={ctr(className, 'max-w-[17.5rem] sm:max-w-[15.8rem]')}\n            {...props}\n        >\n            <CalendarHeader type='calendar' />\n            <CalendarGrid className='[&_td]:border-muted [&_td]:border-collapse [&_td]:px-0'>\n                <CalendarGridHeader />\n                <CalendarGridBody>\n                    {(date) => (\n                        <CalendarCell\n                            date={date}\n                            className={cr(className, (className, renderProps) =>\n                                cellStyles({\n                                    ...renderProps,\n                                    className\n                                })\n                            )}\n                        />\n                    )}\n                </CalendarGridBody>\n            </CalendarGrid>\n            {errorMessage && (\n                <Text slot='errorMessage' className='text-danger text-sm'>\n                    {errorMessage}\n                </Text>\n            )}\n        </CalendarPrimitive>\n    )\n}\n\nconst calendarHeaderStyles = tv({\n    slots: {\n        header: 'flex w-full justify-center gap-1 px-1 pb-5 sm:pb-4',\n        heading: 'text-muted-fg mr-2 flex-1 space-x-1 text-left font-medium tracking-tight',\n        calendarGridHeaderCell: 'text-muted-fg text-sm font-semibold lg:text-xs'\n    }\n})\n\nconst { header, heading, calendarGridHeaderCell } = calendarHeaderStyles()\n\nconst CalendarHeader = ({\n    className,\n    type,\n    ...props\n}: { type: 'calendar' | 'range-calendar' } & React.HTMLAttributes<HTMLDivElement>) => {\n    const { direction } = useLocale()\n    const stateContext = type === 'calendar' ? CalendarStateContext : RangeCalendarStateContext\n    const state = React.useContext(\n        stateContext as React.Context<CalendarState | RangeCalendarState>\n    )\n\n    return (\n        <header className={header({ className })} {...props}>\n            {state ? (\n                <div className={heading()}>\n                    <MonthDropdown {...state} />\n                    <YearDropdown {...state} />\n                </div>\n            ) : (\n                <Heading className={heading()} />\n            )}\n            <div className='flex items-center gap-1'>\n                <Button\n                    size='icon'\n                    className='[&_[data-slot=icon]]:text-fg size-8 sm:size-7'\n                    shape='circle'\n                    variant='ghost'\n                    slot='previous'\n                >\n                    {direction === 'rtl' ? <IconChevronRight /> : <IconChevronLeft aria-hidden />}\n                </Button>\n                <Button\n                    size='icon'\n                    className='[&_[data-slot=icon]]:text-fg size-8 sm:size-7'\n                    shape='circle'\n                    variant='ghost'\n                    slot='next'\n                >\n                    {direction === 'rtl' ? <IconChevronLeft /> : <IconChevronRight />}\n                </Button>\n            </div>\n        </header>\n    )\n}\n\nconst CalendarGridHeader = () => {\n    return (\n        <CalendarGridHeaderPrimitive>\n            {(day) => (\n                <CalendarHeaderCell className={calendarGridHeaderCell()}>{day}</CalendarHeaderCell>\n            )}\n        </CalendarGridHeaderPrimitive>\n    )\n}\n\nconst MonthDropdown = (state: CalendarState | RangeCalendarState) => {\n    const { timeZone, focusedDate, setFocusedDate } = state\n\n    const formatter = useDateFormatter({\n        month: 'long',\n        timeZone: timeZone\n    })\n\n    const months: string[] = []\n    const numMonths = focusedDate.calendar.getMonthsInYear(focusedDate)\n    for (let i = 1; i <= numMonths; i++) {\n        const date = focusedDate.set({ month: i })\n        months.push(formatter.format(date.toDate(timeZone)))\n    }\n\n    const onChange = (e: number) => {\n        const date = focusedDate.set({ month: e })\n        setFocusedDate(date)\n    }\n\n    return (\n        <Menu aria-label='Month'>\n            <Menu.Trigger slot={null}>{months[focusedDate.month - 1]}</Menu.Trigger>\n            <Menu.Content\n                selectionMode='single'\n                onAction={(e) => onChange(Number(e))}\n                selectedKeys={[focusedDate.month]}\n                items={months.map((month, i) => ({ value: i + 1, formatted: month }))}\n            >\n                {(item) => (\n                    <Menu.Item id={item.value}>\n                        <Menu.Label>{item.formatted}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst YearDropdown = (state: CalendarState | RangeCalendarState) => {\n    const { timeZone, focusedDate, setFocusedDate } = state\n    const formatter = useDateFormatter({\n        year: 'numeric',\n        timeZone: timeZone\n    })\n\n    const years: string[] = []\n    for (let i = -20; i <= 20; i++) {\n        const date = focusedDate.add({ years: i })\n        years.push(formatter.format(date.toDate(timeZone)))\n    }\n\n    const onChange = (e: number) => {\n        const date = focusedDate.set({ year: e })\n        setFocusedDate(date)\n    }\n\n    return (\n        <Menu aria-label='Year'>\n            <Menu.Trigger slot={null}>{years[20]}</Menu.Trigger>\n            <Menu.Content\n                selectionMode='single'\n                onAction={(e) => onChange(Number(e))}\n                selectedKeys={[focusedDate.year]}\n                items={years.map((year) => ({ value: year }))}\n            >\n                {(item) => (\n                    <Menu.Item id={item.value}>\n                        <Menu.Label>{item.value}</Menu.Label>\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nCalendar.Header = CalendarHeader\nCalendar.GridHeader = CalendarGridHeader\nexport { Calendar }\nexport type { CalendarProps }\n"
  },
  "utils": {
    "component": "@/components/ui/utils",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type ClassValue, clsx } from 'clsx'\nimport { useVisuallyHidden } from 'react-aria'\nimport { composeRenderProps } from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nconst cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs))\n\nfunction composeTailwindRenderProps<T>(\n    className: string | ((v: T) => string) | undefined,\n    tw: string | Array<string | undefined>\n): string | ((v: T) => string) {\n    return composeRenderProps(className, (className) => twMerge(tw, className))\n}\n\nconst focusRing = tv({\n    variants: {\n        isFocused: { true: 'ring-primary/20 data-invalid:ring-danger/20 ring-4 outline-hidden' },\n        isFocusVisible: { true: 'ring-primary/20 ring-4 outline-hidden' },\n        isInvalid: { true: 'ring-danger/20 ring-4' }\n    }\n})\n\nconst focusStyles = tv({\n    extend: focusRing,\n    variants: {\n        isFocused: { true: 'border-primary/70' },\n        isInvalid: { true: 'border-danger/70' }\n    }\n})\n\nconst focusButtonStyles = tv({\n    base: 'outline-primary outline outline-offset-2',\n    variants: {\n        isFocusVisible: {\n            false: 'outline-0',\n            true: 'outline-2'\n        },\n        isDisabled: {\n            false: 'cursor-pointer',\n            true: 'cursor-default opacity-50'\n        },\n        isHovered: {\n            true: 'brightness-90'\n        },\n        isPressed: {\n            true: 'brightness-95'\n        }\n    }\n})\n\nconst useMediaQuery = (query: string) => {\n    const [value, setValue] = React.useState(false)\n\n    React.useEffect(() => {\n        const onChange = (event: MediaQueryListEvent) => {\n            setValue(event.matches)\n        }\n\n        const result = matchMedia(query)\n        result.addEventListener('change', onChange)\n        setValue(result.matches)\n\n        return () => result.removeEventListener('change', onChange)\n    }, [query])\n\n    return value\n}\n\nconst VisuallyHidden = ({ children }: { children: React.ReactNode }) => {\n    const { visuallyHiddenProps } = useVisuallyHidden()\n    return <span {...visuallyHiddenProps}>{children}</span>\n}\n\nexport {\n    cn,\n    composeRenderProps as cr,\n    composeTailwindRenderProps as ctr,\n    focusButtonStyles,\n    focusRing,\n    focusStyles,\n    useMediaQuery,\n    VisuallyHidden\n}\n"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "import { IconCircleAlert, IconCircleCheck, IconInfo } from 'hq-icons'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nconst noteStyles = tv({\n    base: [\n        'w-full overflow-hidden rounded-lg p-4 inset-ring-1 inset-ring-current/10 sm:text-sm/6',\n        '[&_a]:underline data-hovered:[&_a]:underline **:[strong]:font-semibold'\n    ],\n    variants: {\n        variant: {\n            primary: [\n                'border-primary/35 [&_a]:text-primary text-primary bg-primary/10 leading-4',\n                'dark:[&_a]:text-primary'\n            ],\n            secondary: [\n                'border-muted [&_a]:text-secondary-foreground text-secondary-foreground bg-secondary/50 [&_svg]:text-secondary-foreground',\n                'dark:[&_a]:text-secondary-foreground dark:[&_svg]:text-secondary-foreground'\n            ],\n            warning:\n                'border-warning/50 dark:border-warning/25 bg-warning/5 text-warning dark:text-warning',\n            danger: 'border-danger/30 bg-danger/5 dark:bg-danger/10 text-danger',\n            success: [\n                'border-success/20 [&_a]:text-success text-success bg-success/10 [&_svg]:text-success leading-4'\n            ]\n        }\n    },\n    defaultVariants: {\n        variant: 'primary'\n    }\n})\n\ninterface NoteProps\n    extends React.HtmlHTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof noteStyles> {\n    indicator?: boolean\n}\n\nconst Note = ({ indicator = true, variant, className, ...props }: NoteProps) => {\n    const iconMap: Record<string, React.ElementType | null> = {\n        primary: IconInfo,\n        warning: IconCircleAlert,\n        danger: IconCircleAlert,\n        success: IconCircleCheck,\n        secondary: null\n    }\n\n    const IconComponent = iconMap[variant as string] || null\n\n    return (\n        <div className={noteStyles({ variant, className })} {...props}>\n            <div className='flex grow items-start'>\n                {IconComponent && indicator && (\n                    <div className='shrink-0'>\n                        <IconComponent className='mr-3 size-5 rounded-full leading-loose ring ring-current/30' />\n                    </div>\n                )}\n                <div className='text-pretty'>{props.children}</div>\n            </div>\n        </div>\n    )\n}\n\nexport { Note }\nexport type { NoteProps }\n"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nimport type { SliderProps as SliderPrimitiveProps, SliderThumbProps } from 'react-aria-components'\nimport {\n    SliderOutput,\n    Slider as SliderPrimitive,\n    SliderStateContext,\n    SliderThumb,\n    SliderTrack,\n    type SliderTrackProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, Label } from './field'\nimport { Tooltip } from './tooltip'\nimport { cr } from './utils'\n\nconst sliderStyles = tv({\n    base: 'group relative flex touch-none flex-col select-none',\n    variants: {\n        orientation: {\n            horizontal: 'w-full min-w-56 gap-y-2',\n            vertical: 'h-full min-h-56 w-1.5 items-center gap-y-2'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\ninterface SliderProps extends SliderPrimitiveProps {\n    output?: 'inline' | 'tooltip' | 'none'\n    label?: string\n    description?: string\n    thumbLabels?: string[]\n}\n\nconst Slider = ({\n    output = 'inline',\n    orientation = 'horizontal',\n    className,\n    ...props\n}: SliderProps) => {\n    const showTooltip = output === 'tooltip'\n    const [showTooltipState, setShowTooltipState] = useState(false)\n\n    const onFocusChange = () => {\n        if (showTooltip) {\n            setShowTooltipState(true)\n        }\n    }\n\n    const onHoverStart = () => {\n        if (showTooltip) {\n            setShowTooltipState(true)\n        }\n    }\n\n    const onFocusEnd = React.useCallback(() => {\n        setShowTooltipState(false)\n    }, [])\n\n    React.useEffect(() => {\n        if (showTooltip) {\n            window.addEventListener('pointerup', onFocusEnd)\n            return () => {\n                window.removeEventListener('pointerup', onFocusEnd)\n            }\n        }\n    }, [showTooltip, onFocusEnd])\n\n    const renderThumb = (value: number) => {\n        const thumb = (\n            <Thumb\n                index={value}\n                aria-label={props.thumbLabels?.[value]}\n                onFocusChange={onFocusChange}\n                onHoverStart={onHoverStart}\n            />\n        )\n\n        if (!showTooltip) return thumb\n\n        return (\n            <Tooltip delay={0} isOpen={showTooltipState} onOpenChange={setShowTooltipState}>\n                {thumb}\n                <Tooltip.Content\n                    showArrow={false}\n                    offset={orientation === 'horizontal' ? 8 : -140}\n                    crossOffset={orientation === 'horizontal' ? -85 : 0}\n                    className='min-w-6 px-1.5 py-1 text-xs'\n                    placement={orientation === 'vertical' ? 'right' : 'top'}\n                >\n                    <SliderOutput />\n                </Tooltip.Content>\n            </Tooltip>\n        )\n    }\n\n    return (\n        <SliderPrimitive\n            orientation={orientation}\n            className={cr(className, (className, renderProps) =>\n                sliderStyles({ ...renderProps, className })\n            )}\n            {...props}\n        >\n            <div className='text-fg flex'>\n                {props.label && <Label>{props.label}</Label>}\n                {output === 'inline' && (\n                    <SliderOutput className='text-muted-fg text-sm tabular-nums data-[orientation=horizontal]:ml-auto data-[orientation=vertical]:mx-auto'>\n                        {({ state }) =>\n                            state.values.map((_, i) => state.getThumbValueLabel(i)).join(' – ')\n                        }\n                    </SliderOutput>\n                )}\n            </div>\n            <Track>\n                {({ state }) => (\n                    <>\n                        <Filler />\n                        {state.values.map((_, i) => (\n                            <React.Fragment key={i}>{renderThumb(i)}</React.Fragment>\n                        ))}\n                    </>\n                )}\n            </Track>\n            {props.description && <Description>{props.description}</Description>}\n        </SliderPrimitive>\n    )\n}\n\nconst controlsStyles = tv({\n    slots: {\n        filler: [\n            'bg-primary rounded-full group-data-disabled/track:opacity-60',\n            'group-data-[orientation=horizontal]/top-0 pointer-events-none absolute group-data-[orientation=horizontal]/track:h-full group-data-[orientation=vertical]/track:bottom-0 group-data-[orientation=vertical]/track:w-full'\n        ],\n        track: [\n            'group/track bg-border relative cursor-pointer rounded-full data-disabled:cursor-default data-disabled:opacity-60',\n            'grow group-data-[orientation=horizontal]:h-1.5 group-data-[orientation=horizontal]:w-full group-data-[orientation=vertical]:w-1.5 group-data-[orientation=vertical]:flex-1'\n        ]\n    }\n})\n\nconst { track, filler } = controlsStyles()\n\nconst Track = (props: SliderTrackProps) => {\n    return (\n        <SliderTrack\n            {...props}\n            className={cr(props.className, (className) => track({ className }))}\n        />\n    )\n}\n\nconst Filler = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    const state = React.useContext(SliderStateContext)\n    const { orientation, getThumbPercent, values } = state || {}\n\n    const getStyle = () => {\n        const percent0 = getThumbPercent ? getThumbPercent(0) * 100 : 0\n        const percent1 = getThumbPercent ? getThumbPercent(1) * 100 : 0\n\n        if (values?.length === 1) {\n            return orientation === 'horizontal'\n                ? { width: `${percent0}%` }\n                : { height: `${percent0}%` }\n        }\n\n        return orientation === 'horizontal'\n            ? { left: `${percent0}%`, width: `${Math.abs(percent0 - percent1)}%` }\n            : { bottom: `${percent0}%`, height: `${Math.abs(percent0 - percent1)}%` }\n    }\n\n    return <div {...props} style={getStyle()} className={filler({ className })} />\n}\n\nconst thumbStyles = tv({\n    base: [\n        'border-fg/10 top-[50%] left-[50%] size-[1.25rem] rounded-full border bg-white ring-black outline-hidden transition-[width,height]'\n    ],\n    variants: {\n        isFocusVisible: {\n            true: 'border-primary ring-primary/20 outline-hidden'\n        },\n        isDragging: {\n            true: 'border-primary size-[1.35rem] cursor-grabbing'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\nconst Thumb = ({ className, ...props }: SliderThumbProps) => {\n    return (\n        <SliderThumb\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                thumbStyles({ ...renderProps, className })\n            )}\n        />\n    )\n}\n\nexport { Slider }\nexport type { SliderProps }\n"
  },
  "loading-dots": {
    "component": "@/components/ui/loading-dots",
    "raw": "'use client'\n\nimport { cn } from './utils'\n\nconst dots = 'mx-[1px] inline-block size-[0.3125rem] animate-blink rounded-lg'\n\nexport const LoadingDots = ({ className }: { className: string }) => {\n    return (\n        <span className='mx-2 inline-flex items-center'>\n            <span className={cn(dots, className)} />\n            <span className={cn(dots, 'animation-delay-[200ms]', className)} />\n            <span className={cn(dots, 'animation-delay-[400ms]', className)} />\n        </span>\n    )\n}\n"
  },
  "date-range-picker": {
    "component": "@/components/ui/date-range-picker",
    "raw": "'use client'\n\nimport {\n    DateRangePicker as DateRangePickerPrimitive,\n    type DateRangePickerProps as DateRangePickerPrimitiveProps,\n    type DateValue,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DateInput } from './date-field'\nimport { DatePickerIcon, DatePickerOverlay } from './date-picker'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { ctr } from './utils'\n\nconst dateRangePickerStyles = tv({\n    slots: {\n        base: 'group flex flex-col gap-y-1.5',\n        dateRangePickerInputStart: 'px-2 text-base tabular-nums lg:text-sm',\n        dateRangePickerInputEnd: 'flex-1 px-2 py-1.5 text-base tabular-nums lg:text-sm',\n        dateRangePickerDash: 'text-fg group-disabled:text-muted-fg'\n    }\n})\nconst { base, dateRangePickerInputStart, dateRangePickerInputEnd, dateRangePickerDash } =\n    dateRangePickerStyles()\n\ninterface DateRangePickerProps<T extends DateValue> extends DateRangePickerPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DateRangePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DateRangePickerProps<T>) => {\n    return (\n        <DateRangePickerPrimitive {...props} className={ctr(className, base())}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='w-auto min-w-40'>\n                <DateInput slot='start' className={dateRangePickerInputStart()} />\n                <span aria-hidden='true' className={dateRangePickerDash()}>\n                    –\n                </span>\n                <DateInput slot='end' className={dateRangePickerInputEnd()} />\n                <DatePickerIcon />\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <DatePickerOverlay range />\n        </DateRangePickerPrimitive>\n    )\n}\n\nexport { DateRangePicker, type DateRangePickerProps }\n"
  },
  "color-thumb": {
    "component": "@/components/ui/color-thumb",
    "raw": "'use client'\n\nimport { ColorThumb as ColorThumbPrimitive, type ColorThumbProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst thumbStyles = tv({\n    base: 'ring-bg top-[50%] left-[50%] size-5 rounded-full border-2',\n    variants: {\n        isFocusVisible: {\n            true: 'size-8'\n        },\n        isDragging: {\n            true: 'bg-secondary'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\nconst ColorThumb = (props: ColorThumbProps) => {\n    return (\n        <ColorThumbPrimitive\n            {...props}\n            style={({ defaultStyle, isDisabled }) => ({\n                ...defaultStyle,\n                backgroundColor: isDisabled ? undefined : defaultStyle.backgroundColor\n            })}\n            className={thumbStyles}\n        />\n    )\n}\n\nexport { ColorThumb }\n"
  },
  "color-area": {
    "component": "@/components/ui/color-area",
    "raw": "'use client'\n\nimport {\n    ColorArea as ColorAreaPrimitive,\n    type ColorAreaProps as ColorAreaPropsPrimitive\n} from 'react-aria-components'\n\nimport { ColorThumb } from './color-thumb'\nimport { ctr } from './utils'\n\ntype ColorAreaProps = ColorAreaPropsPrimitive\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n    return (\n        <ColorAreaPrimitive\n            {...props}\n            data-slot='color-area'\n            className={ctr(className, 'bg-muted size-56 shrink-0 rounded-lg')}\n            style={({ defaultStyle, isDisabled }) => ({\n                ...defaultStyle,\n                background: isDisabled ? undefined : defaultStyle.background\n            })}\n        >\n            <ColorThumb />\n        </ColorAreaPrimitive>\n    )\n}\n\nexport { ColorArea }\n"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport type { DialogProps, DialogTriggerProps, ModalOverlayProps } from 'react-aria-components'\nimport { DialogTrigger, ModalOverlay, Modal as ModalPrimitive } from 'react-aria-components'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\nimport { cr } from './utils'\n\nconst overlay = tv({\n    base: [\n        'fixed top-0 left-0 isolate z-50 h-(--visual-viewport-height) w-full',\n        'bg-fg/15 dark:bg-bg/40 flex items-end justify-end text-center sm:items-center sm:justify-center',\n        '[--visual-viewport-vertical-padding:16px] sm:[--visual-viewport-vertical-padding:32px]'\n    ],\n    variants: {\n        isBlurred: {\n            true: 'bg-bg supports-backdrop-filter:bg-bg/15 dark:supports-backdrop-filter:bg-bg/40 supports-backdrop-filter:backdrop-blur'\n        },\n        isEntering: {\n            true: 'fade-in animate-in duration-200 ease-out'\n        },\n        isExiting: {\n            true: 'fade-out animate-out duration-150 ease-in'\n        }\n    }\n})\nconst content = tv({\n    base: [\n        'bg-bg text-fg ring-fg/5 max-h-full w-full rounded-t-2xl text-left align-middle ring-1 shadow-lg',\n        'dark:ring-border overflow-hidden sm:rounded-2xl'\n    ],\n    variants: {\n        isEntering: {\n            true: [\n                'fade-in slide-in-from-bottom animate-in duration-200 ease-out',\n                'sm:zoom-in-95 sm:slide-in-from-bottom-0'\n            ]\n        },\n        isExiting: {\n            true: [\n                'slide-out-to-bottom sm:slide-out-to-bottom-0 sm:zoom-out-95 animate-out duration-150 ease-in'\n            ]\n        },\n        size: {\n            xs: 'sm:max-w-xs',\n            sm: 'sm:max-w-sm',\n            md: 'sm:max-w-md',\n            lg: 'sm:max-w-lg',\n            xl: 'sm:max-w-xl',\n            '2xl': 'sm:max-w-2xl',\n            '3xl': 'sm:max-w-3xl',\n            '4xl': 'sm:max-w-4xl',\n            '5xl': 'sm:max-w-5xl'\n        }\n    },\n    defaultVariants: {\n        size: 'lg'\n    }\n})\n\nconst Modal = (props: DialogTriggerProps) => {\n    return <DialogTrigger {...props} />\n}\n\ninterface ModalContentProps\n    extends Omit<ModalOverlayProps, 'className' | 'children'>,\n        VariantProps<typeof content> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    children?: DialogProps['children']\n    closeButton?: boolean\n    isBlurred?: boolean\n    classNames?: {\n        overlay?: ModalOverlayProps['className']\n        content?: ModalOverlayProps['className']\n    }\n}\n\nconst ModalContent = ({\n    classNames,\n    isDismissable: isDismissableInternal,\n    isBlurred = false,\n    children,\n    size,\n    role = 'dialog',\n    closeButton = true,\n    ...props\n}: ModalContentProps) => {\n    const isDismissable = isDismissableInternal ?? role !== 'alertdialog'\n\n    return (\n        <ModalOverlay\n            isDismissable={isDismissable}\n            className={cr(classNames?.overlay, (className, renderProps) => {\n                return overlay({\n                    ...renderProps,\n                    isBlurred,\n                    className\n                })\n            })}\n            {...props}\n        >\n            <ModalPrimitive\n                isDismissable={isDismissable}\n                className={cr(classNames?.content, (className, renderProps) =>\n                    content({\n                        ...renderProps,\n                        size,\n                        className\n                    })\n                )}\n                {...props}\n            >\n                <Dialog role={role}>\n                    {(values) => (\n                        <>\n                            {typeof children === 'function' ? children(values) : children}\n                            {closeButton && <Dialog.CloseIndicator isDismissable={isDismissable} />}\n                        </>\n                    )}\n                </Dialog>\n            </ModalPrimitive>\n        </ModalOverlay>\n    )\n}\n\nconst ModalTrigger = Dialog.Trigger\nconst ModalHeader = Dialog.Header\nconst ModalTitle = Dialog.Title\nconst ModalDescription = Dialog.Description\nconst ModalFooter = Dialog.Footer\nconst ModalBody = Dialog.Body\nconst ModalClose = Dialog.Close\n\nModal.Trigger = ModalTrigger\nModal.Header = ModalHeader\nModal.Title = ModalTitle\nModal.Description = ModalDescription\nModal.Footer = ModalFooter\nModal.Body = ModalBody\nModal.Close = ModalClose\nModal.Content = ModalContent\n\nexport { Modal }\n"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\n\nimport { IconCheck, IconMinus } from 'hq-icons'\nimport type {\n    CheckboxGroupProps as CheckboxGroupPrimitiveProps,\n    CheckboxProps as CheckboxPrimitiveProps,\n    ValidationResult\n} from 'react-aria-components'\nimport {\n    CheckboxGroup as CheckboxGroupPrimitive,\n    Checkbox as CheckboxPrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { cn, cr, ctr } from './utils'\n\ninterface CheckboxGroupProps extends CheckboxGroupPrimitiveProps {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst CheckboxGroup = ({ className, ...props }: CheckboxGroupProps) => {\n    return (\n        <CheckboxGroupPrimitive {...props} className={ctr(className, 'flex flex-col gap-y-2')}>\n            <Label>{props.label}</Label>\n            {props.children as React.ReactNode}\n            {props.description && <Description className='block'>{props.description}</Description>}\n            <FieldError>{props.errorMessage}</FieldError>\n        </CheckboxGroupPrimitive>\n    )\n}\n\nconst checkboxStyles = tv({\n    base: 'group flex items-center gap-2 text-sm transition',\n    variants: {\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\nconst boxStyles = tv({\n    base: 'text-bg border-fg/40 flex size-4 shrink-0 items-center justify-center rounded border transition *:data-[slot=icon]:size-3',\n    variants: {\n        isSelected: {\n            false: 'bg-bg group-data-hovered:border-primary/60 group-data-hovered:bg-primary/10',\n            true: [\n                'border-primary bg-primary text-primary-fg',\n                'group-data-invalid:border-danger/70 group-data-invalid:bg-danger group-data-invalid:text-danger-fg'\n            ]\n        },\n        isFocused: {\n            true: [\n                'border-primary ring-primary/20 ring-4',\n                'group-data-invalid:border-danger/70 group-data-invalid:text-danger-fg group-data-invalid:ring-danger/20'\n            ]\n        },\n        isInvalid: {\n            true: 'border-danger/70 bg-danger/20 text-danger-fg ring-danger/20'\n        }\n    }\n})\n\ninterface CheckboxProps extends CheckboxPrimitiveProps {\n    description?: string\n    label?: string\n}\n\nconst Checkbox = ({ className, ...props }: CheckboxProps) => {\n    return (\n        <CheckboxPrimitive\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                checkboxStyles({ ...renderProps, className })\n            )}\n        >\n            {({ isSelected, isIndeterminate, ...renderProps }) => (\n                <div\n                    className={cn(\n                        'flex gap-x-2',\n                        props.description ? 'items-start' : 'items-center'\n                    )}\n                >\n                    <div\n                        className={boxStyles({\n                            ...renderProps,\n                            isSelected: isSelected || isIndeterminate\n                        })}\n                    >\n                        {isIndeterminate ? <IconMinus /> : isSelected ? <IconCheck /> : null}\n                    </div>\n\n                    <div className='flex flex-col gap-1'>\n                        <>\n                            {props.label ? (\n                                <Label className={cn(props.description && 'text-sm/4')}>\n                                    {props.label}\n                                </Label>\n                            ) : (\n                                (props.children as React.ReactNode)\n                            )}\n                            {props.description && <Description>{props.description}</Description>}\n                        </>\n                    </div>\n                </div>\n            )}\n        </CheckboxPrimitive>\n    )\n}\n\nexport { Checkbox, CheckboxGroup }\nexport type { CheckboxGroupProps, CheckboxProps }\n"
  },
  "rich-text-field": {
    "component": "@/components/ui/rich-text-field",
    "raw": "'use client'\n\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport {\n    IconBold,\n    IconHeading1,\n    IconHeading2,\n    IconHeading3,\n    IconItalic,\n    IconList,\n    IconListOrdered,\n    IconParagraph,\n    IconRedo,\n    IconStrikethrough,\n    IconSubscript,\n    IconSuperscript,\n    IconTextQuote,\n    IconUnderline,\n    IconUndo\n} from 'hq-icons'\nimport {\n    $createParagraphNode,\n    $getRoot,\n    $getSelection,\n    $insertNodes,\n    $isRangeSelection,\n    $isRootOrShadowRoot,\n    CAN_REDO_COMMAND,\n    CAN_UNDO_COMMAND,\n    COMMAND_PRIORITY_CRITICAL,\n    FORMAT_TEXT_COMMAND,\n    REDO_COMMAND,\n    SELECTION_CHANGE_COMMAND,\n    UNDO_COMMAND\n} from 'lexical'\nimport { TextField, type ValidationResult } from 'react-aria-components'\n\nimport { CodeHighlightNode, CodeNode } from '@lexical/code'\nimport { $generateHtmlFromNodes, $generateNodesFromDOM } from '@lexical/html'\nimport { AutoLinkNode, LinkNode } from '@lexical/link'\nimport {\n    $isListNode,\n    INSERT_ORDERED_LIST_COMMAND,\n    INSERT_UNORDERED_LIST_COMMAND,\n    ListItemNode,\n    ListNode,\n    REMOVE_LIST_COMMAND\n} from '@lexical/list'\nimport { $convertToMarkdownString, TRANSFORMERS } from '@lexical/markdown'\nimport { type InitialConfigType, LexicalComposer } from '@lexical/react/LexicalComposer'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable'\nimport { LexicalErrorBoundary } from '@lexical/react/LexicalErrorBoundary'\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin'\nimport { LinkPlugin } from '@lexical/react/LexicalLinkPlugin'\nimport { ListPlugin } from '@lexical/react/LexicalListPlugin'\nimport { MarkdownShortcutPlugin } from '@lexical/react/LexicalMarkdownShortcutPlugin'\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin'\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin'\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin'\nimport type { HeadingTagType } from '@lexical/rich-text'\nimport {\n    $createHeadingNode,\n    $createQuoteNode,\n    $isHeadingNode,\n    HeadingNode,\n    QuoteNode\n} from '@lexical/rich-text'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $findMatchingParent, $getNearestNodeOfType, mergeRegister } from '@lexical/utils'\n\nimport { Button } from './button'\nimport { Description, FieldError, Label } from './field'\nimport { Menu } from './menu'\nimport { Toolbar } from './toolbar'\nimport { cn } from './utils'\n\ninterface RichTextFieldProps {\n    className?: string\n    value?: string\n    onChange?: (value: string) => void\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    isDisabled?: boolean\n    returnType?: 'markdown' | 'html'\n    hideToolbar?: boolean\n    as?: 'rich-text' | 'plain-text'\n}\n\nconst RichTextField = ({\n    className,\n    label,\n    description,\n    errorMessage,\n    isDisabled = false,\n    returnType = 'html',\n    hideToolbar = false,\n    as = 'rich-text',\n    ...props\n}: RichTextFieldProps) => {\n    const config: InitialConfigType = {\n        editable: !isDisabled,\n        namespace: 'rich-text-field',\n        theme: {\n            text: {\n                strikethrough: 'line-through',\n                underline: 'underline'\n            }\n        },\n        nodes: [\n            HeadingNode,\n            ListNode,\n            ListItemNode,\n            QuoteNode,\n            CodeNode,\n            CodeHighlightNode,\n            AutoLinkNode,\n            LinkNode\n        ],\n        onError: (error) => {\n            console.error(error)\n        }\n    }\n\n    return (\n        <LexicalComposer initialConfig={config}>\n            <div>\n                <div className='relative'>\n                    {as === 'rich-text' ? (\n                        <RichTextPlugin\n                            placeholder={\n                                <p className='text-muted-fg absolute bottom-2 left-3'>\n                                    Write something...\n                                </p>\n                            }\n                            contentEditable={\n                                <TextField\n                                    aria-label='Editor'\n                                    id='parent'\n                                    className={cn('group relative flex flex-col gap-1', className)}\n                                >\n                                    {label && <Label>{label}</Label>}\n\n                                    {!hideToolbar && <ToolbarPlugin />}\n                                    <ContentEditable\n                                        autoFocus\n                                        aria-disabled={isDisabled}\n                                        disabled={isDisabled}\n                                        className={cn(\n                                            'bg-bg min-h-32 w-full min-w-0 rounded-lg border px-2.5 py-2 text-base transition outline-none focus:outline-none sm:text-sm',\n                                            'focus:border-primary/70 hover:border-primary/60 focus:ring-primary/20 focus:ring-4',\n                                            'invalid:border-danger invalid:ring-danger/20 invalid:ring-4',\n                                            isDisabled && 'opacity-50'\n                                        )}\n                                    />\n                                    {description && <Description>{description}</Description>}\n                                    <FieldError>{errorMessage}</FieldError>\n                                </TextField>\n                            }\n                            ErrorBoundary={LexicalErrorBoundary}\n                        />\n                    ) : (\n                        <PlainTextPlugin\n                            placeholder={\n                                <p className='text-muted-fg absolute bottom-2 left-3'>\n                                    Write something...\n                                </p>\n                            }\n                            contentEditable={\n                                <TextField\n                                    aria-label='Editor'\n                                    id='parent'\n                                    className={cn('group relative flex flex-col gap-1', className)}\n                                >\n                                    {label && <Label>{label}</Label>}\n\n                                    {!hideToolbar && <Toolbar />}\n                                    <ContentEditable\n                                        autoFocus\n                                        aria-disabled={isDisabled}\n                                        disabled={isDisabled}\n                                        className={cn(\n                                            'bg-bg min-h-32 w-full min-w-0 rounded-lg border px-2.5 py-2 text-base shadow-sm transition outline-none focus:outline-none sm:text-sm',\n                                            'focus:border-primary/70 focus:ring-primary/20 hover:border-primary/60 focus:ring-4',\n                                            'invalid:border-danger invalid:ring-danger/20 invalid:ring-4',\n                                            isDisabled && 'opacity-50'\n                                        )}\n                                    />\n                                    {description && <Description>{description}</Description>}\n                                    <FieldError>{errorMessage}</FieldError>\n                                </TextField>\n                            }\n                            ErrorBoundary={LexicalErrorBoundary}\n                        />\n                    )}\n                    <HistoryPlugin />\n                </div>\n                <ListPlugin />\n                <LinkPlugin />\n                {as === 'rich-text' && <MarkdownShortcutPlugin transformers={TRANSFORMERS} />}\n                <OnChange returnType={returnType} value={props.value} onChange={props.onChange} />\n            </div>\n        </LexicalComposer>\n    )\n}\n\ninterface OnChangeProps {\n    value?: string\n    onChange?: (value: string) => void\n    returnType: 'markdown' | 'html'\n}\n\nfunction OnChange({ value, onChange, returnType }: OnChangeProps) {\n    const [editor] = useLexicalComposerContext()\n    const [isFirstRender, setIsFirstRender] = React.useState(true)\n\n    React.useEffect(() => {\n        if (returnType === 'html') {\n            if (!value || !isFirstRender) return\n\n            setIsFirstRender(false)\n            editor.update(() => {\n                const currentHTML = $generateHtmlFromNodes(editor)\n                if (currentHTML !== value) {\n                    $getRoot().clear()\n                    const parser = new DOMParser()\n                    const dom = parser.parseFromString(value, 'text/html')\n                    const nodes = $generateNodesFromDOM(editor, dom)\n                    $insertNodes(nodes)\n                }\n            })\n        }\n    }, [editor, value, isFirstRender, returnType])\n\n    React.useEffect(() => {\n        setIsFirstRender(true)\n    }, [value])\n\n    return (\n        <OnChangePlugin\n            onChange={(editorState) => {\n                editorState.read(() => {\n                    onChange?.(\n                        returnType === 'markdown'\n                            ? $convertToMarkdownString(TRANSFORMERS, undefined, true)\n                            : $generateHtmlFromNodes(editor)\n                    )\n                })\n            }}\n        />\n    )\n}\n\nfunction BlockTypeDropdown({ blockType }: { blockType: string }) {\n    const blockIcons = {\n        h1: <IconHeading1 />,\n        h2: <IconHeading2 />,\n        h3: <IconHeading3 />,\n        paragraph: <IconParagraph />,\n        bullet: <IconList />,\n        number: <IconListOrdered />,\n        quote: <IconTextQuote />\n    }\n    const [editor] = useLexicalComposerContext()\n\n    const formatHeading = (headingLevel: HeadingTagType) => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createHeadingNode(headingLevel))\n        })\n    }\n\n    const formatParagraph = () => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createParagraphNode())\n        })\n    }\n\n    const formatOrderedList = () => {\n        if (blockType !== 'number') {\n            editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined)\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined)\n        }\n    }\n\n    const formatUnorderedList = () => {\n        if (blockType !== 'bullet') {\n            editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined)\n        } else {\n            editor.dispatchCommand(REMOVE_LIST_COMMAND, undefined)\n        }\n    }\n\n    const formatQuote = () => {\n        editor.update(() => {\n            const selection = $getSelection()\n            $setBlocksType(selection, () => $createQuoteNode())\n        })\n    }\n\n    return (\n        <Menu>\n            <Button isDisabled={!editor.isEditable()} variant='outline' size='icon'>\n                {blockIcons[blockType as keyof typeof blockIcons]}\n            </Button>\n            <Menu.Content selectionMode='single' aria-label='Block type' selectedKeys={[blockType]}>\n                <Menu.Item id='paragraph' onAction={formatParagraph}>\n                    <IconParagraph />\n                    <Menu.Label>Paragraph</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='h1' onAction={() => formatHeading('h1')}>\n                    <IconHeading1 />\n                    <Menu.Label>Heading 1</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='h2' onAction={() => formatHeading('h2')}>\n                    <IconHeading2 />\n                    <Menu.Label>Heading 2</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='h3' onAction={() => formatHeading('h3')}>\n                    <IconHeading3 />\n                    <Menu.Label>Heading 3</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='bullet' onAction={formatUnorderedList}>\n                    <IconList />\n                    <Menu.Label>Unordered List</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='number' onAction={formatOrderedList}>\n                    <IconListOrdered />\n                    <Menu.Label>Ordered List</Menu.Label>\n                </Menu.Item>\n                <Menu.Item id='quote' onAction={formatQuote}>\n                    <IconTextQuote />\n                    <Menu.Label>Quote</Menu.Label>\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nexport function ToolbarPlugin() {\n    const [editor] = useLexicalComposerContext()\n    const [formatText, setFormatText] = React.useState({\n        bold: false,\n        italic: false,\n        underline: false,\n        strikethrough: false,\n        subscript: false,\n        superscript: false\n    })\n    const [blockType, setBlockType] = useState<string>('paragraph')\n\n    const [canUndo, setCanUndo] = useState<boolean>(false)\n    const [canRedo, setCanRedo] = useState<boolean>(false)\n\n    const $updateToolbar = useCallback(() => {\n        const selection = $getSelection()\n        if ($isRangeSelection(selection)) {\n            setFormatText({\n                bold: selection.hasFormat('bold'),\n                italic: selection.hasFormat('italic'),\n                underline: selection.hasFormat('underline'),\n                strikethrough: selection.hasFormat('strikethrough'),\n                subscript: selection.hasFormat('subscript'),\n                superscript: selection.hasFormat('superscript')\n            })\n            const anchorNode = selection.anchor.getNode()\n\n            let element =\n                anchorNode.getKey() === 'root'\n                    ? anchorNode\n                    : $findMatchingParent(anchorNode, (e) => {\n                          const parent = e.getParent()\n                          return parent !== null && $isRootOrShadowRoot(parent)\n                      })\n\n            if (element === null) {\n                element = anchorNode.getTopLevelElementOrThrow()\n            }\n\n            const elementDOM = editor.getElementByKey(element.getKey())\n\n            if (elementDOM !== null) {\n                if ($isListNode(element)) {\n                    const parentList = $getNearestNodeOfType<ListNode>(anchorNode, ListNode)\n                    const type = parentList ? parentList.getListType() : element.getListType()\n                    setBlockType(type)\n                } else {\n                    const type = $isHeadingNode(element) ? element.getTag() : element.getType()\n                    setBlockType(type)\n                }\n            }\n        }\n    }, [editor])\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerCommand(\n                SELECTION_CHANGE_COMMAND,\n                () => {\n                    $updateToolbar()\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            ),\n            editor.registerUpdateListener(({ editorState }) => {\n                editorState.read(() => {\n                    $updateToolbar()\n                })\n            })\n        )\n    }, [editor, $updateToolbar])\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerCommand(\n                CAN_UNDO_COMMAND,\n                (payload) => {\n                    setCanUndo(payload)\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            ),\n            editor.registerCommand(\n                CAN_REDO_COMMAND,\n                (payload) => {\n                    setCanRedo(payload)\n                    return false\n                },\n                COMMAND_PRIORITY_CRITICAL\n            )\n        )\n    }, [editor])\n\n    return (\n        <Toolbar className='mb-2' aria-label='Toolbar'>\n            <Toolbar.Group aria-label='Formats'>\n                <BlockTypeDropdown blockType={blockType} />\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.bold}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'bold')\n                    }}\n                >\n                    <IconBold />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.italic}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic')\n                    }}\n                >\n                    <IconItalic />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.underline}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'underline')\n                    }}\n                >\n                    <IconUnderline />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.strikethrough}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'strikethrough')\n                    }}\n                >\n                    <IconStrikethrough />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.subscript}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'subscript')\n                    }}\n                >\n                    <IconSubscript />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    isDisabled={!editor.isEditable()}\n                    size='icon'\n                    isSelected={formatText.superscript}\n                    onChange={() => {\n                        editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'superscript')\n                    }}\n                >\n                    <IconSuperscript />\n                </Toolbar.Item>\n            </Toolbar.Group>\n            <Toolbar.Separator />\n            <Toolbar.Group aria-label='Actions'>\n                <Toolbar.Item\n                    size='icon'\n                    isDisabled={!canUndo || !editor.isEditable()}\n                    isSelected={false}\n                    onPress={() => editor.dispatchCommand(UNDO_COMMAND, undefined)}\n                >\n                    <IconUndo />\n                </Toolbar.Item>\n                <Toolbar.Item\n                    size='icon'\n                    isDisabled={!canRedo || !editor.isEditable()}\n                    isSelected={false}\n                    onPress={() => editor.dispatchCommand(REDO_COMMAND, undefined)}\n                >\n                    <IconRedo />\n                </Toolbar.Item>\n            </Toolbar.Group>\n        </Toolbar>\n    )\n}\n\nexport { RichTextField }\n"
  },
  "sidebar": {
    "component": "@/components/ui/sidebar",
    "raw": "'use client'\n\nimport { createContext, use, useCallback, useEffect, useMemo, useState } from 'react'\n\nimport { IconMenu, IconPanelLeftClose } from 'hq-icons'\nimport type {\n    ButtonProps,\n    DisclosureGroupProps,\n    DisclosureProps,\n    LinkProps,\n    LinkRenderProps,\n    SeparatorProps as SidebarSeparatorProps\n} from 'react-aria-components'\nimport {\n    Disclosure,\n    DisclosureGroup,\n    DisclosurePanel,\n    Header,\n    Heading,\n    Link,\n    Separator,\n    Text,\n    Button as Trigger\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Badge } from './badge'\nimport { Button } from './button'\nimport { Indicator } from './disclosure'\nimport { Sheet } from './sheet'\nimport { Tooltip } from './tooltip'\nimport { cn, cr, ctr, useMediaQuery } from './utils'\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar:state'\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\ntype SidebarContextProps = {\n    state: 'expanded' | 'collapsed'\n    open: boolean\n    setOpen: (open: boolean) => void\n    isOpenOnMobile: boolean\n    setIsOpenOnMobile: (open: boolean) => void\n    isMobile: boolean\n    toggleSidebar: () => void\n    fixed: boolean\n}\n\nconst SidebarContext = createContext<SidebarContextProps | null>(null)\n\nconst useSidebar = () => {\n    const context = use(SidebarContext)\n    if (!context) {\n        throw new Error('useSidebar must be used within a Sidebar.')\n    }\n\n    return context\n}\n\ninterface SidebarProviderProps extends React.ComponentProps<'div'> {\n    defaultOpen?: boolean\n    isOpen?: boolean\n    shortcut?: string\n    onOpenChange?: (open: boolean) => void\n    fixed?: boolean\n}\n\nconst SidebarProvider = ({\n    defaultOpen = true,\n    isOpen: openProp,\n    onOpenChange: setOpenProp,\n    className,\n    children,\n    shortcut = 'b',\n    fixed = false,\n    ref,\n    ...props\n}: SidebarProviderProps) => {\n    const isMobile = useMediaQuery('(max-width: 767px)')\n    const [openMobile, setOpenMobile] = useState(false)\n\n    const [internalOpenState, setInternalOpenState] = useState(defaultOpen)\n    const open = openProp ?? internalOpenState\n    const setOpen = useCallback(\n        (value: boolean | ((value: boolean) => boolean)) => {\n            const openState = typeof value === 'function' ? value(open) : value\n\n            if (setOpenProp) {\n                setOpenProp(openState)\n            } else {\n                setInternalOpenState(openState)\n            }\n\n            document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n        },\n        [setOpenProp, open]\n    )\n\n    const toggleSidebar = useCallback(() => {\n        return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n    }, [isMobile, setOpen])\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === shortcut && (event.metaKey || event.ctrlKey) && !fixed) {\n                event.preventDefault()\n                toggleSidebar()\n            }\n        }\n\n        window.addEventListener('keydown', handleKeyDown)\n        return () => window.removeEventListener('keydown', handleKeyDown)\n    }, [toggleSidebar, shortcut, fixed])\n\n    const state = open ? 'expanded' : 'collapsed'\n\n    const contextValue = useMemo<SidebarContextProps>(\n        () => ({\n            fixed,\n            state,\n            open,\n            setOpen,\n            isMobile,\n            isOpenOnMobile: openMobile,\n            setIsOpenOnMobile: setOpenMobile,\n            toggleSidebar\n        }),\n        [state, fixed, open, setOpen, isMobile, openMobile, toggleSidebar]\n    )\n\n    return (\n        <SidebarContext value={contextValue}>\n            <div\n                className={cn(\n                    '@container **:data-[slot=icon]:shrink-0',\n                    '[--sidebar-width-dock:3.25rem] [--sidebar-width-mobile:18rem] [--sidebar-width:17rem]',\n                    '[--sidebar-border:color-mix(in_oklch,var(--color-bg)_25%,black_6%)]',\n                    'dark:[--sidebar-border:color-mix(in_oklch,var(--color-bg)_55%,white_10%)]',\n                    '[--sidebar-accent:color-mix(in_oklab,var(--color-bg)_95%,black_5%)]',\n                    'dark:[--sidebar-accent:color-mix(in_oklab,var(--color-bg)_90%,white_10%)]',\n                    'text-fg flex min-h-svh w-full',\n                    'group/sidebar-root has-data-[sidebar-variant=inset]:bg-bg',\n                    className\n                )}\n                ref={ref}\n                {...props}\n            >\n                {children}\n            </div>\n        </SidebarContext>\n    )\n}\n\nconst gap = tv({\n    base: [\n        'w-(--sidebar-width) group-data-[sidebar-collapsible=hidden]/sidebar-container:w-0',\n        'relative h-svh bg-transparent transition-[width] duration-200 ease-linear',\n        'group-data-[sidebar-side=right]/sidebar-container:rotate-180'\n    ],\n    variants: {\n        variant: {\n            default:\n                'group-data-[sidebar-collapsible=dock]/sidebar-container:w-(--sidebar-width-dock)',\n            fleet: 'group-data-[sidebar-collapsible=dock]/sidebar-container:w-(--sidebar-width-dock)',\n            float: 'group-data-[sidebar-collapsible=dock]/sidebar-container:w-[calc(var(--sidebar-width-dock)+theme(spacing.4))]',\n            inset: 'group-data-[sidebar-collapsible=dock]/sidebar-container:w-[calc(var(--sidebar-width-dock)+theme(spacing.2))]'\n        }\n    }\n})\n\nconst sidebar = tv({\n    base: [\n        'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear not-has-data-sidebar-footer:pb-2 md:flex',\n        'bg-bg min-h-svh',\n        '**:data-[slot=disclosure]:border-0 **:data-[slot=disclosure]:px-2.5'\n    ],\n    variants: {\n        side: {\n            left: 'left-0 group-data-[sidebar-collapsible=hidden]/sidebar-container:left-[calc(var(--sidebar-width)*-1)]',\n            right: 'right-0 group-data-[sidebar-collapsible=hidden]/sidebar-container:right-[calc(var(--sidebar-width)*-1)]'\n        },\n        variant: {\n            float: 'bg-bg p-2 group-data-[sidebar-collapsible=dock]/sidebar-container:w-[calc(var+theme(spacing.4)+2px)]',\n            inset: [\n                'bg-bg p-2 group-data-[sidebar-collapsible=dock]/sidebar-container:w-[calc(var(--sidebar-width-dock)+theme(spacing.2)+2px)]'\n            ],\n            fleet: [\n                'group-data-[sidebar-collapsible=dock]/sidebar-container:w-(--sidebar-width-dock)',\n                '**:data-sidebar-disclosure:gap-y-0 **:data-sidebar-disclosure:px-0 **:data-sidebar-section:gap-y-0 **:data-sidebar-section:px-0',\n                'group-data-[sidebar-side=left]/sidebar-container:border-r group-data-[sidebar-side=right]/sidebar-container:border-l'\n            ],\n            default: [\n                'group-data-[sidebar-collapsible=dock]/sidebar-container:w-(--sidebar-width-dock) group-data-[sidebar-side=left]/sidebar-container:border-(--sidebar-border)',\n                'group-data-[sidebar-side=left]/sidebar-container:border-r group-data-[sidebar-side=right]/sidebar-container:border-l'\n            ]\n        }\n    }\n})\n\ninterface SidebarProps extends React.ComponentProps<'div'> {\n    variant?: 'default' | 'float' | 'inset' | 'fleet'\n    collapsible?: 'hidden' | 'dock' | 'none'\n    side?: 'left' | 'right'\n    closeButton?: boolean\n}\n\nconst Sidebar = ({\n    closeButton = true,\n    collapsible = 'hidden',\n    side = 'left',\n    variant = 'default',\n    className,\n    ...props\n}: SidebarProps) => {\n    const { isMobile, state, isOpenOnMobile, setIsOpenOnMobile } = useSidebar()\n\n    if (collapsible === 'none' && !isMobile) {\n        return (\n            <div\n                data-sidebar-variant={variant}\n                data-sidebar-collapsible='none'\n                className={cn(\n                    'bg-bg text-fg border-muted flex h-full min-h-screen w-(--sidebar-width) flex-col border-r',\n                    className\n                )}\n                {...props}\n            />\n        )\n    }\n\n    if (isMobile) {\n        return (\n            <Sheet isOpen={isOpenOnMobile} onOpenChange={setIsOpenOnMobile} {...props}>\n                <Sheet.Content\n                    closeButton={closeButton}\n                    aria-label='Sidebar'\n                    data-sidebar-variant='default'\n                    classNames={{\n                        content: 'w-(--sidebar-width-mobile) [&>button]:hidden'\n                    }}\n                    isFloat={variant === 'float'}\n                    side={side}\n                >\n                    <Sheet.Body className='px-0 sm:px-0'>{props.children}</Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        )\n    }\n\n    return (\n        <div\n            data-sidebar-state={state}\n            data-sidebar-collapsible={state === 'collapsed' ? collapsible : ''}\n            data-sidebar-variant={variant}\n            data-sidebar-side={side}\n            className='group/sidebar-container peer text-fg hidden md:block'\n            {...props}\n        >\n            <div aria-hidden='true' className={gap({ variant })} />\n            <div\n                className={sidebar({\n                    side,\n                    variant,\n                    className\n                })}\n                {...props}\n            >\n                <div\n                    data-sidebar='default'\n                    className={twJoin(\n                        'text-fg flex h-full w-full flex-col',\n                        'group-data-[sidebar-variant=inset]/sidebar-container:bg-bg',\n                        'group-data-[sidebar-variant=float]/sidebar-container:bg-bg group-data-[sidebar-variant=float]/sidebar-container:rounded-lg group-data-[sidebar-variant=float]/sidebar-container:border group-data-[sidebar-variant=float]/sidebar-container:border-(--sidebar-border) group-data-[sidebar-variant=float]/sidebar-container:shadow-xs'\n                    )}\n                >\n                    {props.children}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst header = tv({\n    base: 'mb-2 flex flex-col **:data-[slot=sidebar-label-mask]:hidden',\n    variants: {\n        collapsed: {\n            false: 'px-4 py-[calc(var(--spacing)*4)]',\n            true: 'mt-2 p-5 group-data-[sidebar-variant=float]/sidebar-container:mt-2 md:mx-auto md:size-9 md:items-center md:justify-center md:rounded-lg md:p-0 md:hover:bg-(--sidebar-accent)'\n        }\n    }\n})\n\nconst SidebarHeader = ({ className, ref, ...props }: React.ComponentProps<'div'>) => {\n    const { state } = use(SidebarContext)!\n    return (\n        <div\n            ref={ref}\n            data-sidebar-header='true'\n            className={header({ collapsed: state === 'collapsed', className })}\n            {...props}\n        />\n    )\n}\n\nconst footer = tv({\n    base: [\n        'mt-auto flex flex-col p-2',\n        'in-data-[sidebar-variant=fleet]:mt-0 in-data-[sidebar-variant=fleet]:p-0',\n        'in-data-[sidebar-variant=fleet]:**:data-[slot=menu-trigger]:rounded-none',\n        '**:data-[slot=menu-trigger]:relative **:data-[slot=menu-trigger]:overflow-hidden',\n        '**:data-[slot=menu-trigger]:rounded-lg',\n        '**:data-[slot=menu-trigger]:flex **:data-[slot=menu-trigger]:cursor-default **:data-[slot=menu-trigger]:items-center **:data-[slot=menu-trigger]:p-2 **:data-[slot=menu-trigger]:outline-hidden sm:**:data-[slot=menu-trigger]:text-sm',\n        '**:data-[slot=menu-trigger]:data-hovered:text-fg **:data-[slot=menu-trigger]:data-hovered:bg-(--sidebar-accent)'\n    ],\n    variants: {\n        collapsed: {\n            false: [\n                '**:data-avatar:size-8 **:data-avatar:*:size-8 **:data-[slot=menu-trigger]:**:data-avatar:mr-2',\n                '**:data-[slot=menu-trigger]:w-full **:data-[slot=menu-trigger]:data-pressed:**:data-[slot=chevron]:rotate-0'\n            ],\n            true: [\n                '**:data-avatar:size-6 **:data-avatar:*:size-6',\n                '**:data-[slot=chevron]:hidden **:data-[slot=menu-label]:hidden',\n                '**:data-[slot=menu-trigger]:grid **:data-[slot=menu-trigger]:size-8 **:data-[slot=menu-trigger]:place-content-center'\n            ]\n        }\n    }\n})\n\nconst SidebarFooter = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    const { state, isMobile } = useSidebar()\n    const collapsed = state === 'collapsed' && !isMobile\n    return (\n        <div data-sidebar-footer='true' className={footer({ collapsed, className })} {...props} />\n    )\n}\n\nconst SidebarContent = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    const { state } = useSidebar()\n    return (\n        <div\n            data-sidebar-content='true'\n            className={cn(\n                'flex max-h-[calc(100svh-9rem)] min-h-0 flex-1 scroll-mb-96 flex-col overflow-auto *:data-sidebar-section:border-l-0',\n                state === 'collapsed' && 'items-center',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst SidebarSectionGroup = ({ className, ...props }: React.ComponentProps<'section'>) => {\n    const { state, isMobile } = useSidebar()\n    const collapsed = state === 'collapsed' && !isMobile\n    return (\n        <section\n            data-sidebar-section-group='true'\n            className={cn(\n                'flex w-full flex-col gap-y-6',\n                collapsed && 'items-center justify-center',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst SidebarSection = ({\n    className,\n    ...props\n}: React.ComponentProps<'div'> & { title?: string }) => {\n    const { state } = useSidebar()\n    return (\n        <div\n            data-sidebar-section='true'\n            className={cn(\n                'col-span-full flex flex-col gap-y-0.5 px-2 in-data-[sidebar-variant=fleet]:px-0 **:data-sidebar-section:**:gap-y-0 **:data-sidebar-section:pr-0',\n                className\n            )}\n            {...props}\n        >\n            {state !== 'collapsed' && 'title' in props && (\n                <Header className='text-fg/70 ring-sidebar-ring mb-1 flex shrink-0 items-center rounded-md px-2.5 text-xs font-medium transition-[margin,opa] duration-200 ease-linear outline-none group-data-[sidebar-collapsible=dock]/sidebar-container:-mt-8 group-data-[sidebar-collapsible=dock]/sidebar-container:opacity-0 data-focus-visible:ring-2 *:data-[slot=icon]:size-4 *:data-[slot=icon]:shrink-0'>\n                    {props.title}\n                </Header>\n            )}\n            <div className='grid grid-cols-[auto_1fr] gap-y-0.5'>{props.children}</div>\n        </div>\n    )\n}\n\nconst sidebarItemStyles = tv({\n    base: [\n        'group text-fg/70 relative col-span-full cursor-pointer overflow-hidden rounded-lg px-[calc(var(--spacing)*2.3)] py-[calc(var(--spacing)*1.3)] outline-hidden sm:text-sm/6',\n        '**:data-[slot=menu-trigger]:absolute **:data-[slot=menu-trigger]:right-0 **:data-[slot=menu-trigger]:-mr-1 **:data-[slot=menu-trigger]:flex **:data-[slot=menu-trigger]:h-full **:data-[slot=menu-trigger]:w-[calc(var(--sidebar-width)-90%)] **:data-[slot=menu-trigger]:items-center **:data-[slot=menu-trigger]:justify-end **:data-[slot=menu-trigger]:pr-2.5',\n        '**:data-avatar:size-4 **:data-avatar:shrink-0 **:data-avatar:*:size-4 **:data-[slot=icon]:size-4 **:data-[slot=icon]:shrink-0',\n        'in-data-[sidebar-variant=fleet]:rounded-none'\n    ],\n    variants: {\n        collapsed: {\n            false: 'grid grid-cols-[auto_1fr_1.5rem_0.5rem_auto] items-center **:data-avatar:mr-2 **:data-avatar:*:mr-2 **:data-[slot=icon]:mr-2 supports-[grid-template-columns:subgrid]:grid-cols-subgrid',\n            true: 'flex size-9 items-center justify-center gap-x-0 p-0 not-has-data-[slot=icon]:hidden **:data-[slot=menu-trigger]:hidden'\n        },\n        isCurrent: {\n            true: 'text-fg data-hovered:text-fg **:data-[slot=icon]:text-fg [&_.text-muted-fg]:text-fg/80 bg-(--sidebar-accent) data-hovered:bg-(--sidebar-accent)/90 **:data-[slot=menu-trigger]:from-(--sidebar-accent)'\n        },\n        isActive: {\n            true: 'text-fg bg-(--sidebar-accent) **:data-[slot=menu-trigger]:flex'\n        },\n        isDisabled: {\n            true: 'cursor-default opacity-50'\n        }\n    }\n})\n\ninterface SidebarItemProps extends Omit<React.ComponentProps<typeof Link>, 'children'> {\n    isCurrent?: boolean\n    tooltip?: React.ReactNode | string\n    children?:\n        | React.ReactNode\n        | ((\n              values: LinkRenderProps & { defaultChildren: React.ReactNode; isCollapsed: boolean }\n          ) => React.ReactNode)\n    badge?: string | number | undefined\n}\n\nconst SidebarItem = ({\n    isCurrent,\n    tooltip,\n    children,\n    badge,\n    className,\n    ref,\n    ...props\n}: SidebarItemProps) => {\n    const { state, isMobile } = useSidebar()\n    const isCollapsed = state === 'collapsed' && !isMobile\n    const link = (\n        <Link\n            ref={ref}\n            data-sidebar-item='true'\n            aria-current={isCurrent ? 'page' : undefined}\n            className={cr(className, (cls, renderProps) =>\n                sidebarItemStyles({\n                    ...renderProps,\n                    isCurrent,\n                    collapsed: isCollapsed,\n                    isActive:\n                        renderProps.isPressed ||\n                        renderProps.isFocusVisible ||\n                        renderProps.isHovered,\n                    className: cls\n                })\n            )}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof children === 'function'\n                        ? children({ ...values, isCollapsed })\n                        : children}\n\n                    {badge &&\n                        (state !== 'collapsed' ? (\n                            <Badge\n                                shape='rounded'\n                                variant='primary'\n                                data-slot='sidebar-badge'\n                                className='inset-ring-primary/20 absolute inset-y-1/2 right-1.5 h-5.5 w-auto -translate-y-1/2 text-[10px] inset-ring-1 transition-colors group-data-current:inset-ring-transparent'\n                            >\n                                {badge}\n                            </Badge>\n                        ) : (\n                            <div\n                                aria-hidden\n                                className='bg-primary absolute top-1 right-1 size-1.5 rounded-full'\n                            />\n                        ))}\n                </>\n            )}\n        </Link>\n    )\n\n    return isCollapsed && tooltip ? (\n        <Tooltip delay={0}>\n            {link}\n            <Tooltip.Content\n                className='**:data-[slot=icon]:hidden **:data-[slot=sidebar-label-mask]:hidden'\n                variant='inverse'\n                showArrow={false}\n                placement='right'\n            >\n                {tooltip}\n            </Tooltip.Content>\n        </Tooltip>\n    ) : (\n        link\n    )\n}\n\nconst sidebarLink = tv({\n    base: 'col-span-full items-center focus:outline-hidden',\n    variants: {\n        collapsed: {\n            false: 'grid grid-cols-[auto_1fr_1.5rem_0.5rem_auto] supports-[grid-template-columns:subgrid]:grid-cols-subgrid',\n            true: 'absolute inset-0 flex size-full justify-center'\n        }\n    }\n})\n\ninterface SidebarLinkProps extends LinkProps {\n    ref?: React.Ref<HTMLAnchorElement>\n}\nconst SidebarLink = ({ className, ref, ...props }: SidebarLinkProps) => {\n    const { state, isMobile } = useSidebar()\n    const collapsed = state === 'collapsed' && !isMobile\n    return (\n        <Link\n            ref={ref}\n            className={cr(className, (className, renderProps) =>\n                sidebarLink({\n                    ...renderProps,\n                    collapsed,\n                    className\n                })\n            )}\n            {...props}\n        />\n    )\n}\n\nconst SidebarInset = ({ className, ref, ...props }: React.ComponentProps<'main'>) => {\n    return (\n        <main\n            ref={ref}\n            className={cn(\n                'relative flex min-h-svh w-full flex-1 flex-col peer-data-[sidebar-variant=inset]:border peer-data-[sidebar-variant=inset]:border-(--sidebar-border)',\n                'bg-bg dark:peer-data-[sidebar-variant=inset]:bg-bg peer-data-[sidebar-variant=inset]:overflow-hidden',\n                'peer-data-[sidebar-variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[sidebar-variant=inset]:m-2 md:peer-data-[sidebar-variant=inset]:ml-0 md:peer-data-[sidebar-variant=inset]:rounded-xl md:peer-data-[sidebar-variant=inset]:shadow-xs md:peer-data-[sidebar-state=collapsed]:peer-data-[sidebar-variant=inset]:ml-2',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\ntype SidebarDisclosureGroupProps = DisclosureGroupProps\nconst SidebarDisclosureGroup = ({\n    allowsMultipleExpanded = true,\n    className,\n    ...props\n}: SidebarDisclosureGroupProps) => {\n    return (\n        <DisclosureGroup\n            data-sidebar-disclosure-group='true'\n            allowsMultipleExpanded={allowsMultipleExpanded}\n            className={ctr(className, 'col-span-full flex flex-col gap-y-6')}\n            {...props}\n        />\n    )\n}\n\ninterface SidebarDisclosureProps extends DisclosureProps {\n    ref?: React.Ref<HTMLDivElement>\n}\nconst SidebarDisclosure = ({ className, ref, ...props }: SidebarDisclosureProps) => {\n    const { state } = useSidebar()\n    return (\n        <Disclosure\n            ref={ref}\n            data-sidebar-disclosure='true'\n            className={ctr(\n                className,\n                cn(\n                    'px-2.5 in-data-[sidebar-variant=fleet]:px-0',\n                    state !== 'collapsed' && 'col-span-full'\n                )\n            )}\n            {...props}\n        />\n    )\n}\n\nconst sidebarDisclosureTrigger = tv({\n    base: [\n        'group text-fg/70 relative flex w-full cursor-pointer items-center overflow-hidden rounded-lg px-[calc(var(--spacing)*2.3)] py-[calc(var(--spacing)*1.3)] outline-hidden aria-expanded:**:data-[slot=chevron]:rotate-0 sm:text-sm/6',\n        'in-data-[sidebar-variant=fleet]:rounded-none in-data-[sidebar-variant=fleet]:py-2 in-data-[sidebar-variant=fleet]:**:data-[slot=chevron]:hidden'\n    ],\n    variants: {\n        collapsed: {\n            false: 'col-span-full **:data-[slot=icon]:mr-2',\n            true: 'size-9 justify-center p-0'\n        },\n        isActive: {\n            true: 'text-fg bg-(--sidebar-accent)'\n        },\n        isDisabled: {\n            true: 'cursor-default opacity-50'\n        }\n    }\n})\n\ninterface SidebarDisclosureTriggerProps extends ButtonProps {\n    ref?: React.Ref<HTMLButtonElement>\n}\nconst SidebarDisclosureTrigger = ({ className, ref, ...props }: SidebarDisclosureTriggerProps) => {\n    const { state, isMobile } = useSidebar()\n    const collapsed = state === 'collapsed' && !isMobile\n    return (\n        <Heading level={3}>\n            <Trigger\n                ref={ref}\n                slot='trigger'\n                className={cr(className, (className, renderProps) =>\n                    sidebarDisclosureTrigger({\n                        ...renderProps,\n                        collapsed,\n                        isActive:\n                            renderProps.isPressed ||\n                            renderProps.isFocusVisible ||\n                            renderProps.isHovered,\n                        className\n                    })\n                )}\n                {...props}\n            >\n                {(values) => (\n                    <>\n                        {typeof props.children === 'function'\n                            ? props.children(values)\n                            : props.children}\n                        {state !== 'collapsed' && <Indicator slot='chevron' className='ml-auto' />}\n                    </>\n                )}\n            </Trigger>\n        </Heading>\n    )\n}\n\nconst SidebarDisclosurePanel = (props: React.ComponentProps<typeof DisclosurePanel>) => {\n    return (\n        <DisclosurePanel\n            data-sidebar-disclosure-panel='true'\n            className='col-span-full grid grid-cols-[auto_1fr] gap-y-0.5'\n            {...props}\n        />\n    )\n}\n\nconst SidebarSeparator = ({ className, ...props }: SidebarSeparatorProps) => {\n    return (\n        <Separator\n            orientation='horizontal'\n            className={cn(\n                'bg-border col-span-full mx-auto my-2.5 h-px w-[calc(var(--sidebar-width)-theme(spacing.6))]',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst SidebarTrigger = ({ onPress, children, ...props }: React.ComponentProps<typeof Button>) => {\n    const { toggleSidebar, open, fixed, isMobile } = useSidebar()\n    return (\n        <>\n            <Button\n                aria-label={props['aria-label'] || 'Toggle Sidebar'}\n                data-sidebar-trigger='true'\n                variant={props.variant || 'ghost'}\n                size={props.size || 'icon'}\n                onPress={(event) => {\n                    onPress?.(event)\n                    toggleSidebar()\n                }}\n                className={cn('-ml-2', props.className)}\n                style={{ display: fixed && !isMobile ? 'none' : 'inline-flex' }}\n                {...props}\n            >\n                {children || (\n                    <>\n                        <IconPanelLeftClose\n                            className={cn(\n                                'hidden size-4 transition-transform md:inline',\n                                !open && 'rotate-180'\n                            )}\n                        />\n                        <IconMenu className='inline md:hidden' />\n                        <span className='sr-only'>Toggle Sidebar</span>\n                    </>\n                )}\n            </Button>\n        </>\n    )\n}\n\nconst SidebarRail = ({ className, ref, ...props }: React.ComponentProps<'button'>) => {\n    const { toggleSidebar } = useSidebar()\n\n    return (\n        <button\n            ref={ref}\n            data-sidebar='rail'\n            aria-label='Toggle Sidebar'\n            title='Toggle Sidebar'\n            tabIndex={-1}\n            onClick={toggleSidebar}\n            className={cn(\n                'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 outline-hidden transition-all ease-linear group-data-[sidebar-side=left]/sidebar-container:-right-4 group-data-[sidebar-side=right]/sidebar-container:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] data-hovered:after:bg-transparent sm:flex',\n                'in-data-[sidebar-side=left]:cursor-w-resize in-data-[sidebar-side=right]:cursor-e-resize',\n                '[[data-sidebar-side=left][data-sidebar-state=collapsed]_&]:cursor-e-resize [[data-sidebar-side=right][data-sidebar-state=collapsed]_&]:cursor-w-resize',\n                'group-data-[sidebar-collapsible=hidden]/sidebar-container:hover:bg-secondary group-data-[sidebar-collapsible=hidden]/sidebar-container:translate-x-0 group-data-[sidebar-collapsible=hidden]/sidebar-container:after:left-full',\n                '[[data-sidebar-side=left][data-sidebar-collapsible=hidden]_&]:-right-2 [[data-sidebar-side=right][data-sidebar-collapsible=hidden]_&]:-left-2',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\ntype SidebarLabelProps = React.ComponentProps<typeof Text>\n\nconst SidebarLabel = ({ className, ref, ...props }: SidebarLabelProps) => {\n    const { state, isMobile } = useSidebar()\n    const collapsed = state === 'collapsed' && !isMobile\n    if (!collapsed) {\n        return (\n            <Text\n                ref={ref}\n                slot='label'\n                className={cn('col-start-2 overflow-hidden whitespace-nowrap', className)}\n                {...props}\n            >\n                {props.children}\n            </Text>\n        )\n    }\n    return null\n}\n\nconst nav = tv({\n    base: [\n        'text-navbar-fg isolate flex h-[3.2rem] items-center justify-between gap-x-2 px-4 sm:justify-start md:w-full',\n        'group-has-data-[sidebar-variant=default]/sidebar-root:bg-bg group-has-data-[sidebar-variant=default]/sidebar-root:border-b group-has-data-[sidebar-variant=fleet]/sidebar-root:border-b'\n    ],\n    variants: {\n        isSticky: {\n            true: 'static top-0 z-40 group-has-data-[sidebar-variant=default]/sidebar-root:sticky'\n        }\n    }\n})\n\ninterface SidebarNavProps extends React.ComponentProps<'nav'> {\n    isSticky?: boolean\n}\n\nconst SidebarNav = ({ isSticky = false, className, ...props }: SidebarNavProps) => {\n    return <nav data-slot='sidebar-nav' {...props} className={nav({ isSticky, className })} />\n}\n\nexport type {\n    SidebarDisclosureGroupProps,\n    SidebarDisclosureProps,\n    SidebarDisclosureTriggerProps,\n    SidebarItemProps,\n    SidebarLabelProps,\n    SidebarLinkProps,\n    SidebarNavProps,\n    SidebarProps,\n    SidebarProviderProps,\n    SidebarSeparatorProps\n}\n\nexport {\n    Sidebar,\n    SidebarContent,\n    SidebarDisclosure,\n    SidebarDisclosureGroup,\n    SidebarDisclosurePanel,\n    SidebarDisclosureTrigger,\n    SidebarFooter,\n    SidebarHeader,\n    SidebarInset,\n    SidebarItem,\n    SidebarLabel,\n    SidebarLink,\n    SidebarNav,\n    SidebarProvider,\n    SidebarRail,\n    SidebarSection,\n    SidebarSectionGroup,\n    SidebarSeparator,\n    SidebarTrigger,\n    useSidebar\n}\n"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport {\n    TimeField as TimeFieldPrimitive,\n    type TimeFieldProps as TimeFieldPrimitiveProps,\n    type TimeValue,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { ctr } from './utils'\n\ninterface TimeFieldProps<T extends TimeValue> extends TimeFieldPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n}\n\nconst timeFieldStyles = tv({\n    base: 'flex w-fit min-w-28 justify-around p-2 whitespace-nowrap sm:text-sm'\n})\n\nconst TimeField = <T extends TimeValue>({\n    prefix,\n    suffix,\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: TimeFieldProps<T>) => {\n    return (\n        <TimeFieldPrimitive {...props} className={ctr(className, 'group flex flex-col gap-y-1.5')}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                {prefix ? <span data-slot='prefix'>{prefix}</span> : null}\n                <DateInput className={timeFieldStyles} />\n                {suffix ? <span data-slot='suffix'>{suffix}</span> : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </TimeFieldPrimitive>\n    )\n}\n\nexport { TimeField }\nexport type { TimeFieldProps }\n"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport type { DialogProps, DialogTriggerProps, ModalOverlayProps } from 'react-aria-components'\nimport { DialogTrigger, Modal, ModalOverlay } from 'react-aria-components'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\nimport { cr } from './utils'\n\nconst overlayStyles = tv({\n    base: [\n        'bg-fg/15 dark:bg-bg/40 fixed top-0 left-0 isolate z-50 flex h-(--visual-viewport-height) w-full items-center justify-center p-4'\n    ],\n    variants: {\n        isBlurred: {\n            true: 'bg-bg/15 dark:bg-bg/40 backdrop-blur'\n        },\n        isEntering: {\n            true: 'fade-in animate-in duration-300 ease-out'\n        },\n        isExiting: {\n            true: 'fade-out animate-out duration-200 ease-in'\n        }\n    }\n})\n\ntype Sides = 'top' | 'bottom' | 'left' | 'right'\nconst generateCompoundVariants = (sides: Array<Sides>) => {\n    return sides.map((side) => ({\n        side,\n        isFloat: true,\n        className:\n            side === 'top'\n                ? 'top-2 inset-x-2 rounded-xl ring-1 border-b-0'\n                : side === 'bottom'\n                  ? 'bottom-2 inset-x-2 rounded-xl ring-1 border-t-0'\n                  : side === 'left'\n                    ? 'left-2 inset-y-2 rounded-xl ring-1 border-r-0'\n                    : 'right-2 inset-y-2 rounded-xl ring-1 border-l-0'\n    }))\n}\n\nconst contentStyles = tv({\n    base: 'border-fg/5 bg-bg text-fg dark:border-muted fixed z-50 grid gap-4 shadow-lg transition ease-in-out',\n    variants: {\n        isEntering: {\n            true: 'animate-in duration-300'\n        },\n        isExiting: {\n            true: 'animate-out duration-200'\n        },\n        side: {\n            top: 'data-entering:slide-in-from-top data-exiting:slide-out-to-top inset-x-0 top-0 rounded-b-2xl border-b',\n            bottom: 'data-entering:slide-in-from-bottom data-exiting:slide-out-to-bottom inset-x-0 bottom-0 rounded-t-2xl border-t',\n            left: 'data-entering:slide-in-from-left data-exiting:slide-out-to-left inset-y-0 left-0 h-auto w-full max-w-xs overflow-y-auto border-r',\n            right: 'data-entering:slide-in-from-right data-exiting:slide-out-to-right inset-y-0 right-0 h-auto w-full max-w-xs overflow-y-auto border-l'\n        },\n        isFloat: {\n            false: 'border-fg/20 dark:border-muted',\n            true: 'ring-fg/5 dark:ring-border'\n        }\n    },\n    compoundVariants: generateCompoundVariants(['top', 'bottom', 'left', 'right'])\n})\n\ntype SheetProps = DialogTriggerProps\nconst Sheet = (props: SheetProps) => {\n    return <DialogTrigger {...props} />\n}\n\ninterface SheetContentProps\n    extends Omit<React.ComponentProps<typeof Modal>, 'children' | 'className'>,\n        Omit<ModalOverlayProps, 'className'>,\n        VariantProps<typeof overlayStyles> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    closeButton?: boolean\n    isBlurred?: boolean\n    isFloat?: boolean\n    side?: Sides\n    classNames?: {\n        overlay?: ModalOverlayProps['className']\n        content?: ModalOverlayProps['className']\n    }\n}\n\nconst SheetContent = ({\n    classNames,\n    isBlurred = false,\n    isDismissable = true,\n    side = 'right',\n    role = 'dialog',\n    closeButton = true,\n    isFloat = true,\n    children,\n    ...props\n}: SheetContentProps) => {\n    const _isDismissable = role === 'alertdialog' ? false : isDismissable\n    return (\n        <ModalOverlay\n            isDismissable={_isDismissable}\n            className={cr(classNames?.overlay, (className, renderProps) => {\n                return overlayStyles({\n                    ...renderProps,\n                    isBlurred,\n                    className\n                })\n            })}\n            {...props}\n        >\n            <Modal\n                className={cr(classNames?.content, (className, renderProps) =>\n                    contentStyles({\n                        ...renderProps,\n                        side,\n                        isFloat,\n                        className\n                    })\n                )}\n                {...props}\n            >\n                {(values) => (\n                    <Dialog\n                        role={role}\n                        aria-label={props['aria-label'] ?? undefined}\n                        className='h-full'\n                    >\n                        <>\n                            {typeof children === 'function' ? children(values) : children}\n                            {closeButton && (\n                                <Dialog.CloseIndicator\n                                    className='top-2.5 right-2.5'\n                                    isDismissable={_isDismissable}\n                                />\n                            )}\n                        </>\n                    </Dialog>\n                )}\n            </Modal>\n        </ModalOverlay>\n    )\n}\n\nconst SheetTrigger = Dialog.Trigger\nconst SheetFooter = Dialog.Footer\nconst SheetHeader = Dialog.Header\nconst SheetTitle = Dialog.Title\nconst SheetDescription = Dialog.Description\nconst SheetBody = Dialog.Body\nconst SheetClose = Dialog.Close\n\nSheet.Trigger = SheetTrigger\nSheet.Footer = SheetFooter\nSheet.Header = SheetHeader\nSheet.Title = SheetTitle\nSheet.Description = SheetDescription\nSheet.Body = SheetBody\nSheet.Close = SheetClose\nSheet.Content = SheetContent\n\nexport { Sheet }\nexport type { SheetContentProps, SheetProps, Sides }\n"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\n\nimport { createContext, use } from 'react'\n\nimport { IconChevronRight } from 'hq-icons'\nimport type { BreadcrumbProps, BreadcrumbsProps, LinkProps } from 'react-aria-components'\nimport { Breadcrumb, Breadcrumbs as BreadcrumbsPrimitive } from 'react-aria-components'\n\nimport { Link } from './link'\nimport { cn } from './utils'\n\ntype BreadcrumbsContextProps = { separator?: 'chevron' | 'slash' | boolean }\nconst BreadcrumbsProvider = createContext<BreadcrumbsContextProps>({\n    separator: 'chevron'\n})\n\nconst Breadcrumbs = <T extends object>({\n    className,\n    ...props\n}: BreadcrumbsProps<T> & BreadcrumbsContextProps) => {\n    return (\n        <BreadcrumbsProvider value={{ separator: props.separator }}>\n            <BreadcrumbsPrimitive {...props} className={cn('flex items-center gap-2', className)} />\n        </BreadcrumbsProvider>\n    )\n}\n\ninterface BreadcrumbsItemProps extends BreadcrumbProps, BreadcrumbsContextProps {\n    href?: string\n}\n\nconst BreadcrumbsItem = ({\n    href,\n    separator = true,\n    className,\n    ...props\n}: BreadcrumbsItemProps & Partial<Omit<LinkProps, 'className'>>) => {\n    const { separator: contextSeparator } = use(BreadcrumbsProvider)\n    separator = contextSeparator ?? separator\n    const separatorValue = separator === true ? 'chevron' : separator\n\n    return (\n        <Breadcrumb {...props} className={cn(className, 'flex items-center gap-2 text-sm')}>\n            {({ isCurrent }) => (\n                <>\n                    <Link href={href} {...props} />\n                    {!isCurrent && separator !== false && <Separator separator={separatorValue} />}\n                </>\n            )}\n        </Breadcrumb>\n    )\n}\n\nconst Separator = ({\n    separator = 'chevron'\n}: {\n    separator?: BreadcrumbsItemProps['separator']\n}) => {\n    return (\n        <span className='*:text-muted-fg *:shrink-0 *:data-[slot=icon]:size-3.5'>\n            {separator === 'chevron' && <IconChevronRight />}\n            {separator === 'slash' && <span className='text-muted-fg'>/</span>}\n        </span>\n    )\n}\n\nBreadcrumbs.Item = BreadcrumbsItem\n\nexport { Breadcrumbs }\nexport type { BreadcrumbsItemProps, BreadcrumbsProps }\n"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport { IconFolder, IconPaperclip, IconUpload } from 'hq-icons'\nimport {\n    FileTrigger as FileTriggerPrimitive,\n    type FileTriggerProps as FileTriggerPrimitiveProps\n} from 'react-aria-components'\nimport { VariantProps } from 'tailwind-variants'\n\nimport { Button, buttonStyles } from './button'\n\ninterface FileTriggerProps extends FileTriggerPrimitiveProps, VariantProps<typeof buttonStyles> {\n    isDisabled?: boolean\n    ref?: React.RefObject<HTMLInputElement>\n}\n\nconst FileTrigger = ({ variant, size, shape, ref, ...props }: FileTriggerProps) => {\n    return (\n        <FileTriggerPrimitive ref={ref} {...props}>\n            <Button isDisabled={props.isDisabled} size={size} shape={shape} variant={variant}>\n                {props.children ? (\n                    props.children\n                ) : (\n                    <>\n                        {props.allowsMultiple ? (\n                            <>\n                                <IconUpload /> Browse a files\n                            </>\n                        ) : props.acceptDirectory ? (\n                            <>\n                                <IconFolder /> Browse\n                            </>\n                        ) : (\n                            <>\n                                <IconPaperclip /> Browse a file\n                            </>\n                        )}\n                        ...\n                    </>\n                )}\n            </Button>\n        </FileTriggerPrimitive>\n    )\n}\n\nexport { FileTrigger }\nexport type { FileTriggerProps }\n"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport type { TooltipProps as TooltipPrimitiveProps } from 'react-aria-components'\nimport {\n    Button,\n    OverlayArrow,\n    Tooltip as TooltipPrimitive,\n    TooltipTrigger as TooltipTriggerPrimitive\n} from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { cr } from './utils'\n\nconst tooltipStyles = tv({\n    base: 'group rounded-lg border px-2.5 py-1.5 text-sm will-change-transform',\n    variants: {\n        variant: {\n            default: 'bg-bg text-fg **:data-arrow:fill-bg **:data-arrow:stroke-border',\n            inverse: 'bg-fg text-bg **:data-arrow:fill-fg'\n        },\n        isEntering: {\n            true: [\n                'fade-in animate-in',\n                'data-[placement=left]:slide-in-from-right-1 data-[placement=right]:slide-in-from-left-1 data-[placement=top]:slide-in-from-bottom-1 data-[placement=bottom]:slide-in-from-top-1'\n            ]\n        },\n        isExiting: {\n            true: [\n                'fade-in direction-reverse animate-in',\n                'data-[placement=left]:slide-out-to-right-1 data-[placement=right]:slide-out-to-left-1 data-[placement=top]:slide-out-to-bottom-1 data-[placement=bottom]:slide-out-to-top-1'\n            ]\n        }\n    },\n    defaultVariants: {\n        variant: 'default'\n    }\n})\n\ntype TooltipProps = React.ComponentProps<typeof TooltipTriggerPrimitive>\nconst Tooltip = (props: TooltipProps) => <TooltipTriggerPrimitive {...props} />\n\ninterface TooltipContentProps\n    extends Omit<TooltipPrimitiveProps, 'children'>,\n        VariantProps<typeof tooltipStyles> {\n    showArrow?: boolean\n    children: React.ReactNode\n}\n\nconst TooltipContent = ({\n    offset = 10,\n    showArrow = true,\n    variant = 'default',\n    children,\n    ...props\n}: TooltipContentProps) => {\n    return (\n        <TooltipPrimitive\n            {...props}\n            offset={offset}\n            className={cr(props.className, (className, renderProps) =>\n                tooltipStyles({\n                    ...renderProps,\n                    variant,\n                    className\n                })\n            )}\n        >\n            {showArrow && (\n                <OverlayArrow>\n                    <svg\n                        data-arrow\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className='group-data-[placement=bottom]:rotate-180 group-data-[placement=left]:-rotate-90 group-data-[placement=right]:rotate-90'\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            {children}\n        </TooltipPrimitive>\n    )\n}\n\nconst TooltipTrigger = Button\n\nTooltip.Trigger = TooltipTrigger\nTooltip.Content = TooltipContent\n\nexport { Tooltip }\nexport type { TooltipContentProps, TooltipProps }\n"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport type { FormProps } from 'react-aria-components'\nimport { Form as FormPrimitive } from 'react-aria-components'\n\nconst Form = (props: FormProps) => <FormPrimitive {...props} />\n\nexport { Form }\n"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport { IconCircleAlert } from 'hq-icons'\nimport { motion } from 'motion/react'\nimport {\n    Meter as MeterPrimitive,\n    type MeterProps as MeterPrimitiveProps\n} from 'react-aria-components'\n\nimport { Label } from './field'\nimport { ctr } from './utils'\n\ninterface MeterProps extends MeterPrimitiveProps {\n    label?: string\n}\n\nconst Meter = ({ label, ...props }: MeterProps) => {\n    return (\n        <MeterPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n            {({ percentage, valueText }) => (\n                <>\n                    <div className='flex w-full justify-between gap-2'>\n                        <Label>{label}</Label>\n                        <span\n                            className={`text-sm tabular-nums ${percentage >= 80 ? 'text-danger' : 'text-muted-fg'}`}\n                        >\n                            {percentage >= 80 && (\n                                <IconCircleAlert\n                                    aria-label='Alert'\n                                    className='fill-danger/20 text-danger inline-block size-4 align-text-bottom'\n                                />\n                            )}\n                            {` ${valueText}`}\n                        </span>\n                    </div>\n                    <div className='bg-secondary relative h-2 min-w-64 rounded-full outline -outline-offset-1 outline-transparent'>\n                        <motion.div\n                            className='absolute top-0 left-0 h-full rounded-full'\n                            initial={{ width: '0%', backgroundColor: getColor(0) }}\n                            animate={{\n                                width: `${percentage}%`,\n                                backgroundColor: getColor(percentage)\n                            }}\n                            transition={{ duration: 0.5 }}\n                        />\n                    </div>\n                </>\n            )}\n        </MeterPrimitive>\n    )\n}\n\nconst getColor = (percentage: number) => {\n    if (percentage < 30) {\n        return 'var(--primary)'\n    }\n\n    if (percentage < 50) {\n        return 'var(--success)'\n    }\n\n    if (percentage < 70) {\n        return '#eab308'\n    }\n\n    if (percentage < 80) {\n        return 'var(--warning)'\n    }\n\n    return 'var(--danger)'\n}\n\nexport { Meter }\nexport type { MeterProps }\n"
  },
  "heading": {
    "component": "@/components/ui/heading",
    "raw": "import React from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nconst headingStyles = tv({\n    base: 'text-fg font-sans tracking-tight',\n    variants: {\n        level: {\n            1: 'text-xl font-bold sm:text-2xl',\n            2: 'text-lg font-semibold sm:text-xl',\n            3: 'text-base font-semibold sm:text-lg',\n            4: 'text-base font-semibold'\n        },\n        tracking: {\n            tighter: 'tracking-tighter',\n            tight: 'tracking-tight',\n            normal: 'tracking-normal',\n            wide: 'tracking-wide',\n            wider: 'tracking-wider',\n            widest: 'tracking-widest'\n        }\n    }\n})\n\ntype HeadingType = { level?: 1 | 2 | 3 | 4 } & React.ComponentPropsWithoutRef<\n    'h1' | 'h2' | 'h3' | 'h4'\n>\n\ninterface HeadingProps extends HeadingType {\n    tracking?: 'tighter' | 'tight' | 'normal' | 'wide' | 'wider' | 'widest'\n    className?: string | undefined\n}\n\nconst Heading = ({ className, tracking = 'normal', level = 1, ...props }: HeadingProps) => {\n    const Element: `h${typeof level}` = `h${level}`\n    return (\n        <Element\n            className={headingStyles({\n                level,\n                tracking,\n                className\n            })}\n            {...props}\n        />\n    )\n}\n\nexport { Heading }\n"
  },
  "color-swatch": {
    "component": "@/components/ui/color-swatch",
    "raw": "'use client'\n\nimport type { ColorSwatchProps } from 'react-aria-components'\nimport { ColorSwatch as ColorSwatchPrimitive } from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\n\nimport { parseColor } from '@react-stately/color'\n\nimport { ctr } from './utils'\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n    const normalizeHex = hex.replace(\n        /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n        (_m, r, g, b) => r + r + g + g + b + b\n    )\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(normalizeHex)\n    return result\n        ? {\n              r: Number.parseInt(result[1]!, 16),\n              g: Number.parseInt(result[2]!, 16),\n              b: Number.parseInt(result[3]!, 16)\n          }\n        : null\n}\n\nconst hsbToRgb = (h: number, s: number, b: number): { r: number; g: number; b: number } => {\n    const saturation = s / 100\n    const brightness = b / 100\n    const k = (n: number) => (n + h / 60) % 6\n    const f = (n: number) =>\n        brightness * (1 - saturation * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n    return {\n        r: Math.round(255 * f(5)),\n        g: Math.round(255 * f(3)),\n        b: Math.round(255 * f(1))\n    }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n    const a = [r, g, b].map((v) => {\n        const normalized = v / 255\n        return normalized <= 0.03928 ? normalized / 12.92 : ((normalized + 0.055) / 1.055) ** 2.4\n    })\n    return a[0]! * 0.2126 + a[1]! * 0.7152 + a[2]! * 0.0722\n}\n\ntype HSBColor = {\n    hue: number\n    saturation: number\n    brightness: number\n}\n\nconst isBrightColor = (color: string | HSBColor): boolean => {\n    let r: number\n    let g: number\n    let b: number\n\n    if (typeof color === 'string') {\n        if (color.startsWith('#')) {\n            const rgb = hexToRgb(color)\n            if (rgb) {\n                r = rgb.r\n                g = rgb.g\n                b = rgb.b\n            } else {\n                return false\n            }\n        } else if (color.startsWith('rgb')) {\n            const rgbValues = color.match(/\\d+/g)\n            if (rgbValues) {\n                r = Number.parseInt(rgbValues[0]!, 10)\n                g = Number.parseInt(rgbValues[1]!, 10)\n                b = Number.parseInt(rgbValues[2]!, 10)\n            } else {\n                return false\n            }\n        } else {\n            const namedColors: Record<string, string> = {\n                white: '#ffffff',\n                black: '#000000'\n            }\n            const hex = namedColors[color.toLowerCase()]\n            if (hex) {\n                const rgb = hexToRgb(hex)\n                if (rgb) {\n                    r = rgb.r\n                    g = rgb.g\n                    b = rgb.b\n                } else {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n    } else if (\n        typeof color === 'object' &&\n        'hue' in color &&\n        'saturation' in color &&\n        'brightness' in color\n    ) {\n        const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n    } else {\n        return false\n    }\n\n    const lum = luminance(r, g, b)\n    return lum > 0.75\n}\n\nconst defaultColor = parseColor('hsl(216, 98%, 52%)')\n\nconst ColorSwatch = ({ className, ...props }: ColorSwatchProps) => {\n    const color = props.color?.toString() ?? ''\n    const needRing = color ? isBrightColor(color) : false\n    return (\n        <ColorSwatchPrimitive\n            data-slot='color-swatch'\n            aria-label={props['aria-label'] ?? 'Color swatch'}\n            className={ctr(\n                className,\n                twMerge('size-8 shrink-0 rounded-md', needRing && 'inset-ring-fg/10 inset-ring-1')\n            )}\n            {...props}\n        />\n    )\n}\n\nexport { ColorSwatch, defaultColor, isBrightColor }\n"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "import { tv } from 'tailwind-variants'\n\nimport { Heading } from './heading'\n\nconst card = tv({\n    slots: {\n        root: [\n            'bg-bg text-fg **:data-[slot=table-header]:bg-muted/50 rounded-lg border shadow-xs has-[table]:overflow-hidden has-[table]:**:data-[slot=card-footer]:border-t **:[table]:overflow-hidden'\n        ],\n        header: 'flex flex-col gap-y-1 px-6 py-5',\n        title: 'leading-none font-semibold tracking-tight sm:leading-6',\n        description: 'text-muted-fg text-sm',\n        content:\n            'has-[[data-slot=table-header]]:bg-muted/40 px-6 pb-6 has-[table]:border-t has-[table]:p-0 **:data-[slot=table-cell]:px-6 **:data-[slot=table-column]:px-6 [&:has(table)+[data-slot=card-footer]]:py-5',\n        footer: 'flex items-center p-6 pt-0'\n    }\n})\n\nconst { root, header, title, description, content, footer } = card()\n\nconst Card = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return <div data-slot='card' className={root({ className })} {...props} />\n}\n\ninterface HeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n    title?: string\n    description?: string\n}\n\nconst Header = ({ className, title, description, children, ...props }: HeaderProps) => (\n    <div data-slot='card-header' className={header({ className })} {...props}>\n        {title && <Title>{title}</Title>}\n        {description && <Description>{description}</Description>}\n        {!title && typeof children === 'string' ? <Title>{children}</Title> : children}\n    </div>\n)\n\nconst Title = ({ className, level = 3, ...props }: React.ComponentProps<typeof Heading>) => {\n    return (\n        <Heading data-slot='card-title' level={level} className={title({ className })} {...props} />\n    )\n}\n\nconst Description = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div {...props} data-slot='description' className={description({ className })} {...props} />\n    )\n}\n\nconst Content = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return <div data-slot='card-content' className={content({ className })} {...props} />\n}\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    return <div data-slot='card-footer' className={footer({ className })} {...props} />\n}\n\nCard.Content = Content\nCard.Description = Description\nCard.Footer = Footer\nCard.Header = Header\nCard.Title = Title\n\nexport { Card }\n"
  },
  "range-calendar": {
    "component": "@/components/ui/range-calendar",
    "raw": "'use client'\n\nimport type {\n    DateValue,\n    RangeCalendarProps as RangeCalendarPrimitiveProps\n} from 'react-aria-components'\nimport {\n    CalendarCell,\n    CalendarGrid,\n    CalendarGridBody,\n    RangeCalendar as RangeCalendarPrimitive,\n    Text\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Calendar } from './calendar'\nimport { focusRing } from './utils'\n\nconst cell = tv({\n    extend: focusRing,\n    base: 'flex size-full items-center justify-center rounded-lg tabular-nums',\n    variants: {\n        selectionState: {\n            none: 'group-data-hovered/calendar-cell:bg-secondary-fg/15 group-data-pressed/calendar-cell:bg-secondary-fg/20',\n            middle: [\n                'group-data-hovered/calendar-cell:bg-(--cell)',\n                'group-data-pressed/calendar-cell:bg-(--cell)',\n                'group-data-invalid/calendar-cell:group-data-pressed/calendar-cell:bg-danger/30',\n                'group-data-invalid:group-data-hovered/calendar-cell:bg-danger/30 group-data-invalid/calendar-cell:text-danger'\n            ],\n            cap: 'bg-primary text-primary-fg group-data-invalid/calendar-cell:bg-danger group-data-invalid/calendar-cell:text-danger-fg'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\ninterface RangeCalendarProps<T extends DateValue> extends RangeCalendarPrimitiveProps<T> {\n    errorMessage?: string\n}\n\nconst RangeCalendar = <T extends DateValue>({\n    errorMessage,\n    visibleDuration = { months: 1 },\n    ...props\n}: RangeCalendarProps<T>) => {\n    return (\n        <RangeCalendarPrimitive visibleDuration={visibleDuration} {...props}>\n            <Calendar.Header type='range-calendar' />\n            <div className='flex gap-2 overflow-auto'>\n                {Array.from({ length: visibleDuration?.months ?? 1 }).map((_, index) => {\n                    const id = index + 1\n                    return (\n                        <CalendarGrid\n                            key={index}\n                            offset={id >= 2 ? { months: id - 1 } : undefined}\n                            className='**:[td]:px-0 **:[td]:py-[1.5px]'\n                        >\n                            <Calendar.GridHeader />\n                            <CalendarGridBody>\n                                {(date) => (\n                                    <CalendarCell\n                                        date={date}\n                                        className={twJoin([\n                                            'group/calendar-cell data-outside-month:text-muted-fg size-10 cursor-default [line-height:2.286rem] outline-hidden data-selection-end:rounded-e-lg data-selection-start:rounded-s-lg sm:text-sm lg:size-9',\n                                            'data-selected:bg-primary/20 data-selected:text-primary',\n                                            'data-invalid:data-selected:bg-danger/30',\n                                            '[td:first-child_&]:rounded-s-lg [td:last-child_&]:rounded-e-lg'\n                                        ])}\n                                    >\n                                        {({\n                                            formattedDate,\n                                            isSelected,\n                                            isSelectionStart,\n                                            isSelectionEnd,\n                                            isFocusVisible,\n                                            isDisabled\n                                        }) => (\n                                            <span\n                                                className={cell({\n                                                    selectionState:\n                                                        isSelected &&\n                                                        (isSelectionStart || isSelectionEnd)\n                                                            ? 'cap'\n                                                            : isSelected\n                                                              ? 'middle'\n                                                              : 'none',\n                                                    isFocusVisible,\n                                                    isDisabled\n                                                })}\n                                            >\n                                                {formattedDate}\n                                            </span>\n                                        )}\n                                    </CalendarCell>\n                                )}\n                            </CalendarGridBody>\n                        </CalendarGrid>\n                    )\n                })}\n            </div>\n\n            {errorMessage && (\n                <Text slot='errorMessage' className='text-danger text-sm'>\n                    {errorMessage}\n                </Text>\n            )}\n        </RangeCalendarPrimitive>\n    )\n}\n\nexport { RangeCalendar }\nexport type { RangeCalendarProps }\n"
  },
  "navbar": {
    "component": "@/components/ui/navbar",
    "raw": "'use client'\n\nimport { createContext, use, useCallback, useId, useMemo, useState } from 'react'\n\nimport { IconMenu } from 'hq-icons'\nimport { LayoutGroup, motion } from 'motion/react'\nimport type { LinkProps } from 'react-aria-components'\nimport { Link } from 'react-aria-components'\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nimport { Button, type ButtonProps } from './button'\nimport { Sheet } from './sheet'\nimport { cn, cr, ctr, useMediaQuery } from './utils'\n\ntype NavbarOptions = {\n    side?: 'left' | 'right'\n    isSticky?: boolean\n    variant?: 'navbar' | 'float' | 'inset'\n}\n\ntype NavbarContextProps = {\n    open: boolean\n    setOpen: (open: boolean) => void\n    isCompact: boolean\n    toggleNavbar: () => void\n} & NavbarOptions\n\nconst NavbarContext = createContext<NavbarContextProps | null>(null)\n\nfunction useNavbar() {\n    const context = use(NavbarContext)\n    if (!context) {\n        throw new Error('useNavbar must be used within a Navbar.')\n    }\n\n    return context\n}\n\ninterface NavbarProps extends React.ComponentProps<'header'>, NavbarOptions {\n    defaultOpen?: boolean\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n}\n\nconst navbarStyles = tv({\n    base: 'relative isolate flex w-full flex-col',\n    variants: {\n        variant: {\n            float: 'px-2.5 pt-2',\n            navbar: '',\n            inset: 'bg-bg min-h-svh'\n        }\n    }\n})\n\nconst Navbar = ({\n    children,\n    isOpen: openProp,\n    onOpenChange: setOpenProp,\n    defaultOpen = false,\n    className,\n    side = 'left',\n    isSticky = false,\n    variant = 'navbar',\n    ...props\n}: NavbarProps) => {\n    const isCompact = useMediaQuery('(max-width: 768px)')\n    const [_open, _setOpen] = useState(defaultOpen)\n    const open = openProp ?? _open\n\n    const setOpen = useCallback(\n        (value: boolean | ((value: boolean) => boolean)) => {\n            if (setOpenProp) {\n                return setOpenProp?.(typeof value === 'function' ? value(open) : value)\n            }\n\n            _setOpen(value)\n        },\n        [setOpenProp, open]\n    )\n\n    const toggleNavbar = useCallback(() => {\n        setOpen((open) => !open)\n    }, [setOpen])\n\n    const contextValue = useMemo<NavbarContextProps>(\n        () => ({\n            open,\n            setOpen,\n            isCompact,\n            toggleNavbar,\n            variant,\n            isSticky,\n            side\n        }),\n        [open, setOpen, isCompact, toggleNavbar, variant, isSticky, side]\n    )\n    return (\n        <NavbarContext value={contextValue}>\n            <header\n                data-navbar-variant={variant}\n                className={navbarStyles({ variant, className })}\n                {...props}\n            >\n                {children}\n            </header>\n        </NavbarContext>\n    )\n}\n\nconst navStyles = tv({\n    base: [\n        'group peer hidden h-(--navbar-height) w-full items-center px-4 [--navbar-height:3.5rem] md:flex',\n        '[&>div]:mx-auto [&>div]:w-full [&>div]:max-w-[1680px] [&>div]:items-center md:[&>div]:flex'\n    ],\n    variants: {\n        isSticky: {\n            true: 'sticky top-0 z-40'\n        },\n        variant: {\n            float: 'bg-bg text-fg mx-auto w-full max-w-7xl rounded-xl border md:px-4 2xl:max-w-(--breakpoint-2xl)',\n            navbar: 'bg-bg text-fg border-b md:px-6',\n            inset: [\n                'mx-auto md:px-6',\n                '[&>div]:mx-auto [&>div]:w-full [&>div]:items-center md:[&>div]:flex 2xl:[&>div]:max-w-(--breakpoint-2xl)'\n            ]\n        }\n    }\n})\n\ninterface NavbarNavProps extends React.ComponentProps<'div'> {\n    variant?: 'navbar' | 'float' | 'inset'\n    isSticky?: boolean\n    side?: 'left' | 'right'\n    useDefaultResponsive?: boolean\n}\n\nconst NavbarNav = ({ useDefaultResponsive = true, className, ref, ...props }: NavbarNavProps) => {\n    const { isCompact, side, variant, isSticky, open, setOpen } = useNavbar()\n\n    if (isCompact && useDefaultResponsive) {\n        return (\n            <Sheet isOpen={open} onOpenChange={setOpen} {...props}>\n                <Sheet.Trigger className='sr-only' />\n                <Sheet.Content\n                    side={side}\n                    aria-label='Compact Navbar'\n                    data-navbar='compact'\n                    classNames={{\n                        content: 'text-fg [&>button]:hidden'\n                    }}\n                    isFloat={variant === 'float'}\n                >\n                    <Sheet.Body className='px-2 md:px-4'>{props.children}</Sheet.Body>\n                </Sheet.Content>\n            </Sheet>\n        )\n    }\n\n    return (\n        <div\n            data-navbar-nav='true'\n            ref={ref}\n            className={navStyles({ isSticky, variant, className })}\n            {...props}\n        >\n            <div>{props.children}</div>\n        </div>\n    )\n}\n\ninterface NavbarTriggerProps extends ButtonProps {\n    ref?: React.RefObject<HTMLButtonElement>\n}\nconst NavbarTrigger = ({ className, onPress, ref, ...props }: NavbarTriggerProps) => {\n    const { toggleNavbar } = useNavbar()\n    return (\n        <Button\n            ref={ref}\n            data-navbar-trigger='true'\n            variant='ghost'\n            aria-label={props['aria-label'] || 'Toggle Navbar'}\n            size='icon'\n            className={className}\n            onPress={(event) => {\n                onPress?.(event)\n                toggleNavbar()\n            }}\n            {...props}\n        >\n            <IconMenu />\n            <span className='sr-only'>Toggle Navbar</span>\n        </Button>\n    )\n}\n\nconst NavbarSection = ({ className, ...props }: React.ComponentProps<'div'>) => {\n    const { isCompact } = useNavbar()\n    const id = useId()\n    return (\n        <LayoutGroup id={id}>\n            <div\n                data-navbar-section='true'\n                className={cn(\n                    'flex',\n                    isCompact ? 'flex-col gap-y-4' : 'flex-row items-center gap-x-3',\n                    className\n                )}\n                {...props}\n            >\n                {props.children}\n            </div>\n        </LayoutGroup>\n    )\n}\n\nconst navItemStyles = tv({\n    base: [\n        'text-muted-fg relative flex cursor-pointer items-center gap-x-2 px-2 no-underline outline-hidden transition-colors *:data-[slot=icon]:-mx-0.5 md:text-sm',\n        'data-focused:text-fg data-hovered:text-fg data-pressed:text-fg data-focus-visible:outline-primary data-focus-visible:outline-1',\n        '**:data-[slot=chevron]:size-4 **:data-[slot=chevron]:transition-transform',\n        'data-pressed:**:data-[slot=chevron]:rotate-180 *:data-[slot=icon]:size-4 *:data-[slot=icon]:shrink-0',\n        'data-disabled:cursor-default data-disabled:opacity-50'\n    ],\n    variants: {\n        isCurrent: {\n            true: 'text-fg cursor-default'\n        }\n    }\n})\n\ninterface NavbarItemProps extends LinkProps {\n    isCurrent?: boolean\n}\n\nconst NavbarItem = ({ className, isCurrent, ...props }: NavbarItemProps) => {\n    const { variant, isCompact } = useNavbar()\n    return (\n        <Link\n            data-navbar-item='true'\n            aria-current={isCurrent ? 'page' : undefined}\n            className={cr(className, (className, ...renderProps) =>\n                navItemStyles({ ...renderProps, isCurrent, className })\n            )}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof props.children === 'function' ? props.children(values) : props.children}\n\n                    {(isCurrent || values.isCurrent) && !isCompact && variant !== 'float' && (\n                        <motion.span\n                            layoutId='current-indicator'\n                            data-slot='current-indicator'\n                            className='bg-fg absolute inset-x-2 bottom-[calc(var(--navbar-height)*-0.33)] h-0.5 rounded-full'\n                        />\n                    )}\n                </>\n            )}\n        </Link>\n    )\n}\n\nconst NavbarLogo = ({ className, ...props }: LinkProps) => {\n    return (\n        <Link\n            className={ctr(\n                className,\n                'text-fg data-focus-visible:outline-primary relative flex items-center gap-x-2 px-2 py-4 data-focus-visible:outline-1 data-focused:outline-hidden md:mr-4 md:px-0 md:py-0'\n            )}\n            {...props}\n        />\n    )\n}\n\nconst NavbarFlex = ({ className, ref, ...props }: React.ComponentProps<'div'>) => {\n    return (\n        <div ref={ref} className={cn('flex items-center gap-2 md:gap-3', className)} {...props} />\n    )\n}\n\nconst compactStyles = tv({\n    base: 'bg-bg text-fg flex justify-between peer-has-[[data-navbar-variant=float]]:border md:hidden',\n    variants: {\n        variant: {\n            float: 'h-12 rounded-lg border px-3.5',\n            inset: 'h-14 border-b px-4',\n            navbar: 'h-14 border-b px-4'\n        }\n    }\n})\n\ninterface NavbarCompactProps\n    extends React.ComponentProps<'div'>,\n        VariantProps<typeof compactStyles> {\n    ref?: React.RefObject<HTMLDivElement>\n}\nconst NavbarCompact = ({ className, ref, ...props }: NavbarCompactProps) => {\n    const { variant } = useNavbar()\n    return <div ref={ref} className={compactStyles({ variant, className })} {...props} />\n}\n\nconst insetStyles = tv({\n    base: 'grow',\n    variants: {\n        variant: {\n            float: '',\n            inset: 'bg-bg md:ring-fg/15 md:dark:ring-border md:rounded-lg md:ring-1 md:shadow-xs',\n            navbar: ''\n        }\n    }\n})\n\nconst NavbarInset = ({ className, ref, ...props }: React.ComponentProps<'div'>) => {\n    const { variant } = useNavbar()\n    return (\n        <main\n            ref={ref}\n            data-navbar-variant={variant}\n            className={cn(\n                'flex flex-1 flex-col',\n                variant === 'inset' && 'bg-bg pb-2 md:px-2',\n                className\n            )}\n        >\n            <div className={insetStyles({ variant, className })}>{props.children}</div>\n        </main>\n    )\n}\n\nNavbar.Nav = NavbarNav\nNavbar.Inset = NavbarInset\nNavbar.Compact = NavbarCompact\nNavbar.Flex = NavbarFlex\nNavbar.Trigger = NavbarTrigger\nNavbar.Logo = NavbarLogo\nNavbar.Item = NavbarItem\nNavbar.Section = NavbarSection\n\nexport { Navbar }\nexport type { NavbarCompactProps, NavbarItemProps, NavbarNavProps, NavbarProps, NavbarTriggerProps }\n"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\n\nimport type { DropZoneProps } from 'react-aria-components'\nimport { DropZone as DropPrimitiveZone } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cr, focusStyles } from './utils'\n\nconst dropZoneStyles = tv({\n    extend: focusStyles,\n    base: 'group flex max-h-[200px] max-w-xl flex-col items-center justify-center gap-2 rounded-md border border-dashed p-6 text-sm transition duration-200 has-[slot=description]:text-center',\n    variants: {\n        isDropTarget: {\n            true: 'border-primary bg-primary/10 ring-primary/20 [&_.text-muted-fg]:text-primary-fg border-solid ring-4'\n        }\n    }\n})\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n    <DropPrimitiveZone\n        className={cr(className, (className, renderProps) =>\n            dropZoneStyles({ ...renderProps, className })\n        )}\n        {...props}\n    />\n)\nexport { DropZone }\n"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport {\n    TextArea as TextAreaPrimitive,\n    TextField as TextFieldPrimitive,\n    type TextFieldProps as TextFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { cr, ctr, focusStyles } from './utils'\n\nconst textareaStyles = tv({\n    extend: focusStyles,\n    base: 'border-muted bg-background w-full min-w-0 rounded-lg border px-2.5 py-2 text-base transition duration-200 outline-none sm:text-sm',\n    variants: {\n        isDisabled: {\n            false: 'data-hovered:border-primary/60',\n            true: 'opacity-50'\n        },\n        isInvalid: {\n            true: 'border-danger/70 text-danger'\n        }\n    }\n})\n\ninterface TextareaProps extends TextFieldPrimitiveProps {\n    autoSize?: boolean\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    className?: string\n}\n\nconst Textarea = ({\n    className,\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    ...props\n}: TextareaProps) => {\n    return (\n        <TextFieldPrimitive {...props} className={ctr(className, 'group flex flex-col gap-y-1.5')}>\n            {label && <Label>{label}</Label>}\n            <TextAreaPrimitive\n                placeholder={placeholder}\n                className={cr(className, (className, renderProps) =>\n                    textareaStyles({\n                        ...renderProps,\n                        className\n                    })\n                )}\n            />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </TextFieldPrimitive>\n    )\n}\n\nexport { Textarea }\nexport type { TextareaProps }\n"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport {\n    Button as ButtonPrimitive,\n    ButtonProps as ButtonPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cr, focusButtonStyles } from './utils'\n\nconst buttonStyles = tv({\n    extend: focusButtonStyles,\n    base: [\n        'relative inline-flex items-center justify-center gap-x-2 border font-medium whitespace-nowrap no-underline transition',\n        '*:svg:-mx-0.5 *:svg:my-1 *:svg:size-4 *:svg:shrink-0'\n    ],\n    variants: {\n        variant: {\n            primary: 'bg-primary text-primary-fg border-primary',\n            secondary: 'bg-secondary text-secondary-fg border-secondary',\n            success: 'bg-success text-success-fg border-success',\n            danger: 'bg-danger text-danger-fg border-danger',\n            warning: 'bg-warning text-warning-fg border-warning',\n            dark: 'bg-fg text-bg border-fg',\n            outline: 'bg-bg/80 text-fg border-muted data-hovered:bg-muted',\n            ghost: 'text-fg data-hovered:bg-secondary border-transparent bg-transparent'\n        },\n        size: {\n            xs: 'h-8 px-2 text-xs',\n            sm: 'h-9 px-3 text-sm',\n            md: 'h-10 px-4 py-2 text-sm',\n            lg: 'h-11 px-8 text-base',\n            icon: 'size-10 shrink-0'\n        },\n        shape: {\n            rounded: 'rounded-lg',\n            sharp: 'rounded-none',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        size: 'md',\n        shape: 'rounded'\n    }\n})\n\nexport interface ButtonProps extends ButtonPrimitiveProps, VariantProps<typeof buttonStyles> {\n    ref?: React.Ref<HTMLButtonElement>\n}\n\nconst Button = ({ className, variant, size, shape, ref, ...props }: ButtonProps) => (\n    <ButtonPrimitive\n        ref={ref}\n        {...props}\n        className={cr(className, (className, renderProps) =>\n            buttonStyles({\n                ...renderProps,\n                variant,\n                size,\n                shape,\n                className\n            })\n        )}\n    >\n        {(values) => (\n            <>{typeof props.children === 'function' ? props.children(values) : props.children}</>\n        )}\n    </ButtonPrimitive>\n)\n\nexport { Button, buttonStyles }\n"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\n\nimport React, { ComponentPropsWithoutRef } from 'react'\n\nimport { IconUser } from 'hq-icons'\nimport { Collection } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { type CollectionProps } from '@react-aria/collections'\n\nimport { Tooltip } from './tooltip'\nimport { cn } from './utils'\n\ninterface AvatarGroupProps<T extends object> extends CollectionProps<T> {\n    className?: string\n}\n\nconst AvatarGroup = <T extends object>({ className, ...props }: AvatarGroupProps<T>) => {\n    return (\n        <div\n            className={cn(\n                '**:data-avatar:ring-border flex items-center justify-center -space-x-2 **:data-avatar:ring',\n                '**:data-avatar:transition-transform **:data-avatar:hover:z-30 **:data-avatar:hover:scale-110',\n                className\n            )}\n        >\n            <Collection {...props} />\n        </div>\n    )\n}\n\nconst avatar = tv({\n    base: [\n        'inline-grid shrink-0 items-center justify-center align-middle *:col-start-1 *:row-start-1',\n        'outline-fg/20 text-center outline-1 -outline-offset-1'\n    ],\n    variants: {\n        shape: {\n            square: 'rounded-lg *:rounded-lg',\n            circle: 'rounded-full *:rounded-full'\n        },\n        size: {\n            xs: '*:img:size-5 size-5',\n            sm: '*:img:size-6 size-6',\n            md: '*:img:size-8 size-8',\n            lg: '*:img:size-10 size-10',\n            xl: '*:img:size-12 size-12',\n            '2xl': '*:img:size-14 size-14',\n            '3xl': '*:img:size-16 size-16',\n            '4xl': '*:img:size-20 size-20',\n            '5xl': '*:img:size-24 size-24'\n        }\n    },\n    defaultVariants: {\n        shape: 'circle',\n        size: 'md'\n    }\n})\n\ninterface AvatarProps extends VariantProps<typeof avatar> {\n    src?: string | undefined\n    initials?: string\n    alt?: string\n    tooltip?: boolean\n    className?: string\n}\n\nconst Avatar = ({\n    src,\n    shape,\n    size,\n    initials,\n    alt = '',\n    className,\n    tooltip = false,\n    ...props\n}: AvatarProps & ComponentPropsWithoutRef<'span'>) => {\n    const [error, setError] = React.useState(!src)\n\n    function handleError() {\n        setError(true)\n    }\n\n    if (error) {\n        return (\n            <span data-avatar className={avatar({ shape, size, className })}>\n                <FallbackImage initials={initials} alt={alt} />\n            </span>\n        )\n    }\n    return tooltip ? (\n        <Tooltip delay={0}>\n            <Tooltip.Trigger>\n                <span data-avatar {...props} className={avatar({ shape, size, className })}>\n                    <img src={src} alt={alt} onError={handleError} />\n                </span>\n            </Tooltip.Trigger>\n            <Tooltip.Content variant='inverse'>\n                <span className='font-medium'>{initials ?? alt}</span>\n            </Tooltip.Content>\n        </Tooltip>\n    ) : (\n        <span data-avatar {...props} className={avatar({ shape, size, className })}>\n            <img src={src} alt={alt} onError={handleError} />\n        </span>\n    )\n}\n\nconst FallbackImage = ({ initials, alt }: { initials?: string; alt: string }) => {\n    return initials ? (\n        <svg\n            className='bg-bg size-full fill-current p-[5%] text-[48px] font-medium uppercase select-none'\n            viewBox='0 0 100 100'\n            aria-hidden={alt ? undefined : 'true'}\n        >\n            {alt && <title>{alt}</title>}\n            <text\n                x='50%'\n                y='50%'\n                alignmentBaseline='middle'\n                dominantBaseline='middle'\n                textAnchor='middle'\n                dy='.125em'\n            >\n                {initials.split(' ').slice(0, 2).length > 1\n                    ? initials\n                          .split(' ')\n                          .slice(0, 2)\n                          .map((part) => part.charAt(0))\n                          .join('')\n                    : initials.split('').slice(0, 2)}\n            </text>\n        </svg>\n    ) : alt ? (\n        <svg\n            className='size-full fill-current p-[5%] text-[48px] font-medium uppercase select-none'\n            viewBox='0 0 100 100'\n            aria-hidden={alt ? undefined : 'true'}\n        >\n            {alt && <title>{alt}</title>}\n            <text\n                x='50%'\n                y='50%'\n                alignmentBaseline='middle'\n                dominantBaseline='middle'\n                textAnchor='middle'\n                dy='.125em'\n            >\n                {alt.split(' ').slice(0, 2).length > 1\n                    ? alt\n                          .split(' ')\n                          .slice(0, 2)\n                          .map((part) => part.charAt(0))\n                          .join('')\n                    : alt.split('').slice(0, 2)}\n            </text>\n        </svg>\n    ) : (\n        <IconUser className='bg-bg size-full place-self-center p-1' />\n    )\n}\n\nexport { Avatar, AvatarGroup }\nexport type { AvatarProps }\n"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport {\n    Switch as SwitchPrimitive,\n    type SwitchProps as SwitchPrimitiveProps\n} from 'react-aria-components'\n\nimport { ctr } from './utils'\n\ninterface SwitchProps extends SwitchPrimitiveProps {\n    ref?: React.RefObject<HTMLLabelElement>\n}\nconst Switch = ({ children, className, ref, ...props }: SwitchProps) => {\n    return (\n        <SwitchPrimitive\n            ref={ref}\n            {...props}\n            className={ctr(className, 'group inline-flex touch-none items-center sm:text-sm')}\n            style={{ WebkitTapHighlightColor: 'transparent' }}\n        >\n            {(values) => (\n                <>\n                    <span className='group-data-selected:bg-primary group-data-focused:ring-primary/20 group-data-invalid:ring-danger/20 bg-border mr-2 h-5 w-8 cursor-pointer rounded-full border-2 border-transparent transition duration-200 group-data-disabled:cursor-default group-data-disabled:opacity-50 group-data-focused:ring-2'>\n                        <span className='bg-primary-fg block size-4 origin-right rounded-full shadow-sm transition-all duration-200 group-data-pressed:w-5 group-data-selected:ml-3 group-data-selected:group-data-[pressed]:ml-2' />\n                    </span>\n                    {typeof children === 'function' ? children(values) : children}\n                </>\n            )}\n        </SwitchPrimitive>\n    )\n}\n\nexport { Switch }\nexport type { SwitchProps }\n"
  },
  "choicebox": {
    "component": "@/components/ui/choicebox",
    "raw": "'use client'\n\nimport type { GridListItemProps, GridListProps } from 'react-aria-components'\nimport { GridList, GridListItem } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { Description, Label } from './field'\nimport { cr, focusStyles } from './utils'\n\nconst choiceboxStyles = tv({\n    base: 'grid',\n    variants: {\n        columns: {\n            1: 'sm:grid-cols-1',\n            2: 'sm:grid-cols-2',\n            3: 'sm:grid-cols-3',\n            4: 'sm:grid-cols-4',\n            5: 'sm:grid-cols-5',\n            6: 'sm:grid-cols-6'\n        },\n        gap: {\n            0: 'gap-0',\n            2: 'gap-2',\n            4: 'gap-4',\n            6: 'gap-6'\n        }\n    },\n    defaultVariants: {\n        columns: 2,\n        gap: 4\n    },\n    compoundVariants: [\n        {\n            gap: 0,\n            columns: 1,\n            className:\n                'rounded-lg *:data-[slot=choicebox-item]:-mt-px *:data-[slot=choicebox-item]:rounded-none *:data-[slot=choicebox-item]:inset-ring-1 *:data-[slot=choicebox-item]:first:rounded-t-[calc(var(--radius-lg)-1px)] *:data-[slot=choicebox-item]:last:rounded-b-[calc(var(--radius-lg)-1px)]'\n        }\n    ]\n})\n\ninterface ChoiceboxProps<T extends object>\n    extends GridListProps<T>,\n        VariantProps<typeof choiceboxStyles> {\n    className?: string\n}\n\nconst Choicebox = <T extends object>({\n    columns,\n    gap,\n    className,\n    selectionMode = 'multiple',\n    ...props\n}: ChoiceboxProps<T>) => {\n    return (\n        <GridList\n            layout={columns === 1 ? 'stack' : 'grid'}\n            selectionMode={selectionMode}\n            className={choiceboxStyles({\n                columns,\n                gap,\n                className\n            })}\n            {...props}\n        />\n    )\n}\n\nconst choiceboxItemStyles = tv({\n    extend: focusStyles,\n    base: [\n        'bg-bg [--choicebox-fg:var(--color-primary)] [--choicebox:color-mix(in_oklab,var(--color-primary)_4%,white_96%)]',\n        '[--choicebox-selected-hovered:color-mix(in_oklab,var(--color-primary)_15%,white_85%)]',\n        'dark:[--choicebox-selected-hovered:color-mix(in_oklab,var(--color-primary)_25%,black_75%)]',\n        'dark:[--choicebox-fg:color-mix(in_oklab,var(--color-primary)_45%,white_55%)] dark:[--choicebox:color-mix(in_oklab,var(--color-primary)_20%,black_70%)]',\n        'inset-ring-border cursor-pointer rounded-lg p-4 inset-ring [&_[slot=title]]:font-medium',\n        '**:data-[slot=choicebox-icon]:size-5 **:data-[slot=choicebox-icon]:shrink-0 **:data-[slot=choicebox-icon]:text-current/60 data-selected:**:data-[slot=choicebox-icon]:text-current/90'\n    ],\n    variants: {\n        init: {\n            true: [\n                'bg-(--choicebox) text-(--choicebox-fg)',\n                'inset-ring-primary/70 z-20 data-hovered:bg-(--choicebox-selected-hovered)',\n                '[&_[slot=title]]:text-(--choicebox-fg)',\n                '[&_[slot=description]]:text-(--choicebox-fg)'\n            ]\n        },\n        isDisabled: {\n            true: '[&_[slot=description]]:text-muted-fg/70 [&_[slot=title]]:text-muted-fg z-10 cursor-default opacity-50'\n        }\n    }\n})\n\ninterface ChoiceboxItemProps extends GridListItemProps, VariantProps<typeof choiceboxItemStyles> {\n    title?: string\n    description?: string\n    icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>\n}\n\nconst ChoiceboxItem = ({ icon: Icon, className, ...props }: ChoiceboxItemProps) => {\n    const textValue = props.title ?? props.textValue\n    return (\n        <GridListItem\n            textValue={textValue}\n            data-slot='choicebox-item'\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                choiceboxItemStyles({\n                    ...renderProps,\n                    init:\n                        renderProps.isSelected ||\n                        renderProps.isHovered ||\n                        renderProps.isFocusVisible,\n                    className\n                })\n            )}\n        >\n            {(values) => (\n                <div className='flex w-full items-center justify-between gap-2'>\n                    <div className='flex gap-x-2.5'>\n                        {Icon && <Icon data-slot='choicebox-icon' />}\n                        <div className='flex flex-col gap-y-1 pr-8'>\n                            <Label slot='title' className='text-sm/4' htmlFor={textValue}>\n                                {props.title}\n                            </Label>\n                            {props.description && (\n                                <Description className='text-sm/5'>{props.description}</Description>\n                            )}\n                        </div>\n                    </div>\n                    {values.selectionMode === 'multiple' &&\n                        values.selectionBehavior === 'toggle' && <Checkbox slot='selection' />}\n                </div>\n            )}\n        </GridListItem>\n    )\n}\n\nChoicebox.Item = ChoiceboxItem\n\nexport { Choicebox }\nexport type { ChoiceboxItemProps, ChoiceboxProps }\n"
  },
  "field": {
    "component": "@/components/ui/field",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    FieldError as FieldErrorPrimitive,\n    type FieldErrorProps,\n    Group,\n    type GroupProps,\n    Input as InputPrimitive,\n    type InputProps,\n    Label as LabelPrimitive,\n    type LabelProps,\n    Text,\n    type TextFieldProps as TextFieldPrimitiveProps,\n    type TextProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn, ctr } from './utils'\n\ninterface FieldProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    'aria-label'?: TextFieldPrimitiveProps['aria-label']\n    'aria-labelledby'?: TextFieldPrimitiveProps['aria-labelledby']\n}\n\nconst fieldStyles = tv({\n    slots: {\n        description: 'text-muted-fg text-base/6 text-pretty sm:text-sm/6',\n        label: 'text-fg group-data-focused:text-primary group-data-[focus-within=true]:text-primary group-has-data-[focus-within=true]:text-primary group-data-[open=true]:text-primary group-has-data-[focused=true]:text-primary group-has-aria-[invalid=true]:text-danger w-fit cursor-default text-sm font-medium transition-colors duration-200',\n        fieldError: 'text-danger text-sm/6',\n        input: [\n            'text-fg placeholder-muted-fg w-full min-w-0 bg-transparent p-2 text-base outline-none data-focused:outline-none lg:text-sm [&::-ms-reveal]:hidden'\n        ]\n    }\n})\n\nconst { description, label, fieldError, input } = fieldStyles()\n\nconst Label = ({ className, ...props }: LabelProps) => {\n    return <LabelPrimitive {...props} className={label({ className })} />\n}\n\ninterface DescriptionProps extends TextProps {\n    isWarning?: boolean\n}\n\nconst Description = ({ className, ...props }: DescriptionProps) => {\n    const isWarning = props.isWarning ?? false\n    return (\n        <Text\n            {...props}\n            slot='description'\n            className={description({ className: isWarning ? 'text-warning' : className })}\n        />\n    )\n}\n\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n    return <FieldErrorPrimitive {...props} className={ctr(className, fieldError())} />\n}\n\nconst FieldGroup = ({ className, ...props }: GroupProps) => {\n    return (\n        <Group\n            {...props}\n            className={cn([\n                'flex h-10 items-center rounded-lg border transition duration-200 ease-out',\n                'data-hovered:border-primary/60',\n                'data-focus-within:border-primary/70 data-focus-within:ring-primary/20 data-focus-within:ring-4',\n                'group-data-invalid:focus-within:border-danger group-data-invalid:focus-within:ring-danger/20 data-focus-within:ring-4',\n                '[&>[role=progressbar]]:mr-2.5',\n                '**:data-[slot=icon]:size-4 **:data-[slot=icon]:shrink-0',\n                '[&>[data-slot=suffix]]:text-muted-fg [&>[data-slot=suffix]]:mr-2.5',\n                '[&>[data-slot=prefix]]:text-muted-fg [&>[data-slot=prefix]]:ml-2.5',\n                'data-disabled:data-hovered:border-muted data-invalid:data-hovered:border-danger/60 group-data-disabled:opacity-50',\n                className\n            ])}\n        />\n    )\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, ...props }, ref) => {\n    return <InputPrimitive ref={ref} {...props} className={ctr(className, input())} />\n})\n\nInput.displayName = 'Input'\n\nexport { Description, FieldError, FieldGroup, Input, Label, type FieldProps }\n"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport type React from 'react'\n\nimport { IconMenu } from 'hq-icons'\nimport type { GridListItemProps, GridListProps } from 'react-aria-components'\nimport {\n    Button,\n    GridListItem as GridListItemPrimitive,\n    GridList as GridListPrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { cn, cr, ctr } from './utils'\n\nconst gridListStyles = tv({\n    base: '*:data-drop-target:border-primary relative max-h-96 overflow-auto rounded-lg border *:data-drop-target:border'\n})\n\nconst GridList = <T extends object>({ children, className, ...props }: GridListProps<T>) => (\n    <GridListPrimitive className={ctr(className, gridListStyles())} {...props}>\n        {children}\n    </GridListPrimitive>\n)\n\nconst itemStyles = tv({\n    base: 'group text-fg [--selected-item-hovered:theme(--color-muted/70%)] [--selected-item:theme(--color-muted/80%)] relative -mb-px flex cursor-default gap-3 border-y px-3 py-2 outline-hidden -outline-offset-2 transition select-none first:rounded-t-md first:border-t-0 last:mb-0 last:rounded-b-md last:border-b-0 sm:text-sm',\n    variants: {\n        isHovered: { true: 'bg-subtle' },\n        isSelected: {\n            true: 'border-muted/50 z-20 bg-(--selected-item) data-hovered:bg-(--selected-item-hovered)'\n        },\n        isFocused: {\n            true: 'outline-hidden'\n        },\n        isFocusVisible: {\n            true: 'ring-primary bg-(--selected-item) ring-1 outline-hidden data-hovered:bg-(--selected-item-hovered) data-selected:bg-(--selected-item)'\n        },\n        isDisabled: {\n            true: 'text-muted-fg/70'\n        }\n    }\n})\n\nconst GridListItem = ({ className, ...props }: GridListItemProps) => {\n    const textValue = typeof props.children === 'string' ? props.children : undefined\n    return (\n        <GridListItemPrimitive\n            textValue={textValue}\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                itemStyles({ ...renderProps, className })\n            )}\n        >\n            {({ selectionMode, selectionBehavior, allowsDragging }) => (\n                <>\n                    {allowsDragging && (\n                        <Button\n                            slot='drag'\n                            className='*:data-[slot=icon]:text-muted-fg cursor-grab data-dragging:cursor-grabbing'\n                        >\n                            <IconMenu />\n                        </Button>\n                    )}\n\n                    <span\n                        aria-hidden\n                        className='bg-primary absolute inset-y-0 left-0 hidden h-full w-0.5 group-data-selected:block'\n                    />\n                    {selectionMode === 'multiple' && selectionBehavior === 'toggle' && (\n                        <Checkbox className='-mr-2' slot='selection' />\n                    )}\n                    {props.children as React.ReactNode}\n                </>\n            )}\n        </GridListItemPrimitive>\n    )\n}\n\nconst GridEmptyState = ({ ref, className, ...props }: React.ComponentProps<'div'>) => (\n    <div ref={ref} className={cn('p-6', className)} {...props} />\n)\n\nGridList.Item = GridListItem\nGridList.EmptyState = GridEmptyState\n\nexport { GridList }\nexport type { GridListItemProps, GridListProps }\n"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from 'hq-icons'\nimport {\n    Button,\n    type ButtonProps,\n    NumberField as NumberFieldPrimitive,\n    type NumberFieldProps as NumberFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ctr, useMediaQuery } from './utils'\n\nconst fieldBorderStyles = tv({\n    base: 'group-data-focused:border-primary/70 group-data-hovered:border-primary/60',\n    variants: {\n        isInvalid: {\n            true: 'group-data-focused:border-danger/70'\n        },\n        isDisabled: {\n            true: 'group-data-focused:border-muted'\n        }\n    }\n})\n\nconst numberFieldStyles = tv({\n    slots: {\n        base: 'group flex flex-col gap-y-1.5',\n        stepperButton:\n            'text-muted-fg data-pressed:bg-primary data-pressed:text-primary-fg group-data-disabled:bg-secondary/70 h-10 cursor-default px-3'\n    }\n})\n\nconst { base, stepperButton } = numberFieldStyles()\n\ninterface NumberFieldProps extends NumberFieldPrimitiveProps {\n    label?: string\n    description?: string\n    placeholder?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst NumberField = ({\n    label,\n    placeholder,\n    description,\n    className,\n    errorMessage,\n    ...props\n}: NumberFieldProps) => {\n    const isMobile = useMediaQuery('(max-width: 768px)')\n    return (\n        <NumberFieldPrimitive {...props} className={ctr(className, base())}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='overflow-hidden'>\n                {(renderProps) => (\n                    <>\n                        {isMobile ? <StepperButton slot='decrement' className='border-r' /> : null}\n                        <Input className='tabular-nums' placeholder={placeholder} />\n                        <div\n                            className={fieldBorderStyles({\n                                ...renderProps,\n                                className: 'grid h-10 place-content-center border-s'\n                            })}\n                        >\n                            {isMobile ? (\n                                <StepperButton slot='increment' />\n                            ) : (\n                                <div className='flex h-full flex-col'>\n                                    <StepperButton\n                                        slot='increment'\n                                        emblemType='chevron'\n                                        className='h-5 px-1'\n                                    />\n                                    <div\n                                        className={fieldBorderStyles({\n                                            ...renderProps,\n                                            className: 'border-muted border-b'\n                                        })}\n                                    />\n                                    <StepperButton\n                                        slot='decrement'\n                                        emblemType='chevron'\n                                        className='h-5 px-1'\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </>\n                )}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </NumberFieldPrimitive>\n    )\n}\n\ninterface StepperButtonProps extends ButtonProps {\n    slot: 'increment' | 'decrement'\n    emblemType?: 'chevron' | 'default'\n    className?: string\n}\n\nconst StepperButton = ({\n    slot,\n    className,\n    emblemType = 'default',\n    ...props\n}: StepperButtonProps) => {\n    const icon =\n        emblemType === 'chevron' ? (\n            slot === 'increment' ? (\n                <IconChevronUp className='size-5' />\n            ) : (\n                <IconChevronDown className='size-5' />\n            )\n        ) : slot === 'increment' ? (\n            <IconPlus />\n        ) : (\n            <IconMinus />\n        )\n    return (\n        <Button className={stepperButton({ className })} slot={slot} {...props}>\n            {icon}\n        </Button>\n    )\n}\n\nexport { NumberField }\nexport type { NumberFieldProps }\n"
  },
  "tree": {
    "component": "@/components/ui/tree",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { ButtonProps, TreeItemProps, TreeProps } from 'react-aria-components'\nimport {\n    Button,\n    UNSTABLE_TreeItemContent as TreeItemContent,\n    UNSTABLE_TreeItem as TreeItemPrimitive,\n    UNSTABLE_Tree as TreePrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { Indicator } from './disclosure'\nimport { cr } from './utils'\n\nconst treeStyles = tv({\n    base: 'bg-bg flex max-h-96 min-w-72 cursor-default flex-col overflow-auto rounded-lg border py-2 outline-none lg:text-sm',\n    variants: {\n        isFocusVisible: {\n            true: 'outline-primary outline-2 outline-offset-[-1px]'\n        }\n    }\n})\n\nconst Tree = <T extends object>({ className, ...props }: TreeProps<T>) => {\n    return (\n        <TreePrimitive\n            className={cr(className, (className, renderProps) =>\n                treeStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            {...props}\n        >\n            {props.children}\n        </TreePrimitive>\n    )\n}\n\nconst itemStyles = tv({\n    base: [\n        'p-[0.286rem_0.286rem_0.286rem_0.571rem] pl-[calc((var(--tree-item-level)-1)*20px+0.571rem+var(--padding))] [--padding:20px] outline-none',\n        '**:data-[slot=chevron]:text-muted-fg **:data-[slot=chevron]:outline-none',\n        'data-[has-child-rows]:[--padding:0px]'\n    ],\n    variants: {\n        isExpanded: {\n            true: '**:data-[slot=chevron]:text-fg **:data-[slot=chevron]:rotate-0'\n        },\n        isFocusVisible: {\n            true: '**:data-[slot=chevron]:text-fg ring-primary ring-1 outline-none'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\nconst TreeItem = <T extends object>({ className, ...props }: TreeItemProps<T>) => {\n    return (\n        <TreeItemPrimitive\n            className={cr(className, (className, renderProps) =>\n                itemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            {...props}\n        >\n            {props.children}\n        </TreeItemPrimitive>\n    )\n}\n\nconst ItemContent = (props: React.ComponentProps<typeof TreeItemContent>) => (\n    <TreeItemContent {...props}>\n        <div className='flex items-center'>\n            <>{props.children as React.ReactNode}</>\n        </div>\n    </TreeItemContent>\n)\n\nconst ItemCheckbox = () => <Checkbox slot='selection' />\n\nconst ItemLabel = (props: ButtonProps) => (\n    <Button\n        slot='chevron'\n        style={{ outline: 'none', display: 'flex', alignItems: 'center', gap: '0.5rem' }}\n        {...props}\n    />\n)\n\nTreeItem.Label = ItemLabel\nTreeItem.Indicator = Indicator\nTreeItem.Checkbox = ItemCheckbox\nTreeItem.Content = ItemContent\n\nexport { Tree, TreeItem }\nexport type { TreeItemProps, TreeProps }\n"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import type React from 'react'\n\nimport { type VariantProps, tv } from 'tailwind-variants'\n\nconst skeletonStyles = tv({\n    base: 'shrink-0 animate-pulse',\n    variants: {\n        variant: {\n            muted: 'bg-fg/20',\n            lighter: 'bg-fg/15'\n        },\n        shape: {\n            circle: 'rounded-full',\n            square: 'rounded-lg'\n        }\n    },\n    defaultVariants: {\n        variant: 'muted',\n        shape: 'square'\n    }\n})\n\ntype SkeletonProps = React.ComponentProps<'div'> & VariantProps<typeof skeletonStyles>\nconst Skeleton = ({ shape, ref, variant, className, ...props }: SkeletonProps) => {\n    return <div ref={ref} className={skeletonStyles({ shape, variant, className })} {...props} />\n}\n\nexport { Skeleton }\nexport type { SkeletonProps }\n"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    Button,\n    ColorPicker as ColorPickerPrimitive,\n    Dialog,\n    type ColorPickerProps as ColorPickerPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport type { Placement } from '@react-types/overlays'\n\nimport { ColorArea } from './color-area'\nimport { ColorField } from './color-field'\nimport { ColorSlider } from './color-slider'\nimport { ColorSwatch } from './color-swatch'\nimport { Description } from './field'\nimport { Popover } from './popover'\nimport { focusButtonStyles } from './utils'\n\nconst buttonStyles = tv({\n    extend: focusButtonStyles,\n    base: 'btn-trigger flex cursor-pointer items-center rounded-lg text-sm data-disabled:cursor-default data-disabled:opacity-50'\n})\n\nexport interface ColorPickerProps extends ColorPickerPrimitiveProps {\n    label?: string\n    children?: React.ReactNode\n    showArrow?: boolean\n    isDisabled?: boolean\n    placement?: Placement\n    description?: string\n}\n\nconst ColorPicker = ({\n    showArrow = false,\n    placement = 'bottom start',\n    label,\n    isDisabled,\n    children,\n    description,\n    ...props\n}: ColorPickerProps) => {\n    return (\n        <div className='flex flex-col gap-y-2'>\n            <ColorPickerPrimitive {...props}>\n                <Popover>\n                    <Button isDisabled={isDisabled} className={buttonStyles}>\n                        <ColorSwatch className='size-6' />\n                        {label && <span className='ml-2'>{label}</span>}\n                    </Button>\n                    <Popover.Content\n                        className='overflow-y-auto px-0 pt-4 pb-3 outline-none **:aria-[expanded=true]:ring-transparent **:data-dialog:gap-2 **:data-focus-within:ring-transparent data-focused:outline-none **:data-focused:ring-transparent **:data-[slot=color-area]:w-full **:data-[slot=color-slider]:w-full sm:max-w-56 sm:min-w-min sm:p-3 sm:**:data-[slot=color-area]:size-56'\n                        showArrow={showArrow}\n                        placement={placement}\n                    >\n                        <Dialog className='flex flex-col gap-2 outline-hidden'>\n                            {children || (\n                                <>\n                                    <ColorArea\n                                        colorSpace='hsb'\n                                        xChannel='saturation'\n                                        yChannel='brightness'\n                                    />\n                                    <ColorSlider\n                                        showOutput={false}\n                                        colorSpace='hsb'\n                                        channel='hue'\n                                    />\n                                    <ColorField aria-label='Hex' />\n                                </>\n                            )}\n                        </Dialog>\n                    </Popover.Content>\n                </Popover>\n            </ColorPickerPrimitive>\n            {description && <Description>{description}</Description>}\n        </div>\n    )\n}\n\nexport { ColorPicker }\n"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconChevronLeft,\n    IconChevronRight,\n    IconChevronsLeft,\n    IconChevronsRight,\n    IconEllipsis\n} from 'hq-icons'\nimport {\n    ListBox,\n    ListBoxItem,\n    ListBoxSection,\n    Separator,\n    type ListBoxItemProps,\n    type ListBoxProps,\n    type ListBoxSectionProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { buttonStyles } from './button'\nimport { cn, cr } from './utils'\n\nconst paginationStyles = tv({\n    slots: {\n        pagination: 'mx-auto flex w-full justify-center gap-[5px]',\n        section: 'flex h-9 gap-[5px]',\n        list: 'flex flex-row items-center gap-[5px]',\n        itemButton:\n            'data-focus-visible:border-primary text-fg data-focus-visible:bg-primary/10 data-focus-visible:ring-primary/20 cursor-pointer font-normal data-focus-visible:ring-4 data-focused:outline-none',\n        itemLabel: 'grid h-9 place-content-center px-3.5 tabular-nums',\n        itemSeparator: 'grid h-9 place-content-center',\n        itemEllipsis:\n            'data-focus-visible:border-primary data-focus-visible:bg-primary/10 data-focus-visible:ring-primary/20 flex size-9 items-center justify-center rounded-lg border border-transparent data-focus-visible:ring-4 data-focused:outline-none',\n        itemEllipsisIcon: 'flex size-9 items-center justify-center',\n        defaultItem:\n            'data-focus-visible:border-primary data-focus-visible:bg-primary/10 data-focus-visible:ring-primary/20 size-9 cursor-pointer font-normal tabular-nums disabled:cursor-default disabled:opacity-100 data-focus-visible:ring-4 data-focused:outline-none',\n        itemSeparatorLine: 'bg-secondary-fg/40 h-5 w-[1.5px] shrink-0 rotate-[14deg]'\n    }\n})\n\nconst {\n    pagination,\n    section,\n    list,\n    itemButton,\n    itemLabel,\n    itemSeparator,\n    itemEllipsis,\n    itemEllipsisIcon,\n    defaultItem,\n    itemSeparatorLine\n} = paginationStyles()\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (\n    <nav\n        role='navigation'\n        aria-label='pagination'\n        className={pagination({ className })}\n        {...props}\n    />\n)\n\nconst PaginationSection = <T extends object>({ className, ...props }: ListBoxSectionProps<T>) => (\n    <ListBoxSection {...props} className={section({ className })} />\n)\n\nconst List = <T extends object>({ className, ...props }: ListBoxProps<T>) => {\n    return (\n        <ListBox\n            orientation='horizontal'\n            aria-label={props['aria-label'] || 'Pagination'}\n            layout='grid'\n            className={cr(className, (className) => list({ className }))}\n            {...props}\n        />\n    )\n}\n\nconst renderListItem = (\n    props: ListBoxItemProps & {\n        textValue?: string\n        'aria-current'?: string | undefined\n        isDisabled?: boolean\n        className?: string\n    },\n    children: React.ReactNode\n) => <ListBoxItem {...props}>{children}</ListBoxItem>\n\ninterface PaginationItemProps extends ListBoxItemProps, VariantProps<typeof buttonStyles> {\n    children?: React.ReactNode\n    className?: string\n    isCurrent?: boolean\n    role?: 'label' | 'separator' | 'ellipsis' | 'default' | 'last' | 'first' | 'previous' | 'next'\n}\n\nconst Item = ({\n    role = 'default',\n    size = 'sm',\n    variant = 'outline',\n    className,\n    isCurrent,\n    children,\n    ...props\n}: PaginationItemProps) => {\n    const textValue =\n        typeof children === 'string'\n            ? children\n            : typeof children === 'number'\n              ? children.toString()\n              : undefined\n\n    const renderPaginationIndicator = (indicator: React.ReactNode) =>\n        renderListItem(\n            {\n                textValue: variant,\n                'aria-current': isCurrent ? 'page' : undefined,\n                isDisabled: isCurrent,\n                className: cn(\n                    buttonStyles({\n                        variant: 'outline',\n                        size: 'sm',\n                        className: itemButton()\n                    }),\n                    className\n                ),\n                ...props\n            },\n            indicator\n        )\n\n    switch (role) {\n        case 'label':\n            return renderListItem(\n                {\n                    textValue: textValue,\n                    className: itemLabel({ className }),\n                    ...props\n                },\n                children\n            )\n        case 'separator':\n            return renderListItem(\n                {\n                    textValue: 'Separator',\n                    className: itemSeparator({ className }),\n                    ...props\n                },\n                <Separator orientation='vertical' className={itemSeparatorLine()} />\n            )\n        case 'ellipsis':\n            return renderListItem(\n                {\n                    textValue: 'More pages',\n                    className: itemEllipsis({ className }),\n                    ...props\n                },\n                <span aria-hidden className={itemEllipsisIcon({ className })}>\n                    <IconEllipsis />\n                </span>\n            )\n        case 'previous':\n            return renderPaginationIndicator(<IconChevronLeft />)\n        case 'next':\n            return renderPaginationIndicator(<IconChevronRight />)\n        case 'first':\n            return renderPaginationIndicator(<IconChevronsLeft />)\n        case 'last':\n            return renderPaginationIndicator(<IconChevronsRight />)\n        default:\n            return renderListItem(\n                {\n                    textValue: textValue,\n                    'aria-current': isCurrent ? 'page' : undefined,\n                    isDisabled: isCurrent,\n                    className: cn(\n                        buttonStyles({\n                            variant: isCurrent ? 'primary' : variant,\n                            size,\n                            className: defaultItem({ className })\n                        }),\n                        className\n                    ),\n                    ...props\n                },\n                children\n            )\n    }\n}\n\nPagination.Item = Item\nPagination.List = List\nPagination.Section = PaginationSection\n\nexport { Pagination }\n"
  },
  "container": {
    "component": "@/components/ui/container",
    "raw": "import { tv } from 'tailwind-variants'\n\nconst containerStyles = tv({\n    base: '@container mx-auto w-full max-w-7xl lg:max-w-(--breakpoint-xl) 2xl:max-w-(--breakpoint-2xl)',\n    variants: {\n        intent: {\n            constrained: 'sm:px-6 lg:px-8',\n            'padded-content': 'px-4 sm:px-6 lg:px-8'\n        }\n    },\n    defaultVariants: {\n        intent: 'padded-content'\n    }\n})\n\ninterface ContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n    intent?: 'constrained' | 'padded-content'\n    ref?: React.Ref<HTMLDivElement>\n}\n\nconst Container = ({ className, intent, ref, ...props }: ContainerProps) => (\n    <div className={containerStyles({ intent, className })} {...props} ref={ref} />\n)\n\nexport { Container }\nexport type { ContainerProps }\n"
  },
  "disclosure": {
    "component": "@/components/ui/disclosure",
    "raw": "'use client'\n\nimport { IconMinus } from 'hq-icons'\nimport type {\n    ButtonProps,\n    DisclosureGroupProps as DisclosureGroupPrimitiveProps,\n    DisclosurePanelProps as DisclosurePanelPrimitiveProps,\n    DisclosureProps as DisclosurePrimitiveProps\n} from 'react-aria-components'\nimport {\n    Button,\n    DisclosureGroup as DisclosureGroupPrimitive,\n    Disclosure as DisclosurePrimitive,\n    DisclosurePanel as DisclosurePrimitivePanel,\n    Heading\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn, cr, ctr } from './utils'\n\ninterface AccordionProps extends DisclosureGroupPrimitiveProps {\n    ref?: React.RefObject<HTMLDivElement>\n    hideIndicator?: boolean\n    hideBorder?: boolean\n}\nconst DisclosureGroup = ({ children, ref, className, ...props }: AccordionProps) => {\n    return (\n        <DisclosureGroupPrimitive\n            ref={ref}\n            data-slot='disclosure-group'\n            {...props}\n            className={cn(\n                className,\n                props.hideIndicator && '**:data-[slot=disclosure-chevron]:text-transparent',\n                props.hideBorder &&\n                    '**:data-[slot=disclosure]:border-b-0 **:data-[slot=disclosure-group]:border-t-0',\n                'peer cursor-pointer data-disabled:cursor-not-allowed data-disabled:opacity-75'\n            )}\n        >\n            {(values) => (\n                <div data-slot='disclosure-content'>\n                    {typeof children === 'function' ? children(values) : children}\n                </div>\n            )}\n        </DisclosureGroupPrimitive>\n    )\n}\n\nconst disclosure = tv({\n    base: ['peer group/disclosure w-full min-w-60 border-b'],\n    variants: {\n        isDisabled: {\n            true: 'cursor-not-allowed opacity-70'\n        }\n    }\n})\n\ninterface CollapsibleProps extends DisclosurePrimitiveProps {\n    ref?: React.Ref<HTMLDivElement>\n}\nconst Disclosure = ({ className, ref, ...props }: CollapsibleProps) => {\n    return (\n        <DisclosurePrimitive\n            ref={ref}\n            data-slot='disclosure'\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                disclosure({ ...renderProps, className })\n            )}\n        >\n            {props.children}\n        </DisclosurePrimitive>\n    )\n}\n\nconst disclosureTrigger = tv({\n    base: [\n        'group/trigger **:svg:text-muted-fg flex w-full items-center justify-between gap-x-2 py-3 font-medium whitespace-nowrap **:data-[slot=disclosure-chevron]:size-4 **:data-[slot=icon]:-mx-0.5 **:data-[slot=icon]:shrink-0 sm:text-sm **:[span]:flex **:[span]:items-center **:[span]:gap-x-1 **:[span]:*:data-[slot=icon]:mr-1 [&[aria-expanded=true]_[data-slot=disclosure-chevron]]:rotate-0'\n    ],\n    variants: {\n        isFocused: {\n            true: 'text-fg outline-hidden'\n        },\n        isOpen: {\n            true: 'text-fg'\n        },\n        isDisabled: {\n            true: 'cursor-default opacity-50'\n        }\n    }\n})\n\ninterface DisclosureTriggerProps extends ButtonProps {\n    ref?: React.Ref<HTMLButtonElement>\n}\nconst DisclosureTrigger = ({ className, ref, ...props }: DisclosureTriggerProps) => {\n    return (\n        <Heading>\n            <Button\n                ref={ref}\n                slot='trigger'\n                className={cr(className, (className, renderProps) =>\n                    disclosureTrigger({\n                        ...renderProps,\n                        className\n                    })\n                )}\n                {...props}\n            >\n                {(values) => (\n                    <>\n                        {typeof props.children === 'function'\n                            ? props.children(values)\n                            : props.children}\n                        <Indicator\n                            slot='disclosure-chevron'\n                            className='internal-chevron ml-auto shrink-0'\n                        />\n                    </>\n                )}\n            </Button>\n        </Heading>\n    )\n}\n\ninterface DisclosureContentProps extends DisclosurePanelPrimitiveProps {\n    ref?: React.Ref<HTMLDivElement>\n}\nconst DisclosurePanel = ({ className, ref, ...props }: DisclosureContentProps) => {\n    return (\n        <DisclosurePrimitivePanel\n            ref={ref}\n            data-slot='disclosure-panel'\n            className={ctr(\n                className,\n                'text-muted-fg overflow-hidden text-sm transition-all **:data-[slot=disclosure-group]:border-t **:data-[slot=disclosure-group]:**:[.internal-chevron]:hidden has-data-[slot=disclosure-group]:**:[button]:px-4'\n            )}\n            {...props}\n        >\n            <div\n                data-slot='disclosure-panel-content'\n                className='pt-0 not-has-data-[slot=disclosure-group]:group-data-expanded/disclosure:pb-3'\n            >\n                {props.children}\n            </div>\n        </DisclosurePrimitivePanel>\n    )\n}\n\nconst Indicator = ({ className, slot = 'chevron' }: { className?: string; slot?: string }) => (\n    <div\n        data-slot={slot}\n        className={cn(\n            className,\n            'relative inline-flex size-5 -rotate-90 items-center justify-center transition-transform duration-300'\n        )}\n    >\n        <IconMinus data-slot='chevron-passive' className='absolute size-3.5' />\n        <IconMinus\n            data-slot={slot}\n            className='absolute size-3.5 -rotate-90 transition-transform duration-300'\n        />\n    </div>\n)\n\nconst Accordion = (props: AccordionProps) => <DisclosureGroup {...props} />\nAccordion.Item = Disclosure\nAccordion.Trigger = DisclosureTrigger\nAccordion.Content = DisclosurePanel\n\nconst Collapsible = (props: CollapsibleProps) => <Disclosure {...props} />\nCollapsible.Trigger = DisclosureTrigger\nCollapsible.Content = DisclosurePanel\n\nexport { Accordion, Collapsible, Indicator }\nexport type { AccordionProps, CollapsibleProps, DisclosureContentProps, DisclosureTriggerProps }\n"
  },
  "toggle": {
    "component": "@/components/ui/toggle",
    "raw": "'use client'\n\nimport { createContext, use } from 'react'\n\nimport type { ToggleButtonGroupProps, ToggleButtonProps } from 'react-aria-components'\nimport { ToggleButton, ToggleButtonGroup } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { cr } from './utils'\n\ntype ToggleGroupContextProps = {\n    isDisabled?: boolean\n    gap?: 0 | 1 | 2 | 3 | 4\n    variant?: 'primary' | 'outline' | 'dark'\n    orientation?: 'horizontal' | 'vertical'\n    size?: 'sm' | 'md' | 'lg' | 'icon'\n}\n\nconst ToggleGroupContext = createContext<ToggleGroupContextProps>({\n    gap: 1,\n    variant: 'outline',\n    orientation: 'horizontal',\n    size: 'md'\n})\n\ntype BaseToggleGroupProps = Omit<ToggleGroupContextProps, 'gap' | 'variant'>\ninterface ToggleGroupPropsNonZeroGap extends BaseToggleGroupProps {\n    gap?: Exclude<ToggleGroupContextProps['gap'], 0>\n    variant?: ToggleGroupContextProps['variant']\n}\n\ninterface ToggleGroupPropsGapZero extends BaseToggleGroupProps {\n    gap?: 0\n    variant?: ToggleGroupContextProps['variant']\n}\n\ntype ToggleGroupProps = ToggleButtonGroupProps &\n    (ToggleGroupPropsGapZero | ToggleGroupPropsNonZeroGap) & {\n        ref?: React.RefObject<HTMLDivElement>\n    }\n\nconst toggleGroupStyles = tv({\n    variants: {\n        orientation: {\n            horizontal: 'flex flex-row [-ms-overflow-style:none]',\n            vertical: 'grid items-start'\n        },\n        gap: {\n            0: 'gap-0 rounded-lg *:[button]:rounded-none',\n            1: 'gap-1',\n            2: 'gap-2',\n            3: 'gap-3',\n            4: 'gap-4'\n        }\n    },\n    defaultVariants: {\n        orientation: 'horizontal',\n        gap: 0\n    },\n    compoundVariants: [\n        {\n            gap: 0,\n            orientation: 'vertical',\n            className:\n                '*:[button]:-mt-px *:[button]:first:rounded-t-lg *:[button]:last:rounded-b-lg'\n        },\n        {\n            gap: 0,\n            orientation: 'horizontal',\n            className:\n                '*:[button]:-mr-px *:[button]:first:rounded-s-lg *:[button]:last:rounded-e-lg'\n        }\n    ]\n})\n\nconst ToggleGroup = ({\n    className,\n    ref,\n    variant,\n    gap,\n    size,\n    orientation,\n    ...props\n}: ToggleGroupProps) => {\n    return (\n        <ToggleGroupContext.Provider\n            value={{ variant, gap, orientation, size, isDisabled: props.isDisabled }}\n        >\n            <ToggleButtonGroup\n                ref={ref}\n                orientation={orientation}\n                className={cr(className, (className, renderProps) =>\n                    toggleGroupStyles({\n                        ...renderProps,\n                        gap,\n                        orientation,\n                        className\n                    })\n                )}\n                {...props}\n            />\n        </ToggleGroupContext.Provider>\n    )\n}\n\nconst toggleStyles = tv({\n    base: [\n        'border-muted inline-flex cursor-pointer items-center gap-x-2 rounded-lg border outline-hidden transition sm:text-sm',\n        '*:svg:-mx-0.5 *:svg:my-1 *:svg:size-4 *:svg:shrink-0'\n    ],\n    variants: {\n        isDisabled: {\n            true: 'cursor-default opacity-50'\n        },\n        isFocusVisible: {\n            true: 'ring-primary/20 z-20 ring-4'\n        },\n        variant: {\n            primary:\n                'data-hovered:bg-primary/20 data-pressed:bg-primary/90 data-selected:bg-primary data-selected:text-primary-fg',\n            dark: 'data-hovered:bg-secondary/80 data-pressed:bg-secondary/90 data-selected:bg-fg data-selected:text-bg',\n            outline:\n                'data-hovered:bg-secondary/40 data-pressed:bg-secondary/60 data-selected:bg-secondary data-selected:text-secondary-fg'\n        },\n        noGap: { true: '' },\n        orientation: {\n            horizontal: 'inline-flex justify-center',\n            vertical: 'flex'\n        },\n        size: {\n            sm: 'h-9 px-3.5',\n            md: 'h-10 px-4',\n            lg: '*:svg:size-4.5 h-11 px-5 sm:text-base',\n            icon: 'size-10 shrink-0'\n        },\n        shape: {\n            square: 'rounded-lg',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        size: 'sm',\n        shape: 'square'\n    },\n    compoundVariants: [\n        {\n            noGap: true,\n            orientation: 'vertical',\n            className: 'w-full'\n        }\n    ]\n})\n\ninterface ToggleProps extends ToggleButtonProps, VariantProps<typeof toggleStyles> {\n    ref?: React.RefObject<HTMLButtonElement>\n}\n\nconst Toggle = ({ className, variant, ref, ...props }: ToggleProps) => {\n    const {\n        variant: groupvariant,\n        orientation,\n        gap,\n        size,\n        isDisabled: isGroupDisabled\n    } = use(ToggleGroupContext)\n    return (\n        <ToggleButton\n            ref={ref}\n            isDisabled={props.isDisabled ?? isGroupDisabled}\n            className={cr(className, (className, renderProps) =>\n                toggleStyles({\n                    ...renderProps,\n                    variant: variant ?? groupvariant,\n                    size: props.size ?? size,\n                    orientation,\n                    shape: props.shape,\n                    noGap: gap === 0,\n                    className\n                })\n            )}\n            {...props}\n        />\n    )\n}\n\nToggle.Group = ToggleGroup\n\nexport { Toggle }\nexport type { ToggleGroupProps, ToggleProps }\n"
  },
  "command": {
    "component": "@/components/ui/command",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { IconSearch, IconX } from 'hq-icons'\nimport {\n    Button,\n    Dialog,\n    Modal,\n    ModalOverlay,\n    Text,\n    type ModalOverlayProps,\n    type SeparatorProps,\n    type TextProps\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Keyboard, type KeyboardProps } from './keyboard'\nimport { Separator } from './separator'\nimport { useMediaQuery } from './utils'\n\nconst commandStyles = tv({\n    slots: {\n        command: [\n            'flex h-svh w-full flex-col overflow-hidden rounded-lg sm:h-full',\n            '[&_[cmdk-group-heading]]:text-muted-fg [&_[cmdk-group-heading]]:-mb-1.5 [&_[cmdk-group-heading]]:ml-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_[data-slot=icon]]:size-5 [&_[cmdk-input]]:h-12',\n            '[&_[cmdk-item]]:py-2.5 [&_[cmdk-item]]:pr-4 [&_[cmdk-item]]:pl-2.5'\n        ],\n        list: 'max-h-[calc(100vh-35%)] overflow-x-hidden overflow-y-auto pb-16 md:max-h-[456px] lg:pb-0 [&:not(:has(.csec))]:p-2 [&:not(:has(.csec))_.csep]:my-2',\n        input: [\n            'placeholder:text-muted-fg flex w-full rounded-lg bg-transparent text-base',\n            'outline-none data-focused:outline-none',\n            'disabled:cursor-not-allowed disabled:opacity-50'\n        ],\n        section: [\n            'csec text-fg overflow-hidden px-2 py-2',\n            '[&_[cmdk-group-heading]]:text-muted-fg [&_[cmdk-group-heading]]:ml-[1px] [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-[0.8rem] [&_[cmdk-group-heading]]:select-none'\n        ],\n        modal: [\n            'bg-bg text-fg ring-fg/5 dark:ring-border fixed top-auto bottom-0 left-[50%] z-50 grid h-[calc(100vh-35%)] w-full max-w-full translate-x-[-50%] gap-4 overflow-hidden rounded-t-lg ring-1 shadow-lg sm:top-[6rem] sm:bottom-auto sm:h-auto sm:w-full sm:max-w-2xl sm:rounded-lg',\n            'data-entering:fade-in data-entering:slide-in-from-bottom data-entering:animate-in data-entering:sm:zoom-in-95 data-entering:sm:slide-in-from-bottom-0 data-entering:duration-200 data-entering:ease-out',\n            'data-exiting:slide-out-to-bottom data-exiting:sm:slide-out-to-bottom-0 data-exiting:sm:zoom-out-95 data-exiting:fade-out data-exiting:animate-out data-exiting:duration-150'\n        ],\n        closeButton: [\n            '[&>span>[data-slot=icon]]:text-muted-fg data-pressed:[&_[data-slot=icon]]:text-fg lg:border-muted lg:bg-muted/50 data-[state=open]:bg-muted data-[state=open]:text-muted-fg lg:data-focused:border-fg/30 lg:data-focused:ring-ring absolute top-1.5 right-3 rounded-lg border border-transparent px-2.5 py-2.5 text-xs transition-opacity disabled:pointer-events-none data-focused:outline-none lg:top-3.5 lg:py-0.5 lg:data-focused:ring-2',\n            'lg:data-focused:bg-primary/10 lg:data-focused:ring-primary/20 lg:data-focused:border-primary/70 data-focused:outline-none lg:data-focused:ring-2',\n            'disabled:pointer-events-none'\n        ],\n        empty: 'text-muted-fg py-6 text-center text-sm',\n        kbdKeyboard: 'hidden group-data-[selected=true]:opacity-50 lg:block',\n        description: 'ml-auto hidden text-sm sm:inline',\n        item: [\n            'group text-fg relative flex cursor-default items-center rounded-lg py-2 text-sm outline-none select-none',\n            'data-[selected=true]:bg-primary data-[selected=true]:text-primary-fg [&[data-selected=true]_[data-slot=icon]]:text-primary-fg',\n            'focus-visible:bg-primary focus-visible:text-primary-fg [&:focus-visible_[data-slot=icon]]:text-primary-fg',\n            'data-[danger=true]:text-danger data-[danger=true]:data-[selected=true]:bg-danger data-[danger=true]:data-[selected=true]:text-danger-fg',\n            'data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50',\n            '[&_[data-slot=icon]]:text-muted-fg [&_[data-slot=icon]]:mr-2 [&_[data-slot=icon]]:size-[1.10rem] [&_[data-slot=icon]]:shrink-0',\n            '**:data-avatar:mr-2 **:data-avatar:size-[1.10rem] **:data-avatar:shrink-0'\n        ]\n    },\n\n    variants: {\n        isDanger: {\n            true: 'text-danger data-[selected=true]:bg-danger data-[selected=true]:text-danger-fg [&[data-selected=true]_[data-slot=icon]]:text-danger-fg'\n        }\n    }\n})\n\nconst { command, empty, section, list, item, closeButton, modal, input, kbdKeyboard, description } =\n    commandStyles()\n\ninterface CommandContextProps {\n    hideSearchIndicator?: boolean\n    hideCloseButton?: boolean\n    messageOnEmpty?: boolean | string\n    isBlurred?: boolean\n}\n\nconst CommandContext = React.createContext<CommandContextProps>({})\n\ninterface CommandRootProps {\n    CommandEmpty?: typeof CommandEmpty\n    CommandInput?: typeof CommandInput\n    CommandItem?: typeof CommandItem\n    CommandKeyboard?: typeof CommandKeyboard\n    CommandList?: typeof CommandList\n    CommandSection?: typeof CommandSection\n    CommandSeparator?: typeof CommandSeparator\n    CommandDescription?: typeof CommandDescription\n}\n\nconst modalOverlay = tv({\n    base: ['bg-fg/15 dark:bg-fg/40 fixed inset-0 z-50 max-h-(--visual-viewport-height)'],\n    variants: {\n        isBlurred: {\n            true: 'bg-bg supports-backdrop-filter:bg-bg/15 dark:supports-backdrop-filter:bg-bg/40 supports-backdrop-filter:backdrop-blur'\n        },\n        isEntering: {\n            true: 'fade-in animate-in duration-200 ease-out'\n        },\n        isExiting: {\n            true: 'fade-out animate-out duration-150 ease-in'\n        }\n    }\n})\ninterface CommandProps extends ModalOverlayProps, CommandRootProps, CommandContextProps {\n    children: React.ReactNode\n    value?: string\n    messageOnEmpty?: boolean | string\n    onValueChange?: (value: string) => void\n    classNames?: {\n        overlay?: string\n        content?: string\n    }\n}\n\nconst Command = ({\n    classNames,\n    hideSearchIndicator = false,\n    hideCloseButton = false,\n    messageOnEmpty,\n    value,\n    onValueChange,\n    children,\n    isBlurred = false,\n    ...props\n}: CommandProps) => {\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n\n    return (\n        <CommandContext.Provider value={{ hideSearchIndicator, hideCloseButton, messageOnEmpty }}>\n            <ModalOverlay\n                isDismissable\n                className={modalOverlay({\n                    isBlurred,\n                    className: classNames?.overlay\n                })}\n                {...props}\n            >\n                <Modal className={modal({ className: classNames?.content })}>\n                    <Dialog className='outline-none' aria-label='Command Palette'>\n                        {({ close }) => (\n                            <>\n                                <CommandPrimitive\n                                    value={value}\n                                    onValueChange={onValueChange}\n                                    className={command()}\n                                >\n                                    {children}\n                                </CommandPrimitive>\n                                {!hideCloseButton && (\n                                    <Button\n                                        autoFocus={!isDesktop}\n                                        onPress={close}\n                                        className={closeButton()}\n                                    >\n                                        <span className='hidden lg:block'>Esc</span>\n                                        <span className='-mr-2 block lg:hidden'>\n                                            <IconX />\n                                            <span className='sr-only'>Close command palette</span>\n                                        </span>\n                                    </Button>\n                                )}\n                            </>\n                        )}\n                    </Dialog>\n                </Modal>\n            </ModalOverlay>\n        </CommandContext.Provider>\n    )\n}\n\ntype CommandInputProps = React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n\nconst CommandInput = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive.Input>,\n    CommandInputProps\n>(({ className, ...props }, ref) => {\n    const { hideSearchIndicator } = React.useContext(CommandContext)\n    return (\n        <div className='flex items-center border-b px-3'>\n            {!hideSearchIndicator && <IconSearch className='mr-2 size-5 shrink-0 opacity-50' />}\n            <CommandPrimitive.Input\n                autoFocus\n                ref={ref}\n                className={input({ className: hideSearchIndicator ? 'pl-1' : className })}\n                {...props}\n            />\n        </div>\n    )\n})\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\ntype CommandListProps = React.ComponentProps<typeof CommandPrimitive.List>\n\nconst CommandList = ({ className, ...props }: CommandListProps) => {\n    const { messageOnEmpty } = React.useContext(CommandContext)\n    return (\n        <CommandPrimitive.List className={list({ className })} {...props}>\n            {messageOnEmpty !== false && (\n                <CommandEmpty>\n                    {typeof messageOnEmpty === 'string' ? messageOnEmpty : 'No results found.'}\n                </CommandEmpty>\n            )}\n            {props.children}\n        </CommandPrimitive.List>\n    )\n}\n\ntype CommandEmptyProps = React.ComponentProps<typeof CommandPrimitive.Empty>\n\nconst CommandEmpty = ({ className, ...props }: CommandEmptyProps) => {\n    return <CommandPrimitive.Empty className={empty({ className })} {...props} />\n}\n\ninterface CommandSectionProps extends React.ComponentProps<typeof CommandPrimitive.Group> {\n    separator?: boolean\n}\n\nconst CommandSection = ({ className, separator, ...props }: CommandSectionProps) => {\n    return (\n        <>\n            <CommandPrimitive.Group className={section({ className })} {...props}>\n                {props.children}\n                {separator && <CommandSeparator className='mt-2' />}\n            </CommandPrimitive.Group>\n        </>\n    )\n}\n\nconst CommandSeparator = ({ className, ...props }: SeparatorProps) => {\n    return (\n        <div className='csep -mx-4'>\n            <Separator className={className} {...props} orientation='horizontal' />\n        </div>\n    )\n}\n\ninterface CommandItemProps extends React.ComponentProps<typeof CommandPrimitive.Item> {\n    isDanger?: boolean\n}\n\nconst CommandItem = ({ isDanger, className, ...props }: CommandItemProps) => {\n    return (\n        <CommandPrimitive.Item\n            data-danger={isDanger ? 'true' : undefined}\n            className={item({ isDanger, className })}\n            {...props}\n        />\n    )\n}\n\ninterface CommandDescriptionProps extends TextProps {\n    intent?: 'danger' | 'warning' | 'primary' | 'secondary' | 'success'\n}\n\nconst CommandDescription = ({ intent, className, ...props }: CommandDescriptionProps) => {\n    return (\n        <Text\n            {...props}\n            slot='description'\n            className={description({\n                className: twJoin(\n                    intent === 'danger'\n                        ? 'group-data-[selected=true]:text-primary-fg/70 text-danger/90'\n                        : intent === 'warning'\n                          ? 'group-data-[selected=true]:text-primary-fg/70 text-warning/90'\n                          : intent === 'success'\n                            ? 'group-data-[selected=true]:text-primary-fg/70 text-success/90'\n                            : intent === 'primary'\n                              ? 'text-primary/90 group-data-[selected=true]:text-white/70'\n                              : 'group-data-[selected=true]:text-primary-fg/70 text-muted-fg',\n                    className\n                )\n            })}\n        />\n    )\n}\n\nconst CommandKeyboard = (props: KeyboardProps) => (\n    <Keyboard classNames={{ kbd: kbdKeyboard(), base: '-mr-2.5' }} {...props} />\n)\n\nCommand.Empty = CommandEmpty\nCommand.Input = CommandInput\nCommand.Item = CommandItem\nCommand.Keyboard = CommandKeyboard\nCommand.List = CommandList\nCommand.Section = CommandSection\nCommand.Separator = CommandSeparator\nCommand.Description = CommandDescription\n\nexport { Command }\n"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown } from 'hq-icons'\nimport {\n    type SelectProps as SelectPrimitiveProps,\n    type ValidationResult,\n    Button,\n    Group,\n    Select as SelectPrimitive,\n    SelectValue\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport type { Placement } from '@react-types/overlays'\n\nimport { DropdownItem, DropdownItemDetails, DropdownSection } from './dropdown'\nimport { Description, FieldError, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport { cn, cr, focusStyles } from './utils'\n\nconst selectTriggerStyles = tv({\n    extend: focusStyles,\n    base: [\n        'border-muted flex h-10 w-full cursor-default items-center gap-4 gap-x-2 rounded-lg border py-2 pr-2 pl-3 text-start transition group-data-disabled:opacity-50 **:data-[slot=icon]:size-4',\n        'group-data-open:border-primary/70 data-hovered:border-primary/60 group-data-open:ring-primary/20 group-data-open:ring-4',\n        'text-fg group-data-invalid:border-danger group-data-invalid:ring-danger/20'\n    ],\n    variants: {\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\ninterface SelectProps<T extends object> extends Omit<SelectPrimitiveProps<T>, 'children'> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    items?: Iterable<T>\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    placement?: Placement\n    prefix?: React.ReactNode\n    className?: string\n    portal?: Element\n}\n\nconst Select = <T extends object>({\n    label,\n    description,\n    placement,\n    errorMessage,\n    children,\n    items,\n    className,\n    ...props\n}: SelectProps<T>) => {\n    return (\n        <SelectPrimitive {...props} className={cn('group flex w-full flex-col gap-1.5', className)}>\n            {label && <Label>{label}</Label>}\n            <Group className='relative'>\n                <Button\n                    className={cr(className, (className, renderProps) =>\n                        selectTriggerStyles({\n                            ...renderProps,\n                            className\n                        })\n                    )}\n                >\n                    {props.prefix && <span className='-mr-1'>{props.prefix}</span>}\n                    <SelectValue className='data-placeholder:text-muted-fg grid flex-1 grid-cols-[auto_1fr] items-center text-base *:data-avatar:*:-mx-0.5 *:data-avatar:-mx-0.5 *:data-avatar:*:mr-2 *:data-avatar:mr-2 *:data-[slot=icon]:-mx-0.5 *:data-[slot=icon]:mr-2 sm:text-sm [&_[slot=description]]:hidden' />\n\n                    <IconChevronDown className='text-muted-fg group-data-open:text-fg size-4 shrink-0 duration-300 group-data-disabled:opacity-50 group-data-open:rotate-180' />\n                </Button>\n            </Group>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Picker\n                UNSTABLE_portalContainer={props.portal}\n                trigger='Select'\n                placement={placement}\n            >\n                <ListBox.Picker aria-label='items' items={items}>\n                    {children}\n                </ListBox.Picker>\n            </Popover.Picker>\n        </SelectPrimitive>\n    )\n}\n\nSelect.Item = DropdownItem\nSelect.ItemDetails = DropdownItemDetails\nSelect.Section = DropdownSection\n\nexport { Select }\n"
  },
  "grid": {
    "component": "@/components/ui/grid",
    "raw": "import { type VariantProps, tv } from 'tailwind-variants'\n\nimport { cn } from './utils'\n\nconst gridStyles = tv(\n    {\n        base: 'grid',\n        variants: {\n            // Columns\n            columns: {\n                1: 'grid-cols-1',\n                2: 'grid-cols-2',\n                3: 'grid-cols-3',\n                4: 'grid-cols-4',\n                5: 'grid-cols-5',\n                6: 'grid-cols-6',\n                7: 'grid-cols-7',\n                8: 'grid-cols-8',\n                9: 'grid-cols-9',\n                10: 'grid-cols-10',\n                11: 'grid-cols-11',\n                12: 'grid-cols-12'\n            },\n\n            // Rows\n            rows: {\n                1: 'grid-rows-1',\n                2: 'grid-rows-2',\n                3: 'grid-rows-3',\n                4: 'grid-rows-4',\n                5: 'grid-rows-5',\n                6: 'grid-rows-6',\n                7: 'grid-rows-7',\n                8: 'grid-rows-8',\n                9: 'grid-rows-9',\n                10: 'grid-rows-10',\n                11: 'grid-rows-11',\n                12: 'grid-rows-12'\n            },\n\n            // Flow\n            flow: {\n                row: 'grid-flow-row',\n                col: 'grid-flow-col',\n                rowDense: 'grid-flow-row-dense',\n                colDense: 'grid-flow-col-dense',\n                dense: 'grid-flow-dense'\n            },\n\n            // Gap\n            gap: {\n                0: 'gap-0',\n                0.5: 'gap-0.5',\n                1: 'gap-1',\n                1.5: 'gap-1.5',\n                2: 'gap-2',\n                2.5: 'gap-2.5',\n                3: 'gap-3',\n                3.5: 'gap-3.5',\n                4: 'gap-4',\n                5: 'gap-5',\n                6: 'gap-6',\n                7: 'gap-7',\n                8: 'gap-8',\n                9: 'gap-9',\n                10: 'gap-10',\n                11: 'gap-11',\n                12: 'gap-12',\n                14: 'gap-14',\n                16: 'gap-16',\n                20: 'gap-20',\n                24: 'gap-24'\n            },\n            gapX: {\n                0: 'gap-x-0',\n                0.5: 'gap-x-0.5',\n                1: 'gap-x-1',\n                1.5: 'gap-x-1.5',\n                2: 'gap-x-2',\n                2.5: 'gap-x-2.5',\n                3: 'gap-x-3',\n                3.5: 'gap-x-3.5',\n                4: 'gap-x-4',\n                5: 'gap-x-5',\n                6: 'gap-x-6',\n                7: 'gap-x-7',\n                8: 'gap-x-8',\n                9: 'gap-x-9',\n                10: 'gap-x-10',\n                11: 'gap-x-11',\n                12: 'gap-x-12',\n                14: 'gap-x-14',\n                16: 'gap-x-16',\n                20: 'gap-x-20',\n                24: 'gap-x-24'\n            },\n            gapY: {\n                0: 'gap-y-0',\n                0.5: 'gap-y-0.5',\n                1: 'gap-y-1',\n                1.5: 'gap-y-1.5',\n                2: 'gap-y-2',\n                2.5: 'gap-y-2.5',\n                3: 'gap-y-3',\n                3.5: 'gap-y-3.5',\n                4: 'gap-y-4',\n                5: 'gap-y-5',\n                6: 'gap-y-6',\n                7: 'gap-y-7',\n                8: 'gap-y-8',\n                9: 'gap-y-9',\n                10: 'gap-y-10',\n                11: 'gap-y-11',\n                12: 'gap-y-12',\n                14: 'gap-y-14',\n                16: 'gap-y-16',\n                20: 'gap-y-20',\n                24: 'gap-y-24'\n            }\n        },\n        defaultVariants: {\n            columns: 1\n        }\n    },\n    {\n        responsiveVariants: true\n    }\n)\n\ninterface GridProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof gridStyles> {\n    className?: string\n    debug?: boolean\n}\n\nconst Grid = ({ className, gap, gapX, gapY, flow, columns, rows, ...props }: GridProps) => {\n    return (\n        <div\n            aria-label={props['aria-label'] || 'grid'}\n            className={gridStyles({\n                gap: gap ?? gapX ?? gapY,\n                gapX: gapX ?? gap,\n                gapY: gapY ?? gap,\n                flow: flow ?? 'row',\n                columns: columns ?? 1,\n                rows: rows ?? 1,\n                className:\n                    'debug' in props\n                        ? cn(\n                              '*:data-[slot=grid-cell]:border-warning *:data-[slot=grid-cell]:border',\n                              className\n                          )\n                        : className\n            })}\n            {...props}\n        >\n            {props.children}\n        </div>\n    )\n}\n\nconst gridItemStyles = tv(\n    {\n        base: 'grid-cell data-focused:outline-hidden',\n        variants: {\n            colSpan: {\n                auto: 'col-auto',\n                1: 'col-span-1',\n                2: 'col-span-2',\n                3: 'col-span-3',\n                4: 'col-span-4',\n                5: 'col-span-5',\n                6: 'col-span-6',\n                7: 'col-span-7',\n                8: 'col-span-8',\n                9: 'col-span-9',\n                10: 'col-span-10',\n                11: 'col-span-11',\n                12: 'col-span-12',\n                full: 'col-span-full'\n            },\n            colStart: {\n                1: 'col-start-1',\n                2: 'col-start-2',\n                3: 'col-start-3',\n                4: 'col-start-4',\n                5: 'col-start-5',\n                6: 'col-start-6',\n                7: 'col-start-7',\n                8: 'col-start-8',\n                9: 'col-start-9',\n                10: 'col-start-10',\n                11: 'col-start-11',\n                12: 'col-start-12',\n                13: 'col-start-13',\n                auto: 'col-start-auto'\n            },\n            colEnd: {\n                1: 'col-end-1',\n                2: 'col-end-2',\n                3: 'col-end-3',\n                4: 'col-end-4',\n                5: 'col-end-5',\n                6: 'col-end-6',\n                7: 'col-end-7',\n                8: 'col-end-8',\n                9: 'col-end-9',\n                10: 'col-end-10',\n                11: 'col-end-11',\n                12: 'col-end-12',\n                13: 'col-end-13',\n                auto: 'col-end-auto'\n            },\n            rowSpan: {\n                auto: 'row-auto',\n                1: 'row-span-1',\n                2: 'row-span-2',\n                3: 'row-span-3',\n                4: 'row-span-4',\n                5: 'row-span-5',\n                6: 'row-span-6',\n                7: 'row-span-7',\n                8: 'row-span-8',\n                9: 'row-span-9',\n                10: 'row-span-10',\n                11: 'row-span-11',\n                12: 'row-span-12',\n                full: 'row-span-full'\n            },\n            rowStart: {\n                1: 'row-start-1',\n                2: 'row-start-2',\n                3: 'row-start-3',\n                4: 'row-start-4',\n                5: 'row-start-5',\n                6: 'row-start-6',\n                7: 'row-start-7',\n                8: 'row-start-8',\n                9: 'row-start-9',\n                10: 'row-start-10',\n                11: 'row-start-11',\n                12: 'row-start-12',\n                13: 'row-start-13',\n                auto: 'row-start-auto'\n            },\n            rowEnd: {\n                1: 'row-end-1',\n                2: 'row-end-2',\n                3: 'row-end-3',\n                4: 'row-end-4',\n                5: 'row-end-5',\n                6: 'row-end-6',\n                7: 'row-end-7',\n                8: 'row-end-8',\n                9: 'row-end-9',\n                10: 'row-end-10',\n                11: 'row-end-11',\n                12: 'row-end-12',\n                13: 'row-end-13',\n                auto: 'row-end-auto'\n            }\n        }\n    },\n    {\n        responsiveVariants: ['sm', 'md', 'lg', 'xl', '2xl']\n    }\n)\n\ninterface GridItemProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof gridItemStyles> {\n    className?: string\n}\n\nconst GridItem = ({\n    children,\n    className,\n    colSpan,\n    rowSpan,\n    colStart,\n    colEnd,\n    rowStart,\n    rowEnd,\n    ...props\n}: GridItemProps) => {\n    return (\n        <div\n            data-slot='grid-cell'\n            className={gridItemStyles({\n                colSpan,\n                rowSpan,\n                colStart,\n                colEnd,\n                rowStart,\n                rowEnd,\n                className\n            })}\n            {...props}\n        >\n            {children}\n        </div>\n    )\n}\n\nGrid.Item = GridItem\n\nexport { Grid, gridItemStyles, gridStyles }\n"
  },
  "otp": {
    "component": "@/components/ui/otp",
    "raw": "'use client'\n\nimport { use } from 'react'\n\nimport { IconCircle } from 'hq-icons'\nimport { OTPInput, OTPInputContext } from 'input-otp'\n\nimport { cn } from './utils'\n\ntype OTPInputProps = React.ComponentProps<typeof OTPInput>\nconst OTP = ({ className, autoFocus = true, containerClassName, ref, ...props }: OTPInputProps) => (\n    <OTPInput\n        data-1p-ignore\n        ref={ref}\n        autoFocus={autoFocus}\n        containerClassName={cn(\n            'flex items-center gap-2 has-disabled:opacity-50',\n            containerClassName\n        )}\n        className={cn('bg-danger mt-auto h-[2.5rem] disabled:cursor-not-allowed', className)}\n        {...props}\n    />\n)\n\ntype OTPGroupProps = React.ComponentProps<'div'>\nconst OTPGroup = ({ className, ref, ...props }: OTPGroupProps) => (\n    <div ref={ref} className={cn('flex items-center gap-x-1.5', className)} {...props} />\n)\n\ninterface OTPSlotProps extends React.ComponentProps<'div'> {\n    index: number\n}\n\nconst OTPSlot = ({ index, className, ref, ...props }: OTPSlotProps) => {\n    const OTPContext = use(OTPInputContext)\n    const slot = OTPContext.slots[index]\n\n    if (!slot) {\n        throw new Error('Slot not found')\n    }\n\n    const { char, hasFakeCaret, isActive } = slot\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'border-muted relative flex size-10 items-center justify-center rounded-md border text-sm tabular-nums transition-all',\n                isActive && 'border-primary/70 ring-primary/20 z-10 ring-4',\n                className\n            )}\n            {...props}\n        >\n            {char}\n            {hasFakeCaret && (\n                <div className='pointer-events-none absolute inset-0 flex items-center justify-center'>\n                    <div className='animate-caret-blink bg-fg h-4 w-px duration-1000' />\n                </div>\n            )}\n        </div>\n    )\n}\n\ntype OTPSeparatorProps = React.ComponentProps<'div'>\nconst OTPSeparator = ({ ref, ...props }: OTPSeparatorProps) => (\n    <div ref={ref} {...props}>\n        <IconCircle className='fill-fg size-2' />\n    </div>\n)\n\nOTP.Group = OTPGroup\nOTP.Slot = OTPSlot\nOTP.Separator = OTPSeparator\n\nexport { OTP }\nexport type { OTPGroupProps, OTPSeparatorProps, OTPSlotProps }\n"
  },
  "progress-circle": {
    "component": "@/components/ui/progress-circle",
    "raw": "'use client'\n\nimport { ProgressBar, type ProgressBarProps } from 'react-aria-components'\n\nimport { cn } from './utils'\n\ninterface ProgressCircleProps extends Omit<ProgressBarProps, 'className'> {\n    className?: string\n    ref?: React.RefObject<HTMLDivElement>\n}\n\nconst ProgressCircle = ({ className, ref, ...props }: ProgressCircleProps) => {\n    const c = '50%'\n    const r = 'calc(50% - 2px)'\n    return (\n        <ProgressBar {...props} ref={ref}>\n            {({ percentage, isIndeterminate }) => (\n                <svg\n                    className={cn('size-4 shrink-0', className)}\n                    viewBox='0 0 24 24'\n                    fill='none'\n                    data-slot='icon'\n                >\n                    <circle\n                        cx={c}\n                        cy={c}\n                        r={r}\n                        strokeWidth={3}\n                        stroke='currentColor'\n                        strokeOpacity={0.25}\n                    />\n                    {!isIndeterminate ? (\n                        <circle\n                            cx={c}\n                            cy={c}\n                            r={r}\n                            strokeWidth={3}\n                            stroke='currentColor'\n                            pathLength={100}\n                            strokeDasharray='100 200'\n                            strokeDashoffset={100 - (percentage ?? 0)}\n                            strokeLinecap='round'\n                            transform='rotate(-90)'\n                            className='origin-center'\n                        />\n                    ) : (\n                        <circle\n                            cx={c}\n                            cy={c}\n                            r={r}\n                            strokeWidth={3}\n                            stroke='currentColor'\n                            pathLength={100}\n                            strokeDasharray='100 200'\n                            strokeDashoffset={100 - 30}\n                            strokeLinecap='round'\n                            className='origin-center animate-[spin_1s_cubic-bezier(0.4,_0,_0.2,_1)_infinite]'\n                        />\n                    )}\n                </svg>\n            )}\n        </ProgressBar>\n    )\n}\n\nexport { ProgressCircle }\nexport type { ProgressCircleProps }\n"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "'use client'\n\nimport { useEffect, useRef } from 'react'\n\nimport { IconX } from 'hq-icons'\nimport type { HeadingProps } from 'react-aria-components'\nimport {\n    Button as ButtonPrimitive,\n    Dialog as DialogPrimitive,\n    Heading,\n    Text\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button, type ButtonProps } from './button'\nimport { useMediaQuery } from './utils'\n\nconst dialogStyles = tv({\n    slots: {\n        root: [\n            'peer/dialog group/dialog relative flex max-h-[inherit] flex-col overflow-hidden outline-hidden'\n        ],\n        header: 'relative flex flex-col gap-0.5 p-4 sm:gap-1 sm:p-6 [&[data-slot=dialog-header]:has(+[data-slot=dialog-footer])]:pb-0',\n        description: 'text-muted-fg text-sm',\n        body: [\n            'isolate flex flex-1 flex-col overflow-y-auto px-4 has-[input]:pb-2 sm:px-6 [&_.sect]:p-2',\n            'max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding)-var(--dialog-header-height,0px)-var(--dialog-footer-height,0px))]'\n        ],\n        footer: 'isolate mt-auto flex flex-col-reverse justify-between gap-3 p-4 sm:flex-row sm:p-6',\n        closeIndicator:\n            'close data-focused:bg-muted data-hovered:bg-muted data-focus-visible:ring-primary absolute top-1 right-1 z-50 grid size-8 place-content-center rounded-xl data-focus-visible:ring-1 data-focused:outline-hidden sm:top-2 sm:right-2 sm:size-7 sm:rounded-md'\n    }\n})\n\nconst { root, header, description, body, footer, closeIndicator } = dialogStyles()\n\nconst Dialog = ({\n    role = 'dialog',\n    className,\n    ...props\n}: React.ComponentProps<typeof DialogPrimitive>) => {\n    return <DialogPrimitive role={role} className={root({ className })} {...props} />\n}\n\nconst Trigger = (props: React.ComponentProps<typeof ButtonPrimitive>) => (\n    <ButtonPrimitive {...props} />\n)\n\ntype DialogHeaderProps = React.HTMLAttributes<HTMLDivElement> & {\n    title?: string\n    description?: string\n}\n\nconst Header = ({ className, ...props }: DialogHeaderProps) => {\n    const headerRef = useRef<HTMLHeadingElement>(null)\n\n    useEffect(() => {\n        const header = headerRef.current\n        if (!header) {\n            return\n        }\n\n        const observer = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                header.parentElement?.style.setProperty(\n                    '--dialog-header-height',\n                    `${entry.target.clientHeight}px`\n                )\n            }\n        })\n\n        observer.observe(header)\n        return () => observer.unobserve(header)\n    }, [])\n\n    return (\n        <div data-slot='dialog-header' ref={headerRef} className={header({ className })}>\n            {props.title && <Title>{props.title}</Title>}\n            {props.description && <Description>{props.description}</Description>}\n            {!props.title && typeof props.children === 'string' ? (\n                <Title {...props} />\n            ) : (\n                props.children\n            )}\n        </div>\n    )\n}\n\nconst titleStyles = tv({\n    base: 'text-fg flex flex-1 items-center',\n    variants: {\n        level: {\n            1: 'text-lg font-semibold sm:text-xl',\n            2: 'text-lg font-semibold sm:text-xl',\n            3: 'text-base font-semibold sm:text-lg',\n            4: 'text-base font-semibold'\n        }\n    }\n})\n\ninterface DialogTitleProps extends Omit<HeadingProps, 'level'> {\n    level?: 1 | 2 | 3 | 4\n    ref?: React.Ref<HTMLHeadingElement>\n}\nconst Title = ({ level = 2, className, ref, ...props }: DialogTitleProps) => (\n    <Heading\n        slot='title'\n        level={level}\n        ref={ref}\n        className={titleStyles({ level, className })}\n        {...props}\n    />\n)\n\ntype DialogDescriptionProps = React.ComponentProps<'div'>\nconst Description = ({ className, ref, ...props }: DialogDescriptionProps) => (\n    <Text slot='description' className={description({ className })} ref={ref} {...props} />\n)\n\ntype DialogBodyProps = React.ComponentProps<'div'>\nconst Body = ({ className, ref, ...props }: DialogBodyProps) => (\n    <div data-slot='dialog-body' ref={ref} className={body({ className })} {...props} />\n)\n\ntype DialogFooterProps = React.ComponentProps<'div'>\nconst Footer = ({ className, ...props }: DialogFooterProps) => {\n    const footerRef = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        const footer = footerRef.current\n\n        if (!footer) {\n            return\n        }\n\n        const observer = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                footer.parentElement?.style.setProperty(\n                    '--dialog-footer-height',\n                    `${entry.target.clientHeight}px`\n                )\n            }\n        })\n\n        observer.observe(footer)\n        return () => {\n            observer.unobserve(footer)\n        }\n    }, [])\n    return (\n        <div\n            ref={footerRef}\n            data-slot='dialog-footer'\n            className={footer({ className })}\n            {...props}\n        />\n    )\n}\n\nconst Close = ({ className, variant = 'outline', ref, ...props }: ButtonProps) => {\n    return <Button slot='close' className={className} ref={ref} variant={variant} {...props} />\n}\n\ninterface CloseButtonIndicatorProps extends ButtonProps {\n    className?: string\n    isDismissable?: boolean | undefined\n}\n\nconst CloseIndicator = ({ className, ...props }: CloseButtonIndicatorProps) => {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n    const buttonRef = useRef<HTMLButtonElement>(null)\n\n    useEffect(() => {\n        if (isMobile && buttonRef.current) {\n            buttonRef.current.focus()\n        }\n    }, [isMobile])\n    return props.isDismissable ? (\n        <ButtonPrimitive\n            ref={buttonRef}\n            {...(isMobile ? { autoFocus: true } : {})}\n            aria-label='Close'\n            slot='close'\n            className={closeIndicator({ className })}\n        >\n            <IconX className='size-4' />\n        </ButtonPrimitive>\n    ) : null\n}\n\nDialog.Trigger = Trigger\nDialog.Header = Header\nDialog.Title = Title\nDialog.Description = Description\nDialog.Body = Body\nDialog.Footer = Footer\nDialog.Close = Close\nDialog.CloseIndicator = CloseIndicator\n\nexport { Dialog }\nexport type {\n    CloseButtonIndicatorProps,\n    DialogBodyProps,\n    DialogDescriptionProps,\n    DialogFooterProps,\n    DialogHeaderProps,\n    DialogTitleProps\n}\n"
  },
  "description-list": {
    "component": "@/components/ui/description-list",
    "raw": "import { tv } from 'tailwind-variants'\n\nconst descriptionListStyles = tv({\n    slots: {\n        dl: 'grid grid-cols-1 text-base/6 sm:grid-cols-[min(50%,calc(var(--spacing)*80))_auto] sm:text-sm/6',\n        dt: 'text-muted-fg col-start-1 border-t pt-3 first:border-none sm:py-3',\n        dd: 'text-fg pt-1 pb-3 sm:border-t sm:py-3 sm:nth-2:border-none'\n    }\n})\n\nconst { dl, dt, dd } = descriptionListStyles()\n\nconst DescriptionList = ({ className, ref, ...props }: React.ComponentProps<'dl'>) => {\n    return <dl ref={ref} className={dl({ className })} {...props} />\n}\n\nconst DescriptionTerm = ({ className, ref, ...props }: React.ComponentProps<'dt'>) => {\n    return <dt ref={ref} className={dt({ className })} {...props} />\n}\n\nconst DescriptionDetails = ({ className, ...props }: React.ComponentProps<'dd'>) => {\n    return <dd {...props} className={dd({ className })} />\n}\n\nDescriptionList.Term = DescriptionTerm\nDescriptionList.Details = DescriptionDetails\nexport { DescriptionList }\n"
  },
  "show-more": {
    "component": "@/components/ui/show-more",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconChevronDown } from 'hq-icons'\nimport { AnimatePresence, motion } from 'motion/react'\nimport { Text, ToggleButton } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { buttonStyles } from './button'\nimport { cn } from './utils'\n\nconst showMoreStyles = tv({\n    base: 'after:border-muted before:border-muted text-sm leading-6',\n    variants: {\n        orientation: {\n            vertical: 'mx-1 h-auto self-stretch',\n            horizontal: 'my-0.5 h-px w-full self-stretch'\n        }\n    },\n    compoundVariants: [\n        {\n            orientation: 'vertical',\n            className:\n                'mx-2 flex flex-col items-center before:mb-2 before:flex-1 before:border-l after:mt-2 after:flex-1 after:border-r'\n        },\n        {\n            orientation: 'horizontal',\n            className:\n                'my-2 flex items-center self-stretch before:mr-2 before:flex-1 before:border-t after:ml-2 after:flex-1 after:border-t'\n        }\n    ],\n    defaultVariants: {\n        orientation: 'horizontal'\n    }\n})\n\ninterface ShowMoreProps extends React.ComponentProps<typeof ToggleButton> {\n    className?: string\n    orientation?: 'horizontal' | 'vertical'\n    as?: 'text' | 'button'\n    text?: string\n}\n\nconst ShowMore = ({\n    as = 'button',\n    orientation = 'horizontal',\n    className,\n    ...props\n}: ShowMoreProps) => {\n    return (\n        <div className={showMoreStyles({ orientation, className })}>\n            {as === 'button' ? (\n                <ToggleButton\n                    {...props}\n                    className={buttonStyles({\n                        variant: 'outline',\n                        size: 'sm'\n                    })}\n                />\n            ) : (\n                <Text slot='description'>{props.text}</Text>\n            )}\n        </div>\n    )\n}\n\ninterface ContentRevealProps {\n    initialHeight?: number\n    initialOpacity?: number\n    showMoreText?: string\n    showLessText?: string\n    gradientTransparency?: boolean\n    children: React.ReactNode\n    className?: string\n}\n\nfunction ContentReveal({\n    children,\n    initialHeight = 128,\n    initialOpacity = 1,\n    showMoreText = 'Show More',\n    showLessText = 'Show Less',\n    gradientTransparency = true,\n    className\n}: ContentRevealProps) {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const animate = {\n        transition: { type: 'tween' },\n        height: isExpanded ? 'auto' : initialHeight,\n        opacity: isExpanded ? 1 : initialOpacity\n    }\n    return (\n        <div className={cn('relative overflow-visible', className)}>\n            <AnimatePresence initial={false}>\n                <div aria-expanded={isExpanded}>\n                    <motion.div\n                        style={{ overflow: 'hidden' }}\n                        initial={{ height: initialHeight, opacity: initialOpacity }}\n                        exit={{ height: initialHeight, opacity: initialOpacity }}\n                        animate={animate}\n                    >\n                        {children}\n                    </motion.div>\n                </div>\n            </AnimatePresence>\n            {gradientTransparency && (\n                <div\n                    className={cn(\n                        'via-bg to-bg absolute inset-0 rounded-lg bg-gradient-to-b from-transparent',\n                        isExpanded && 'hidden'\n                    )}\n                ></div>\n            )}\n            <ShowMore\n                className={cn('absolute -bottom-2')}\n                isSelected={isExpanded}\n                onChange={setIsExpanded}\n            >\n                {isExpanded ? showLessText : showMoreText}\n                <IconChevronDown\n                    className={cn(isExpanded ? 'rotate-180' : '', 'size-4 transition')}\n                />\n            </ShowMore>\n        </div>\n    )\n}\n\nexport { ContentReveal, ShowMore }\n"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport { IconCheck, IconMenu } from 'hq-icons'\nimport type {\n    ListBoxItemProps as ListBoxItemPrimitiveProps,\n    ListBoxProps\n} from 'react-aria-components'\nimport {\n    ListBoxItem as ListBoxItemPrimitive,\n    ListBox as ListBoxPrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DropdownItemDetails, DropdownSection } from './dropdown'\nimport { cn, cr, ctr } from './utils'\n\nconst listBoxStyles = tv({\n    base: 'flex max-h-96 w-full min-w-56 flex-col gap-y-1 overflow-y-auto rounded-xl border p-1 outline-hidden'\n})\n\nconst ListBox = <T extends object>({ className, ...props }: ListBoxProps<T>) => (\n    <ListBoxPrimitive\n        {...props}\n        className={cr(className, (className, renderProps) =>\n            listBoxStyles({ ...renderProps, className })\n        )}\n    />\n)\n\nconst listBoxItemStyles = tv({\n    base: 'lbi relative cursor-pointer rounded-[calc(var(--radius-lg)-1px)] p-2 text-base outline-hidden sm:text-sm',\n    variants: {\n        isFocusVisible: {\n            true: 'bg-secondary text-primary-fg'\n        },\n        isHovered: {\n            true: 'bg-primary text-primary-fg [&:hover_[slot=description]]:text-primary-fg/70 [&:hover_[slot=label]]:text-primary-fg [&_.text-muted-fg]:text-primary-fg/80'\n        },\n        isFocused: {\n            true: 'bg-primary text-primary-fg **:data-[slot=icon]:text-primary-fg **:data-[slot=label]:text-primary-fg [&_.text-muted-fg]:text-primary-fg/80'\n        },\n        isSelected: {\n            true: 'bg-primary text-primary-fg **:data-[slot=icon]:text-primary-fg **:data-[slot=label]:text-primary-fg [&_.text-muted-fg]:text-primary-fg/80'\n        },\n        isDragging: { true: 'bg-secondary text-secondary-fg cursor-grabbing' },\n        isDisabled: {\n            true: 'text-muted-fg cursor-default opacity-70'\n        }\n    }\n})\n\ninterface ListBoxItemProps<T extends object> extends ListBoxItemPrimitiveProps<T> {\n    className?: string\n}\n\nconst ListBoxItem = <T extends object>({ children, className, ...props }: ListBoxItemProps<T>) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <ListBoxItemPrimitive\n            textValue={textValue}\n            {...props}\n            className={cr(className, (className, renderProps) =>\n                listBoxItemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        >\n            {(values) => (\n                <div className='flex items-center gap-2'>\n                    <>\n                        {values.allowsDragging && (\n                            <IconMenu\n                                className={cn(\n                                    'text-muted-fg size-4 shrink-0 transition',\n                                    values.isFocused && 'text-fg',\n                                    values.isDragging && 'text-fg',\n                                    values.isSelected && 'text-primary-fg/70'\n                                )}\n                            />\n                        )}\n                        <div className='flex flex-col'>\n                            {typeof children === 'function' ? children(values) : children}\n\n                            {values.isSelected && (\n                                <span className='animate-in absolute top-3 right-2 lg:top-2.5'>\n                                    <IconCheck />\n                                </span>\n                            )}\n                        </div>\n                    </>\n                </div>\n            )}\n        </ListBoxItemPrimitive>\n    )\n}\n\ntype ListBoxPickerProps<T> = ListBoxProps<T>\n\nconst ListBoxPicker = <T extends object>({ className, ...props }: ListBoxPickerProps<T>) => {\n    return (\n        <ListBoxPrimitive\n            className={ctr(\n                className,\n                \"grid max-h-72 grid-cols-[auto_1fr] overflow-auto p-1 outline-hidden *:[[role='group']+[role=group]]:mt-4 *:[[role='group']+[role=separator]]:mt-1\"\n            )}\n            {...props}\n        />\n    )\n}\n\nconst ListBoxSection = ({ className, ...props }: React.ComponentProps<typeof DropdownSection>) => {\n    return (\n        <DropdownSection\n            className={cn(className, 'gap-y-1 [&_.lbi:last-child]:-mb-1.5')}\n            {...props}\n        />\n    )\n}\n\nconst ListBoxItemDetails = DropdownItemDetails\n\nListBox.Section = ListBoxSection\nListBox.ItemDetails = ListBoxItemDetails\nListBox.Item = ListBoxItem\nListBox.Picker = ListBoxPicker\n\nexport { ListBox, ListBoxPicker, listBoxStyles }\nexport type { ListBoxItemProps, ListBoxPickerProps }\n"
  },
  "toast": {
    "component": "@/components/ui/toast",
    "raw": "'use client'\n\nimport { IconCircleAlert, IconCircleCheck, IconInfo, IconTriangleAlert } from 'hq-icons'\nimport { Toaster as ToasterPrimitive, type ToasterProps } from 'sonner'\n\nimport { useTheme } from '@/components/providers'\n\nimport { buttonStyles } from './button'\nimport { Loader } from './loader'\nimport { cn } from './utils'\n\nconst Toast = ({ ...props }: ToasterProps) => {\n    const { theme = 'system' } = useTheme()\n    return (\n        <ToasterPrimitive\n            theme={theme as ToasterProps['theme']}\n            className='toaster group'\n            richColors\n            icons={{\n                info: <IconInfo className='text-warning-fg' />,\n                error: <IconTriangleAlert />,\n                warning: <IconCircleAlert />,\n                success: <IconCircleCheck />,\n                loading: <Loader variant='spin' />\n            }}\n            toastOptions={{\n                unstyled: true,\n                closeButton: true,\n                classNames: {\n                    toast: cn(\n                        'text-[0.925rem] not-has-data-description:**:data-title:font-normal!',\n                        'has-data-description:**:data-title:font-medium [&:has([data-description])_[data-title]]:text-base!',\n                        'has-data-[slot=icon]:**:data-content:pl-0',\n                        'has-data-button:*:data-content:mb-10',\n                        'flex w-full rounded-xl p-4 has-data-button:**:data-close-button:hidden!',\n                        'inset-ring-1 inset-ring-current/10 backdrop-blur-3xl'\n                    ),\n                    icon: 'absolute top-[0.2rem] [--toast-icon-margin-end:7px] *:data-[slot=icon]:text-fg *:data-[slot=icon]:size-4.5 **:data-[slot=icon]:text-current',\n                    title: '',\n                    description: '',\n                    default: 'bg-bg text-fg [--gray2:theme(--color-fg/10%)]',\n                    content: 'pr-6 *:data-description:text-current/65! *:data-description:text-sm!',\n                    error: 'inset-ring-danger/15 dark:inset-ring-danger/25 [--error-bg:theme(--color-danger/10%)] [--error-border:transparent] [--error-text:var(--color-danger)]',\n                    info: 'inset-ring-sky-600/15 dark:inset-ring-sky-500/20 [--info-border:transparent] [--info-bg:theme(--color-sky-500/10%)] [--info-text:var(--color-sky-700)] dark:[--info-bg:theme(--color-sky-500/15%)] dark:[--info-text:var(--color-sky-400)]',\n                    warning:\n                        'inset-ring-warning/30 dark:inset-ring-warning/15 [--warning-bg:theme(--color-warning/20%)] dark:[--warning-bg:theme(--color-warning/10%)] [--warning-border:transparent] [--warning-text:var(--color-warning-fg)] dark:[--warning-text:var(--color-warning)]',\n                    success:\n                        'inset-ring-success/20 [--success-bg:theme(--color-success/80%)] dark:[--success-bg:theme(--color-success/20%)] [--success-border:transparent] [--success-text:#fff] dark:[--success-text:var(--color-success)]',\n                    cancelButton: buttonStyles({\n                        className:\n                            'hover:border-muted-fg/10 hover:bg-secondary/90 self-start absolute bottom-4 left-4 justify-self-start',\n                        size: 'xs',\n                        variant: 'outline'\n                    }),\n                    actionButton: buttonStyles({\n                        className: 'absolute bottom-4 right-4 self-end justify-self-end',\n                        size: 'xs'\n                    }),\n                    closeButton:\n                        '*:[svg]:size-12 size-6! rounded-md! [--gray1:transparent] [--gray4:transparent] [--gray5:transparent] [--gray12:current] [--toast-close-button-start:full] [--toast-close-button-end:-6px] [--toast-close-button-transform:translate(-75%,60%)] absolute'\n                }\n            }}\n            {...props}\n        />\n    )\n}\n\nexport { Toast }\nexport type { ToasterProps }\n"
  },
  "toolbar": {
    "component": "@/components/ui/toolbar",
    "raw": "'use client'\n\nimport { createContext, useContext } from 'react'\n\nimport type { GroupProps, SeparatorProps, ToolbarProps } from 'react-aria-components'\nimport { Group, Toolbar as ToolbarPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Separator } from './separator'\nimport { Toggle, type ToggleProps } from './toggle'\nimport { cn, cr, ctr } from './utils'\n\nconst ToolbarContext = createContext<{ orientation?: ToolbarProps['orientation'] }>({\n    orientation: 'horizontal'\n})\n\nconst toolbarStyles = tv({\n    base: 'group flex gap-2',\n    variants: {\n        orientation: {\n            horizontal: 'flex-row [-ms-overflow-style:none]',\n            vertical: 'flex-col items-start'\n        }\n    }\n})\n\nconst Toolbar = ({ orientation = 'horizontal', className, ...props }: ToolbarProps) => {\n    return (\n        <ToolbarContext.Provider value={{ orientation }}>\n            <ToolbarPrimitive\n                orientation={orientation}\n                {...props}\n                className={cr(className, (className, renderProps) =>\n                    toolbarStyles({ ...renderProps, className })\n                )}\n            />\n        </ToolbarContext.Provider>\n    )\n}\n\nconst ToolbarGroupContext = createContext<{ isDisabled?: boolean }>({})\n\ntype ToolbarGroupProps = GroupProps\nconst ToolbarGroup = ({ isDisabled, className, ...props }: ToolbarGroupProps) => {\n    return (\n        <ToolbarGroupContext.Provider value={{ isDisabled }}>\n            <Group\n                className={ctr(\n                    className,\n                    'flex gap-2 group-data-[orientation=vertical]:flex-col group-data-[orientation=vertical]:items-start'\n                )}\n                {...props}\n            >\n                {props.children}\n            </Group>\n        </ToolbarGroupContext.Provider>\n    )\n}\n\ntype ToggleItemProps = ToggleProps\nconst ToolbarItem = ({ isDisabled, ref, ...props }: ToggleItemProps) => {\n    const context = useContext(ToolbarGroupContext)\n    const effectiveIsDisabled = isDisabled || context.isDisabled\n\n    return <Toggle ref={ref} isDisabled={effectiveIsDisabled} {...props} />\n}\ntype ToolbarSeparatorProps = SeparatorProps\nconst ToolbarSeparator = ({ className, ...props }: ToolbarSeparatorProps) => {\n    const { orientation } = useContext(ToolbarContext)\n    const effectiveOrientation = orientation === 'vertical' ? 'horizontal' : 'vertical'\n    return (\n        <Separator\n            orientation={effectiveOrientation}\n            className={cn(effectiveOrientation === 'vertical' ? 'mx-1.5' : 'my-1.5 w-9', className)}\n            {...props}\n        />\n    )\n}\n\nToolbar.Group = ToolbarGroup\nToolbar.Separator = ToolbarSeparator\nToolbar.Item = ToolbarItem\n\nexport { Toolbar }\nexport type { ToggleItemProps, ToolbarGroupProps, ToolbarProps, ToolbarSeparatorProps }\n"
  },
  "color-swatch-picker": {
    "component": "@/components/ui/color-swatch-picker",
    "raw": "'use client'\n\nimport type { ColorSwatchPickerItemProps, ColorSwatchPickerProps } from 'react-aria-components'\nimport {\n    ColorSwatchPickerItem,\n    ColorSwatchPicker as ColorSwatchPickerPrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { ColorSwatch } from './color-swatch'\nimport { ctr, focusRing } from './utils'\n\nconst ColorSwatchPicker = ({\n    children,\n    className,\n    layout = 'grid',\n    ...props\n}: ColorSwatchPickerProps) => {\n    return (\n        <ColorSwatchPickerPrimitive\n            layout={layout}\n            {...props}\n            className={ctr(className, 'flex gap-1')}\n        >\n            {children}\n        </ColorSwatchPickerPrimitive>\n    )\n}\n\nconst itemStyles = tv({\n    extend: focusRing,\n    base: 'relative rounded-lg data-disabled:opacity-50'\n})\n\nconst SwatchPickerItem = (props: ColorSwatchPickerItemProps) => {\n    return (\n        <ColorSwatchPickerItem {...props} className={itemStyles}>\n            {({ isSelected }) => (\n                <>\n                    <ColorSwatch />\n                    {isSelected && (\n                        <div className='ring-fg/30 absolute top-0 left-0 h-full w-full rounded-lg ring-2 outline-hidden ring-inset' />\n                    )}\n                </>\n            )}\n        </ColorSwatchPickerItem>\n    )\n}\n\nColorSwatchPicker.Item = SwatchPickerItem\n\nexport { ColorSwatchPicker }\n"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconX } from 'hq-icons'\nimport type {\n    TagGroupProps as TagGroupPrimitiveProps,\n    TagListProps,\n    TagProps as TagPrimitiveProps\n} from 'react-aria-components'\nimport {\n    Button,\n    TagGroup as TagGroupPrimitive,\n    TagList as TagListPrimitive,\n    Tag as TagPrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { badgeStyles } from './badge'\nimport { Description, Label } from './field'\nimport { cn, cr, ctr, focusStyles } from './utils'\n\nconst { variant, shape: badgeShape } = badgeStyles.variants\n\nconst variants = {\n    primary: {\n        base: [\n            variant.primary,\n            '**:[[slot=remove]]:data-hovered:bg-primary **:[[slot=remove]]:data-hovered:text-primary-fg'\n        ],\n        selected: [\n            'bg-primary dark:data-hovered:bg-primary dark:bg-primary data-hovered:bg-primary ring-primary ring-inset text-primary-fg dark:text-primary-fg data-hovered:text-primary-fg',\n            '**:[[slot=remove]]:data-hovered:bg-primary-fg/50 **:[[slot=remove]]:data-hovered:text-primary'\n        ]\n    },\n    secondary: {\n        base: [\n            variant.secondary,\n            '**:[[slot=remove]]:data-hovered:bg-secondary-fg **:[[slot=remove]]:data-hovered:text-secondary'\n        ],\n        selected: [\n            'bg-secondary dark:bg-secondary/80 dark:text-secondary-fg text-secondary-fg ring-secondary ring-inset',\n            '**:[[slot=remove]]:data-hovered:bg-secondary-fg/80 **:[[slot=remove]]:data-hovered:text-secondary'\n        ]\n    },\n    success: {\n        base: [\n            variant.success,\n            '**:[[slot=remove]]:data-hovered:bg-success **:[[slot=remove]]:data-hovered:text-success-fg'\n        ],\n        selected: [\n            'bg-success dark:bg-success ring-success ring-inset dark:text-success-fg dark:data-hovered:bg-success data-hovered:bg-success text-success-fg data-hovered:text-success-fg',\n            '**:[[slot=remove]]:data-hovered:bg-success-fg/80 **:[[slot=remove]]:data-hovered:text-success'\n        ]\n    },\n    warning: {\n        base: [\n            variant.warning,\n            '**:[[slot=remove]]:data-hovered:bg-warning **:[[slot=remove]]:data-hovered:text-warning-fg'\n        ],\n        selected: [\n            'bg-warning dark:data-hovered:bg-warning dark:bg-warning dark:text-bg data-hovered:bg-warning text-warning-fg data-hovered:text-warning-fg',\n            '**:[[slot=remove]]:data-hovered:bg-warning-fg/80 **:[[slot=remove]]:data-hovered:text-warning'\n        ]\n    },\n    danger: {\n        base: [\n            variant.danger,\n            '**:[[slot=remove]]:data-hovered:bg-danger **:[[slot=remove]]:data-hovered:text-danger-fg'\n        ],\n        selected: [\n            'bg-danger dark:bg-danger dark:data-hovered:bg-danger/90 data-hovered:bg-danger text-danger-fg ring-danger dark:text-danger-fg data-hovered:text-danger-fg',\n            '**:[[slot=remove]]:data-hovered:bg-danger-fg/80 **:[[slot=remove]]:data-hovered:text-danger'\n        ]\n    },\n    dark: {\n        base: [\n            variant.dark,\n            '**:[[slot=remove]]:data-hovered:bg-fg/40 **:[[slot=remove]]:data-hovered:text-fg'\n        ],\n        selected: [\n            'bg-fg/90 dark:bg-fg/90 dark:data-hovered:bg-fg/90 data-hovered:bg-fg/90 text-bg dark:text-bg data-hovered:text-bg',\n            '**:[[slot=remove]]:data-hovered:bg-bg/80 **:[[slot=remove]]:data-hovered:text-fg'\n        ]\n    }\n}\n\ntype RestrictedVariant = 'primary' | 'secondary' | 'dark'\n\ntype Variant = keyof typeof variant\n\ntype Shape = keyof typeof badgeShape\n\ntype TagGroupContextValue = {\n    variant: Variant\n    shape: Shape\n}\n\nconst TagGroupContext = React.createContext<TagGroupContextValue>({\n    variant: 'primary',\n    shape: 'rounded'\n})\n\ninterface TagGroupProps extends TagGroupPrimitiveProps {\n    variant?: Variant\n    shape?: 'rounded' | 'sharp' | 'circle'\n    errorMessage?: string\n    label?: string\n    description?: string\n    ref?: React.RefObject<HTMLDivElement>\n}\n\nconst TagGroup = ({ children, ref, ...props }: TagGroupProps) => {\n    return (\n        <TagGroupPrimitive\n            ref={ref}\n            className={cn('flex flex-col flex-wrap', props.className)}\n            {...props}\n        >\n            <TagGroupContext.Provider\n                value={{\n                    variant: props.variant || 'primary',\n                    shape: props.shape || 'rounded'\n                }}\n            >\n                {props.label && <Label className='mb-1'>{props.label}</Label>}\n                {children}\n                {props.description && <Description>{props.description}</Description>}\n            </TagGroupContext.Provider>\n        </TagGroupPrimitive>\n    )\n}\n\nconst TagList = <T extends object>({ className, ...props }: TagListProps<T>) => {\n    return <TagListPrimitive {...props} className={ctr(className, 'flex flex-wrap gap-2')} />\n}\n\nconst tagStyles = tv({\n    extend: focusStyles,\n    base: [badgeStyles.base, 'tag cursor-pointer'],\n    variants: {\n        isFocused: { true: 'ring-1' },\n        isDisabled: { true: 'cursor-default opacity-50' },\n        allowsRemoving: { true: 'pr-1' }\n    }\n})\n\ninterface TagProps extends TagPrimitiveProps {\n    variant?: Variant\n    shape?: Shape\n}\n\nconst Tag = ({ className, variant, shape, ...props }: TagProps) => {\n    const textValue = typeof props.children === 'string' ? props.children : undefined\n    const groupContext = React.useContext(TagGroupContext)\n\n    return (\n        <TagPrimitive\n            textValue={textValue}\n            {...props}\n            className={cr(className, (_, renderProps) => {\n                const finalVariant = variant || groupContext.variant\n                const finalShape = shape || groupContext.shape\n\n                return tagStyles({\n                    ...renderProps,\n                    className: cn([\n                        variants[finalVariant]?.base,\n                        badgeShape[finalShape],\n                        renderProps.isSelected ? variants[finalVariant].selected : undefined\n                    ])\n                })\n            })}\n        >\n            {({ allowsRemoving }) => {\n                return (\n                    <>\n                        {props.children as React.ReactNode}\n                        {allowsRemoving && (\n                            <Button\n                                slot='remove'\n                                className='data-focus-visible:ring-primary -mr-0.5 grid size-3.5 place-content-center rounded data-focus-visible:ring-1 data-focused:outline-none'\n                            >\n                                <IconX className='size-3 shrink-0' />\n                            </Button>\n                        )}\n                    </>\n                )\n            }}\n        </TagPrimitive>\n    )\n}\n\nTag.Group = TagGroup\nTag.List = TagList\n\nexport { Tag }\nexport type { RestrictedVariant, TagGroupProps, TagListProps, TagProps }\n"
  }
}